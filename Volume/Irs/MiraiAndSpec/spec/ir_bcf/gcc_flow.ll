; ModuleID = 'host/ir_bcf/gcc_flow.ll'
source_filename = "flow.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.anon.3 = type { i32, i32 }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.simple_bitmap_def = type { i32, i32, i32, [1 x i64] }
%struct.reg_info_def = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct.propagate_block_info = type { %struct.basic_block_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.rtx_def**, %struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32, i32, i32 }
%struct.find_regno_partial_param = type { i32, %struct.rtx_def* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }

@warn_missing_noreturn = external global i32, align 4
@cfun = external global %struct.function*, align 8
@entry_exit_blocks = external global [2 x %struct.basic_block_def], align 16
@lang_missing_noreturn_ok_p = common global i32 (%union.tree_node*)* null, align 8
@.str = private unnamed_addr constant [62 x i8] c"function might be possible candidate for attribute `noreturn'\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"`noreturn' function does return\00", align 1
@warn_return_type = external global i32, align 4
@basic_block_for_insn = external global %struct.varray_head_tag*, align 8
@.str.2 = private unnamed_addr constant [41 x i8] c"control reaches end of non-void function\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"flow.c\00", align 1
@__FUNCTION__.first_insn_after_basic_block_note = private unnamed_addr constant [34 x i8] c"first_insn_after_basic_block_note\00", align 1
@life_analysis.eliminables = internal constant [4 x %struct.anon.3] [%struct.anon.3 { i32 16, i32 7 }, %struct.anon.3 { i32 16, i32 6 }, %struct.anon.3 { i32 20, i32 7 }, %struct.anon.3 { i32 20, i32 6 }], align 16
@elim_reg_set = internal global i64 0, align 8
@optimize = external global i32, align 4
@reload_completed = external global i32, align 4
@regs_ever_live = external global [53 x i8], align 16
@__FUNCTION__.update_life_info = private unnamed_addr constant [17 x i8] c"update_life_info\00", align 1
@n_basic_blocks = external global i32, align 4
@basic_block_info = external global %struct.varray_head_tag*, align 8
@reg_n_info = common global %struct.varray_head_tag* null, align 8
@regs_live_at_setjmp = common global %struct.bitmap_head_def* null, align 8
@rtx_class = external constant [153 x i8], align 16
@const_tiny_rtx = external global [3 x [59 x %struct.rtx_def*]], align 16
@flow_obstack = external global %struct.obstack, align 8
@max_regno = common global i32 0, align 4
@current_function_decl = external global %union.tree_node*, align 8
@.str.4 = private unnamed_addr constant [42 x i8] c"Attempt to delete prologue/epilogue insn:\00", align 1
@__FUNCTION__.propagate_one_insn = private unnamed_addr constant [19 x i8] c"propagate_one_insn\00", align 1
@global_rtl = external global [11 x %struct.rtx_def*], align 16
@regs_invalidated_by_call = external global i64, align 8
@reg_raw_mode = external global [53 x i32], align 16
@global_regs = external global [53 x i8], align 16
@fixed_regs = external global [53 x i8], align 16
@rtx_format = external constant [153 x i8*], align 16
@rtx_length = external constant [153 x i8], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c" (nil)\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c" [%s]\00", align 1
@reg_names = external global [53 x i8*], align 16
@stderr = external global %struct._IO_FILE*, align 8
@mode_class = external constant [59 x i32], align 16
@target_flags = external global i32, align 4
@mode_size = external constant [59 x i8], align 16
@flow2_completed = common global i32 0, align 4
@regset_bytes = common global i32 0, align 4
@regset_size = common global i32 0, align 4
@regs_may_share = common global %struct.rtx_def* null, align 8
@rtl_dump_file = external global %struct._IO_FILE*, align 8
@.str.8 = private unnamed_addr constant [48 x i8] c"live_at_start mismatch in bb %d, aborting\0ANew:\0A\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"Old:\0A\00", align 1
@__FUNCTION__.verify_local_live_at_start = private unnamed_addr constant [27 x i8] c"verify_local_live_at_start\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"Register %d died unexpectedly.\0A\00", align 1
@__FUNCTION__.verify_wide_reg = private unnamed_addr constant [16 x i8] c"verify_wide_reg\00", align 1
@mode_bitsize = external constant [59 x i16], align 16
@.str.11 = private unnamed_addr constant [27 x i8] c"Dead jumptable %i removed\0A\00", align 1
@current_function_sp_is_unchanging = external global i32, align 4
@flag_omit_frame_pointer = external global i32, align 4
@frame_pointer_needed = external global i32, align 4
@flag_pic = external global i32, align 4
@__FUNCTION__.mark_reg = private unnamed_addr constant [9 x i8] c"mark_reg\00", align 1
@call_used_regs = external global [53 x i8], align 16
@in_ssa_form = external global i32, align 4
@__FUNCTION__.mark_set_regs = private unnamed_addr constant [14 x i8] c"mark_set_regs\00", align 1
@optimize_size = external global i32, align 4
@flag_branch_probabilities = external global i32, align 4
@__FUNCTION__.mark_used_regs = private unnamed_addr constant [15 x i8] c"mark_used_regs\00", align 1
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0

; Function Attrs: noinline nounwind uwtable
define void @check_function_return_warnings() #0 {
  %1 = alloca i32, align 4
  %2 = load i32, i32* @warn_missing_noreturn, align 4
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %44

; <label>:4:                                      ; preds = %0
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %6 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 6
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8
  %8 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %8, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = lshr i32 %10, 11
  %12 = and i32 %11, 1
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %44, label %14

; <label>:14:                                     ; preds = %4
  %15 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 4), align 16
  %16 = icmp eq %struct.edge_def* %15, null
  br i1 %16, label %17, label %44

; <label>:17:                                     ; preds = %14
  %18 = load i32 (%union.tree_node*)*, i32 (%union.tree_node*)** @lang_missing_noreturn_ok_p, align 8
  %19 = icmp ne i32 (%union.tree_node*)* %18, null
  br i1 %19, label %20, label %44

; <label>:20:                                     ; preds = %17
  %21 = load i32, i32* @x
  %22 = load i32, i32* @y
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %20
  %29 = load i32 (%union.tree_node*)*, i32 (%union.tree_node*)** @lang_missing_noreturn_ok_p, align 8
  %30 = load %struct.function*, %struct.function** @cfun, align 8
  %31 = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 6
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8
  %33 = call i32 %29(%union.tree_node* %32)
  %34 = icmp ne i32 %33, 0
  %35 = load i32, i32* @x
  %36 = load i32, i32* @y
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %34, label %44, label %43

; <label>:43:                                     ; preds = %originalBBpart2
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i32 0, i32 0))
  br label %44

; <label>:44:                                     ; preds = %43, %originalBBpart2, %17, %14, %4, %0
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %46 = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 6
  %47 = load %union.tree_node*, %union.tree_node** %46, align 8
  %48 = bitcast %union.tree_node* %47 to %struct.tree_common*
  %49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %48, i32 0, i32 2
  %50 = load i32, i32* %49, align 8
  %51 = lshr i32 %50, 11
  %52 = and i32 %51, 1
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %74

; <label>:54:                                     ; preds = %44
  %55 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 4), align 16
  %56 = icmp ne %struct.edge_def* %55, null
  br i1 %56, label %57, label %74

; <label>:57:                                     ; preds = %54
  %58 = load i32, i32* @x
  %59 = load i32, i32* @y
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %57
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i32 0, i32 0))
  %66 = load i32, i32* @x
  %67 = load i32, i32* @y
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %179

; <label>:74:                                     ; preds = %54, %44
  %75 = load i32, i32* @warn_return_type, align 4
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %162

; <label>:77:                                     ; preds = %74
  %78 = load i32, i32* @x
  %79 = load i32, i32* @y
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %77
  %86 = load %struct.function*, %struct.function** @cfun, align 8
  %87 = getelementptr inbounds %struct.function, %struct.function* %86, i32 0, i32 31
  %88 = load %struct.rtx_def*, %struct.rtx_def** %87, align 8
  %89 = icmp ne %struct.rtx_def* %88, null
  %90 = load i32, i32* @x
  %91 = load i32, i32* @y
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %89, label %98, label %162

; <label>:98:                                     ; preds = %originalBBpart28
  %99 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 4), align 16
  %100 = icmp ne %struct.edge_def* %99, null
  br i1 %100, label %101, label %162

; <label>:101:                                    ; preds = %98
  %102 = load i32, i32* @x
  %103 = load i32, i32* @y
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %101
  %110 = call i32 @get_max_uid()
  store i32 %110, i32* %1, align 4
  %111 = load %struct.function*, %struct.function** @cfun, align 8
  %112 = getelementptr inbounds %struct.function, %struct.function* %111, i32 0, i32 31
  %113 = load %struct.rtx_def*, %struct.rtx_def** %112, align 8
  %114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %114, i64 0, i64 0
  %116 = bitcast %union.rtunion_def* %115 to i32*
  %117 = load i32, i32* %116, align 8
  %118 = load i32, i32* %1, align 4
  %119 = icmp slt i32 %117, %118
  %120 = load i32, i32* @x
  %121 = load i32, i32* @y
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %119, label %128, label %161

; <label>:128:                                    ; preds = %originalBBpart212
  %129 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %130 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %129, i32 0, i32 4
  %131 = bitcast %union.varray_data_tag* %130 to [1 x %struct.basic_block_def*]*
  %132 = load %struct.function*, %struct.function** @cfun, align 8
  %133 = getelementptr inbounds %struct.function, %struct.function* %132, i32 0, i32 31
  %134 = load %struct.rtx_def*, %struct.rtx_def** %133, align 8
  %135 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %134, i32 0, i32 1
  %136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %135, i64 0, i64 0
  %137 = bitcast %union.rtunion_def* %136 to i32*
  %138 = load i32, i32* %137, align 8
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %131, i64 0, i64 %139
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %140, align 8
  %142 = icmp ne %struct.basic_block_def* %141, null
  br i1 %142, label %143, label %160

; <label>:143:                                    ; preds = %128
  %144 = load i32, i32* @x
  %145 = load i32, i32* @y
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %143
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i32 0, i32 0))
  %152 = load i32, i32* @x
  %153 = load i32, i32* @y
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %160

; <label>:160:                                    ; preds = %originalBBpart216, %128
  br label %161

; <label>:161:                                    ; preds = %160, %originalBBpart212
  br label %162

; <label>:162:                                    ; preds = %161, %98, %originalBBpart28, %74
  %163 = load i32, i32* @x
  %164 = load i32, i32* @y
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %162
  %171 = load i32, i32* @x
  %172 = load i32, i32* @y
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %179

; <label>:179:                                    ; preds = %originalBBpart220, %originalBBpart24
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %20
  %180 = load i32 (%union.tree_node*)*, i32 (%union.tree_node*)** @lang_missing_noreturn_ok_p, align 8
  %181 = load %struct.function*, %struct.function** @cfun, align 8
  %182 = getelementptr inbounds %struct.function, %struct.function* %181, i32 0, i32 6
  %183 = load %union.tree_node*, %union.tree_node** %182, align 8
  %184 = call i32 %180(%union.tree_node* %183)
  %185 = icmp ne i32 %184, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %57
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i32 0, i32 0))
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %77
  %186 = load %struct.function*, %struct.function** @cfun, align 8
  %187 = getelementptr inbounds %struct.function, %struct.function* %186, i32 0, i32 31
  %188 = load %struct.rtx_def*, %struct.rtx_def** %187, align 8
  %189 = icmp ne %struct.rtx_def* %188, null
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %101
  %190 = call i32 @get_max_uid()
  store i32 %190, i32* %1, align 4
  %191 = load %struct.function*, %struct.function** @cfun, align 8
  %192 = getelementptr inbounds %struct.function, %struct.function* %191, i32 0, i32 31
  %193 = load %struct.rtx_def*, %struct.rtx_def** %192, align 8
  %194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %193, i32 0, i32 1
  %195 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %194, i64 0, i64 0
  %196 = bitcast %union.rtunion_def* %195 to i32*
  %197 = load i32, i32* %196, align 8
  %198 = load i32, i32* %1, align 4
  %199 = icmp slt i32 %197, %198
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %143
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i32 0, i32 0))
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %162
  br label %originalBB18
}

declare void @warning(i8*, ...) #1

declare i32 @get_max_uid() #1

; Function Attrs: noinline nounwind uwtable
define %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def*) #0 {
  %2 = alloca %struct.rtx_def*, align 8
  %3 = alloca %struct.basic_block_def*, align 8
  %4 = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %0, %struct.basic_block_def** %3, align 8
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %3, align 8
  %6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %4, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %9 = icmp eq %struct.rtx_def* %8, null
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %1
  store %struct.rtx_def* null, %struct.rtx_def** %2, align 8
  br label %91

; <label>:11:                                     ; preds = %1
  %12 = load i32, i32* @x.1
  %13 = load i32, i32* @y.2
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %11
  %20 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 65535
  %24 = icmp eq i32 %23, 36
  %25 = load i32, i32* @x.1
  %26 = load i32, i32* @y.2
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %24, label %33, label %55

; <label>:33:                                     ; preds = %originalBBpart2
  %34 = load i32, i32* @x.1
  %35 = load i32, i32* @y.2
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %33
  %42 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %43, i64 0, i64 2
  %45 = bitcast %union.rtunion_def* %44 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  store %struct.rtx_def* %46, %struct.rtx_def** %4, align 8
  %47 = load i32, i32* @x.1
  %48 = load i32, i32* @y.2
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %55

; <label>:55:                                     ; preds = %originalBBpart24, %originalBBpart2
  %56 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %58 = load i32, i32* %57, align 8
  %59 = and i32 %58, 65535
  %60 = icmp eq i32 %59, 37
  br i1 %60, label %61, label %68

; <label>:61:                                     ; preds = %55
  %62 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %63, i64 0, i64 4
  %65 = bitcast %union.rtunion_def* %64 to i32*
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %66, -80
  br i1 %67, label %85, label %68

; <label>:68:                                     ; preds = %61, %55
  %69 = load i32, i32* @x.1
  %70 = load i32, i32* @y.2
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %68
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 400, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__FUNCTION__.first_insn_after_basic_block_note, i32 0, i32 0)) #5
  %77 = load i32, i32* @x.1
  %78 = load i32, i32* @y.2
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable

; <label>:85:                                     ; preds = %61
  %86 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1
  %88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %87, i64 0, i64 2
  %89 = bitcast %union.rtunion_def* %88 to %struct.rtx_def**
  %90 = load %struct.rtx_def*, %struct.rtx_def** %89, align 8
  store %struct.rtx_def* %90, %struct.rtx_def** %2, align 8
  br label %91

; <label>:91:                                     ; preds = %85, %10
  %92 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8
  ret %struct.rtx_def* %92

originalBBalteredBB:                              ; preds = %originalBB, %11
  %93 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %95 = load i32, i32* %94, align 8
  %_ = sub i32 0, %95
  %gen = add i32 %_, 65535
  %96 = and i32 %95, 65535
  %97 = icmp eq i32 %96, 36
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %98 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %99, i64 0, i64 2
  %101 = bitcast %union.rtunion_def* %100 to %struct.rtx_def**
  %102 = load %struct.rtx_def*, %struct.rtx_def** %101, align 8
  store %struct.rtx_def* %102, %struct.rtx_def** %4, align 8
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %68
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 400, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__FUNCTION__.first_insn_after_basic_block_note, i32 0, i32 0)) #5
  br label %originalBB6
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define void @life_analysis(%struct.rtx_def*, %struct._IO_FILE*, i32) #0 {
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.rtx_def* %0, %struct.rtx_def** %4, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %5, align 8
  store i32 %2, i32* %6, align 4
  store i64 0, i64* @elim_reg_set, align 8
  store i32 0, i32* %7, align 4
  br label %8

; <label>:8:                                      ; preds = %originalBBpart215, %3
  %9 = load i32, i32* @x.3
  %10 = load i32, i32* @y.4
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %8
  %17 = load i32, i32* %7, align 4
  %18 = icmp slt i32 %17, 4
  %19 = load i32, i32* @x.3
  %20 = load i32, i32* @y.4
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %56

; <label>:27:                                     ; preds = %originalBBpart2
  %28 = load i32, i32* %7, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [4 x %struct.anon.3], [4 x %struct.anon.3]* @life_analysis.eliminables, i64 0, i64 %29
  %31 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = zext i32 %32 to i64
  %34 = shl i64 1, %33
  %35 = load i64, i64* @elim_reg_set, align 8
  %36 = or i64 %35, %34
  store i64 %36, i64* @elim_reg_set, align 8
  br label %37

; <label>:37:                                     ; preds = %27
  %38 = load i32, i32* @x.3
  %39 = load i32, i32* @y.4
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %37
  %46 = load i32, i32* %7, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %7, align 4
  %48 = load i32, i32* @x.3
  %49 = load i32, i32* @y.4
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart215, label %originalBB1alteredBB

originalBBpart215:                                ; preds = %originalBB1
  br label %8

; <label>:56:                                     ; preds = %originalBBpart2
  %57 = load i32, i32* @optimize, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %62, label %59

; <label>:59:                                     ; preds = %56
  %60 = load i32, i32* %6, align 4
  %61 = and i32 %60, -99
  store i32 %61, i32* %6, align 4
  br label %62

; <label>:62:                                     ; preds = %59, %56
  %63 = load i32, i32* @reload_completed, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %84

; <label>:65:                                     ; preds = %62
  %66 = load i32, i32* @x.3
  %67 = load i32, i32* @y.4
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %65
  %74 = load i32, i32* %6, align 4
  %75 = and i32 %74, -69
  store i32 %75, i32* %6, align 4
  %76 = load i32, i32* @x.3
  %77 = load i32, i32* @y.4
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart221, label %originalBB17alteredBB

originalBBpart221:                                ; preds = %originalBB17
  br label %84

; <label>:84:                                     ; preds = %originalBBpart221, %62
  %85 = load i32, i32* @optimize, align 4
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %108

; <label>:87:                                     ; preds = %84
  %88 = load i32, i32* @x.3
  %89 = load i32, i32* @y.4
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %87
  %96 = load i32, i32* %6, align 4
  %97 = and i32 %96, 16
  %98 = icmp ne i32 %97, 0
  %99 = load i32, i32* @x.3
  %100 = load i32, i32* @y.4
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart237, label %originalBB23alteredBB

originalBBpart237:                                ; preds = %originalBB23
  br i1 %98, label %107, label %108

; <label>:107:                                    ; preds = %originalBBpart237
  call void @init_alias_analysis()
  br label %108

; <label>:108:                                    ; preds = %107, %originalBBpart237, %84
  %109 = load i32, i32* @x.3
  %110 = load i32, i32* @y.4
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %108
  %117 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  call void @delete_noop_moves(%struct.rtx_def* %117)
  %118 = call zeroext i1 @purge_all_dead_edges(i32 0)
  %119 = load i32, i32* @reload_completed, align 4
  %120 = icmp ne i32 %119, 0
  %121 = load i32, i32* @x.3
  %122 = load i32, i32* @y.4
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br i1 %120, label %131, label %129

; <label>:129:                                    ; preds = %originalBBpart241
  %130 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  call void @notice_stack_pointer_modification(%struct.rtx_def* %130)
  br label %131

; <label>:131:                                    ; preds = %129, %originalBBpart241
  call void @allocate_reg_life_data()
  call void @allocate_bb_life_data()
  %132 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 8), align 16
  call void @mark_regs_live_at_end(%struct.bitmap_head_def* %132)
  %133 = load i32, i32* %6, align 4
  %134 = and i32 %133, 4
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %136, label %137

; <label>:136:                                    ; preds = %131
  call void @llvm.memset.p0i8.i64(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @regs_ever_live, i32 0, i32 0), i8 0, i64 53, i32 16, i1 false)
  br label %137

; <label>:137:                                    ; preds = %136, %131
  %138 = load i32, i32* %6, align 4
  call void @update_life_info(%struct.simple_bitmap_def* null, i32 1, i32 %138)
  %139 = load i32, i32* @optimize, align 4
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %141, label %146

; <label>:141:                                    ; preds = %137
  %142 = load i32, i32* %6, align 4
  %143 = and i32 %142, 16
  %144 = icmp ne i32 %143, 0
  br i1 %144, label %145, label %146

; <label>:145:                                    ; preds = %141
  call void @end_alias_analysis()
  br label %146

; <label>:146:                                    ; preds = %145, %141, %137
  %147 = load i32, i32* @x.3
  %148 = load i32, i32* @y.4
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %originalBB43alteredBB, %146
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %156 = icmp ne %struct._IO_FILE* %155, null
  %157 = load i32, i32* @x.3
  %158 = load i32, i32* @y.4
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br i1 %156, label %165, label %167

; <label>:165:                                    ; preds = %originalBBpart245
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  call void @dump_flow_info(%struct._IO_FILE* %166)
  br label %167

; <label>:167:                                    ; preds = %165, %originalBBpart245
  %168 = load i32, i32* @x.3
  %169 = load i32, i32* @y.4
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %originalBB47alteredBB, %167
  call void @free_basic_block_vars(i32 1)
  call void @delete_dead_jumptables()
  %176 = load i32, i32* @x.3
  %177 = load i32, i32* @y.4
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %8
  %184 = load i32, i32* %7, align 4
  %185 = icmp slt i32 %184, 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %186 = load i32, i32* %7, align 4
  %_ = sub i32 0, %186
  %gen = add i32 %_, 1
  %_2 = sub i32 %186, 1
  %gen3 = mul i32 %_2, 1
  %_4 = sub i32 %186, 1
  %gen5 = mul i32 %_4, 1
  %_6 = sub i32 %186, 1
  %gen7 = mul i32 %_6, 1
  %_8 = sub i32 %186, 1
  %gen9 = mul i32 %_8, 1
  %_10 = sub i32 %186, 1
  %gen11 = mul i32 %_10, 1
  %_12 = sub i32 %186, 1
  %gen13 = mul i32 %_12, 1
  %187 = add nsw i32 %186, 1
  store i32 %187, i32* %7, align 4
  br label %originalBB1

originalBB17alteredBB:                            ; preds = %originalBB17, %65
  %188 = load i32, i32* %6, align 4
  %_18 = sub i32 0, %188
  %gen19 = add i32 %_18, -69
  %189 = and i32 %188, -69
  store i32 %189, i32* %6, align 4
  br label %originalBB17

originalBB23alteredBB:                            ; preds = %originalBB23, %87
  %190 = load i32, i32* %6, align 4
  %_24 = sub i32 %190, 16
  %gen25 = mul i32 %_24, 16
  %_26 = sub i32 %190, 16
  %gen27 = mul i32 %_26, 16
  %_28 = sub i32 %190, 16
  %gen29 = mul i32 %_28, 16
  %_30 = sub i32 0, %190
  %gen31 = add i32 %_30, 16
  %_32 = sub i32 0, %190
  %gen33 = add i32 %_32, 16
  %_34 = sub i32 %190, 16
  %gen35 = mul i32 %_34, 16
  %191 = and i32 %190, 16
  %192 = icmp ne i32 %191, 0
  br label %originalBB23

originalBB39alteredBB:                            ; preds = %originalBB39, %108
  %193 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  call void @delete_noop_moves(%struct.rtx_def* %193)
  %194 = call zeroext i1 @purge_all_dead_edges(i32 0)
  %195 = load i32, i32* @reload_completed, align 4
  %196 = icmp ne i32 %195, 0
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %146
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %198 = icmp ne %struct._IO_FILE* %197, null
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %167
  call void @free_basic_block_vars(i32 1)
  call void @delete_dead_jumptables()
  br label %originalBB47
}

declare void @init_alias_analysis() #1

; Function Attrs: noinline nounwind uwtable
define void @delete_noop_moves(%struct.rtx_def*) #0 {
  %2 = alloca %struct.rtx_def*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca %struct.basic_block_def*, align 8
  %7 = alloca %struct.rtx_def*, align 8
  %8 = alloca %struct.rtx_def*, align 8
  %9 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %2, align 8
  store i32 0, i32* %3, align 4
  br label %10

; <label>:10:                                     ; preds = %177, %1
  %11 = load i32, i32* %3, align 4
  %12 = load i32, i32* @n_basic_blocks, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %180

; <label>:14:                                     ; preds = %10
  %15 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %16 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %15, i32 0, i32 4
  %17 = bitcast %union.varray_data_tag* %16 to [1 x %struct.basic_block_def*]*
  %18 = load i32, i32* %3, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %17, i64 0, i64 %19
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %20, align 8
  store %struct.basic_block_def* %21, %struct.basic_block_def** %6, align 8
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %6, align 8
  %23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 0
  %24 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %4, align 8
  br label %25

; <label>:25:                                     ; preds = %174, %14
  %26 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %6, align 8
  %28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 1
  %29 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8
  %30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %30, i64 0, i64 2
  %32 = bitcast %union.rtunion_def* %31 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %32, align 8
  %34 = icmp ne %struct.rtx_def* %26, %33
  br i1 %34, label %35, label %176

; <label>:35:                                     ; preds = %25
  %36 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %37, i64 0, i64 2
  %39 = bitcast %union.rtunion_def* %38 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %39, align 8
  store %struct.rtx_def* %40, %struct.rtx_def** %5, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %43 = load i32, i32* %42, align 8
  %44 = and i32 %43, 65535
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp eq i32 %48, 105
  br i1 %49, label %50, label %157

; <label>:50:                                     ; preds = %35
  %51 = load i32, i32* @x.5
  %52 = load i32, i32* @y.6
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %50
  %59 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %60 = call i32 @noop_move_p(%struct.rtx_def* %59)
  %61 = icmp ne i32 %60, 0
  %62 = load i32, i32* @x.5
  %63 = load i32, i32* @y.6
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %61, label %70, label %157

; <label>:70:                                     ; preds = %originalBBpart2
  %71 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %72 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %71, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %72, %struct.rtx_def** %7, align 8
  %73 = icmp ne %struct.rtx_def* %72, null
  br i1 %73, label %74, label %143

; <label>:74:                                     ; preds = %70
  %75 = load i32, i32* @x.5
  %76 = load i32, i32* @y.6
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %74
  %83 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %84, i64 0, i64 0
  %86 = bitcast %union.rtunion_def* %85 to %struct.rtx_def**
  %87 = load %struct.rtx_def*, %struct.rtx_def** %86, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %89 = icmp ne %struct.rtx_def* %87, %88
  %90 = load i32, i32* @x.5
  %91 = load i32, i32* @y.6
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %89, label %98, label %143

; <label>:98:                                     ; preds = %originalBBpart24
  %99 = load i32, i32* @x.5
  %100 = load i32, i32* @y.6
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %98
  %107 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %108 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %107)
  store %struct.rtx_def* %108, %struct.rtx_def** %8, align 8
  %109 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1
  %111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %110, i64 0, i64 0
  %112 = bitcast %union.rtunion_def* %111 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %112, align 8
  %114 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %113, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %114, %struct.rtx_def** %9, align 8
  %115 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %116, i64 0, i64 0
  %118 = bitcast %union.rtunion_def* %117 to %struct.rtx_def**
  %119 = load %struct.rtx_def*, %struct.rtx_def** %118, align 8
  %120 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %120, i32 0, i32 1
  %122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %121, i64 0, i64 6
  %123 = bitcast %union.rtunion_def* %122 to %struct.rtx_def**
  %124 = load %struct.rtx_def*, %struct.rtx_def** %123, align 8
  %125 = call %struct.rtx_def* @gen_rtx_fmt_ue(i32 4, i32 7, %struct.rtx_def* %119, %struct.rtx_def* %124)
  %126 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1
  %128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %127, i64 0, i64 6
  %129 = bitcast %union.rtunion_def* %128 to %struct.rtx_def**
  store %struct.rtx_def* %125, %struct.rtx_def** %129, align 8
  %130 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %131 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1
  %133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %132, i64 0, i64 0
  %134 = bitcast %union.rtunion_def* %133 to %struct.rtx_def**
  store %struct.rtx_def* %130, %struct.rtx_def** %134, align 8
  %135 = load i32, i32* @x.5
  %136 = load i32, i32* @y.6
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %143

; <label>:143:                                    ; preds = %originalBBpart28, %originalBBpart24, %70
  %144 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %145 = bitcast %struct.rtx_def* %144 to i32*
  %146 = load i32, i32* %145, align 8
  %147 = and i32 %146, -65536
  %148 = or i32 %147, 37
  store i32 %148, i32* %145, align 8
  %149 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %150, i64 0, i64 4
  %152 = bitcast %union.rtunion_def* %151 to i32*
  store i32 -99, i32* %152, align 8
  %153 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %153, i32 0, i32 1
  %155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %154, i64 0, i64 3
  %156 = bitcast %union.rtunion_def* %155 to i8**
  store i8* null, i8** %156, align 8
  br label %157

; <label>:157:                                    ; preds = %143, %originalBBpart2, %35
  %158 = load i32, i32* @x.5
  %159 = load i32, i32* @y.6
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %157
  %166 = load i32, i32* @x.5
  %167 = load i32, i32* @y.6
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %174

; <label>:174:                                    ; preds = %originalBBpart212
  %175 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* %175, %struct.rtx_def** %4, align 8
  br label %25

; <label>:176:                                    ; preds = %25
  br label %177

; <label>:177:                                    ; preds = %176
  %178 = load i32, i32* %3, align 4
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %3, align 4
  br label %10

; <label>:180:                                    ; preds = %10
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %50
  %181 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %182 = call i32 @noop_move_p(%struct.rtx_def* %181)
  %183 = icmp ne i32 %182, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %74
  %184 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %184, i32 0, i32 1
  %186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %185, i64 0, i64 0
  %187 = bitcast %union.rtunion_def* %186 to %struct.rtx_def**
  %188 = load %struct.rtx_def*, %struct.rtx_def** %187, align 8
  %189 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %190 = icmp ne %struct.rtx_def* %188, %189
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %98
  %191 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %192 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %191)
  store %struct.rtx_def* %192, %struct.rtx_def** %8, align 8
  %193 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %193, i32 0, i32 1
  %195 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %194, i64 0, i64 0
  %196 = bitcast %union.rtunion_def* %195 to %struct.rtx_def**
  %197 = load %struct.rtx_def*, %struct.rtx_def** %196, align 8
  %198 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %197, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %198, %struct.rtx_def** %9, align 8
  %199 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %200 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %199, i32 0, i32 1
  %201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %200, i64 0, i64 0
  %202 = bitcast %union.rtunion_def* %201 to %struct.rtx_def**
  %203 = load %struct.rtx_def*, %struct.rtx_def** %202, align 8
  %204 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %205 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1
  %206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %205, i64 0, i64 6
  %207 = bitcast %union.rtunion_def* %206 to %struct.rtx_def**
  %208 = load %struct.rtx_def*, %struct.rtx_def** %207, align 8
  %209 = call %struct.rtx_def* @gen_rtx_fmt_ue(i32 4, i32 7, %struct.rtx_def* %203, %struct.rtx_def* %208)
  %210 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %211 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %210, i32 0, i32 1
  %212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %211, i64 0, i64 6
  %213 = bitcast %union.rtunion_def* %212 to %struct.rtx_def**
  store %struct.rtx_def* %209, %struct.rtx_def** %213, align 8
  %214 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %215 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %216 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %215, i32 0, i32 1
  %217 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %216, i64 0, i64 0
  %218 = bitcast %union.rtunion_def* %217 to %struct.rtx_def**
  store %struct.rtx_def* %214, %struct.rtx_def** %218, align 8
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %157
  br label %originalBB10
}

declare zeroext i1 @purge_all_dead_edges(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @notice_stack_pointer_modification(%struct.rtx_def*) #0 {
  %2 = alloca %struct.rtx_def*, align 8
  %3 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %2, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %5 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 56
  %6 = bitcast i24* %5 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 6
  %9 = and i32 %8, 1
  %10 = icmp ne i32 %9, 0
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i32
  store i32 %12, i32* @current_function_sp_is_unchanging, align 4
  %13 = load i32, i32* @current_function_sp_is_unchanging, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %16, label %15

; <label>:15:                                     ; preds = %1
  br label %96

; <label>:16:                                     ; preds = %1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %3, align 8
  br label %18

; <label>:18:                                     ; preds = %originalBBpart28, %16
  %19 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %20 = icmp ne %struct.rtx_def* %19, null
  br i1 %20, label %21, label %96

; <label>:21:                                     ; preds = %18
  %22 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 65535
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = icmp eq i32 %29, 105
  br i1 %30, label %31, label %57

; <label>:31:                                     ; preds = %21
  %32 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %33, i64 0, i64 3
  %35 = bitcast %union.rtunion_def* %34 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  call void @note_stores(%struct.rtx_def* %36, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @notice_stack_pointer_modification_1, i8* null)
  %37 = load i32, i32* @current_function_sp_is_unchanging, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %56, label %39

; <label>:39:                                     ; preds = %31
  %40 = load i32, i32* @x.7
  %41 = load i32, i32* @y.8
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %39
  %48 = load i32, i32* @x.7
  %49 = load i32, i32* @y.8
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %96

; <label>:56:                                     ; preds = %31
  br label %57

; <label>:57:                                     ; preds = %56, %21
  %58 = load i32, i32* @x.7
  %59 = load i32, i32* @y.8
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %57
  %66 = load i32, i32* @x.7
  %67 = load i32, i32* @y.8
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74

; <label>:74:                                     ; preds = %originalBBpart24
  %75 = load i32, i32* @x.7
  %76 = load i32, i32* @y.8
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %74
  %83 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %84, i64 0, i64 2
  %86 = bitcast %union.rtunion_def* %85 to %struct.rtx_def**
  %87 = load %struct.rtx_def*, %struct.rtx_def** %86, align 8
  store %struct.rtx_def* %87, %struct.rtx_def** %3, align 8
  %88 = load i32, i32* @x.7
  %89 = load i32, i32* @y.8
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %18

; <label>:96:                                     ; preds = %originalBBpart2, %18, %15
  %97 = load i32, i32* @x.7
  %98 = load i32, i32* @y.8
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %96
  %105 = load i32, i32* @x.7
  %106 = load i32, i32* @y.8
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %39
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %57
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %74
  %113 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %114, i64 0, i64 2
  %116 = bitcast %union.rtunion_def* %115 to %struct.rtx_def**
  %117 = load %struct.rtx_def*, %struct.rtx_def** %116, align 8
  store %struct.rtx_def* %117, %struct.rtx_def** %3, align 8
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %96
  br label %originalBB10
}

; Function Attrs: noinline nounwind uwtable
define void @allocate_reg_life_data() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 @max_reg_num()
  store i32 %2, i32* @max_regno, align 4
  %3 = load i32, i32* @max_regno, align 4
  %4 = sext i32 %3 to i64
  call void @allocate_reg_info(i64 %4, i32 0, i32 0)
  store i32 0, i32* %1, align 4
  br label %5

; <label>:5:                                      ; preds = %58, %0
  %6 = load i32, i32* %1, align 4
  %7 = load i32, i32* @max_regno, align 4
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %9, label %61

; <label>:9:                                      ; preds = %5
  %10 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %11 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %10, i32 0, i32 4
  %12 = bitcast %union.varray_data_tag* %11 to [1 x %struct.reg_info_def*]*
  %13 = load i32, i32* %1, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %12, i64 0, i64 %14
  %16 = load %struct.reg_info_def*, %struct.reg_info_def** %15, align 8
  %17 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %16, i32 0, i32 3
  store i32 0, i32* %17, align 4
  %18 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %19 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %18, i32 0, i32 4
  %20 = bitcast %union.varray_data_tag* %19 to [1 x %struct.reg_info_def*]*
  %21 = load i32, i32* %1, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %20, i64 0, i64 %22
  %24 = load %struct.reg_info_def*, %struct.reg_info_def** %23, align 8
  %25 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %24, i32 0, i32 4
  store i32 0, i32* %25, align 4
  %26 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %27 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %26, i32 0, i32 4
  %28 = bitcast %union.varray_data_tag* %27 to [1 x %struct.reg_info_def*]*
  %29 = load i32, i32* %1, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %28, i64 0, i64 %30
  %32 = load %struct.reg_info_def*, %struct.reg_info_def** %31, align 8
  %33 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %32, i32 0, i32 6
  store i32 0, i32* %33, align 4
  %34 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %35 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %34, i32 0, i32 4
  %36 = bitcast %union.varray_data_tag* %35 to [1 x %struct.reg_info_def*]*
  %37 = load i32, i32* %1, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %36, i64 0, i64 %38
  %40 = load %struct.reg_info_def*, %struct.reg_info_def** %39, align 8
  %41 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %40, i32 0, i32 8
  store i32 0, i32* %41, align 4
  %42 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %43 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %42, i32 0, i32 4
  %44 = bitcast %union.varray_data_tag* %43 to [1 x %struct.reg_info_def*]*
  %45 = load i32, i32* %1, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %44, i64 0, i64 %46
  %48 = load %struct.reg_info_def*, %struct.reg_info_def** %47, align 8
  %49 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %48, i32 0, i32 7
  store i32 0, i32* %49, align 4
  %50 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %51 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %50, i32 0, i32 4
  %52 = bitcast %union.varray_data_tag* %51 to [1 x %struct.reg_info_def*]*
  %53 = load i32, i32* %1, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %52, i64 0, i64 %54
  %56 = load %struct.reg_info_def*, %struct.reg_info_def** %55, align 8
  %57 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %56, i32 0, i32 9
  store i32 -1, i32* %57, align 4
  br label %58

; <label>:58:                                     ; preds = %9
  %59 = load i32, i32* %1, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %1, align 4
  br label %5

; <label>:61:                                     ; preds = %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @allocate_bb_life_data() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.basic_block_def*, align 8
  %3 = alloca %struct.obstack*, align 8
  %4 = alloca %struct.obstack*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.obstack*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.obstack*, align 8
  %11 = alloca %struct.obstack*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca %struct.obstack*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca %struct.obstack*, align 8
  %18 = alloca %struct.obstack*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca %struct.obstack*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca %struct.obstack*, align 8
  %25 = alloca %struct.obstack*, align 8
  %26 = alloca i32, align 4
  %27 = alloca i8*, align 8
  %28 = alloca %struct.obstack*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca i8*, align 8
  %31 = alloca %struct.obstack*, align 8
  %32 = alloca %struct.obstack*, align 8
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  %35 = alloca %struct.obstack*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  br label %38

; <label>:38:                                     ; preds = %326, %0
  %39 = load i32, i32* @x.11
  %40 = load i32, i32* @y.12
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %38
  %47 = load i32, i32* %1, align 4
  %48 = load i32, i32* @n_basic_blocks, align 4
  %49 = icmp slt i32 %47, %48
  %50 = load i32, i32* @x.11
  %51 = load i32, i32* @y.12
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %49, label %58, label %329

; <label>:58:                                     ; preds = %originalBBpart2
  %59 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %60 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %59, i32 0, i32 4
  %61 = bitcast %union.varray_data_tag* %60 to [1 x %struct.basic_block_def*]*
  %62 = load i32, i32* %1, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %61, i64 0, i64 %63
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %64, align 8
  store %struct.basic_block_def* %65, %struct.basic_block_def** %2, align 8
  store %struct.obstack* @flow_obstack, %struct.obstack** %3, align 8
  %66 = load %struct.obstack*, %struct.obstack** %3, align 8
  store %struct.obstack* %66, %struct.obstack** %4, align 8
  store i32 24, i32* %5, align 4
  %67 = load %struct.obstack*, %struct.obstack** %4, align 8
  %68 = getelementptr inbounds %struct.obstack, %struct.obstack* %67, i32 0, i32 4
  %69 = load i8*, i8** %68, align 8
  %70 = load %struct.obstack*, %struct.obstack** %4, align 8
  %71 = getelementptr inbounds %struct.obstack, %struct.obstack* %70, i32 0, i32 3
  %72 = load i8*, i8** %71, align 8
  %73 = ptrtoint i8* %69 to i64
  %74 = ptrtoint i8* %72 to i64
  %75 = sub i64 %73, %74
  %76 = load i32, i32* %5, align 4
  %77 = sext i32 %76 to i64
  %78 = icmp slt i64 %75, %77
  br i1 %78, label %79, label %98

; <label>:79:                                     ; preds = %58
  %80 = load i32, i32* @x.11
  %81 = load i32, i32* @y.12
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %79
  %88 = load %struct.obstack*, %struct.obstack** %4, align 8
  %89 = load i32, i32* %5, align 4
  call void @_obstack_newchunk(%struct.obstack* %88, i32 %89)
  %90 = load i32, i32* @x.11
  %91 = load i32, i32* @y.12
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %98

; <label>:98:                                     ; preds = %originalBBpart24, %58
  %99 = load i32, i32* %5, align 4
  %100 = load %struct.obstack*, %struct.obstack** %4, align 8
  %101 = getelementptr inbounds %struct.obstack, %struct.obstack* %100, i32 0, i32 3
  %102 = load i8*, i8** %101, align 8
  %103 = sext i32 %99 to i64
  %104 = getelementptr inbounds i8, i8* %102, i64 %103
  store i8* %104, i8** %101, align 8
  %105 = load %struct.obstack*, %struct.obstack** %3, align 8
  store %struct.obstack* %105, %struct.obstack** %7, align 8
  %106 = load %struct.obstack*, %struct.obstack** %7, align 8
  %107 = getelementptr inbounds %struct.obstack, %struct.obstack* %106, i32 0, i32 2
  %108 = load i8*, i8** %107, align 8
  store i8* %108, i8** %8, align 8
  %109 = load %struct.obstack*, %struct.obstack** %7, align 8
  %110 = getelementptr inbounds %struct.obstack, %struct.obstack* %109, i32 0, i32 3
  %111 = load i8*, i8** %110, align 8
  %112 = load i8*, i8** %8, align 8
  %113 = icmp eq i8* %111, %112
  br i1 %113, label %114, label %120

; <label>:114:                                    ; preds = %98
  %115 = load %struct.obstack*, %struct.obstack** %7, align 8
  %116 = getelementptr inbounds %struct.obstack, %struct.obstack* %115, i32 0, i32 10
  %117 = load i8, i8* %116, align 8
  %118 = and i8 %117, -3
  %119 = or i8 %118, 2
  store i8 %119, i8* %116, align 8
  br label %120

; <label>:120:                                    ; preds = %114, %98
  %121 = load %struct.obstack*, %struct.obstack** %7, align 8
  %122 = getelementptr inbounds %struct.obstack, %struct.obstack* %121, i32 0, i32 3
  %123 = load i8*, i8** %122, align 8
  %124 = ptrtoint i8* %123 to i64
  %125 = sub i64 %124, 0
  %126 = load %struct.obstack*, %struct.obstack** %7, align 8
  %127 = getelementptr inbounds %struct.obstack, %struct.obstack* %126, i32 0, i32 6
  %128 = load i32, i32* %127, align 8
  %129 = sext i32 %128 to i64
  %130 = add nsw i64 %125, %129
  %131 = load %struct.obstack*, %struct.obstack** %7, align 8
  %132 = getelementptr inbounds %struct.obstack, %struct.obstack* %131, i32 0, i32 6
  %133 = load i32, i32* %132, align 8
  %134 = xor i32 %133, -1
  %135 = sext i32 %134 to i64
  %136 = and i64 %130, %135
  %137 = getelementptr inbounds i8, i8* null, i64 %136
  %138 = load %struct.obstack*, %struct.obstack** %7, align 8
  %139 = getelementptr inbounds %struct.obstack, %struct.obstack* %138, i32 0, i32 3
  store i8* %137, i8** %139, align 8
  %140 = load %struct.obstack*, %struct.obstack** %7, align 8
  %141 = getelementptr inbounds %struct.obstack, %struct.obstack* %140, i32 0, i32 3
  %142 = load i8*, i8** %141, align 8
  %143 = load %struct.obstack*, %struct.obstack** %7, align 8
  %144 = getelementptr inbounds %struct.obstack, %struct.obstack* %143, i32 0, i32 1
  %145 = load %struct._obstack_chunk*, %struct._obstack_chunk** %144, align 8
  %146 = bitcast %struct._obstack_chunk* %145 to i8*
  %147 = ptrtoint i8* %142 to i64
  %148 = ptrtoint i8* %146 to i64
  %149 = sub i64 %147, %148
  %150 = load %struct.obstack*, %struct.obstack** %7, align 8
  %151 = getelementptr inbounds %struct.obstack, %struct.obstack* %150, i32 0, i32 4
  %152 = load i8*, i8** %151, align 8
  %153 = load %struct.obstack*, %struct.obstack** %7, align 8
  %154 = getelementptr inbounds %struct.obstack, %struct.obstack* %153, i32 0, i32 1
  %155 = load %struct._obstack_chunk*, %struct._obstack_chunk** %154, align 8
  %156 = bitcast %struct._obstack_chunk* %155 to i8*
  %157 = ptrtoint i8* %152 to i64
  %158 = ptrtoint i8* %156 to i64
  %159 = sub i64 %157, %158
  %160 = icmp sgt i64 %149, %159
  br i1 %160, label %161, label %167

; <label>:161:                                    ; preds = %120
  %162 = load %struct.obstack*, %struct.obstack** %7, align 8
  %163 = getelementptr inbounds %struct.obstack, %struct.obstack* %162, i32 0, i32 4
  %164 = load i8*, i8** %163, align 8
  %165 = load %struct.obstack*, %struct.obstack** %7, align 8
  %166 = getelementptr inbounds %struct.obstack, %struct.obstack* %165, i32 0, i32 3
  store i8* %164, i8** %166, align 8
  br label %167

; <label>:167:                                    ; preds = %161, %120
  %168 = load %struct.obstack*, %struct.obstack** %7, align 8
  %169 = getelementptr inbounds %struct.obstack, %struct.obstack* %168, i32 0, i32 3
  %170 = load i8*, i8** %169, align 8
  %171 = load %struct.obstack*, %struct.obstack** %7, align 8
  %172 = getelementptr inbounds %struct.obstack, %struct.obstack* %171, i32 0, i32 2
  store i8* %170, i8** %172, align 8
  %173 = load i8*, i8** %8, align 8
  store i8* %173, i8** %9, align 8
  %174 = load i8*, i8** %9, align 8
  store i8* %174, i8** %6, align 8
  %175 = load i8*, i8** %6, align 8
  %176 = bitcast i8* %175 to %struct.bitmap_head_def*
  %177 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %176)
  %178 = load %struct.basic_block_def*, %struct.basic_block_def** %2, align 8
  %179 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %178, i32 0, i32 8
  store %struct.bitmap_head_def* %177, %struct.bitmap_head_def** %179, align 8
  store %struct.obstack* @flow_obstack, %struct.obstack** %10, align 8
  %180 = load %struct.obstack*, %struct.obstack** %10, align 8
  store %struct.obstack* %180, %struct.obstack** %11, align 8
  store i32 24, i32* %12, align 4
  %181 = load %struct.obstack*, %struct.obstack** %11, align 8
  %182 = getelementptr inbounds %struct.obstack, %struct.obstack* %181, i32 0, i32 4
  %183 = load i8*, i8** %182, align 8
  %184 = load %struct.obstack*, %struct.obstack** %11, align 8
  %185 = getelementptr inbounds %struct.obstack, %struct.obstack* %184, i32 0, i32 3
  %186 = load i8*, i8** %185, align 8
  %187 = ptrtoint i8* %183 to i64
  %188 = ptrtoint i8* %186 to i64
  %189 = sub i64 %187, %188
  %190 = load i32, i32* %12, align 4
  %191 = sext i32 %190 to i64
  %192 = icmp slt i64 %189, %191
  br i1 %192, label %193, label %212

; <label>:193:                                    ; preds = %167
  %194 = load i32, i32* @x.11
  %195 = load i32, i32* @y.12
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %193
  %202 = load %struct.obstack*, %struct.obstack** %11, align 8
  %203 = load i32, i32* %12, align 4
  call void @_obstack_newchunk(%struct.obstack* %202, i32 %203)
  %204 = load i32, i32* @x.11
  %205 = load i32, i32* @y.12
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %212

; <label>:212:                                    ; preds = %originalBBpart28, %167
  %213 = load i32, i32* @x.11
  %214 = load i32, i32* @y.12
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %212
  %221 = load i32, i32* %12, align 4
  %222 = load %struct.obstack*, %struct.obstack** %11, align 8
  %223 = getelementptr inbounds %struct.obstack, %struct.obstack* %222, i32 0, i32 3
  %224 = load i8*, i8** %223, align 8
  %225 = sext i32 %221 to i64
  %226 = getelementptr inbounds i8, i8* %224, i64 %225
  store i8* %226, i8** %223, align 8
  %227 = load %struct.obstack*, %struct.obstack** %10, align 8
  store %struct.obstack* %227, %struct.obstack** %14, align 8
  %228 = load %struct.obstack*, %struct.obstack** %14, align 8
  %229 = getelementptr inbounds %struct.obstack, %struct.obstack* %228, i32 0, i32 2
  %230 = load i8*, i8** %229, align 8
  store i8* %230, i8** %15, align 8
  %231 = load %struct.obstack*, %struct.obstack** %14, align 8
  %232 = getelementptr inbounds %struct.obstack, %struct.obstack* %231, i32 0, i32 3
  %233 = load i8*, i8** %232, align 8
  %234 = load i8*, i8** %15, align 8
  %235 = icmp eq i8* %233, %234
  %236 = load i32, i32* @x.11
  %237 = load i32, i32* @y.12
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %235, label %244, label %250

; <label>:244:                                    ; preds = %originalBBpart212
  %245 = load %struct.obstack*, %struct.obstack** %14, align 8
  %246 = getelementptr inbounds %struct.obstack, %struct.obstack* %245, i32 0, i32 10
  %247 = load i8, i8* %246, align 8
  %248 = and i8 %247, -3
  %249 = or i8 %248, 2
  store i8 %249, i8* %246, align 8
  br label %250

; <label>:250:                                    ; preds = %244, %originalBBpart212
  %251 = load %struct.obstack*, %struct.obstack** %14, align 8
  %252 = getelementptr inbounds %struct.obstack, %struct.obstack* %251, i32 0, i32 3
  %253 = load i8*, i8** %252, align 8
  %254 = ptrtoint i8* %253 to i64
  %255 = sub i64 %254, 0
  %256 = load %struct.obstack*, %struct.obstack** %14, align 8
  %257 = getelementptr inbounds %struct.obstack, %struct.obstack* %256, i32 0, i32 6
  %258 = load i32, i32* %257, align 8
  %259 = sext i32 %258 to i64
  %260 = add nsw i64 %255, %259
  %261 = load %struct.obstack*, %struct.obstack** %14, align 8
  %262 = getelementptr inbounds %struct.obstack, %struct.obstack* %261, i32 0, i32 6
  %263 = load i32, i32* %262, align 8
  %264 = xor i32 %263, -1
  %265 = sext i32 %264 to i64
  %266 = and i64 %260, %265
  %267 = getelementptr inbounds i8, i8* null, i64 %266
  %268 = load %struct.obstack*, %struct.obstack** %14, align 8
  %269 = getelementptr inbounds %struct.obstack, %struct.obstack* %268, i32 0, i32 3
  store i8* %267, i8** %269, align 8
  %270 = load %struct.obstack*, %struct.obstack** %14, align 8
  %271 = getelementptr inbounds %struct.obstack, %struct.obstack* %270, i32 0, i32 3
  %272 = load i8*, i8** %271, align 8
  %273 = load %struct.obstack*, %struct.obstack** %14, align 8
  %274 = getelementptr inbounds %struct.obstack, %struct.obstack* %273, i32 0, i32 1
  %275 = load %struct._obstack_chunk*, %struct._obstack_chunk** %274, align 8
  %276 = bitcast %struct._obstack_chunk* %275 to i8*
  %277 = ptrtoint i8* %272 to i64
  %278 = ptrtoint i8* %276 to i64
  %279 = sub i64 %277, %278
  %280 = load %struct.obstack*, %struct.obstack** %14, align 8
  %281 = getelementptr inbounds %struct.obstack, %struct.obstack* %280, i32 0, i32 4
  %282 = load i8*, i8** %281, align 8
  %283 = load %struct.obstack*, %struct.obstack** %14, align 8
  %284 = getelementptr inbounds %struct.obstack, %struct.obstack* %283, i32 0, i32 1
  %285 = load %struct._obstack_chunk*, %struct._obstack_chunk** %284, align 8
  %286 = bitcast %struct._obstack_chunk* %285 to i8*
  %287 = ptrtoint i8* %282 to i64
  %288 = ptrtoint i8* %286 to i64
  %289 = sub i64 %287, %288
  %290 = icmp sgt i64 %279, %289
  br i1 %290, label %291, label %297

; <label>:291:                                    ; preds = %250
  %292 = load %struct.obstack*, %struct.obstack** %14, align 8
  %293 = getelementptr inbounds %struct.obstack, %struct.obstack* %292, i32 0, i32 4
  %294 = load i8*, i8** %293, align 8
  %295 = load %struct.obstack*, %struct.obstack** %14, align 8
  %296 = getelementptr inbounds %struct.obstack, %struct.obstack* %295, i32 0, i32 3
  store i8* %294, i8** %296, align 8
  br label %297

; <label>:297:                                    ; preds = %291, %250
  %298 = load i32, i32* @x.11
  %299 = load i32, i32* @y.12
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %297
  %306 = load %struct.obstack*, %struct.obstack** %14, align 8
  %307 = getelementptr inbounds %struct.obstack, %struct.obstack* %306, i32 0, i32 3
  %308 = load i8*, i8** %307, align 8
  %309 = load %struct.obstack*, %struct.obstack** %14, align 8
  %310 = getelementptr inbounds %struct.obstack, %struct.obstack* %309, i32 0, i32 2
  store i8* %308, i8** %310, align 8
  %311 = load i8*, i8** %15, align 8
  store i8* %311, i8** %16, align 8
  %312 = load i8*, i8** %16, align 8
  store i8* %312, i8** %13, align 8
  %313 = load i8*, i8** %13, align 8
  %314 = bitcast i8* %313 to %struct.bitmap_head_def*
  %315 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %314)
  %316 = load %struct.basic_block_def*, %struct.basic_block_def** %2, align 8
  %317 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %316, i32 0, i32 9
  store %struct.bitmap_head_def* %315, %struct.bitmap_head_def** %317, align 8
  %318 = load i32, i32* @x.11
  %319 = load i32, i32* @y.12
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %326

; <label>:326:                                    ; preds = %originalBBpart216
  %327 = load i32, i32* %1, align 4
  %328 = add nsw i32 %327, 1
  store i32 %328, i32* %1, align 4
  br label %38

; <label>:329:                                    ; preds = %originalBBpart2
  %330 = load i32, i32* @x.11
  %331 = load i32, i32* @y.12
  %332 = sub i32 %330, 1
  %333 = mul i32 %330, %332
  %334 = urem i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %335, %336
  br i1 %337, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %329
  store %struct.obstack* @flow_obstack, %struct.obstack** %17, align 8
  %338 = load %struct.obstack*, %struct.obstack** %17, align 8
  store %struct.obstack* %338, %struct.obstack** %18, align 8
  store i32 24, i32* %19, align 4
  %339 = load %struct.obstack*, %struct.obstack** %18, align 8
  %340 = getelementptr inbounds %struct.obstack, %struct.obstack* %339, i32 0, i32 4
  %341 = load i8*, i8** %340, align 8
  %342 = load %struct.obstack*, %struct.obstack** %18, align 8
  %343 = getelementptr inbounds %struct.obstack, %struct.obstack* %342, i32 0, i32 3
  %344 = load i8*, i8** %343, align 8
  %345 = ptrtoint i8* %341 to i64
  %346 = ptrtoint i8* %344 to i64
  %347 = sub i64 %345, %346
  %348 = load i32, i32* %19, align 4
  %349 = sext i32 %348 to i64
  %350 = icmp slt i64 %347, %349
  %351 = load i32, i32* @x.11
  %352 = load i32, i32* @y.12
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBBpart224, label %originalBB18alteredBB

originalBBpart224:                                ; preds = %originalBB18
  br i1 %350, label %359, label %362

; <label>:359:                                    ; preds = %originalBBpart224
  %360 = load %struct.obstack*, %struct.obstack** %18, align 8
  %361 = load i32, i32* %19, align 4
  call void @_obstack_newchunk(%struct.obstack* %360, i32 %361)
  br label %362

; <label>:362:                                    ; preds = %359, %originalBBpart224
  %363 = load i32, i32* %19, align 4
  %364 = load %struct.obstack*, %struct.obstack** %18, align 8
  %365 = getelementptr inbounds %struct.obstack, %struct.obstack* %364, i32 0, i32 3
  %366 = load i8*, i8** %365, align 8
  %367 = sext i32 %363 to i64
  %368 = getelementptr inbounds i8, i8* %366, i64 %367
  store i8* %368, i8** %365, align 8
  %369 = load %struct.obstack*, %struct.obstack** %17, align 8
  store %struct.obstack* %369, %struct.obstack** %21, align 8
  %370 = load %struct.obstack*, %struct.obstack** %21, align 8
  %371 = getelementptr inbounds %struct.obstack, %struct.obstack* %370, i32 0, i32 2
  %372 = load i8*, i8** %371, align 8
  store i8* %372, i8** %22, align 8
  %373 = load %struct.obstack*, %struct.obstack** %21, align 8
  %374 = getelementptr inbounds %struct.obstack, %struct.obstack* %373, i32 0, i32 3
  %375 = load i8*, i8** %374, align 8
  %376 = load i8*, i8** %22, align 8
  %377 = icmp eq i8* %375, %376
  br i1 %377, label %378, label %384

; <label>:378:                                    ; preds = %362
  %379 = load %struct.obstack*, %struct.obstack** %21, align 8
  %380 = getelementptr inbounds %struct.obstack, %struct.obstack* %379, i32 0, i32 10
  %381 = load i8, i8* %380, align 8
  %382 = and i8 %381, -3
  %383 = or i8 %382, 2
  store i8 %383, i8* %380, align 8
  br label %384

; <label>:384:                                    ; preds = %378, %362
  %385 = load %struct.obstack*, %struct.obstack** %21, align 8
  %386 = getelementptr inbounds %struct.obstack, %struct.obstack* %385, i32 0, i32 3
  %387 = load i8*, i8** %386, align 8
  %388 = ptrtoint i8* %387 to i64
  %389 = sub i64 %388, 0
  %390 = load %struct.obstack*, %struct.obstack** %21, align 8
  %391 = getelementptr inbounds %struct.obstack, %struct.obstack* %390, i32 0, i32 6
  %392 = load i32, i32* %391, align 8
  %393 = sext i32 %392 to i64
  %394 = add nsw i64 %389, %393
  %395 = load %struct.obstack*, %struct.obstack** %21, align 8
  %396 = getelementptr inbounds %struct.obstack, %struct.obstack* %395, i32 0, i32 6
  %397 = load i32, i32* %396, align 8
  %398 = xor i32 %397, -1
  %399 = sext i32 %398 to i64
  %400 = and i64 %394, %399
  %401 = getelementptr inbounds i8, i8* null, i64 %400
  %402 = load %struct.obstack*, %struct.obstack** %21, align 8
  %403 = getelementptr inbounds %struct.obstack, %struct.obstack* %402, i32 0, i32 3
  store i8* %401, i8** %403, align 8
  %404 = load %struct.obstack*, %struct.obstack** %21, align 8
  %405 = getelementptr inbounds %struct.obstack, %struct.obstack* %404, i32 0, i32 3
  %406 = load i8*, i8** %405, align 8
  %407 = load %struct.obstack*, %struct.obstack** %21, align 8
  %408 = getelementptr inbounds %struct.obstack, %struct.obstack* %407, i32 0, i32 1
  %409 = load %struct._obstack_chunk*, %struct._obstack_chunk** %408, align 8
  %410 = bitcast %struct._obstack_chunk* %409 to i8*
  %411 = ptrtoint i8* %406 to i64
  %412 = ptrtoint i8* %410 to i64
  %413 = sub i64 %411, %412
  %414 = load %struct.obstack*, %struct.obstack** %21, align 8
  %415 = getelementptr inbounds %struct.obstack, %struct.obstack* %414, i32 0, i32 4
  %416 = load i8*, i8** %415, align 8
  %417 = load %struct.obstack*, %struct.obstack** %21, align 8
  %418 = getelementptr inbounds %struct.obstack, %struct.obstack* %417, i32 0, i32 1
  %419 = load %struct._obstack_chunk*, %struct._obstack_chunk** %418, align 8
  %420 = bitcast %struct._obstack_chunk* %419 to i8*
  %421 = ptrtoint i8* %416 to i64
  %422 = ptrtoint i8* %420 to i64
  %423 = sub i64 %421, %422
  %424 = icmp sgt i64 %413, %423
  br i1 %424, label %425, label %447

; <label>:425:                                    ; preds = %384
  %426 = load i32, i32* @x.11
  %427 = load i32, i32* @y.12
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %425
  %434 = load %struct.obstack*, %struct.obstack** %21, align 8
  %435 = getelementptr inbounds %struct.obstack, %struct.obstack* %434, i32 0, i32 4
  %436 = load i8*, i8** %435, align 8
  %437 = load %struct.obstack*, %struct.obstack** %21, align 8
  %438 = getelementptr inbounds %struct.obstack, %struct.obstack* %437, i32 0, i32 3
  store i8* %436, i8** %438, align 8
  %439 = load i32, i32* @x.11
  %440 = load i32, i32* @y.12
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %447

; <label>:447:                                    ; preds = %originalBBpart228, %384
  %448 = load %struct.obstack*, %struct.obstack** %21, align 8
  %449 = getelementptr inbounds %struct.obstack, %struct.obstack* %448, i32 0, i32 3
  %450 = load i8*, i8** %449, align 8
  %451 = load %struct.obstack*, %struct.obstack** %21, align 8
  %452 = getelementptr inbounds %struct.obstack, %struct.obstack* %451, i32 0, i32 2
  store i8* %450, i8** %452, align 8
  %453 = load i8*, i8** %22, align 8
  store i8* %453, i8** %23, align 8
  %454 = load i8*, i8** %23, align 8
  store i8* %454, i8** %20, align 8
  %455 = load i8*, i8** %20, align 8
  %456 = bitcast i8* %455 to %struct.bitmap_head_def*
  %457 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %456)
  store %struct.bitmap_head_def* %457, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 9), align 8
  store %struct.obstack* @flow_obstack, %struct.obstack** %24, align 8
  %458 = load %struct.obstack*, %struct.obstack** %24, align 8
  store %struct.obstack* %458, %struct.obstack** %25, align 8
  store i32 24, i32* %26, align 4
  %459 = load %struct.obstack*, %struct.obstack** %25, align 8
  %460 = getelementptr inbounds %struct.obstack, %struct.obstack* %459, i32 0, i32 4
  %461 = load i8*, i8** %460, align 8
  %462 = load %struct.obstack*, %struct.obstack** %25, align 8
  %463 = getelementptr inbounds %struct.obstack, %struct.obstack* %462, i32 0, i32 3
  %464 = load i8*, i8** %463, align 8
  %465 = ptrtoint i8* %461 to i64
  %466 = ptrtoint i8* %464 to i64
  %467 = sub i64 %465, %466
  %468 = load i32, i32* %26, align 4
  %469 = sext i32 %468 to i64
  %470 = icmp slt i64 %467, %469
  br i1 %470, label %471, label %490

; <label>:471:                                    ; preds = %447
  %472 = load i32, i32* @x.11
  %473 = load i32, i32* @y.12
  %474 = sub i32 %472, 1
  %475 = mul i32 %472, %474
  %476 = urem i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = icmp slt i32 %473, 10
  %479 = or i1 %477, %478
  br i1 %479, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %471
  %480 = load %struct.obstack*, %struct.obstack** %25, align 8
  %481 = load i32, i32* %26, align 4
  call void @_obstack_newchunk(%struct.obstack* %480, i32 %481)
  %482 = load i32, i32* @x.11
  %483 = load i32, i32* @y.12
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %490

; <label>:490:                                    ; preds = %originalBBpart232, %447
  %491 = load i32, i32* %26, align 4
  %492 = load %struct.obstack*, %struct.obstack** %25, align 8
  %493 = getelementptr inbounds %struct.obstack, %struct.obstack* %492, i32 0, i32 3
  %494 = load i8*, i8** %493, align 8
  %495 = sext i32 %491 to i64
  %496 = getelementptr inbounds i8, i8* %494, i64 %495
  store i8* %496, i8** %493, align 8
  %497 = load %struct.obstack*, %struct.obstack** %24, align 8
  store %struct.obstack* %497, %struct.obstack** %28, align 8
  %498 = load %struct.obstack*, %struct.obstack** %28, align 8
  %499 = getelementptr inbounds %struct.obstack, %struct.obstack* %498, i32 0, i32 2
  %500 = load i8*, i8** %499, align 8
  store i8* %500, i8** %29, align 8
  %501 = load %struct.obstack*, %struct.obstack** %28, align 8
  %502 = getelementptr inbounds %struct.obstack, %struct.obstack* %501, i32 0, i32 3
  %503 = load i8*, i8** %502, align 8
  %504 = load i8*, i8** %29, align 8
  %505 = icmp eq i8* %503, %504
  br i1 %505, label %506, label %528

; <label>:506:                                    ; preds = %490
  %507 = load i32, i32* @x.11
  %508 = load i32, i32* @y.12
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %506
  %515 = load %struct.obstack*, %struct.obstack** %28, align 8
  %516 = getelementptr inbounds %struct.obstack, %struct.obstack* %515, i32 0, i32 10
  %517 = load i8, i8* %516, align 8
  %518 = and i8 %517, -3
  %519 = or i8 %518, 2
  store i8 %519, i8* %516, align 8
  %520 = load i32, i32* @x.11
  %521 = load i32, i32* @y.12
  %522 = sub i32 %520, 1
  %523 = mul i32 %520, %522
  %524 = urem i32 %523, 2
  %525 = icmp eq i32 %524, 0
  %526 = icmp slt i32 %521, 10
  %527 = or i1 %525, %526
  br i1 %527, label %originalBBpart247, label %originalBB34alteredBB

originalBBpart247:                                ; preds = %originalBB34
  br label %528

; <label>:528:                                    ; preds = %originalBBpart247, %490
  %529 = load %struct.obstack*, %struct.obstack** %28, align 8
  %530 = getelementptr inbounds %struct.obstack, %struct.obstack* %529, i32 0, i32 3
  %531 = load i8*, i8** %530, align 8
  %532 = ptrtoint i8* %531 to i64
  %533 = sub i64 %532, 0
  %534 = load %struct.obstack*, %struct.obstack** %28, align 8
  %535 = getelementptr inbounds %struct.obstack, %struct.obstack* %534, i32 0, i32 6
  %536 = load i32, i32* %535, align 8
  %537 = sext i32 %536 to i64
  %538 = add nsw i64 %533, %537
  %539 = load %struct.obstack*, %struct.obstack** %28, align 8
  %540 = getelementptr inbounds %struct.obstack, %struct.obstack* %539, i32 0, i32 6
  %541 = load i32, i32* %540, align 8
  %542 = xor i32 %541, -1
  %543 = sext i32 %542 to i64
  %544 = and i64 %538, %543
  %545 = getelementptr inbounds i8, i8* null, i64 %544
  %546 = load %struct.obstack*, %struct.obstack** %28, align 8
  %547 = getelementptr inbounds %struct.obstack, %struct.obstack* %546, i32 0, i32 3
  store i8* %545, i8** %547, align 8
  %548 = load %struct.obstack*, %struct.obstack** %28, align 8
  %549 = getelementptr inbounds %struct.obstack, %struct.obstack* %548, i32 0, i32 3
  %550 = load i8*, i8** %549, align 8
  %551 = load %struct.obstack*, %struct.obstack** %28, align 8
  %552 = getelementptr inbounds %struct.obstack, %struct.obstack* %551, i32 0, i32 1
  %553 = load %struct._obstack_chunk*, %struct._obstack_chunk** %552, align 8
  %554 = bitcast %struct._obstack_chunk* %553 to i8*
  %555 = ptrtoint i8* %550 to i64
  %556 = ptrtoint i8* %554 to i64
  %557 = sub i64 %555, %556
  %558 = load %struct.obstack*, %struct.obstack** %28, align 8
  %559 = getelementptr inbounds %struct.obstack, %struct.obstack* %558, i32 0, i32 4
  %560 = load i8*, i8** %559, align 8
  %561 = load %struct.obstack*, %struct.obstack** %28, align 8
  %562 = getelementptr inbounds %struct.obstack, %struct.obstack* %561, i32 0, i32 1
  %563 = load %struct._obstack_chunk*, %struct._obstack_chunk** %562, align 8
  %564 = bitcast %struct._obstack_chunk* %563 to i8*
  %565 = ptrtoint i8* %560 to i64
  %566 = ptrtoint i8* %564 to i64
  %567 = sub i64 %565, %566
  %568 = icmp sgt i64 %557, %567
  br i1 %568, label %569, label %591

; <label>:569:                                    ; preds = %528
  %570 = load i32, i32* @x.11
  %571 = load i32, i32* @y.12
  %572 = sub i32 %570, 1
  %573 = mul i32 %570, %572
  %574 = urem i32 %573, 2
  %575 = icmp eq i32 %574, 0
  %576 = icmp slt i32 %571, 10
  %577 = or i1 %575, %576
  br i1 %577, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %originalBB49alteredBB, %569
  %578 = load %struct.obstack*, %struct.obstack** %28, align 8
  %579 = getelementptr inbounds %struct.obstack, %struct.obstack* %578, i32 0, i32 4
  %580 = load i8*, i8** %579, align 8
  %581 = load %struct.obstack*, %struct.obstack** %28, align 8
  %582 = getelementptr inbounds %struct.obstack, %struct.obstack* %581, i32 0, i32 3
  store i8* %580, i8** %582, align 8
  %583 = load i32, i32* @x.11
  %584 = load i32, i32* @y.12
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br label %591

; <label>:591:                                    ; preds = %originalBBpart251, %528
  %592 = load %struct.obstack*, %struct.obstack** %28, align 8
  %593 = getelementptr inbounds %struct.obstack, %struct.obstack* %592, i32 0, i32 3
  %594 = load i8*, i8** %593, align 8
  %595 = load %struct.obstack*, %struct.obstack** %28, align 8
  %596 = getelementptr inbounds %struct.obstack, %struct.obstack* %595, i32 0, i32 2
  store i8* %594, i8** %596, align 8
  %597 = load i8*, i8** %29, align 8
  store i8* %597, i8** %30, align 8
  %598 = load i8*, i8** %30, align 8
  store i8* %598, i8** %27, align 8
  %599 = load i8*, i8** %27, align 8
  %600 = bitcast i8* %599 to %struct.bitmap_head_def*
  %601 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %600)
  store %struct.bitmap_head_def* %601, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 8), align 16
  store %struct.obstack* @flow_obstack, %struct.obstack** %31, align 8
  %602 = load %struct.obstack*, %struct.obstack** %31, align 8
  store %struct.obstack* %602, %struct.obstack** %32, align 8
  store i32 24, i32* %33, align 4
  %603 = load %struct.obstack*, %struct.obstack** %32, align 8
  %604 = getelementptr inbounds %struct.obstack, %struct.obstack* %603, i32 0, i32 4
  %605 = load i8*, i8** %604, align 8
  %606 = load %struct.obstack*, %struct.obstack** %32, align 8
  %607 = getelementptr inbounds %struct.obstack, %struct.obstack* %606, i32 0, i32 3
  %608 = load i8*, i8** %607, align 8
  %609 = ptrtoint i8* %605 to i64
  %610 = ptrtoint i8* %608 to i64
  %611 = sub i64 %609, %610
  %612 = load i32, i32* %33, align 4
  %613 = sext i32 %612 to i64
  %614 = icmp slt i64 %611, %613
  br i1 %614, label %615, label %618

; <label>:615:                                    ; preds = %591
  %616 = load %struct.obstack*, %struct.obstack** %32, align 8
  %617 = load i32, i32* %33, align 4
  call void @_obstack_newchunk(%struct.obstack* %616, i32 %617)
  br label %618

; <label>:618:                                    ; preds = %615, %591
  %619 = load i32, i32* @x.11
  %620 = load i32, i32* @y.12
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %originalBB53alteredBB, %618
  %627 = load i32, i32* %33, align 4
  %628 = load %struct.obstack*, %struct.obstack** %32, align 8
  %629 = getelementptr inbounds %struct.obstack, %struct.obstack* %628, i32 0, i32 3
  %630 = load i8*, i8** %629, align 8
  %631 = sext i32 %627 to i64
  %632 = getelementptr inbounds i8, i8* %630, i64 %631
  store i8* %632, i8** %629, align 8
  %633 = load %struct.obstack*, %struct.obstack** %31, align 8
  store %struct.obstack* %633, %struct.obstack** %35, align 8
  %634 = load %struct.obstack*, %struct.obstack** %35, align 8
  %635 = getelementptr inbounds %struct.obstack, %struct.obstack* %634, i32 0, i32 2
  %636 = load i8*, i8** %635, align 8
  store i8* %636, i8** %36, align 8
  %637 = load %struct.obstack*, %struct.obstack** %35, align 8
  %638 = getelementptr inbounds %struct.obstack, %struct.obstack* %637, i32 0, i32 3
  %639 = load i8*, i8** %638, align 8
  %640 = load i8*, i8** %36, align 8
  %641 = icmp eq i8* %639, %640
  %642 = load i32, i32* @x.11
  %643 = load i32, i32* @y.12
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %641, label %650, label %656

; <label>:650:                                    ; preds = %originalBBpart255
  %651 = load %struct.obstack*, %struct.obstack** %35, align 8
  %652 = getelementptr inbounds %struct.obstack, %struct.obstack* %651, i32 0, i32 10
  %653 = load i8, i8* %652, align 8
  %654 = and i8 %653, -3
  %655 = or i8 %654, 2
  store i8 %655, i8* %652, align 8
  br label %656

; <label>:656:                                    ; preds = %650, %originalBBpart255
  %657 = load i32, i32* @x.11
  %658 = load i32, i32* @y.12
  %659 = sub i32 %657, 1
  %660 = mul i32 %657, %659
  %661 = urem i32 %660, 2
  %662 = icmp eq i32 %661, 0
  %663 = icmp slt i32 %658, 10
  %664 = or i1 %662, %663
  br i1 %664, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %originalBB57alteredBB, %656
  %665 = load %struct.obstack*, %struct.obstack** %35, align 8
  %666 = getelementptr inbounds %struct.obstack, %struct.obstack* %665, i32 0, i32 3
  %667 = load i8*, i8** %666, align 8
  %668 = ptrtoint i8* %667 to i64
  %669 = sub i64 %668, 0
  %670 = load %struct.obstack*, %struct.obstack** %35, align 8
  %671 = getelementptr inbounds %struct.obstack, %struct.obstack* %670, i32 0, i32 6
  %672 = load i32, i32* %671, align 8
  %673 = sext i32 %672 to i64
  %674 = add nsw i64 %669, %673
  %675 = load %struct.obstack*, %struct.obstack** %35, align 8
  %676 = getelementptr inbounds %struct.obstack, %struct.obstack* %675, i32 0, i32 6
  %677 = load i32, i32* %676, align 8
  %678 = xor i32 %677, -1
  %679 = sext i32 %678 to i64
  %680 = and i64 %674, %679
  %681 = getelementptr inbounds i8, i8* null, i64 %680
  %682 = load %struct.obstack*, %struct.obstack** %35, align 8
  %683 = getelementptr inbounds %struct.obstack, %struct.obstack* %682, i32 0, i32 3
  store i8* %681, i8** %683, align 8
  %684 = load %struct.obstack*, %struct.obstack** %35, align 8
  %685 = getelementptr inbounds %struct.obstack, %struct.obstack* %684, i32 0, i32 3
  %686 = load i8*, i8** %685, align 8
  %687 = load %struct.obstack*, %struct.obstack** %35, align 8
  %688 = getelementptr inbounds %struct.obstack, %struct.obstack* %687, i32 0, i32 1
  %689 = load %struct._obstack_chunk*, %struct._obstack_chunk** %688, align 8
  %690 = bitcast %struct._obstack_chunk* %689 to i8*
  %691 = ptrtoint i8* %686 to i64
  %692 = ptrtoint i8* %690 to i64
  %693 = sub i64 %691, %692
  %694 = load %struct.obstack*, %struct.obstack** %35, align 8
  %695 = getelementptr inbounds %struct.obstack, %struct.obstack* %694, i32 0, i32 4
  %696 = load i8*, i8** %695, align 8
  %697 = load %struct.obstack*, %struct.obstack** %35, align 8
  %698 = getelementptr inbounds %struct.obstack, %struct.obstack* %697, i32 0, i32 1
  %699 = load %struct._obstack_chunk*, %struct._obstack_chunk** %698, align 8
  %700 = bitcast %struct._obstack_chunk* %699 to i8*
  %701 = ptrtoint i8* %696 to i64
  %702 = ptrtoint i8* %700 to i64
  %703 = sub i64 %701, %702
  %704 = icmp sgt i64 %693, %703
  %705 = load i32, i32* @x.11
  %706 = load i32, i32* @y.12
  %707 = sub i32 %705, 1
  %708 = mul i32 %705, %707
  %709 = urem i32 %708, 2
  %710 = icmp eq i32 %709, 0
  %711 = icmp slt i32 %706, 10
  %712 = or i1 %710, %711
  br i1 %712, label %originalBBpart296, label %originalBB57alteredBB

originalBBpart296:                                ; preds = %originalBB57
  br i1 %704, label %713, label %719

; <label>:713:                                    ; preds = %originalBBpart296
  %714 = load %struct.obstack*, %struct.obstack** %35, align 8
  %715 = getelementptr inbounds %struct.obstack, %struct.obstack* %714, i32 0, i32 4
  %716 = load i8*, i8** %715, align 8
  %717 = load %struct.obstack*, %struct.obstack** %35, align 8
  %718 = getelementptr inbounds %struct.obstack, %struct.obstack* %717, i32 0, i32 3
  store i8* %716, i8** %718, align 8
  br label %719

; <label>:719:                                    ; preds = %713, %originalBBpart296
  %720 = load %struct.obstack*, %struct.obstack** %35, align 8
  %721 = getelementptr inbounds %struct.obstack, %struct.obstack* %720, i32 0, i32 3
  %722 = load i8*, i8** %721, align 8
  %723 = load %struct.obstack*, %struct.obstack** %35, align 8
  %724 = getelementptr inbounds %struct.obstack, %struct.obstack* %723, i32 0, i32 2
  store i8* %722, i8** %724, align 8
  %725 = load i8*, i8** %36, align 8
  store i8* %725, i8** %37, align 8
  %726 = load i8*, i8** %37, align 8
  store i8* %726, i8** %34, align 8
  %727 = load i8*, i8** %34, align 8
  %728 = bitcast i8* %727 to %struct.bitmap_head_def*
  %729 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %728)
  store %struct.bitmap_head_def* %729, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %38
  %730 = load i32, i32* %1, align 4
  %731 = load i32, i32* @n_basic_blocks, align 4
  %732 = icmp slt i32 %730, %731
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %79
  %733 = load %struct.obstack*, %struct.obstack** %4, align 8
  %734 = load i32, i32* %5, align 4
  call void @_obstack_newchunk(%struct.obstack* %733, i32 %734)
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %193
  %735 = load %struct.obstack*, %struct.obstack** %11, align 8
  %736 = load i32, i32* %12, align 4
  call void @_obstack_newchunk(%struct.obstack* %735, i32 %736)
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %212
  %737 = load i32, i32* %12, align 4
  %738 = load %struct.obstack*, %struct.obstack** %11, align 8
  %739 = getelementptr inbounds %struct.obstack, %struct.obstack* %738, i32 0, i32 3
  %740 = load i8*, i8** %739, align 8
  %741 = sext i32 %737 to i64
  %742 = getelementptr inbounds i8, i8* %740, i64 %741
  store i8* %742, i8** %739, align 8
  %743 = load %struct.obstack*, %struct.obstack** %10, align 8
  store %struct.obstack* %743, %struct.obstack** %14, align 8
  %744 = load %struct.obstack*, %struct.obstack** %14, align 8
  %745 = getelementptr inbounds %struct.obstack, %struct.obstack* %744, i32 0, i32 2
  %746 = load i8*, i8** %745, align 8
  store i8* %746, i8** %15, align 8
  %747 = load %struct.obstack*, %struct.obstack** %14, align 8
  %748 = getelementptr inbounds %struct.obstack, %struct.obstack* %747, i32 0, i32 3
  %749 = load i8*, i8** %748, align 8
  %750 = load i8*, i8** %15, align 8
  %751 = icmp eq i8* %749, %750
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %297
  %752 = load %struct.obstack*, %struct.obstack** %14, align 8
  %753 = getelementptr inbounds %struct.obstack, %struct.obstack* %752, i32 0, i32 3
  %754 = load i8*, i8** %753, align 8
  %755 = load %struct.obstack*, %struct.obstack** %14, align 8
  %756 = getelementptr inbounds %struct.obstack, %struct.obstack* %755, i32 0, i32 2
  store i8* %754, i8** %756, align 8
  %757 = load i8*, i8** %15, align 8
  store i8* %757, i8** %16, align 8
  %758 = load i8*, i8** %16, align 8
  store i8* %758, i8** %13, align 8
  %759 = load i8*, i8** %13, align 8
  %760 = bitcast i8* %759 to %struct.bitmap_head_def*
  %761 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %760)
  %762 = load %struct.basic_block_def*, %struct.basic_block_def** %2, align 8
  %763 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %762, i32 0, i32 9
  store %struct.bitmap_head_def* %761, %struct.bitmap_head_def** %763, align 8
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %329
  store %struct.obstack* @flow_obstack, %struct.obstack** %17, align 8
  %764 = load %struct.obstack*, %struct.obstack** %17, align 8
  store %struct.obstack* %764, %struct.obstack** %18, align 8
  store i32 24, i32* %19, align 4
  %765 = load %struct.obstack*, %struct.obstack** %18, align 8
  %766 = getelementptr inbounds %struct.obstack, %struct.obstack* %765, i32 0, i32 4
  %767 = load i8*, i8** %766, align 8
  %768 = load %struct.obstack*, %struct.obstack** %18, align 8
  %769 = getelementptr inbounds %struct.obstack, %struct.obstack* %768, i32 0, i32 3
  %770 = load i8*, i8** %769, align 8
  %771 = ptrtoint i8* %767 to i64
  %772 = ptrtoint i8* %770 to i64
  %_ = shl i64 %771, %772
  %_19 = sub i64 %771, %772
  %gen = mul i64 %_19, %772
  %_20 = sub i64 %771, %772
  %gen21 = mul i64 %_20, %772
  %_22 = shl i64 %771, %772
  %773 = sub i64 %771, %772
  %774 = load i32, i32* %19, align 4
  %775 = sext i32 %774 to i64
  %776 = icmp slt i64 %773, %775
  br label %originalBB18

originalBB26alteredBB:                            ; preds = %originalBB26, %425
  %777 = load %struct.obstack*, %struct.obstack** %21, align 8
  %778 = getelementptr inbounds %struct.obstack, %struct.obstack* %777, i32 0, i32 4
  %779 = load i8*, i8** %778, align 8
  %780 = load %struct.obstack*, %struct.obstack** %21, align 8
  %781 = getelementptr inbounds %struct.obstack, %struct.obstack* %780, i32 0, i32 3
  store i8* %779, i8** %781, align 8
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %471
  %782 = load %struct.obstack*, %struct.obstack** %25, align 8
  %783 = load i32, i32* %26, align 4
  call void @_obstack_newchunk(%struct.obstack* %782, i32 %783)
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %506
  %784 = load %struct.obstack*, %struct.obstack** %28, align 8
  %785 = getelementptr inbounds %struct.obstack, %struct.obstack* %784, i32 0, i32 10
  %786 = load i8, i8* %785, align 8
  %_35 = shl i8 %786, -3
  %_36 = sub i8 %786, -3
  %gen37 = mul i8 %_36, -3
  %_38 = sub i8 0, %786
  %gen39 = add i8 %_38, -3
  %_40 = shl i8 %786, -3
  %_41 = sub i8 0, %786
  %gen42 = add i8 %_41, -3
  %_43 = shl i8 %786, -3
  %787 = and i8 %786, -3
  %_44 = shl i8 %787, 2
  %_45 = shl i8 %787, 2
  %788 = or i8 %787, 2
  store i8 %788, i8* %785, align 8
  br label %originalBB34

originalBB49alteredBB:                            ; preds = %originalBB49, %569
  %789 = load %struct.obstack*, %struct.obstack** %28, align 8
  %790 = getelementptr inbounds %struct.obstack, %struct.obstack* %789, i32 0, i32 4
  %791 = load i8*, i8** %790, align 8
  %792 = load %struct.obstack*, %struct.obstack** %28, align 8
  %793 = getelementptr inbounds %struct.obstack, %struct.obstack* %792, i32 0, i32 3
  store i8* %791, i8** %793, align 8
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %618
  %794 = load i32, i32* %33, align 4
  %795 = load %struct.obstack*, %struct.obstack** %32, align 8
  %796 = getelementptr inbounds %struct.obstack, %struct.obstack* %795, i32 0, i32 3
  %797 = load i8*, i8** %796, align 8
  %798 = sext i32 %794 to i64
  %799 = getelementptr inbounds i8, i8* %797, i64 %798
  store i8* %799, i8** %796, align 8
  %800 = load %struct.obstack*, %struct.obstack** %31, align 8
  store %struct.obstack* %800, %struct.obstack** %35, align 8
  %801 = load %struct.obstack*, %struct.obstack** %35, align 8
  %802 = getelementptr inbounds %struct.obstack, %struct.obstack* %801, i32 0, i32 2
  %803 = load i8*, i8** %802, align 8
  store i8* %803, i8** %36, align 8
  %804 = load %struct.obstack*, %struct.obstack** %35, align 8
  %805 = getelementptr inbounds %struct.obstack, %struct.obstack* %804, i32 0, i32 3
  %806 = load i8*, i8** %805, align 8
  %807 = load i8*, i8** %36, align 8
  %808 = icmp eq i8* %806, %807
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %656
  %809 = load %struct.obstack*, %struct.obstack** %35, align 8
  %810 = getelementptr inbounds %struct.obstack, %struct.obstack* %809, i32 0, i32 3
  %811 = load i8*, i8** %810, align 8
  %812 = ptrtoint i8* %811 to i64
  %_58 = shl i64 %812, 0
  %_59 = sub i64 %812, 0
  %gen60 = mul i64 %_59, 0
  %_61 = sub i64 %812, 0
  %gen62 = mul i64 %_61, 0
  %813 = sub i64 %812, 0
  %814 = load %struct.obstack*, %struct.obstack** %35, align 8
  %815 = getelementptr inbounds %struct.obstack, %struct.obstack* %814, i32 0, i32 6
  %816 = load i32, i32* %815, align 8
  %817 = sext i32 %816 to i64
  %_63 = sub i64 %813, %817
  %gen64 = mul i64 %_63, %817
  %_65 = sub i64 %813, %817
  %gen66 = mul i64 %_65, %817
  %_67 = shl i64 %813, %817
  %_68 = sub i64 %813, %817
  %gen69 = mul i64 %_68, %817
  %818 = add nsw i64 %813, %817
  %819 = load %struct.obstack*, %struct.obstack** %35, align 8
  %820 = getelementptr inbounds %struct.obstack, %struct.obstack* %819, i32 0, i32 6
  %821 = load i32, i32* %820, align 8
  %_70 = shl i32 %821, -1
  %_71 = shl i32 %821, -1
  %_72 = sub i32 0, %821
  %gen73 = add i32 %_72, -1
  %_74 = sub i32 0, %821
  %gen75 = add i32 %_74, -1
  %_76 = sub i32 %821, -1
  %gen77 = mul i32 %_76, -1
  %_78 = shl i32 %821, -1
  %822 = xor i32 %821, -1
  %823 = sext i32 %822 to i64
  %_79 = sub i64 0, %818
  %gen80 = add i64 %_79, %823
  %_81 = shl i64 %818, %823
  %824 = and i64 %818, %823
  %825 = getelementptr inbounds i8, i8* null, i64 %824
  %826 = load %struct.obstack*, %struct.obstack** %35, align 8
  %827 = getelementptr inbounds %struct.obstack, %struct.obstack* %826, i32 0, i32 3
  store i8* %825, i8** %827, align 8
  %828 = load %struct.obstack*, %struct.obstack** %35, align 8
  %829 = getelementptr inbounds %struct.obstack, %struct.obstack* %828, i32 0, i32 3
  %830 = load i8*, i8** %829, align 8
  %831 = load %struct.obstack*, %struct.obstack** %35, align 8
  %832 = getelementptr inbounds %struct.obstack, %struct.obstack* %831, i32 0, i32 1
  %833 = load %struct._obstack_chunk*, %struct._obstack_chunk** %832, align 8
  %834 = bitcast %struct._obstack_chunk* %833 to i8*
  %835 = ptrtoint i8* %830 to i64
  %836 = ptrtoint i8* %834 to i64
  %_82 = sub i64 %835, %836
  %gen83 = mul i64 %_82, %836
  %_84 = sub i64 0, %835
  %gen85 = add i64 %_84, %836
  %837 = sub i64 %835, %836
  %838 = load %struct.obstack*, %struct.obstack** %35, align 8
  %839 = getelementptr inbounds %struct.obstack, %struct.obstack* %838, i32 0, i32 4
  %840 = load i8*, i8** %839, align 8
  %841 = load %struct.obstack*, %struct.obstack** %35, align 8
  %842 = getelementptr inbounds %struct.obstack, %struct.obstack* %841, i32 0, i32 1
  %843 = load %struct._obstack_chunk*, %struct._obstack_chunk** %842, align 8
  %844 = bitcast %struct._obstack_chunk* %843 to i8*
  %845 = ptrtoint i8* %840 to i64
  %846 = ptrtoint i8* %844 to i64
  %_86 = sub i64 0, %845
  %gen87 = add i64 %_86, %846
  %_88 = sub i64 0, %845
  %gen89 = add i64 %_88, %846
  %_90 = sub i64 0, %845
  %gen91 = add i64 %_90, %846
  %_92 = sub i64 %845, %846
  %gen93 = mul i64 %_92, %846
  %_94 = shl i64 %845, %846
  %847 = sub i64 %845, %846
  %848 = icmp sgt i64 %837, %847
  br label %originalBB57
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_regs_live_at_end(%struct.bitmap_head_def*) #0 {
  %2 = alloca %struct.bitmap_head_def*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.rtx_def*, align 8
  store %struct.bitmap_head_def* %0, %struct.bitmap_head_def** %2, align 8
  %6 = load i32, i32* @reload_completed, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %41, label %8

; <label>:8:                                      ; preds = %1
  %9 = call i32 @ix86_frame_pointer_required()
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %22, label %11

; <label>:11:                                     ; preds = %8
  %12 = load %struct.function*, %struct.function** @cfun, align 8
  %13 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 56
  %14 = bitcast i24* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 6
  %17 = and i32 %16, 1
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %22, label %19

; <label>:19:                                     ; preds = %11
  %20 = load i32, i32* @flag_omit_frame_pointer, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %41, label %22

; <label>:22:                                     ; preds = %19, %11, %8
  %23 = load i32, i32* @x.13
  %24 = load i32, i32* @y.14
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %22
  %31 = load i32, i32* @current_function_sp_is_unchanging, align 4
  %32 = icmp ne i32 %31, 0
  %33 = load i32, i32* @x.13
  %34 = load i32, i32* @y.14
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %32, label %41, label %43

; <label>:41:                                     ; preds = %originalBBpart2, %19, %1
  %42 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %42, i32 7)
  br label %43

; <label>:43:                                     ; preds = %41, %originalBBpart2
  %44 = load i32, i32* @reload_completed, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %49

; <label>:46:                                     ; preds = %43
  %47 = load i32, i32* @frame_pointer_needed, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %52

; <label>:49:                                     ; preds = %46, %43
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %50, i32 20)
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %51, i32 6)
  br label %52

; <label>:52:                                     ; preds = %49, %46
  %53 = load i32, i32* @target_flags, align 4
  %54 = and i32 %53, 33554432
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %60, label %56

; <label>:56:                                     ; preds = %52
  %57 = load i32, i32* @flag_pic, align 4
  %58 = icmp ne i32 %57, 0
  %59 = xor i1 %58, true
  br label %60

; <label>:60:                                     ; preds = %56, %52
  %61 = phi i1 [ true, %52 ], [ %59, %56 ]
  %62 = select i1 %61, i32 -1, i32 3
  %63 = icmp ne i32 %62, -1
  br i1 %63, label %64, label %108

; <label>:64:                                     ; preds = %60
  %65 = load i32, i32* @x.13
  %66 = load i32, i32* @y.14
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %64
  %73 = load i32, i32* @target_flags, align 4
  %74 = and i32 %73, 33554432
  %75 = icmp ne i32 %74, 0
  %76 = load i32, i32* @x.13
  %77 = load i32, i32* @y.14
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart26, label %originalBB1alteredBB

originalBBpart26:                                 ; preds = %originalBB1
  br i1 %75, label %88, label %84

; <label>:84:                                     ; preds = %originalBBpart26
  %85 = load i32, i32* @flag_pic, align 4
  %86 = icmp ne i32 %85, 0
  %87 = xor i1 %86, true
  br label %88

; <label>:88:                                     ; preds = %84, %originalBBpart26
  %89 = phi i1 [ true, %originalBBpart26 ], [ %87, %84 ]
  %90 = select i1 %89, i32 -1, i32 3
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %108

; <label>:96:                                     ; preds = %88
  %97 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %98 = load i32, i32* @target_flags, align 4
  %99 = and i32 %98, 33554432
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %105, label %101

; <label>:101:                                    ; preds = %96
  %102 = load i32, i32* @flag_pic, align 4
  %103 = icmp ne i32 %102, 0
  %104 = xor i1 %103, true
  br label %105

; <label>:105:                                    ; preds = %101, %96
  %106 = phi i1 [ true, %96 ], [ %104, %101 ]
  %107 = select i1 %106, i32 -1, i32 3
  call void @bitmap_set_bit(%struct.bitmap_head_def* %97, i32 %107)
  br label %108

; <label>:108:                                    ; preds = %105, %88, %60
  %109 = load i32, i32* @x.13
  %110 = load i32, i32* @y.14
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %originalBB8alteredBB, %108
  store i32 0, i32* %3, align 4
  %117 = load i32, i32* @x.13
  %118 = load i32, i32* @y.14
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %125

; <label>:125:                                    ; preds = %155, %originalBBpart210
  %126 = load i32, i32* %3, align 4
  %127 = icmp ult i32 %126, 53
  br i1 %127, label %128, label %158

; <label>:128:                                    ; preds = %125
  %129 = load i32, i32* %3, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds [53 x i8], [53 x i8]* @global_regs, i64 0, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = sext i8 %132 to i32
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %135, label %154

; <label>:135:                                    ; preds = %128
  %136 = load i32, i32* @x.13
  %137 = load i32, i32* @y.14
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %135
  %144 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %145 = load i32, i32* %3, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %144, i32 %145)
  %146 = load i32, i32* @x.13
  %147 = load i32, i32* @y.14
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %154

; <label>:154:                                    ; preds = %originalBBpart214, %128
  br label %155

; <label>:155:                                    ; preds = %154
  %156 = load i32, i32* %3, align 4
  %157 = add i32 %156, 1
  store i32 %157, i32* %3, align 4
  br label %125

; <label>:158:                                    ; preds = %125
  %159 = load i32, i32* @x.13
  %160 = load i32, i32* @y.14
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %originalBB16alteredBB, %158
  %167 = load i32, i32* @reload_completed, align 4
  %168 = icmp ne i32 %167, 0
  %169 = load i32, i32* @x.13
  %170 = load i32, i32* @y.14
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %168, label %177, label %235

; <label>:177:                                    ; preds = %originalBBpart218
  %178 = load i32, i32* @x.13
  %179 = load i32, i32* @y.14
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %originalBB20alteredBB, %177
  store i32 0, i32* %3, align 4
  %186 = load i32, i32* @x.13
  %187 = load i32, i32* @y.14
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %194

; <label>:194:                                    ; preds = %231, %originalBBpart222
  %195 = load i32, i32* %3, align 4
  %196 = icmp ult i32 %195, 53
  br i1 %196, label %197, label %234

; <label>:197:                                    ; preds = %194
  %198 = load i32, i32* %3, align 4
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds [53 x i8], [53 x i8]* @regs_ever_live, i64 0, i64 %199
  %201 = load i8, i8* %200, align 1
  %202 = sext i8 %201 to i32
  %203 = icmp ne i32 %202, 0
  br i1 %203, label %204, label %230

; <label>:204:                                    ; preds = %197
  %205 = load i64, i64* @regs_invalidated_by_call, align 8
  %206 = load i32, i32* %3, align 4
  %207 = zext i32 %206 to i64
  %208 = shl i64 1, %207
  %209 = and i64 %205, %208
  %210 = icmp ne i64 %209, 0
  br i1 %210, label %230, label %211

; <label>:211:                                    ; preds = %204
  %212 = load i32, i32* @x.13
  %213 = load i32, i32* @y.14
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %originalBB24alteredBB, %211
  %220 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %221 = load i32, i32* %3, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %220, i32 %221)
  %222 = load i32, i32* @x.13
  %223 = load i32, i32* @y.14
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br label %230

; <label>:230:                                    ; preds = %originalBBpart226, %204, %197
  br label %231

; <label>:231:                                    ; preds = %230
  %232 = load i32, i32* %3, align 4
  %233 = add i32 %232, 1
  store i32 %233, i32* %3, align 4
  br label %194

; <label>:234:                                    ; preds = %194
  br label %235

; <label>:235:                                    ; preds = %234, %originalBBpart218
  %236 = load i32, i32* @reload_completed, align 4
  %237 = icmp ne i32 %236, 0
  br i1 %237, label %238, label %313

; <label>:238:                                    ; preds = %235
  %239 = load %struct.function*, %struct.function** @cfun, align 8
  %240 = getelementptr inbounds %struct.function, %struct.function* %239, i32 0, i32 56
  %241 = bitcast i24* %240 to i32*
  %242 = load i32, i32* %241, align 8
  %243 = lshr i32 %242, 7
  %244 = and i32 %243, 1
  %245 = icmp ne i32 %244, 0
  br i1 %245, label %246, label %313

; <label>:246:                                    ; preds = %238
  store i32 0, i32* %3, align 4
  br label %247

; <label>:247:                                    ; preds = %309, %246
  %248 = load i32, i32* @x.13
  %249 = load i32, i32* @y.14
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %originalBB28alteredBB, %247
  %256 = load i32, i32* %3, align 4
  %257 = icmp ult i32 %256, 2
  %258 = load i32, i32* @x.13
  %259 = load i32, i32* @y.14
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br i1 %257, label %266, label %268

; <label>:266:                                    ; preds = %originalBBpart230
  %267 = load i32, i32* %3, align 4
  br label %285

; <label>:268:                                    ; preds = %originalBBpart230
  %269 = load i32, i32* @x.13
  %270 = load i32, i32* @y.14
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %originalBB32alteredBB, %268
  %277 = load i32, i32* @x.13
  %278 = load i32, i32* @y.14
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  br label %285

; <label>:285:                                    ; preds = %originalBBpart234, %266
  %286 = phi i32 [ %267, %266 ], [ -1, %originalBBpart234 ]
  %287 = load i32, i32* @x.13
  %288 = load i32, i32* @y.14
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %originalBB36alteredBB, %285
  store i32 %286, i32* %4, align 4
  %295 = load i32, i32* %4, align 4
  %296 = icmp eq i32 %295, -1
  %297 = load i32, i32* @x.13
  %298 = load i32, i32* @y.14
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br i1 %296, label %305, label %306

; <label>:305:                                    ; preds = %originalBBpart238
  br label %312

; <label>:306:                                    ; preds = %originalBBpart238
  %307 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %308 = load i32, i32* %4, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %307, i32 %308)
  br label %309

; <label>:309:                                    ; preds = %306
  %310 = load i32, i32* %3, align 4
  %311 = add i32 %310, 1
  store i32 %311, i32* %3, align 4
  br label %247

; <label>:312:                                    ; preds = %305
  br label %313

; <label>:313:                                    ; preds = %312, %238, %235
  %314 = load i32, i32* @reload_completed, align 4
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %359, label %316

; <label>:316:                                    ; preds = %313
  %317 = load %struct.function*, %struct.function** @cfun, align 8
  %318 = getelementptr inbounds %struct.function, %struct.function* %317, i32 0, i32 56
  %319 = bitcast i24* %318 to i32*
  %320 = load i32, i32* %319, align 8
  %321 = lshr i32 %320, 7
  %322 = and i32 %321, 1
  %323 = icmp ne i32 %322, 0
  br i1 %323, label %324, label %359

; <label>:324:                                    ; preds = %316
  %325 = load i32, i32* @target_flags, align 4
  %326 = and i32 %325, 33554432
  %327 = icmp ne i32 %326, 0
  %328 = select i1 %327, i32 5, i32 4
  %329 = call %struct.rtx_def* @gen_rtx_REG(i32 %328, i32 2)
  store %struct.rtx_def* %329, %struct.rtx_def** %5, align 8
  %330 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %331 = icmp ne %struct.rtx_def* %330, null
  br i1 %331, label %332, label %342

; <label>:332:                                    ; preds = %324
  %333 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %334 = bitcast %struct.rtx_def* %333 to i32*
  %335 = load i32, i32* %334, align 8
  %336 = and i32 %335, 65535
  %337 = icmp eq i32 %336, 61
  br i1 %337, label %338, label %342

; <label>:338:                                    ; preds = %332
  %339 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %340 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %341 = bitcast %struct.bitmap_head_def* %340 to i8*
  call void @mark_reg(%struct.rtx_def* %339, i8* %341)
  br label %342

; <label>:342:                                    ; preds = %338, %332, %324
  %343 = load i32, i32* @x.13
  %344 = load i32, i32* @y.14
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %originalBB40alteredBB, %342
  %351 = load i32, i32* @x.13
  %352 = load i32, i32* @y.14
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br label %359

; <label>:359:                                    ; preds = %originalBBpart242, %316, %313
  %360 = load i32, i32* @x.13
  %361 = load i32, i32* @y.14
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %originalBB44alteredBB, %359
  %368 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %369 = bitcast %struct.bitmap_head_def* %368 to i8*
  call void @diddle_return_value(void (%struct.rtx_def*, i8*)* @mark_reg, i8* %369)
  %370 = load i32, i32* @x.13
  %371 = load i32, i32* @y.14
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %22
  %378 = load i32, i32* @current_function_sp_is_unchanging, align 4
  %379 = icmp ne i32 %378, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %64
  %380 = load i32, i32* @target_flags, align 4
  %_ = sub i32 0, %380
  %gen = add i32 %_, 33554432
  %_2 = sub i32 0, %380
  %gen3 = add i32 %_2, 33554432
  %_4 = shl i32 %380, 33554432
  %381 = and i32 %380, 33554432
  %382 = icmp ne i32 %381, 0
  br label %originalBB1

originalBB8alteredBB:                             ; preds = %originalBB8, %108
  store i32 0, i32* %3, align 4
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %135
  %383 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %384 = load i32, i32* %3, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %383, i32 %384)
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %158
  %385 = load i32, i32* @reload_completed, align 4
  %386 = icmp ne i32 %385, 0
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %177
  store i32 0, i32* %3, align 4
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %211
  %387 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %388 = load i32, i32* %3, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %387, i32 %388)
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %247
  %389 = load i32, i32* %3, align 4
  %390 = icmp ult i32 %389, 2
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %268
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %285
  store i32 %286, i32* %4, align 4
  %391 = load i32, i32* %4, align 4
  %392 = icmp eq i32 %391, -1
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %342
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %359
  %393 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %394 = bitcast %struct.bitmap_head_def* %393 to i8*
  call void @diddle_return_value(void (%struct.rtx_def*, i8*)* @mark_reg, i8* %394)
  br label %originalBB44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #3

; Function Attrs: noinline nounwind uwtable
define void @update_life_info(%struct.simple_bitmap_def*, i32, i32) #0 {
  %4 = load i32, i32* @x.15
  %5 = load i32, i32* @y.16
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %3
  %12 = alloca %struct.simple_bitmap_def*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.bitmap_head_def*, align 8
  %16 = alloca %struct.bitmap_head_def, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca %struct.basic_block_def*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i64*, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca %struct.basic_block_def*, align 8
  %28 = alloca %struct.basic_block_def*, align 8
  %29 = alloca %struct.bitmap_element_def*, align 8
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca %struct.bitmap_element_def*, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  store %struct.simple_bitmap_def* %0, %struct.simple_bitmap_def** %12, align 8
  store i32 %1, i32* %13, align 4
  store i32 %2, i32* %14, align 4
  %41 = load i32, i32* %14, align 4
  store i32 %41, i32* %18, align 4
  %42 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %16)
  store %struct.bitmap_head_def* %42, %struct.bitmap_head_def** %15, align 8
  %43 = load i32, i32* %13, align 4
  %44 = icmp eq i32 %43, 0
  %45 = load i32, i32* @x.15
  %46 = load i32, i32* @y.16
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %44, label %56, label %53

; <label>:53:                                     ; preds = %originalBBpart2
  %54 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %55 = icmp ne %struct.simple_bitmap_def* %54, null
  br label %56

; <label>:56:                                     ; preds = %53, %originalBBpart2
  %57 = phi i1 [ true, %originalBBpart2 ], [ %55, %53 ]
  %58 = select i1 %57, i32 6, i32 5
  call void @timevar_push(i32 %58)
  %59 = load i32, i32* %14, align 4
  %60 = and i32 %59, 32
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %69

; <label>:62:                                     ; preds = %56
  %63 = load i32, i32* %13, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %68, label %65

; <label>:65:                                     ; preds = %62
  %66 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %67 = icmp ne %struct.simple_bitmap_def* %66, null
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %65, %62
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 650, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.update_life_info, i32 0, i32 0)) #5
  unreachable

; <label>:69:                                     ; preds = %65, %56
  %70 = load i32, i32* %14, align 4
  %71 = and i32 %70, 2
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %91

; <label>:73:                                     ; preds = %69
  %74 = load i32, i32* @x.15
  %75 = load i32, i32* @y.16
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %73
  %82 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  call void @clear_log_links(%struct.simple_bitmap_def* %82)
  %83 = load i32, i32* @x.15
  %84 = load i32, i32* @y.16
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %91

; <label>:91:                                     ; preds = %originalBBpart24, %69
  %92 = load i32, i32* %13, align 4
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %94, label %243

; <label>:94:                                     ; preds = %91
  %95 = load i32, i32* @x.15
  %96 = load i32, i32* @y.16
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %94
  %103 = load i32, i32* @x.15
  %104 = load i32, i32* @y.16
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %111

; <label>:111:                                    ; preds = %218, %originalBBpart28
  %112 = load i32, i32* @x.15
  %113 = load i32, i32* @y.16
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %111
  store i32 0, i32* %19, align 4
  %120 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %121 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %122 = load i32, i32* %14, align 4
  %123 = and i32 %122, 48
  call void @calculate_global_regs_live(%struct.simple_bitmap_def* %120, %struct.simple_bitmap_def* %121, i32 %123)
  %124 = load i32, i32* %14, align 4
  %125 = and i32 %124, 40
  %126 = icmp ne i32 %125, 40
  %127 = load i32, i32* @x.15
  %128 = load i32, i32* @y.16
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart215, label %originalBB10alteredBB

originalBBpart215:                                ; preds = %originalBB10
  br i1 %126, label %135, label %136

; <label>:135:                                    ; preds = %originalBBpart215
  br label %220

; <label>:136:                                    ; preds = %originalBBpart215
  %137 = load i32, i32* @x.15
  %138 = load i32, i32* @y.16
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %136
  %145 = load i32, i32* @n_basic_blocks, align 4
  %146 = sub nsw i32 %145, 1
  store i32 %146, i32* %17, align 4
  %147 = load i32, i32* @x.15
  %148 = load i32, i32* @y.16
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart221, label %originalBB17alteredBB

originalBBpart221:                                ; preds = %originalBB17
  br label %155

; <label>:155:                                    ; preds = %177, %originalBBpart221
  %156 = load i32, i32* %17, align 4
  %157 = icmp sge i32 %156, 0
  br i1 %157, label %158, label %180

; <label>:158:                                    ; preds = %155
  %159 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %160 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %159, i32 0, i32 4
  %161 = bitcast %union.varray_data_tag* %160 to [1 x %struct.basic_block_def*]*
  %162 = load i32, i32* %17, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %161, i64 0, i64 %163
  %165 = load %struct.basic_block_def*, %struct.basic_block_def** %164, align 8
  store %struct.basic_block_def* %165, %struct.basic_block_def** %20, align 8
  %166 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %167 = load %struct.basic_block_def*, %struct.basic_block_def** %20, align 8
  %168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %167, i32 0, i32 9
  %169 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %168, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %166, %struct.bitmap_head_def* %169)
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %20, align 8
  %171 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %172 = load i32, i32* %14, align 4
  %173 = and i32 %172, 24
  %174 = call i32 @propagate_block(%struct.basic_block_def* %170, %struct.bitmap_head_def* %171, %struct.bitmap_head_def* null, %struct.bitmap_head_def* null, i32 %173)
  %175 = load i32, i32* %19, align 4
  %176 = or i32 %175, %174
  store i32 %176, i32* %19, align 4
  br label %177

; <label>:177:                                    ; preds = %158
  %178 = load i32, i32* %17, align 4
  %179 = add nsw i32 %178, -1
  store i32 %179, i32* %17, align 4
  br label %155

; <label>:180:                                    ; preds = %155
  %181 = load i32, i32* @x.15
  %182 = load i32, i32* @y.16
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %180
  %189 = load i32, i32* %18, align 4
  %190 = and i32 %189, -25
  store i32 %190, i32* %18, align 4
  %191 = load i32, i32* %19, align 4
  %192 = icmp ne i32 %191, 0
  %193 = load i32, i32* @x.15
  %194 = load i32, i32* @y.16
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart227, label %originalBB23alteredBB

originalBBpart227:                                ; preds = %originalBB23
  br i1 %192, label %218, label %201

; <label>:201:                                    ; preds = %originalBBpart227
  %202 = load i32, i32* @x.15
  %203 = load i32, i32* @y.16
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %201
  %210 = load i32, i32* @x.15
  %211 = load i32, i32* @y.16
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %220

; <label>:218:                                    ; preds = %originalBBpart227
  %219 = call zeroext i1 @cleanup_cfg(i32 1)
  br label %111

; <label>:220:                                    ; preds = %originalBBpart231, %135
  %221 = load i32, i32* %13, align 4
  %222 = icmp eq i32 %221, 2
  br i1 %222, label %223, label %242

; <label>:223:                                    ; preds = %220
  %224 = load i32, i32* @x.15
  %225 = load i32, i32* @y.16
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %223
  %232 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %233 = call i32 @count_or_remove_death_notes(%struct.simple_bitmap_def* %232, i32 1)
  %234 = load i32, i32* @x.15
  %235 = load i32, i32* @y.16
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %242

; <label>:242:                                    ; preds = %originalBBpart235, %220
  br label %243

; <label>:243:                                    ; preds = %242, %91
  %244 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %245 = icmp ne %struct.simple_bitmap_def* %244, null
  br i1 %245, label %246, label %451

; <label>:246:                                    ; preds = %243
  %247 = load i32, i32* @x.15
  %248 = load i32, i32* @y.16
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %246
  %255 = load i32, i32* @x.15
  %256 = load i32, i32* @y.16
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %263

; <label>:263:                                    ; preds = %originalBBpart239
  %264 = load i32, i32* @x.15
  %265 = load i32, i32* @y.16
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %263
  store i32 0, i32* %22, align 4
  %272 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %273 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %272, i32 0, i32 1
  %274 = load i32, i32* %273, align 4
  store i32 %274, i32* %23, align 4
  %275 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %276 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %275, i32 0, i32 3
  %277 = getelementptr inbounds [1 x i64], [1 x i64]* %276, i32 0, i32 0
  store i64* %277, i64** %24, align 8
  store i32 0, i32* %21, align 4
  %278 = load i32, i32* @x.15
  %279 = load i32, i32* @y.16
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %286

; <label>:286:                                    ; preds = %430, %originalBBpart243
  %287 = load i32, i32* %21, align 4
  %288 = load i32, i32* %23, align 4
  %289 = icmp ult i32 %287, %288
  br i1 %289, label %290, label %433

; <label>:290:                                    ; preds = %286
  %291 = load i32, i32* @x.15
  %292 = load i32, i32* @y.16
  %293 = sub i32 %291, 1
  %294 = mul i32 %291, %293
  %295 = urem i32 %294, 2
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %296, %297
  br i1 %298, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %originalBB45alteredBB, %290
  %299 = load i64*, i64** %24, align 8
  %300 = load i32, i32* %21, align 4
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds i64, i64* %299, i64 %301
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %25, align 8
  %304 = load i64, i64* %25, align 8
  %305 = icmp ne i64 %304, 0
  %306 = load i32, i32* @x.15
  %307 = load i32, i32* @y.16
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br i1 %305, label %314, label %429

; <label>:314:                                    ; preds = %originalBBpart247
  br label %315

; <label>:315:                                    ; preds = %409, %314
  %316 = load i32, i32* @x.15
  %317 = load i32, i32* @y.16
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %originalBB49alteredBB, %315
  %324 = load i32, i32* %22, align 4
  %325 = icmp ult i32 %324, 64
  %326 = load i32, i32* @x.15
  %327 = load i32, i32* @y.16
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %325, label %334, label %412

; <label>:334:                                    ; preds = %originalBBpart251
  %335 = load i32, i32* @x.15
  %336 = load i32, i32* @y.16
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %originalBB53alteredBB, %334
  %343 = load i32, i32* %22, align 4
  %344 = zext i32 %343 to i64
  %345 = shl i64 1, %344
  store i64 %345, i64* %26, align 8
  %346 = load i64, i64* %25, align 8
  %347 = load i64, i64* %26, align 8
  %348 = and i64 %346, %347
  %349 = icmp ne i64 %348, 0
  %350 = load i32, i32* @x.15
  %351 = load i32, i32* @y.16
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart267, label %originalBB53alteredBB

originalBBpart267:                                ; preds = %originalBB53
  br i1 %349, label %358, label %408

; <label>:358:                                    ; preds = %originalBBpart267
  %359 = load i64, i64* %26, align 8
  %360 = xor i64 %359, -1
  %361 = load i64, i64* %25, align 8
  %362 = and i64 %361, %360
  store i64 %362, i64* %25, align 8
  %363 = load i32, i32* %21, align 4
  %364 = mul i32 %363, 64
  %365 = load i32, i32* %22, align 4
  %366 = add i32 %364, %365
  store i32 %366, i32* %17, align 4
  %367 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %368 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %367, i32 0, i32 4
  %369 = bitcast %union.varray_data_tag* %368 to [1 x %struct.basic_block_def*]*
  %370 = load i32, i32* %17, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %369, i64 0, i64 %371
  %373 = load %struct.basic_block_def*, %struct.basic_block_def** %372, align 8
  store %struct.basic_block_def* %373, %struct.basic_block_def** %27, align 8
  %374 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %375 = load %struct.basic_block_def*, %struct.basic_block_def** %27, align 8
  %376 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %375, i32 0, i32 9
  %377 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %376, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %374, %struct.bitmap_head_def* %377)
  %378 = load %struct.basic_block_def*, %struct.basic_block_def** %27, align 8
  %379 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %380 = load i32, i32* %18, align 4
  %381 = call i32 @propagate_block(%struct.basic_block_def* %378, %struct.bitmap_head_def* %379, %struct.bitmap_head_def* null, %struct.bitmap_head_def* null, i32 %380)
  %382 = load i32, i32* %13, align 4
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %384, label %403

; <label>:384:                                    ; preds = %358
  %385 = load i32, i32* @x.15
  %386 = load i32, i32* @y.16
  %387 = sub i32 %385, 1
  %388 = mul i32 %385, %387
  %389 = urem i32 %388, 2
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %390, %391
  br i1 %392, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %originalBB69alteredBB, %384
  %393 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %394 = load %struct.basic_block_def*, %struct.basic_block_def** %27, align 8
  call void @verify_local_live_at_start(%struct.bitmap_head_def* %393, %struct.basic_block_def* %394)
  %395 = load i32, i32* @x.15
  %396 = load i32, i32* @y.16
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %403

; <label>:403:                                    ; preds = %originalBBpart271, %358
  %404 = load i64, i64* %25, align 8
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %406, label %407

; <label>:406:                                    ; preds = %403
  br label %412

; <label>:407:                                    ; preds = %403
  br label %408

; <label>:408:                                    ; preds = %407, %originalBBpart267
  br label %409

; <label>:409:                                    ; preds = %408
  %410 = load i32, i32* %22, align 4
  %411 = add i32 %410, 1
  store i32 %411, i32* %22, align 4
  br label %315

; <label>:412:                                    ; preds = %406, %originalBBpart251
  %413 = load i32, i32* @x.15
  %414 = load i32, i32* @y.16
  %415 = sub i32 %413, 1
  %416 = mul i32 %413, %415
  %417 = urem i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %418, %419
  br i1 %420, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %originalBB73alteredBB, %412
  %421 = load i32, i32* @x.15
  %422 = load i32, i32* @y.16
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br label %429

; <label>:429:                                    ; preds = %originalBBpart275, %originalBBpart247
  br label %430

; <label>:430:                                    ; preds = %429
  %431 = load i32, i32* %21, align 4
  %432 = add i32 %431, 1
  store i32 %432, i32* %21, align 4
  store i32 0, i32* %22, align 4
  br label %286

; <label>:433:                                    ; preds = %286
  %434 = load i32, i32* @x.15
  %435 = load i32, i32* @y.16
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %originalBB77alteredBB, %433
  %442 = load i32, i32* @x.15
  %443 = load i32, i32* @y.16
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br label %450

; <label>:450:                                    ; preds = %originalBBpart279
  br label %499

; <label>:451:                                    ; preds = %243
  %452 = load i32, i32* @n_basic_blocks, align 4
  %453 = sub nsw i32 %452, 1
  store i32 %453, i32* %17, align 4
  br label %454

; <label>:454:                                    ; preds = %495, %451
  %455 = load i32, i32* %17, align 4
  %456 = icmp sge i32 %455, 0
  br i1 %456, label %457, label %498

; <label>:457:                                    ; preds = %454
  %458 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %459 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %458, i32 0, i32 4
  %460 = bitcast %union.varray_data_tag* %459 to [1 x %struct.basic_block_def*]*
  %461 = load i32, i32* %17, align 4
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %460, i64 0, i64 %462
  %464 = load %struct.basic_block_def*, %struct.basic_block_def** %463, align 8
  store %struct.basic_block_def* %464, %struct.basic_block_def** %28, align 8
  %465 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %466 = load %struct.basic_block_def*, %struct.basic_block_def** %28, align 8
  %467 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %466, i32 0, i32 9
  %468 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %467, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %465, %struct.bitmap_head_def* %468)
  %469 = load %struct.basic_block_def*, %struct.basic_block_def** %28, align 8
  %470 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %471 = load i32, i32* %18, align 4
  %472 = call i32 @propagate_block(%struct.basic_block_def* %469, %struct.bitmap_head_def* %470, %struct.bitmap_head_def* null, %struct.bitmap_head_def* null, i32 %471)
  %473 = load i32, i32* %13, align 4
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %475, label %494

; <label>:475:                                    ; preds = %457
  %476 = load i32, i32* @x.15
  %477 = load i32, i32* @y.16
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %originalBB81alteredBB, %475
  %484 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %485 = load %struct.basic_block_def*, %struct.basic_block_def** %28, align 8
  call void @verify_local_live_at_start(%struct.bitmap_head_def* %484, %struct.basic_block_def* %485)
  %486 = load i32, i32* @x.15
  %487 = load i32, i32* @y.16
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %494

; <label>:494:                                    ; preds = %originalBBpart283, %457
  br label %495

; <label>:495:                                    ; preds = %494
  %496 = load i32, i32* %17, align 4
  %497 = add nsw i32 %496, -1
  store i32 %497, i32* %17, align 4
  br label %454

; <label>:498:                                    ; preds = %454
  br label %499

; <label>:499:                                    ; preds = %498, %450
  br label %500

; <label>:500:                                    ; preds = %499
  %501 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %502 = icmp ne %struct.bitmap_head_def* %501, null
  br i1 %502, label %503, label %505

; <label>:503:                                    ; preds = %500
  %504 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %504)
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %15, align 8
  br label %505

; <label>:505:                                    ; preds = %503, %500
  br label %506

; <label>:506:                                    ; preds = %505
  %507 = load i32, i32* @x.15
  %508 = load i32, i32* @y.16
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %originalBB85alteredBB, %506
  %515 = load i32, i32* %14, align 4
  %516 = and i32 %515, 4
  %517 = icmp ne i32 %516, 0
  %518 = load i32, i32* @x.15
  %519 = load i32, i32* @y.16
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBBpart298, label %originalBB85alteredBB

originalBBpart298:                                ; preds = %originalBB85
  br i1 %517, label %526, label %1067

; <label>:526:                                    ; preds = %originalBBpart298
  br label %527

; <label>:527:                                    ; preds = %526
  %528 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 9), align 8
  %529 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %528, i32 0, i32 0
  %530 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %529, align 8
  store %struct.bitmap_element_def* %530, %struct.bitmap_element_def** %29, align 8
  store i32 0, i32* %30, align 4
  store i32 53, i32* %31, align 4
  store i32 0, i32* %32, align 4
  br label %531

; <label>:531:                                    ; preds = %558, %527
  %532 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %533 = icmp ne %struct.bitmap_element_def* %532, null
  br i1 %533, label %534, label %540

; <label>:534:                                    ; preds = %531
  %535 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %536 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %535, i32 0, i32 2
  %537 = load i32, i32* %536, align 8
  %538 = load i32, i32* %30, align 4
  %539 = icmp ult i32 %537, %538
  br label %540

; <label>:540:                                    ; preds = %534, %531
  %541 = phi i1 [ false, %531 ], [ %539, %534 ]
  %542 = load i32, i32* @x.15
  %543 = load i32, i32* @y.16
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %originalBB100alteredBB, %540
  %550 = load i32, i32* @x.15
  %551 = load i32, i32* @y.16
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br i1 %541, label %558, label %562

; <label>:558:                                    ; preds = %originalBBpart2102
  %559 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %560 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %559, i32 0, i32 0
  %561 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %560, align 8
  store %struct.bitmap_element_def* %561, %struct.bitmap_element_def** %29, align 8
  br label %531

; <label>:562:                                    ; preds = %originalBBpart2102
  %563 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %564 = icmp ne %struct.bitmap_element_def* %563, null
  br i1 %564, label %565, label %572

; <label>:565:                                    ; preds = %562
  %566 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %567 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %566, i32 0, i32 2
  %568 = load i32, i32* %567, align 8
  %569 = load i32, i32* %30, align 4
  %570 = icmp ne i32 %568, %569
  br i1 %570, label %571, label %572

; <label>:571:                                    ; preds = %565
  store i32 0, i32* %31, align 4
  store i32 0, i32* %32, align 4
  br label %572

; <label>:572:                                    ; preds = %571, %565, %562
  %573 = load i32, i32* @x.15
  %574 = load i32, i32* @y.16
  %575 = sub i32 %573, 1
  %576 = mul i32 %573, %575
  %577 = urem i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = icmp slt i32 %574, 10
  %580 = or i1 %578, %579
  br i1 %580, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %originalBB104alteredBB, %572
  %581 = load i32, i32* @x.15
  %582 = load i32, i32* @y.16
  %583 = sub i32 %581, 1
  %584 = mul i32 %581, %583
  %585 = urem i32 %584, 2
  %586 = icmp eq i32 %585, 0
  %587 = icmp slt i32 %582, 10
  %588 = or i1 %586, %587
  br i1 %588, label %originalBBpart2106, label %originalBB104alteredBB

originalBBpart2106:                               ; preds = %originalBB104
  br label %589

; <label>:589:                                    ; preds = %originalBBpart2162, %originalBBpart2106
  %590 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %591 = icmp ne %struct.bitmap_element_def* %590, null
  br i1 %591, label %592, label %753

; <label>:592:                                    ; preds = %589
  br label %593

; <label>:593:                                    ; preds = %713, %592
  %594 = load i32, i32* %32, align 4
  %595 = icmp ult i32 %594, 2
  br i1 %595, label %596, label %716

; <label>:596:                                    ; preds = %593
  %597 = load i32, i32* @x.15
  %598 = load i32, i32* @y.16
  %599 = sub i32 %597, 1
  %600 = mul i32 %597, %599
  %601 = urem i32 %600, 2
  %602 = icmp eq i32 %601, 0
  %603 = icmp slt i32 %598, 10
  %604 = or i1 %602, %603
  br i1 %604, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %originalBB108alteredBB, %596
  %605 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %606 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %605, i32 0, i32 3
  %607 = load i32, i32* %32, align 4
  %608 = zext i32 %607 to i64
  %609 = getelementptr inbounds [2 x i64], [2 x i64]* %606, i64 0, i64 %608
  %610 = load i64, i64* %609, align 8
  store i64 %610, i64* %33, align 8
  %611 = load i64, i64* %33, align 8
  %612 = icmp ne i64 %611, 0
  %613 = load i32, i32* @x.15
  %614 = load i32, i32* @y.16
  %615 = sub i32 %613, 1
  %616 = mul i32 %613, %615
  %617 = urem i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = icmp slt i32 %614, 10
  %620 = or i1 %618, %619
  br i1 %620, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br i1 %612, label %621, label %712

; <label>:621:                                    ; preds = %originalBBpart2110
  %622 = load i32, i32* @x.15
  %623 = load i32, i32* @y.16
  %624 = sub i32 %622, 1
  %625 = mul i32 %622, %624
  %626 = urem i32 %625, 2
  %627 = icmp eq i32 %626, 0
  %628 = icmp slt i32 %623, 10
  %629 = or i1 %627, %628
  br i1 %629, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %originalBB112alteredBB, %621
  %630 = load i32, i32* @x.15
  %631 = load i32, i32* @y.16
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br label %638

; <label>:638:                                    ; preds = %692, %originalBBpart2114
  %639 = load i32, i32* %31, align 4
  %640 = icmp ult i32 %639, 64
  br i1 %640, label %641, label %695

; <label>:641:                                    ; preds = %638
  %642 = load i32, i32* %31, align 4
  %643 = zext i32 %642 to i64
  %644 = shl i64 1, %643
  store i64 %644, i64* %34, align 8
  %645 = load i64, i64* %33, align 8
  %646 = load i64, i64* %34, align 8
  %647 = and i64 %645, %646
  %648 = icmp ne i64 %647, 0
  br i1 %648, label %649, label %691

; <label>:649:                                    ; preds = %641
  %650 = load i32, i32* @x.15
  %651 = load i32, i32* @y.16
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %originalBB116alteredBB, %649
  %658 = load i64, i64* %34, align 8
  %659 = xor i64 %658, -1
  %660 = load i64, i64* %33, align 8
  %661 = and i64 %660, %659
  store i64 %661, i64* %33, align 8
  %662 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %663 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %662, i32 0, i32 2
  %664 = load i32, i32* %663, align 8
  %665 = mul i32 %664, 128
  %666 = load i32, i32* %32, align 4
  %667 = mul i32 %666, 64
  %668 = add i32 %665, %667
  %669 = load i32, i32* %31, align 4
  %670 = add i32 %668, %669
  store i32 %670, i32* %17, align 4
  %671 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %672 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %671, i32 0, i32 4
  %673 = bitcast %union.varray_data_tag* %672 to [1 x %struct.reg_info_def*]*
  %674 = load i32, i32* %17, align 4
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %673, i64 0, i64 %675
  %677 = load %struct.reg_info_def*, %struct.reg_info_def** %676, align 8
  %678 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %677, i32 0, i32 9
  store i32 -2, i32* %678, align 4
  %679 = load i64, i64* %33, align 8
  %680 = icmp eq i64 %679, 0
  %681 = load i32, i32* @x.15
  %682 = load i32, i32* @y.16
  %683 = sub i32 %681, 1
  %684 = mul i32 %681, %683
  %685 = urem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %686, %687
  br i1 %688, label %originalBBpart2150, label %originalBB116alteredBB

originalBBpart2150:                               ; preds = %originalBB116
  br i1 %680, label %689, label %690

; <label>:689:                                    ; preds = %originalBBpart2150
  br label %695

; <label>:690:                                    ; preds = %originalBBpart2150
  br label %691

; <label>:691:                                    ; preds = %690, %641
  br label %692

; <label>:692:                                    ; preds = %691
  %693 = load i32, i32* %31, align 4
  %694 = add i32 %693, 1
  store i32 %694, i32* %31, align 4
  br label %638

; <label>:695:                                    ; preds = %689, %638
  %696 = load i32, i32* @x.15
  %697 = load i32, i32* @y.16
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBB152, label %originalBB152alteredBB

originalBB152:                                    ; preds = %originalBB152alteredBB, %695
  %704 = load i32, i32* @x.15
  %705 = load i32, i32* @y.16
  %706 = sub i32 %704, 1
  %707 = mul i32 %704, %706
  %708 = urem i32 %707, 2
  %709 = icmp eq i32 %708, 0
  %710 = icmp slt i32 %705, 10
  %711 = or i1 %709, %710
  br i1 %711, label %originalBBpart2154, label %originalBB152alteredBB

originalBBpart2154:                               ; preds = %originalBB152
  br label %712

; <label>:712:                                    ; preds = %originalBBpart2154, %originalBBpart2110
  store i32 0, i32* %31, align 4
  br label %713

; <label>:713:                                    ; preds = %712
  %714 = load i32, i32* %32, align 4
  %715 = add i32 %714, 1
  store i32 %715, i32* %32, align 4
  br label %593

; <label>:716:                                    ; preds = %593
  %717 = load i32, i32* @x.15
  %718 = load i32, i32* @y.16
  %719 = sub i32 %717, 1
  %720 = mul i32 %717, %719
  %721 = urem i32 %720, 2
  %722 = icmp eq i32 %721, 0
  %723 = icmp slt i32 %718, 10
  %724 = or i1 %722, %723
  br i1 %724, label %originalBB156, label %originalBB156alteredBB

originalBB156:                                    ; preds = %originalBB156alteredBB, %716
  store i32 0, i32* %32, align 4
  %725 = load i32, i32* @x.15
  %726 = load i32, i32* @y.16
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBBpart2158, label %originalBB156alteredBB

originalBBpart2158:                               ; preds = %originalBB156
  br label %733

; <label>:733:                                    ; preds = %originalBBpart2158
  %734 = load i32, i32* @x.15
  %735 = load i32, i32* @y.16
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBB160, label %originalBB160alteredBB

originalBB160:                                    ; preds = %originalBB160alteredBB, %733
  %742 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %743 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %742, i32 0, i32 0
  %744 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %743, align 8
  store %struct.bitmap_element_def* %744, %struct.bitmap_element_def** %29, align 8
  %745 = load i32, i32* @x.15
  %746 = load i32, i32* @y.16
  %747 = sub i32 %745, 1
  %748 = mul i32 %745, %747
  %749 = urem i32 %748, 2
  %750 = icmp eq i32 %749, 0
  %751 = icmp slt i32 %746, 10
  %752 = or i1 %750, %751
  br i1 %752, label %originalBBpart2162, label %originalBB160alteredBB

originalBBpart2162:                               ; preds = %originalBB160
  br label %589

; <label>:753:                                    ; preds = %589
  %754 = load i32, i32* @x.15
  %755 = load i32, i32* @y.16
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBB164, label %originalBB164alteredBB

originalBB164:                                    ; preds = %originalBB164alteredBB, %753
  %762 = load i32, i32* @x.15
  %763 = load i32, i32* @y.16
  %764 = sub i32 %762, 1
  %765 = mul i32 %762, %764
  %766 = urem i32 %765, 2
  %767 = icmp eq i32 %766, 0
  %768 = icmp slt i32 %763, 10
  %769 = or i1 %767, %768
  br i1 %769, label %originalBBpart2166, label %originalBB164alteredBB

originalBBpart2166:                               ; preds = %originalBB164
  br label %770

; <label>:770:                                    ; preds = %originalBBpart2166
  %771 = load i32, i32* @x.15
  %772 = load i32, i32* @y.16
  %773 = sub i32 %771, 1
  %774 = mul i32 %771, %773
  %775 = urem i32 %774, 2
  %776 = icmp eq i32 %775, 0
  %777 = icmp slt i32 %772, 10
  %778 = or i1 %776, %777
  br i1 %778, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %originalBB168alteredBB, %770
  %779 = load i32, i32* @x.15
  %780 = load i32, i32* @y.16
  %781 = sub i32 %779, 1
  %782 = mul i32 %779, %781
  %783 = urem i32 %782, 2
  %784 = icmp eq i32 %783, 0
  %785 = icmp slt i32 %780, 10
  %786 = or i1 %784, %785
  br i1 %786, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br label %787

; <label>:787:                                    ; preds = %originalBBpart2170
  %788 = load i32, i32* @x.15
  %789 = load i32, i32* @y.16
  %790 = sub i32 %788, 1
  %791 = mul i32 %788, %790
  %792 = urem i32 %791, 2
  %793 = icmp eq i32 %792, 0
  %794 = icmp slt i32 %789, 10
  %795 = or i1 %793, %794
  br i1 %795, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %originalBB172alteredBB, %787
  %796 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  %797 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %796, i32 0, i32 0
  %798 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %797, align 8
  store %struct.bitmap_element_def* %798, %struct.bitmap_element_def** %35, align 8
  store i32 0, i32* %36, align 4
  store i32 53, i32* %37, align 4
  store i32 0, i32* %38, align 4
  %799 = load i32, i32* @x.15
  %800 = load i32, i32* @y.16
  %801 = sub i32 %799, 1
  %802 = mul i32 %799, %801
  %803 = urem i32 %802, 2
  %804 = icmp eq i32 %803, 0
  %805 = icmp slt i32 %800, 10
  %806 = or i1 %804, %805
  br i1 %806, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  br label %807

; <label>:807:                                    ; preds = %850, %originalBBpart2174
  %808 = load i32, i32* @x.15
  %809 = load i32, i32* @y.16
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %originalBB176alteredBB, %807
  %816 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %817 = icmp ne %struct.bitmap_element_def* %816, null
  %818 = load i32, i32* @x.15
  %819 = load i32, i32* @y.16
  %820 = sub i32 %818, 1
  %821 = mul i32 %818, %820
  %822 = urem i32 %821, 2
  %823 = icmp eq i32 %822, 0
  %824 = icmp slt i32 %819, 10
  %825 = or i1 %823, %824
  br i1 %825, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  br i1 %817, label %826, label %848

; <label>:826:                                    ; preds = %originalBBpart2178
  %827 = load i32, i32* @x.15
  %828 = load i32, i32* @y.16
  %829 = sub i32 %827, 1
  %830 = mul i32 %827, %829
  %831 = urem i32 %830, 2
  %832 = icmp eq i32 %831, 0
  %833 = icmp slt i32 %828, 10
  %834 = or i1 %832, %833
  br i1 %834, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %originalBB180alteredBB, %826
  %835 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %836 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %835, i32 0, i32 2
  %837 = load i32, i32* %836, align 8
  %838 = load i32, i32* %36, align 4
  %839 = icmp ult i32 %837, %838
  %840 = load i32, i32* @x.15
  %841 = load i32, i32* @y.16
  %842 = sub i32 %840, 1
  %843 = mul i32 %840, %842
  %844 = urem i32 %843, 2
  %845 = icmp eq i32 %844, 0
  %846 = icmp slt i32 %841, 10
  %847 = or i1 %845, %846
  br i1 %847, label %originalBBpart2182, label %originalBB180alteredBB

originalBBpart2182:                               ; preds = %originalBB180
  br label %848

; <label>:848:                                    ; preds = %originalBBpart2182, %originalBBpart2178
  %849 = phi i1 [ false, %originalBBpart2178 ], [ %839, %originalBBpart2182 ]
  br i1 %849, label %850, label %854

; <label>:850:                                    ; preds = %848
  %851 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %852 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %851, i32 0, i32 0
  %853 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %852, align 8
  store %struct.bitmap_element_def* %853, %struct.bitmap_element_def** %35, align 8
  br label %807

; <label>:854:                                    ; preds = %848
  %855 = load i32, i32* @x.15
  %856 = load i32, i32* @y.16
  %857 = sub i32 %855, 1
  %858 = mul i32 %855, %857
  %859 = urem i32 %858, 2
  %860 = icmp eq i32 %859, 0
  %861 = icmp slt i32 %856, 10
  %862 = or i1 %860, %861
  br i1 %862, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %originalBB184alteredBB, %854
  %863 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %864 = icmp ne %struct.bitmap_element_def* %863, null
  %865 = load i32, i32* @x.15
  %866 = load i32, i32* @y.16
  %867 = sub i32 %865, 1
  %868 = mul i32 %865, %867
  %869 = urem i32 %868, 2
  %870 = icmp eq i32 %869, 0
  %871 = icmp slt i32 %866, 10
  %872 = or i1 %870, %871
  br i1 %872, label %originalBBpart2186, label %originalBB184alteredBB

originalBBpart2186:                               ; preds = %originalBB184
  br i1 %864, label %873, label %880

; <label>:873:                                    ; preds = %originalBBpart2186
  %874 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %875 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %874, i32 0, i32 2
  %876 = load i32, i32* %875, align 8
  %877 = load i32, i32* %36, align 4
  %878 = icmp ne i32 %876, %877
  br i1 %878, label %879, label %880

; <label>:879:                                    ; preds = %873
  store i32 0, i32* %37, align 4
  store i32 0, i32* %38, align 4
  br label %880

; <label>:880:                                    ; preds = %879, %873, %originalBBpart2186
  br label %881

; <label>:881:                                    ; preds = %1045, %880
  %882 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %883 = icmp ne %struct.bitmap_element_def* %882, null
  br i1 %883, label %884, label %1049

; <label>:884:                                    ; preds = %881
  br label %885

; <label>:885:                                    ; preds = %1025, %884
  %886 = load i32, i32* @x.15
  %887 = load i32, i32* @y.16
  %888 = sub i32 %886, 1
  %889 = mul i32 %886, %888
  %890 = urem i32 %889, 2
  %891 = icmp eq i32 %890, 0
  %892 = icmp slt i32 %887, 10
  %893 = or i1 %891, %892
  br i1 %893, label %originalBB188, label %originalBB188alteredBB

originalBB188:                                    ; preds = %originalBB188alteredBB, %885
  %894 = load i32, i32* %38, align 4
  %895 = icmp ult i32 %894, 2
  %896 = load i32, i32* @x.15
  %897 = load i32, i32* @y.16
  %898 = sub i32 %896, 1
  %899 = mul i32 %896, %898
  %900 = urem i32 %899, 2
  %901 = icmp eq i32 %900, 0
  %902 = icmp slt i32 %897, 10
  %903 = or i1 %901, %902
  br i1 %903, label %originalBBpart2190, label %originalBB188alteredBB

originalBBpart2190:                               ; preds = %originalBB188
  br i1 %895, label %904, label %1028

; <label>:904:                                    ; preds = %originalBBpart2190
  %905 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %906 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %905, i32 0, i32 3
  %907 = load i32, i32* %38, align 4
  %908 = zext i32 %907 to i64
  %909 = getelementptr inbounds [2 x i64], [2 x i64]* %906, i64 0, i64 %908
  %910 = load i64, i64* %909, align 8
  store i64 %910, i64* %39, align 8
  %911 = load i64, i64* %39, align 8
  %912 = icmp ne i64 %911, 0
  br i1 %912, label %913, label %1024

; <label>:913:                                    ; preds = %904
  br label %914

; <label>:914:                                    ; preds = %originalBBpart2220, %913
  %915 = load i32, i32* %37, align 4
  %916 = icmp ult i32 %915, 64
  br i1 %916, label %917, label %1023

; <label>:917:                                    ; preds = %914
  %918 = load i32, i32* @x.15
  %919 = load i32, i32* @y.16
  %920 = sub i32 %918, 1
  %921 = mul i32 %918, %920
  %922 = urem i32 %921, 2
  %923 = icmp eq i32 %922, 0
  %924 = icmp slt i32 %919, 10
  %925 = or i1 %923, %924
  br i1 %925, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %originalBB192alteredBB, %917
  %926 = load i32, i32* %37, align 4
  %927 = zext i32 %926 to i64
  %928 = shl i64 1, %927
  store i64 %928, i64* %40, align 8
  %929 = load i64, i64* %39, align 8
  %930 = load i64, i64* %40, align 8
  %931 = and i64 %929, %930
  %932 = icmp ne i64 %931, 0
  %933 = load i32, i32* @x.15
  %934 = load i32, i32* @y.16
  %935 = sub i32 %933, 1
  %936 = mul i32 %933, %935
  %937 = urem i32 %936, 2
  %938 = icmp eq i32 %937, 0
  %939 = icmp slt i32 %934, 10
  %940 = or i1 %938, %939
  br i1 %940, label %originalBBpart2202, label %originalBB192alteredBB

originalBBpart2202:                               ; preds = %originalBB192
  br i1 %932, label %941, label %1003

; <label>:941:                                    ; preds = %originalBBpart2202
  %942 = load i64, i64* %40, align 8
  %943 = xor i64 %942, -1
  %944 = load i64, i64* %39, align 8
  %945 = and i64 %944, %943
  store i64 %945, i64* %39, align 8
  %946 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %947 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %946, i32 0, i32 2
  %948 = load i32, i32* %947, align 8
  %949 = mul i32 %948, 128
  %950 = load i32, i32* %38, align 4
  %951 = mul i32 %950, 64
  %952 = add i32 %949, %951
  %953 = load i32, i32* %37, align 4
  %954 = add i32 %952, %953
  store i32 %954, i32* %17, align 4
  %955 = load %struct.function*, %struct.function** @cfun, align 8
  %956 = getelementptr inbounds %struct.function, %struct.function* %955, i32 0, i32 3
  %957 = load %struct.emit_status*, %struct.emit_status** %956, align 8
  %958 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %957, i32 0, i32 12
  %959 = load %struct.rtx_def**, %struct.rtx_def*** %958, align 8
  %960 = load i32, i32* %17, align 4
  %961 = sext i32 %960 to i64
  %962 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %959, i64 %961
  %963 = load %struct.rtx_def*, %struct.rtx_def** %962, align 8
  %964 = icmp ne %struct.rtx_def* %963, null
  br i1 %964, label %965, label %982

; <label>:965:                                    ; preds = %941
  %966 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %967 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %966, i32 0, i32 4
  %968 = bitcast %union.varray_data_tag* %967 to [1 x %struct.reg_info_def*]*
  %969 = load i32, i32* %17, align 4
  %970 = sext i32 %969 to i64
  %971 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %968, i64 0, i64 %970
  %972 = load %struct.reg_info_def*, %struct.reg_info_def** %971, align 8
  %973 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %972, i32 0, i32 7
  store i32 -1, i32* %973, align 4
  %974 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %975 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %974, i32 0, i32 4
  %976 = bitcast %union.varray_data_tag* %975 to [1 x %struct.reg_info_def*]*
  %977 = load i32, i32* %17, align 4
  %978 = sext i32 %977 to i64
  %979 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %976, i64 0, i64 %978
  %980 = load %struct.reg_info_def*, %struct.reg_info_def** %979, align 8
  %981 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %980, i32 0, i32 9
  store i32 -1, i32* %981, align 4
  br label %982

; <label>:982:                                    ; preds = %965, %941
  %983 = load i64, i64* %39, align 8
  %984 = icmp eq i64 %983, 0
  br i1 %984, label %985, label %986

; <label>:985:                                    ; preds = %982
  br label %1023

; <label>:986:                                    ; preds = %982
  %987 = load i32, i32* @x.15
  %988 = load i32, i32* @y.16
  %989 = sub i32 %987, 1
  %990 = mul i32 %987, %989
  %991 = urem i32 %990, 2
  %992 = icmp eq i32 %991, 0
  %993 = icmp slt i32 %988, 10
  %994 = or i1 %992, %993
  br i1 %994, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %originalBB204alteredBB, %986
  %995 = load i32, i32* @x.15
  %996 = load i32, i32* @y.16
  %997 = sub i32 %995, 1
  %998 = mul i32 %995, %997
  %999 = urem i32 %998, 2
  %1000 = icmp eq i32 %999, 0
  %1001 = icmp slt i32 %996, 10
  %1002 = or i1 %1000, %1001
  br i1 %1002, label %originalBBpart2206, label %originalBB204alteredBB

originalBBpart2206:                               ; preds = %originalBB204
  br label %1003

; <label>:1003:                                   ; preds = %originalBBpart2206, %originalBBpart2202
  br label %1004

; <label>:1004:                                   ; preds = %1003
  %1005 = load i32, i32* @x.15
  %1006 = load i32, i32* @y.16
  %1007 = sub i32 %1005, 1
  %1008 = mul i32 %1005, %1007
  %1009 = urem i32 %1008, 2
  %1010 = icmp eq i32 %1009, 0
  %1011 = icmp slt i32 %1006, 10
  %1012 = or i1 %1010, %1011
  br i1 %1012, label %originalBB208, label %originalBB208alteredBB

originalBB208:                                    ; preds = %originalBB208alteredBB, %1004
  %1013 = load i32, i32* %37, align 4
  %1014 = add i32 %1013, 1
  store i32 %1014, i32* %37, align 4
  %1015 = load i32, i32* @x.15
  %1016 = load i32, i32* @y.16
  %1017 = sub i32 %1015, 1
  %1018 = mul i32 %1015, %1017
  %1019 = urem i32 %1018, 2
  %1020 = icmp eq i32 %1019, 0
  %1021 = icmp slt i32 %1016, 10
  %1022 = or i1 %1020, %1021
  br i1 %1022, label %originalBBpart2220, label %originalBB208alteredBB

originalBBpart2220:                               ; preds = %originalBB208
  br label %914

; <label>:1023:                                   ; preds = %985, %914
  br label %1024

; <label>:1024:                                   ; preds = %1023, %904
  store i32 0, i32* %37, align 4
  br label %1025

; <label>:1025:                                   ; preds = %1024
  %1026 = load i32, i32* %38, align 4
  %1027 = add i32 %1026, 1
  store i32 %1027, i32* %38, align 4
  br label %885

; <label>:1028:                                   ; preds = %originalBBpart2190
  %1029 = load i32, i32* @x.15
  %1030 = load i32, i32* @y.16
  %1031 = sub i32 %1029, 1
  %1032 = mul i32 %1029, %1031
  %1033 = urem i32 %1032, 2
  %1034 = icmp eq i32 %1033, 0
  %1035 = icmp slt i32 %1030, 10
  %1036 = or i1 %1034, %1035
  br i1 %1036, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %originalBB222alteredBB, %1028
  store i32 0, i32* %38, align 4
  %1037 = load i32, i32* @x.15
  %1038 = load i32, i32* @y.16
  %1039 = sub i32 %1037, 1
  %1040 = mul i32 %1037, %1039
  %1041 = urem i32 %1040, 2
  %1042 = icmp eq i32 %1041, 0
  %1043 = icmp slt i32 %1038, 10
  %1044 = or i1 %1042, %1043
  br i1 %1044, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br label %1045

; <label>:1045:                                   ; preds = %originalBBpart2224
  %1046 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %1047 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1046, i32 0, i32 0
  %1048 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %1047, align 8
  store %struct.bitmap_element_def* %1048, %struct.bitmap_element_def** %35, align 8
  br label %881

; <label>:1049:                                   ; preds = %881
  %1050 = load i32, i32* @x.15
  %1051 = load i32, i32* @y.16
  %1052 = sub i32 %1050, 1
  %1053 = mul i32 %1050, %1052
  %1054 = urem i32 %1053, 2
  %1055 = icmp eq i32 %1054, 0
  %1056 = icmp slt i32 %1051, 10
  %1057 = or i1 %1055, %1056
  br i1 %1057, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %originalBB226alteredBB, %1049
  %1058 = load i32, i32* @x.15
  %1059 = load i32, i32* @y.16
  %1060 = sub i32 %1058, 1
  %1061 = mul i32 %1058, %1060
  %1062 = urem i32 %1061, 2
  %1063 = icmp eq i32 %1062, 0
  %1064 = icmp slt i32 %1059, 10
  %1065 = or i1 %1063, %1064
  br i1 %1065, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br label %1066

; <label>:1066:                                   ; preds = %originalBBpart2228
  br label %1067

; <label>:1067:                                   ; preds = %1066, %originalBBpart298
  %1068 = load i32, i32* %13, align 4
  %1069 = icmp eq i32 %1068, 0
  br i1 %1069, label %1073, label %1070

; <label>:1070:                                   ; preds = %1067
  %1071 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1072 = icmp ne %struct.simple_bitmap_def* %1071, null
  br label %1073

; <label>:1073:                                   ; preds = %1070, %1067
  %1074 = phi i1 [ true, %1067 ], [ %1072, %1070 ]
  %1075 = load i32, i32* @x.15
  %1076 = load i32, i32* @y.16
  %1077 = sub i32 %1075, 1
  %1078 = mul i32 %1075, %1077
  %1079 = urem i32 %1078, 2
  %1080 = icmp eq i32 %1079, 0
  %1081 = icmp slt i32 %1076, 10
  %1082 = or i1 %1080, %1081
  br i1 %1082, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %originalBB230alteredBB, %1073
  %1083 = select i1 %1074, i32 6, i32 5
  call void @timevar_pop(i32 %1083)
  %1084 = load i32, i32* @x.15
  %1085 = load i32, i32* @y.16
  %1086 = sub i32 %1084, 1
  %1087 = mul i32 %1084, %1086
  %1088 = urem i32 %1087, 2
  %1089 = icmp eq i32 %1088, 0
  %1090 = icmp slt i32 %1085, 10
  %1091 = or i1 %1089, %1090
  br i1 %1091, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %3
  %1092 = alloca %struct.simple_bitmap_def*, align 8
  %1093 = alloca i32, align 4
  %1094 = alloca i32, align 4
  %1095 = alloca %struct.bitmap_head_def*, align 8
  %1096 = alloca %struct.bitmap_head_def, align 8
  %1097 = alloca i32, align 4
  %1098 = alloca i32, align 4
  %1099 = alloca i32, align 4
  %1100 = alloca %struct.basic_block_def*, align 8
  %1101 = alloca i32, align 4
  %1102 = alloca i32, align 4
  %1103 = alloca i32, align 4
  %1104 = alloca i64*, align 8
  %1105 = alloca i64, align 8
  %1106 = alloca i64, align 8
  %1107 = alloca %struct.basic_block_def*, align 8
  %1108 = alloca %struct.basic_block_def*, align 8
  %1109 = alloca %struct.bitmap_element_def*, align 8
  %1110 = alloca i32, align 4
  %1111 = alloca i32, align 4
  %1112 = alloca i32, align 4
  %1113 = alloca i64, align 8
  %1114 = alloca i64, align 8
  %1115 = alloca %struct.bitmap_element_def*, align 8
  %1116 = alloca i32, align 4
  %1117 = alloca i32, align 4
  %1118 = alloca i32, align 4
  %1119 = alloca i64, align 8
  %1120 = alloca i64, align 8
  store %struct.simple_bitmap_def* %0, %struct.simple_bitmap_def** %1092, align 8
  store i32 %1, i32* %1093, align 4
  store i32 %2, i32* %1094, align 4
  %1121 = load i32, i32* %1094, align 4
  store i32 %1121, i32* %1098, align 4
  %1122 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %1096)
  store %struct.bitmap_head_def* %1122, %struct.bitmap_head_def** %1095, align 8
  %1123 = load i32, i32* %1093, align 4
  %1124 = icmp eq i32 %1123, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %73
  %1125 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  call void @clear_log_links(%struct.simple_bitmap_def* %1125)
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %94
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %111
  store i32 0, i32* %19, align 4
  %1126 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1127 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1128 = load i32, i32* %14, align 4
  %_ = sub i32 0, %1128
  %gen = add i32 %_, 48
  %_11 = sub i32 0, %1128
  %gen12 = add i32 %_11, 48
  %1129 = and i32 %1128, 48
  call void @calculate_global_regs_live(%struct.simple_bitmap_def* %1126, %struct.simple_bitmap_def* %1127, i32 %1129)
  %1130 = load i32, i32* %14, align 4
  %_13 = shl i32 %1130, 40
  %1131 = and i32 %1130, 40
  %1132 = icmp ne i32 %1131, 40
  br label %originalBB10

originalBB17alteredBB:                            ; preds = %originalBB17, %136
  %1133 = load i32, i32* @n_basic_blocks, align 4
  %_18 = sub i32 %1133, 1
  %gen19 = mul i32 %_18, 1
  %1134 = sub nsw i32 %1133, 1
  store i32 %1134, i32* %17, align 4
  br label %originalBB17

originalBB23alteredBB:                            ; preds = %originalBB23, %180
  %1135 = load i32, i32* %18, align 4
  %_24 = sub i32 %1135, -25
  %gen25 = mul i32 %_24, -25
  %1136 = and i32 %1135, -25
  store i32 %1136, i32* %18, align 4
  %1137 = load i32, i32* %19, align 4
  %1138 = icmp ne i32 %1137, 0
  br label %originalBB23

originalBB29alteredBB:                            ; preds = %originalBB29, %201
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %223
  %1139 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1140 = call i32 @count_or_remove_death_notes(%struct.simple_bitmap_def* %1139, i32 1)
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %246
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %263
  store i32 0, i32* %22, align 4
  %1141 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1142 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1141, i32 0, i32 1
  %1143 = load i32, i32* %1142, align 4
  store i32 %1143, i32* %23, align 4
  %1144 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1145 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1144, i32 0, i32 3
  %1146 = getelementptr inbounds [1 x i64], [1 x i64]* %1145, i32 0, i32 0
  store i64* %1146, i64** %24, align 8
  store i32 0, i32* %21, align 4
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %290
  %1147 = load i64*, i64** %24, align 8
  %1148 = load i32, i32* %21, align 4
  %1149 = zext i32 %1148 to i64
  %1150 = getelementptr inbounds i64, i64* %1147, i64 %1149
  %1151 = load i64, i64* %1150, align 8
  store i64 %1151, i64* %25, align 8
  %1152 = load i64, i64* %25, align 8
  %1153 = icmp ne i64 %1152, 0
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %315
  %1154 = load i32, i32* %22, align 4
  %1155 = icmp ult i32 %1154, 64
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %334
  %1156 = load i32, i32* %22, align 4
  %1157 = zext i32 %1156 to i64
  %_54 = sub i64 1, %1157
  %gen55 = mul i64 %_54, %1157
  %_56 = sub i64 1, %1157
  %gen57 = mul i64 %_56, %1157
  %1158 = shl i64 1, %1157
  store i64 %1158, i64* %26, align 8
  %1159 = load i64, i64* %25, align 8
  %1160 = load i64, i64* %26, align 8
  %_58 = sub i64 0, %1159
  %gen59 = add i64 %_58, %1160
  %_60 = sub i64 %1159, %1160
  %gen61 = mul i64 %_60, %1160
  %_62 = shl i64 %1159, %1160
  %_63 = shl i64 %1159, %1160
  %_64 = shl i64 %1159, %1160
  %_65 = shl i64 %1159, %1160
  %1161 = and i64 %1159, %1160
  %1162 = icmp ne i64 %1161, 0
  br label %originalBB53

originalBB69alteredBB:                            ; preds = %originalBB69, %384
  %1163 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %1164 = load %struct.basic_block_def*, %struct.basic_block_def** %27, align 8
  call void @verify_local_live_at_start(%struct.bitmap_head_def* %1163, %struct.basic_block_def* %1164)
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %412
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %433
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %475
  %1165 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %1166 = load %struct.basic_block_def*, %struct.basic_block_def** %28, align 8
  call void @verify_local_live_at_start(%struct.bitmap_head_def* %1165, %struct.basic_block_def* %1166)
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %506
  %1167 = load i32, i32* %14, align 4
  %_86 = sub i32 %1167, 4
  %gen87 = mul i32 %_86, 4
  %_88 = sub i32 0, %1167
  %gen89 = add i32 %_88, 4
  %_90 = sub i32 %1167, 4
  %gen91 = mul i32 %_90, 4
  %_92 = sub i32 %1167, 4
  %gen93 = mul i32 %_92, 4
  %_94 = sub i32 %1167, 4
  %gen95 = mul i32 %_94, 4
  %_96 = shl i32 %1167, 4
  %1168 = and i32 %1167, 4
  %1169 = icmp ne i32 %1168, 0
  br label %originalBB85

originalBB100alteredBB:                           ; preds = %originalBB100, %540
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %572
  br label %originalBB104

originalBB108alteredBB:                           ; preds = %originalBB108, %596
  %1170 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %1171 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1170, i32 0, i32 3
  %1172 = load i32, i32* %32, align 4
  %1173 = zext i32 %1172 to i64
  %1174 = getelementptr inbounds [2 x i64], [2 x i64]* %1171, i64 0, i64 %1173
  %1175 = load i64, i64* %1174, align 8
  store i64 %1175, i64* %33, align 8
  %1176 = load i64, i64* %33, align 8
  %1177 = icmp ne i64 %1176, 0
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %621
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %649
  %1178 = load i64, i64* %34, align 8
  %_117 = shl i64 %1178, -1
  %_118 = shl i64 %1178, -1
  %_119 = sub i64 %1178, -1
  %gen120 = mul i64 %_119, -1
  %1179 = xor i64 %1178, -1
  %1180 = load i64, i64* %33, align 8
  %_121 = sub i64 0, %1180
  %gen122 = add i64 %_121, %1179
  %1181 = and i64 %1180, %1179
  store i64 %1181, i64* %33, align 8
  %1182 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %1183 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1182, i32 0, i32 2
  %1184 = load i32, i32* %1183, align 8
  %_123 = sub i32 0, %1184
  %gen124 = add i32 %_123, 128
  %_125 = sub i32 0, %1184
  %gen126 = add i32 %_125, 128
  %_127 = sub i32 %1184, 128
  %gen128 = mul i32 %_127, 128
  %_129 = shl i32 %1184, 128
  %1185 = mul i32 %1184, 128
  %1186 = load i32, i32* %32, align 4
  %_130 = sub i32 0, %1186
  %gen131 = add i32 %_130, 64
  %1187 = mul i32 %1186, 64
  %_132 = sub i32 0, %1185
  %gen133 = add i32 %_132, %1187
  %_134 = sub i32 0, %1185
  %gen135 = add i32 %_134, %1187
  %_136 = sub i32 0, %1185
  %gen137 = add i32 %_136, %1187
  %_138 = shl i32 %1185, %1187
  %_139 = sub i32 %1185, %1187
  %gen140 = mul i32 %_139, %1187
  %_141 = sub i32 %1185, %1187
  %gen142 = mul i32 %_141, %1187
  %_143 = sub i32 0, %1185
  %gen144 = add i32 %_143, %1187
  %_145 = sub i32 %1185, %1187
  %gen146 = mul i32 %_145, %1187
  %1188 = add i32 %1185, %1187
  %1189 = load i32, i32* %31, align 4
  %_147 = sub i32 %1188, %1189
  %gen148 = mul i32 %_147, %1189
  %1190 = add i32 %1188, %1189
  store i32 %1190, i32* %17, align 4
  %1191 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1192 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1191, i32 0, i32 4
  %1193 = bitcast %union.varray_data_tag* %1192 to [1 x %struct.reg_info_def*]*
  %1194 = load i32, i32* %17, align 4
  %1195 = sext i32 %1194 to i64
  %1196 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1193, i64 0, i64 %1195
  %1197 = load %struct.reg_info_def*, %struct.reg_info_def** %1196, align 8
  %1198 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1197, i32 0, i32 9
  store i32 -2, i32* %1198, align 4
  %1199 = load i64, i64* %33, align 8
  %1200 = icmp eq i64 %1199, 0
  br label %originalBB116

originalBB152alteredBB:                           ; preds = %originalBB152, %695
  br label %originalBB152

originalBB156alteredBB:                           ; preds = %originalBB156, %716
  store i32 0, i32* %32, align 4
  br label %originalBB156

originalBB160alteredBB:                           ; preds = %originalBB160, %733
  %1201 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %29, align 8
  %1202 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1201, i32 0, i32 0
  %1203 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %1202, align 8
  store %struct.bitmap_element_def* %1203, %struct.bitmap_element_def** %29, align 8
  br label %originalBB160

originalBB164alteredBB:                           ; preds = %originalBB164, %753
  br label %originalBB164

originalBB168alteredBB:                           ; preds = %originalBB168, %770
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %787
  %1204 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  %1205 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %1204, i32 0, i32 0
  %1206 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %1205, align 8
  store %struct.bitmap_element_def* %1206, %struct.bitmap_element_def** %35, align 8
  store i32 0, i32* %36, align 4
  store i32 53, i32* %37, align 4
  store i32 0, i32* %38, align 4
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %807
  %1207 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %1208 = icmp ne %struct.bitmap_element_def* %1207, null
  br label %originalBB176

originalBB180alteredBB:                           ; preds = %originalBB180, %826
  %1209 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %1210 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1209, i32 0, i32 2
  %1211 = load i32, i32* %1210, align 8
  %1212 = load i32, i32* %36, align 4
  %1213 = icmp ult i32 %1211, %1212
  br label %originalBB180

originalBB184alteredBB:                           ; preds = %originalBB184, %854
  %1214 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %35, align 8
  %1215 = icmp ne %struct.bitmap_element_def* %1214, null
  br label %originalBB184

originalBB188alteredBB:                           ; preds = %originalBB188, %885
  %1216 = load i32, i32* %38, align 4
  %1217 = icmp ult i32 %1216, 2
  br label %originalBB188

originalBB192alteredBB:                           ; preds = %originalBB192, %917
  %1218 = load i32, i32* %37, align 4
  %1219 = zext i32 %1218 to i64
  %_193 = sub i64 1, %1219
  %gen194 = mul i64 %_193, %1219
  %_195 = sub i64 0, 1
  %gen196 = add i64 %_195, %1219
  %_197 = sub i64 0, 1
  %gen198 = add i64 %_197, %1219
  %1220 = shl i64 1, %1219
  store i64 %1220, i64* %40, align 8
  %1221 = load i64, i64* %39, align 8
  %1222 = load i64, i64* %40, align 8
  %_199 = shl i64 %1221, %1222
  %_200 = shl i64 %1221, %1222
  %1223 = and i64 %1221, %1222
  %1224 = icmp ne i64 %1223, 0
  br label %originalBB192

originalBB204alteredBB:                           ; preds = %originalBB204, %986
  br label %originalBB204

originalBB208alteredBB:                           ; preds = %originalBB208, %1004
  %1225 = load i32, i32* %37, align 4
  %_209 = shl i32 %1225, 1
  %_210 = sub i32 %1225, 1
  %gen211 = mul i32 %_210, 1
  %_212 = sub i32 0, %1225
  %gen213 = add i32 %_212, 1
  %_214 = shl i32 %1225, 1
  %_215 = sub i32 0, %1225
  %gen216 = add i32 %_215, 1
  %_217 = sub i32 %1225, 1
  %gen218 = mul i32 %_217, 1
  %1226 = add i32 %1225, 1
  store i32 %1226, i32* %37, align 4
  br label %originalBB208

originalBB222alteredBB:                           ; preds = %originalBB222, %1028
  store i32 0, i32* %38, align 4
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %1049
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %1073
  %1227 = select i1 %1074, i32 6, i32 5
  call void @timevar_pop(i32 %1227)
  br label %originalBB230
}

declare void @end_alias_analysis() #1

declare void @dump_flow_info(%struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define void @free_basic_block_vars(i32) #0 {
  %2 = load i32, i32* @x.17
  %3 = load i32, i32* @y.18
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  %11 = load i32, i32* %10, align 4
  %12 = icmp ne i32 %11, 0
  %13 = load i32, i32* @x.17
  %14 = load i32, i32* @y.18
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %50, label %21

; <label>:21:                                     ; preds = %originalBBpart2
  %22 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %23 = icmp ne %struct.varray_head_tag* %22, null
  br i1 %23, label %24, label %33

; <label>:24:                                     ; preds = %21
  call void @clear_edges()
  br label %25

; <label>:25:                                     ; preds = %24
  %26 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %27 = icmp ne %struct.varray_head_tag* %26, null
  br i1 %27, label %28, label %31

; <label>:28:                                     ; preds = %25
  %29 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %30 = bitcast %struct.varray_head_tag* %29 to i8*
  call void @free(i8* %30) #6
  store %struct.varray_head_tag* null, %struct.varray_head_tag** @basic_block_info, align 8
  br label %31

; <label>:31:                                     ; preds = %28, %25
  br label %32

; <label>:32:                                     ; preds = %31
  br label %33

; <label>:33:                                     ; preds = %32, %21
  %34 = load i32, i32* @x.17
  %35 = load i32, i32* @y.18
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %33
  store i32 0, i32* @n_basic_blocks, align 4
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 10), align 16
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 9), align 8
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 10), align 16
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 8), align 16
  %42 = load i32, i32* @x.17
  %43 = load i32, i32* @y.18
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50

; <label>:50:                                     ; preds = %originalBBpart24, %originalBBpart2
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %1
  %51 = alloca i32, align 4
  store i32 %0, i32* %51, align 4
  %52 = load i32, i32* %51, align 4
  %53 = icmp ne i32 %52, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  store i32 0, i32* @n_basic_blocks, align 4
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 10), align 16
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 9), align 8
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 10), align 16
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 8), align 16
  br label %originalBB1
}

; Function Attrs: noinline nounwind uwtable
define internal void @delete_dead_jumptables() #0 {
  %1 = load i32, i32* @x.19
  %2 = load i32, i32* @y.20
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %0
  %9 = alloca %struct.rtx_def*, align 8
  %10 = alloca %struct.rtx_def*, align 8
  %11 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %11, %struct.rtx_def** %9, align 8
  %12 = load i32, i32* @x.19
  %13 = load i32, i32* @y.20
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %20

; <label>:20:                                     ; preds = %130, %originalBBpart2
  %21 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %22 = icmp ne %struct.rtx_def* %21, null
  br i1 %22, label %23, label %132

; <label>:23:                                     ; preds = %20
  %24 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %25, i64 0, i64 2
  %27 = bitcast %union.rtunion_def* %26 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %10, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %31 = load i32, i32* %30, align 8
  %32 = and i32 %31, 65535
  %33 = icmp eq i32 %32, 36
  br i1 %33, label %34, label %113

; <label>:34:                                     ; preds = %23
  %35 = load i32, i32* @x.19
  %36 = load i32, i32* @y.20
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %34
  %43 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %44, i64 0, i64 3
  %46 = bitcast %union.rtunion_def* %45 to i32*
  %47 = load i32, i32* %46, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %50 = load i32, i32* %49, align 8
  %51 = lshr i32 %50, 28
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %47, %52
  %54 = load i32, i32* @x.19
  %55 = load i32, i32* @y.20
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart27, label %originalBB1alteredBB

originalBBpart27:                                 ; preds = %originalBB1
  br i1 %53, label %62, label %113

; <label>:62:                                     ; preds = %originalBBpart27
  %63 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %65 = load i32, i32* %64, align 8
  %66 = and i32 %65, 65535
  %67 = icmp eq i32 %66, 33
  br i1 %67, label %68, label %113

; <label>:68:                                     ; preds = %62
  %69 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %70, i64 0, i64 3
  %72 = bitcast %union.rtunion_def* %71 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %72, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %75 = load i32, i32* %74, align 8
  %76 = and i32 %75, 65535
  %77 = icmp eq i32 %76, 44
  br i1 %77, label %88, label %78

; <label>:78:                                     ; preds = %68
  %79 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %80, i64 0, i64 3
  %82 = bitcast %union.rtunion_def* %81 to %struct.rtx_def**
  %83 = load %struct.rtx_def*, %struct.rtx_def** %82, align 8
  %84 = bitcast %struct.rtx_def* %83 to i32*
  %85 = load i32, i32* %84, align 8
  %86 = and i32 %85, 65535
  %87 = icmp eq i32 %86, 45
  br i1 %87, label %88, label %113

; <label>:88:                                     ; preds = %78, %68
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %90 = icmp ne %struct._IO_FILE* %89, null
  br i1 %90, label %91, label %99

; <label>:91:                                     ; preds = %88
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %94, i64 0, i64 0
  %96 = bitcast %union.rtunion_def* %95 to i32*
  %97 = load i32, i32* %96, align 8
  %98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %92, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i32 0, i32 0), i32 %97)
  br label %99

; <label>:99:                                     ; preds = %91, %88
  %100 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %101, i64 0, i64 2
  %103 = bitcast %union.rtunion_def* %102 to %struct.rtx_def**
  %104 = load %struct.rtx_def*, %struct.rtx_def** %103, align 8
  %105 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %104)
  %106 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %107 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %106)
  %108 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %109, i64 0, i64 2
  %111 = bitcast %union.rtunion_def* %110 to %struct.rtx_def**
  %112 = load %struct.rtx_def*, %struct.rtx_def** %111, align 8
  store %struct.rtx_def* %112, %struct.rtx_def** %10, align 8
  br label %113

; <label>:113:                                    ; preds = %99, %78, %62, %originalBBpart27, %23
  %114 = load i32, i32* @x.19
  %115 = load i32, i32* @y.20
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB9, label %originalBB9alteredBB

originalBB9:                                      ; preds = %originalBB9alteredBB, %113
  %122 = load i32, i32* @x.19
  %123 = load i32, i32* @y.20
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart211, label %originalBB9alteredBB

originalBBpart211:                                ; preds = %originalBB9
  br label %130

; <label>:130:                                    ; preds = %originalBBpart211
  %131 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  store %struct.rtx_def* %131, %struct.rtx_def** %9, align 8
  br label %20

; <label>:132:                                    ; preds = %20
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %0
  %133 = alloca %struct.rtx_def*, align 8
  %134 = alloca %struct.rtx_def*, align 8
  %135 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %135, %struct.rtx_def** %133, align 8
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %136 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %137, i64 0, i64 3
  %139 = bitcast %union.rtunion_def* %138 to i32*
  %140 = load i32, i32* %139, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %142 = bitcast %struct.rtx_def* %141 to i32*
  %143 = load i32, i32* %142, align 8
  %_ = shl i32 %143, 28
  %_2 = sub i32 0, %143
  %gen = add i32 %_2, 28
  %_3 = sub i32 %143, 28
  %gen4 = mul i32 %_3, 28
  %144 = lshr i32 %143, 28
  %_5 = shl i32 %144, 1
  %145 = and i32 %144, 1
  %146 = icmp eq i32 %140, %145
  br label %originalBB1

originalBB9alteredBB:                             ; preds = %originalBB9, %113
  br label %originalBB9
}

declare %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def*) #1

declare void @timevar_push(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @clear_log_links(%struct.simple_bitmap_def*) #0 {
  %2 = load i32, i32* @x.21
  %3 = load i32, i32* @y.22
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca %struct.simple_bitmap_def*, align 8
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i64*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca %struct.basic_block_def*, align 8
  store %struct.simple_bitmap_def* %0, %struct.simple_bitmap_def** %10, align 8
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %10, align 8
  %21 = icmp ne %struct.simple_bitmap_def* %20, null
  %22 = load i32, i32* @x.21
  %23 = load i32, i32* @y.22
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %58, label %30

; <label>:30:                                     ; preds = %originalBBpart2
  %31 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %31, %struct.rtx_def** %11, align 8
  br label %32

; <label>:32:                                     ; preds = %51, %30
  %33 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %34 = icmp ne %struct.rtx_def* %33, null
  br i1 %34, label %35, label %57

; <label>:35:                                     ; preds = %32
  %36 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %38 = load i32, i32* %37, align 8
  %39 = and i32 %38, 65535
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %42 to i32
  %44 = icmp eq i32 %43, 105
  br i1 %44, label %45, label %50

; <label>:45:                                     ; preds = %35
  %46 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %47, i64 0, i64 5
  %49 = bitcast %union.rtunion_def* %48 to %struct.rtx_def**
  call void @free_INSN_LIST_list(%struct.rtx_def** %49)
  br label %50

; <label>:50:                                     ; preds = %45, %35
  br label %51

; <label>:51:                                     ; preds = %50
  %52 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %53, i64 0, i64 2
  %55 = bitcast %union.rtunion_def* %54 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %55, align 8
  store %struct.rtx_def* %56, %struct.rtx_def** %11, align 8
  br label %32

; <label>:57:                                     ; preds = %32
  br label %317

; <label>:58:                                     ; preds = %originalBBpart2
  br label %59

; <label>:59:                                     ; preds = %58
  store i32 0, i32* %14, align 4
  %60 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %10, align 8
  %61 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %60, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  store i32 %62, i32* %15, align 4
  %63 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %10, align 8
  %64 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %63, i32 0, i32 3
  %65 = getelementptr inbounds [1 x i64], [1 x i64]* %64, i32 0, i32 0
  store i64* %65, i64** %16, align 8
  store i32 0, i32* %13, align 4
  br label %66

; <label>:66:                                     ; preds = %312, %59
  %67 = load i32, i32* @x.21
  %68 = load i32, i32* @y.22
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %66
  %75 = load i32, i32* %13, align 4
  %76 = load i32, i32* %15, align 4
  %77 = icmp ult i32 %75, %76
  %78 = load i32, i32* @x.21
  %79 = load i32, i32* @y.22
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %77, label %86, label %315

; <label>:86:                                     ; preds = %originalBBpart24
  %87 = load i64*, i64** %16, align 8
  %88 = load i32, i32* %13, align 4
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i64, i64* %87, i64 %89
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %17, align 8
  %92 = load i64, i64* %17, align 8
  %93 = icmp ne i64 %92, 0
  br i1 %93, label %94, label %295

; <label>:94:                                     ; preds = %86
  %95 = load i32, i32* @x.21
  %96 = load i32, i32* @y.22
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %94
  %103 = load i32, i32* @x.21
  %104 = load i32, i32* @y.22
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %111

; <label>:111:                                    ; preds = %originalBBpart253, %originalBBpart28
  %112 = load i32, i32* @x.21
  %113 = load i32, i32* @y.22
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %111
  %120 = load i32, i32* %14, align 4
  %121 = icmp ult i32 %120, 64
  %122 = load i32, i32* @x.21
  %123 = load i32, i32* @y.22
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %121, label %130, label %294

; <label>:130:                                    ; preds = %originalBBpart212
  %131 = load i32, i32* @x.21
  %132 = load i32, i32* @y.22
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %130
  %139 = load i32, i32* %14, align 4
  %140 = zext i32 %139 to i64
  %141 = shl i64 1, %140
  store i64 %141, i64* %18, align 8
  %142 = load i64, i64* %17, align 8
  %143 = load i64, i64* %18, align 8
  %144 = and i64 %142, %143
  %145 = icmp ne i64 %144, 0
  %146 = load i32, i32* @x.21
  %147 = load i32, i32* @y.22
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart223, label %originalBB14alteredBB

originalBBpart223:                                ; preds = %originalBB14
  br i1 %145, label %154, label %258

; <label>:154:                                    ; preds = %originalBBpart223
  %155 = load i64, i64* %18, align 8
  %156 = xor i64 %155, -1
  %157 = load i64, i64* %17, align 8
  %158 = and i64 %157, %156
  store i64 %158, i64* %17, align 8
  %159 = load i32, i32* %13, align 4
  %160 = mul i32 %159, 64
  %161 = load i32, i32* %14, align 4
  %162 = add i32 %160, %161
  store i32 %162, i32* %12, align 4
  %163 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %164 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %163, i32 0, i32 4
  %165 = bitcast %union.varray_data_tag* %164 to [1 x %struct.basic_block_def*]*
  %166 = load i32, i32* %12, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %165, i64 0, i64 %167
  %169 = load %struct.basic_block_def*, %struct.basic_block_def** %168, align 8
  store %struct.basic_block_def* %169, %struct.basic_block_def** %19, align 8
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %19, align 8
  %171 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %170, i32 0, i32 0
  %172 = load %struct.rtx_def*, %struct.rtx_def** %171, align 8
  store %struct.rtx_def* %172, %struct.rtx_def** %11, align 8
  br label %173

; <label>:173:                                    ; preds = %231, %154
  %174 = load i32, i32* @x.21
  %175 = load i32, i32* @y.22
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %173
  %182 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %183 = load %struct.basic_block_def*, %struct.basic_block_def** %19, align 8
  %184 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %183, i32 0, i32 1
  %185 = load %struct.rtx_def*, %struct.rtx_def** %184, align 8
  %186 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1
  %187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %186, i64 0, i64 2
  %188 = bitcast %union.rtunion_def* %187 to %struct.rtx_def**
  %189 = load %struct.rtx_def*, %struct.rtx_def** %188, align 8
  %190 = icmp ne %struct.rtx_def* %182, %189
  %191 = load i32, i32* @x.21
  %192 = load i32, i32* @y.22
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %190, label %199, label %237

; <label>:199:                                    ; preds = %originalBBpart227
  %200 = load i32, i32* @x.21
  %201 = load i32, i32* @y.22
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %199
  %208 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %209 = bitcast %struct.rtx_def* %208 to i32*
  %210 = load i32, i32* %209, align 8
  %211 = and i32 %210, 65535
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = sext i8 %214 to i32
  %216 = icmp eq i32 %215, 105
  %217 = load i32, i32* @x.21
  %218 = load i32, i32* @y.22
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBBpart236, label %originalBB29alteredBB

originalBBpart236:                                ; preds = %originalBB29
  br i1 %216, label %225, label %230

; <label>:225:                                    ; preds = %originalBBpart236
  %226 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %226, i32 0, i32 1
  %228 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %227, i64 0, i64 5
  %229 = bitcast %union.rtunion_def* %228 to %struct.rtx_def**
  call void @free_INSN_LIST_list(%struct.rtx_def** %229)
  br label %230

; <label>:230:                                    ; preds = %225, %originalBBpart236
  br label %231

; <label>:231:                                    ; preds = %230
  %232 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %233 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1
  %234 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %233, i64 0, i64 2
  %235 = bitcast %union.rtunion_def* %234 to %struct.rtx_def**
  %236 = load %struct.rtx_def*, %struct.rtx_def** %235, align 8
  store %struct.rtx_def* %236, %struct.rtx_def** %11, align 8
  br label %173

; <label>:237:                                    ; preds = %originalBBpart227
  %238 = load i32, i32* @x.21
  %239 = load i32, i32* @y.22
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %237
  %246 = load i64, i64* %17, align 8
  %247 = icmp eq i64 %246, 0
  %248 = load i32, i32* @x.21
  %249 = load i32, i32* @y.22
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %247, label %256, label %257

; <label>:256:                                    ; preds = %originalBBpart240
  br label %294

; <label>:257:                                    ; preds = %originalBBpart240
  br label %258

; <label>:258:                                    ; preds = %257, %originalBBpart223
  %259 = load i32, i32* @x.21
  %260 = load i32, i32* @y.22
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %258
  %267 = load i32, i32* @x.21
  %268 = load i32, i32* @y.22
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %275

; <label>:275:                                    ; preds = %originalBBpart244
  %276 = load i32, i32* @x.21
  %277 = load i32, i32* @y.22
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %275
  %284 = load i32, i32* %14, align 4
  %285 = add i32 %284, 1
  store i32 %285, i32* %14, align 4
  %286 = load i32, i32* @x.21
  %287 = load i32, i32* @y.22
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart253, label %originalBB46alteredBB

originalBBpart253:                                ; preds = %originalBB46
  br label %111

; <label>:294:                                    ; preds = %256, %originalBBpart212
  br label %295

; <label>:295:                                    ; preds = %294, %86
  %296 = load i32, i32* @x.21
  %297 = load i32, i32* @y.22
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %originalBB55alteredBB, %295
  %304 = load i32, i32* @x.21
  %305 = load i32, i32* @y.22
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br label %312

; <label>:312:                                    ; preds = %originalBBpart257
  %313 = load i32, i32* %13, align 4
  %314 = add i32 %313, 1
  store i32 %314, i32* %13, align 4
  store i32 0, i32* %14, align 4
  br label %66

; <label>:315:                                    ; preds = %originalBBpart24
  br label %316

; <label>:316:                                    ; preds = %315
  br label %317

; <label>:317:                                    ; preds = %316, %57
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %1
  %318 = alloca %struct.simple_bitmap_def*, align 8
  %319 = alloca %struct.rtx_def*, align 8
  %320 = alloca i32, align 4
  %321 = alloca i32, align 4
  %322 = alloca i32, align 4
  %323 = alloca i32, align 4
  %324 = alloca i64*, align 8
  %325 = alloca i64, align 8
  %326 = alloca i64, align 8
  %327 = alloca %struct.basic_block_def*, align 8
  store %struct.simple_bitmap_def* %0, %struct.simple_bitmap_def** %318, align 8
  %328 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %318, align 8
  %329 = icmp ne %struct.simple_bitmap_def* %328, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %66
  %330 = load i32, i32* %13, align 4
  %331 = load i32, i32* %15, align 4
  %332 = icmp ult i32 %330, %331
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %94
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %111
  %333 = load i32, i32* %14, align 4
  %334 = icmp ult i32 %333, 64
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %130
  %335 = load i32, i32* %14, align 4
  %336 = zext i32 %335 to i64
  %_ = shl i64 1, %336
  %_15 = sub i64 1, %336
  %gen = mul i64 %_15, %336
  %_16 = sub i64 1, %336
  %gen17 = mul i64 %_16, %336
  %_18 = shl i64 1, %336
  %_19 = shl i64 1, %336
  %337 = shl i64 1, %336
  store i64 %337, i64* %18, align 8
  %338 = load i64, i64* %17, align 8
  %339 = load i64, i64* %18, align 8
  %_20 = shl i64 %338, %339
  %_21 = shl i64 %338, %339
  %340 = and i64 %338, %339
  %341 = icmp ne i64 %340, 0
  br label %originalBB14

originalBB25alteredBB:                            ; preds = %originalBB25, %173
  %342 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %343 = load %struct.basic_block_def*, %struct.basic_block_def** %19, align 8
  %344 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %343, i32 0, i32 1
  %345 = load %struct.rtx_def*, %struct.rtx_def** %344, align 8
  %346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %345, i32 0, i32 1
  %347 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %346, i64 0, i64 2
  %348 = bitcast %union.rtunion_def* %347 to %struct.rtx_def**
  %349 = load %struct.rtx_def*, %struct.rtx_def** %348, align 8
  %350 = icmp ne %struct.rtx_def* %342, %349
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %199
  %351 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %352 = bitcast %struct.rtx_def* %351 to i32*
  %353 = load i32, i32* %352, align 8
  %_30 = sub i32 0, %353
  %gen31 = add i32 %_30, 65535
  %_32 = shl i32 %353, 65535
  %_33 = sub i32 0, %353
  %gen34 = add i32 %_33, 65535
  %354 = and i32 %353, 65535
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = sext i8 %357 to i32
  %359 = icmp eq i32 %358, 105
  br label %originalBB29

originalBB38alteredBB:                            ; preds = %originalBB38, %237
  %360 = load i64, i64* %17, align 8
  %361 = icmp eq i64 %360, 0
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %258
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %275
  %362 = load i32, i32* %14, align 4
  %_47 = sub i32 0, %362
  %gen48 = add i32 %_47, 1
  %_49 = sub i32 %362, 1
  %gen50 = mul i32 %_49, 1
  %_51 = shl i32 %362, 1
  %363 = add i32 %362, 1
  store i32 %363, i32* %14, align 4
  br label %originalBB46

originalBB55alteredBB:                            ; preds = %originalBB55, %295
  br label %originalBB55
}

; Function Attrs: noinline nounwind uwtable
define internal void @calculate_global_regs_live(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, i32) #0 {
  %4 = load i32, i32* @x.23
  %5 = load i32, i32* @y.24
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %3
  %12 = alloca %struct.simple_bitmap_def*, align 8
  %13 = alloca %struct.simple_bitmap_def*, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.basic_block_def**, align 8
  %16 = alloca %struct.basic_block_def**, align 8
  %17 = alloca %struct.basic_block_def**, align 8
  %18 = alloca %struct.basic_block_def**, align 8
  %19 = alloca %struct.bitmap_head_def*, align 8
  %20 = alloca %struct.bitmap_head_def*, align 8
  %21 = alloca %struct.bitmap_head_def*, align 8
  %22 = alloca %struct.bitmap_head_def, align 8
  %23 = alloca %struct.bitmap_head_def, align 8
  %24 = alloca %struct.bitmap_head_def, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i64*, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca %struct.basic_block_def*, align 8
  %33 = alloca %struct.basic_block_def*, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca %struct.basic_block_def*, align 8
  %37 = alloca %struct.edge_def*, align 8
  %38 = alloca %struct.basic_block_def*, align 8
  %39 = alloca %struct.obstack*, align 8
  %40 = alloca %struct.obstack*, align 8
  %41 = alloca i32, align 4
  %42 = alloca i8*, align 8
  %43 = alloca %struct.obstack*, align 8
  %44 = alloca i8*, align 8
  %45 = alloca i8*, align 8
  %46 = alloca %struct.obstack*, align 8
  %47 = alloca %struct.obstack*, align 8
  %48 = alloca i32, align 4
  %49 = alloca i8*, align 8
  %50 = alloca %struct.obstack*, align 8
  %51 = alloca i8*, align 8
  %52 = alloca i8*, align 8
  %53 = alloca %struct.basic_block_def*, align 8
  %54 = alloca i32, align 4
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i64*, align 8
  %58 = alloca i64, align 8
  %59 = alloca i64, align 8
  %60 = alloca %struct.basic_block_def*, align 8
  %61 = alloca %struct.basic_block_def*, align 8
  store %struct.simple_bitmap_def* %0, %struct.simple_bitmap_def** %12, align 8
  store %struct.simple_bitmap_def* %1, %struct.simple_bitmap_def** %13, align 8
  store i32 %2, i32* %14, align 4
  %62 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %22)
  store %struct.bitmap_head_def* %62, %struct.bitmap_head_def** %19, align 8
  %63 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %24)
  store %struct.bitmap_head_def* %63, %struct.bitmap_head_def** %20, align 8
  %64 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %23)
  store %struct.bitmap_head_def* %64, %struct.bitmap_head_def** %21, align 8
  store i32 0, i32* %25, align 4
  %65 = load i32, i32* @x.23
  %66 = load i32, i32* @y.24
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %73

; <label>:73:                                     ; preds = %102, %originalBBpart2
  %74 = load i32, i32* %25, align 4
  %75 = icmp slt i32 %74, 53
  br i1 %75, label %76, label %105

; <label>:76:                                     ; preds = %73
  %77 = load i32, i32* %25, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [53 x i8], [53 x i8]* @call_used_regs, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = icmp ne i8 %80, 0
  br i1 %81, label %82, label %85

; <label>:82:                                     ; preds = %76
  %83 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %21, align 8
  %84 = load i32, i32* %25, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %83, i32 %84)
  br label %85

; <label>:85:                                     ; preds = %82, %76
  %86 = load i32, i32* @x.23
  %87 = load i32, i32* @y.24
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %85
  %94 = load i32, i32* @x.23
  %95 = load i32, i32* @y.24
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %102

; <label>:102:                                    ; preds = %originalBBpart24
  %103 = load i32, i32* %25, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %25, align 4
  br label %73

; <label>:105:                                    ; preds = %73
  %106 = load i32, i32* @x.23
  %107 = load i32, i32* @y.24
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %105
  %114 = load i32, i32* @n_basic_blocks, align 4
  %115 = add nsw i32 %114, 2
  %116 = sext i32 %115 to i64
  %117 = mul i64 %116, 8
  %118 = call noalias i8* @xmalloc(i64 %117)
  %119 = bitcast i8* %118 to %struct.basic_block_def**
  store %struct.basic_block_def** %119, %struct.basic_block_def*** %15, align 8
  %120 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  store %struct.basic_block_def** %120, %struct.basic_block_def*** %17, align 8
  %121 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  %122 = load i32, i32* @n_basic_blocks, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %121, i64 %123
  %125 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %124, i64 2
  store %struct.basic_block_def** %125, %struct.basic_block_def*** %18, align 8
  store %struct.basic_block_def** %125, %struct.basic_block_def*** %16, align 8
  %126 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %127 = icmp ne %struct.simple_bitmap_def* %126, null
  %128 = load i32, i32* @x.23
  %129 = load i32, i32* @y.24
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart213, label %originalBB6alteredBB

originalBBpart213:                                ; preds = %originalBB6
  br i1 %127, label %136, label %320

; <label>:136:                                    ; preds = %originalBBpart213
  %137 = load i32, i32* @x.23
  %138 = load i32, i32* @y.24
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %136
  %145 = load i32, i32* @n_basic_blocks, align 4
  %146 = sub nsw i32 %145, 1
  store i32 %146, i32* %25, align 4
  %147 = load i32, i32* @x.23
  %148 = load i32, i32* @y.24
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart227, label %originalBB15alteredBB

originalBBpart227:                                ; preds = %originalBB15
  br label %155

; <label>:155:                                    ; preds = %183, %originalBBpart227
  %156 = load i32, i32* @x.23
  %157 = load i32, i32* @y.24
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %155
  %164 = load i32, i32* %25, align 4
  %165 = icmp sge i32 %164, 0
  %166 = load i32, i32* @x.23
  %167 = load i32, i32* @y.24
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %165, label %174, label %186

; <label>:174:                                    ; preds = %originalBBpart231
  %175 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %176 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %175, i32 0, i32 4
  %177 = bitcast %union.varray_data_tag* %176 to [1 x %struct.basic_block_def*]*
  %178 = load i32, i32* %25, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %177, i64 0, i64 %179
  %181 = load %struct.basic_block_def*, %struct.basic_block_def** %180, align 8
  %182 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %181, i32 0, i32 10
  store i8* null, i8** %182, align 8
  br label %183

; <label>:183:                                    ; preds = %174
  %184 = load i32, i32* %25, align 4
  %185 = add nsw i32 %184, -1
  store i32 %185, i32* %25, align 4
  br label %155

; <label>:186:                                    ; preds = %originalBBpart231
  br label %187

; <label>:187:                                    ; preds = %186
  %188 = load i32, i32* @x.23
  %189 = load i32, i32* @y.24
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %187
  store i32 0, i32* %27, align 4
  %196 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %197 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %196, i32 0, i32 1
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %28, align 4
  %199 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %200 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %199, i32 0, i32 3
  %201 = getelementptr inbounds [1 x i64], [1 x i64]* %200, i32 0, i32 0
  store i64* %201, i64** %29, align 8
  store i32 0, i32* %26, align 4
  %202 = load i32, i32* @x.23
  %203 = load i32, i32* @y.24
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %210

; <label>:210:                                    ; preds = %315, %originalBBpart235
  %211 = load i32, i32* %26, align 4
  %212 = load i32, i32* %28, align 4
  %213 = icmp ult i32 %211, %212
  br i1 %213, label %214, label %318

; <label>:214:                                    ; preds = %210
  %215 = load i32, i32* @x.23
  %216 = load i32, i32* @y.24
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %214
  %223 = load i64*, i64** %29, align 8
  %224 = load i32, i32* %26, align 4
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds i64, i64* %223, i64 %225
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %30, align 8
  %228 = load i64, i64* %30, align 8
  %229 = icmp ne i64 %228, 0
  %230 = load i32, i32* @x.23
  %231 = load i32, i32* @y.24
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %229, label %238, label %314

; <label>:238:                                    ; preds = %originalBBpart239
  br label %239

; <label>:239:                                    ; preds = %originalBBpart253, %238
  %240 = load i32, i32* %27, align 4
  %241 = icmp ult i32 %240, 64
  br i1 %241, label %242, label %313

; <label>:242:                                    ; preds = %239
  %243 = load i32, i32* %27, align 4
  %244 = zext i32 %243 to i64
  %245 = shl i64 1, %244
  store i64 %245, i64* %31, align 8
  %246 = load i64, i64* %30, align 8
  %247 = load i64, i64* %31, align 8
  %248 = and i64 %246, %247
  %249 = icmp ne i64 %248, 0
  br i1 %249, label %250, label %293

; <label>:250:                                    ; preds = %242
  %251 = load i64, i64* %31, align 8
  %252 = xor i64 %251, -1
  %253 = load i64, i64* %30, align 8
  %254 = and i64 %253, %252
  store i64 %254, i64* %30, align 8
  %255 = load i32, i32* %26, align 4
  %256 = mul i32 %255, 64
  %257 = load i32, i32* %27, align 4
  %258 = add i32 %256, %257
  store i32 %258, i32* %25, align 4
  %259 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %260 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %259, i32 0, i32 4
  %261 = bitcast %union.varray_data_tag* %260 to [1 x %struct.basic_block_def*]*
  %262 = load i32, i32* %25, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %261, i64 0, i64 %263
  %265 = load %struct.basic_block_def*, %struct.basic_block_def** %264, align 8
  store %struct.basic_block_def* %265, %struct.basic_block_def** %32, align 8
  %266 = load %struct.basic_block_def*, %struct.basic_block_def** %32, align 8
  %267 = load %struct.basic_block_def**, %struct.basic_block_def*** %16, align 8
  %268 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %267, i32 -1
  store %struct.basic_block_def** %268, %struct.basic_block_def*** %16, align 8
  store %struct.basic_block_def* %266, %struct.basic_block_def** %268, align 8
  %269 = load %struct.basic_block_def*, %struct.basic_block_def** %32, align 8
  %270 = bitcast %struct.basic_block_def* %269 to i8*
  %271 = load %struct.basic_block_def*, %struct.basic_block_def** %32, align 8
  %272 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %271, i32 0, i32 10
  store i8* %270, i8** %272, align 8
  %273 = load i64, i64* %30, align 8
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %276

; <label>:275:                                    ; preds = %250
  br label %313

; <label>:276:                                    ; preds = %250
  %277 = load i32, i32* @x.23
  %278 = load i32, i32* @y.24
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %276
  %285 = load i32, i32* @x.23
  %286 = load i32, i32* @y.24
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %293

; <label>:293:                                    ; preds = %originalBBpart243, %242
  br label %294

; <label>:294:                                    ; preds = %293
  %295 = load i32, i32* @x.23
  %296 = load i32, i32* @y.24
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %originalBB45alteredBB, %294
  %303 = load i32, i32* %27, align 4
  %304 = add i32 %303, 1
  store i32 %304, i32* %27, align 4
  %305 = load i32, i32* @x.23
  %306 = load i32, i32* @y.24
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBBpart253, label %originalBB45alteredBB

originalBBpart253:                                ; preds = %originalBB45
  br label %239

; <label>:313:                                    ; preds = %275, %239
  br label %314

; <label>:314:                                    ; preds = %313, %originalBBpart239
  br label %315

; <label>:315:                                    ; preds = %314
  %316 = load i32, i32* %26, align 4
  %317 = add i32 %316, 1
  store i32 %317, i32* %26, align 4
  store i32 0, i32* %27, align 4
  br label %210

; <label>:318:                                    ; preds = %210
  br label %319

; <label>:319:                                    ; preds = %318
  br label %360

; <label>:320:                                    ; preds = %originalBBpart213
  %321 = load i32, i32* @x.23
  %322 = load i32, i32* @y.24
  %323 = sub i32 %321, 1
  %324 = mul i32 %321, %323
  %325 = urem i32 %324, 2
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %326, %327
  br i1 %328, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %originalBB55alteredBB, %320
  store i32 0, i32* %25, align 4
  %329 = load i32, i32* @x.23
  %330 = load i32, i32* @y.24
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br label %337

; <label>:337:                                    ; preds = %356, %originalBBpart257
  %338 = load i32, i32* %25, align 4
  %339 = load i32, i32* @n_basic_blocks, align 4
  %340 = icmp slt i32 %338, %339
  br i1 %340, label %341, label %359

; <label>:341:                                    ; preds = %337
  %342 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %343 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %342, i32 0, i32 4
  %344 = bitcast %union.varray_data_tag* %343 to [1 x %struct.basic_block_def*]*
  %345 = load i32, i32* %25, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %344, i64 0, i64 %346
  %348 = load %struct.basic_block_def*, %struct.basic_block_def** %347, align 8
  store %struct.basic_block_def* %348, %struct.basic_block_def** %33, align 8
  %349 = load %struct.basic_block_def*, %struct.basic_block_def** %33, align 8
  %350 = load %struct.basic_block_def**, %struct.basic_block_def*** %16, align 8
  %351 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %350, i32 -1
  store %struct.basic_block_def** %351, %struct.basic_block_def*** %16, align 8
  store %struct.basic_block_def* %349, %struct.basic_block_def** %351, align 8
  %352 = load %struct.basic_block_def*, %struct.basic_block_def** %33, align 8
  %353 = bitcast %struct.basic_block_def* %352 to i8*
  %354 = load %struct.basic_block_def*, %struct.basic_block_def** %33, align 8
  %355 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %354, i32 0, i32 10
  store i8* %353, i8** %355, align 8
  br label %356

; <label>:356:                                    ; preds = %341
  %357 = load i32, i32* %25, align 4
  %358 = add nsw i32 %357, 1
  store i32 %358, i32* %25, align 4
  br label %337

; <label>:359:                                    ; preds = %337
  br label %360

; <label>:360:                                    ; preds = %359, %319
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 10), align 16
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 10), align 16
  %361 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  %362 = icmp ne %struct.simple_bitmap_def* %361, null
  br i1 %362, label %363, label %365

; <label>:363:                                    ; preds = %360
  %364 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  call void @sbitmap_zero(%struct.simple_bitmap_def* %364)
  br label %365

; <label>:365:                                    ; preds = %363, %360
  br label %366

; <label>:366:                                    ; preds = %1363, %1259, %originalBBpart2236, %originalBBpart2224, %769, %365
  %367 = load i32, i32* @x.23
  %368 = load i32, i32* @y.24
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %originalBB59alteredBB, %366
  %375 = load %struct.basic_block_def**, %struct.basic_block_def*** %16, align 8
  %376 = load %struct.basic_block_def**, %struct.basic_block_def*** %17, align 8
  %377 = icmp ne %struct.basic_block_def** %375, %376
  %378 = load i32, i32* @x.23
  %379 = load i32, i32* @y.24
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br i1 %377, label %386, label %1364

; <label>:386:                                    ; preds = %originalBBpart261
  %387 = load i32, i32* @x.23
  %388 = load i32, i32* @y.24
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %originalBB63alteredBB, %386
  %395 = load %struct.basic_block_def**, %struct.basic_block_def*** %16, align 8
  %396 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %395, i32 1
  store %struct.basic_block_def** %396, %struct.basic_block_def*** %16, align 8
  %397 = load %struct.basic_block_def*, %struct.basic_block_def** %395, align 8
  store %struct.basic_block_def* %397, %struct.basic_block_def** %36, align 8
  %398 = load %struct.basic_block_def**, %struct.basic_block_def*** %16, align 8
  %399 = load %struct.basic_block_def**, %struct.basic_block_def*** %18, align 8
  %400 = icmp eq %struct.basic_block_def** %398, %399
  %401 = load i32, i32* @x.23
  %402 = load i32, i32* @y.24
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br i1 %400, label %409, label %427

; <label>:409:                                    ; preds = %originalBBpart265
  %410 = load i32, i32* @x.23
  %411 = load i32, i32* @y.24
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %originalBB67alteredBB, %409
  %418 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  store %struct.basic_block_def** %418, %struct.basic_block_def*** %16, align 8
  %419 = load i32, i32* @x.23
  %420 = load i32, i32* @y.24
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %427

; <label>:427:                                    ; preds = %originalBBpart269, %originalBBpart265
  %428 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %429 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %428, i32 0, i32 10
  store i8* null, i8** %429, align 8
  %430 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %430)
  %431 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %432 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %431, i32 0, i32 5
  %433 = load %struct.edge_def*, %struct.edge_def** %432, align 8
  %434 = icmp ne %struct.edge_def* %433, null
  br i1 %434, label %435, label %602

; <label>:435:                                    ; preds = %427
  %436 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %437 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %436, i32 0, i32 5
  %438 = load %struct.edge_def*, %struct.edge_def** %437, align 8
  store %struct.edge_def* %438, %struct.edge_def** %37, align 8
  br label %439

; <label>:439:                                    ; preds = %581, %435
  %440 = load i32, i32* @x.23
  %441 = load i32, i32* @y.24
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %originalBB71alteredBB, %439
  %448 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %449 = icmp ne %struct.edge_def* %448, null
  %450 = load i32, i32* @x.23
  %451 = load i32, i32* @y.24
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br i1 %449, label %458, label %585

; <label>:458:                                    ; preds = %originalBBpart273
  %459 = load i32, i32* @x.23
  %460 = load i32, i32* @y.24
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %originalBB75alteredBB, %458
  %467 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %468 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %467, i32 0, i32 3
  %469 = load %struct.basic_block_def*, %struct.basic_block_def** %468, align 8
  store %struct.basic_block_def* %469, %struct.basic_block_def** %38, align 8
  %470 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %471 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %470, i32 0, i32 6
  %472 = load i32, i32* %471, align 8
  %473 = and i32 %472, 8
  %474 = icmp ne i32 %473, 0
  %475 = load i32, i32* @x.23
  %476 = load i32, i32* @y.24
  %477 = sub i32 %475, 1
  %478 = mul i32 %475, %477
  %479 = urem i32 %478, 2
  %480 = icmp eq i32 %479, 0
  %481 = icmp slt i32 %476, 10
  %482 = or i1 %480, %481
  br i1 %482, label %originalBBpart278, label %originalBB75alteredBB

originalBBpart278:                                ; preds = %originalBB75
  br i1 %474, label %483, label %510

; <label>:483:                                    ; preds = %originalBBpart278
  %484 = load i32, i32* @x.23
  %485 = load i32, i32* @y.24
  %486 = sub i32 %484, 1
  %487 = mul i32 %484, %486
  %488 = urem i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %489, %490
  br i1 %491, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %originalBB80alteredBB, %483
  %492 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %493 = load %struct.basic_block_def*, %struct.basic_block_def** %38, align 8
  %494 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %493, i32 0, i32 8
  %495 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %494, align 8
  %496 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %21, align 8
  %497 = call i32 @bitmap_operation(%struct.bitmap_head_def* %492, %struct.bitmap_head_def* %495, %struct.bitmap_head_def* %496, i32 1)
  %498 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %499 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %500 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %501 = call i32 @bitmap_operation(%struct.bitmap_head_def* %498, %struct.bitmap_head_def* %499, %struct.bitmap_head_def* %500, i32 2)
  %502 = load i32, i32* @x.23
  %503 = load i32, i32* @y.24
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBBpart282, label %originalBB80alteredBB

originalBBpart282:                                ; preds = %originalBB80
  br label %533

; <label>:510:                                    ; preds = %originalBBpart278
  %511 = load i32, i32* @x.23
  %512 = load i32, i32* @y.24
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %originalBB84alteredBB, %510
  %519 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %520 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %521 = load %struct.basic_block_def*, %struct.basic_block_def** %38, align 8
  %522 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %521, i32 0, i32 8
  %523 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %522, align 8
  %524 = call i32 @bitmap_operation(%struct.bitmap_head_def* %519, %struct.bitmap_head_def* %520, %struct.bitmap_head_def* %523, i32 2)
  %525 = load i32, i32* @x.23
  %526 = load i32, i32* @y.24
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  br label %533

; <label>:533:                                    ; preds = %originalBBpart286, %originalBBpart282
  %534 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %535 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %534, i32 0, i32 6
  %536 = load i32, i32* %535, align 8
  %537 = and i32 %536, 8
  %538 = icmp ne i32 %537, 0
  br i1 %538, label %539, label %564

; <label>:539:                                    ; preds = %533
  store i32 0, i32* %25, align 4
  br label %540

; <label>:540:                                    ; preds = %560, %539
  %541 = load i32, i32* @x.23
  %542 = load i32, i32* @y.24
  %543 = sub i32 %541, 1
  %544 = mul i32 %541, %543
  %545 = urem i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = icmp slt i32 %542, 10
  %548 = or i1 %546, %547
  br i1 %548, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %originalBB88alteredBB, %540
  %549 = load i32, i32* %25, align 4
  %550 = icmp slt i32 %549, 53
  %551 = load i32, i32* @x.23
  %552 = load i32, i32* @y.24
  %553 = sub i32 %551, 1
  %554 = mul i32 %551, %553
  %555 = urem i32 %554, 2
  %556 = icmp eq i32 %555, 0
  %557 = icmp slt i32 %552, 10
  %558 = or i1 %556, %557
  br i1 %558, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  br i1 %550, label %559, label %563

; <label>:559:                                    ; preds = %originalBBpart290
  br label %560

; <label>:560:                                    ; preds = %559
  %561 = load i32, i32* %25, align 4
  %562 = add nsw i32 %561, 1
  store i32 %562, i32* %25, align 4
  br label %540

; <label>:563:                                    ; preds = %originalBBpart290
  br label %564

; <label>:564:                                    ; preds = %563, %533
  %565 = load i32, i32* @x.23
  %566 = load i32, i32* @y.24
  %567 = sub i32 %565, 1
  %568 = mul i32 %565, %567
  %569 = urem i32 %568, 2
  %570 = icmp eq i32 %569, 0
  %571 = icmp slt i32 %566, 10
  %572 = or i1 %570, %571
  br i1 %572, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %originalBB92alteredBB, %564
  %573 = load i32, i32* @x.23
  %574 = load i32, i32* @y.24
  %575 = sub i32 %573, 1
  %576 = mul i32 %573, %575
  %577 = urem i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = icmp slt i32 %574, 10
  %580 = or i1 %578, %579
  br i1 %580, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  br label %581

; <label>:581:                                    ; preds = %originalBBpart294
  %582 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %583 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %582, i32 0, i32 1
  %584 = load %struct.edge_def*, %struct.edge_def** %583, align 8
  store %struct.edge_def* %584, %struct.edge_def** %37, align 8
  br label %439

; <label>:585:                                    ; preds = %originalBBpart273
  %586 = load i32, i32* @x.23
  %587 = load i32, i32* @y.24
  %588 = sub i32 %586, 1
  %589 = mul i32 %586, %588
  %590 = urem i32 %589, 2
  %591 = icmp eq i32 %590, 0
  %592 = icmp slt i32 %587, 10
  %593 = or i1 %591, %592
  br i1 %593, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %originalBB96alteredBB, %585
  %594 = load i32, i32* @x.23
  %595 = load i32, i32* @y.24
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %627

; <label>:602:                                    ; preds = %427
  store i32 0, i32* %25, align 4
  br label %603

; <label>:603:                                    ; preds = %originalBBpart2112, %602
  %604 = load i32, i32* %25, align 4
  %605 = icmp slt i32 %604, 53
  br i1 %605, label %606, label %626

; <label>:606:                                    ; preds = %603
  br label %607

; <label>:607:                                    ; preds = %606
  %608 = load i32, i32* @x.23
  %609 = load i32, i32* @y.24
  %610 = sub i32 %608, 1
  %611 = mul i32 %608, %610
  %612 = urem i32 %611, 2
  %613 = icmp eq i32 %612, 0
  %614 = icmp slt i32 %609, 10
  %615 = or i1 %613, %614
  br i1 %615, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %originalBB100alteredBB, %607
  %616 = load i32, i32* %25, align 4
  %617 = add nsw i32 %616, 1
  store i32 %617, i32* %25, align 4
  %618 = load i32, i32* @x.23
  %619 = load i32, i32* @y.24
  %620 = sub i32 %618, 1
  %621 = mul i32 %618, %620
  %622 = urem i32 %621, 2
  %623 = icmp eq i32 %622, 0
  %624 = icmp slt i32 %619, 10
  %625 = or i1 %623, %624
  br i1 %625, label %originalBBpart2112, label %originalBB100alteredBB

originalBBpart2112:                               ; preds = %originalBB100
  br label %603

; <label>:626:                                    ; preds = %603
  br label %627

; <label>:627:                                    ; preds = %626, %originalBBpart298
  %628 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %628, i32 7)
  %629 = load i32, i32* @reload_completed, align 4
  %630 = icmp ne i32 %629, 0
  br i1 %630, label %742, label %631

; <label>:631:                                    ; preds = %627
  %632 = load i32, i32* @x.23
  %633 = load i32, i32* @y.24
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %originalBB114alteredBB, %631
  %640 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %640, i32 20)
  %641 = load i8, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 16), align 16
  %642 = icmp ne i8 %641, 0
  %643 = load i32, i32* @x.23
  %644 = load i32, i32* @y.24
  %645 = sub i32 %643, 1
  %646 = mul i32 %643, %645
  %647 = urem i32 %646, 2
  %648 = icmp eq i32 %647, 0
  %649 = icmp slt i32 %644, 10
  %650 = or i1 %648, %649
  br i1 %650, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br i1 %642, label %651, label %669

; <label>:651:                                    ; preds = %originalBBpart2116
  %652 = load i32, i32* @x.23
  %653 = load i32, i32* @y.24
  %654 = sub i32 %652, 1
  %655 = mul i32 %652, %654
  %656 = urem i32 %655, 2
  %657 = icmp eq i32 %656, 0
  %658 = icmp slt i32 %653, 10
  %659 = or i1 %657, %658
  br i1 %659, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %originalBB118alteredBB, %651
  %660 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %660, i32 16)
  %661 = load i32, i32* @x.23
  %662 = load i32, i32* @y.24
  %663 = sub i32 %661, 1
  %664 = mul i32 %661, %663
  %665 = urem i32 %664, 2
  %666 = icmp eq i32 %665, 0
  %667 = icmp slt i32 %662, 10
  %668 = or i1 %666, %667
  br i1 %668, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %669

; <label>:669:                                    ; preds = %originalBBpart2120, %originalBBpart2116
  %670 = load i32, i32* @target_flags, align 4
  %671 = and i32 %670, 33554432
  %672 = icmp ne i32 %671, 0
  br i1 %672, label %677, label %673

; <label>:673:                                    ; preds = %669
  %674 = load i32, i32* @flag_pic, align 4
  %675 = icmp ne i32 %674, 0
  %676 = xor i1 %675, true
  br label %677

; <label>:677:                                    ; preds = %673, %669
  %678 = phi i1 [ true, %669 ], [ %676, %673 ]
  %679 = select i1 %678, i32 -1, i32 3
  %680 = icmp ne i32 %679, -1
  br i1 %680, label %681, label %725

; <label>:681:                                    ; preds = %677
  %682 = load i32, i32* @x.23
  %683 = load i32, i32* @y.24
  %684 = sub i32 %682, 1
  %685 = mul i32 %682, %684
  %686 = urem i32 %685, 2
  %687 = icmp eq i32 %686, 0
  %688 = icmp slt i32 %683, 10
  %689 = or i1 %687, %688
  br i1 %689, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %originalBB122alteredBB, %681
  %690 = load i32, i32* @target_flags, align 4
  %691 = and i32 %690, 33554432
  %692 = icmp ne i32 %691, 0
  %693 = load i32, i32* @x.23
  %694 = load i32, i32* @y.24
  %695 = sub i32 %693, 1
  %696 = mul i32 %693, %695
  %697 = urem i32 %696, 2
  %698 = icmp eq i32 %697, 0
  %699 = icmp slt i32 %694, 10
  %700 = or i1 %698, %699
  br i1 %700, label %originalBBpart2132, label %originalBB122alteredBB

originalBBpart2132:                               ; preds = %originalBB122
  br i1 %692, label %705, label %701

; <label>:701:                                    ; preds = %originalBBpart2132
  %702 = load i32, i32* @flag_pic, align 4
  %703 = icmp ne i32 %702, 0
  %704 = xor i1 %703, true
  br label %705

; <label>:705:                                    ; preds = %701, %originalBBpart2132
  %706 = phi i1 [ true, %originalBBpart2132 ], [ %704, %701 ]
  %707 = select i1 %706, i32 -1, i32 3
  %708 = zext i32 %707 to i64
  %709 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %708
  %710 = load i8, i8* %709, align 1
  %711 = sext i8 %710 to i32
  %712 = icmp ne i32 %711, 0
  br i1 %712, label %713, label %725

; <label>:713:                                    ; preds = %705
  %714 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %715 = load i32, i32* @target_flags, align 4
  %716 = and i32 %715, 33554432
  %717 = icmp ne i32 %716, 0
  br i1 %717, label %722, label %718

; <label>:718:                                    ; preds = %713
  %719 = load i32, i32* @flag_pic, align 4
  %720 = icmp ne i32 %719, 0
  %721 = xor i1 %720, true
  br label %722

; <label>:722:                                    ; preds = %718, %713
  %723 = phi i1 [ true, %713 ], [ %721, %718 ]
  %724 = select i1 %723, i32 -1, i32 3
  call void @bitmap_set_bit(%struct.bitmap_head_def* %714, i32 %724)
  br label %725

; <label>:725:                                    ; preds = %722, %705, %677
  %726 = load i32, i32* @x.23
  %727 = load i32, i32* @y.24
  %728 = sub i32 %726, 1
  %729 = mul i32 %726, %728
  %730 = urem i32 %729, 2
  %731 = icmp eq i32 %730, 0
  %732 = icmp slt i32 %727, 10
  %733 = or i1 %731, %732
  br i1 %733, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %originalBB134alteredBB, %725
  %734 = load i32, i32* @x.23
  %735 = load i32, i32* @y.24
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %742

; <label>:742:                                    ; preds = %originalBBpart2136, %627
  %743 = load i32, i32* @in_ssa_form, align 4
  %744 = icmp ne i32 %743, 0
  br i1 %744, label %745, label %750

; <label>:745:                                    ; preds = %742
  %746 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %747 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %748 = bitcast %struct.bitmap_head_def* %747 to i8*
  %749 = call i32 @for_each_successor_phi(%struct.basic_block_def* %746, i32 (%struct.rtx_def*, i32, i32, i8*)* @set_phi_alternative_reg, i8* %748)
  br label %750

; <label>:750:                                    ; preds = %745, %742
  %751 = load i32, i32* @x.23
  %752 = load i32, i32* @y.24
  %753 = sub i32 %751, 1
  %754 = mul i32 %751, %753
  %755 = urem i32 %754, 2
  %756 = icmp eq i32 %755, 0
  %757 = icmp slt i32 %752, 10
  %758 = or i1 %756, %757
  br i1 %758, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %originalBB138alteredBB, %750
  %759 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %760 = icmp eq %struct.basic_block_def* %759, getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  %761 = load i32, i32* @x.23
  %762 = load i32, i32* @y.24
  %763 = sub i32 %761, 1
  %764 = mul i32 %761, %763
  %765 = urem i32 %764, 2
  %766 = icmp eq i32 %765, 0
  %767 = icmp slt i32 %762, 10
  %768 = or i1 %766, %767
  br i1 %768, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %760, label %769, label %774

; <label>:769:                                    ; preds = %originalBBpart2140
  %770 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %771 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %770, i32 0, i32 9
  %772 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %771, align 8
  %773 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %772, %struct.bitmap_head_def* %773)
  br label %366

; <label>:774:                                    ; preds = %originalBBpart2140
  %775 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %776 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %775, i32 0, i32 6
  %777 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %776, align 8
  %778 = icmp eq %struct.bitmap_head_def* %777, null
  br i1 %778, label %779, label %1056

; <label>:779:                                    ; preds = %774
  %780 = load i32, i32* @x.23
  %781 = load i32, i32* @y.24
  %782 = sub i32 %780, 1
  %783 = mul i32 %780, %782
  %784 = urem i32 %783, 2
  %785 = icmp eq i32 %784, 0
  %786 = icmp slt i32 %781, 10
  %787 = or i1 %785, %786
  br i1 %787, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %originalBB142alteredBB, %779
  store %struct.obstack* @flow_obstack, %struct.obstack** %39, align 8
  %788 = load %struct.obstack*, %struct.obstack** %39, align 8
  store %struct.obstack* %788, %struct.obstack** %40, align 8
  store i32 24, i32* %41, align 4
  %789 = load %struct.obstack*, %struct.obstack** %40, align 8
  %790 = getelementptr inbounds %struct.obstack, %struct.obstack* %789, i32 0, i32 4
  %791 = load i8*, i8** %790, align 8
  %792 = load %struct.obstack*, %struct.obstack** %40, align 8
  %793 = getelementptr inbounds %struct.obstack, %struct.obstack* %792, i32 0, i32 3
  %794 = load i8*, i8** %793, align 8
  %795 = ptrtoint i8* %791 to i64
  %796 = ptrtoint i8* %794 to i64
  %797 = sub i64 %795, %796
  %798 = load i32, i32* %41, align 4
  %799 = sext i32 %798 to i64
  %800 = icmp slt i64 %797, %799
  %801 = load i32, i32* @x.23
  %802 = load i32, i32* @y.24
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBBpart2155, label %originalBB142alteredBB

originalBBpart2155:                               ; preds = %originalBB142
  br i1 %800, label %809, label %828

; <label>:809:                                    ; preds = %originalBBpart2155
  %810 = load i32, i32* @x.23
  %811 = load i32, i32* @y.24
  %812 = sub i32 %810, 1
  %813 = mul i32 %810, %812
  %814 = urem i32 %813, 2
  %815 = icmp eq i32 %814, 0
  %816 = icmp slt i32 %811, 10
  %817 = or i1 %815, %816
  br i1 %817, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %originalBB157alteredBB, %809
  %818 = load %struct.obstack*, %struct.obstack** %40, align 8
  %819 = load i32, i32* %41, align 4
  call void @_obstack_newchunk(%struct.obstack* %818, i32 %819)
  %820 = load i32, i32* @x.23
  %821 = load i32, i32* @y.24
  %822 = sub i32 %820, 1
  %823 = mul i32 %820, %822
  %824 = urem i32 %823, 2
  %825 = icmp eq i32 %824, 0
  %826 = icmp slt i32 %821, 10
  %827 = or i1 %825, %826
  br i1 %827, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br label %828

; <label>:828:                                    ; preds = %originalBBpart2159, %originalBBpart2155
  %829 = load i32, i32* @x.23
  %830 = load i32, i32* @y.24
  %831 = sub i32 %829, 1
  %832 = mul i32 %829, %831
  %833 = urem i32 %832, 2
  %834 = icmp eq i32 %833, 0
  %835 = icmp slt i32 %830, 10
  %836 = or i1 %834, %835
  br i1 %836, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %originalBB161alteredBB, %828
  %837 = load i32, i32* %41, align 4
  %838 = load %struct.obstack*, %struct.obstack** %40, align 8
  %839 = getelementptr inbounds %struct.obstack, %struct.obstack* %838, i32 0, i32 3
  %840 = load i8*, i8** %839, align 8
  %841 = sext i32 %837 to i64
  %842 = getelementptr inbounds i8, i8* %840, i64 %841
  store i8* %842, i8** %839, align 8
  %843 = load %struct.obstack*, %struct.obstack** %39, align 8
  store %struct.obstack* %843, %struct.obstack** %43, align 8
  %844 = load %struct.obstack*, %struct.obstack** %43, align 8
  %845 = getelementptr inbounds %struct.obstack, %struct.obstack* %844, i32 0, i32 2
  %846 = load i8*, i8** %845, align 8
  store i8* %846, i8** %44, align 8
  %847 = load %struct.obstack*, %struct.obstack** %43, align 8
  %848 = getelementptr inbounds %struct.obstack, %struct.obstack* %847, i32 0, i32 3
  %849 = load i8*, i8** %848, align 8
  %850 = load i8*, i8** %44, align 8
  %851 = icmp eq i8* %849, %850
  %852 = load i32, i32* @x.23
  %853 = load i32, i32* @y.24
  %854 = sub i32 %852, 1
  %855 = mul i32 %852, %854
  %856 = urem i32 %855, 2
  %857 = icmp eq i32 %856, 0
  %858 = icmp slt i32 %853, 10
  %859 = or i1 %857, %858
  br i1 %859, label %originalBBpart2163, label %originalBB161alteredBB

originalBBpart2163:                               ; preds = %originalBB161
  br i1 %851, label %860, label %866

; <label>:860:                                    ; preds = %originalBBpart2163
  %861 = load %struct.obstack*, %struct.obstack** %43, align 8
  %862 = getelementptr inbounds %struct.obstack, %struct.obstack* %861, i32 0, i32 10
  %863 = load i8, i8* %862, align 8
  %864 = and i8 %863, -3
  %865 = or i8 %864, 2
  store i8 %865, i8* %862, align 8
  br label %866

; <label>:866:                                    ; preds = %860, %originalBBpart2163
  %867 = load %struct.obstack*, %struct.obstack** %43, align 8
  %868 = getelementptr inbounds %struct.obstack, %struct.obstack* %867, i32 0, i32 3
  %869 = load i8*, i8** %868, align 8
  %870 = ptrtoint i8* %869 to i64
  %871 = sub i64 %870, 0
  %872 = load %struct.obstack*, %struct.obstack** %43, align 8
  %873 = getelementptr inbounds %struct.obstack, %struct.obstack* %872, i32 0, i32 6
  %874 = load i32, i32* %873, align 8
  %875 = sext i32 %874 to i64
  %876 = add nsw i64 %871, %875
  %877 = load %struct.obstack*, %struct.obstack** %43, align 8
  %878 = getelementptr inbounds %struct.obstack, %struct.obstack* %877, i32 0, i32 6
  %879 = load i32, i32* %878, align 8
  %880 = xor i32 %879, -1
  %881 = sext i32 %880 to i64
  %882 = and i64 %876, %881
  %883 = getelementptr inbounds i8, i8* null, i64 %882
  %884 = load %struct.obstack*, %struct.obstack** %43, align 8
  %885 = getelementptr inbounds %struct.obstack, %struct.obstack* %884, i32 0, i32 3
  store i8* %883, i8** %885, align 8
  %886 = load %struct.obstack*, %struct.obstack** %43, align 8
  %887 = getelementptr inbounds %struct.obstack, %struct.obstack* %886, i32 0, i32 3
  %888 = load i8*, i8** %887, align 8
  %889 = load %struct.obstack*, %struct.obstack** %43, align 8
  %890 = getelementptr inbounds %struct.obstack, %struct.obstack* %889, i32 0, i32 1
  %891 = load %struct._obstack_chunk*, %struct._obstack_chunk** %890, align 8
  %892 = bitcast %struct._obstack_chunk* %891 to i8*
  %893 = ptrtoint i8* %888 to i64
  %894 = ptrtoint i8* %892 to i64
  %895 = sub i64 %893, %894
  %896 = load %struct.obstack*, %struct.obstack** %43, align 8
  %897 = getelementptr inbounds %struct.obstack, %struct.obstack* %896, i32 0, i32 4
  %898 = load i8*, i8** %897, align 8
  %899 = load %struct.obstack*, %struct.obstack** %43, align 8
  %900 = getelementptr inbounds %struct.obstack, %struct.obstack* %899, i32 0, i32 1
  %901 = load %struct._obstack_chunk*, %struct._obstack_chunk** %900, align 8
  %902 = bitcast %struct._obstack_chunk* %901 to i8*
  %903 = ptrtoint i8* %898 to i64
  %904 = ptrtoint i8* %902 to i64
  %905 = sub i64 %903, %904
  %906 = icmp sgt i64 %895, %905
  br i1 %906, label %907, label %929

; <label>:907:                                    ; preds = %866
  %908 = load i32, i32* @x.23
  %909 = load i32, i32* @y.24
  %910 = sub i32 %908, 1
  %911 = mul i32 %908, %910
  %912 = urem i32 %911, 2
  %913 = icmp eq i32 %912, 0
  %914 = icmp slt i32 %909, 10
  %915 = or i1 %913, %914
  br i1 %915, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %originalBB165alteredBB, %907
  %916 = load %struct.obstack*, %struct.obstack** %43, align 8
  %917 = getelementptr inbounds %struct.obstack, %struct.obstack* %916, i32 0, i32 4
  %918 = load i8*, i8** %917, align 8
  %919 = load %struct.obstack*, %struct.obstack** %43, align 8
  %920 = getelementptr inbounds %struct.obstack, %struct.obstack* %919, i32 0, i32 3
  store i8* %918, i8** %920, align 8
  %921 = load i32, i32* @x.23
  %922 = load i32, i32* @y.24
  %923 = sub i32 %921, 1
  %924 = mul i32 %921, %923
  %925 = urem i32 %924, 2
  %926 = icmp eq i32 %925, 0
  %927 = icmp slt i32 %922, 10
  %928 = or i1 %926, %927
  br i1 %928, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br label %929

; <label>:929:                                    ; preds = %originalBBpart2167, %866
  %930 = load %struct.obstack*, %struct.obstack** %43, align 8
  %931 = getelementptr inbounds %struct.obstack, %struct.obstack* %930, i32 0, i32 3
  %932 = load i8*, i8** %931, align 8
  %933 = load %struct.obstack*, %struct.obstack** %43, align 8
  %934 = getelementptr inbounds %struct.obstack, %struct.obstack* %933, i32 0, i32 2
  store i8* %932, i8** %934, align 8
  %935 = load i8*, i8** %44, align 8
  store i8* %935, i8** %45, align 8
  %936 = load i8*, i8** %45, align 8
  store i8* %936, i8** %42, align 8
  %937 = load i8*, i8** %42, align 8
  %938 = bitcast i8* %937 to %struct.bitmap_head_def*
  %939 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %938)
  %940 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %941 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %940, i32 0, i32 6
  store %struct.bitmap_head_def* %939, %struct.bitmap_head_def** %941, align 8
  store %struct.obstack* @flow_obstack, %struct.obstack** %46, align 8
  %942 = load %struct.obstack*, %struct.obstack** %46, align 8
  store %struct.obstack* %942, %struct.obstack** %47, align 8
  store i32 24, i32* %48, align 4
  %943 = load %struct.obstack*, %struct.obstack** %47, align 8
  %944 = getelementptr inbounds %struct.obstack, %struct.obstack* %943, i32 0, i32 4
  %945 = load i8*, i8** %944, align 8
  %946 = load %struct.obstack*, %struct.obstack** %47, align 8
  %947 = getelementptr inbounds %struct.obstack, %struct.obstack* %946, i32 0, i32 3
  %948 = load i8*, i8** %947, align 8
  %949 = ptrtoint i8* %945 to i64
  %950 = ptrtoint i8* %948 to i64
  %951 = sub i64 %949, %950
  %952 = load i32, i32* %48, align 4
  %953 = sext i32 %952 to i64
  %954 = icmp slt i64 %951, %953
  br i1 %954, label %955, label %958

; <label>:955:                                    ; preds = %929
  %956 = load %struct.obstack*, %struct.obstack** %47, align 8
  %957 = load i32, i32* %48, align 4
  call void @_obstack_newchunk(%struct.obstack* %956, i32 %957)
  br label %958

; <label>:958:                                    ; preds = %955, %929
  %959 = load i32, i32* %48, align 4
  %960 = load %struct.obstack*, %struct.obstack** %47, align 8
  %961 = getelementptr inbounds %struct.obstack, %struct.obstack* %960, i32 0, i32 3
  %962 = load i8*, i8** %961, align 8
  %963 = sext i32 %959 to i64
  %964 = getelementptr inbounds i8, i8* %962, i64 %963
  store i8* %964, i8** %961, align 8
  %965 = load %struct.obstack*, %struct.obstack** %46, align 8
  store %struct.obstack* %965, %struct.obstack** %50, align 8
  %966 = load %struct.obstack*, %struct.obstack** %50, align 8
  %967 = getelementptr inbounds %struct.obstack, %struct.obstack* %966, i32 0, i32 2
  %968 = load i8*, i8** %967, align 8
  store i8* %968, i8** %51, align 8
  %969 = load %struct.obstack*, %struct.obstack** %50, align 8
  %970 = getelementptr inbounds %struct.obstack, %struct.obstack* %969, i32 0, i32 3
  %971 = load i8*, i8** %970, align 8
  %972 = load i8*, i8** %51, align 8
  %973 = icmp eq i8* %971, %972
  br i1 %973, label %974, label %980

; <label>:974:                                    ; preds = %958
  %975 = load %struct.obstack*, %struct.obstack** %50, align 8
  %976 = getelementptr inbounds %struct.obstack, %struct.obstack* %975, i32 0, i32 10
  %977 = load i8, i8* %976, align 8
  %978 = and i8 %977, -3
  %979 = or i8 %978, 2
  store i8 %979, i8* %976, align 8
  br label %980

; <label>:980:                                    ; preds = %974, %958
  %981 = load i32, i32* @x.23
  %982 = load i32, i32* @y.24
  %983 = sub i32 %981, 1
  %984 = mul i32 %981, %983
  %985 = urem i32 %984, 2
  %986 = icmp eq i32 %985, 0
  %987 = icmp slt i32 %982, 10
  %988 = or i1 %986, %987
  br i1 %988, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %originalBB169alteredBB, %980
  %989 = load %struct.obstack*, %struct.obstack** %50, align 8
  %990 = getelementptr inbounds %struct.obstack, %struct.obstack* %989, i32 0, i32 3
  %991 = load i8*, i8** %990, align 8
  %992 = ptrtoint i8* %991 to i64
  %993 = sub i64 %992, 0
  %994 = load %struct.obstack*, %struct.obstack** %50, align 8
  %995 = getelementptr inbounds %struct.obstack, %struct.obstack* %994, i32 0, i32 6
  %996 = load i32, i32* %995, align 8
  %997 = sext i32 %996 to i64
  %998 = add nsw i64 %993, %997
  %999 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1000 = getelementptr inbounds %struct.obstack, %struct.obstack* %999, i32 0, i32 6
  %1001 = load i32, i32* %1000, align 8
  %1002 = xor i32 %1001, -1
  %1003 = sext i32 %1002 to i64
  %1004 = and i64 %998, %1003
  %1005 = getelementptr inbounds i8, i8* null, i64 %1004
  %1006 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1007 = getelementptr inbounds %struct.obstack, %struct.obstack* %1006, i32 0, i32 3
  store i8* %1005, i8** %1007, align 8
  %1008 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1009 = getelementptr inbounds %struct.obstack, %struct.obstack* %1008, i32 0, i32 3
  %1010 = load i8*, i8** %1009, align 8
  %1011 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1012 = getelementptr inbounds %struct.obstack, %struct.obstack* %1011, i32 0, i32 1
  %1013 = load %struct._obstack_chunk*, %struct._obstack_chunk** %1012, align 8
  %1014 = bitcast %struct._obstack_chunk* %1013 to i8*
  %1015 = ptrtoint i8* %1010 to i64
  %1016 = ptrtoint i8* %1014 to i64
  %1017 = sub i64 %1015, %1016
  %1018 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1019 = getelementptr inbounds %struct.obstack, %struct.obstack* %1018, i32 0, i32 4
  %1020 = load i8*, i8** %1019, align 8
  %1021 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1022 = getelementptr inbounds %struct.obstack, %struct.obstack* %1021, i32 0, i32 1
  %1023 = load %struct._obstack_chunk*, %struct._obstack_chunk** %1022, align 8
  %1024 = bitcast %struct._obstack_chunk* %1023 to i8*
  %1025 = ptrtoint i8* %1020 to i64
  %1026 = ptrtoint i8* %1024 to i64
  %1027 = sub i64 %1025, %1026
  %1028 = icmp sgt i64 %1017, %1027
  %1029 = load i32, i32* @x.23
  %1030 = load i32, i32* @y.24
  %1031 = sub i32 %1029, 1
  %1032 = mul i32 %1029, %1031
  %1033 = urem i32 %1032, 2
  %1034 = icmp eq i32 %1033, 0
  %1035 = icmp slt i32 %1030, 10
  %1036 = or i1 %1034, %1035
  br i1 %1036, label %originalBBpart2216, label %originalBB169alteredBB

originalBBpart2216:                               ; preds = %originalBB169
  br i1 %1028, label %1037, label %1043

; <label>:1037:                                   ; preds = %originalBBpart2216
  %1038 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1039 = getelementptr inbounds %struct.obstack, %struct.obstack* %1038, i32 0, i32 4
  %1040 = load i8*, i8** %1039, align 8
  %1041 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1042 = getelementptr inbounds %struct.obstack, %struct.obstack* %1041, i32 0, i32 3
  store i8* %1040, i8** %1042, align 8
  br label %1043

; <label>:1043:                                   ; preds = %1037, %originalBBpart2216
  %1044 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1045 = getelementptr inbounds %struct.obstack, %struct.obstack* %1044, i32 0, i32 3
  %1046 = load i8*, i8** %1045, align 8
  %1047 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1048 = getelementptr inbounds %struct.obstack, %struct.obstack* %1047, i32 0, i32 2
  store i8* %1046, i8** %1048, align 8
  %1049 = load i8*, i8** %51, align 8
  store i8* %1049, i8** %52, align 8
  %1050 = load i8*, i8** %52, align 8
  store i8* %1050, i8** %49, align 8
  %1051 = load i8*, i8** %49, align 8
  %1052 = bitcast i8* %1051 to %struct.bitmap_head_def*
  %1053 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %1052)
  %1054 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1055 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1054, i32 0, i32 7
  store %struct.bitmap_head_def* %1053, %struct.bitmap_head_def** %1055, align 8
  store i32 1, i32* %34, align 4
  br label %1128

; <label>:1056:                                   ; preds = %774
  %1057 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1057)
  %1058 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1059 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1060 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1059, i32 0, i32 9
  %1061 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1060, align 8
  %1062 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1063 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1058, %struct.bitmap_head_def* %1061, %struct.bitmap_head_def* %1062, i32 1)
  store i32 %1063, i32* %34, align 4
  %1064 = load i32, i32* %34, align 4
  %1065 = icmp ne i32 %1064, 0
  br i1 %1065, label %1090, label %1066

; <label>:1066:                                   ; preds = %1056
  %1067 = load i32, i32* @x.23
  %1068 = load i32, i32* @y.24
  %1069 = sub i32 %1067, 1
  %1070 = mul i32 %1067, %1069
  %1071 = urem i32 %1070, 2
  %1072 = icmp eq i32 %1071, 0
  %1073 = icmp slt i32 %1068, 10
  %1074 = or i1 %1072, %1073
  br i1 %1074, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %originalBB218alteredBB, %1066
  %1075 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1075)
  %1076 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1077 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1078 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1079 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1078, i32 0, i32 7
  %1080 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1079, align 8
  %1081 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1076, %struct.bitmap_head_def* %1077, %struct.bitmap_head_def* %1080, i32 0)
  store i32 %1081, i32* %34, align 4
  %1082 = load i32, i32* @x.23
  %1083 = load i32, i32* @y.24
  %1084 = sub i32 %1082, 1
  %1085 = mul i32 %1082, %1084
  %1086 = urem i32 %1085, 2
  %1087 = icmp eq i32 %1086, 0
  %1088 = icmp slt i32 %1083, 10
  %1089 = or i1 %1087, %1088
  br i1 %1089, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br label %1090

; <label>:1090:                                   ; preds = %originalBBpart2220, %1056
  %1091 = load i32, i32* %34, align 4
  %1092 = icmp ne i32 %1091, 0
  br i1 %1092, label %1127, label %1093

; <label>:1093:                                   ; preds = %1090
  %1094 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1094)
  %1095 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1096 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1097 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1096, i32 0, i32 9
  %1098 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1097, align 8
  %1099 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1100 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1095, %struct.bitmap_head_def* %1098, %struct.bitmap_head_def* %1099, i32 3)
  store i32 %1100, i32* %35, align 4
  %1101 = load i32, i32* %35, align 4
  %1102 = icmp ne i32 %1101, 0
  br i1 %1102, label %1120, label %1103

; <label>:1103:                                   ; preds = %1093
  %1104 = load i32, i32* @x.23
  %1105 = load i32, i32* @y.24
  %1106 = sub i32 %1104, 1
  %1107 = mul i32 %1104, %1106
  %1108 = urem i32 %1107, 2
  %1109 = icmp eq i32 %1108, 0
  %1110 = icmp slt i32 %1105, 10
  %1111 = or i1 %1109, %1110
  br i1 %1111, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %originalBB222alteredBB, %1103
  %1112 = load i32, i32* @x.23
  %1113 = load i32, i32* @y.24
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br label %366

; <label>:1120:                                   ; preds = %1093
  %1121 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1122 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1123 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1124 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1123, i32 0, i32 6
  %1125 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1124, align 8
  %1126 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1121, %struct.bitmap_head_def* %1122, %struct.bitmap_head_def* %1125, i32 1)
  store i32 %1126, i32* %34, align 4
  br label %1127

; <label>:1127:                                   ; preds = %1120, %1090
  br label %1128

; <label>:1128:                                   ; preds = %1127, %1043
  %1129 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  %1130 = icmp ne %struct.simple_bitmap_def* %1129, null
  br i1 %1130, label %1131, label %1148

; <label>:1131:                                   ; preds = %1128
  %1132 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1133 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1132, i32 0, i32 11
  %1134 = load i32, i32* %1133, align 8
  %1135 = urem i32 %1134, 64
  %1136 = zext i32 %1135 to i64
  %1137 = shl i64 1, %1136
  %1138 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  %1139 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1138, i32 0, i32 3
  %1140 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1141 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1140, i32 0, i32 11
  %1142 = load i32, i32* %1141, align 8
  %1143 = udiv i32 %1142, 64
  %1144 = zext i32 %1143 to i64
  %1145 = getelementptr inbounds [1 x i64], [1 x i64]* %1139, i64 0, i64 %1144
  %1146 = load i64, i64* %1145, align 8
  %1147 = or i64 %1146, %1137
  store i64 %1147, i64* %1145, align 8
  br label %1148

; <label>:1148:                                   ; preds = %1131, %1128
  %1149 = load i32, i32* @x.23
  %1150 = load i32, i32* @y.24
  %1151 = sub i32 %1149, 1
  %1152 = mul i32 %1149, %1151
  %1153 = urem i32 %1152, 2
  %1154 = icmp eq i32 %1153, 0
  %1155 = icmp slt i32 %1150, 10
  %1156 = or i1 %1154, %1155
  br i1 %1156, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %originalBB226alteredBB, %1148
  %1157 = load i32, i32* %34, align 4
  %1158 = icmp ne i32 %1157, 0
  %1159 = load i32, i32* @x.23
  %1160 = load i32, i32* @y.24
  %1161 = sub i32 %1159, 1
  %1162 = mul i32 %1159, %1161
  %1163 = urem i32 %1162, 2
  %1164 = icmp eq i32 %1163, 0
  %1165 = icmp slt i32 %1160, 10
  %1166 = or i1 %1164, %1165
  br i1 %1166, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br i1 %1158, label %1222, label %1167

; <label>:1167:                                   ; preds = %originalBBpart2228
  %1168 = load i32, i32* @x.23
  %1169 = load i32, i32* @y.24
  %1170 = sub i32 %1168, 1
  %1171 = mul i32 %1168, %1170
  %1172 = urem i32 %1171, 2
  %1173 = icmp eq i32 %1172, 0
  %1174 = icmp slt i32 %1169, 10
  %1175 = or i1 %1173, %1174
  br i1 %1175, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %originalBB230alteredBB, %1167
  %1176 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1177 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1178 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1179 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1178, i32 0, i32 9
  %1180 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1179, align 8
  %1181 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1176, %struct.bitmap_head_def* %1177, %struct.bitmap_head_def* %1180, i32 1)
  %1182 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1183 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1182, i32 0, i32 9
  %1184 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1183, align 8
  %1185 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %1184, %struct.bitmap_head_def* %1185)
  %1186 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1187 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1186, i32 0, i32 8
  %1188 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1187, align 8
  %1189 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1190 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1189, i32 0, i32 8
  %1191 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1190, align 8
  %1192 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1193 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1188, %struct.bitmap_head_def* %1191, %struct.bitmap_head_def* %1192, i32 2)
  store i32 %1193, i32* %35, align 4
  %1194 = load i32, i32* %35, align 4
  %1195 = icmp ne i32 %1194, 0
  %1196 = load i32, i32* @x.23
  %1197 = load i32, i32* @y.24
  %1198 = sub i32 %1196, 1
  %1199 = mul i32 %1196, %1198
  %1200 = urem i32 %1199, 2
  %1201 = icmp eq i32 %1200, 0
  %1202 = icmp slt i32 %1197, 10
  %1203 = or i1 %1201, %1202
  br i1 %1203, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br i1 %1195, label %1221, label %1204

; <label>:1204:                                   ; preds = %originalBBpart2232
  %1205 = load i32, i32* @x.23
  %1206 = load i32, i32* @y.24
  %1207 = sub i32 %1205, 1
  %1208 = mul i32 %1205, %1207
  %1209 = urem i32 %1208, 2
  %1210 = icmp eq i32 %1209, 0
  %1211 = icmp slt i32 %1206, 10
  %1212 = or i1 %1210, %1211
  br i1 %1212, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %originalBB234alteredBB, %1204
  %1213 = load i32, i32* @x.23
  %1214 = load i32, i32* @y.24
  %1215 = sub i32 %1213, 1
  %1216 = mul i32 %1213, %1215
  %1217 = urem i32 %1216, 2
  %1218 = icmp eq i32 %1217, 0
  %1219 = icmp slt i32 %1214, 10
  %1220 = or i1 %1218, %1219
  br i1 %1220, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br label %366

; <label>:1221:                                   ; preds = %originalBBpart2232
  br label %1265

; <label>:1222:                                   ; preds = %originalBBpart2228
  %1223 = load i32, i32* @x.23
  %1224 = load i32, i32* @y.24
  %1225 = sub i32 %1223, 1
  %1226 = mul i32 %1223, %1225
  %1227 = urem i32 %1226, 2
  %1228 = icmp eq i32 %1227, 0
  %1229 = icmp slt i32 %1224, 10
  %1230 = or i1 %1228, %1229
  br i1 %1230, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %originalBB238alteredBB, %1222
  %1231 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1232 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1231, i32 0, i32 9
  %1233 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1232, align 8
  %1234 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %1233, %struct.bitmap_head_def* %1234)
  %1235 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1236 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1237 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1238 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1237, i32 0, i32 6
  %1239 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1238, align 8
  %1240 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1241 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1240, i32 0, i32 7
  %1242 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1241, align 8
  %1243 = load i32, i32* %14, align 4
  %1244 = call i32 @propagate_block(%struct.basic_block_def* %1235, %struct.bitmap_head_def* %1236, %struct.bitmap_head_def* %1239, %struct.bitmap_head_def* %1242, i32 %1243)
  %1245 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1246 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1245, i32 0, i32 8
  %1247 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1246, align 8
  %1248 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1249 = call i32 @bitmap_equal_p(%struct.bitmap_head_def* %1247, %struct.bitmap_head_def* %1248)
  %1250 = icmp ne i32 %1249, 0
  %1251 = load i32, i32* @x.23
  %1252 = load i32, i32* @y.24
  %1253 = sub i32 %1251, 1
  %1254 = mul i32 %1251, %1253
  %1255 = urem i32 %1254, 2
  %1256 = icmp eq i32 %1255, 0
  %1257 = icmp slt i32 %1252, 10
  %1258 = or i1 %1256, %1257
  br i1 %1258, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br i1 %1250, label %1259, label %1260

; <label>:1259:                                   ; preds = %originalBBpart2240
  br label %366

; <label>:1260:                                   ; preds = %originalBBpart2240
  %1261 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1262 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1261, i32 0, i32 8
  %1263 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1262, align 8
  %1264 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %1263, %struct.bitmap_head_def* %1264)
  br label %1265

; <label>:1265:                                   ; preds = %1260, %1221
  %1266 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1267 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1266, i32 0, i32 4
  %1268 = load %struct.edge_def*, %struct.edge_def** %1267, align 8
  store %struct.edge_def* %1268, %struct.edge_def** %37, align 8
  br label %1269

; <label>:1269:                                   ; preds = %originalBBpart2256, %1265
  %1270 = load i32, i32* @x.23
  %1271 = load i32, i32* @y.24
  %1272 = sub i32 %1270, 1
  %1273 = mul i32 %1270, %1272
  %1274 = urem i32 %1273, 2
  %1275 = icmp eq i32 %1274, 0
  %1276 = icmp slt i32 %1271, 10
  %1277 = or i1 %1275, %1276
  br i1 %1277, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %originalBB242alteredBB, %1269
  %1278 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %1279 = icmp ne %struct.edge_def* %1278, null
  %1280 = load i32, i32* @x.23
  %1281 = load i32, i32* @y.24
  %1282 = sub i32 %1280, 1
  %1283 = mul i32 %1280, %1282
  %1284 = urem i32 %1283, 2
  %1285 = icmp eq i32 %1284, 0
  %1286 = icmp slt i32 %1281, 10
  %1287 = or i1 %1285, %1286
  br i1 %1287, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br i1 %1279, label %1288, label %1363

; <label>:1288:                                   ; preds = %originalBBpart2244
  %1289 = load i32, i32* @x.23
  %1290 = load i32, i32* @y.24
  %1291 = sub i32 %1289, 1
  %1292 = mul i32 %1289, %1291
  %1293 = urem i32 %1292, 2
  %1294 = icmp eq i32 %1293, 0
  %1295 = icmp slt i32 %1290, 10
  %1296 = or i1 %1294, %1295
  br i1 %1296, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %originalBB246alteredBB, %1288
  %1297 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %1298 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1297, i32 0, i32 2
  %1299 = load %struct.basic_block_def*, %struct.basic_block_def** %1298, align 8
  store %struct.basic_block_def* %1299, %struct.basic_block_def** %53, align 8
  %1300 = load %struct.basic_block_def*, %struct.basic_block_def** %53, align 8
  %1301 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1300, i32 0, i32 10
  %1302 = load i8*, i8** %1301, align 8
  %1303 = icmp eq i8* %1302, null
  %1304 = load i32, i32* @x.23
  %1305 = load i32, i32* @y.24
  %1306 = sub i32 %1304, 1
  %1307 = mul i32 %1304, %1306
  %1308 = urem i32 %1307, 2
  %1309 = icmp eq i32 %1308, 0
  %1310 = icmp slt i32 %1305, 10
  %1311 = or i1 %1309, %1310
  br i1 %1311, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br i1 %1303, label %1312, label %1342

; <label>:1312:                                   ; preds = %originalBBpart2248
  %1313 = load i32, i32* @x.23
  %1314 = load i32, i32* @y.24
  %1315 = sub i32 %1313, 1
  %1316 = mul i32 %1313, %1315
  %1317 = urem i32 %1316, 2
  %1318 = icmp eq i32 %1317, 0
  %1319 = icmp slt i32 %1314, 10
  %1320 = or i1 %1318, %1319
  br i1 %1320, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %originalBB250alteredBB, %1312
  %1321 = load %struct.basic_block_def*, %struct.basic_block_def** %53, align 8
  %1322 = load %struct.basic_block_def**, %struct.basic_block_def*** %17, align 8
  %1323 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %1322, i32 1
  store %struct.basic_block_def** %1323, %struct.basic_block_def*** %17, align 8
  store %struct.basic_block_def* %1321, %struct.basic_block_def** %1322, align 8
  %1324 = load %struct.basic_block_def**, %struct.basic_block_def*** %17, align 8
  %1325 = load %struct.basic_block_def**, %struct.basic_block_def*** %18, align 8
  %1326 = icmp eq %struct.basic_block_def** %1324, %1325
  %1327 = load i32, i32* @x.23
  %1328 = load i32, i32* @y.24
  %1329 = sub i32 %1327, 1
  %1330 = mul i32 %1327, %1329
  %1331 = urem i32 %1330, 2
  %1332 = icmp eq i32 %1331, 0
  %1333 = icmp slt i32 %1328, 10
  %1334 = or i1 %1332, %1333
  br i1 %1334, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br i1 %1326, label %1335, label %1337

; <label>:1335:                                   ; preds = %originalBBpart2252
  %1336 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  store %struct.basic_block_def** %1336, %struct.basic_block_def*** %17, align 8
  br label %1337

; <label>:1337:                                   ; preds = %1335, %originalBBpart2252
  %1338 = load %struct.basic_block_def*, %struct.basic_block_def** %53, align 8
  %1339 = bitcast %struct.basic_block_def* %1338 to i8*
  %1340 = load %struct.basic_block_def*, %struct.basic_block_def** %53, align 8
  %1341 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1340, i32 0, i32 10
  store i8* %1339, i8** %1341, align 8
  br label %1342

; <label>:1342:                                   ; preds = %1337, %originalBBpart2248
  br label %1343

; <label>:1343:                                   ; preds = %1342
  %1344 = load i32, i32* @x.23
  %1345 = load i32, i32* @y.24
  %1346 = sub i32 %1344, 1
  %1347 = mul i32 %1344, %1346
  %1348 = urem i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  %1350 = icmp slt i32 %1345, 10
  %1351 = or i1 %1349, %1350
  br i1 %1351, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %originalBB254alteredBB, %1343
  %1352 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %1353 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1352, i32 0, i32 0
  %1354 = load %struct.edge_def*, %struct.edge_def** %1353, align 8
  store %struct.edge_def* %1354, %struct.edge_def** %37, align 8
  %1355 = load i32, i32* @x.23
  %1356 = load i32, i32* @y.24
  %1357 = sub i32 %1355, 1
  %1358 = mul i32 %1355, %1357
  %1359 = urem i32 %1358, 2
  %1360 = icmp eq i32 %1359, 0
  %1361 = icmp slt i32 %1356, 10
  %1362 = or i1 %1360, %1361
  br i1 %1362, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br label %1269

; <label>:1363:                                   ; preds = %originalBBpart2244
  br label %366

; <label>:1364:                                   ; preds = %originalBBpart261
  br label %1365

; <label>:1365:                                   ; preds = %1364
  %1366 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1367 = icmp ne %struct.bitmap_head_def* %1366, null
  br i1 %1367, label %1368, label %1370

; <label>:1368:                                   ; preds = %1365
  %1369 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1369)
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %19, align 8
  br label %1370

; <label>:1370:                                   ; preds = %1368, %1365
  %1371 = load i32, i32* @x.23
  %1372 = load i32, i32* @y.24
  %1373 = sub i32 %1371, 1
  %1374 = mul i32 %1371, %1373
  %1375 = urem i32 %1374, 2
  %1376 = icmp eq i32 %1375, 0
  %1377 = icmp slt i32 %1372, 10
  %1378 = or i1 %1376, %1377
  br i1 %1378, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %originalBB258alteredBB, %1370
  %1379 = load i32, i32* @x.23
  %1380 = load i32, i32* @y.24
  %1381 = sub i32 %1379, 1
  %1382 = mul i32 %1379, %1381
  %1383 = urem i32 %1382, 2
  %1384 = icmp eq i32 %1383, 0
  %1385 = icmp slt i32 %1380, 10
  %1386 = or i1 %1384, %1385
  br i1 %1386, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br label %1387

; <label>:1387:                                   ; preds = %originalBBpart2260
  %1388 = load i32, i32* @x.23
  %1389 = load i32, i32* @y.24
  %1390 = sub i32 %1388, 1
  %1391 = mul i32 %1388, %1390
  %1392 = urem i32 %1391, 2
  %1393 = icmp eq i32 %1392, 0
  %1394 = icmp slt i32 %1389, 10
  %1395 = or i1 %1393, %1394
  br i1 %1395, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %originalBB262alteredBB, %1387
  %1396 = load i32, i32* @x.23
  %1397 = load i32, i32* @y.24
  %1398 = sub i32 %1396, 1
  %1399 = mul i32 %1396, %1398
  %1400 = urem i32 %1399, 2
  %1401 = icmp eq i32 %1400, 0
  %1402 = icmp slt i32 %1397, 10
  %1403 = or i1 %1401, %1402
  br i1 %1403, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br label %1404

; <label>:1404:                                   ; preds = %originalBBpart2264
  %1405 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1406 = icmp ne %struct.bitmap_head_def* %1405, null
  br i1 %1406, label %1407, label %1409

; <label>:1407:                                   ; preds = %1404
  %1408 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1408)
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %20, align 8
  br label %1409

; <label>:1409:                                   ; preds = %1407, %1404
  br label %1410

; <label>:1410:                                   ; preds = %1409
  %1411 = load i32, i32* @x.23
  %1412 = load i32, i32* @y.24
  %1413 = sub i32 %1411, 1
  %1414 = mul i32 %1411, %1413
  %1415 = urem i32 %1414, 2
  %1416 = icmp eq i32 %1415, 0
  %1417 = icmp slt i32 %1412, 10
  %1418 = or i1 %1416, %1417
  br i1 %1418, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %originalBB266alteredBB, %1410
  %1419 = load i32, i32* @x.23
  %1420 = load i32, i32* @y.24
  %1421 = sub i32 %1419, 1
  %1422 = mul i32 %1419, %1421
  %1423 = urem i32 %1422, 2
  %1424 = icmp eq i32 %1423, 0
  %1425 = icmp slt i32 %1420, 10
  %1426 = or i1 %1424, %1425
  br i1 %1426, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  br label %1427

; <label>:1427:                                   ; preds = %originalBBpart2268
  %1428 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %21, align 8
  %1429 = icmp ne %struct.bitmap_head_def* %1428, null
  br i1 %1429, label %1430, label %1432

; <label>:1430:                                   ; preds = %1427
  %1431 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %21, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1431)
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %21, align 8
  br label %1432

; <label>:1432:                                   ; preds = %1430, %1427
  %1433 = load i32, i32* @x.23
  %1434 = load i32, i32* @y.24
  %1435 = sub i32 %1433, 1
  %1436 = mul i32 %1433, %1435
  %1437 = urem i32 %1436, 2
  %1438 = icmp eq i32 %1437, 0
  %1439 = icmp slt i32 %1434, 10
  %1440 = or i1 %1438, %1439
  br i1 %1440, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %originalBB270alteredBB, %1432
  %1441 = load i32, i32* @x.23
  %1442 = load i32, i32* @y.24
  %1443 = sub i32 %1441, 1
  %1444 = mul i32 %1441, %1443
  %1445 = urem i32 %1444, 2
  %1446 = icmp eq i32 %1445, 0
  %1447 = icmp slt i32 %1442, 10
  %1448 = or i1 %1446, %1447
  br i1 %1448, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br label %1449

; <label>:1449:                                   ; preds = %originalBBpart2272
  %1450 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  %1451 = icmp ne %struct.simple_bitmap_def* %1450, null
  br i1 %1451, label %1452, label %1685

; <label>:1452:                                   ; preds = %1449
  %1453 = load i32, i32* @x.23
  %1454 = load i32, i32* @y.24
  %1455 = sub i32 %1453, 1
  %1456 = mul i32 %1453, %1455
  %1457 = urem i32 %1456, 2
  %1458 = icmp eq i32 %1457, 0
  %1459 = icmp slt i32 %1454, 10
  %1460 = or i1 %1458, %1459
  br i1 %1460, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %originalBB274alteredBB, %1452
  %1461 = load i32, i32* @x.23
  %1462 = load i32, i32* @y.24
  %1463 = sub i32 %1461, 1
  %1464 = mul i32 %1461, %1463
  %1465 = urem i32 %1464, 2
  %1466 = icmp eq i32 %1465, 0
  %1467 = icmp slt i32 %1462, 10
  %1468 = or i1 %1466, %1467
  br i1 %1468, label %originalBBpart2276, label %originalBB274alteredBB

originalBBpart2276:                               ; preds = %originalBB274
  br label %1469

; <label>:1469:                                   ; preds = %originalBBpart2276
  %1470 = load i32, i32* @x.23
  %1471 = load i32, i32* @y.24
  %1472 = sub i32 %1470, 1
  %1473 = mul i32 %1470, %1472
  %1474 = urem i32 %1473, 2
  %1475 = icmp eq i32 %1474, 0
  %1476 = icmp slt i32 %1471, 10
  %1477 = or i1 %1475, %1476
  br i1 %1477, label %originalBB278, label %originalBB278alteredBB

originalBB278:                                    ; preds = %originalBB278alteredBB, %1469
  store i32 0, i32* %55, align 4
  %1478 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  %1479 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1478, i32 0, i32 1
  %1480 = load i32, i32* %1479, align 4
  store i32 %1480, i32* %56, align 4
  %1481 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  %1482 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1481, i32 0, i32 3
  %1483 = getelementptr inbounds [1 x i64], [1 x i64]* %1482, i32 0, i32 0
  store i64* %1483, i64** %57, align 8
  store i32 0, i32* %54, align 4
  %1484 = load i32, i32* @x.23
  %1485 = load i32, i32* @y.24
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBBpart2281, label %originalBB278alteredBB

originalBBpart2281:                               ; preds = %originalBB278
  br label %1492

; <label>:1492:                                   ; preds = %1664, %originalBBpart2281
  %1493 = load i32, i32* %54, align 4
  %1494 = load i32, i32* %56, align 4
  %1495 = icmp ult i32 %1493, %1494
  br i1 %1495, label %1496, label %1667

; <label>:1496:                                   ; preds = %1492
  %1497 = load i32, i32* @x.23
  %1498 = load i32, i32* @y.24
  %1499 = sub i32 %1497, 1
  %1500 = mul i32 %1497, %1499
  %1501 = urem i32 %1500, 2
  %1502 = icmp eq i32 %1501, 0
  %1503 = icmp slt i32 %1498, 10
  %1504 = or i1 %1502, %1503
  br i1 %1504, label %originalBB283, label %originalBB283alteredBB

originalBB283:                                    ; preds = %originalBB283alteredBB, %1496
  %1505 = load i64*, i64** %57, align 8
  %1506 = load i32, i32* %54, align 4
  %1507 = zext i32 %1506 to i64
  %1508 = getelementptr inbounds i64, i64* %1505, i64 %1507
  %1509 = load i64, i64* %1508, align 8
  store i64 %1509, i64* %58, align 8
  %1510 = load i64, i64* %58, align 8
  %1511 = icmp ne i64 %1510, 0
  %1512 = load i32, i32* @x.23
  %1513 = load i32, i32* @y.24
  %1514 = sub i32 %1512, 1
  %1515 = mul i32 %1512, %1514
  %1516 = urem i32 %1515, 2
  %1517 = icmp eq i32 %1516, 0
  %1518 = icmp slt i32 %1513, 10
  %1519 = or i1 %1517, %1518
  br i1 %1519, label %originalBBpart2285, label %originalBB283alteredBB

originalBBpart2285:                               ; preds = %originalBB283
  br i1 %1511, label %1520, label %1663

; <label>:1520:                                   ; preds = %originalBBpart2285
  %1521 = load i32, i32* @x.23
  %1522 = load i32, i32* @y.24
  %1523 = sub i32 %1521, 1
  %1524 = mul i32 %1521, %1523
  %1525 = urem i32 %1524, 2
  %1526 = icmp eq i32 %1525, 0
  %1527 = icmp slt i32 %1522, 10
  %1528 = or i1 %1526, %1527
  br i1 %1528, label %originalBB287, label %originalBB287alteredBB

originalBB287:                                    ; preds = %originalBB287alteredBB, %1520
  %1529 = load i32, i32* @x.23
  %1530 = load i32, i32* @y.24
  %1531 = sub i32 %1529, 1
  %1532 = mul i32 %1529, %1531
  %1533 = urem i32 %1532, 2
  %1534 = icmp eq i32 %1533, 0
  %1535 = icmp slt i32 %1530, 10
  %1536 = or i1 %1534, %1535
  br i1 %1536, label %originalBBpart2289, label %originalBB287alteredBB

originalBBpart2289:                               ; preds = %originalBB287
  br label %1537

; <label>:1537:                                   ; preds = %1643, %originalBBpart2289
  %1538 = load i32, i32* @x.23
  %1539 = load i32, i32* @y.24
  %1540 = sub i32 %1538, 1
  %1541 = mul i32 %1538, %1540
  %1542 = urem i32 %1541, 2
  %1543 = icmp eq i32 %1542, 0
  %1544 = icmp slt i32 %1539, 10
  %1545 = or i1 %1543, %1544
  br i1 %1545, label %originalBB291, label %originalBB291alteredBB

originalBB291:                                    ; preds = %originalBB291alteredBB, %1537
  %1546 = load i32, i32* %55, align 4
  %1547 = icmp ult i32 %1546, 64
  %1548 = load i32, i32* @x.23
  %1549 = load i32, i32* @y.24
  %1550 = sub i32 %1548, 1
  %1551 = mul i32 %1548, %1550
  %1552 = urem i32 %1551, 2
  %1553 = icmp eq i32 %1552, 0
  %1554 = icmp slt i32 %1549, 10
  %1555 = or i1 %1553, %1554
  br i1 %1555, label %originalBBpart2293, label %originalBB291alteredBB

originalBBpart2293:                               ; preds = %originalBB291
  br i1 %1547, label %1556, label %1646

; <label>:1556:                                   ; preds = %originalBBpart2293
  %1557 = load i32, i32* %55, align 4
  %1558 = zext i32 %1557 to i64
  %1559 = shl i64 1, %1558
  store i64 %1559, i64* %59, align 8
  %1560 = load i64, i64* %58, align 8
  %1561 = load i64, i64* %59, align 8
  %1562 = and i64 %1560, %1561
  %1563 = icmp ne i64 %1562, 0
  br i1 %1563, label %1564, label %1642

; <label>:1564:                                   ; preds = %1556
  %1565 = load i32, i32* @x.23
  %1566 = load i32, i32* @y.24
  %1567 = sub i32 %1565, 1
  %1568 = mul i32 %1565, %1567
  %1569 = urem i32 %1568, 2
  %1570 = icmp eq i32 %1569, 0
  %1571 = icmp slt i32 %1566, 10
  %1572 = or i1 %1570, %1571
  br i1 %1572, label %originalBB295, label %originalBB295alteredBB

originalBB295:                                    ; preds = %originalBB295alteredBB, %1564
  %1573 = load i64, i64* %59, align 8
  %1574 = xor i64 %1573, -1
  %1575 = load i64, i64* %58, align 8
  %1576 = and i64 %1575, %1574
  store i64 %1576, i64* %58, align 8
  %1577 = load i32, i32* %54, align 4
  %1578 = mul i32 %1577, 64
  %1579 = load i32, i32* %55, align 4
  %1580 = add i32 %1578, %1579
  store i32 %1580, i32* %25, align 4
  %1581 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %1582 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1581, i32 0, i32 4
  %1583 = bitcast %union.varray_data_tag* %1582 to [1 x %struct.basic_block_def*]*
  %1584 = load i32, i32* %25, align 4
  %1585 = sext i32 %1584 to i64
  %1586 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %1583, i64 0, i64 %1585
  %1587 = load %struct.basic_block_def*, %struct.basic_block_def** %1586, align 8
  store %struct.basic_block_def* %1587, %struct.basic_block_def** %60, align 8
  %1588 = load i32, i32* @x.23
  %1589 = load i32, i32* @y.24
  %1590 = sub i32 %1588, 1
  %1591 = mul i32 %1588, %1590
  %1592 = urem i32 %1591, 2
  %1593 = icmp eq i32 %1592, 0
  %1594 = icmp slt i32 %1589, 10
  %1595 = or i1 %1593, %1594
  br i1 %1595, label %originalBBpart2337, label %originalBB295alteredBB

originalBBpart2337:                               ; preds = %originalBB295
  br label %1596

; <label>:1596:                                   ; preds = %originalBBpart2337
  %1597 = load %struct.basic_block_def*, %struct.basic_block_def** %60, align 8
  %1598 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1597, i32 0, i32 6
  %1599 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1598, align 8
  %1600 = icmp ne %struct.bitmap_head_def* %1599, null
  br i1 %1600, label %1601, label %1607

; <label>:1601:                                   ; preds = %1596
  %1602 = load %struct.basic_block_def*, %struct.basic_block_def** %60, align 8
  %1603 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1602, i32 0, i32 6
  %1604 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1603, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1604)
  %1605 = load %struct.basic_block_def*, %struct.basic_block_def** %60, align 8
  %1606 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1605, i32 0, i32 6
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %1606, align 8
  br label %1607

; <label>:1607:                                   ; preds = %1601, %1596
  br label %1608

; <label>:1608:                                   ; preds = %1607
  br label %1609

; <label>:1609:                                   ; preds = %1608
  %1610 = load %struct.basic_block_def*, %struct.basic_block_def** %60, align 8
  %1611 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1610, i32 0, i32 7
  %1612 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1611, align 8
  %1613 = icmp ne %struct.bitmap_head_def* %1612, null
  br i1 %1613, label %1614, label %1620

; <label>:1614:                                   ; preds = %1609
  %1615 = load %struct.basic_block_def*, %struct.basic_block_def** %60, align 8
  %1616 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1615, i32 0, i32 7
  %1617 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1616, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1617)
  %1618 = load %struct.basic_block_def*, %struct.basic_block_def** %60, align 8
  %1619 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1618, i32 0, i32 7
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %1619, align 8
  br label %1620

; <label>:1620:                                   ; preds = %1614, %1609
  br label %1621

; <label>:1621:                                   ; preds = %1620
  %1622 = load i64, i64* %58, align 8
  %1623 = icmp eq i64 %1622, 0
  br i1 %1623, label %1624, label %1625

; <label>:1624:                                   ; preds = %1621
  br label %1646

; <label>:1625:                                   ; preds = %1621
  %1626 = load i32, i32* @x.23
  %1627 = load i32, i32* @y.24
  %1628 = sub i32 %1626, 1
  %1629 = mul i32 %1626, %1628
  %1630 = urem i32 %1629, 2
  %1631 = icmp eq i32 %1630, 0
  %1632 = icmp slt i32 %1627, 10
  %1633 = or i1 %1631, %1632
  br i1 %1633, label %originalBB339, label %originalBB339alteredBB

originalBB339:                                    ; preds = %originalBB339alteredBB, %1625
  %1634 = load i32, i32* @x.23
  %1635 = load i32, i32* @y.24
  %1636 = sub i32 %1634, 1
  %1637 = mul i32 %1634, %1636
  %1638 = urem i32 %1637, 2
  %1639 = icmp eq i32 %1638, 0
  %1640 = icmp slt i32 %1635, 10
  %1641 = or i1 %1639, %1640
  br i1 %1641, label %originalBBpart2341, label %originalBB339alteredBB

originalBBpart2341:                               ; preds = %originalBB339
  br label %1642

; <label>:1642:                                   ; preds = %originalBBpart2341, %1556
  br label %1643

; <label>:1643:                                   ; preds = %1642
  %1644 = load i32, i32* %55, align 4
  %1645 = add i32 %1644, 1
  store i32 %1645, i32* %55, align 4
  br label %1537

; <label>:1646:                                   ; preds = %1624, %originalBBpart2293
  %1647 = load i32, i32* @x.23
  %1648 = load i32, i32* @y.24
  %1649 = sub i32 %1647, 1
  %1650 = mul i32 %1647, %1649
  %1651 = urem i32 %1650, 2
  %1652 = icmp eq i32 %1651, 0
  %1653 = icmp slt i32 %1648, 10
  %1654 = or i1 %1652, %1653
  br i1 %1654, label %originalBB343, label %originalBB343alteredBB

originalBB343:                                    ; preds = %originalBB343alteredBB, %1646
  %1655 = load i32, i32* @x.23
  %1656 = load i32, i32* @y.24
  %1657 = sub i32 %1655, 1
  %1658 = mul i32 %1655, %1657
  %1659 = urem i32 %1658, 2
  %1660 = icmp eq i32 %1659, 0
  %1661 = icmp slt i32 %1656, 10
  %1662 = or i1 %1660, %1661
  br i1 %1662, label %originalBBpart2345, label %originalBB343alteredBB

originalBBpart2345:                               ; preds = %originalBB343
  br label %1663

; <label>:1663:                                   ; preds = %originalBBpart2345, %originalBBpart2285
  br label %1664

; <label>:1664:                                   ; preds = %1663
  %1665 = load i32, i32* %54, align 4
  %1666 = add i32 %1665, 1
  store i32 %1666, i32* %54, align 4
  store i32 0, i32* %55, align 4
  br label %1492

; <label>:1667:                                   ; preds = %1492
  %1668 = load i32, i32* @x.23
  %1669 = load i32, i32* @y.24
  %1670 = sub i32 %1668, 1
  %1671 = mul i32 %1668, %1670
  %1672 = urem i32 %1671, 2
  %1673 = icmp eq i32 %1672, 0
  %1674 = icmp slt i32 %1669, 10
  %1675 = or i1 %1673, %1674
  br i1 %1675, label %originalBB347, label %originalBB347alteredBB

originalBB347:                                    ; preds = %originalBB347alteredBB, %1667
  %1676 = load i32, i32* @x.23
  %1677 = load i32, i32* @y.24
  %1678 = sub i32 %1676, 1
  %1679 = mul i32 %1676, %1678
  %1680 = urem i32 %1679, 2
  %1681 = icmp eq i32 %1680, 0
  %1682 = icmp slt i32 %1677, 10
  %1683 = or i1 %1681, %1682
  br i1 %1683, label %originalBBpart2349, label %originalBB347alteredBB

originalBBpart2349:                               ; preds = %originalBB347
  br label %1684

; <label>:1684:                                   ; preds = %originalBBpart2349
  br label %1761

; <label>:1685:                                   ; preds = %1449
  %1686 = load i32, i32* @x.23
  %1687 = load i32, i32* @y.24
  %1688 = sub i32 %1686, 1
  %1689 = mul i32 %1686, %1688
  %1690 = urem i32 %1689, 2
  %1691 = icmp eq i32 %1690, 0
  %1692 = icmp slt i32 %1687, 10
  %1693 = or i1 %1691, %1692
  br i1 %1693, label %originalBB351, label %originalBB351alteredBB

originalBB351:                                    ; preds = %originalBB351alteredBB, %1685
  %1694 = load i32, i32* @n_basic_blocks, align 4
  %1695 = sub nsw i32 %1694, 1
  store i32 %1695, i32* %25, align 4
  %1696 = load i32, i32* @x.23
  %1697 = load i32, i32* @y.24
  %1698 = sub i32 %1696, 1
  %1699 = mul i32 %1696, %1698
  %1700 = urem i32 %1699, 2
  %1701 = icmp eq i32 %1700, 0
  %1702 = icmp slt i32 %1697, 10
  %1703 = or i1 %1701, %1702
  br i1 %1703, label %originalBBpart2357, label %originalBB351alteredBB

originalBBpart2357:                               ; preds = %originalBB351
  br label %1704

; <label>:1704:                                   ; preds = %1757, %originalBBpart2357
  %1705 = load i32, i32* %25, align 4
  %1706 = icmp sge i32 %1705, 0
  br i1 %1706, label %1707, label %1760

; <label>:1707:                                   ; preds = %1704
  %1708 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %1709 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1708, i32 0, i32 4
  %1710 = bitcast %union.varray_data_tag* %1709 to [1 x %struct.basic_block_def*]*
  %1711 = load i32, i32* %25, align 4
  %1712 = sext i32 %1711 to i64
  %1713 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %1710, i64 0, i64 %1712
  %1714 = load %struct.basic_block_def*, %struct.basic_block_def** %1713, align 8
  store %struct.basic_block_def* %1714, %struct.basic_block_def** %61, align 8
  br label %1715

; <label>:1715:                                   ; preds = %1707
  %1716 = load %struct.basic_block_def*, %struct.basic_block_def** %61, align 8
  %1717 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1716, i32 0, i32 6
  %1718 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1717, align 8
  %1719 = icmp ne %struct.bitmap_head_def* %1718, null
  br i1 %1719, label %1720, label %1742

; <label>:1720:                                   ; preds = %1715
  %1721 = load i32, i32* @x.23
  %1722 = load i32, i32* @y.24
  %1723 = sub i32 %1721, 1
  %1724 = mul i32 %1721, %1723
  %1725 = urem i32 %1724, 2
  %1726 = icmp eq i32 %1725, 0
  %1727 = icmp slt i32 %1722, 10
  %1728 = or i1 %1726, %1727
  br i1 %1728, label %originalBB359, label %originalBB359alteredBB

originalBB359:                                    ; preds = %originalBB359alteredBB, %1720
  %1729 = load %struct.basic_block_def*, %struct.basic_block_def** %61, align 8
  %1730 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1729, i32 0, i32 6
  %1731 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1730, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1731)
  %1732 = load %struct.basic_block_def*, %struct.basic_block_def** %61, align 8
  %1733 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1732, i32 0, i32 6
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %1733, align 8
  %1734 = load i32, i32* @x.23
  %1735 = load i32, i32* @y.24
  %1736 = sub i32 %1734, 1
  %1737 = mul i32 %1734, %1736
  %1738 = urem i32 %1737, 2
  %1739 = icmp eq i32 %1738, 0
  %1740 = icmp slt i32 %1735, 10
  %1741 = or i1 %1739, %1740
  br i1 %1741, label %originalBBpart2361, label %originalBB359alteredBB

originalBBpart2361:                               ; preds = %originalBB359
  br label %1742

; <label>:1742:                                   ; preds = %originalBBpart2361, %1715
  br label %1743

; <label>:1743:                                   ; preds = %1742
  br label %1744

; <label>:1744:                                   ; preds = %1743
  %1745 = load %struct.basic_block_def*, %struct.basic_block_def** %61, align 8
  %1746 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1745, i32 0, i32 7
  %1747 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1746, align 8
  %1748 = icmp ne %struct.bitmap_head_def* %1747, null
  br i1 %1748, label %1749, label %1755

; <label>:1749:                                   ; preds = %1744
  %1750 = load %struct.basic_block_def*, %struct.basic_block_def** %61, align 8
  %1751 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1750, i32 0, i32 7
  %1752 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1751, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1752)
  %1753 = load %struct.basic_block_def*, %struct.basic_block_def** %61, align 8
  %1754 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1753, i32 0, i32 7
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %1754, align 8
  br label %1755

; <label>:1755:                                   ; preds = %1749, %1744
  br label %1756

; <label>:1756:                                   ; preds = %1755
  br label %1757

; <label>:1757:                                   ; preds = %1756
  %1758 = load i32, i32* %25, align 4
  %1759 = add nsw i32 %1758, -1
  store i32 %1759, i32* %25, align 4
  br label %1704

; <label>:1760:                                   ; preds = %1704
  br label %1761

; <label>:1761:                                   ; preds = %1760, %1684
  %1762 = load i32, i32* @x.23
  %1763 = load i32, i32* @y.24
  %1764 = sub i32 %1762, 1
  %1765 = mul i32 %1762, %1764
  %1766 = urem i32 %1765, 2
  %1767 = icmp eq i32 %1766, 0
  %1768 = icmp slt i32 %1763, 10
  %1769 = or i1 %1767, %1768
  br i1 %1769, label %originalBB363, label %originalBB363alteredBB

originalBB363:                                    ; preds = %originalBB363alteredBB, %1761
  %1770 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  %1771 = bitcast %struct.basic_block_def** %1770 to i8*
  call void @free(i8* %1771) #6
  %1772 = load i32, i32* @x.23
  %1773 = load i32, i32* @y.24
  %1774 = sub i32 %1772, 1
  %1775 = mul i32 %1772, %1774
  %1776 = urem i32 %1775, 2
  %1777 = icmp eq i32 %1776, 0
  %1778 = icmp slt i32 %1773, 10
  %1779 = or i1 %1777, %1778
  br i1 %1779, label %originalBBpart2365, label %originalBB363alteredBB

originalBBpart2365:                               ; preds = %originalBB363
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %3
  %1780 = alloca %struct.simple_bitmap_def*, align 8
  %1781 = alloca %struct.simple_bitmap_def*, align 8
  %1782 = alloca i32, align 4
  %1783 = alloca %struct.basic_block_def**, align 8
  %1784 = alloca %struct.basic_block_def**, align 8
  %1785 = alloca %struct.basic_block_def**, align 8
  %1786 = alloca %struct.basic_block_def**, align 8
  %1787 = alloca %struct.bitmap_head_def*, align 8
  %1788 = alloca %struct.bitmap_head_def*, align 8
  %1789 = alloca %struct.bitmap_head_def*, align 8
  %1790 = alloca %struct.bitmap_head_def, align 8
  %1791 = alloca %struct.bitmap_head_def, align 8
  %1792 = alloca %struct.bitmap_head_def, align 8
  %1793 = alloca i32, align 4
  %1794 = alloca i32, align 4
  %1795 = alloca i32, align 4
  %1796 = alloca i32, align 4
  %1797 = alloca i64*, align 8
  %1798 = alloca i64, align 8
  %1799 = alloca i64, align 8
  %1800 = alloca %struct.basic_block_def*, align 8
  %1801 = alloca %struct.basic_block_def*, align 8
  %1802 = alloca i32, align 4
  %1803 = alloca i32, align 4
  %1804 = alloca %struct.basic_block_def*, align 8
  %1805 = alloca %struct.edge_def*, align 8
  %1806 = alloca %struct.basic_block_def*, align 8
  %1807 = alloca %struct.obstack*, align 8
  %1808 = alloca %struct.obstack*, align 8
  %1809 = alloca i32, align 4
  %1810 = alloca i8*, align 8
  %1811 = alloca %struct.obstack*, align 8
  %1812 = alloca i8*, align 8
  %1813 = alloca i8*, align 8
  %1814 = alloca %struct.obstack*, align 8
  %1815 = alloca %struct.obstack*, align 8
  %1816 = alloca i32, align 4
  %1817 = alloca i8*, align 8
  %1818 = alloca %struct.obstack*, align 8
  %1819 = alloca i8*, align 8
  %1820 = alloca i8*, align 8
  %1821 = alloca %struct.basic_block_def*, align 8
  %1822 = alloca i32, align 4
  %1823 = alloca i32, align 4
  %1824 = alloca i32, align 4
  %1825 = alloca i64*, align 8
  %1826 = alloca i64, align 8
  %1827 = alloca i64, align 8
  %1828 = alloca %struct.basic_block_def*, align 8
  %1829 = alloca %struct.basic_block_def*, align 8
  store %struct.simple_bitmap_def* %0, %struct.simple_bitmap_def** %1780, align 8
  store %struct.simple_bitmap_def* %1, %struct.simple_bitmap_def** %1781, align 8
  store i32 %2, i32* %1782, align 4
  %1830 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %1790)
  store %struct.bitmap_head_def* %1830, %struct.bitmap_head_def** %1787, align 8
  %1831 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %1792)
  store %struct.bitmap_head_def* %1831, %struct.bitmap_head_def** %1788, align 8
  %1832 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %1791)
  store %struct.bitmap_head_def* %1832, %struct.bitmap_head_def** %1789, align 8
  store i32 0, i32* %1793, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %85
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %105
  %1833 = load i32, i32* @n_basic_blocks, align 4
  %_ = sub i32 %1833, 2
  %gen = mul i32 %_, 2
  %1834 = add nsw i32 %1833, 2
  %1835 = sext i32 %1834 to i64
  %_7 = sub i64 %1835, 8
  %gen8 = mul i64 %_7, 8
  %_9 = shl i64 %1835, 8
  %_10 = sub i64 0, %1835
  %gen11 = add i64 %_10, 8
  %1836 = mul i64 %1835, 8
  %1837 = call noalias i8* @xmalloc(i64 %1836)
  %1838 = bitcast i8* %1837 to %struct.basic_block_def**
  store %struct.basic_block_def** %1838, %struct.basic_block_def*** %15, align 8
  %1839 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  store %struct.basic_block_def** %1839, %struct.basic_block_def*** %17, align 8
  %1840 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  %1841 = load i32, i32* @n_basic_blocks, align 4
  %1842 = sext i32 %1841 to i64
  %1843 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %1840, i64 %1842
  %1844 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %1843, i64 2
  store %struct.basic_block_def** %1844, %struct.basic_block_def*** %18, align 8
  store %struct.basic_block_def** %1844, %struct.basic_block_def*** %16, align 8
  %1845 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1846 = icmp ne %struct.simple_bitmap_def* %1845, null
  br label %originalBB6

originalBB15alteredBB:                            ; preds = %originalBB15, %136
  %1847 = load i32, i32* @n_basic_blocks, align 4
  %_16 = sub i32 0, %1847
  %gen17 = add i32 %_16, 1
  %_18 = sub i32 %1847, 1
  %gen19 = mul i32 %_18, 1
  %_20 = shl i32 %1847, 1
  %_21 = sub i32 %1847, 1
  %gen22 = mul i32 %_21, 1
  %_23 = sub i32 %1847, 1
  %gen24 = mul i32 %_23, 1
  %_25 = shl i32 %1847, 1
  %1848 = sub nsw i32 %1847, 1
  store i32 %1848, i32* %25, align 4
  br label %originalBB15

originalBB29alteredBB:                            ; preds = %originalBB29, %155
  %1849 = load i32, i32* %25, align 4
  %1850 = icmp sge i32 %1849, 0
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %187
  store i32 0, i32* %27, align 4
  %1851 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1852 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1851, i32 0, i32 1
  %1853 = load i32, i32* %1852, align 4
  store i32 %1853, i32* %28, align 4
  %1854 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %12, align 8
  %1855 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1854, i32 0, i32 3
  %1856 = getelementptr inbounds [1 x i64], [1 x i64]* %1855, i32 0, i32 0
  store i64* %1856, i64** %29, align 8
  store i32 0, i32* %26, align 4
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %214
  %1857 = load i64*, i64** %29, align 8
  %1858 = load i32, i32* %26, align 4
  %1859 = zext i32 %1858 to i64
  %1860 = getelementptr inbounds i64, i64* %1857, i64 %1859
  %1861 = load i64, i64* %1860, align 8
  store i64 %1861, i64* %30, align 8
  %1862 = load i64, i64* %30, align 8
  %1863 = icmp ne i64 %1862, 0
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %276
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %294
  %1864 = load i32, i32* %27, align 4
  %_46 = shl i32 %1864, 1
  %_47 = shl i32 %1864, 1
  %_48 = sub i32 0, %1864
  %gen49 = add i32 %_48, 1
  %_50 = shl i32 %1864, 1
  %_51 = shl i32 %1864, 1
  %1865 = add i32 %1864, 1
  store i32 %1865, i32* %27, align 4
  br label %originalBB45

originalBB55alteredBB:                            ; preds = %originalBB55, %320
  store i32 0, i32* %25, align 4
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %366
  %1866 = load %struct.basic_block_def**, %struct.basic_block_def*** %16, align 8
  %1867 = load %struct.basic_block_def**, %struct.basic_block_def*** %17, align 8
  %1868 = icmp ne %struct.basic_block_def** %1866, %1867
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %386
  %1869 = load %struct.basic_block_def**, %struct.basic_block_def*** %16, align 8
  %1870 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %1869, i32 1
  store %struct.basic_block_def** %1870, %struct.basic_block_def*** %16, align 8
  %1871 = load %struct.basic_block_def*, %struct.basic_block_def** %1869, align 8
  store %struct.basic_block_def* %1871, %struct.basic_block_def** %36, align 8
  %1872 = load %struct.basic_block_def**, %struct.basic_block_def*** %16, align 8
  %1873 = load %struct.basic_block_def**, %struct.basic_block_def*** %18, align 8
  %1874 = icmp eq %struct.basic_block_def** %1872, %1873
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %409
  %1875 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  store %struct.basic_block_def** %1875, %struct.basic_block_def*** %16, align 8
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %439
  %1876 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %1877 = icmp ne %struct.edge_def* %1876, null
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %458
  %1878 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %1879 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1878, i32 0, i32 3
  %1880 = load %struct.basic_block_def*, %struct.basic_block_def** %1879, align 8
  store %struct.basic_block_def* %1880, %struct.basic_block_def** %38, align 8
  %1881 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %1882 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1881, i32 0, i32 6
  %1883 = load i32, i32* %1882, align 8
  %_76 = shl i32 %1883, 8
  %1884 = and i32 %1883, 8
  %1885 = icmp ne i32 %1884, 0
  br label %originalBB75

originalBB80alteredBB:                            ; preds = %originalBB80, %483
  %1886 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1887 = load %struct.basic_block_def*, %struct.basic_block_def** %38, align 8
  %1888 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1887, i32 0, i32 8
  %1889 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1888, align 8
  %1890 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %21, align 8
  %1891 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1886, %struct.bitmap_head_def* %1889, %struct.bitmap_head_def* %1890, i32 1)
  %1892 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1893 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1894 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1895 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1892, %struct.bitmap_head_def* %1893, %struct.bitmap_head_def* %1894, i32 2)
  br label %originalBB80

originalBB84alteredBB:                            ; preds = %originalBB84, %510
  %1896 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1897 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1898 = load %struct.basic_block_def*, %struct.basic_block_def** %38, align 8
  %1899 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1898, i32 0, i32 8
  %1900 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1899, align 8
  %1901 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1896, %struct.bitmap_head_def* %1897, %struct.bitmap_head_def* %1900, i32 2)
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %540
  %1902 = load i32, i32* %25, align 4
  %1903 = icmp slt i32 %1902, 53
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %564
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %585
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %607
  %1904 = load i32, i32* %25, align 4
  %_101 = sub i32 0, %1904
  %gen102 = add i32 %_101, 1
  %_103 = sub i32 0, %1904
  %gen104 = add i32 %_103, 1
  %_105 = shl i32 %1904, 1
  %_106 = sub i32 %1904, 1
  %gen107 = mul i32 %_106, 1
  %_108 = sub i32 %1904, 1
  %gen109 = mul i32 %_108, 1
  %_110 = shl i32 %1904, 1
  %1905 = add nsw i32 %1904, 1
  store i32 %1905, i32* %25, align 4
  br label %originalBB100

originalBB114alteredBB:                           ; preds = %originalBB114, %631
  %1906 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %1906, i32 20)
  %1907 = load i8, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 16), align 16
  %1908 = icmp ne i8 %1907, 0
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %651
  %1909 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %1909, i32 16)
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %681
  %1910 = load i32, i32* @target_flags, align 4
  %_123 = shl i32 %1910, 33554432
  %_124 = sub i32 0, %1910
  %gen125 = add i32 %_124, 33554432
  %_126 = sub i32 0, %1910
  %gen127 = add i32 %_126, 33554432
  %_128 = sub i32 %1910, 33554432
  %gen129 = mul i32 %_128, 33554432
  %_130 = shl i32 %1910, 33554432
  %1911 = and i32 %1910, 33554432
  %1912 = icmp ne i32 %1911, 0
  br label %originalBB122

originalBB134alteredBB:                           ; preds = %originalBB134, %725
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %750
  %1913 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1914 = icmp eq %struct.basic_block_def* %1913, getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %779
  store %struct.obstack* @flow_obstack, %struct.obstack** %39, align 8
  %1915 = load %struct.obstack*, %struct.obstack** %39, align 8
  store %struct.obstack* %1915, %struct.obstack** %40, align 8
  store i32 24, i32* %41, align 4
  %1916 = load %struct.obstack*, %struct.obstack** %40, align 8
  %1917 = getelementptr inbounds %struct.obstack, %struct.obstack* %1916, i32 0, i32 4
  %1918 = load i8*, i8** %1917, align 8
  %1919 = load %struct.obstack*, %struct.obstack** %40, align 8
  %1920 = getelementptr inbounds %struct.obstack, %struct.obstack* %1919, i32 0, i32 3
  %1921 = load i8*, i8** %1920, align 8
  %1922 = ptrtoint i8* %1918 to i64
  %1923 = ptrtoint i8* %1921 to i64
  %_143 = sub i64 0, %1922
  %gen144 = add i64 %_143, %1923
  %_145 = sub i64 %1922, %1923
  %gen146 = mul i64 %_145, %1923
  %_147 = shl i64 %1922, %1923
  %_148 = shl i64 %1922, %1923
  %_149 = shl i64 %1922, %1923
  %_150 = sub i64 0, %1922
  %gen151 = add i64 %_150, %1923
  %_152 = sub i64 %1922, %1923
  %gen153 = mul i64 %_152, %1923
  %1924 = sub i64 %1922, %1923
  %1925 = load i32, i32* %41, align 4
  %1926 = sext i32 %1925 to i64
  %1927 = icmp slt i64 %1924, %1926
  br label %originalBB142

originalBB157alteredBB:                           ; preds = %originalBB157, %809
  %1928 = load %struct.obstack*, %struct.obstack** %40, align 8
  %1929 = load i32, i32* %41, align 4
  call void @_obstack_newchunk(%struct.obstack* %1928, i32 %1929)
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %828
  %1930 = load i32, i32* %41, align 4
  %1931 = load %struct.obstack*, %struct.obstack** %40, align 8
  %1932 = getelementptr inbounds %struct.obstack, %struct.obstack* %1931, i32 0, i32 3
  %1933 = load i8*, i8** %1932, align 8
  %1934 = sext i32 %1930 to i64
  %1935 = getelementptr inbounds i8, i8* %1933, i64 %1934
  store i8* %1935, i8** %1932, align 8
  %1936 = load %struct.obstack*, %struct.obstack** %39, align 8
  store %struct.obstack* %1936, %struct.obstack** %43, align 8
  %1937 = load %struct.obstack*, %struct.obstack** %43, align 8
  %1938 = getelementptr inbounds %struct.obstack, %struct.obstack* %1937, i32 0, i32 2
  %1939 = load i8*, i8** %1938, align 8
  store i8* %1939, i8** %44, align 8
  %1940 = load %struct.obstack*, %struct.obstack** %43, align 8
  %1941 = getelementptr inbounds %struct.obstack, %struct.obstack* %1940, i32 0, i32 3
  %1942 = load i8*, i8** %1941, align 8
  %1943 = load i8*, i8** %44, align 8
  %1944 = icmp eq i8* %1942, %1943
  br label %originalBB161

originalBB165alteredBB:                           ; preds = %originalBB165, %907
  %1945 = load %struct.obstack*, %struct.obstack** %43, align 8
  %1946 = getelementptr inbounds %struct.obstack, %struct.obstack* %1945, i32 0, i32 4
  %1947 = load i8*, i8** %1946, align 8
  %1948 = load %struct.obstack*, %struct.obstack** %43, align 8
  %1949 = getelementptr inbounds %struct.obstack, %struct.obstack* %1948, i32 0, i32 3
  store i8* %1947, i8** %1949, align 8
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %980
  %1950 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1951 = getelementptr inbounds %struct.obstack, %struct.obstack* %1950, i32 0, i32 3
  %1952 = load i8*, i8** %1951, align 8
  %1953 = ptrtoint i8* %1952 to i64
  %_170 = sub i64 %1953, 0
  %gen171 = mul i64 %_170, 0
  %1954 = sub i64 %1953, 0
  %1955 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1956 = getelementptr inbounds %struct.obstack, %struct.obstack* %1955, i32 0, i32 6
  %1957 = load i32, i32* %1956, align 8
  %1958 = sext i32 %1957 to i64
  %_172 = sub i64 %1954, %1958
  %gen173 = mul i64 %_172, %1958
  %_174 = sub i64 0, %1954
  %gen175 = add i64 %_174, %1958
  %_176 = shl i64 %1954, %1958
  %_177 = shl i64 %1954, %1958
  %_178 = shl i64 %1954, %1958
  %_179 = shl i64 %1954, %1958
  %_180 = shl i64 %1954, %1958
  %_181 = shl i64 %1954, %1958
  %1959 = add nsw i64 %1954, %1958
  %1960 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1961 = getelementptr inbounds %struct.obstack, %struct.obstack* %1960, i32 0, i32 6
  %1962 = load i32, i32* %1961, align 8
  %_182 = sub i32 %1962, -1
  %gen183 = mul i32 %_182, -1
  %_184 = sub i32 0, %1962
  %gen185 = add i32 %_184, -1
  %_186 = sub i32 0, %1962
  %gen187 = add i32 %_186, -1
  %_188 = shl i32 %1962, -1
  %1963 = xor i32 %1962, -1
  %1964 = sext i32 %1963 to i64
  %_189 = shl i64 %1959, %1964
  %_190 = shl i64 %1959, %1964
  %_191 = sub i64 %1959, %1964
  %gen192 = mul i64 %_191, %1964
  %_193 = sub i64 %1959, %1964
  %gen194 = mul i64 %_193, %1964
  %_195 = shl i64 %1959, %1964
  %1965 = and i64 %1959, %1964
  %1966 = getelementptr inbounds i8, i8* null, i64 %1965
  %1967 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1968 = getelementptr inbounds %struct.obstack, %struct.obstack* %1967, i32 0, i32 3
  store i8* %1966, i8** %1968, align 8
  %1969 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1970 = getelementptr inbounds %struct.obstack, %struct.obstack* %1969, i32 0, i32 3
  %1971 = load i8*, i8** %1970, align 8
  %1972 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1973 = getelementptr inbounds %struct.obstack, %struct.obstack* %1972, i32 0, i32 1
  %1974 = load %struct._obstack_chunk*, %struct._obstack_chunk** %1973, align 8
  %1975 = bitcast %struct._obstack_chunk* %1974 to i8*
  %1976 = ptrtoint i8* %1971 to i64
  %1977 = ptrtoint i8* %1975 to i64
  %_196 = shl i64 %1976, %1977
  %_197 = sub i64 %1976, %1977
  %gen198 = mul i64 %_197, %1977
  %_199 = sub i64 0, %1976
  %gen200 = add i64 %_199, %1977
  %_201 = sub i64 0, %1976
  %gen202 = add i64 %_201, %1977
  %_203 = sub i64 0, %1976
  %gen204 = add i64 %_203, %1977
  %1978 = sub i64 %1976, %1977
  %1979 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1980 = getelementptr inbounds %struct.obstack, %struct.obstack* %1979, i32 0, i32 4
  %1981 = load i8*, i8** %1980, align 8
  %1982 = load %struct.obstack*, %struct.obstack** %50, align 8
  %1983 = getelementptr inbounds %struct.obstack, %struct.obstack* %1982, i32 0, i32 1
  %1984 = load %struct._obstack_chunk*, %struct._obstack_chunk** %1983, align 8
  %1985 = bitcast %struct._obstack_chunk* %1984 to i8*
  %1986 = ptrtoint i8* %1981 to i64
  %1987 = ptrtoint i8* %1985 to i64
  %_205 = sub i64 %1986, %1987
  %gen206 = mul i64 %_205, %1987
  %_207 = shl i64 %1986, %1987
  %_208 = shl i64 %1986, %1987
  %_209 = shl i64 %1986, %1987
  %_210 = sub i64 0, %1986
  %gen211 = add i64 %_210, %1987
  %_212 = sub i64 0, %1986
  %gen213 = add i64 %_212, %1987
  %_214 = shl i64 %1986, %1987
  %1988 = sub i64 %1986, %1987
  %1989 = icmp sgt i64 %1978, %1988
  br label %originalBB169

originalBB218alteredBB:                           ; preds = %originalBB218, %1066
  %1990 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %1990)
  %1991 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %1992 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %1993 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %1994 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1993, i32 0, i32 7
  %1995 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1994, align 8
  %1996 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1991, %struct.bitmap_head_def* %1992, %struct.bitmap_head_def* %1995, i32 0)
  store i32 %1996, i32* %34, align 4
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %1103
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %1148
  %1997 = load i32, i32* %34, align 4
  %1998 = icmp ne i32 %1997, 0
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %1167
  %1999 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %2000 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %2001 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2002 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2001, i32 0, i32 9
  %2003 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2002, align 8
  %2004 = call i32 @bitmap_operation(%struct.bitmap_head_def* %1999, %struct.bitmap_head_def* %2000, %struct.bitmap_head_def* %2003, i32 1)
  %2005 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2006 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2005, i32 0, i32 9
  %2007 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2006, align 8
  %2008 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %2007, %struct.bitmap_head_def* %2008)
  %2009 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2010 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2009, i32 0, i32 8
  %2011 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2010, align 8
  %2012 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2013 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2012, i32 0, i32 8
  %2014 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2013, align 8
  %2015 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8
  %2016 = call i32 @bitmap_operation(%struct.bitmap_head_def* %2011, %struct.bitmap_head_def* %2014, %struct.bitmap_head_def* %2015, i32 2)
  store i32 %2016, i32* %35, align 4
  %2017 = load i32, i32* %35, align 4
  %2018 = icmp ne i32 %2017, 0
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %1204
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1222
  %2019 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2020 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2019, i32 0, i32 9
  %2021 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2020, align 8
  %2022 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  call void @bitmap_copy(%struct.bitmap_head_def* %2021, %struct.bitmap_head_def* %2022)
  %2023 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2024 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %2025 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2026 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2025, i32 0, i32 6
  %2027 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2026, align 8
  %2028 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2029 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2028, i32 0, i32 7
  %2030 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2029, align 8
  %2031 = load i32, i32* %14, align 4
  %2032 = call i32 @propagate_block(%struct.basic_block_def* %2023, %struct.bitmap_head_def* %2024, %struct.bitmap_head_def* %2027, %struct.bitmap_head_def* %2030, i32 %2031)
  %2033 = load %struct.basic_block_def*, %struct.basic_block_def** %36, align 8
  %2034 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2033, i32 0, i32 8
  %2035 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2034, align 8
  %2036 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, align 8
  %2037 = call i32 @bitmap_equal_p(%struct.bitmap_head_def* %2035, %struct.bitmap_head_def* %2036)
  %2038 = icmp ne i32 %2037, 0
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1269
  %2039 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %2040 = icmp ne %struct.edge_def* %2039, null
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1288
  %2041 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %2042 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2041, i32 0, i32 2
  %2043 = load %struct.basic_block_def*, %struct.basic_block_def** %2042, align 8
  store %struct.basic_block_def* %2043, %struct.basic_block_def** %53, align 8
  %2044 = load %struct.basic_block_def*, %struct.basic_block_def** %53, align 8
  %2045 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2044, i32 0, i32 10
  %2046 = load i8*, i8** %2045, align 8
  %2047 = icmp eq i8* %2046, null
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1312
  %2048 = load %struct.basic_block_def*, %struct.basic_block_def** %53, align 8
  %2049 = load %struct.basic_block_def**, %struct.basic_block_def*** %17, align 8
  %2050 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %2049, i32 1
  store %struct.basic_block_def** %2050, %struct.basic_block_def*** %17, align 8
  store %struct.basic_block_def* %2048, %struct.basic_block_def** %2049, align 8
  %2051 = load %struct.basic_block_def**, %struct.basic_block_def*** %17, align 8
  %2052 = load %struct.basic_block_def**, %struct.basic_block_def*** %18, align 8
  %2053 = icmp eq %struct.basic_block_def** %2051, %2052
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1343
  %2054 = load %struct.edge_def*, %struct.edge_def** %37, align 8
  %2055 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2054, i32 0, i32 0
  %2056 = load %struct.edge_def*, %struct.edge_def** %2055, align 8
  store %struct.edge_def* %2056, %struct.edge_def** %37, align 8
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1370
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1387
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %1410
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %1432
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %1452
  br label %originalBB274

originalBB278alteredBB:                           ; preds = %originalBB278, %1469
  store i32 0, i32* %55, align 4
  %2057 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  %2058 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2057, i32 0, i32 1
  %2059 = load i32, i32* %2058, align 4
  store i32 %2059, i32* %56, align 4
  %2060 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, align 8
  %2061 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2060, i32 0, i32 3
  %2062 = getelementptr inbounds [1 x i64], [1 x i64]* %2061, i32 0, i32 0
  store i64* %2062, i64** %57, align 8
  store i32 0, i32* %54, align 4
  br label %originalBB278

originalBB283alteredBB:                           ; preds = %originalBB283, %1496
  %2063 = load i64*, i64** %57, align 8
  %2064 = load i32, i32* %54, align 4
  %2065 = zext i32 %2064 to i64
  %2066 = getelementptr inbounds i64, i64* %2063, i64 %2065
  %2067 = load i64, i64* %2066, align 8
  store i64 %2067, i64* %58, align 8
  %2068 = load i64, i64* %58, align 8
  %2069 = icmp ne i64 %2068, 0
  br label %originalBB283

originalBB287alteredBB:                           ; preds = %originalBB287, %1520
  br label %originalBB287

originalBB291alteredBB:                           ; preds = %originalBB291, %1537
  %2070 = load i32, i32* %55, align 4
  %2071 = icmp ult i32 %2070, 64
  br label %originalBB291

originalBB295alteredBB:                           ; preds = %originalBB295, %1564
  %2072 = load i64, i64* %59, align 8
  %_296 = shl i64 %2072, -1
  %_297 = sub i64 %2072, -1
  %gen298 = mul i64 %_297, -1
  %_299 = sub i64 %2072, -1
  %gen300 = mul i64 %_299, -1
  %_301 = sub i64 0, %2072
  %gen302 = add i64 %_301, -1
  %_303 = shl i64 %2072, -1
  %2073 = xor i64 %2072, -1
  %2074 = load i64, i64* %58, align 8
  %_304 = sub i64 %2074, %2073
  %gen305 = mul i64 %_304, %2073
  %_306 = sub i64 %2074, %2073
  %gen307 = mul i64 %_306, %2073
  %_308 = sub i64 %2074, %2073
  %gen309 = mul i64 %_308, %2073
  %_310 = sub i64 %2074, %2073
  %gen311 = mul i64 %_310, %2073
  %_312 = shl i64 %2074, %2073
  %_313 = shl i64 %2074, %2073
  %_314 = sub i64 %2074, %2073
  %gen315 = mul i64 %_314, %2073
  %2075 = and i64 %2074, %2073
  store i64 %2075, i64* %58, align 8
  %2076 = load i32, i32* %54, align 4
  %_316 = sub i32 0, %2076
  %gen317 = add i32 %_316, 64
  %_318 = sub i32 %2076, 64
  %gen319 = mul i32 %_318, 64
  %_320 = sub i32 %2076, 64
  %gen321 = mul i32 %_320, 64
  %_322 = shl i32 %2076, 64
  %_323 = shl i32 %2076, 64
  %2077 = mul i32 %2076, 64
  %2078 = load i32, i32* %55, align 4
  %_324 = shl i32 %2077, %2078
  %_325 = sub i32 %2077, %2078
  %gen326 = mul i32 %_325, %2078
  %_327 = sub i32 0, %2077
  %gen328 = add i32 %_327, %2078
  %_329 = shl i32 %2077, %2078
  %_330 = sub i32 0, %2077
  %gen331 = add i32 %_330, %2078
  %_332 = sub i32 %2077, %2078
  %gen333 = mul i32 %_332, %2078
  %_334 = sub i32 0, %2077
  %gen335 = add i32 %_334, %2078
  %2079 = add i32 %2077, %2078
  store i32 %2079, i32* %25, align 4
  %2080 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %2081 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %2080, i32 0, i32 4
  %2082 = bitcast %union.varray_data_tag* %2081 to [1 x %struct.basic_block_def*]*
  %2083 = load i32, i32* %25, align 4
  %2084 = sext i32 %2083 to i64
  %2085 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %2082, i64 0, i64 %2084
  %2086 = load %struct.basic_block_def*, %struct.basic_block_def** %2085, align 8
  store %struct.basic_block_def* %2086, %struct.basic_block_def** %60, align 8
  br label %originalBB295

originalBB339alteredBB:                           ; preds = %originalBB339, %1625
  br label %originalBB339

originalBB343alteredBB:                           ; preds = %originalBB343, %1646
  br label %originalBB343

originalBB347alteredBB:                           ; preds = %originalBB347, %1667
  br label %originalBB347

originalBB351alteredBB:                           ; preds = %originalBB351, %1685
  %2087 = load i32, i32* @n_basic_blocks, align 4
  %_352 = sub i32 0, %2087
  %gen353 = add i32 %_352, 1
  %_354 = shl i32 %2087, 1
  %_355 = shl i32 %2087, 1
  %2088 = sub nsw i32 %2087, 1
  store i32 %2088, i32* %25, align 4
  br label %originalBB351

originalBB359alteredBB:                           ; preds = %originalBB359, %1720
  %2089 = load %struct.basic_block_def*, %struct.basic_block_def** %61, align 8
  %2090 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2089, i32 0, i32 6
  %2091 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2090, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %2091)
  %2092 = load %struct.basic_block_def*, %struct.basic_block_def** %61, align 8
  %2093 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2092, i32 0, i32 6
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %2093, align 8
  br label %originalBB359

originalBB363alteredBB:                           ; preds = %originalBB363, %1761
  %2094 = load %struct.basic_block_def**, %struct.basic_block_def*** %15, align 8
  %2095 = bitcast %struct.basic_block_def** %2094 to i8*
  call void @free(i8* %2095) #6
  br label %originalBB363
}

declare void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @propagate_block(%struct.basic_block_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32) #0 {
  %6 = load i32, i32* @x.25
  %7 = load i32, i32* @y.26
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %5
  %14 = alloca %struct.basic_block_def*, align 8
  %15 = alloca %struct.bitmap_head_def*, align 8
  %16 = alloca %struct.bitmap_head_def*, align 8
  %17 = alloca %struct.bitmap_head_def*, align 8
  %18 = alloca i32, align 4
  %19 = alloca %struct.propagate_block_info*, align 8
  %20 = alloca %struct.rtx_def*, align 8
  %21 = alloca %struct.rtx_def*, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca %struct.bitmap_element_def*, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  store %struct.basic_block_def* %0, %struct.basic_block_def** %14, align 8
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %15, align 8
  store %struct.bitmap_head_def* %2, %struct.bitmap_head_def** %16, align 8
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %17, align 8
  store i32 %4, i32* %18, align 4
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %16, align 8
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %17, align 8
  %34 = load i32, i32* %18, align 4
  %35 = call %struct.propagate_block_info* @init_propagate_block_info(%struct.basic_block_def* %30, %struct.bitmap_head_def* %31, %struct.bitmap_head_def* %32, %struct.bitmap_head_def* %33, i32 %34)
  store %struct.propagate_block_info* %35, %struct.propagate_block_info** %19, align 8
  %36 = load i32, i32* %18, align 4
  %37 = and i32 %36, 4
  %38 = icmp ne i32 %37, 0
  %39 = load i32, i32* @x.25
  %40 = load i32, i32* @y.26
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %38, label %47, label %356

; <label>:47:                                     ; preds = %originalBBpart2
  %48 = load i32, i32* @x.25
  %49 = load i32, i32* @y.26
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB4, label %originalBB4alteredBB

originalBB4:                                      ; preds = %originalBB4alteredBB, %47
  %56 = load i32, i32* @x.25
  %57 = load i32, i32* @y.26
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart26, label %originalBB4alteredBB

originalBBpart26:                                 ; preds = %originalBB4
  br label %64

; <label>:64:                                     ; preds = %originalBBpart26
  %65 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %66 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %65, i32 0, i32 0
  %67 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %66, align 8
  store %struct.bitmap_element_def* %67, %struct.bitmap_element_def** %24, align 8
  store i32 0, i32* %25, align 4
  store i32 0, i32* %26, align 4
  store i32 0, i32* %27, align 4
  br label %68

; <label>:68:                                     ; preds = %127, %64
  %69 = load i32, i32* @x.25
  %70 = load i32, i32* @y.26
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %originalBB8alteredBB, %68
  %77 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %78 = icmp ne %struct.bitmap_element_def* %77, null
  %79 = load i32, i32* @x.25
  %80 = load i32, i32* @y.26
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br i1 %78, label %87, label %109

; <label>:87:                                     ; preds = %originalBBpart210
  %88 = load i32, i32* @x.25
  %89 = load i32, i32* @y.26
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %87
  %96 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %97 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %96, i32 0, i32 2
  %98 = load i32, i32* %97, align 8
  %99 = load i32, i32* %25, align 4
  %100 = icmp ult i32 %98, %99
  %101 = load i32, i32* @x.25
  %102 = load i32, i32* @y.26
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %109

; <label>:109:                                    ; preds = %originalBBpart214, %originalBBpart210
  %110 = phi i1 [ false, %originalBBpart210 ], [ %100, %originalBBpart214 ]
  %111 = load i32, i32* @x.25
  %112 = load i32, i32* @y.26
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %originalBB16alteredBB, %109
  %119 = load i32, i32* @x.25
  %120 = load i32, i32* @y.26
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %110, label %127, label %131

; <label>:127:                                    ; preds = %originalBBpart218
  %128 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %129 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %128, i32 0, i32 0
  %130 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %129, align 8
  store %struct.bitmap_element_def* %130, %struct.bitmap_element_def** %24, align 8
  br label %68

; <label>:131:                                    ; preds = %originalBBpart218
  %132 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %133 = icmp ne %struct.bitmap_element_def* %132, null
  br i1 %133, label %134, label %157

; <label>:134:                                    ; preds = %131
  %135 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %136 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %135, i32 0, i32 2
  %137 = load i32, i32* %136, align 8
  %138 = load i32, i32* %25, align 4
  %139 = icmp ne i32 %137, %138
  br i1 %139, label %140, label %157

; <label>:140:                                    ; preds = %134
  %141 = load i32, i32* @x.25
  %142 = load i32, i32* @y.26
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %originalBB20alteredBB, %140
  store i32 0, i32* %26, align 4
  store i32 0, i32* %27, align 4
  %149 = load i32, i32* @x.25
  %150 = load i32, i32* @y.26
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %157

; <label>:157:                                    ; preds = %originalBBpart222, %134, %131
  br label %158

; <label>:158:                                    ; preds = %originalBBpart2104, %157
  %159 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %160 = icmp ne %struct.bitmap_element_def* %159, null
  br i1 %160, label %161, label %338

; <label>:161:                                    ; preds = %158
  br label %162

; <label>:162:                                    ; preds = %298, %161
  %163 = load i32, i32* %27, align 4
  %164 = icmp ult i32 %163, 2
  br i1 %164, label %165, label %301

; <label>:165:                                    ; preds = %162
  %166 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %167 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %166, i32 0, i32 3
  %168 = load i32, i32* %27, align 4
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds [2 x i64], [2 x i64]* %167, i64 0, i64 %169
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %28, align 8
  %172 = load i64, i64* %28, align 8
  %173 = icmp ne i64 %172, 0
  br i1 %173, label %174, label %297

; <label>:174:                                    ; preds = %165
  br label %175

; <label>:175:                                    ; preds = %277, %174
  %176 = load i32, i32* %26, align 4
  %177 = icmp ult i32 %176, 64
  br i1 %177, label %178, label %280

; <label>:178:                                    ; preds = %175
  %179 = load i32, i32* @x.25
  %180 = load i32, i32* @y.26
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %originalBB24alteredBB, %178
  %187 = load i32, i32* %26, align 4
  %188 = zext i32 %187 to i64
  %189 = shl i64 1, %188
  store i64 %189, i64* %29, align 8
  %190 = load i64, i64* %28, align 8
  %191 = load i64, i64* %29, align 8
  %192 = and i64 %190, %191
  %193 = icmp ne i64 %192, 0
  %194 = load i32, i32* @x.25
  %195 = load i32, i32* @y.26
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart238, label %originalBB24alteredBB

originalBBpart238:                                ; preds = %originalBB24
  br i1 %193, label %202, label %260

; <label>:202:                                    ; preds = %originalBBpart238
  %203 = load i32, i32* @x.25
  %204 = load i32, i32* @y.26
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %originalBB40alteredBB, %202
  %211 = load i64, i64* %29, align 8
  %212 = xor i64 %211, -1
  %213 = load i64, i64* %28, align 8
  %214 = and i64 %213, %212
  store i64 %214, i64* %28, align 8
  %215 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %216 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %215, i32 0, i32 2
  %217 = load i32, i32* %216, align 8
  %218 = mul i32 %217, 128
  %219 = load i32, i32* %27, align 4
  %220 = mul i32 %219, 64
  %221 = add i32 %218, %220
  %222 = load i32, i32* %26, align 4
  %223 = add i32 %221, %222
  store i32 %223, i32* %23, align 4
  %224 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %225 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %224, i32 0, i32 4
  %226 = bitcast %union.varray_data_tag* %225 to [1 x %struct.reg_info_def*]*
  %227 = load i32, i32* %23, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %226, i64 0, i64 %228
  %230 = load %struct.reg_info_def*, %struct.reg_info_def** %229, align 8
  %231 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %230, i32 0, i32 9
  store i32 -2, i32* %231, align 4
  %232 = load i64, i64* %28, align 8
  %233 = icmp eq i64 %232, 0
  %234 = load i32, i32* @x.25
  %235 = load i32, i32* @y.26
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart284, label %originalBB40alteredBB

originalBBpart284:                                ; preds = %originalBB40
  br i1 %233, label %242, label %243

; <label>:242:                                    ; preds = %originalBBpart284
  br label %280

; <label>:243:                                    ; preds = %originalBBpart284
  %244 = load i32, i32* @x.25
  %245 = load i32, i32* @y.26
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %originalBB86alteredBB, %243
  %252 = load i32, i32* @x.25
  %253 = load i32, i32* @y.26
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br label %260

; <label>:260:                                    ; preds = %originalBBpart288, %originalBBpart238
  %261 = load i32, i32* @x.25
  %262 = load i32, i32* @y.26
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %originalBB90alteredBB, %260
  %269 = load i32, i32* @x.25
  %270 = load i32, i32* @y.26
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br label %277

; <label>:277:                                    ; preds = %originalBBpart292
  %278 = load i32, i32* %26, align 4
  %279 = add i32 %278, 1
  store i32 %279, i32* %26, align 4
  br label %175

; <label>:280:                                    ; preds = %242, %175
  %281 = load i32, i32* @x.25
  %282 = load i32, i32* @y.26
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %originalBB94alteredBB, %280
  %289 = load i32, i32* @x.25
  %290 = load i32, i32* @y.26
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br label %297

; <label>:297:                                    ; preds = %originalBBpart296, %165
  store i32 0, i32* %26, align 4
  br label %298

; <label>:298:                                    ; preds = %297
  %299 = load i32, i32* %27, align 4
  %300 = add i32 %299, 1
  store i32 %300, i32* %27, align 4
  br label %162

; <label>:301:                                    ; preds = %162
  %302 = load i32, i32* @x.25
  %303 = load i32, i32* @y.26
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %originalBB98alteredBB, %301
  store i32 0, i32* %27, align 4
  %310 = load i32, i32* @x.25
  %311 = load i32, i32* @y.26
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %318

; <label>:318:                                    ; preds = %originalBBpart2100
  %319 = load i32, i32* @x.25
  %320 = load i32, i32* @y.26
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %originalBB102alteredBB, %318
  %327 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %328 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %327, i32 0, i32 0
  %329 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %328, align 8
  store %struct.bitmap_element_def* %329, %struct.bitmap_element_def** %24, align 8
  %330 = load i32, i32* @x.25
  %331 = load i32, i32* @y.26
  %332 = sub i32 %330, 1
  %333 = mul i32 %330, %332
  %334 = urem i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %335, %336
  br i1 %337, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %158

; <label>:338:                                    ; preds = %158
  br label %339

; <label>:339:                                    ; preds = %338
  %340 = load i32, i32* @x.25
  %341 = load i32, i32* @y.26
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %originalBB106alteredBB, %339
  %348 = load i32, i32* @x.25
  %349 = load i32, i32* @y.26
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %356

; <label>:356:                                    ; preds = %originalBBpart2108, %originalBBpart2
  %357 = load i32, i32* @x.25
  %358 = load i32, i32* @y.26
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %originalBB110alteredBB, %356
  store i32 0, i32* %22, align 4
  %365 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %366 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %365, i32 0, i32 1
  %367 = load %struct.rtx_def*, %struct.rtx_def** %366, align 8
  store %struct.rtx_def* %367, %struct.rtx_def** %20, align 8
  %368 = load i32, i32* @x.25
  %369 = load i32, i32* @y.26
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %376

; <label>:376:                                    ; preds = %450, %originalBBpart2112
  %377 = load i32, i32* %18, align 4
  %378 = and i32 %377, 4
  %379 = icmp ne i32 %378, 0
  br i1 %379, label %380, label %429

; <label>:380:                                    ; preds = %376
  %381 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %382 = bitcast %struct.rtx_def* %381 to i32*
  %383 = load i32, i32* %382, align 8
  %384 = and i32 %383, 65535
  %385 = icmp eq i32 %384, 34
  br i1 %385, label %386, label %429

; <label>:386:                                    ; preds = %380
  %387 = load i32, i32* @x.25
  %388 = load i32, i32* @y.26
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %originalBB114alteredBB, %386
  %395 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %396 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %395, i32 28, %struct.rtx_def* null)
  %397 = icmp ne %struct.rtx_def* %396, null
  %398 = load i32, i32* @x.25
  %399 = load i32, i32* @y.26
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br i1 %397, label %406, label %429

; <label>:406:                                    ; preds = %originalBBpart2116
  %407 = load i32, i32* @x.25
  %408 = load i32, i32* @y.26
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %originalBB118alteredBB, %406
  %415 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  %416 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  %417 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %418 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %417, i32 0, i32 1
  %419 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %418, align 8
  %420 = call i32 @bitmap_operation(%struct.bitmap_head_def* %415, %struct.bitmap_head_def* %416, %struct.bitmap_head_def* %419, i32 2)
  %421 = load i32, i32* @x.25
  %422 = load i32, i32* @y.26
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %429

; <label>:429:                                    ; preds = %originalBBpart2120, %originalBBpart2116, %380, %376
  %430 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %431 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %432 = call %struct.rtx_def* @propagate_one_insn(%struct.propagate_block_info* %430, %struct.rtx_def* %431)
  store %struct.rtx_def* %432, %struct.rtx_def** %21, align 8
  %433 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %434 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %433, i32 0, i32 1
  %435 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %434, i64 0, i64 2
  %436 = bitcast %union.rtunion_def* %435 to %struct.rtx_def**
  %437 = load %struct.rtx_def*, %struct.rtx_def** %436, align 8
  %438 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %439 = icmp ne %struct.rtx_def* %437, %438
  %440 = zext i1 %439 to i32
  %441 = load i32, i32* %22, align 4
  %442 = or i32 %441, %440
  store i32 %442, i32* %22, align 4
  %443 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %444 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %445 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %444, i32 0, i32 0
  %446 = load %struct.rtx_def*, %struct.rtx_def** %445, align 8
  %447 = icmp eq %struct.rtx_def* %443, %446
  br i1 %447, label %448, label %449

; <label>:448:                                    ; preds = %429
  br label %452

; <label>:449:                                    ; preds = %429
  br label %450

; <label>:450:                                    ; preds = %449
  %451 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  store %struct.rtx_def* %451, %struct.rtx_def** %20, align 8
  br label %376

; <label>:452:                                    ; preds = %448
  %453 = load i32, i32* @x.25
  %454 = load i32, i32* @y.26
  %455 = sub i32 %453, 1
  %456 = mul i32 %453, %455
  %457 = urem i32 %456, 2
  %458 = icmp eq i32 %457, 0
  %459 = icmp slt i32 %454, 10
  %460 = or i1 %458, %459
  br i1 %460, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %originalBB122alteredBB, %452
  %461 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  call void @free_propagate_block_info(%struct.propagate_block_info* %461)
  %462 = load i32, i32* %22, align 4
  %463 = load i32, i32* @x.25
  %464 = load i32, i32* @y.26
  %465 = sub i32 %463, 1
  %466 = mul i32 %463, %465
  %467 = urem i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %468, %469
  br i1 %470, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  ret i32 %462

originalBBalteredBB:                              ; preds = %originalBB, %5
  %471 = alloca %struct.basic_block_def*, align 8
  %472 = alloca %struct.bitmap_head_def*, align 8
  %473 = alloca %struct.bitmap_head_def*, align 8
  %474 = alloca %struct.bitmap_head_def*, align 8
  %475 = alloca i32, align 4
  %476 = alloca %struct.propagate_block_info*, align 8
  %477 = alloca %struct.rtx_def*, align 8
  %478 = alloca %struct.rtx_def*, align 8
  %479 = alloca i32, align 4
  %480 = alloca i32, align 4
  %481 = alloca %struct.bitmap_element_def*, align 8
  %482 = alloca i32, align 4
  %483 = alloca i32, align 4
  %484 = alloca i32, align 4
  %485 = alloca i64, align 8
  %486 = alloca i64, align 8
  store %struct.basic_block_def* %0, %struct.basic_block_def** %471, align 8
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %472, align 8
  store %struct.bitmap_head_def* %2, %struct.bitmap_head_def** %473, align 8
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %474, align 8
  store i32 %4, i32* %475, align 4
  %487 = load %struct.basic_block_def*, %struct.basic_block_def** %471, align 8
  %488 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %472, align 8
  %489 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %473, align 8
  %490 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %474, align 8
  %491 = load i32, i32* %475, align 4
  %492 = call %struct.propagate_block_info* @init_propagate_block_info(%struct.basic_block_def* %487, %struct.bitmap_head_def* %488, %struct.bitmap_head_def* %489, %struct.bitmap_head_def* %490, i32 %491)
  store %struct.propagate_block_info* %492, %struct.propagate_block_info** %476, align 8
  %493 = load i32, i32* %475, align 4
  %_ = shl i32 %493, 4
  %_1 = sub i32 0, %493
  %gen = add i32 %_1, 4
  %_2 = sub i32 %493, 4
  %gen3 = mul i32 %_2, 4
  %494 = and i32 %493, 4
  %495 = icmp ne i32 %494, 0
  br label %originalBB

originalBB4alteredBB:                             ; preds = %originalBB4, %47
  br label %originalBB4

originalBB8alteredBB:                             ; preds = %originalBB8, %68
  %496 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %497 = icmp ne %struct.bitmap_element_def* %496, null
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %87
  %498 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %499 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %498, i32 0, i32 2
  %500 = load i32, i32* %499, align 8
  %501 = load i32, i32* %25, align 4
  %502 = icmp ult i32 %500, %501
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %109
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %140
  store i32 0, i32* %26, align 4
  store i32 0, i32* %27, align 4
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %178
  %503 = load i32, i32* %26, align 4
  %504 = zext i32 %503 to i64
  %_25 = sub i64 1, %504
  %gen26 = mul i64 %_25, %504
  %_27 = sub i64 0, 1
  %gen28 = add i64 %_27, %504
  %505 = shl i64 1, %504
  store i64 %505, i64* %29, align 8
  %506 = load i64, i64* %28, align 8
  %507 = load i64, i64* %29, align 8
  %_29 = sub i64 %506, %507
  %gen30 = mul i64 %_29, %507
  %_31 = sub i64 0, %506
  %gen32 = add i64 %_31, %507
  %_33 = sub i64 %506, %507
  %gen34 = mul i64 %_33, %507
  %_35 = sub i64 %506, %507
  %gen36 = mul i64 %_35, %507
  %508 = and i64 %506, %507
  %509 = icmp ne i64 %508, 0
  br label %originalBB24

originalBB40alteredBB:                            ; preds = %originalBB40, %202
  %510 = load i64, i64* %29, align 8
  %_41 = sub i64 %510, -1
  %gen42 = mul i64 %_41, -1
  %_43 = sub i64 0, %510
  %gen44 = add i64 %_43, -1
  %_45 = sub i64 0, %510
  %gen46 = add i64 %_45, -1
  %_47 = shl i64 %510, -1
  %_48 = shl i64 %510, -1
  %_49 = shl i64 %510, -1
  %_50 = shl i64 %510, -1
  %511 = xor i64 %510, -1
  %512 = load i64, i64* %28, align 8
  %_51 = shl i64 %512, %511
  %_52 = shl i64 %512, %511
  %_53 = sub i64 0, %512
  %gen54 = add i64 %_53, %511
  %_55 = shl i64 %512, %511
  %_56 = shl i64 %512, %511
  %513 = and i64 %512, %511
  store i64 %513, i64* %28, align 8
  %514 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %515 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %514, i32 0, i32 2
  %516 = load i32, i32* %515, align 8
  %_57 = sub i32 0, %516
  %gen58 = add i32 %_57, 128
  %_59 = sub i32 0, %516
  %gen60 = add i32 %_59, 128
  %_61 = shl i32 %516, 128
  %_62 = sub i32 0, %516
  %gen63 = add i32 %_62, 128
  %_64 = sub i32 %516, 128
  %gen65 = mul i32 %_64, 128
  %517 = mul i32 %516, 128
  %518 = load i32, i32* %27, align 4
  %_66 = shl i32 %518, 64
  %_67 = shl i32 %518, 64
  %_68 = sub i32 0, %518
  %gen69 = add i32 %_68, 64
  %_70 = sub i32 %518, 64
  %gen71 = mul i32 %_70, 64
  %_72 = sub i32 %518, 64
  %gen73 = mul i32 %_72, 64
  %_74 = sub i32 0, %518
  %gen75 = add i32 %_74, 64
  %_76 = sub i32 0, %518
  %gen77 = add i32 %_76, 64
  %519 = mul i32 %518, 64
  %_78 = sub i32 0, %517
  %gen79 = add i32 %_78, %519
  %_80 = shl i32 %517, %519
  %520 = add i32 %517, %519
  %521 = load i32, i32* %26, align 4
  %_81 = sub i32 %520, %521
  %gen82 = mul i32 %_81, %521
  %522 = add i32 %520, %521
  store i32 %522, i32* %23, align 4
  %523 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %524 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %523, i32 0, i32 4
  %525 = bitcast %union.varray_data_tag* %524 to [1 x %struct.reg_info_def*]*
  %526 = load i32, i32* %23, align 4
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %525, i64 0, i64 %527
  %529 = load %struct.reg_info_def*, %struct.reg_info_def** %528, align 8
  %530 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %529, i32 0, i32 9
  store i32 -2, i32* %530, align 4
  %531 = load i64, i64* %28, align 8
  %532 = icmp eq i64 %531, 0
  br label %originalBB40

originalBB86alteredBB:                            ; preds = %originalBB86, %243
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %260
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %280
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %301
  store i32 0, i32* %27, align 4
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %318
  %533 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %24, align 8
  %534 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %533, i32 0, i32 0
  %535 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %534, align 8
  store %struct.bitmap_element_def* %535, %struct.bitmap_element_def** %24, align 8
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %339
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %356
  store i32 0, i32* %22, align 4
  %536 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %537 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %536, i32 0, i32 1
  %538 = load %struct.rtx_def*, %struct.rtx_def** %537, align 8
  store %struct.rtx_def* %538, %struct.rtx_def** %20, align 8
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %386
  %539 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %540 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %539, i32 28, %struct.rtx_def* null)
  %541 = icmp ne %struct.rtx_def* %540, null
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %406
  %542 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  %543 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  %544 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %545 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %544, i32 0, i32 1
  %546 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %545, align 8
  %547 = call i32 @bitmap_operation(%struct.bitmap_head_def* %542, %struct.bitmap_head_def* %543, %struct.bitmap_head_def* %546, i32 2)
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %452
  %548 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  call void @free_propagate_block_info(%struct.propagate_block_info* %548)
  %549 = load i32, i32* %22, align 4
  br label %originalBB122
}

declare zeroext i1 @cleanup_cfg(i32) #1

; Function Attrs: noinline nounwind uwtable
define i32 @count_or_remove_death_notes(%struct.simple_bitmap_def*, i32) #0 {
  %3 = load i32, i32* @x.27
  %4 = load i32, i32* @y.28
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca %struct.simple_bitmap_def*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.basic_block_def*, align 8
  %16 = alloca %struct.rtx_def*, align 8
  %17 = alloca %struct.rtx_def**, align 8
  %18 = alloca %struct.rtx_def*, align 8
  %19 = alloca %struct.rtx_def*, align 8
  %20 = alloca i32, align 4
  %21 = alloca %struct.rtx_def*, align 8
  store %struct.simple_bitmap_def* %0, %struct.simple_bitmap_def** %11, align 8
  store i32 %1, i32* %12, align 4
  store i32 0, i32* %14, align 4
  %22 = load i32, i32* @n_basic_blocks, align 4
  %23 = sub nsw i32 %22, 1
  store i32 %23, i32* %13, align 4
  %24 = load i32, i32* @x.27
  %25 = load i32, i32* @y.28
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %32

; <label>:32:                                     ; preds = %originalBBpart2105, %originalBBpart2
  %33 = load i32, i32* %13, align 4
  %34 = icmp sge i32 %33, 0
  br i1 %34, label %35, label %480

; <label>:35:                                     ; preds = %32
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %11, align 8
  %37 = icmp ne %struct.simple_bitmap_def* %36, null
  br i1 %37, label %38, label %53

; <label>:38:                                     ; preds = %35
  %39 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %11, align 8
  %40 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %39, i32 0, i32 3
  %41 = load i32, i32* %13, align 4
  %42 = udiv i32 %41, 64
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [1 x i64], [1 x i64]* %40, i64 0, i64 %43
  %45 = load i64, i64* %44, align 8
  %46 = load i32, i32* %13, align 4
  %47 = urem i32 %46, 64
  %48 = zext i32 %47 to i64
  %49 = lshr i64 %45, %48
  %50 = and i64 %49, 1
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %53, label %52

; <label>:52:                                     ; preds = %38
  br label %461

; <label>:53:                                     ; preds = %38, %35
  %54 = load i32, i32* @x.27
  %55 = load i32, i32* @y.28
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB4, label %originalBB4alteredBB

originalBB4:                                      ; preds = %originalBB4alteredBB, %53
  %62 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %63 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %62, i32 0, i32 4
  %64 = bitcast %union.varray_data_tag* %63 to [1 x %struct.basic_block_def*]*
  %65 = load i32, i32* %13, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %64, i64 0, i64 %66
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %67, align 8
  store %struct.basic_block_def* %68, %struct.basic_block_def** %15, align 8
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %15, align 8
  %70 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 0
  %71 = load %struct.rtx_def*, %struct.rtx_def** %70, align 8
  store %struct.rtx_def* %71, %struct.rtx_def** %16, align 8
  %72 = load i32, i32* @x.27
  %73 = load i32, i32* @y.28
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart26, label %originalBB4alteredBB

originalBBpart26:                                 ; preds = %originalBB4
  br label %80

; <label>:80:                                     ; preds = %originalBBpart292, %originalBBpart26
  %81 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %82 = bitcast %struct.rtx_def* %81 to i32*
  %83 = load i32, i32* %82, align 8
  %84 = and i32 %83, 65535
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = icmp eq i32 %88, 105
  br i1 %89, label %90, label %430

; <label>:90:                                     ; preds = %80
  %91 = load i32, i32* @x.27
  %92 = load i32, i32* @y.28
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %originalBB8alteredBB, %90
  %99 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1
  %101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %100, i64 0, i64 6
  %102 = bitcast %union.rtunion_def* %101 to %struct.rtx_def**
  store %struct.rtx_def** %102, %struct.rtx_def*** %17, align 8
  %103 = load %struct.rtx_def**, %struct.rtx_def*** %17, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %103, align 8
  store %struct.rtx_def* %104, %struct.rtx_def** %18, align 8
  %105 = load i32, i32* @x.27
  %106 = load i32, i32* @y.28
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %113

; <label>:113:                                    ; preds = %428, %originalBBpart210
  %114 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %115 = icmp ne %struct.rtx_def* %114, null
  br i1 %115, label %116, label %429

; <label>:116:                                    ; preds = %113
  %117 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %118 = bitcast %struct.rtx_def* %117 to i32*
  %119 = load i32, i32* %118, align 8
  %120 = lshr i32 %119, 16
  %121 = and i32 %120, 255
  switch i32 %121, label %421 [
    i32 1, label %122
    i32 10, label %408
  ]

; <label>:122:                                    ; preds = %116
  %123 = load i32, i32* @x.27
  %124 = load i32, i32* @y.28
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %122
  %131 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1
  %133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %132, i64 0, i64 0
  %134 = bitcast %union.rtunion_def* %133 to %struct.rtx_def**
  %135 = load %struct.rtx_def*, %struct.rtx_def** %134, align 8
  %136 = bitcast %struct.rtx_def* %135 to i32*
  %137 = load i32, i32* %136, align 8
  %138 = and i32 %137, 65535
  %139 = icmp eq i32 %138, 61
  %140 = load i32, i32* @x.27
  %141 = load i32, i32* @y.28
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart220, label %originalBB12alteredBB

originalBBpart220:                                ; preds = %originalBB12
  br i1 %139, label %148, label %407

; <label>:148:                                    ; preds = %originalBBpart220
  %149 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %150, i64 0, i64 0
  %152 = bitcast %union.rtunion_def* %151 to %struct.rtx_def**
  %153 = load %struct.rtx_def*, %struct.rtx_def** %152, align 8
  store %struct.rtx_def* %153, %struct.rtx_def** %19, align 8
  %154 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %155, i64 0, i64 0
  %157 = bitcast %union.rtunion_def* %156 to i32*
  %158 = load i32, i32* %157, align 8
  %159 = icmp uge i32 %158, 53
  br i1 %159, label %160, label %161

; <label>:160:                                    ; preds = %148
  store i32 1, i32* %20, align 4
  br label %403

; <label>:161:                                    ; preds = %148
  %162 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1
  %164 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %163, i64 0, i64 0
  %165 = bitcast %union.rtunion_def* %164 to i32*
  %166 = load i32, i32* %165, align 8
  %167 = icmp uge i32 %166, 8
  br i1 %167, label %168, label %191

; <label>:168:                                    ; preds = %161
  %169 = load i32, i32* @x.27
  %170 = load i32, i32* @y.28
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %168
  %177 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1
  %179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %178, i64 0, i64 0
  %180 = bitcast %union.rtunion_def* %179 to i32*
  %181 = load i32, i32* %180, align 8
  %182 = icmp ule i32 %181, 15
  %183 = load i32, i32* @x.27
  %184 = load i32, i32* @y.28
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %182, label %265, label %191

; <label>:191:                                    ; preds = %originalBBpart224, %161
  %192 = load i32, i32* @x.27
  %193 = load i32, i32* @y.28
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %191
  %200 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %201 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %200, i32 0, i32 1
  %202 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %201, i64 0, i64 0
  %203 = bitcast %union.rtunion_def* %202 to i32*
  %204 = load i32, i32* %203, align 8
  %205 = icmp uge i32 %204, 21
  %206 = load i32, i32* @x.27
  %207 = load i32, i32* @y.28
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBBpart229, label %originalBB26alteredBB

originalBBpart229:                                ; preds = %originalBB26
  br i1 %205, label %214, label %237

; <label>:214:                                    ; preds = %originalBBpart229
  %215 = load i32, i32* @x.27
  %216 = load i32, i32* @y.28
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %originalBB31alteredBB, %214
  %223 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %224 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %223, i32 0, i32 1
  %225 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %224, i64 0, i64 0
  %226 = bitcast %union.rtunion_def* %225 to i32*
  %227 = load i32, i32* %226, align 8
  %228 = icmp ule i32 %227, 28
  %229 = load i32, i32* @x.27
  %230 = load i32, i32* @y.28
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %228, label %265, label %237

; <label>:237:                                    ; preds = %originalBBpart233, %originalBBpart229
  %238 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %239 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %238, i32 0, i32 1
  %240 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %239, i64 0, i64 0
  %241 = bitcast %union.rtunion_def* %240 to i32*
  %242 = load i32, i32* %241, align 8
  %243 = icmp uge i32 %242, 45
  br i1 %243, label %244, label %251

; <label>:244:                                    ; preds = %237
  %245 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %246 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %245, i32 0, i32 1
  %247 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %246, i64 0, i64 0
  %248 = bitcast %union.rtunion_def* %247 to i32*
  %249 = load i32, i32* %248, align 8
  %250 = icmp ule i32 %249, 52
  br i1 %250, label %265, label %251

; <label>:251:                                    ; preds = %244, %237
  %252 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %253 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %252, i32 0, i32 1
  %254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %253, i64 0, i64 0
  %255 = bitcast %union.rtunion_def* %254 to i32*
  %256 = load i32, i32* %255, align 8
  %257 = icmp uge i32 %256, 29
  br i1 %257, label %258, label %320

; <label>:258:                                    ; preds = %251
  %259 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %260 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %259, i32 0, i32 1
  %261 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %260, i64 0, i64 0
  %262 = bitcast %union.rtunion_def* %261 to i32*
  %263 = load i32, i32* %262, align 8
  %264 = icmp ule i32 %263, 36
  br i1 %264, label %265, label %320

; <label>:265:                                    ; preds = %258, %244, %originalBBpart233, %originalBBpart224
  %266 = load i32, i32* @x.27
  %267 = load i32, i32* @y.28
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %originalBB35alteredBB, %265
  %274 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %275 = bitcast %struct.rtx_def* %274 to i32*
  %276 = load i32, i32* %275, align 8
  %277 = lshr i32 %276, 16
  %278 = and i32 %277, 255
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %279
  %281 = load i32, i32* %280, align 4
  %282 = icmp eq i32 %281, 5
  %283 = load i32, i32* @x.27
  %284 = load i32, i32* @y.28
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBBpart243, label %originalBB35alteredBB

originalBBpart243:                                ; preds = %originalBB35
  br i1 %282, label %317, label %291

; <label>:291:                                    ; preds = %originalBBpart243
  %292 = load i32, i32* @x.27
  %293 = load i32, i32* @y.28
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %originalBB45alteredBB, %291
  %300 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %301 = bitcast %struct.rtx_def* %300 to i32*
  %302 = load i32, i32* %301, align 8
  %303 = lshr i32 %302, 16
  %304 = and i32 %303, 255
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %305
  %307 = load i32, i32* %306, align 4
  %308 = icmp eq i32 %307, 6
  %309 = load i32, i32* @x.27
  %310 = load i32, i32* @y.28
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart271, label %originalBB45alteredBB

originalBBpart271:                                ; preds = %originalBB45
  br label %317

; <label>:317:                                    ; preds = %originalBBpart271, %originalBBpart243
  %318 = phi i1 [ true, %originalBBpart243 ], [ %308, %originalBBpart271 ]
  %319 = select i1 %318, i32 2, i32 1
  br label %401

; <label>:320:                                    ; preds = %258, %251
  %321 = load i32, i32* @x.27
  %322 = load i32, i32* @y.28
  %323 = sub i32 %321, 1
  %324 = mul i32 %321, %323
  %325 = urem i32 %324, 2
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %326, %327
  br i1 %328, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %originalBB73alteredBB, %320
  %329 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %330 = bitcast %struct.rtx_def* %329 to i32*
  %331 = load i32, i32* %330, align 8
  %332 = lshr i32 %331, 16
  %333 = and i32 %332, 255
  %334 = icmp eq i32 %333, 18
  %335 = load i32, i32* @x.27
  %336 = load i32, i32* @y.28
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart282, label %originalBB73alteredBB

originalBBpart282:                                ; preds = %originalBB73
  br i1 %334, label %343, label %348

; <label>:343:                                    ; preds = %originalBBpart282
  %344 = load i32, i32* @target_flags, align 4
  %345 = and i32 %344, 33554432
  %346 = icmp ne i32 %345, 0
  %347 = select i1 %346, i32 2, i32 3
  br label %399

; <label>:348:                                    ; preds = %originalBBpart282
  %349 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %350 = bitcast %struct.rtx_def* %349 to i32*
  %351 = load i32, i32* %350, align 8
  %352 = lshr i32 %351, 16
  %353 = and i32 %352, 255
  %354 = icmp eq i32 %353, 24
  br i1 %354, label %355, label %376

; <label>:355:                                    ; preds = %348
  %356 = load i32, i32* @x.27
  %357 = load i32, i32* @y.28
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %originalBB84alteredBB, %355
  %364 = load i32, i32* @target_flags, align 4
  %365 = and i32 %364, 33554432
  %366 = icmp ne i32 %365, 0
  %367 = select i1 %366, i32 4, i32 6
  %368 = load i32, i32* @x.27
  %369 = load i32, i32* @y.28
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBBpart288, label %originalBB84alteredBB

originalBBpart288:                                ; preds = %originalBB84
  br label %397

; <label>:376:                                    ; preds = %348
  %377 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %378 = bitcast %struct.rtx_def* %377 to i32*
  %379 = load i32, i32* %378, align 8
  %380 = lshr i32 %379, 16
  %381 = and i32 %380, 255
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %382
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = load i32, i32* @target_flags, align 4
  %387 = and i32 %386, 33554432
  %388 = icmp ne i32 %387, 0
  %389 = select i1 %388, i32 8, i32 4
  %390 = add nsw i32 %385, %389
  %391 = sub nsw i32 %390, 1
  %392 = load i32, i32* @target_flags, align 4
  %393 = and i32 %392, 33554432
  %394 = icmp ne i32 %393, 0
  %395 = select i1 %394, i32 8, i32 4
  %396 = sdiv i32 %391, %395
  br label %397

; <label>:397:                                    ; preds = %376, %originalBBpart288
  %398 = phi i32 [ %367, %originalBBpart288 ], [ %396, %376 ]
  br label %399

; <label>:399:                                    ; preds = %397, %343
  %400 = phi i32 [ %347, %343 ], [ %398, %397 ]
  br label %401

; <label>:401:                                    ; preds = %399, %317
  %402 = phi i32 [ %319, %317 ], [ %400, %399 ]
  store i32 %402, i32* %20, align 4
  br label %403

; <label>:403:                                    ; preds = %401, %160
  %404 = load i32, i32* %20, align 4
  %405 = load i32, i32* %14, align 4
  %406 = add nsw i32 %405, %404
  store i32 %406, i32* %14, align 4
  br label %407

; <label>:407:                                    ; preds = %403, %originalBBpart220
  br label %408

; <label>:408:                                    ; preds = %407, %116
  %409 = load i32, i32* %12, align 4
  %410 = icmp ne i32 %409, 0
  br i1 %410, label %411, label %420

; <label>:411:                                    ; preds = %408
  %412 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %413 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %412, i32 0, i32 1
  %414 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %413, i64 0, i64 1
  %415 = bitcast %union.rtunion_def* %414 to %struct.rtx_def**
  %416 = load %struct.rtx_def*, %struct.rtx_def** %415, align 8
  store %struct.rtx_def* %416, %struct.rtx_def** %21, align 8
  %417 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  call void @free_EXPR_LIST_node(%struct.rtx_def* %417)
  %418 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  store %struct.rtx_def* %418, %struct.rtx_def** %18, align 8
  %419 = load %struct.rtx_def**, %struct.rtx_def*** %17, align 8
  store %struct.rtx_def* %418, %struct.rtx_def** %419, align 8
  br label %428

; <label>:420:                                    ; preds = %408
  br label %421

; <label>:421:                                    ; preds = %420, %116
  %422 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %423 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %422, i32 0, i32 1
  %424 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %423, i64 0, i64 1
  %425 = bitcast %union.rtunion_def* %424 to %struct.rtx_def**
  store %struct.rtx_def** %425, %struct.rtx_def*** %17, align 8
  %426 = load %struct.rtx_def**, %struct.rtx_def*** %17, align 8
  %427 = load %struct.rtx_def*, %struct.rtx_def** %426, align 8
  store %struct.rtx_def* %427, %struct.rtx_def** %18, align 8
  br label %428

; <label>:428:                                    ; preds = %421, %411
  br label %113

; <label>:429:                                    ; preds = %113
  br label %430

; <label>:430:                                    ; preds = %429, %80
  %431 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %432 = load %struct.basic_block_def*, %struct.basic_block_def** %15, align 8
  %433 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %432, i32 0, i32 1
  %434 = load %struct.rtx_def*, %struct.rtx_def** %433, align 8
  %435 = icmp eq %struct.rtx_def* %431, %434
  br i1 %435, label %436, label %437

; <label>:436:                                    ; preds = %430
  br label %460

; <label>:437:                                    ; preds = %430
  br label %438

; <label>:438:                                    ; preds = %437
  %439 = load i32, i32* @x.27
  %440 = load i32, i32* @y.28
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %originalBB90alteredBB, %438
  %447 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %448 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %447, i32 0, i32 1
  %449 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %448, i64 0, i64 2
  %450 = bitcast %union.rtunion_def* %449 to %struct.rtx_def**
  %451 = load %struct.rtx_def*, %struct.rtx_def** %450, align 8
  store %struct.rtx_def* %451, %struct.rtx_def** %16, align 8
  %452 = load i32, i32* @x.27
  %453 = load i32, i32* @y.28
  %454 = sub i32 %452, 1
  %455 = mul i32 %452, %454
  %456 = urem i32 %455, 2
  %457 = icmp eq i32 %456, 0
  %458 = icmp slt i32 %453, 10
  %459 = or i1 %457, %458
  br i1 %459, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br label %80

; <label>:460:                                    ; preds = %436
  br label %461

; <label>:461:                                    ; preds = %460, %52
  %462 = load i32, i32* @x.27
  %463 = load i32, i32* @y.28
  %464 = sub i32 %462, 1
  %465 = mul i32 %462, %464
  %466 = urem i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = icmp slt i32 %463, 10
  %469 = or i1 %467, %468
  br i1 %469, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %originalBB94alteredBB, %461
  %470 = load i32, i32* %13, align 4
  %471 = add nsw i32 %470, -1
  store i32 %471, i32* %13, align 4
  %472 = load i32, i32* @x.27
  %473 = load i32, i32* @y.28
  %474 = sub i32 %472, 1
  %475 = mul i32 %472, %474
  %476 = urem i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = icmp slt i32 %473, 10
  %479 = or i1 %477, %478
  br i1 %479, label %originalBBpart2105, label %originalBB94alteredBB

originalBBpart2105:                               ; preds = %originalBB94
  br label %32

; <label>:480:                                    ; preds = %32
  %481 = load i32, i32* @x.27
  %482 = load i32, i32* @y.28
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %originalBB107alteredBB, %480
  %489 = load i32, i32* %14, align 4
  %490 = load i32, i32* @x.27
  %491 = load i32, i32* @y.28
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  ret i32 %489

originalBBalteredBB:                              ; preds = %originalBB, %2
  %498 = alloca %struct.simple_bitmap_def*, align 8
  %499 = alloca i32, align 4
  %500 = alloca i32, align 4
  %501 = alloca i32, align 4
  %502 = alloca %struct.basic_block_def*, align 8
  %503 = alloca %struct.rtx_def*, align 8
  %504 = alloca %struct.rtx_def**, align 8
  %505 = alloca %struct.rtx_def*, align 8
  %506 = alloca %struct.rtx_def*, align 8
  %507 = alloca i32, align 4
  %508 = alloca %struct.rtx_def*, align 8
  store %struct.simple_bitmap_def* %0, %struct.simple_bitmap_def** %498, align 8
  store i32 %1, i32* %499, align 4
  store i32 0, i32* %501, align 4
  %509 = load i32, i32* @n_basic_blocks, align 4
  %_ = sub i32 %509, 1
  %gen = mul i32 %_, 1
  %_1 = shl i32 %509, 1
  %_2 = shl i32 %509, 1
  %_3 = shl i32 %509, 1
  %510 = sub nsw i32 %509, 1
  store i32 %510, i32* %500, align 4
  br label %originalBB

originalBB4alteredBB:                             ; preds = %originalBB4, %53
  %511 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %512 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %511, i32 0, i32 4
  %513 = bitcast %union.varray_data_tag* %512 to [1 x %struct.basic_block_def*]*
  %514 = load i32, i32* %13, align 4
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %513, i64 0, i64 %515
  %517 = load %struct.basic_block_def*, %struct.basic_block_def** %516, align 8
  store %struct.basic_block_def* %517, %struct.basic_block_def** %15, align 8
  %518 = load %struct.basic_block_def*, %struct.basic_block_def** %15, align 8
  %519 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %518, i32 0, i32 0
  %520 = load %struct.rtx_def*, %struct.rtx_def** %519, align 8
  store %struct.rtx_def* %520, %struct.rtx_def** %16, align 8
  br label %originalBB4

originalBB8alteredBB:                             ; preds = %originalBB8, %90
  %521 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %522 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %521, i32 0, i32 1
  %523 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %522, i64 0, i64 6
  %524 = bitcast %union.rtunion_def* %523 to %struct.rtx_def**
  store %struct.rtx_def** %524, %struct.rtx_def*** %17, align 8
  %525 = load %struct.rtx_def**, %struct.rtx_def*** %17, align 8
  %526 = load %struct.rtx_def*, %struct.rtx_def** %525, align 8
  store %struct.rtx_def* %526, %struct.rtx_def** %18, align 8
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %122
  %527 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %528 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %527, i32 0, i32 1
  %529 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %528, i64 0, i64 0
  %530 = bitcast %union.rtunion_def* %529 to %struct.rtx_def**
  %531 = load %struct.rtx_def*, %struct.rtx_def** %530, align 8
  %532 = bitcast %struct.rtx_def* %531 to i32*
  %533 = load i32, i32* %532, align 8
  %_13 = shl i32 %533, 65535
  %_14 = sub i32 %533, 65535
  %gen15 = mul i32 %_14, 65535
  %_16 = sub i32 %533, 65535
  %gen17 = mul i32 %_16, 65535
  %_18 = shl i32 %533, 65535
  %534 = and i32 %533, 65535
  %535 = icmp eq i32 %534, 61
  br label %originalBB12

originalBB22alteredBB:                            ; preds = %originalBB22, %168
  %536 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %537 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %536, i32 0, i32 1
  %538 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %537, i64 0, i64 0
  %539 = bitcast %union.rtunion_def* %538 to i32*
  %540 = load i32, i32* %539, align 8
  %541 = icmp ule i32 %540, 15
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %191
  %542 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %543 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %542, i32 0, i32 1
  %544 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %543, i64 0, i64 0
  %545 = bitcast %union.rtunion_def* %544 to i32*
  %546 = load i32, i32* %545, align 8
  %547 = icmp uge i32 %546, 21
  br label %originalBB26

originalBB31alteredBB:                            ; preds = %originalBB31, %214
  %548 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %549 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %548, i32 0, i32 1
  %550 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %549, i64 0, i64 0
  %551 = bitcast %union.rtunion_def* %550 to i32*
  %552 = load i32, i32* %551, align 8
  %553 = icmp ule i32 %552, 28
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %265
  %554 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %555 = bitcast %struct.rtx_def* %554 to i32*
  %556 = load i32, i32* %555, align 8
  %_36 = sub i32 %556, 16
  %gen37 = mul i32 %_36, 16
  %_38 = shl i32 %556, 16
  %_39 = shl i32 %556, 16
  %_40 = shl i32 %556, 16
  %557 = lshr i32 %556, 16
  %_41 = shl i32 %557, 255
  %558 = and i32 %557, 255
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %559
  %561 = load i32, i32* %560, align 4
  %562 = icmp eq i32 %561, 5
  br label %originalBB35

originalBB45alteredBB:                            ; preds = %originalBB45, %291
  %563 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %564 = bitcast %struct.rtx_def* %563 to i32*
  %565 = load i32, i32* %564, align 8
  %_46 = shl i32 %565, 16
  %_47 = sub i32 %565, 16
  %gen48 = mul i32 %_47, 16
  %_49 = sub i32 0, %565
  %gen50 = add i32 %_49, 16
  %_51 = sub i32 0, %565
  %gen52 = add i32 %_51, 16
  %_53 = sub i32 0, %565
  %gen54 = add i32 %_53, 16
  %_55 = sub i32 %565, 16
  %gen56 = mul i32 %_55, 16
  %566 = lshr i32 %565, 16
  %_57 = shl i32 %566, 255
  %_58 = shl i32 %566, 255
  %_59 = sub i32 %566, 255
  %gen60 = mul i32 %_59, 255
  %_61 = sub i32 %566, 255
  %gen62 = mul i32 %_61, 255
  %_63 = shl i32 %566, 255
  %_64 = sub i32 0, %566
  %gen65 = add i32 %_64, 255
  %_66 = sub i32 0, %566
  %gen67 = add i32 %_66, 255
  %_68 = sub i32 %566, 255
  %gen69 = mul i32 %_68, 255
  %567 = and i32 %566, 255
  %568 = sext i32 %567 to i64
  %569 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %568
  %570 = load i32, i32* %569, align 4
  %571 = icmp eq i32 %570, 6
  br label %originalBB45

originalBB73alteredBB:                            ; preds = %originalBB73, %320
  %572 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %573 = bitcast %struct.rtx_def* %572 to i32*
  %574 = load i32, i32* %573, align 8
  %_74 = sub i32 %574, 16
  %gen75 = mul i32 %_74, 16
  %575 = lshr i32 %574, 16
  %_76 = shl i32 %575, 255
  %_77 = sub i32 0, %575
  %gen78 = add i32 %_77, 255
  %_79 = sub i32 0, %575
  %gen80 = add i32 %_79, 255
  %576 = and i32 %575, 255
  %577 = icmp eq i32 %576, 18
  br label %originalBB73

originalBB84alteredBB:                            ; preds = %originalBB84, %355
  %578 = load i32, i32* @target_flags, align 4
  %_85 = sub i32 0, %578
  %gen86 = add i32 %_85, 33554432
  %579 = and i32 %578, 33554432
  %580 = icmp ne i32 %579, 0
  %581 = select i1 %580, i32 4, i32 6
  br label %originalBB84

originalBB90alteredBB:                            ; preds = %originalBB90, %438
  %582 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %583 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %582, i32 0, i32 1
  %584 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %583, i64 0, i64 2
  %585 = bitcast %union.rtunion_def* %584 to %struct.rtx_def**
  %586 = load %struct.rtx_def*, %struct.rtx_def** %585, align 8
  store %struct.rtx_def* %586, %struct.rtx_def** %16, align 8
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %461
  %587 = load i32, i32* %13, align 4
  %_95 = shl i32 %587, -1
  %_96 = sub i32 0, %587
  %gen97 = add i32 %_96, -1
  %_98 = sub i32 %587, -1
  %gen99 = mul i32 %_98, -1
  %_100 = sub i32 %587, -1
  %gen101 = mul i32 %_100, -1
  %_102 = sub i32 %587, -1
  %gen103 = mul i32 %_102, -1
  %588 = add nsw i32 %587, -1
  store i32 %588, i32* %13, align 4
  br label %originalBB94

originalBB107alteredBB:                           ; preds = %originalBB107, %480
  %589 = load i32, i32* %14, align 4
  br label %originalBB107
}

; Function Attrs: noinline nounwind uwtable
define internal void @verify_local_live_at_start(%struct.bitmap_head_def*, %struct.basic_block_def*) #0 {
  %3 = alloca %struct.bitmap_head_def*, align 8
  %4 = alloca %struct.basic_block_def*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.bitmap_element_def*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store %struct.bitmap_head_def* %0, %struct.bitmap_head_def** %3, align 8
  store %struct.basic_block_def* %1, %struct.basic_block_def** %4, align 8
  %12 = load i32, i32* @reload_completed, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %54

; <label>:14:                                     ; preds = %2
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 8
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %17, align 8
  %19 = call i32 @bitmap_equal_p(%struct.bitmap_head_def* %15, %struct.bitmap_head_def* %18)
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %53, label %21

; <label>:21:                                     ; preds = %14
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %23 = icmp ne %struct._IO_FILE* %22, null
  br i1 %23, label %24, label %36

; <label>:24:                                     ; preds = %21
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 11
  %28 = load i32, i32* %27, align 8
  %29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.8, i32 0, i32 0), i32 %28)
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  call void @debug_bitmap_file(%struct._IO_FILE* %30, %struct.bitmap_head_def* %31)
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %33 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), %struct._IO_FILE* %32)
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  call void @dump_bb(%struct.basic_block_def* %34, %struct._IO_FILE* %35)
  br label %36

; <label>:36:                                     ; preds = %24, %21
  %37 = load i32, i32* @x.29
  %38 = load i32, i32* @y.30
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %36
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 583, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.verify_local_live_at_start, i32 0, i32 0)) #5
  %45 = load i32, i32* @x.29
  %46 = load i32, i32* @y.30
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable

; <label>:53:                                     ; preds = %14
  br label %364

; <label>:54:                                     ; preds = %2
  %55 = load i32, i32* @x.29
  %56 = load i32, i32* @y.30
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %54
  %63 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %64 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 8
  %67 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %66, align 8
  %68 = call i32 @bitmap_operation(%struct.bitmap_head_def* %63, %struct.bitmap_head_def* %64, %struct.bitmap_head_def* %67, i32 3)
  %69 = load i32, i32* @x.29
  %70 = load i32, i32* @y.30
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %77

; <label>:77:                                     ; preds = %originalBBpart24
  %78 = load i32, i32* @x.29
  %79 = load i32, i32* @y.30
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %77
  %86 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %87 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %86, i32 0, i32 0
  %88 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %87, align 8
  store %struct.bitmap_element_def* %88, %struct.bitmap_element_def** %6, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %89 = load i32, i32* @x.29
  %90 = load i32, i32* @y.30
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %97

; <label>:97:                                     ; preds = %originalBBpart212, %originalBBpart28
  %98 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %99 = icmp ne %struct.bitmap_element_def* %98, null
  br i1 %99, label %100, label %106

; <label>:100:                                    ; preds = %97
  %101 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %102 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %101, i32 0, i32 2
  %103 = load i32, i32* %102, align 8
  %104 = load i32, i32* %7, align 4
  %105 = icmp ult i32 %103, %104
  br label %106

; <label>:106:                                    ; preds = %100, %97
  %107 = phi i1 [ false, %97 ], [ %105, %100 ]
  br i1 %107, label %108, label %128

; <label>:108:                                    ; preds = %106
  %109 = load i32, i32* @x.29
  %110 = load i32, i32* @y.30
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %108
  %117 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %118 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %117, i32 0, i32 0
  %119 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %118, align 8
  store %struct.bitmap_element_def* %119, %struct.bitmap_element_def** %6, align 8
  %120 = load i32, i32* @x.29
  %121 = load i32, i32* @y.30
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %97

; <label>:128:                                    ; preds = %106
  %129 = load i32, i32* @x.29
  %130 = load i32, i32* @y.30
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %128
  %137 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %138 = icmp ne %struct.bitmap_element_def* %137, null
  %139 = load i32, i32* @x.29
  %140 = load i32, i32* @y.30
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %138, label %147, label %186

; <label>:147:                                    ; preds = %originalBBpart216
  %148 = load i32, i32* @x.29
  %149 = load i32, i32* @y.30
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %147
  %156 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %157 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %156, i32 0, i32 2
  %158 = load i32, i32* %157, align 8
  %159 = load i32, i32* %7, align 4
  %160 = icmp ne i32 %158, %159
  %161 = load i32, i32* @x.29
  %162 = load i32, i32* @y.30
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %160, label %169, label %186

; <label>:169:                                    ; preds = %originalBBpart220
  %170 = load i32, i32* @x.29
  %171 = load i32, i32* @y.30
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %169
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %178 = load i32, i32* @x.29
  %179 = load i32, i32* @y.30
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %186

; <label>:186:                                    ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart216
  %187 = load i32, i32* @x.29
  %188 = load i32, i32* @y.30
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %186
  %195 = load i32, i32* @x.29
  %196 = load i32, i32* @y.30
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %203

; <label>:203:                                    ; preds = %originalBBpart248, %originalBBpart228
  %204 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %205 = icmp ne %struct.bitmap_element_def* %204, null
  br i1 %205, label %206, label %362

; <label>:206:                                    ; preds = %203
  br label %207

; <label>:207:                                    ; preds = %338, %206
  %208 = load i32, i32* @x.29
  %209 = load i32, i32* @y.30
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %207
  %216 = load i32, i32* %9, align 4
  %217 = icmp ult i32 %216, 2
  %218 = load i32, i32* @x.29
  %219 = load i32, i32* @y.30
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %217, label %226, label %341

; <label>:226:                                    ; preds = %originalBBpart232
  %227 = load i32, i32* @x.29
  %228 = load i32, i32* @y.30
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %226
  %235 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %236 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %235, i32 0, i32 3
  %237 = load i32, i32* %9, align 4
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [2 x i64], [2 x i64]* %236, i64 0, i64 %238
  %240 = load i64, i64* %239, align 8
  store i64 %240, i64* %10, align 8
  %241 = load i64, i64* %10, align 8
  %242 = icmp ne i64 %241, 0
  %243 = load i32, i32* @x.29
  %244 = load i32, i32* @y.30
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %242, label %251, label %337

; <label>:251:                                    ; preds = %originalBBpart236
  br label %252

; <label>:252:                                    ; preds = %333, %251
  %253 = load i32, i32* %8, align 4
  %254 = icmp ult i32 %253, 64
  br i1 %254, label %255, label %336

; <label>:255:                                    ; preds = %252
  %256 = load i32, i32* %8, align 4
  %257 = zext i32 %256 to i64
  %258 = shl i64 1, %257
  store i64 %258, i64* %11, align 8
  %259 = load i64, i64* %10, align 8
  %260 = load i64, i64* %11, align 8
  %261 = and i64 %259, %260
  %262 = icmp ne i64 %261, 0
  br i1 %262, label %263, label %332

; <label>:263:                                    ; preds = %255
  %264 = load i64, i64* %11, align 8
  %265 = xor i64 %264, -1
  %266 = load i64, i64* %10, align 8
  %267 = and i64 %266, %265
  store i64 %267, i64* %10, align 8
  %268 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %269 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %268, i32 0, i32 2
  %270 = load i32, i32* %269, align 8
  %271 = mul i32 %270, 128
  %272 = load i32, i32* %9, align 4
  %273 = mul i32 %272, 64
  %274 = add i32 %271, %273
  %275 = load i32, i32* %8, align 4
  %276 = add i32 %274, %275
  store i32 %276, i32* %5, align 4
  %277 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %278 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %277, i32 0, i32 8
  %279 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %278, align 8
  %280 = load i32, i32* %5, align 4
  %281 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %279, i32 %280)
  %282 = icmp ne i32 %281, 0
  br i1 %282, label %283, label %309

; <label>:283:                                    ; preds = %263
  %284 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %285 = icmp ne %struct._IO_FILE* %284, null
  br i1 %285, label %286, label %292

; <label>:286:                                    ; preds = %283
  %287 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %288 = load i32, i32* %5, align 4
  %289 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %287, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i32 0, i32 0), i32 %288)
  %290 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %291 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  call void @dump_bb(%struct.basic_block_def* %290, %struct._IO_FILE* %291)
  br label %292

; <label>:292:                                    ; preds = %286, %283
  %293 = load i32, i32* @x.29
  %294 = load i32, i32* @y.30
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %292
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 604, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.verify_local_live_at_start, i32 0, i32 0)) #5
  %301 = load i32, i32* @x.29
  %302 = load i32, i32* @y.30
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  unreachable

; <label>:309:                                    ; preds = %263
  %310 = load i32, i32* %5, align 4
  %311 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  call void @verify_wide_reg(i32 %310, %struct.basic_block_def* %311)
  %312 = load i64, i64* %10, align 8
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %331

; <label>:314:                                    ; preds = %309
  %315 = load i32, i32* @x.29
  %316 = load i32, i32* @y.30
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %314
  %323 = load i32, i32* @x.29
  %324 = load i32, i32* @y.30
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %336

; <label>:331:                                    ; preds = %309
  br label %332

; <label>:332:                                    ; preds = %331, %255
  br label %333

; <label>:333:                                    ; preds = %332
  %334 = load i32, i32* %8, align 4
  %335 = add i32 %334, 1
  store i32 %335, i32* %8, align 4
  br label %252

; <label>:336:                                    ; preds = %originalBBpart244, %252
  br label %337

; <label>:337:                                    ; preds = %336, %originalBBpart236
  store i32 0, i32* %8, align 4
  br label %338

; <label>:338:                                    ; preds = %337
  %339 = load i32, i32* %9, align 4
  %340 = add i32 %339, 1
  store i32 %340, i32* %9, align 4
  br label %207

; <label>:341:                                    ; preds = %originalBBpart232
  store i32 0, i32* %9, align 4
  br label %342

; <label>:342:                                    ; preds = %341
  %343 = load i32, i32* @x.29
  %344 = load i32, i32* @y.30
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %342
  %351 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %352 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %351, i32 0, i32 0
  %353 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %352, align 8
  store %struct.bitmap_element_def* %353, %struct.bitmap_element_def** %6, align 8
  %354 = load i32, i32* @x.29
  %355 = load i32, i32* @y.30
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %203

; <label>:362:                                    ; preds = %203
  br label %363

; <label>:363:                                    ; preds = %362
  br label %364

; <label>:364:                                    ; preds = %363, %53
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %36
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 583, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.verify_local_live_at_start, i32 0, i32 0)) #5
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %54
  %365 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %366 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %367 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %368 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %367, i32 0, i32 8
  %369 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %368, align 8
  %370 = call i32 @bitmap_operation(%struct.bitmap_head_def* %365, %struct.bitmap_head_def* %366, %struct.bitmap_head_def* %369, i32 3)
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %77
  %371 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %372 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %371, i32 0, i32 0
  %373 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %372, align 8
  store %struct.bitmap_element_def* %373, %struct.bitmap_element_def** %6, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %108
  %374 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %375 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %374, i32 0, i32 0
  %376 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %375, align 8
  store %struct.bitmap_element_def* %376, %struct.bitmap_element_def** %6, align 8
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %128
  %377 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %378 = icmp ne %struct.bitmap_element_def* %377, null
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %147
  %379 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %380 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %379, i32 0, i32 2
  %381 = load i32, i32* %380, align 8
  %382 = load i32, i32* %7, align 4
  %383 = icmp ne i32 %381, %382
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %169
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %186
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %207
  %384 = load i32, i32* %9, align 4
  %385 = icmp ult i32 %384, 2
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %226
  %386 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %387 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %386, i32 0, i32 3
  %388 = load i32, i32* %9, align 4
  %389 = zext i32 %388 to i64
  %390 = getelementptr inbounds [2 x i64], [2 x i64]* %387, i64 0, i64 %389
  %391 = load i64, i64* %390, align 8
  store i64 %391, i64* %10, align 8
  %392 = load i64, i64* %10, align 8
  %393 = icmp ne i64 %392, 0
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %292
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 604, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.verify_local_live_at_start, i32 0, i32 0)) #5
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %314
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %342
  %394 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %395 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %394, i32 0, i32 0
  %396 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %395, align 8
  store %struct.bitmap_element_def* %396, %struct.bitmap_element_def** %6, align 8
  br label %originalBB46
}

declare void @bitmap_clear(%struct.bitmap_head_def*) #1

declare void @timevar_pop(i32) #1

declare void @clear_edges() #1

; Function Attrs: nounwind
declare void @free(i8*) #4

declare i32 @noop_move_p(%struct.rtx_def*) #1

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @next_real_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_ue(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @initialize_uninitialized_subregs() #0 {
  %1 = alloca %struct.rtx_def*, align 8
  %2 = alloca %struct.edge_def*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.find_regno_partial_param, align 8
  %6 = alloca %struct.basic_block_def*, align 8
  %7 = alloca %struct.bitmap_head_def*, align 8
  %8 = alloca %struct.bitmap_element_def*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.rtx_def*, align 8
  store i32 0, i32* %4, align 4
  %16 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 5), align 8
  store %struct.edge_def* %16, %struct.edge_def** %2, align 8
  br label %17

; <label>:17:                                     ; preds = %417, %0
  %18 = load %struct.edge_def*, %struct.edge_def** %2, align 8
  %19 = icmp ne %struct.edge_def* %18, null
  br i1 %19, label %20, label %421

; <label>:20:                                     ; preds = %17
  %21 = load i32, i32* @x.31
  %22 = load i32, i32* @y.32
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %20
  %29 = load %struct.edge_def*, %struct.edge_def** %2, align 8
  %30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 3
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %30, align 8
  store %struct.basic_block_def* %31, %struct.basic_block_def** %6, align 8
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %6, align 8
  %33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 8
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %33, align 8
  store %struct.bitmap_head_def* %34, %struct.bitmap_head_def** %7, align 8
  %35 = load i32, i32* @x.31
  %36 = load i32, i32* @y.32
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %43

; <label>:43:                                     ; preds = %originalBBpart2
  %44 = load i32, i32* @x.31
  %45 = load i32, i32* @y.32
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %43
  %52 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %7, align 8
  %53 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %52, i32 0, i32 0
  %54 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %53, align 8
  store %struct.bitmap_element_def* %54, %struct.bitmap_element_def** %8, align 8
  store i32 0, i32* %9, align 4
  store i32 53, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %55 = load i32, i32* @x.31
  %56 = load i32, i32* @y.32
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %63

; <label>:63:                                     ; preds = %90, %originalBBpart24
  %64 = load i32, i32* @x.31
  %65 = load i32, i32* @y.32
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %63
  %72 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %73 = icmp ne %struct.bitmap_element_def* %72, null
  %74 = load i32, i32* @x.31
  %75 = load i32, i32* @y.32
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %82, label %88

; <label>:82:                                     ; preds = %originalBBpart28
  %83 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %84 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %83, i32 0, i32 2
  %85 = load i32, i32* %84, align 8
  %86 = load i32, i32* %9, align 4
  %87 = icmp ult i32 %85, %86
  br label %88

; <label>:88:                                     ; preds = %82, %originalBBpart28
  %89 = phi i1 [ false, %originalBBpart28 ], [ %87, %82 ]
  br i1 %89, label %90, label %94

; <label>:90:                                     ; preds = %88
  %91 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %92 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %91, i32 0, i32 0
  %93 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %92, align 8
  store %struct.bitmap_element_def* %93, %struct.bitmap_element_def** %8, align 8
  br label %63

; <label>:94:                                     ; preds = %88
  %95 = load i32, i32* @x.31
  %96 = load i32, i32* @y.32
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %94
  %103 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %104 = icmp ne %struct.bitmap_element_def* %103, null
  %105 = load i32, i32* @x.31
  %106 = load i32, i32* @y.32
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %104, label %113, label %136

; <label>:113:                                    ; preds = %originalBBpart212
  %114 = load i32, i32* @x.31
  %115 = load i32, i32* @y.32
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %113
  %122 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %123 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %122, i32 0, i32 2
  %124 = load i32, i32* %123, align 8
  %125 = load i32, i32* %9, align 4
  %126 = icmp ne i32 %124, %125
  %127 = load i32, i32* @x.31
  %128 = load i32, i32* @y.32
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %126, label %135, label %136

; <label>:135:                                    ; preds = %originalBBpart216
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  br label %136

; <label>:136:                                    ; preds = %135, %originalBBpart216, %originalBBpart212
  br label %137

; <label>:137:                                    ; preds = %411, %136
  %138 = load i32, i32* @x.31
  %139 = load i32, i32* @y.32
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %137
  %146 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %147 = icmp ne %struct.bitmap_element_def* %146, null
  %148 = load i32, i32* @x.31
  %149 = load i32, i32* @y.32
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %147, label %156, label %415

; <label>:156:                                    ; preds = %originalBBpart220
  %157 = load i32, i32* @x.31
  %158 = load i32, i32* @y.32
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %156
  %165 = load i32, i32* @x.31
  %166 = load i32, i32* @y.32
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %173

; <label>:173:                                    ; preds = %originalBBpart262, %originalBBpart224
  %174 = load i32, i32* %11, align 4
  %175 = icmp ult i32 %174, 2
  br i1 %175, label %176, label %394

; <label>:176:                                    ; preds = %173
  %177 = load i32, i32* @x.31
  %178 = load i32, i32* @y.32
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %176
  %185 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %186 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %185, i32 0, i32 3
  %187 = load i32, i32* %11, align 4
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds [2 x i64], [2 x i64]* %186, i64 0, i64 %188
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %12, align 8
  %191 = load i64, i64* %12, align 8
  %192 = icmp ne i64 %191, 0
  %193 = load i32, i32* @x.31
  %194 = load i32, i32* @y.32
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %192, label %201, label %374

; <label>:201:                                    ; preds = %originalBBpart228
  %202 = load i32, i32* @x.31
  %203 = load i32, i32* @y.32
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %201
  %210 = load i32, i32* @x.31
  %211 = load i32, i32* @y.32
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %218

; <label>:218:                                    ; preds = %370, %originalBBpart232
  %219 = load i32, i32* %10, align 4
  %220 = icmp ult i32 %219, 64
  br i1 %220, label %221, label %373

; <label>:221:                                    ; preds = %218
  %222 = load i32, i32* %10, align 4
  %223 = zext i32 %222 to i64
  %224 = shl i64 1, %223
  store i64 %224, i64* %13, align 8
  %225 = load i64, i64* %12, align 8
  %226 = load i64, i64* %13, align 8
  %227 = and i64 %225, %226
  %228 = icmp ne i64 %227, 0
  br i1 %228, label %229, label %369

; <label>:229:                                    ; preds = %221
  %230 = load i64, i64* %13, align 8
  %231 = xor i64 %230, -1
  %232 = load i64, i64* %12, align 8
  %233 = and i64 %232, %231
  store i64 %233, i64* %12, align 8
  %234 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %235 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %234, i32 0, i32 2
  %236 = load i32, i32* %235, align 8
  %237 = mul i32 %236, 128
  %238 = load i32, i32* %11, align 4
  %239 = mul i32 %238, 64
  %240 = add i32 %237, %239
  %241 = load i32, i32* %10, align 4
  %242 = add i32 %240, %241
  store i32 %242, i32* %3, align 4
  %243 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %244 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %243, i32 0, i32 4
  %245 = bitcast %union.varray_data_tag* %244 to [1 x %struct.reg_info_def*]*
  %246 = load i32, i32* %3, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %245, i64 0, i64 %247
  %249 = load %struct.reg_info_def*, %struct.reg_info_def** %248, align 8
  %250 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %249, i32 0, i32 0
  %251 = load i32, i32* %250, align 4
  store i32 %251, i32* %14, align 4
  %252 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %252, %struct.rtx_def** %15, align 8
  br label %253

; <label>:253:                                    ; preds = %originalBBpart236, %229
  %254 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %255 = icmp ne %struct.rtx_def* %254, null
  br i1 %255, label %256, label %264

; <label>:256:                                    ; preds = %253
  %257 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %258 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %257, i32 0, i32 1
  %259 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %258, i64 0, i64 0
  %260 = bitcast %union.rtunion_def* %259 to i32*
  %261 = load i32, i32* %260, align 8
  %262 = load i32, i32* %14, align 4
  %263 = icmp ne i32 %261, %262
  br label %264

; <label>:264:                                    ; preds = %256, %253
  %265 = phi i1 [ false, %253 ], [ %263, %256 ]
  br i1 %265, label %266, label %289

; <label>:266:                                    ; preds = %264
  br label %267

; <label>:267:                                    ; preds = %266
  %268 = load i32, i32* @x.31
  %269 = load i32, i32* @y.32
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %267
  %276 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %277 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %276, i32 0, i32 1
  %278 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %277, i64 0, i64 2
  %279 = bitcast %union.rtunion_def* %278 to %struct.rtx_def**
  %280 = load %struct.rtx_def*, %struct.rtx_def** %279, align 8
  store %struct.rtx_def* %280, %struct.rtx_def** %15, align 8
  %281 = load i32, i32* @x.31
  %282 = load i32, i32* @y.32
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %253

; <label>:289:                                    ; preds = %264
  %290 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %291 = icmp ne %struct.rtx_def* %290, null
  br i1 %291, label %292, label %332

; <label>:292:                                    ; preds = %289
  %293 = load i32, i32* %3, align 4
  %294 = getelementptr inbounds %struct.find_regno_partial_param, %struct.find_regno_partial_param* %5, i32 0, i32 0
  store i32 %293, i32* %294, align 8
  %295 = bitcast %struct.find_regno_partial_param* %5 to i8*
  %296 = call i32 @for_each_rtx(%struct.rtx_def** %15, i32 (%struct.rtx_def**, i8*)* @find_regno_partial, i8* %295)
  %297 = getelementptr inbounds %struct.find_regno_partial_param, %struct.find_regno_partial_param* %5, i32 0, i32 1
  %298 = load %struct.rtx_def*, %struct.rtx_def** %297, align 8
  %299 = icmp ne %struct.rtx_def* %298, null
  br i1 %299, label %300, label %315

; <label>:300:                                    ; preds = %292
  %301 = getelementptr inbounds %struct.find_regno_partial_param, %struct.find_regno_partial_param* %5, i32 0, i32 1
  %302 = load %struct.rtx_def*, %struct.rtx_def** %301, align 8
  %303 = getelementptr inbounds %struct.find_regno_partial_param, %struct.find_regno_partial_param* %5, i32 0, i32 1
  %304 = load %struct.rtx_def*, %struct.rtx_def** %303, align 8
  %305 = bitcast %struct.rtx_def* %304 to i32*
  %306 = load i32, i32* %305, align 8
  %307 = lshr i32 %306, 16
  %308 = and i32 %307, 255
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %309
  %311 = load %struct.rtx_def*, %struct.rtx_def** %310, align 8
  %312 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %302, %struct.rtx_def* %311)
  store %struct.rtx_def* %312, %struct.rtx_def** %1, align 8
  %313 = load %struct.rtx_def*, %struct.rtx_def** %1, align 8
  %314 = load %struct.edge_def*, %struct.edge_def** %2, align 8
  call void @insert_insn_on_edge(%struct.rtx_def* %313, %struct.edge_def* %314)
  store i32 1, i32* %4, align 4
  br label %315

; <label>:315:                                    ; preds = %300, %292
  %316 = load i32, i32* @x.31
  %317 = load i32, i32* @y.32
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %315
  %324 = load i32, i32* @x.31
  %325 = load i32, i32* @y.32
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %332

; <label>:332:                                    ; preds = %originalBBpart240, %289
  %333 = load i64, i64* %12, align 8
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %352

; <label>:335:                                    ; preds = %332
  %336 = load i32, i32* @x.31
  %337 = load i32, i32* @y.32
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %335
  %344 = load i32, i32* @x.31
  %345 = load i32, i32* @y.32
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %373

; <label>:352:                                    ; preds = %332
  %353 = load i32, i32* @x.31
  %354 = load i32, i32* @y.32
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %352
  %361 = load i32, i32* @x.31
  %362 = load i32, i32* @y.32
  %363 = sub i32 %361, 1
  %364 = mul i32 %361, %363
  %365 = urem i32 %364, 2
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %366, %367
  br i1 %368, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %369

; <label>:369:                                    ; preds = %originalBBpart248, %221
  br label %370

; <label>:370:                                    ; preds = %369
  %371 = load i32, i32* %10, align 4
  %372 = add i32 %371, 1
  store i32 %372, i32* %10, align 4
  br label %218

; <label>:373:                                    ; preds = %originalBBpart244, %218
  br label %374

; <label>:374:                                    ; preds = %373, %originalBBpart228
  store i32 0, i32* %10, align 4
  br label %375

; <label>:375:                                    ; preds = %374
  %376 = load i32, i32* @x.31
  %377 = load i32, i32* @y.32
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %375
  %384 = load i32, i32* %11, align 4
  %385 = add i32 %384, 1
  store i32 %385, i32* %11, align 4
  %386 = load i32, i32* @x.31
  %387 = load i32, i32* @y.32
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBBpart262, label %originalBB50alteredBB

originalBBpart262:                                ; preds = %originalBB50
  br label %173

; <label>:394:                                    ; preds = %173
  %395 = load i32, i32* @x.31
  %396 = load i32, i32* @y.32
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %originalBB64alteredBB, %394
  store i32 0, i32* %11, align 4
  %403 = load i32, i32* @x.31
  %404 = load i32, i32* @y.32
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBBpart266, label %originalBB64alteredBB

originalBBpart266:                                ; preds = %originalBB64
  br label %411

; <label>:411:                                    ; preds = %originalBBpart266
  %412 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %413 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %412, i32 0, i32 0
  %414 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %413, align 8
  store %struct.bitmap_element_def* %414, %struct.bitmap_element_def** %8, align 8
  br label %137

; <label>:415:                                    ; preds = %originalBBpart220
  br label %416

; <label>:416:                                    ; preds = %415
  br label %417

; <label>:417:                                    ; preds = %416
  %418 = load %struct.edge_def*, %struct.edge_def** %2, align 8
  %419 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %418, i32 0, i32 1
  %420 = load %struct.edge_def*, %struct.edge_def** %419, align 8
  store %struct.edge_def* %420, %struct.edge_def** %2, align 8
  br label %17

; <label>:421:                                    ; preds = %17
  %422 = load i32, i32* %4, align 4
  %423 = icmp ne i32 %422, 0
  br i1 %423, label %424, label %425

; <label>:424:                                    ; preds = %421
  call void @commit_edge_insertions()
  br label %425

; <label>:425:                                    ; preds = %424, %421
  %426 = load i32, i32* %4, align 4
  ret i32 %426

originalBBalteredBB:                              ; preds = %originalBB, %20
  %427 = load %struct.edge_def*, %struct.edge_def** %2, align 8
  %428 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %427, i32 0, i32 3
  %429 = load %struct.basic_block_def*, %struct.basic_block_def** %428, align 8
  store %struct.basic_block_def* %429, %struct.basic_block_def** %6, align 8
  %430 = load %struct.basic_block_def*, %struct.basic_block_def** %6, align 8
  %431 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %430, i32 0, i32 8
  %432 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %431, align 8
  store %struct.bitmap_head_def* %432, %struct.bitmap_head_def** %7, align 8
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %43
  %433 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %7, align 8
  %434 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %433, i32 0, i32 0
  %435 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %434, align 8
  store %struct.bitmap_element_def* %435, %struct.bitmap_element_def** %8, align 8
  store i32 0, i32* %9, align 4
  store i32 53, i32* %10, align 4
  store i32 0, i32* %11, align 4
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %436 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %437 = icmp ne %struct.bitmap_element_def* %436, null
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %94
  %438 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %439 = icmp ne %struct.bitmap_element_def* %438, null
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %113
  %440 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %441 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %440, i32 0, i32 2
  %442 = load i32, i32* %441, align 8
  %443 = load i32, i32* %9, align 4
  %444 = icmp ne i32 %442, %443
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %137
  %445 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %446 = icmp ne %struct.bitmap_element_def* %445, null
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %156
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %176
  %447 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %8, align 8
  %448 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %447, i32 0, i32 3
  %449 = load i32, i32* %11, align 4
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds [2 x i64], [2 x i64]* %448, i64 0, i64 %450
  %452 = load i64, i64* %451, align 8
  store i64 %452, i64* %12, align 8
  %453 = load i64, i64* %12, align 8
  %454 = icmp ne i64 %453, 0
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %201
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %267
  %455 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %456 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %455, i32 0, i32 1
  %457 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %456, i64 0, i64 2
  %458 = bitcast %union.rtunion_def* %457 to %struct.rtx_def**
  %459 = load %struct.rtx_def*, %struct.rtx_def** %458, align 8
  store %struct.rtx_def* %459, %struct.rtx_def** %15, align 8
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %315
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %335
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %352
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %375
  %460 = load i32, i32* %11, align 4
  %_ = sub i32 %460, 1
  %gen = mul i32 %_, 1
  %_51 = sub i32 0, %460
  %gen52 = add i32 %_51, 1
  %_53 = sub i32 0, %460
  %gen54 = add i32 %_53, 1
  %_55 = sub i32 0, %460
  %gen56 = add i32 %_55, 1
  %_57 = shl i32 %460, 1
  %_58 = shl i32 %460, 1
  %_59 = sub i32 0, %460
  %gen60 = add i32 %_59, 1
  %461 = add i32 %460, 1
  store i32 %461, i32* %11, align 4
  br label %originalBB50

originalBB64alteredBB:                            ; preds = %originalBB64, %394
  store i32 0, i32* %11, align 4
  br label %originalBB64
}

declare %struct.rtx_def* @get_insns() #1

declare i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_regno_partial(%struct.rtx_def**, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.rtx_def**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.find_regno_partial_param*, align 8
  %7 = alloca i32, align 4
  store %struct.rtx_def** %0, %struct.rtx_def*** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = load i8*, i8** %5, align 8
  %9 = bitcast i8* %8 to %struct.find_regno_partial_param*
  store %struct.find_regno_partial_param* %9, %struct.find_regno_partial_param** %6, align 8
  %10 = load %struct.find_regno_partial_param*, %struct.find_regno_partial_param** %6, align 8
  %11 = getelementptr inbounds %struct.find_regno_partial_param, %struct.find_regno_partial_param* %10, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %7, align 4
  %13 = load %struct.find_regno_partial_param*, %struct.find_regno_partial_param** %6, align 8
  %14 = getelementptr inbounds %struct.find_regno_partial_param, %struct.find_regno_partial_param* %13, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %14, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %17 = icmp eq %struct.rtx_def* %16, null
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %2
  store i32 0, i32* %3, align 4
  br label %143

; <label>:19:                                     ; preds = %2
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 65535
  switch i32 %24, label %141 [
    i32 133, label %25
    i32 132, label %25
    i32 64, label %25
    i32 63, label %75
  ]

; <label>:25:                                     ; preds = %19, %19, %19
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %28, i64 0, i64 0
  %30 = bitcast %union.rtunion_def* %29 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %33 = load i32, i32* %32, align 8
  %34 = and i32 %33, 65535
  %35 = icmp eq i32 %34, 61
  br i1 %35, label %36, label %58

; <label>:36:                                     ; preds = %25
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %37, align 8
  %39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %39, i64 0, i64 0
  %41 = bitcast %union.rtunion_def* %40 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %41, align 8
  %43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %43, i64 0, i64 0
  %45 = bitcast %union.rtunion_def* %44 to i32*
  %46 = load i32, i32* %45, align 8
  %47 = load i32, i32* %7, align 4
  %48 = icmp eq i32 %46, %47
  br i1 %48, label %49, label %58

; <label>:49:                                     ; preds = %36
  %50 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %50, align 8
  %52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %52, i64 0, i64 0
  %54 = bitcast %union.rtunion_def* %53 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %54, align 8
  %56 = load %struct.find_regno_partial_param*, %struct.find_regno_partial_param** %6, align 8
  %57 = getelementptr inbounds %struct.find_regno_partial_param, %struct.find_regno_partial_param* %56, i32 0, i32 1
  store %struct.rtx_def* %55, %struct.rtx_def** %57, align 8
  store i32 1, i32* %3, align 4
  br label %143

; <label>:58:                                     ; preds = %36, %25
  %59 = load i32, i32* @x.33
  %60 = load i32, i32* @y.34
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %58
  %67 = load i32, i32* @x.33
  %68 = load i32, i32* @y.34
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %142

; <label>:75:                                     ; preds = %19
  %76 = load i32, i32* @x.33
  %77 = load i32, i32* @y.34
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %75
  %84 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %84, align 8
  %86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1
  %87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %86, i64 0, i64 0
  %88 = bitcast %union.rtunion_def* %87 to %struct.rtx_def**
  %89 = load %struct.rtx_def*, %struct.rtx_def** %88, align 8
  %90 = bitcast %struct.rtx_def* %89 to i32*
  %91 = load i32, i32* %90, align 8
  %92 = and i32 %91, 65535
  %93 = icmp eq i32 %92, 61
  %94 = load i32, i32* @x.33
  %95 = load i32, i32* @y.34
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart29, label %originalBB1alteredBB

originalBBpart29:                                 ; preds = %originalBB1
  br i1 %93, label %102, label %140

; <label>:102:                                    ; preds = %originalBBpart29
  %103 = load i32, i32* @x.33
  %104 = load i32, i32* @y.34
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %originalBB11alteredBB, %102
  %111 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %112 = load %struct.rtx_def*, %struct.rtx_def** %111, align 8
  %113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %113, i64 0, i64 0
  %115 = bitcast %union.rtunion_def* %114 to %struct.rtx_def**
  %116 = load %struct.rtx_def*, %struct.rtx_def** %115, align 8
  %117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1
  %118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %117, i64 0, i64 0
  %119 = bitcast %union.rtunion_def* %118 to i32*
  %120 = load i32, i32* %119, align 8
  %121 = load i32, i32* %7, align 4
  %122 = icmp eq i32 %120, %121
  %123 = load i32, i32* @x.33
  %124 = load i32, i32* @y.34
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br i1 %122, label %131, label %140

; <label>:131:                                    ; preds = %originalBBpart213
  %132 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %132, align 8
  %134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1
  %135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %134, i64 0, i64 0
  %136 = bitcast %union.rtunion_def* %135 to %struct.rtx_def**
  %137 = load %struct.rtx_def*, %struct.rtx_def** %136, align 8
  %138 = load %struct.find_regno_partial_param*, %struct.find_regno_partial_param** %6, align 8
  %139 = getelementptr inbounds %struct.find_regno_partial_param, %struct.find_regno_partial_param* %138, i32 0, i32 1
  store %struct.rtx_def* %137, %struct.rtx_def** %139, align 8
  store i32 1, i32* %3, align 4
  br label %143

; <label>:140:                                    ; preds = %originalBBpart213, %originalBBpart29
  br label %142

; <label>:141:                                    ; preds = %19
  br label %142

; <label>:142:                                    ; preds = %141, %140, %originalBBpart2
  store i32 0, i32* %3, align 4
  br label %143

; <label>:143:                                    ; preds = %142, %131, %49, %18
  %144 = load i32, i32* %3, align 4
  ret i32 %144

originalBBalteredBB:                              ; preds = %originalBB, %58
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %75
  %145 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %145, align 8
  %147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1
  %148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %147, i64 0, i64 0
  %149 = bitcast %union.rtunion_def* %148 to %struct.rtx_def**
  %150 = load %struct.rtx_def*, %struct.rtx_def** %149, align 8
  %151 = bitcast %struct.rtx_def* %150 to i32*
  %152 = load i32, i32* %151, align 8
  %_ = sub i32 %152, 65535
  %gen = mul i32 %_, 65535
  %_2 = shl i32 %152, 65535
  %_3 = sub i32 0, %152
  %gen4 = add i32 %_3, 65535
  %_5 = shl i32 %152, 65535
  %_6 = sub i32 %152, 65535
  %gen7 = mul i32 %_6, 65535
  %153 = and i32 %152, 65535
  %154 = icmp eq i32 %153, 61
  br label %originalBB1

originalBB11alteredBB:                            ; preds = %originalBB11, %102
  %155 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %156 = load %struct.rtx_def*, %struct.rtx_def** %155, align 8
  %157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %156, i32 0, i32 1
  %158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %157, i64 0, i64 0
  %159 = bitcast %union.rtunion_def* %158 to %struct.rtx_def**
  %160 = load %struct.rtx_def*, %struct.rtx_def** %159, align 8
  %161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1
  %162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %161, i64 0, i64 0
  %163 = bitcast %union.rtunion_def* %162 to i32*
  %164 = load i32, i32* %163, align 8
  %165 = load i32, i32* %7, align 4
  %166 = icmp eq i32 %164, %165
  br label %originalBB11
}

declare %struct.rtx_def* @gen_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @insert_insn_on_edge(%struct.rtx_def*, %struct.edge_def*) #1

declare void @commit_edge_insertions() #1

declare void @_obstack_newchunk(%struct.obstack*, i32) #1

declare i32 @max_reg_num() #1

declare void @allocate_reg_info(i64, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define %struct.rtx_def* @propagate_one_insn(%struct.propagate_block_info*, %struct.rtx_def*) #0 {
  %3 = alloca %struct.rtx_def*, align 8
  %4 = alloca %struct.propagate_block_info*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.rtx_def*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.rtx_def*, align 8
  %13 = alloca %struct.bitmap_element_def*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca %struct.rtx_def*, align 8
  %21 = alloca %struct.rtx_def*, align 8
  %22 = alloca i32, align 4
  %23 = alloca %struct.rtx_def*, align 8
  %24 = alloca %struct.rtx_def*, align 8
  %25 = alloca %struct.bitmap_element_def*, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %4, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %5, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %32, i64 0, i64 1
  %34 = bitcast %union.rtunion_def* %33 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %6, align 8
  %36 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %37 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %36, i32 0, i32 9
  %38 = load i32, i32* %37, align 8
  store i32 %38, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %39 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, 65535
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = icmp eq i32 %46, 105
  br i1 %47, label %50, label %48

; <label>:48:                                     ; preds = %2
  %49 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %3, align 8
  br label %1264

; <label>:50:                                     ; preds = %2
  %51 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %52 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %51, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %52, %struct.rtx_def** %10, align 8
  %53 = load i32, i32* %7, align 4
  %54 = and i32 %53, 16
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %99

; <label>:56:                                     ; preds = %50
  %57 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %59, i64 0, i64 3
  %61 = bitcast %union.rtunion_def* %60 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %61, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %64, i64 0, i64 6
  %66 = bitcast %union.rtunion_def* %65 to %struct.rtx_def**
  %67 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8
  %68 = call i32 @insn_dead_p(%struct.propagate_block_info* %57, %struct.rtx_def* %62, i32 0, %struct.rtx_def* %67)
  store i32 %68, i32* %8, align 4
  %69 = load i32, i32* %8, align 4
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %71, label %80

; <label>:71:                                     ; preds = %56
  %72 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %73 = icmp ne %struct.rtx_def* %72, null
  br i1 %73, label %74, label %80

; <label>:74:                                     ; preds = %71
  %75 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %78 = call i32 @libcall_dead_p(%struct.propagate_block_info* %75, %struct.rtx_def* %76, %struct.rtx_def* %77)
  %79 = icmp ne i32 %78, 0
  br label %80

; <label>:80:                                     ; preds = %74, %71, %56
  %81 = phi i1 [ false, %71 ], [ false, %56 ], [ %79, %74 ]
  %82 = load i32, i32* @x.35
  %83 = load i32, i32* @y.36
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %80
  %90 = zext i1 %81 to i32
  store i32 %90, i32* %9, align 4
  %91 = load i32, i32* @x.35
  %92 = load i32, i32* @y.36
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %99

; <label>:99:                                     ; preds = %originalBBpart2, %50
  %100 = load i32, i32* %7, align 4
  %101 = and i32 %100, 8
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %215

; <label>:103:                                    ; preds = %99
  %104 = load i32, i32* @x.35
  %105 = load i32, i32* @y.36
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %103
  %112 = load i32, i32* %8, align 4
  %113 = icmp ne i32 %112, 0
  %114 = load i32, i32* @x.35
  %115 = load i32, i32* @y.36
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %113, label %122, label %215

; <label>:122:                                    ; preds = %originalBBpart24
  %123 = load i32, i32* @reload_completed, align 4
  %124 = icmp ne i32 %123, 0
  br i1 %124, label %125, label %176

; <label>:125:                                    ; preds = %122
  %126 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %127 = bitcast %union.tree_node* %126 to %struct.tree_common*
  %128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %127, i32 0, i32 1
  %129 = load %union.tree_node*, %union.tree_node** %128, align 8
  %130 = bitcast %union.tree_node* %129 to %struct.tree_common*
  %131 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %130, i32 0, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = and i32 %132, 255
  %134 = icmp eq i32 %133, 23
  br i1 %134, label %135, label %146

; <label>:135:                                    ; preds = %125
  %136 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %137 = bitcast %union.tree_node* %136 to %struct.tree_common*
  %138 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %137, i32 0, i32 1
  %139 = load %union.tree_node*, %union.tree_node** %138, align 8
  %140 = bitcast %union.tree_node* %139 to %struct.tree_type*
  %141 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %140, i32 0, i32 6
  %142 = load i32, i32* %141, align 4
  %143 = lshr i32 %142, 17
  %144 = and i32 %143, 1
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %176, label %146

; <label>:146:                                    ; preds = %135, %125
  %147 = load i32, i32* @x.35
  %148 = load i32, i32* @y.36
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %146
  %155 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %156 = call i32 @prologue_epilogue_contains(%struct.rtx_def* %155)
  %157 = icmp ne i32 %156, 0
  %158 = load i32, i32* @x.35
  %159 = load i32, i32* @y.36
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %157, label %170, label %166

; <label>:166:                                    ; preds = %originalBBpart28
  %167 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %168 = call i32 @sibcall_epilogue_contains(%struct.rtx_def* %167)
  %169 = icmp ne i32 %168, 0
  br i1 %169, label %170, label %176

; <label>:170:                                    ; preds = %166, %originalBBpart28
  %171 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %172 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %171, i32 25, %struct.rtx_def* null)
  %173 = icmp eq %struct.rtx_def* %172, null
  br i1 %173, label %174, label %176

; <label>:174:                                    ; preds = %170
  %175 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @_fatal_insn(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i32 0, i32 0), %struct.rtx_def* %175, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 1615, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.propagate_one_insn, i32 0, i32 0)) #5
  unreachable

; <label>:176:                                    ; preds = %170, %166, %135, %122
  %177 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %178 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %180 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %179, i64 0, i64 3
  %181 = bitcast %union.rtunion_def* %180 to %struct.rtx_def**
  %182 = load %struct.rtx_def*, %struct.rtx_def** %181, align 8
  %183 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_set_regs(%struct.propagate_block_info* %177, %struct.rtx_def* %182, %struct.rtx_def* %183)
  %184 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %185 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %184, i32 0, i32 8
  store i32 0, i32* %185, align 4
  %186 = load i32, i32* %9, align 4
  %187 = icmp ne i32 %186, 0
  br i1 %187, label %188, label %192

; <label>:188:                                    ; preds = %176
  %189 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %190 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %191 = call %struct.rtx_def* @propagate_block_delete_libcall(%struct.rtx_def* %189, %struct.rtx_def* %190)
  store %struct.rtx_def* %191, %struct.rtx_def** %6, align 8
  br label %213

; <label>:192:                                    ; preds = %176
  %193 = load i32, i32* @x.35
  %194 = load i32, i32* @y.36
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %192
  %201 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %202 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %201, i32 0, i32 0
  %203 = load %struct.basic_block_def*, %struct.basic_block_def** %202, align 8
  %204 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @propagate_block_delete_insn(%struct.basic_block_def* %203, %struct.rtx_def* %204)
  %205 = load i32, i32* @x.35
  %206 = load i32, i32* @y.36
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %213

; <label>:213:                                    ; preds = %originalBBpart212, %188
  %214 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %214, %struct.rtx_def** %3, align 8
  br label %1264

; <label>:215:                                    ; preds = %originalBBpart24, %99
  %216 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %217 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %216, i32 0, i32 2
  %218 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %217, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %218)
  %219 = load i32, i32* %9, align 4
  %220 = icmp ne i32 %219, 0
  br i1 %220, label %221, label %239

; <label>:221:                                    ; preds = %215
  %222 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %223 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %224 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %223, i32 0, i32 1
  %225 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %224, i64 0, i64 3
  %226 = bitcast %union.rtunion_def* %225 to %struct.rtx_def**
  %227 = load %struct.rtx_def*, %struct.rtx_def** %226, align 8
  %228 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_set_regs(%struct.propagate_block_info* %222, %struct.rtx_def* %227, %struct.rtx_def* %228)
  %229 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1
  %231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %230, i64 0, i64 0
  %232 = bitcast %union.rtunion_def* %231 to %struct.rtx_def**
  %233 = load %struct.rtx_def*, %struct.rtx_def** %232, align 8
  store %struct.rtx_def* %233, %struct.rtx_def** %5, align 8
  %234 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %234, i32 0, i32 1
  %236 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %235, i64 0, i64 1
  %237 = bitcast %union.rtunion_def* %236 to %struct.rtx_def**
  %238 = load %struct.rtx_def*, %struct.rtx_def** %237, align 8
  store %struct.rtx_def* %238, %struct.rtx_def** %3, align 8
  br label %1264

; <label>:239:                                    ; preds = %215
  %240 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %240, i32 0, i32 1
  %242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %241, i64 0, i64 3
  %243 = bitcast %union.rtunion_def* %242 to %struct.rtx_def**
  %244 = load %struct.rtx_def*, %struct.rtx_def** %243, align 8
  %245 = bitcast %struct.rtx_def* %244 to i32*
  %246 = load i32, i32* %245, align 8
  %247 = and i32 %246, 65535
  %248 = icmp eq i32 %247, 47
  br i1 %248, label %249, label %310

; <label>:249:                                    ; preds = %239
  %250 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %251 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %250, i32 0, i32 1
  %252 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %251, i64 0, i64 3
  %253 = bitcast %union.rtunion_def* %252 to %struct.rtx_def**
  %254 = load %struct.rtx_def*, %struct.rtx_def** %253, align 8
  %255 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %254, i32 0, i32 1
  %256 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %255, i64 0, i64 0
  %257 = bitcast %union.rtunion_def* %256 to %struct.rtx_def**
  %258 = load %struct.rtx_def*, %struct.rtx_def** %257, align 8
  %259 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %260 = icmp eq %struct.rtx_def* %258, %259
  br i1 %260, label %261, label %310

; <label>:261:                                    ; preds = %249
  %262 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %262, i32 0, i32 1
  %264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %263, i64 0, i64 3
  %265 = bitcast %union.rtunion_def* %264 to %struct.rtx_def**
  %266 = load %struct.rtx_def*, %struct.rtx_def** %265, align 8
  %267 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %266, i32 0, i32 1
  %268 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %267, i64 0, i64 1
  %269 = bitcast %union.rtunion_def* %268 to %struct.rtx_def**
  %270 = load %struct.rtx_def*, %struct.rtx_def** %269, align 8
  %271 = bitcast %struct.rtx_def* %270 to i32*
  %272 = load i32, i32* %271, align 8
  %273 = and i32 %272, 65535
  %274 = icmp eq i32 %273, 75
  br i1 %274, label %275, label %310

; <label>:275:                                    ; preds = %261
  %276 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %277 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %276, i32 0, i32 1
  %278 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %277, i64 0, i64 3
  %279 = bitcast %union.rtunion_def* %278 to %struct.rtx_def**
  %280 = load %struct.rtx_def*, %struct.rtx_def** %279, align 8
  %281 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %280, i32 0, i32 1
  %282 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %281, i64 0, i64 1
  %283 = bitcast %union.rtunion_def* %282 to %struct.rtx_def**
  %284 = load %struct.rtx_def*, %struct.rtx_def** %283, align 8
  %285 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %284, i32 0, i32 1
  %286 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %285, i64 0, i64 0
  %287 = bitcast %union.rtunion_def* %286 to %struct.rtx_def**
  %288 = load %struct.rtx_def*, %struct.rtx_def** %287, align 8
  %289 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %290 = icmp eq %struct.rtx_def* %288, %289
  br i1 %290, label %291, label %310

; <label>:291:                                    ; preds = %275
  %292 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %293 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %292, i32 0, i32 1
  %294 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %293, i64 0, i64 3
  %295 = bitcast %union.rtunion_def* %294 to %struct.rtx_def**
  %296 = load %struct.rtx_def*, %struct.rtx_def** %295, align 8
  %297 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %296, i32 0, i32 1
  %298 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %297, i64 0, i64 1
  %299 = bitcast %union.rtunion_def* %298 to %struct.rtx_def**
  %300 = load %struct.rtx_def*, %struct.rtx_def** %299, align 8
  %301 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %300, i32 0, i32 1
  %302 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %301, i64 0, i64 1
  %303 = bitcast %union.rtunion_def* %302 to %struct.rtx_def**
  %304 = load %struct.rtx_def*, %struct.rtx_def** %303, align 8
  %305 = bitcast %struct.rtx_def* %304 to i32*
  %306 = load i32, i32* %305, align 8
  %307 = and i32 %306, 65535
  %308 = icmp eq i32 %307, 54
  br i1 %308, label %309, label %310

; <label>:309:                                    ; preds = %291
  br label %1040

; <label>:310:                                    ; preds = %291, %275, %261, %249, %239
  %311 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %312 = bitcast %struct.rtx_def* %311 to i32*
  %313 = load i32, i32* %312, align 8
  %314 = and i32 %313, 65535
  %315 = icmp eq i32 %314, 34
  br i1 %315, label %316, label %521

; <label>:316:                                    ; preds = %310
  %317 = load i32, i32* %7, align 4
  %318 = and i32 %317, 4
  %319 = icmp ne i32 %318, 0
  br i1 %319, label %320, label %521

; <label>:320:                                    ; preds = %316
  br label %321

; <label>:321:                                    ; preds = %320
  %322 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %323 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %322, i32 0, i32 1
  %324 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %323, align 8
  %325 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %324, i32 0, i32 0
  %326 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %325, align 8
  store %struct.bitmap_element_def* %326, %struct.bitmap_element_def** %13, align 8
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  br label %327

; <label>:327:                                    ; preds = %originalBBpart216, %321
  %328 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %329 = icmp ne %struct.bitmap_element_def* %328, null
  br i1 %329, label %330, label %336

; <label>:330:                                    ; preds = %327
  %331 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %332 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %331, i32 0, i32 2
  %333 = load i32, i32* %332, align 8
  %334 = load i32, i32* %14, align 4
  %335 = icmp ult i32 %333, %334
  br label %336

; <label>:336:                                    ; preds = %330, %327
  %337 = phi i1 [ false, %327 ], [ %335, %330 ]
  br i1 %337, label %338, label %358

; <label>:338:                                    ; preds = %336
  %339 = load i32, i32* @x.35
  %340 = load i32, i32* @y.36
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %338
  %347 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %348 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %347, i32 0, i32 0
  %349 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %348, align 8
  store %struct.bitmap_element_def* %349, %struct.bitmap_element_def** %13, align 8
  %350 = load i32, i32* @x.35
  %351 = load i32, i32* @y.36
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %327

; <label>:358:                                    ; preds = %336
  %359 = load i32, i32* @x.35
  %360 = load i32, i32* @y.36
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %358
  %367 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %368 = icmp ne %struct.bitmap_element_def* %367, null
  %369 = load i32, i32* @x.35
  %370 = load i32, i32* @y.36
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %368, label %377, label %400

; <label>:377:                                    ; preds = %originalBBpart220
  %378 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %379 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %378, i32 0, i32 2
  %380 = load i32, i32* %379, align 8
  %381 = load i32, i32* %14, align 4
  %382 = icmp ne i32 %380, %381
  br i1 %382, label %383, label %400

; <label>:383:                                    ; preds = %377
  %384 = load i32, i32* @x.35
  %385 = load i32, i32* @y.36
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %383
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  %392 = load i32, i32* @x.35
  %393 = load i32, i32* @y.36
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %400

; <label>:400:                                    ; preds = %originalBBpart224, %377, %originalBBpart220
  br label %401

; <label>:401:                                    ; preds = %499, %400
  %402 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %403 = icmp ne %struct.bitmap_element_def* %402, null
  br i1 %403, label %404, label %503

; <label>:404:                                    ; preds = %401
  br label %405

; <label>:405:                                    ; preds = %495, %404
  %406 = load i32, i32* %16, align 4
  %407 = icmp ult i32 %406, 2
  br i1 %407, label %408, label %498

; <label>:408:                                    ; preds = %405
  %409 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %410 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %409, i32 0, i32 3
  %411 = load i32, i32* %16, align 4
  %412 = zext i32 %411 to i64
  %413 = getelementptr inbounds [2 x i64], [2 x i64]* %410, i64 0, i64 %412
  %414 = load i64, i64* %413, align 8
  store i64 %414, i64* %17, align 8
  %415 = load i64, i64* %17, align 8
  %416 = icmp ne i64 %415, 0
  br i1 %416, label %417, label %494

; <label>:417:                                    ; preds = %408
  br label %418

; <label>:418:                                    ; preds = %490, %417
  %419 = load i32, i32* @x.35
  %420 = load i32, i32* @y.36
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %418
  %427 = load i32, i32* %15, align 4
  %428 = icmp ult i32 %427, 64
  %429 = load i32, i32* @x.35
  %430 = load i32, i32* @y.36
  %431 = sub i32 %429, 1
  %432 = mul i32 %429, %431
  %433 = urem i32 %432, 2
  %434 = icmp eq i32 %433, 0
  %435 = icmp slt i32 %430, 10
  %436 = or i1 %434, %435
  br i1 %436, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %428, label %437, label %493

; <label>:437:                                    ; preds = %originalBBpart228
  %438 = load i32, i32* %15, align 4
  %439 = zext i32 %438 to i64
  %440 = shl i64 1, %439
  store i64 %440, i64* %18, align 8
  %441 = load i64, i64* %17, align 8
  %442 = load i64, i64* %18, align 8
  %443 = and i64 %441, %442
  %444 = icmp ne i64 %443, 0
  br i1 %444, label %445, label %489

; <label>:445:                                    ; preds = %437
  %446 = load i64, i64* %18, align 8
  %447 = xor i64 %446, -1
  %448 = load i64, i64* %17, align 8
  %449 = and i64 %448, %447
  store i64 %449, i64* %17, align 8
  %450 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %451 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %450, i32 0, i32 2
  %452 = load i32, i32* %451, align 8
  %453 = mul i32 %452, 128
  %454 = load i32, i32* %16, align 4
  %455 = mul i32 %454, 64
  %456 = add i32 %453, %455
  %457 = load i32, i32* %15, align 4
  %458 = add i32 %456, %457
  store i32 %458, i32* %11, align 4
  %459 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %460 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %459, i32 0, i32 4
  %461 = bitcast %union.varray_data_tag* %460 to [1 x %struct.reg_info_def*]*
  %462 = load i32, i32* %11, align 4
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %461, i64 0, i64 %463
  %465 = load %struct.reg_info_def*, %struct.reg_info_def** %464, align 8
  %466 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %465, i32 0, i32 8
  %467 = load i32, i32* %466, align 4
  %468 = add nsw i32 %467, 1
  store i32 %468, i32* %466, align 4
  %469 = load i64, i64* %17, align 8
  %470 = icmp eq i64 %469, 0
  br i1 %470, label %471, label %488

; <label>:471:                                    ; preds = %445
  %472 = load i32, i32* @x.35
  %473 = load i32, i32* @y.36
  %474 = sub i32 %472, 1
  %475 = mul i32 %472, %474
  %476 = urem i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = icmp slt i32 %473, 10
  %479 = or i1 %477, %478
  br i1 %479, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %471
  %480 = load i32, i32* @x.35
  %481 = load i32, i32* @y.36
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %493

; <label>:488:                                    ; preds = %445
  br label %489

; <label>:489:                                    ; preds = %488, %437
  br label %490

; <label>:490:                                    ; preds = %489
  %491 = load i32, i32* %15, align 4
  %492 = add i32 %491, 1
  store i32 %492, i32* %15, align 4
  br label %418

; <label>:493:                                    ; preds = %originalBBpart232, %originalBBpart228
  br label %494

; <label>:494:                                    ; preds = %493, %408
  store i32 0, i32* %15, align 4
  br label %495

; <label>:495:                                    ; preds = %494
  %496 = load i32, i32* %16, align 4
  %497 = add i32 %496, 1
  store i32 %497, i32* %16, align 4
  br label %405

; <label>:498:                                    ; preds = %405
  store i32 0, i32* %16, align 4
  br label %499

; <label>:499:                                    ; preds = %498
  %500 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %501 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %500, i32 0, i32 0
  %502 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %501, align 8
  store %struct.bitmap_element_def* %502, %struct.bitmap_element_def** %13, align 8
  br label %401

; <label>:503:                                    ; preds = %401
  br label %504

; <label>:504:                                    ; preds = %503
  %505 = load i32, i32* @x.35
  %506 = load i32, i32* @y.36
  %507 = sub i32 %505, 1
  %508 = mul i32 %505, %507
  %509 = urem i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %510, %511
  br i1 %512, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %504
  %513 = load i32, i32* @x.35
  %514 = load i32, i32* @y.36
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %521

; <label>:521:                                    ; preds = %originalBBpart236, %316, %310
  %522 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %523 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %524 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %523, i32 0, i32 1
  %525 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %524, i64 0, i64 3
  %526 = bitcast %union.rtunion_def* %525 to %struct.rtx_def**
  %527 = load %struct.rtx_def*, %struct.rtx_def** %526, align 8
  %528 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_set_regs(%struct.propagate_block_info* %522, %struct.rtx_def* %527, %struct.rtx_def* %528)
  %529 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %530 = bitcast %struct.rtx_def* %529 to i32*
  %531 = load i32, i32* %530, align 8
  %532 = and i32 %531, 65535
  %533 = icmp eq i32 %532, 34
  br i1 %533, label %534, label %782

; <label>:534:                                    ; preds = %521
  store %struct.rtx_def* null, %struct.rtx_def** %21, align 8
  %535 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %536 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %535, i32 0, i32 1
  %537 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %536, i64 0, i64 3
  %538 = bitcast %union.rtunion_def* %537 to %struct.rtx_def**
  %539 = load %struct.rtx_def*, %struct.rtx_def** %538, align 8
  %540 = bitcast %struct.rtx_def* %539 to i32*
  %541 = load i32, i32* %540, align 8
  %542 = and i32 %541, 65535
  %543 = icmp eq i32 %542, 38
  br i1 %543, label %544, label %554

; <label>:544:                                    ; preds = %534
  %545 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %546 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %545, i32 0, i32 1
  %547 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %546, i64 0, i64 3
  %548 = bitcast %union.rtunion_def* %547 to %struct.rtx_def**
  %549 = load %struct.rtx_def*, %struct.rtx_def** %548, align 8
  %550 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %549, i32 0, i32 1
  %551 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %550, i64 0, i64 0
  %552 = bitcast %union.rtunion_def* %551 to %struct.rtx_def**
  %553 = load %struct.rtx_def*, %struct.rtx_def** %552, align 8
  store %struct.rtx_def* %553, %struct.rtx_def** %21, align 8
  br label %554

; <label>:554:                                    ; preds = %544, %534
  %555 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %556 = bitcast %struct.rtx_def* %555 to i32*
  %557 = load i32, i32* %556, align 8
  %558 = lshr i32 %557, 26
  %559 = and i32 %558, 1
  %560 = icmp ne i32 %559, 0
  br i1 %560, label %582, label %561

; <label>:561:                                    ; preds = %554
  %562 = load i32, i32* @x.35
  %563 = load i32, i32* @y.36
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %561
  %570 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %571 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %570, i32 0, i32 4
  call void @free_EXPR_LIST_list(%struct.rtx_def** %571)
  %572 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %573 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %572, i32 0, i32 7
  store i32 0, i32* %573, align 8
  %574 = load i32, i32* @x.35
  %575 = load i32, i32* @y.36
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %582

; <label>:582:                                    ; preds = %originalBBpart240, %554
  %583 = load i32, i32* @x.35
  %584 = load i32, i32* @y.36
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %582
  %591 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %592 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %591, i32 0, i32 1
  %593 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %592, i64 0, i64 7
  %594 = bitcast %union.rtunion_def* %593 to %struct.rtx_def**
  %595 = load %struct.rtx_def*, %struct.rtx_def** %594, align 8
  store %struct.rtx_def* %595, %struct.rtx_def** %20, align 8
  %596 = load i32, i32* @x.35
  %597 = load i32, i32* @y.36
  %598 = sub i32 %596, 1
  %599 = mul i32 %596, %598
  %600 = urem i32 %599, 2
  %601 = icmp eq i32 %600, 0
  %602 = icmp slt i32 %597, 10
  %603 = or i1 %601, %602
  br i1 %603, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %604

; <label>:604:                                    ; preds = %originalBBpart263, %originalBBpart244
  %605 = load i32, i32* @x.35
  %606 = load i32, i32* @y.36
  %607 = sub i32 %605, 1
  %608 = mul i32 %605, %607
  %609 = urem i32 %608, 2
  %610 = icmp eq i32 %609, 0
  %611 = icmp slt i32 %606, 10
  %612 = or i1 %610, %611
  br i1 %612, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %604
  %613 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %614 = icmp ne %struct.rtx_def* %613, null
  %615 = load i32, i32* @x.35
  %616 = load i32, i32* @y.36
  %617 = sub i32 %615, 1
  %618 = mul i32 %615, %617
  %619 = urem i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = icmp slt i32 %616, 10
  %622 = or i1 %620, %621
  br i1 %622, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %614, label %623, label %704

; <label>:623:                                    ; preds = %originalBBpart248
  %624 = load i32, i32* @x.35
  %625 = load i32, i32* @y.36
  %626 = sub i32 %624, 1
  %627 = mul i32 %624, %626
  %628 = urem i32 %627, 2
  %629 = icmp eq i32 %628, 0
  %630 = icmp slt i32 %625, 10
  %631 = or i1 %629, %630
  br i1 %631, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %623
  %632 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %633 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %632, i32 0, i32 1
  %634 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %633, i64 0, i64 0
  %635 = bitcast %union.rtunion_def* %634 to %struct.rtx_def**
  %636 = load %struct.rtx_def*, %struct.rtx_def** %635, align 8
  %637 = bitcast %struct.rtx_def* %636 to i32*
  %638 = load i32, i32* %637, align 8
  %639 = and i32 %638, 65535
  %640 = icmp eq i32 %639, 49
  %641 = load i32, i32* @x.35
  %642 = load i32, i32* @y.36
  %643 = sub i32 %641, 1
  %644 = mul i32 %641, %643
  %645 = urem i32 %644, 2
  %646 = icmp eq i32 %645, 0
  %647 = icmp slt i32 %642, 10
  %648 = or i1 %646, %647
  br i1 %648, label %originalBBpart255, label %originalBB50alteredBB

originalBBpart255:                                ; preds = %originalBB50
  br i1 %640, label %649, label %665

; <label>:649:                                    ; preds = %originalBBpart255
  %650 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %651 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %652 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %651, i32 0, i32 1
  %653 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %652, i64 0, i64 0
  %654 = bitcast %union.rtunion_def* %653 to %struct.rtx_def**
  %655 = load %struct.rtx_def*, %struct.rtx_def** %654, align 8
  %656 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %655, i32 0, i32 1
  %657 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %656, i64 0, i64 0
  %658 = bitcast %union.rtunion_def* %657 to %struct.rtx_def**
  %659 = load %struct.rtx_def*, %struct.rtx_def** %658, align 8
  %660 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %661 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %662 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %663 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %662, i32 0, i32 9
  %664 = load i32, i32* %663, align 8
  call void @mark_set_1(%struct.propagate_block_info* %650, i32 49, %struct.rtx_def* %659, %struct.rtx_def* %660, %struct.rtx_def* %661, i32 %664)
  br label %665

; <label>:665:                                    ; preds = %649, %originalBBpart255
  %666 = load i32, i32* @x.35
  %667 = load i32, i32* @y.36
  %668 = sub i32 %666, 1
  %669 = mul i32 %666, %668
  %670 = urem i32 %669, 2
  %671 = icmp eq i32 %670, 0
  %672 = icmp slt i32 %667, 10
  %673 = or i1 %671, %672
  br i1 %673, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %originalBB57alteredBB, %665
  %674 = load i32, i32* @x.35
  %675 = load i32, i32* @y.36
  %676 = sub i32 %674, 1
  %677 = mul i32 %674, %676
  %678 = urem i32 %677, 2
  %679 = icmp eq i32 %678, 0
  %680 = icmp slt i32 %675, 10
  %681 = or i1 %679, %680
  br i1 %681, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br label %682

; <label>:682:                                    ; preds = %originalBBpart259
  %683 = load i32, i32* @x.35
  %684 = load i32, i32* @y.36
  %685 = sub i32 %683, 1
  %686 = mul i32 %683, %685
  %687 = urem i32 %686, 2
  %688 = icmp eq i32 %687, 0
  %689 = icmp slt i32 %684, 10
  %690 = or i1 %688, %689
  br i1 %690, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %originalBB61alteredBB, %682
  %691 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %692 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %691, i32 0, i32 1
  %693 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %692, i64 0, i64 1
  %694 = bitcast %union.rtunion_def* %693 to %struct.rtx_def**
  %695 = load %struct.rtx_def*, %struct.rtx_def** %694, align 8
  store %struct.rtx_def* %695, %struct.rtx_def** %20, align 8
  %696 = load i32, i32* @x.35
  %697 = load i32, i32* @y.36
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %604

; <label>:704:                                    ; preds = %originalBBpart248
  store i32 0, i32* %19, align 4
  br label %705

; <label>:705:                                    ; preds = %778, %704
  %706 = load i32, i32* @x.35
  %707 = load i32, i32* @y.36
  %708 = sub i32 %706, 1
  %709 = mul i32 %706, %708
  %710 = urem i32 %709, 2
  %711 = icmp eq i32 %710, 0
  %712 = icmp slt i32 %707, 10
  %713 = or i1 %711, %712
  br i1 %713, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %originalBB65alteredBB, %705
  %714 = load i32, i32* %19, align 4
  %715 = icmp slt i32 %714, 53
  %716 = load i32, i32* @x.35
  %717 = load i32, i32* @y.36
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br i1 %715, label %724, label %781

; <label>:724:                                    ; preds = %originalBBpart267
  %725 = load i32, i32* @x.35
  %726 = load i32, i32* @y.36
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %originalBB69alteredBB, %724
  %733 = load i64, i64* @regs_invalidated_by_call, align 8
  %734 = load i32, i32* %19, align 4
  %735 = zext i32 %734 to i64
  %736 = shl i64 1, %735
  %737 = and i64 %733, %736
  %738 = icmp ne i64 %737, 0
  %739 = load i32, i32* @x.35
  %740 = load i32, i32* @y.36
  %741 = sub i32 %739, 1
  %742 = mul i32 %739, %741
  %743 = urem i32 %742, 2
  %744 = icmp eq i32 %743, 0
  %745 = icmp slt i32 %740, 10
  %746 = or i1 %744, %745
  br i1 %746, label %originalBBpart275, label %originalBB69alteredBB

originalBBpart275:                                ; preds = %originalBB69
  br i1 %738, label %747, label %761

; <label>:747:                                    ; preds = %originalBBpart275
  %748 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %749 = load i32, i32* %19, align 4
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i64 0, i64 %750
  %752 = load i32, i32* %751, align 4
  %753 = load i32, i32* %19, align 4
  %754 = call %struct.rtx_def* @gen_rtx_REG(i32 %752, i32 %753)
  %755 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %756 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %757 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %758 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %757, i32 0, i32 9
  %759 = load i32, i32* %758, align 8
  %760 = and i32 %759, -6
  call void @mark_set_1(%struct.propagate_block_info* %748, i32 49, %struct.rtx_def* %754, %struct.rtx_def* %755, %struct.rtx_def* %756, i32 %760)
  br label %761

; <label>:761:                                    ; preds = %747, %originalBBpart275
  %762 = load i32, i32* @x.35
  %763 = load i32, i32* @y.36
  %764 = sub i32 %762, 1
  %765 = mul i32 %762, %764
  %766 = urem i32 %765, 2
  %767 = icmp eq i32 %766, 0
  %768 = icmp slt i32 %763, 10
  %769 = or i1 %767, %768
  br i1 %769, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %originalBB77alteredBB, %761
  %770 = load i32, i32* @x.35
  %771 = load i32, i32* @y.36
  %772 = sub i32 %770, 1
  %773 = mul i32 %770, %772
  %774 = urem i32 %773, 2
  %775 = icmp eq i32 %774, 0
  %776 = icmp slt i32 %771, 10
  %777 = or i1 %775, %776
  br i1 %777, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br label %778

; <label>:778:                                    ; preds = %originalBBpart279
  %779 = load i32, i32* %19, align 4
  %780 = add nsw i32 %779, 1
  store i32 %780, i32* %19, align 4
  br label %705

; <label>:781:                                    ; preds = %originalBBpart267
  br label %782

; <label>:782:                                    ; preds = %781, %521
  %783 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %784 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %783, i32 0, i32 8
  store i32 0, i32* %784, align 4
  %785 = load i32, i32* %8, align 4
  %786 = icmp ne i32 %785, 0
  br i1 %786, label %795, label %787

; <label>:787:                                    ; preds = %782
  %788 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %789 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %790 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %789, i32 0, i32 1
  %791 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %790, i64 0, i64 3
  %792 = bitcast %union.rtunion_def* %791 to %struct.rtx_def**
  %793 = load %struct.rtx_def*, %struct.rtx_def** %792, align 8
  %794 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %788, %struct.rtx_def* %793, %struct.rtx_def* null, %struct.rtx_def* %794)
  br label %795

; <label>:795:                                    ; preds = %787, %782
  %796 = load i32, i32* %7, align 4
  %797 = and i32 %796, 128
  %798 = icmp ne i32 %797, 0
  br i1 %798, label %799, label %831

; <label>:799:                                    ; preds = %795
  %800 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %801 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %800, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %801, %struct.rtx_def** %12, align 8
  %802 = icmp ne %struct.rtx_def* %801, null
  br i1 %802, label %807, label %803

; <label>:803:                                    ; preds = %799
  %804 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %805 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %804, i32 3, %struct.rtx_def* null)
  store %struct.rtx_def* %805, %struct.rtx_def** %12, align 8
  %806 = icmp ne %struct.rtx_def* %805, null
  br i1 %806, label %807, label %831

; <label>:807:                                    ; preds = %803, %799
  %808 = load i32, i32* @x.35
  %809 = load i32, i32* @y.36
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %originalBB81alteredBB, %807
  %816 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %817 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %818 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %817, i32 0, i32 1
  %819 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %818, i64 0, i64 0
  %820 = bitcast %union.rtunion_def* %819 to %struct.rtx_def**
  %821 = load %struct.rtx_def*, %struct.rtx_def** %820, align 8
  %822 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %816, %struct.rtx_def* %821, %struct.rtx_def* null, %struct.rtx_def* %822)
  %823 = load i32, i32* @x.35
  %824 = load i32, i32* @y.36
  %825 = sub i32 %823, 1
  %826 = mul i32 %823, %825
  %827 = urem i32 %826, 2
  %828 = icmp eq i32 %827, 0
  %829 = icmp slt i32 %824, 10
  %830 = or i1 %828, %829
  br i1 %830, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %831

; <label>:831:                                    ; preds = %originalBBpart283, %803, %795
  %832 = load i32, i32* @x.35
  %833 = load i32, i32* @y.36
  %834 = sub i32 %832, 1
  %835 = mul i32 %832, %834
  %836 = urem i32 %835, 2
  %837 = icmp eq i32 %836, 0
  %838 = icmp slt i32 %833, 10
  %839 = or i1 %837, %838
  br i1 %839, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %originalBB85alteredBB, %831
  %840 = load i32, i32* %8, align 4
  %841 = icmp ne i32 %840, 0
  %842 = load i32, i32* @x.35
  %843 = load i32, i32* @y.36
  %844 = sub i32 %842, 1
  %845 = mul i32 %842, %844
  %846 = urem i32 %845, 2
  %847 = icmp eq i32 %846, 0
  %848 = icmp slt i32 %843, 10
  %849 = or i1 %847, %848
  br i1 %849, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br i1 %841, label %1039, label %850

; <label>:850:                                    ; preds = %originalBBpart287
  %851 = load i32, i32* @x.35
  %852 = load i32, i32* @y.36
  %853 = sub i32 %851, 1
  %854 = mul i32 %851, %853
  %855 = urem i32 %854, 2
  %856 = icmp eq i32 %855, 0
  %857 = icmp slt i32 %852, 10
  %858 = or i1 %856, %857
  br i1 %858, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %originalBB89alteredBB, %850
  %859 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %860 = bitcast %struct.rtx_def* %859 to i32*
  %861 = load i32, i32* %860, align 8
  %862 = and i32 %861, 65535
  %863 = icmp eq i32 %862, 34
  %864 = load i32, i32* @x.35
  %865 = load i32, i32* @y.36
  %866 = sub i32 %864, 1
  %867 = mul i32 %864, %866
  %868 = urem i32 %867, 2
  %869 = icmp eq i32 %868, 0
  %870 = icmp slt i32 %865, 10
  %871 = or i1 %869, %870
  br i1 %871, label %originalBBpart295, label %originalBB89alteredBB

originalBBpart295:                                ; preds = %originalBB89
  br i1 %863, label %872, label %1039

; <label>:872:                                    ; preds = %originalBBpart295
  store %struct.rtx_def* null, %struct.rtx_def** %24, align 8
  %873 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %874 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %873, i32 0, i32 1
  %875 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %874, i64 0, i64 3
  %876 = bitcast %union.rtunion_def* %875 to %struct.rtx_def**
  %877 = load %struct.rtx_def*, %struct.rtx_def** %876, align 8
  %878 = bitcast %struct.rtx_def* %877 to i32*
  %879 = load i32, i32* %878, align 8
  %880 = and i32 %879, 65535
  %881 = icmp eq i32 %880, 38
  br i1 %881, label %882, label %908

; <label>:882:                                    ; preds = %872
  %883 = load i32, i32* @x.35
  %884 = load i32, i32* @y.36
  %885 = sub i32 %883, 1
  %886 = mul i32 %883, %885
  %887 = urem i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = icmp slt i32 %884, 10
  %890 = or i1 %888, %889
  br i1 %890, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %originalBB97alteredBB, %882
  %891 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %892 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %891, i32 0, i32 1
  %893 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %892, i64 0, i64 3
  %894 = bitcast %union.rtunion_def* %893 to %struct.rtx_def**
  %895 = load %struct.rtx_def*, %struct.rtx_def** %894, align 8
  %896 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %895, i32 0, i32 1
  %897 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %896, i64 0, i64 0
  %898 = bitcast %union.rtunion_def* %897 to %struct.rtx_def**
  %899 = load %struct.rtx_def*, %struct.rtx_def** %898, align 8
  store %struct.rtx_def* %899, %struct.rtx_def** %24, align 8
  %900 = load i32, i32* @x.35
  %901 = load i32, i32* @y.36
  %902 = sub i32 %900, 1
  %903 = mul i32 %900, %902
  %904 = urem i32 %903, 2
  %905 = icmp eq i32 %904, 0
  %906 = icmp slt i32 %901, 10
  %907 = or i1 %905, %906
  br i1 %907, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %908

; <label>:908:                                    ; preds = %originalBBpart299, %872
  %909 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %910 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %909, i32 0, i32 1
  %911 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %910, i64 0, i64 7
  %912 = bitcast %union.rtunion_def* %911 to %struct.rtx_def**
  %913 = load %struct.rtx_def*, %struct.rtx_def** %912, align 8
  store %struct.rtx_def* %913, %struct.rtx_def** %23, align 8
  br label %914

; <label>:914:                                    ; preds = %957, %908
  %915 = load i32, i32* @x.35
  %916 = load i32, i32* @y.36
  %917 = sub i32 %915, 1
  %918 = mul i32 %915, %917
  %919 = urem i32 %918, 2
  %920 = icmp eq i32 %919, 0
  %921 = icmp slt i32 %916, 10
  %922 = or i1 %920, %921
  br i1 %922, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %originalBB101alteredBB, %914
  %923 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %924 = icmp ne %struct.rtx_def* %923, null
  %925 = load i32, i32* @x.35
  %926 = load i32, i32* @y.36
  %927 = sub i32 %925, 1
  %928 = mul i32 %925, %927
  %929 = urem i32 %928, 2
  %930 = icmp eq i32 %929, 0
  %931 = icmp slt i32 %926, 10
  %932 = or i1 %930, %931
  br i1 %932, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br i1 %924, label %933, label %963

; <label>:933:                                    ; preds = %originalBBpart2103
  %934 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %935 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %934, i32 0, i32 1
  %936 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %935, i64 0, i64 0
  %937 = bitcast %union.rtunion_def* %936 to %struct.rtx_def**
  %938 = load %struct.rtx_def*, %struct.rtx_def** %937, align 8
  %939 = bitcast %struct.rtx_def* %938 to i32*
  %940 = load i32, i32* %939, align 8
  %941 = and i32 %940, 65535
  %942 = icmp eq i32 %941, 48
  br i1 %942, label %943, label %956

; <label>:943:                                    ; preds = %933
  %944 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %945 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %946 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %945, i32 0, i32 1
  %947 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %946, i64 0, i64 0
  %948 = bitcast %union.rtunion_def* %947 to %struct.rtx_def**
  %949 = load %struct.rtx_def*, %struct.rtx_def** %948, align 8
  %950 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %949, i32 0, i32 1
  %951 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %950, i64 0, i64 0
  %952 = bitcast %union.rtunion_def* %951 to %struct.rtx_def**
  %953 = load %struct.rtx_def*, %struct.rtx_def** %952, align 8
  %954 = load %struct.rtx_def*, %struct.rtx_def** %24, align 8
  %955 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %944, %struct.rtx_def* %953, %struct.rtx_def* %954, %struct.rtx_def* %955)
  br label %956

; <label>:956:                                    ; preds = %943, %933
  br label %957

; <label>:957:                                    ; preds = %956
  %958 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %959 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %958, i32 0, i32 1
  %960 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %959, i64 0, i64 1
  %961 = bitcast %union.rtunion_def* %960 to %struct.rtx_def**
  %962 = load %struct.rtx_def*, %struct.rtx_def** %961, align 8
  store %struct.rtx_def* %962, %struct.rtx_def** %23, align 8
  br label %914

; <label>:963:                                    ; preds = %originalBBpart2103
  %964 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %965 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %964, i32 0, i32 1
  %966 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %965, align 8
  call void @bitmap_set_bit(%struct.bitmap_head_def* %966, i32 7)
  store i32 0, i32* %22, align 4
  br label %967

; <label>:967:                                    ; preds = %originalBBpart2123, %963
  %968 = load i32, i32* %22, align 4
  %969 = icmp slt i32 %968, 53
  br i1 %969, label %970, label %1038

; <label>:970:                                    ; preds = %967
  %971 = load i32, i32* @x.35
  %972 = load i32, i32* @y.36
  %973 = sub i32 %971, 1
  %974 = mul i32 %971, %973
  %975 = urem i32 %974, 2
  %976 = icmp eq i32 %975, 0
  %977 = icmp slt i32 %972, 10
  %978 = or i1 %976, %977
  br i1 %978, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %originalBB105alteredBB, %970
  %979 = load i32, i32* %22, align 4
  %980 = sext i32 %979 to i64
  %981 = getelementptr inbounds [53 x i8], [53 x i8]* @global_regs, i64 0, i64 %980
  %982 = load i8, i8* %981, align 1
  %983 = icmp ne i8 %982, 0
  %984 = load i32, i32* @x.35
  %985 = load i32, i32* @y.36
  %986 = sub i32 %984, 1
  %987 = mul i32 %984, %986
  %988 = urem i32 %987, 2
  %989 = icmp eq i32 %988, 0
  %990 = icmp slt i32 %985, 10
  %991 = or i1 %989, %990
  br i1 %991, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %983, label %992, label %1018

; <label>:992:                                    ; preds = %originalBBpart2107
  %993 = load i32, i32* @x.35
  %994 = load i32, i32* @y.36
  %995 = sub i32 %993, 1
  %996 = mul i32 %993, %995
  %997 = urem i32 %996, 2
  %998 = icmp eq i32 %997, 0
  %999 = icmp slt i32 %994, 10
  %1000 = or i1 %998, %999
  br i1 %1000, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %originalBB109alteredBB, %992
  %1001 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %1002 = load i32, i32* %22, align 4
  %1003 = sext i32 %1002 to i64
  %1004 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i64 0, i64 %1003
  %1005 = load i32, i32* %1004, align 4
  %1006 = load i32, i32* %22, align 4
  %1007 = call %struct.rtx_def* @gen_rtx_REG(i32 %1005, i32 %1006)
  %1008 = load %struct.rtx_def*, %struct.rtx_def** %24, align 8
  %1009 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_used_reg(%struct.propagate_block_info* %1001, %struct.rtx_def* %1007, %struct.rtx_def* %1008, %struct.rtx_def* %1009)
  %1010 = load i32, i32* @x.35
  %1011 = load i32, i32* @y.36
  %1012 = sub i32 %1010, 1
  %1013 = mul i32 %1010, %1012
  %1014 = urem i32 %1013, 2
  %1015 = icmp eq i32 %1014, 0
  %1016 = icmp slt i32 %1011, 10
  %1017 = or i1 %1015, %1016
  br i1 %1017, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %1018

; <label>:1018:                                   ; preds = %originalBBpart2111, %originalBBpart2107
  br label %1019

; <label>:1019:                                   ; preds = %1018
  %1020 = load i32, i32* @x.35
  %1021 = load i32, i32* @y.36
  %1022 = sub i32 %1020, 1
  %1023 = mul i32 %1020, %1022
  %1024 = urem i32 %1023, 2
  %1025 = icmp eq i32 %1024, 0
  %1026 = icmp slt i32 %1021, 10
  %1027 = or i1 %1025, %1026
  br i1 %1027, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %originalBB113alteredBB, %1019
  %1028 = load i32, i32* %22, align 4
  %1029 = add nsw i32 %1028, 1
  store i32 %1029, i32* %22, align 4
  %1030 = load i32, i32* @x.35
  %1031 = load i32, i32* @y.36
  %1032 = sub i32 %1030, 1
  %1033 = mul i32 %1030, %1032
  %1034 = urem i32 %1033, 2
  %1035 = icmp eq i32 %1034, 0
  %1036 = icmp slt i32 %1031, 10
  %1037 = or i1 %1035, %1036
  br i1 %1037, label %originalBBpart2123, label %originalBB113alteredBB

originalBBpart2123:                               ; preds = %originalBB113
  br label %967

; <label>:1038:                                   ; preds = %967
  br label %1039

; <label>:1039:                                   ; preds = %1038, %originalBBpart295, %originalBBpart287
  br label %1040

; <label>:1040:                                   ; preds = %1039, %309
  br label %1041

; <label>:1041:                                   ; preds = %1040
  %1042 = load i32, i32* %7, align 4
  %1043 = and i32 %1042, 4
  %1044 = icmp ne i32 %1043, 0
  br i1 %1044, label %1045, label %1262

; <label>:1045:                                   ; preds = %1041
  br label %1046

; <label>:1046:                                   ; preds = %1045
  %1047 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %1048 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1047, i32 0, i32 1
  %1049 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1048, align 8
  %1050 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %1049, i32 0, i32 0
  %1051 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %1050, align 8
  store %struct.bitmap_element_def* %1051, %struct.bitmap_element_def** %25, align 8
  store i32 0, i32* %26, align 4
  store i32 0, i32* %27, align 4
  store i32 0, i32* %28, align 4
  br label %1052

; <label>:1052:                                   ; preds = %1079, %1046
  %1053 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1054 = icmp ne %struct.bitmap_element_def* %1053, null
  br i1 %1054, label %1055, label %1061

; <label>:1055:                                   ; preds = %1052
  %1056 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1057 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1056, i32 0, i32 2
  %1058 = load i32, i32* %1057, align 8
  %1059 = load i32, i32* %26, align 4
  %1060 = icmp ult i32 %1058, %1059
  br label %1061

; <label>:1061:                                   ; preds = %1055, %1052
  %1062 = phi i1 [ false, %1052 ], [ %1060, %1055 ]
  %1063 = load i32, i32* @x.35
  %1064 = load i32, i32* @y.36
  %1065 = sub i32 %1063, 1
  %1066 = mul i32 %1063, %1065
  %1067 = urem i32 %1066, 2
  %1068 = icmp eq i32 %1067, 0
  %1069 = icmp slt i32 %1064, 10
  %1070 = or i1 %1068, %1069
  br i1 %1070, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %originalBB125alteredBB, %1061
  %1071 = load i32, i32* @x.35
  %1072 = load i32, i32* @y.36
  %1073 = sub i32 %1071, 1
  %1074 = mul i32 %1071, %1073
  %1075 = urem i32 %1074, 2
  %1076 = icmp eq i32 %1075, 0
  %1077 = icmp slt i32 %1072, 10
  %1078 = or i1 %1076, %1077
  br i1 %1078, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  br i1 %1062, label %1079, label %1083

; <label>:1079:                                   ; preds = %originalBBpart2127
  %1080 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1081 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1080, i32 0, i32 0
  %1082 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %1081, align 8
  store %struct.bitmap_element_def* %1082, %struct.bitmap_element_def** %25, align 8
  br label %1052

; <label>:1083:                                   ; preds = %originalBBpart2127
  %1084 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1085 = icmp ne %struct.bitmap_element_def* %1084, null
  br i1 %1085, label %1086, label %1109

; <label>:1086:                                   ; preds = %1083
  %1087 = load i32, i32* @x.35
  %1088 = load i32, i32* @y.36
  %1089 = sub i32 %1087, 1
  %1090 = mul i32 %1087, %1089
  %1091 = urem i32 %1090, 2
  %1092 = icmp eq i32 %1091, 0
  %1093 = icmp slt i32 %1088, 10
  %1094 = or i1 %1092, %1093
  br i1 %1094, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %originalBB129alteredBB, %1086
  %1095 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1096 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1095, i32 0, i32 2
  %1097 = load i32, i32* %1096, align 8
  %1098 = load i32, i32* %26, align 4
  %1099 = icmp ne i32 %1097, %1098
  %1100 = load i32, i32* @x.35
  %1101 = load i32, i32* @y.36
  %1102 = sub i32 %1100, 1
  %1103 = mul i32 %1100, %1102
  %1104 = urem i32 %1103, 2
  %1105 = icmp eq i32 %1104, 0
  %1106 = icmp slt i32 %1101, 10
  %1107 = or i1 %1105, %1106
  br i1 %1107, label %originalBBpart2131, label %originalBB129alteredBB

originalBBpart2131:                               ; preds = %originalBB129
  br i1 %1099, label %1108, label %1109

; <label>:1108:                                   ; preds = %originalBBpart2131
  store i32 0, i32* %27, align 4
  store i32 0, i32* %28, align 4
  br label %1109

; <label>:1109:                                   ; preds = %1108, %originalBBpart2131, %1083
  br label %1110

; <label>:1110:                                   ; preds = %1240, %1109
  %1111 = load i32, i32* @x.35
  %1112 = load i32, i32* @y.36
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %originalBB133alteredBB, %1110
  %1119 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1120 = icmp ne %struct.bitmap_element_def* %1119, null
  %1121 = load i32, i32* @x.35
  %1122 = load i32, i32* @y.36
  %1123 = sub i32 %1121, 1
  %1124 = mul i32 %1121, %1123
  %1125 = urem i32 %1124, 2
  %1126 = icmp eq i32 %1125, 0
  %1127 = icmp slt i32 %1122, 10
  %1128 = or i1 %1126, %1127
  br i1 %1128, label %originalBBpart2135, label %originalBB133alteredBB

originalBBpart2135:                               ; preds = %originalBB133
  br i1 %1120, label %1129, label %1244

; <label>:1129:                                   ; preds = %originalBBpart2135
  br label %1130

; <label>:1130:                                   ; preds = %originalBBpart2177, %1129
  %1131 = load i32, i32* %28, align 4
  %1132 = icmp ult i32 %1131, 2
  br i1 %1132, label %1133, label %1239

; <label>:1133:                                   ; preds = %1130
  %1134 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1135 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1134, i32 0, i32 3
  %1136 = load i32, i32* %28, align 4
  %1137 = zext i32 %1136 to i64
  %1138 = getelementptr inbounds [2 x i64], [2 x i64]* %1135, i64 0, i64 %1137
  %1139 = load i64, i64* %1138, align 8
  store i64 %1139, i64* %29, align 8
  %1140 = load i64, i64* %29, align 8
  %1141 = icmp ne i64 %1140, 0
  br i1 %1141, label %1142, label %1219

; <label>:1142:                                   ; preds = %1133
  br label %1143

; <label>:1143:                                   ; preds = %originalBBpart2170, %1142
  %1144 = load i32, i32* %27, align 4
  %1145 = icmp ult i32 %1144, 64
  br i1 %1145, label %1146, label %1218

; <label>:1146:                                   ; preds = %1143
  %1147 = load i32, i32* @x.35
  %1148 = load i32, i32* @y.36
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %originalBB137alteredBB, %1146
  %1155 = load i32, i32* %27, align 4
  %1156 = zext i32 %1155 to i64
  %1157 = shl i64 1, %1156
  store i64 %1157, i64* %30, align 8
  %1158 = load i64, i64* %29, align 8
  %1159 = load i64, i64* %30, align 8
  %1160 = and i64 %1158, %1159
  %1161 = icmp ne i64 %1160, 0
  %1162 = load i32, i32* @x.35
  %1163 = load i32, i32* @y.36
  %1164 = sub i32 %1162, 1
  %1165 = mul i32 %1162, %1164
  %1166 = urem i32 %1165, 2
  %1167 = icmp eq i32 %1166, 0
  %1168 = icmp slt i32 %1163, 10
  %1169 = or i1 %1167, %1168
  br i1 %1169, label %originalBBpart2157, label %originalBB137alteredBB

originalBBpart2157:                               ; preds = %originalBB137
  br i1 %1161, label %1170, label %1198

; <label>:1170:                                   ; preds = %originalBBpart2157
  %1171 = load i64, i64* %30, align 8
  %1172 = xor i64 %1171, -1
  %1173 = load i64, i64* %29, align 8
  %1174 = and i64 %1173, %1172
  store i64 %1174, i64* %29, align 8
  %1175 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1176 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1175, i32 0, i32 2
  %1177 = load i32, i32* %1176, align 8
  %1178 = mul i32 %1177, 128
  %1179 = load i32, i32* %28, align 4
  %1180 = mul i32 %1179, 64
  %1181 = add i32 %1178, %1180
  %1182 = load i32, i32* %27, align 4
  %1183 = add i32 %1181, %1182
  store i32 %1183, i32* %11, align 4
  %1184 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1185 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1184, i32 0, i32 4
  %1186 = bitcast %union.varray_data_tag* %1185 to [1 x %struct.reg_info_def*]*
  %1187 = load i32, i32* %11, align 4
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1186, i64 0, i64 %1188
  %1190 = load %struct.reg_info_def*, %struct.reg_info_def** %1189, align 8
  %1191 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1190, i32 0, i32 7
  %1192 = load i32, i32* %1191, align 4
  %1193 = add nsw i32 %1192, 1
  store i32 %1193, i32* %1191, align 4
  %1194 = load i64, i64* %29, align 8
  %1195 = icmp eq i64 %1194, 0
  br i1 %1195, label %1196, label %1197

; <label>:1196:                                   ; preds = %1170
  br label %1218

; <label>:1197:                                   ; preds = %1170
  br label %1198

; <label>:1198:                                   ; preds = %1197, %originalBBpart2157
  br label %1199

; <label>:1199:                                   ; preds = %1198
  %1200 = load i32, i32* @x.35
  %1201 = load i32, i32* @y.36
  %1202 = sub i32 %1200, 1
  %1203 = mul i32 %1200, %1202
  %1204 = urem i32 %1203, 2
  %1205 = icmp eq i32 %1204, 0
  %1206 = icmp slt i32 %1201, 10
  %1207 = or i1 %1205, %1206
  br i1 %1207, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %originalBB159alteredBB, %1199
  %1208 = load i32, i32* %27, align 4
  %1209 = add i32 %1208, 1
  store i32 %1209, i32* %27, align 4
  %1210 = load i32, i32* @x.35
  %1211 = load i32, i32* @y.36
  %1212 = sub i32 %1210, 1
  %1213 = mul i32 %1210, %1212
  %1214 = urem i32 %1213, 2
  %1215 = icmp eq i32 %1214, 0
  %1216 = icmp slt i32 %1211, 10
  %1217 = or i1 %1215, %1216
  br i1 %1217, label %originalBBpart2170, label %originalBB159alteredBB

originalBBpart2170:                               ; preds = %originalBB159
  br label %1143

; <label>:1218:                                   ; preds = %1196, %1143
  br label %1219

; <label>:1219:                                   ; preds = %1218, %1133
  store i32 0, i32* %27, align 4
  br label %1220

; <label>:1220:                                   ; preds = %1219
  %1221 = load i32, i32* @x.35
  %1222 = load i32, i32* @y.36
  %1223 = sub i32 %1221, 1
  %1224 = mul i32 %1221, %1223
  %1225 = urem i32 %1224, 2
  %1226 = icmp eq i32 %1225, 0
  %1227 = icmp slt i32 %1222, 10
  %1228 = or i1 %1226, %1227
  br i1 %1228, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %originalBB172alteredBB, %1220
  %1229 = load i32, i32* %28, align 4
  %1230 = add i32 %1229, 1
  store i32 %1230, i32* %28, align 4
  %1231 = load i32, i32* @x.35
  %1232 = load i32, i32* @y.36
  %1233 = sub i32 %1231, 1
  %1234 = mul i32 %1231, %1233
  %1235 = urem i32 %1234, 2
  %1236 = icmp eq i32 %1235, 0
  %1237 = icmp slt i32 %1232, 10
  %1238 = or i1 %1236, %1237
  br i1 %1238, label %originalBBpart2177, label %originalBB172alteredBB

originalBBpart2177:                               ; preds = %originalBB172
  br label %1130

; <label>:1239:                                   ; preds = %1130
  store i32 0, i32* %28, align 4
  br label %1240

; <label>:1240:                                   ; preds = %1239
  %1241 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1242 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1241, i32 0, i32 0
  %1243 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %1242, align 8
  store %struct.bitmap_element_def* %1243, %struct.bitmap_element_def** %25, align 8
  br label %1110

; <label>:1244:                                   ; preds = %originalBBpart2135
  br label %1245

; <label>:1245:                                   ; preds = %1244
  %1246 = load i32, i32* @x.35
  %1247 = load i32, i32* @y.36
  %1248 = sub i32 %1246, 1
  %1249 = mul i32 %1246, %1248
  %1250 = urem i32 %1249, 2
  %1251 = icmp eq i32 %1250, 0
  %1252 = icmp slt i32 %1247, 10
  %1253 = or i1 %1251, %1252
  br i1 %1253, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %originalBB179alteredBB, %1245
  %1254 = load i32, i32* @x.35
  %1255 = load i32, i32* @y.36
  %1256 = sub i32 %1254, 1
  %1257 = mul i32 %1254, %1256
  %1258 = urem i32 %1257, 2
  %1259 = icmp eq i32 %1258, 0
  %1260 = icmp slt i32 %1255, 10
  %1261 = or i1 %1259, %1260
  br i1 %1261, label %originalBBpart2181, label %originalBB179alteredBB

originalBBpart2181:                               ; preds = %originalBB179
  br label %1262

; <label>:1262:                                   ; preds = %originalBBpart2181, %1041
  %1263 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %1263, %struct.rtx_def** %3, align 8
  br label %1264

; <label>:1264:                                   ; preds = %1262, %221, %213, %48
  %1265 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  ret %struct.rtx_def* %1265

originalBBalteredBB:                              ; preds = %originalBB, %80
  %1266 = zext i1 %81 to i32
  store i32 %1266, i32* %9, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %103
  %1267 = load i32, i32* %8, align 4
  %1268 = icmp ne i32 %1267, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %146
  %1269 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %1270 = call i32 @prologue_epilogue_contains(%struct.rtx_def* %1269)
  %1271 = icmp ne i32 %1270, 0
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %192
  %1272 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %1273 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1272, i32 0, i32 0
  %1274 = load %struct.basic_block_def*, %struct.basic_block_def** %1273, align 8
  %1275 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @propagate_block_delete_insn(%struct.basic_block_def* %1274, %struct.rtx_def* %1275)
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %338
  %1276 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %1277 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1276, i32 0, i32 0
  %1278 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %1277, align 8
  store %struct.bitmap_element_def* %1278, %struct.bitmap_element_def** %13, align 8
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %358
  %1279 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %13, align 8
  %1280 = icmp ne %struct.bitmap_element_def* %1279, null
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %383
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %418
  %1281 = load i32, i32* %15, align 4
  %1282 = icmp ult i32 %1281, 64
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %471
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %504
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %561
  %1283 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %1284 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1283, i32 0, i32 4
  call void @free_EXPR_LIST_list(%struct.rtx_def** %1284)
  %1285 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %1286 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1285, i32 0, i32 7
  store i32 0, i32* %1286, align 8
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %582
  %1287 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %1288 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1287, i32 0, i32 1
  %1289 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1288, i64 0, i64 7
  %1290 = bitcast %union.rtunion_def* %1289 to %struct.rtx_def**
  %1291 = load %struct.rtx_def*, %struct.rtx_def** %1290, align 8
  store %struct.rtx_def* %1291, %struct.rtx_def** %20, align 8
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %604
  %1292 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %1293 = icmp ne %struct.rtx_def* %1292, null
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %623
  %1294 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %1295 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1294, i32 0, i32 1
  %1296 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1295, i64 0, i64 0
  %1297 = bitcast %union.rtunion_def* %1296 to %struct.rtx_def**
  %1298 = load %struct.rtx_def*, %struct.rtx_def** %1297, align 8
  %1299 = bitcast %struct.rtx_def* %1298 to i32*
  %1300 = load i32, i32* %1299, align 8
  %_ = sub i32 0, %1300
  %gen = add i32 %_, 65535
  %_51 = sub i32 0, %1300
  %gen52 = add i32 %_51, 65535
  %_53 = shl i32 %1300, 65535
  %1301 = and i32 %1300, 65535
  %1302 = icmp eq i32 %1301, 49
  br label %originalBB50

originalBB57alteredBB:                            ; preds = %originalBB57, %665
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %682
  %1303 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %1304 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1303, i32 0, i32 1
  %1305 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1304, i64 0, i64 1
  %1306 = bitcast %union.rtunion_def* %1305 to %struct.rtx_def**
  %1307 = load %struct.rtx_def*, %struct.rtx_def** %1306, align 8
  store %struct.rtx_def* %1307, %struct.rtx_def** %20, align 8
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %705
  %1308 = load i32, i32* %19, align 4
  %1309 = icmp slt i32 %1308, 53
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %724
  %1310 = load i64, i64* @regs_invalidated_by_call, align 8
  %1311 = load i32, i32* %19, align 4
  %1312 = zext i32 %1311 to i64
  %_70 = shl i64 1, %1312
  %_71 = shl i64 1, %1312
  %1313 = shl i64 1, %1312
  %_72 = sub i64 0, %1310
  %gen73 = add i64 %_72, %1313
  %1314 = and i64 %1310, %1313
  %1315 = icmp ne i64 %1314, 0
  br label %originalBB69

originalBB77alteredBB:                            ; preds = %originalBB77, %761
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %807
  %1316 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %1317 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %1318 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1317, i32 0, i32 1
  %1319 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1318, i64 0, i64 0
  %1320 = bitcast %union.rtunion_def* %1319 to %struct.rtx_def**
  %1321 = load %struct.rtx_def*, %struct.rtx_def** %1320, align 8
  %1322 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %1316, %struct.rtx_def* %1321, %struct.rtx_def* null, %struct.rtx_def* %1322)
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %831
  %1323 = load i32, i32* %8, align 4
  %1324 = icmp ne i32 %1323, 0
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %850
  %1325 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %1326 = bitcast %struct.rtx_def* %1325 to i32*
  %1327 = load i32, i32* %1326, align 8
  %_90 = sub i32 0, %1327
  %gen91 = add i32 %_90, 65535
  %_92 = sub i32 %1327, 65535
  %gen93 = mul i32 %_92, 65535
  %1328 = and i32 %1327, 65535
  %1329 = icmp eq i32 %1328, 34
  br label %originalBB89

originalBB97alteredBB:                            ; preds = %originalBB97, %882
  %1330 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %1331 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1330, i32 0, i32 1
  %1332 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1331, i64 0, i64 3
  %1333 = bitcast %union.rtunion_def* %1332 to %struct.rtx_def**
  %1334 = load %struct.rtx_def*, %struct.rtx_def** %1333, align 8
  %1335 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1334, i32 0, i32 1
  %1336 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1335, i64 0, i64 0
  %1337 = bitcast %union.rtunion_def* %1336 to %struct.rtx_def**
  %1338 = load %struct.rtx_def*, %struct.rtx_def** %1337, align 8
  store %struct.rtx_def* %1338, %struct.rtx_def** %24, align 8
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %914
  %1339 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %1340 = icmp ne %struct.rtx_def* %1339, null
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %970
  %1341 = load i32, i32* %22, align 4
  %1342 = sext i32 %1341 to i64
  %1343 = getelementptr inbounds [53 x i8], [53 x i8]* @global_regs, i64 0, i64 %1342
  %1344 = load i8, i8* %1343, align 1
  %1345 = icmp ne i8 %1344, 0
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %992
  %1346 = load %struct.propagate_block_info*, %struct.propagate_block_info** %4, align 8
  %1347 = load i32, i32* %22, align 4
  %1348 = sext i32 %1347 to i64
  %1349 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i64 0, i64 %1348
  %1350 = load i32, i32* %1349, align 4
  %1351 = load i32, i32* %22, align 4
  %1352 = call %struct.rtx_def* @gen_rtx_REG(i32 %1350, i32 %1351)
  %1353 = load %struct.rtx_def*, %struct.rtx_def** %24, align 8
  %1354 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @mark_used_reg(%struct.propagate_block_info* %1346, %struct.rtx_def* %1352, %struct.rtx_def* %1353, %struct.rtx_def* %1354)
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %1019
  %1355 = load i32, i32* %22, align 4
  %_114 = sub i32 %1355, 1
  %gen115 = mul i32 %_114, 1
  %_116 = sub i32 0, %1355
  %gen117 = add i32 %_116, 1
  %_118 = sub i32 0, %1355
  %gen119 = add i32 %_118, 1
  %_120 = sub i32 0, %1355
  %gen121 = add i32 %_120, 1
  %1356 = add nsw i32 %1355, 1
  store i32 %1356, i32* %22, align 4
  br label %originalBB113

originalBB125alteredBB:                           ; preds = %originalBB125, %1061
  br label %originalBB125

originalBB129alteredBB:                           ; preds = %originalBB129, %1086
  %1357 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1358 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %1357, i32 0, i32 2
  %1359 = load i32, i32* %1358, align 8
  %1360 = load i32, i32* %26, align 4
  %1361 = icmp ne i32 %1359, %1360
  br label %originalBB129

originalBB133alteredBB:                           ; preds = %originalBB133, %1110
  %1362 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %25, align 8
  %1363 = icmp ne %struct.bitmap_element_def* %1362, null
  br label %originalBB133

originalBB137alteredBB:                           ; preds = %originalBB137, %1146
  %1364 = load i32, i32* %27, align 4
  %1365 = zext i32 %1364 to i64
  %_138 = sub i64 1, %1365
  %gen139 = mul i64 %_138, %1365
  %_140 = sub i64 1, %1365
  %gen141 = mul i64 %_140, %1365
  %_142 = shl i64 1, %1365
  %_143 = sub i64 0, 1
  %gen144 = add i64 %_143, %1365
  %_145 = shl i64 1, %1365
  %_146 = sub i64 1, %1365
  %gen147 = mul i64 %_146, %1365
  %1366 = shl i64 1, %1365
  store i64 %1366, i64* %30, align 8
  %1367 = load i64, i64* %29, align 8
  %1368 = load i64, i64* %30, align 8
  %_148 = sub i64 0, %1367
  %gen149 = add i64 %_148, %1368
  %_150 = sub i64 0, %1367
  %gen151 = add i64 %_150, %1368
  %_152 = sub i64 %1367, %1368
  %gen153 = mul i64 %_152, %1368
  %_154 = sub i64 0, %1367
  %gen155 = add i64 %_154, %1368
  %1369 = and i64 %1367, %1368
  %1370 = icmp ne i64 %1369, 0
  br label %originalBB137

originalBB159alteredBB:                           ; preds = %originalBB159, %1199
  %1371 = load i32, i32* %27, align 4
  %_160 = sub i32 %1371, 1
  %gen161 = mul i32 %_160, 1
  %_162 = sub i32 %1371, 1
  %gen163 = mul i32 %_162, 1
  %_164 = shl i32 %1371, 1
  %_165 = shl i32 %1371, 1
  %_166 = shl i32 %1371, 1
  %_167 = sub i32 %1371, 1
  %gen168 = mul i32 %_167, 1
  %1372 = add i32 %1371, 1
  store i32 %1372, i32* %27, align 4
  br label %originalBB159

originalBB172alteredBB:                           ; preds = %originalBB172, %1220
  %1373 = load i32, i32* %28, align 4
  %_173 = shl i32 %1373, 1
  %_174 = sub i32 0, %1373
  %gen175 = add i32 %_174, 1
  %1374 = add i32 %1373, 1
  store i32 %1374, i32* %28, align 4
  br label %originalBB172

originalBB179alteredBB:                           ; preds = %originalBB179, %1245
  br label %originalBB179
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @insn_dead_p(%struct.propagate_block_info*, %struct.rtx_def*, i32, %struct.rtx_def*) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.propagate_block_info*, align 8
  %7 = alloca %struct.rtx_def*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.rtx_def*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca %struct.rtx_def*, align 8
  %13 = alloca %struct.rtx_def*, align 8
  %14 = alloca %struct.rtx_def*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %6, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %7, align 8
  store i32 %2, i32* %8, align 4
  store %struct.rtx_def* %3, %struct.rtx_def** %9, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 65535
  store i32 %21, i32* %10, align 4
  %22 = load i32, i32* %10, align 4
  %23 = icmp eq i32 %22, 47
  br i1 %23, label %24, label %705

; <label>:24:                                     ; preds = %4
  %25 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %26, i64 0, i64 0
  %28 = bitcast %union.rtunion_def* %27 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %11, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %31, i64 0, i64 1
  %33 = bitcast %union.rtunion_def* %32 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %33, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %36 = load i32, i32* %35, align 8
  %37 = and i32 %36, 65535
  %38 = icmp eq i32 %37, 50
  br i1 %38, label %39, label %44

; <label>:39:                                     ; preds = %24
  %40 = load i32, i32* %8, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %43, label %42

; <label>:42:                                     ; preds = %39
  store i32 0, i32* %5, align 4
  br label %879

; <label>:43:                                     ; preds = %39
  br label %86

; <label>:44:                                     ; preds = %24
  %45 = load i32, i32* @x.37
  %46 = load i32, i32* @y.38
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %44
  %53 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %54, i64 0, i64 1
  %56 = bitcast %union.rtunion_def* %55 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %56, align 8
  %58 = call i32 @volatile_refs_p(%struct.rtx_def* %57)
  %59 = icmp ne i32 %58, 0
  %60 = load i32, i32* @x.37
  %61 = load i32, i32* @y.38
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %59, label %68, label %69

; <label>:68:                                     ; preds = %originalBBpart2
  store i32 0, i32* %5, align 4
  br label %879

; <label>:69:                                     ; preds = %originalBBpart2
  %70 = load i32, i32* @x.37
  %71 = load i32, i32* @y.38
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %69
  %78 = load i32, i32* @x.37
  %79 = load i32, i32* @y.38
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %86

; <label>:86:                                     ; preds = %originalBBpart24, %43
  %87 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %88 = bitcast %struct.rtx_def* %87 to i32*
  %89 = load i32, i32* %88, align 8
  %90 = and i32 %89, 65535
  %91 = icmp eq i32 %90, 66
  br i1 %91, label %92, label %237

; <label>:92:                                     ; preds = %86
  %93 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %95 = load i32, i32* %94, align 8
  %96 = lshr i32 %95, 27
  %97 = and i32 %96, 1
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %122, label %99

; <label>:99:                                     ; preds = %92
  %100 = load i32, i32* @x.37
  %101 = load i32, i32* @y.38
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %99
  %108 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %109 = bitcast %struct.rtx_def* %108 to i32*
  %110 = load i32, i32* %109, align 8
  %111 = lshr i32 %110, 16
  %112 = and i32 %111, 255
  %113 = icmp eq i32 %112, 51
  %114 = load i32, i32* @x.37
  %115 = load i32, i32* @y.38
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart213, label %originalBB6alteredBB

originalBBpart213:                                ; preds = %originalBB6
  br i1 %113, label %122, label %123

; <label>:122:                                    ; preds = %originalBBpart213, %92
  store i32 0, i32* %5, align 4
  br label %879

; <label>:123:                                    ; preds = %originalBBpart213
  %124 = load i32, i32* @x.37
  %125 = load i32, i32* @y.38
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %123
  %132 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %133 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %132)
  store %struct.rtx_def* %133, %struct.rtx_def** %13, align 8
  %134 = load %struct.propagate_block_info*, %struct.propagate_block_info** %6, align 8
  %135 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %134, i32 0, i32 4
  %136 = load %struct.rtx_def*, %struct.rtx_def** %135, align 8
  store %struct.rtx_def* %136, %struct.rtx_def** %12, align 8
  %137 = load i32, i32* @x.37
  %138 = load i32, i32* @y.38
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %145

; <label>:145:                                    ; preds = %230, %originalBBpart217
  %146 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %147 = icmp ne %struct.rtx_def* %146, null
  br i1 %147, label %148, label %236

; <label>:148:                                    ; preds = %145
  %149 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %150 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1
  %152 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %151, i64 0, i64 0
  %153 = bitcast %union.rtunion_def* %152 to %struct.rtx_def**
  %154 = load %struct.rtx_def*, %struct.rtx_def** %153, align 8
  %155 = call i32 @anti_dependence(%struct.rtx_def* %149, %struct.rtx_def* %154)
  %156 = icmp ne i32 %155, 0
  br i1 %156, label %157, label %213

; <label>:157:                                    ; preds = %148
  %158 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %158, i32 0, i32 1
  %160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %159, i64 0, i64 0
  %161 = bitcast %union.rtunion_def* %160 to %struct.rtx_def**
  %162 = load %struct.rtx_def*, %struct.rtx_def** %161, align 8
  store %struct.rtx_def* %162, %struct.rtx_def** %14, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %164, i64 0, i64 0
  %166 = bitcast %union.rtunion_def* %165 to %struct.rtx_def**
  %167 = load %struct.rtx_def*, %struct.rtx_def** %166, align 8
  %168 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1
  %170 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %169, i64 0, i64 0
  %171 = bitcast %union.rtunion_def* %170 to %struct.rtx_def**
  %172 = load %struct.rtx_def*, %struct.rtx_def** %171, align 8
  %173 = call i32 @rtx_equal_p(%struct.rtx_def* %167, %struct.rtx_def* %172)
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %175, label %212

; <label>:175:                                    ; preds = %157
  %176 = load i32, i32* @x.37
  %177 = load i32, i32* @y.38
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %175
  %184 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %185 = bitcast %struct.rtx_def* %184 to i32*
  %186 = load i32, i32* %185, align 8
  %187 = lshr i32 %186, 16
  %188 = and i32 %187, 255
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %194 = bitcast %struct.rtx_def* %193 to i32*
  %195 = load i32, i32* %194, align 8
  %196 = lshr i32 %195, 16
  %197 = and i32 %196, 255
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = icmp sle i32 %192, %201
  %203 = load i32, i32* @x.37
  %204 = load i32, i32* @y.38
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart258, label %originalBB19alteredBB

originalBBpart258:                                ; preds = %originalBB19
  br i1 %202, label %211, label %212

; <label>:211:                                    ; preds = %originalBBpart258
  store i32 1, i32* %5, align 4
  br label %879

; <label>:212:                                    ; preds = %originalBBpart258, %157
  br label %213

; <label>:213:                                    ; preds = %212, %148
  %214 = load i32, i32* @x.37
  %215 = load i32, i32* @y.38
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %originalBB60alteredBB, %213
  %222 = load i32, i32* @x.37
  %223 = load i32, i32* @y.38
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBBpart262, label %originalBB60alteredBB

originalBBpart262:                                ; preds = %originalBB60
  br label %230

; <label>:230:                                    ; preds = %originalBBpart262
  %231 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %232 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %231, i32 0, i32 1
  %233 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %232, i64 0, i64 1
  %234 = bitcast %union.rtunion_def* %233 to %struct.rtx_def**
  %235 = load %struct.rtx_def*, %struct.rtx_def** %234, align 8
  store %struct.rtx_def* %235, %struct.rtx_def** %12, align 8
  br label %145

; <label>:236:                                    ; preds = %145
  br label %704

; <label>:237:                                    ; preds = %86
  %238 = load i32, i32* @x.37
  %239 = load i32, i32* @y.38
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %originalBB64alteredBB, %237
  %246 = load i32, i32* @x.37
  %247 = load i32, i32* @y.38
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart266, label %originalBB64alteredBB

originalBBpart266:                                ; preds = %originalBB64
  br label %254

; <label>:254:                                    ; preds = %306, %originalBBpart266
  %255 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %256 = bitcast %struct.rtx_def* %255 to i32*
  %257 = load i32, i32* %256, align 8
  %258 = and i32 %257, 65535
  %259 = icmp eq i32 %258, 63
  br i1 %259, label %288, label %260

; <label>:260:                                    ; preds = %254
  %261 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %262 = bitcast %struct.rtx_def* %261 to i32*
  %263 = load i32, i32* %262, align 8
  %264 = and i32 %263, 65535
  %265 = icmp eq i32 %264, 64
  br i1 %265, label %288, label %266

; <label>:266:                                    ; preds = %260
  %267 = load i32, i32* @x.37
  %268 = load i32, i32* @y.38
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %originalBB68alteredBB, %266
  %275 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %276 = bitcast %struct.rtx_def* %275 to i32*
  %277 = load i32, i32* %276, align 8
  %278 = and i32 %277, 65535
  %279 = icmp eq i32 %278, 133
  %280 = load i32, i32* @x.37
  %281 = load i32, i32* @y.38
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBBpart276, label %originalBB68alteredBB

originalBBpart276:                                ; preds = %originalBB68
  br label %288

; <label>:288:                                    ; preds = %originalBBpart276, %260, %254
  %289 = phi i1 [ true, %260 ], [ true, %254 ], [ %279, %originalBBpart276 ]
  %290 = load i32, i32* @x.37
  %291 = load i32, i32* @y.38
  %292 = sub i32 %290, 1
  %293 = mul i32 %290, %292
  %294 = urem i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %295, %296
  br i1 %297, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %originalBB78alteredBB, %288
  %298 = load i32, i32* @x.37
  %299 = load i32, i32* @y.38
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %289, label %306, label %312

; <label>:306:                                    ; preds = %originalBBpart280
  %307 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %307, i32 0, i32 1
  %309 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %308, i64 0, i64 0
  %310 = bitcast %union.rtunion_def* %309 to %struct.rtx_def**
  %311 = load %struct.rtx_def*, %struct.rtx_def** %310, align 8
  store %struct.rtx_def* %311, %struct.rtx_def** %11, align 8
  br label %254

; <label>:312:                                    ; preds = %originalBBpart280
  %313 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %314 = bitcast %struct.rtx_def* %313 to i32*
  %315 = load i32, i32* %314, align 8
  %316 = and i32 %315, 65535
  %317 = icmp eq i32 %316, 61
  br i1 %317, label %318, label %703

; <label>:318:                                    ; preds = %312
  %319 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %320 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %319, i32 0, i32 1
  %321 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %320, i64 0, i64 0
  %322 = bitcast %union.rtunion_def* %321 to i32*
  %323 = load i32, i32* %322, align 8
  store i32 %323, i32* %15, align 4
  %324 = load %struct.propagate_block_info*, %struct.propagate_block_info** %6, align 8
  %325 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %324, i32 0, i32 1
  %326 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %325, align 8
  %327 = load i32, i32* %15, align 4
  %328 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %326, i32 %327)
  %329 = icmp ne i32 %328, 0
  br i1 %329, label %330, label %331

; <label>:330:                                    ; preds = %318
  store i32 0, i32* %5, align 4
  br label %879

; <label>:331:                                    ; preds = %318
  %332 = load i32, i32* %15, align 4
  %333 = icmp slt i32 %332, 53
  br i1 %333, label %334, label %608

; <label>:334:                                    ; preds = %331
  %335 = load i32, i32* %15, align 4
  %336 = icmp sge i32 %335, 8
  br i1 %336, label %337, label %356

; <label>:337:                                    ; preds = %334
  %338 = load i32, i32* @x.37
  %339 = load i32, i32* @y.38
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %originalBB82alteredBB, %337
  %346 = load i32, i32* %15, align 4
  %347 = icmp sle i32 %346, 15
  %348 = load i32, i32* @x.37
  %349 = load i32, i32* @y.38
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %347, label %422, label %356

; <label>:356:                                    ; preds = %originalBBpart284, %334
  %357 = load i32, i32* %15, align 4
  %358 = icmp sge i32 %357, 21
  br i1 %358, label %359, label %362

; <label>:359:                                    ; preds = %356
  %360 = load i32, i32* %15, align 4
  %361 = icmp sle i32 %360, 28
  br i1 %361, label %422, label %362

; <label>:362:                                    ; preds = %359, %356
  %363 = load i32, i32* %15, align 4
  %364 = icmp sge i32 %363, 45
  br i1 %364, label %365, label %384

; <label>:365:                                    ; preds = %362
  %366 = load i32, i32* @x.37
  %367 = load i32, i32* @y.38
  %368 = sub i32 %366, 1
  %369 = mul i32 %366, %368
  %370 = urem i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %371, %372
  br i1 %373, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %originalBB86alteredBB, %365
  %374 = load i32, i32* %15, align 4
  %375 = icmp sle i32 %374, 52
  %376 = load i32, i32* @x.37
  %377 = load i32, i32* @y.38
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br i1 %375, label %422, label %384

; <label>:384:                                    ; preds = %originalBBpart288, %362
  %385 = load i32, i32* @x.37
  %386 = load i32, i32* @y.38
  %387 = sub i32 %385, 1
  %388 = mul i32 %385, %387
  %389 = urem i32 %388, 2
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %390, %391
  br i1 %392, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %originalBB90alteredBB, %384
  %393 = load i32, i32* %15, align 4
  %394 = icmp sge i32 %393, 29
  %395 = load i32, i32* @x.37
  %396 = load i32, i32* @y.38
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %394, label %403, label %477

; <label>:403:                                    ; preds = %originalBBpart292
  %404 = load i32, i32* @x.37
  %405 = load i32, i32* @y.38
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %originalBB94alteredBB, %403
  %412 = load i32, i32* %15, align 4
  %413 = icmp sle i32 %412, 36
  %414 = load i32, i32* @x.37
  %415 = load i32, i32* @y.38
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br i1 %413, label %422, label %477

; <label>:422:                                    ; preds = %originalBBpart296, %originalBBpart288, %359, %originalBBpart284
  %423 = load i32, i32* @x.37
  %424 = load i32, i32* @y.38
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %originalBB98alteredBB, %422
  %431 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %432 = bitcast %struct.rtx_def* %431 to i32*
  %433 = load i32, i32* %432, align 8
  %434 = lshr i32 %433, 16
  %435 = and i32 %434, 255
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %436
  %438 = load i32, i32* %437, align 4
  %439 = icmp eq i32 %438, 5
  %440 = load i32, i32* @x.37
  %441 = load i32, i32* @y.38
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBBpart2113, label %originalBB98alteredBB

originalBBpart2113:                               ; preds = %originalBB98
  br i1 %439, label %458, label %448

; <label>:448:                                    ; preds = %originalBBpart2113
  %449 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %450 = bitcast %struct.rtx_def* %449 to i32*
  %451 = load i32, i32* %450, align 8
  %452 = lshr i32 %451, 16
  %453 = and i32 %452, 255
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %454
  %456 = load i32, i32* %455, align 4
  %457 = icmp eq i32 %456, 6
  br label %458

; <label>:458:                                    ; preds = %448, %originalBBpart2113
  %459 = phi i1 [ true, %originalBBpart2113 ], [ %457, %448 ]
  %460 = load i32, i32* @x.37
  %461 = load i32, i32* @y.38
  %462 = sub i32 %460, 1
  %463 = mul i32 %460, %462
  %464 = urem i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %465, %466
  br i1 %467, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %originalBB115alteredBB, %458
  %468 = select i1 %459, i32 2, i32 1
  %469 = load i32, i32* @x.37
  %470 = load i32, i32* @y.38
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br label %558

; <label>:477:                                    ; preds = %originalBBpart296, %originalBBpart292
  %478 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %479 = bitcast %struct.rtx_def* %478 to i32*
  %480 = load i32, i32* %479, align 8
  %481 = lshr i32 %480, 16
  %482 = and i32 %481, 255
  %483 = icmp eq i32 %482, 18
  br i1 %483, label %484, label %489

; <label>:484:                                    ; preds = %477
  %485 = load i32, i32* @target_flags, align 4
  %486 = and i32 %485, 33554432
  %487 = icmp ne i32 %486, 0
  %488 = select i1 %487, i32 2, i32 3
  br label %556

; <label>:489:                                    ; preds = %477
  %490 = load i32, i32* @x.37
  %491 = load i32, i32* @y.38
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %originalBB119alteredBB, %489
  %498 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %499 = bitcast %struct.rtx_def* %498 to i32*
  %500 = load i32, i32* %499, align 8
  %501 = lshr i32 %500, 16
  %502 = and i32 %501, 255
  %503 = icmp eq i32 %502, 24
  %504 = load i32, i32* @x.37
  %505 = load i32, i32* @y.38
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart2125, label %originalBB119alteredBB

originalBBpart2125:                               ; preds = %originalBB119
  br i1 %503, label %512, label %517

; <label>:512:                                    ; preds = %originalBBpart2125
  %513 = load i32, i32* @target_flags, align 4
  %514 = and i32 %513, 33554432
  %515 = icmp ne i32 %514, 0
  %516 = select i1 %515, i32 4, i32 6
  br label %538

; <label>:517:                                    ; preds = %originalBBpart2125
  %518 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %519 = bitcast %struct.rtx_def* %518 to i32*
  %520 = load i32, i32* %519, align 8
  %521 = lshr i32 %520, 16
  %522 = and i32 %521, 255
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %523
  %525 = load i8, i8* %524, align 1
  %526 = zext i8 %525 to i32
  %527 = load i32, i32* @target_flags, align 4
  %528 = and i32 %527, 33554432
  %529 = icmp ne i32 %528, 0
  %530 = select i1 %529, i32 8, i32 4
  %531 = add nsw i32 %526, %530
  %532 = sub nsw i32 %531, 1
  %533 = load i32, i32* @target_flags, align 4
  %534 = and i32 %533, 33554432
  %535 = icmp ne i32 %534, 0
  %536 = select i1 %535, i32 8, i32 4
  %537 = sdiv i32 %532, %536
  br label %538

; <label>:538:                                    ; preds = %517, %512
  %539 = phi i32 [ %516, %512 ], [ %537, %517 ]
  %540 = load i32, i32* @x.37
  %541 = load i32, i32* @y.38
  %542 = sub i32 %540, 1
  %543 = mul i32 %540, %542
  %544 = urem i32 %543, 2
  %545 = icmp eq i32 %544, 0
  %546 = icmp slt i32 %541, 10
  %547 = or i1 %545, %546
  br i1 %547, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %originalBB127alteredBB, %538
  %548 = load i32, i32* @x.37
  %549 = load i32, i32* @y.38
  %550 = sub i32 %548, 1
  %551 = mul i32 %548, %550
  %552 = urem i32 %551, 2
  %553 = icmp eq i32 %552, 0
  %554 = icmp slt i32 %549, 10
  %555 = or i1 %553, %554
  br i1 %555, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %556

; <label>:556:                                    ; preds = %originalBBpart2129, %484
  %557 = phi i32 [ %488, %484 ], [ %539, %originalBBpart2129 ]
  br label %558

; <label>:558:                                    ; preds = %556, %originalBBpart2117
  %559 = phi i32 [ %468, %originalBBpart2117 ], [ %557, %556 ]
  %560 = load i32, i32* @x.37
  %561 = load i32, i32* @y.38
  %562 = sub i32 %560, 1
  %563 = mul i32 %560, %562
  %564 = urem i32 %563, 2
  %565 = icmp eq i32 %564, 0
  %566 = icmp slt i32 %561, 10
  %567 = or i1 %565, %566
  br i1 %567, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %originalBB131alteredBB, %558
  store i32 %559, i32* %16, align 4
  %568 = load i32, i32* @x.37
  %569 = load i32, i32* @y.38
  %570 = sub i32 %568, 1
  %571 = mul i32 %568, %570
  %572 = urem i32 %571, 2
  %573 = icmp eq i32 %572, 0
  %574 = icmp slt i32 %569, 10
  %575 = or i1 %573, %574
  br i1 %575, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br label %576

; <label>:576:                                    ; preds = %originalBBpart2137, %originalBBpart2133
  %577 = load i32, i32* %16, align 4
  %578 = add nsw i32 %577, -1
  store i32 %578, i32* %16, align 4
  %579 = icmp sgt i32 %578, 0
  br i1 %579, label %580, label %607

; <label>:580:                                    ; preds = %576
  %581 = load %struct.propagate_block_info*, %struct.propagate_block_info** %6, align 8
  %582 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %581, i32 0, i32 1
  %583 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %582, align 8
  %584 = load i32, i32* %15, align 4
  %585 = load i32, i32* %16, align 4
  %586 = add nsw i32 %584, %585
  %587 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %583, i32 %586)
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %589, label %590

; <label>:589:                                    ; preds = %580
  store i32 0, i32* %5, align 4
  br label %879

; <label>:590:                                    ; preds = %580
  %591 = load i32, i32* @x.37
  %592 = load i32, i32* @y.38
  %593 = sub i32 %591, 1
  %594 = mul i32 %591, %593
  %595 = urem i32 %594, 2
  %596 = icmp eq i32 %595, 0
  %597 = icmp slt i32 %592, 10
  %598 = or i1 %596, %597
  br i1 %598, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %originalBB135alteredBB, %590
  %599 = load i32, i32* @x.37
  %600 = load i32, i32* @y.38
  %601 = sub i32 %599, 1
  %602 = mul i32 %599, %601
  %603 = urem i32 %602, 2
  %604 = icmp eq i32 %603, 0
  %605 = icmp slt i32 %600, 10
  %606 = or i1 %604, %605
  br i1 %606, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  br label %576

; <label>:607:                                    ; preds = %576
  br label %608

; <label>:608:                                    ; preds = %607, %331
  %609 = load i32, i32* %15, align 4
  %610 = icmp slt i32 %609, 53
  br i1 %610, label %611, label %619

; <label>:611:                                    ; preds = %608
  %612 = load i32, i32* %15, align 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds [53 x i8], [53 x i8]* @global_regs, i64 0, i64 %613
  %615 = load i8, i8* %614, align 1
  %616 = sext i8 %615 to i32
  %617 = icmp ne i32 %616, 0
  br i1 %617, label %618, label %619

; <label>:618:                                    ; preds = %611
  store i32 0, i32* %5, align 4
  br label %879

; <label>:619:                                    ; preds = %611, %608
  %620 = load i32, i32* %15, align 4
  %621 = icmp eq i32 %620, 7
  br i1 %621, label %622, label %623

; <label>:622:                                    ; preds = %619
  store i32 0, i32* %5, align 4
  br label %879

; <label>:623:                                    ; preds = %619
  %624 = load i32, i32* %15, align 4
  %625 = icmp eq i32 %624, 20
  br i1 %625, label %626, label %633

; <label>:626:                                    ; preds = %623
  %627 = load i32, i32* @reload_completed, align 4
  %628 = icmp ne i32 %627, 0
  br i1 %628, label %629, label %632

; <label>:629:                                    ; preds = %626
  %630 = load i32, i32* @frame_pointer_needed, align 4
  %631 = icmp ne i32 %630, 0
  br i1 %631, label %632, label %633

; <label>:632:                                    ; preds = %629, %626
  store i32 0, i32* %5, align 4
  br label %879

; <label>:633:                                    ; preds = %629, %623
  %634 = load i32, i32* @x.37
  %635 = load i32, i32* @y.38
  %636 = sub i32 %634, 1
  %637 = mul i32 %634, %636
  %638 = urem i32 %637, 2
  %639 = icmp eq i32 %638, 0
  %640 = icmp slt i32 %635, 10
  %641 = or i1 %639, %640
  br i1 %641, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %originalBB139alteredBB, %633
  %642 = load i32, i32* %15, align 4
  %643 = icmp eq i32 %642, 6
  %644 = load i32, i32* @x.37
  %645 = load i32, i32* @y.38
  %646 = sub i32 %644, 1
  %647 = mul i32 %644, %646
  %648 = urem i32 %647, 2
  %649 = icmp eq i32 %648, 0
  %650 = icmp slt i32 %645, 10
  %651 = or i1 %649, %650
  br i1 %651, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br i1 %643, label %652, label %675

; <label>:652:                                    ; preds = %originalBBpart2141
  %653 = load i32, i32* @reload_completed, align 4
  %654 = icmp ne i32 %653, 0
  br i1 %654, label %655, label %674

; <label>:655:                                    ; preds = %652
  %656 = load i32, i32* @x.37
  %657 = load i32, i32* @y.38
  %658 = sub i32 %656, 1
  %659 = mul i32 %656, %658
  %660 = urem i32 %659, 2
  %661 = icmp eq i32 %660, 0
  %662 = icmp slt i32 %657, 10
  %663 = or i1 %661, %662
  br i1 %663, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %originalBB143alteredBB, %655
  %664 = load i32, i32* @frame_pointer_needed, align 4
  %665 = icmp ne i32 %664, 0
  %666 = load i32, i32* @x.37
  %667 = load i32, i32* @y.38
  %668 = sub i32 %666, 1
  %669 = mul i32 %666, %668
  %670 = urem i32 %669, 2
  %671 = icmp eq i32 %670, 0
  %672 = icmp slt i32 %667, 10
  %673 = or i1 %671, %672
  br i1 %673, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br i1 %665, label %674, label %675

; <label>:674:                                    ; preds = %originalBBpart2145, %652
  store i32 0, i32* %5, align 4
  br label %879

; <label>:675:                                    ; preds = %originalBBpart2145, %originalBBpart2141
  %676 = load i32, i32* @x.37
  %677 = load i32, i32* @y.38
  %678 = sub i32 %676, 1
  %679 = mul i32 %676, %678
  %680 = urem i32 %679, 2
  %681 = icmp eq i32 %680, 0
  %682 = icmp slt i32 %677, 10
  %683 = or i1 %681, %682
  br i1 %683, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %originalBB147alteredBB, %675
  %684 = load i32, i32* %15, align 4
  %685 = icmp eq i32 %684, 16
  %686 = load i32, i32* @x.37
  %687 = load i32, i32* @y.38
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br i1 %685, label %694, label %702

; <label>:694:                                    ; preds = %originalBBpart2149
  %695 = load i32, i32* %15, align 4
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %696
  %698 = load i8, i8* %697, align 1
  %699 = sext i8 %698 to i32
  %700 = icmp ne i32 %699, 0
  br i1 %700, label %701, label %702

; <label>:701:                                    ; preds = %694
  store i32 0, i32* %5, align 4
  br label %879

; <label>:702:                                    ; preds = %694, %originalBBpart2149
  store i32 1, i32* %5, align 4
  br label %879

; <label>:703:                                    ; preds = %312
  br label %704

; <label>:704:                                    ; preds = %703, %236
  br label %862

; <label>:705:                                    ; preds = %4
  %706 = load i32, i32* %10, align 4
  %707 = icmp eq i32 %706, 39
  br i1 %707, label %708, label %788

; <label>:708:                                    ; preds = %705
  %709 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %710 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %709, i32 0, i32 1
  %711 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %710, i64 0, i64 0
  %712 = bitcast %union.rtunion_def* %711 to %struct.rtvec_def**
  %713 = load %struct.rtvec_def*, %struct.rtvec_def** %712, align 8
  %714 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %713, i32 0, i32 0
  %715 = load i32, i32* %714, align 8
  store i32 %715, i32* %17, align 4
  %716 = load i32, i32* %17, align 4
  %717 = add nsw i32 %716, -1
  store i32 %717, i32* %17, align 4
  br label %718

; <label>:718:                                    ; preds = %originalBBpart2155, %708
  %719 = load i32, i32* %17, align 4
  %720 = icmp sge i32 %719, 0
  br i1 %720, label %721, label %787

; <label>:721:                                    ; preds = %718
  %722 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %723 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %722, i32 0, i32 1
  %724 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %723, i64 0, i64 0
  %725 = bitcast %union.rtunion_def* %724 to %struct.rtvec_def**
  %726 = load %struct.rtvec_def*, %struct.rtvec_def** %725, align 8
  %727 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %726, i32 0, i32 1
  %728 = load i32, i32* %17, align 4
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %727, i64 0, i64 %729
  %731 = load %struct.rtx_def*, %struct.rtx_def** %730, align 8
  %732 = bitcast %struct.rtx_def* %731 to i32*
  %733 = load i32, i32* %732, align 8
  %734 = and i32 %733, 65535
  %735 = icmp ne i32 %734, 49
  br i1 %735, label %736, label %767

; <label>:736:                                    ; preds = %721
  %737 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %738 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %737, i32 0, i32 1
  %739 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %738, i64 0, i64 0
  %740 = bitcast %union.rtunion_def* %739 to %struct.rtvec_def**
  %741 = load %struct.rtvec_def*, %struct.rtvec_def** %740, align 8
  %742 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %741, i32 0, i32 1
  %743 = load i32, i32* %17, align 4
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %742, i64 0, i64 %744
  %746 = load %struct.rtx_def*, %struct.rtx_def** %745, align 8
  %747 = bitcast %struct.rtx_def* %746 to i32*
  %748 = load i32, i32* %747, align 8
  %749 = and i32 %748, 65535
  %750 = icmp ne i32 %749, 48
  br i1 %750, label %751, label %767

; <label>:751:                                    ; preds = %736
  %752 = load %struct.propagate_block_info*, %struct.propagate_block_info** %6, align 8
  %753 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %754 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %753, i32 0, i32 1
  %755 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %754, i64 0, i64 0
  %756 = bitcast %union.rtunion_def* %755 to %struct.rtvec_def**
  %757 = load %struct.rtvec_def*, %struct.rtvec_def** %756, align 8
  %758 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %757, i32 0, i32 1
  %759 = load i32, i32* %17, align 4
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %758, i64 0, i64 %760
  %762 = load %struct.rtx_def*, %struct.rtx_def** %761, align 8
  %763 = load i32, i32* %8, align 4
  %764 = call i32 @insn_dead_p(%struct.propagate_block_info* %752, %struct.rtx_def* %762, i32 %763, %struct.rtx_def* null)
  %765 = icmp ne i32 %764, 0
  br i1 %765, label %767, label %766

; <label>:766:                                    ; preds = %751
  store i32 0, i32* %5, align 4
  br label %879

; <label>:767:                                    ; preds = %751, %736, %721
  br label %768

; <label>:768:                                    ; preds = %767
  %769 = load i32, i32* @x.37
  %770 = load i32, i32* @y.38
  %771 = sub i32 %769, 1
  %772 = mul i32 %769, %771
  %773 = urem i32 %772, 2
  %774 = icmp eq i32 %773, 0
  %775 = icmp slt i32 %770, 10
  %776 = or i1 %774, %775
  br i1 %776, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %originalBB151alteredBB, %768
  %777 = load i32, i32* %17, align 4
  %778 = add nsw i32 %777, -1
  store i32 %778, i32* %17, align 4
  %779 = load i32, i32* @x.37
  %780 = load i32, i32* @y.38
  %781 = sub i32 %779, 1
  %782 = mul i32 %779, %781
  %783 = urem i32 %782, 2
  %784 = icmp eq i32 %783, 0
  %785 = icmp slt i32 %780, 10
  %786 = or i1 %784, %785
  br i1 %786, label %originalBBpart2155, label %originalBB151alteredBB

originalBBpart2155:                               ; preds = %originalBB151
  br label %718

; <label>:787:                                    ; preds = %718
  store i32 1, i32* %5, align 4
  br label %879

; <label>:788:                                    ; preds = %705
  %789 = load i32, i32* @x.37
  %790 = load i32, i32* @y.38
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %originalBB157alteredBB, %788
  %797 = load i32, i32* %10, align 4
  %798 = icmp eq i32 %797, 49
  %799 = load i32, i32* @x.37
  %800 = load i32, i32* @y.38
  %801 = sub i32 %799, 1
  %802 = mul i32 %799, %801
  %803 = urem i32 %802, 2
  %804 = icmp eq i32 %803, 0
  %805 = icmp slt i32 %800, 10
  %806 = or i1 %804, %805
  br i1 %806, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br i1 %798, label %807, label %860

; <label>:807:                                    ; preds = %originalBBpart2159
  %808 = load i32, i32* @x.37
  %809 = load i32, i32* @y.38
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %originalBB161alteredBB, %807
  %816 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %817 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %816, i32 0, i32 1
  %818 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %817, i64 0, i64 0
  %819 = bitcast %union.rtunion_def* %818 to %struct.rtx_def**
  %820 = load %struct.rtx_def*, %struct.rtx_def** %819, align 8
  %821 = bitcast %struct.rtx_def* %820 to i32*
  %822 = load i32, i32* %821, align 8
  %823 = and i32 %822, 65535
  %824 = icmp eq i32 %823, 61
  %825 = load i32, i32* @x.37
  %826 = load i32, i32* @y.38
  %827 = sub i32 %825, 1
  %828 = mul i32 %825, %827
  %829 = urem i32 %828, 2
  %830 = icmp eq i32 %829, 0
  %831 = icmp slt i32 %826, 10
  %832 = or i1 %830, %831
  br i1 %832, label %originalBBpart2166, label %originalBB161alteredBB

originalBBpart2166:                               ; preds = %originalBB161
  br i1 %824, label %833, label %860

; <label>:833:                                    ; preds = %originalBBpart2166
  %834 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %835 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %834, i32 0, i32 1
  %836 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %835, i64 0, i64 0
  %837 = bitcast %union.rtunion_def* %836 to %struct.rtx_def**
  %838 = load %struct.rtx_def*, %struct.rtx_def** %837, align 8
  %839 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %838, i32 0, i32 1
  %840 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %839, i64 0, i64 0
  %841 = bitcast %union.rtunion_def* %840 to i32*
  %842 = load i32, i32* %841, align 8
  %843 = icmp uge i32 %842, 53
  br i1 %843, label %844, label %860

; <label>:844:                                    ; preds = %833
  %845 = load %struct.propagate_block_info*, %struct.propagate_block_info** %6, align 8
  %846 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %845, i32 0, i32 1
  %847 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %846, align 8
  %848 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %849 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %848, i32 0, i32 1
  %850 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %849, i64 0, i64 0
  %851 = bitcast %union.rtunion_def* %850 to %struct.rtx_def**
  %852 = load %struct.rtx_def*, %struct.rtx_def** %851, align 8
  %853 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %852, i32 0, i32 1
  %854 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %853, i64 0, i64 0
  %855 = bitcast %union.rtunion_def* %854 to i32*
  %856 = load i32, i32* %855, align 8
  %857 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %847, i32 %856)
  %858 = icmp ne i32 %857, 0
  br i1 %858, label %860, label %859

; <label>:859:                                    ; preds = %844
  store i32 1, i32* %5, align 4
  br label %879

; <label>:860:                                    ; preds = %844, %833, %originalBBpart2166, %originalBBpart2159
  br label %861

; <label>:861:                                    ; preds = %860
  br label %862

; <label>:862:                                    ; preds = %861, %704
  %863 = load i32, i32* @x.37
  %864 = load i32, i32* @y.38
  %865 = sub i32 %863, 1
  %866 = mul i32 %863, %865
  %867 = urem i32 %866, 2
  %868 = icmp eq i32 %867, 0
  %869 = icmp slt i32 %864, 10
  %870 = or i1 %868, %869
  br i1 %870, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %originalBB168alteredBB, %862
  store i32 0, i32* %5, align 4
  %871 = load i32, i32* @x.37
  %872 = load i32, i32* @y.38
  %873 = sub i32 %871, 1
  %874 = mul i32 %871, %873
  %875 = urem i32 %874, 2
  %876 = icmp eq i32 %875, 0
  %877 = icmp slt i32 %872, 10
  %878 = or i1 %876, %877
  br i1 %878, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br label %879

; <label>:879:                                    ; preds = %originalBBpart2170, %859, %787, %766, %702, %701, %674, %632, %622, %618, %589, %330, %211, %122, %68, %42
  %880 = load i32, i32* %5, align 4
  ret i32 %880

originalBBalteredBB:                              ; preds = %originalBB, %44
  %881 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %882 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %881, i32 0, i32 1
  %883 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %882, i64 0, i64 1
  %884 = bitcast %union.rtunion_def* %883 to %struct.rtx_def**
  %885 = load %struct.rtx_def*, %struct.rtx_def** %884, align 8
  %886 = call i32 @volatile_refs_p(%struct.rtx_def* %885)
  %887 = icmp ne i32 %886, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %69
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %99
  %888 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %889 = bitcast %struct.rtx_def* %888 to i32*
  %890 = load i32, i32* %889, align 8
  %_ = sub i32 0, %890
  %gen = add i32 %_, 16
  %_7 = sub i32 %890, 16
  %gen8 = mul i32 %_7, 16
  %891 = lshr i32 %890, 16
  %_9 = sub i32 %891, 255
  %gen10 = mul i32 %_9, 255
  %_11 = shl i32 %891, 255
  %892 = and i32 %891, 255
  %893 = icmp eq i32 %892, 51
  br label %originalBB6

originalBB15alteredBB:                            ; preds = %originalBB15, %123
  %894 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %895 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %894)
  store %struct.rtx_def* %895, %struct.rtx_def** %13, align 8
  %896 = load %struct.propagate_block_info*, %struct.propagate_block_info** %6, align 8
  %897 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %896, i32 0, i32 4
  %898 = load %struct.rtx_def*, %struct.rtx_def** %897, align 8
  store %struct.rtx_def* %898, %struct.rtx_def** %12, align 8
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %175
  %899 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %900 = bitcast %struct.rtx_def* %899 to i32*
  %901 = load i32, i32* %900, align 8
  %_20 = sub i32 %901, 16
  %gen21 = mul i32 %_20, 16
  %_22 = sub i32 %901, 16
  %gen23 = mul i32 %_22, 16
  %_24 = sub i32 %901, 16
  %gen25 = mul i32 %_24, 16
  %_26 = sub i32 0, %901
  %gen27 = add i32 %_26, 16
  %_28 = sub i32 %901, 16
  %gen29 = mul i32 %_28, 16
  %_30 = sub i32 0, %901
  %gen31 = add i32 %_30, 16
  %_32 = sub i32 %901, 16
  %gen33 = mul i32 %_32, 16
  %902 = lshr i32 %901, 16
  %_34 = sub i32 %902, 255
  %gen35 = mul i32 %_34, 255
  %_36 = sub i32 0, %902
  %gen37 = add i32 %_36, 255
  %_38 = sub i32 %902, 255
  %gen39 = mul i32 %_38, 255
  %_40 = shl i32 %902, 255
  %903 = and i32 %902, 255
  %904 = sext i32 %903 to i64
  %905 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %904
  %906 = load i8, i8* %905, align 1
  %907 = zext i8 %906 to i32
  %908 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %909 = bitcast %struct.rtx_def* %908 to i32*
  %910 = load i32, i32* %909, align 8
  %_41 = sub i32 %910, 16
  %gen42 = mul i32 %_41, 16
  %_43 = shl i32 %910, 16
  %911 = lshr i32 %910, 16
  %_44 = sub i32 0, %911
  %gen45 = add i32 %_44, 255
  %_46 = sub i32 %911, 255
  %gen47 = mul i32 %_46, 255
  %_48 = sub i32 0, %911
  %gen49 = add i32 %_48, 255
  %_50 = shl i32 %911, 255
  %_51 = sub i32 %911, 255
  %gen52 = mul i32 %_51, 255
  %_53 = sub i32 0, %911
  %gen54 = add i32 %_53, 255
  %_55 = sub i32 0, %911
  %gen56 = add i32 %_55, 255
  %912 = and i32 %911, 255
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %913
  %915 = load i8, i8* %914, align 1
  %916 = zext i8 %915 to i32
  %917 = icmp sle i32 %907, %916
  br label %originalBB19

originalBB60alteredBB:                            ; preds = %originalBB60, %213
  br label %originalBB60

originalBB64alteredBB:                            ; preds = %originalBB64, %237
  br label %originalBB64

originalBB68alteredBB:                            ; preds = %originalBB68, %266
  %918 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %919 = bitcast %struct.rtx_def* %918 to i32*
  %920 = load i32, i32* %919, align 8
  %_69 = sub i32 %920, 65535
  %gen70 = mul i32 %_69, 65535
  %_71 = sub i32 %920, 65535
  %gen72 = mul i32 %_71, 65535
  %_73 = sub i32 %920, 65535
  %gen74 = mul i32 %_73, 65535
  %921 = and i32 %920, 65535
  %922 = icmp eq i32 %921, 133
  br label %originalBB68

originalBB78alteredBB:                            ; preds = %originalBB78, %288
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %337
  %923 = load i32, i32* %15, align 4
  %924 = icmp sle i32 %923, 15
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %365
  %925 = load i32, i32* %15, align 4
  %926 = icmp sle i32 %925, 52
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %384
  %927 = load i32, i32* %15, align 4
  %928 = icmp sge i32 %927, 29
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %403
  %929 = load i32, i32* %15, align 4
  %930 = icmp sle i32 %929, 36
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %422
  %931 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %932 = bitcast %struct.rtx_def* %931 to i32*
  %933 = load i32, i32* %932, align 8
  %_99 = sub i32 %933, 16
  %gen100 = mul i32 %_99, 16
  %_101 = sub i32 %933, 16
  %gen102 = mul i32 %_101, 16
  %_103 = sub i32 %933, 16
  %gen104 = mul i32 %_103, 16
  %_105 = sub i32 0, %933
  %gen106 = add i32 %_105, 16
  %_107 = sub i32 0, %933
  %gen108 = add i32 %_107, 16
  %934 = lshr i32 %933, 16
  %_109 = shl i32 %934, 255
  %_110 = sub i32 %934, 255
  %gen111 = mul i32 %_110, 255
  %935 = and i32 %934, 255
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %936
  %938 = load i32, i32* %937, align 4
  %939 = icmp eq i32 %938, 5
  br label %originalBB98

originalBB115alteredBB:                           ; preds = %originalBB115, %458
  %940 = select i1 %459, i32 2, i32 1
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %489
  %941 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %942 = bitcast %struct.rtx_def* %941 to i32*
  %943 = load i32, i32* %942, align 8
  %_120 = sub i32 0, %943
  %gen121 = add i32 %_120, 16
  %944 = lshr i32 %943, 16
  %_122 = shl i32 %944, 255
  %_123 = shl i32 %944, 255
  %945 = and i32 %944, 255
  %946 = icmp eq i32 %945, 24
  br label %originalBB119

originalBB127alteredBB:                           ; preds = %originalBB127, %538
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %558
  store i32 %559, i32* %16, align 4
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %590
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %633
  %947 = load i32, i32* %15, align 4
  %948 = icmp eq i32 %947, 6
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %655
  %949 = load i32, i32* @frame_pointer_needed, align 4
  %950 = icmp ne i32 %949, 0
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %675
  %951 = load i32, i32* %15, align 4
  %952 = icmp eq i32 %951, 16
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %768
  %953 = load i32, i32* %17, align 4
  %_152 = sub i32 %953, -1
  %gen153 = mul i32 %_152, -1
  %954 = add nsw i32 %953, -1
  store i32 %954, i32* %17, align 4
  br label %originalBB151

originalBB157alteredBB:                           ; preds = %originalBB157, %788
  %955 = load i32, i32* %10, align 4
  %956 = icmp eq i32 %955, 49
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %807
  %957 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %958 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %957, i32 0, i32 1
  %959 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %958, i64 0, i64 0
  %960 = bitcast %union.rtunion_def* %959 to %struct.rtx_def**
  %961 = load %struct.rtx_def*, %struct.rtx_def** %960, align 8
  %962 = bitcast %struct.rtx_def* %961 to i32*
  %963 = load i32, i32* %962, align 8
  %_162 = shl i32 %963, 65535
  %_163 = shl i32 %963, 65535
  %_164 = shl i32 %963, 65535
  %964 = and i32 %963, 65535
  %965 = icmp eq i32 %964, 61
  br label %originalBB161

originalBB168alteredBB:                           ; preds = %originalBB168, %862
  store i32 0, i32* %5, align 4
  br label %originalBB168
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @libcall_dead_p(%struct.propagate_block_info*, %struct.rtx_def*, %struct.rtx_def*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.propagate_block_info*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca %struct.rtx_def*, align 8
  %8 = alloca %struct.rtx_def*, align 8
  %9 = alloca %struct.rtx_def*, align 8
  %10 = alloca %struct.rtx_def*, align 8
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca i32, align 4
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %5, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %7, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 65535
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 105
  br i1 %21, label %22, label %80

; <label>:22:                                     ; preds = %3
  %23 = load i32, i32* @x.39
  %24 = load i32, i32* @y.40
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %22
  %31 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %32, i64 0, i64 3
  %34 = bitcast %union.rtunion_def* %33 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %37 = load i32, i32* %36, align 8
  %38 = and i32 %37, 65535
  %39 = icmp eq i32 %38, 47
  %40 = load i32, i32* @x.39
  %41 = load i32, i32* @y.40
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %39, label %48, label %54

; <label>:48:                                     ; preds = %originalBBpart2
  %49 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %50, i64 0, i64 3
  %52 = bitcast %union.rtunion_def* %51 to %struct.rtx_def**
  %53 = load %struct.rtx_def*, %struct.rtx_def** %52, align 8
  br label %78

; <label>:54:                                     ; preds = %originalBBpart2
  %55 = load i32, i32* @x.39
  %56 = load i32, i32* @y.40
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %54
  %63 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %65, i64 0, i64 3
  %67 = bitcast %union.rtunion_def* %66 to %struct.rtx_def**
  %68 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8
  %69 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %63, %struct.rtx_def* %68)
  %70 = load i32, i32* @x.39
  %71 = load i32, i32* @y.40
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %78

; <label>:78:                                     ; preds = %originalBBpart28, %48
  %79 = phi %struct.rtx_def* [ %53, %48 ], [ %69, %originalBBpart28 ]
  br label %81

; <label>:80:                                     ; preds = %3
  br label %81

; <label>:81:                                     ; preds = %80, %78
  %82 = phi %struct.rtx_def* [ %79, %78 ], [ null, %80 ]
  %83 = load i32, i32* @x.39
  %84 = load i32, i32* @y.40
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %81
  store %struct.rtx_def* %82, %struct.rtx_def** %8, align 8
  %91 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %92 = icmp ne %struct.rtx_def* %91, null
  %93 = load i32, i32* @x.39
  %94 = load i32, i32* @y.40
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %324

; <label>:101:                                    ; preds = %originalBBpart212
  %102 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %103, i64 0, i64 1
  %105 = bitcast %union.rtunion_def* %104 to %struct.rtx_def**
  %106 = load %struct.rtx_def*, %struct.rtx_def** %105, align 8
  store %struct.rtx_def* %106, %struct.rtx_def** %9, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %108 = bitcast %struct.rtx_def* %107 to i32*
  %109 = load i32, i32* %108, align 8
  %110 = and i32 %109, 65535
  %111 = icmp eq i32 %110, 61
  br i1 %111, label %112, label %323

; <label>:112:                                    ; preds = %101
  %113 = load i32, i32* @x.39
  %114 = load i32, i32* @y.40
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %112
  %121 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1
  %123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %122, i64 0, i64 0
  %124 = bitcast %union.rtunion_def* %123 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %124, align 8
  store %struct.rtx_def* %125, %struct.rtx_def** %10, align 8
  %126 = load i32, i32* @x.39
  %127 = load i32, i32* @y.40
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %134

; <label>:134:                                    ; preds = %162, %originalBBpart216
  %135 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %136 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %137 = icmp ne %struct.rtx_def* %135, %136
  br i1 %137, label %138, label %160

; <label>:138:                                    ; preds = %134
  %139 = load i32, i32* @x.39
  %140 = load i32, i32* @y.40
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %138
  %147 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %148 = bitcast %struct.rtx_def* %147 to i32*
  %149 = load i32, i32* %148, align 8
  %150 = and i32 %149, 65535
  %151 = icmp ne i32 %150, 34
  %152 = load i32, i32* @x.39
  %153 = load i32, i32* @y.40
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart231, label %originalBB18alteredBB

originalBBpart231:                                ; preds = %originalBB18
  br label %160

; <label>:160:                                    ; preds = %originalBBpart231, %134
  %161 = phi i1 [ false, %134 ], [ %151, %originalBBpart231 ]
  br i1 %161, label %162, label %168

; <label>:162:                                    ; preds = %160
  %163 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %164, i64 0, i64 2
  %166 = bitcast %union.rtunion_def* %165 to %struct.rtx_def**
  %167 = load %struct.rtx_def*, %struct.rtx_def** %166, align 8
  store %struct.rtx_def* %167, %struct.rtx_def** %10, align 8
  br label %134

; <label>:168:                                    ; preds = %160
  %169 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %171 = icmp eq %struct.rtx_def* %169, %170
  br i1 %171, label %172, label %173

; <label>:172:                                    ; preds = %168
  store i32 0, i32* %4, align 4
  br label %325

; <label>:173:                                    ; preds = %168
  %174 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1
  %176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %175, i64 0, i64 3
  %177 = bitcast %union.rtunion_def* %176 to %struct.rtx_def**
  %178 = load %struct.rtx_def*, %struct.rtx_def** %177, align 8
  store %struct.rtx_def* %178, %struct.rtx_def** %11, align 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %180 = bitcast %struct.rtx_def* %179 to i32*
  %181 = load i32, i32* %180, align 8
  %182 = and i32 %181, 65535
  %183 = icmp eq i32 %182, 39
  br i1 %183, label %184, label %314

; <label>:184:                                    ; preds = %173
  %185 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %186 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1
  %187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %186, i64 0, i64 0
  %188 = bitcast %union.rtunion_def* %187 to %struct.rtvec_def**
  %189 = load %struct.rtvec_def*, %struct.rtvec_def** %188, align 8
  %190 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %189, i32 0, i32 0
  %191 = load i32, i32* %190, align 8
  %192 = sub nsw i32 %191, 1
  store i32 %192, i32* %12, align 4
  br label %193

; <label>:193:                                    ; preds = %originalBBpart245, %184
  %194 = load i32, i32* @x.39
  %195 = load i32, i32* @y.40
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %193
  %202 = load i32, i32* %12, align 4
  %203 = icmp sge i32 %202, 0
  %204 = load i32, i32* @x.39
  %205 = load i32, i32* @y.40
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %203, label %212, label %283

; <label>:212:                                    ; preds = %originalBBpart235
  %213 = load i32, i32* @x.39
  %214 = load i32, i32* @y.40
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %212
  %221 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %222 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %221, i32 0, i32 1
  %223 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %222, i64 0, i64 0
  %224 = bitcast %union.rtunion_def* %223 to %struct.rtvec_def**
  %225 = load %struct.rtvec_def*, %struct.rtvec_def** %224, align 8
  %226 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %225, i32 0, i32 1
  %227 = load i32, i32* %12, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %226, i64 0, i64 %228
  %230 = load %struct.rtx_def*, %struct.rtx_def** %229, align 8
  %231 = bitcast %struct.rtx_def* %230 to i32*
  %232 = load i32, i32* %231, align 8
  %233 = and i32 %232, 65535
  %234 = icmp eq i32 %233, 47
  %235 = load i32, i32* @x.39
  %236 = load i32, i32* @y.40
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %234, label %243, label %263

; <label>:243:                                    ; preds = %originalBBpart239
  %244 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %245 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1
  %246 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %245, i64 0, i64 0
  %247 = bitcast %union.rtunion_def* %246 to %struct.rtvec_def**
  %248 = load %struct.rtvec_def*, %struct.rtvec_def** %247, align 8
  %249 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %248, i32 0, i32 1
  %250 = load i32, i32* %12, align 4
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %249, i64 0, i64 %251
  %253 = load %struct.rtx_def*, %struct.rtx_def** %252, align 8
  %254 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %253, i32 0, i32 1
  %255 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %254, i64 0, i64 1
  %256 = bitcast %union.rtunion_def* %255 to %struct.rtx_def**
  %257 = load %struct.rtx_def*, %struct.rtx_def** %256, align 8
  %258 = bitcast %struct.rtx_def* %257 to i32*
  %259 = load i32, i32* %258, align 8
  %260 = and i32 %259, 65535
  %261 = icmp eq i32 %260, 50
  br i1 %261, label %262, label %263

; <label>:262:                                    ; preds = %243
  br label %283

; <label>:263:                                    ; preds = %243, %originalBBpart239
  br label %264

; <label>:264:                                    ; preds = %263
  %265 = load i32, i32* @x.39
  %266 = load i32, i32* @y.40
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %264
  %273 = load i32, i32* %12, align 4
  %274 = add nsw i32 %273, -1
  store i32 %274, i32* %12, align 4
  %275 = load i32, i32* @x.39
  %276 = load i32, i32* @y.40
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBBpart245, label %originalBB41alteredBB

originalBBpart245:                                ; preds = %originalBB41
  br label %193

; <label>:283:                                    ; preds = %262, %originalBBpart235
  %284 = load i32, i32* @x.39
  %285 = load i32, i32* @y.40
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %originalBB47alteredBB, %283
  %292 = load i32, i32* %12, align 4
  %293 = icmp slt i32 %292, 0
  %294 = load i32, i32* @x.39
  %295 = load i32, i32* @y.40
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br i1 %293, label %302, label %303

; <label>:302:                                    ; preds = %originalBBpart249
  store i32 0, i32* %4, align 4
  br label %325

; <label>:303:                                    ; preds = %originalBBpart249
  %304 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %305 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %304, i32 0, i32 1
  %306 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %305, i64 0, i64 0
  %307 = bitcast %union.rtunion_def* %306 to %struct.rtvec_def**
  %308 = load %struct.rtvec_def*, %struct.rtvec_def** %307, align 8
  %309 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %308, i32 0, i32 1
  %310 = load i32, i32* %12, align 4
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %309, i64 0, i64 %311
  %313 = load %struct.rtx_def*, %struct.rtx_def** %312, align 8
  store %struct.rtx_def* %313, %struct.rtx_def** %11, align 8
  br label %314

; <label>:314:                                    ; preds = %303, %173
  %315 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %316 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %317 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %318 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %317, i32 0, i32 1
  %319 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %318, i64 0, i64 6
  %320 = bitcast %union.rtunion_def* %319 to %struct.rtx_def**
  %321 = load %struct.rtx_def*, %struct.rtx_def** %320, align 8
  %322 = call i32 @insn_dead_p(%struct.propagate_block_info* %315, %struct.rtx_def* %316, i32 1, %struct.rtx_def* %321)
  store i32 %322, i32* %4, align 4
  br label %325

; <label>:323:                                    ; preds = %101
  br label %324

; <label>:324:                                    ; preds = %323, %originalBBpart212
  store i32 1, i32* %4, align 4
  br label %325

; <label>:325:                                    ; preds = %324, %314, %302, %172
  %326 = load i32, i32* %4, align 4
  ret i32 %326

originalBBalteredBB:                              ; preds = %originalBB, %22
  %327 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %328 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %327, i32 0, i32 1
  %329 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %328, i64 0, i64 3
  %330 = bitcast %union.rtunion_def* %329 to %struct.rtx_def**
  %331 = load %struct.rtx_def*, %struct.rtx_def** %330, align 8
  %332 = bitcast %struct.rtx_def* %331 to i32*
  %333 = load i32, i32* %332, align 8
  %_ = shl i32 %333, 65535
  %_1 = sub i32 0, %333
  %gen = add i32 %_1, 65535
  %_2 = sub i32 0, %333
  %gen3 = add i32 %_2, 65535
  %_4 = sub i32 0, %333
  %gen5 = add i32 %_4, 65535
  %334 = and i32 %333, 65535
  %335 = icmp eq i32 %334, 47
  br label %originalBB

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  %336 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %337 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %338 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %337, i32 0, i32 1
  %339 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %338, i64 0, i64 3
  %340 = bitcast %union.rtunion_def* %339 to %struct.rtx_def**
  %341 = load %struct.rtx_def*, %struct.rtx_def** %340, align 8
  %342 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %336, %struct.rtx_def* %341)
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %81
  store %struct.rtx_def* %82, %struct.rtx_def** %8, align 8
  %343 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %344 = icmp ne %struct.rtx_def* %343, null
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %112
  %345 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %345, i32 0, i32 1
  %347 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %346, i64 0, i64 0
  %348 = bitcast %union.rtunion_def* %347 to %struct.rtx_def**
  %349 = load %struct.rtx_def*, %struct.rtx_def** %348, align 8
  store %struct.rtx_def* %349, %struct.rtx_def** %10, align 8
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %138
  %350 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %351 = bitcast %struct.rtx_def* %350 to i32*
  %352 = load i32, i32* %351, align 8
  %_19 = sub i32 0, %352
  %gen20 = add i32 %_19, 65535
  %_21 = sub i32 0, %352
  %gen22 = add i32 %_21, 65535
  %_23 = sub i32 %352, 65535
  %gen24 = mul i32 %_23, 65535
  %_25 = sub i32 %352, 65535
  %gen26 = mul i32 %_25, 65535
  %_27 = sub i32 0, %352
  %gen28 = add i32 %_27, 65535
  %353 = and i32 %352, 65535
  %354 = icmp ne i32 %353, 34
  br label %originalBB18

originalBB33alteredBB:                            ; preds = %originalBB33, %193
  %355 = load i32, i32* %12, align 4
  %356 = icmp sge i32 %355, 0
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %212
  %357 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %358 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %357, i32 0, i32 1
  %359 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %358, i64 0, i64 0
  %360 = bitcast %union.rtunion_def* %359 to %struct.rtvec_def**
  %361 = load %struct.rtvec_def*, %struct.rtvec_def** %360, align 8
  %362 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %361, i32 0, i32 1
  %363 = load i32, i32* %12, align 4
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %362, i64 0, i64 %364
  %366 = load %struct.rtx_def*, %struct.rtx_def** %365, align 8
  %367 = bitcast %struct.rtx_def* %366 to i32*
  %368 = load i32, i32* %367, align 8
  %369 = and i32 %368, 65535
  %370 = icmp eq i32 %369, 47
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %264
  %371 = load i32, i32* %12, align 4
  %_42 = sub i32 %371, -1
  %gen43 = mul i32 %_42, -1
  %372 = add nsw i32 %371, -1
  store i32 %372, i32* %12, align 4
  br label %originalBB41

originalBB47alteredBB:                            ; preds = %originalBB47, %283
  %373 = load i32, i32* %12, align 4
  %374 = icmp slt i32 %373, 0
  br label %originalBB47
}

declare i32 @prologue_epilogue_contains(%struct.rtx_def*) #1

declare i32 @sibcall_epilogue_contains(%struct.rtx_def*) #1

; Function Attrs: noreturn
declare void @_fatal_insn(i8*, %struct.rtx_def*, i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_set_regs(%struct.propagate_block_info*, %struct.rtx_def*, %struct.rtx_def*) #0 {
  %4 = load i32, i32* @x.41
  %5 = load i32, i32* @y.42
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %3
  %12 = alloca %struct.propagate_block_info*, align 8
  %13 = alloca %struct.rtx_def*, align 8
  %14 = alloca %struct.rtx_def*, align 8
  %15 = alloca %struct.rtx_def*, align 8
  %16 = alloca %struct.rtx_def*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %struct.rtx_def*, align 8
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %12, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %13, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %14, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %15, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %21 = icmp ne %struct.rtx_def* %20, null
  %22 = load i32, i32* @x.41
  %23 = load i32, i32* @y.42
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %143

; <label>:30:                                     ; preds = %originalBBpart2
  %31 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %32, i64 0, i64 6
  %34 = bitcast %union.rtunion_def* %33 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %16, align 8
  br label %36

; <label>:36:                                     ; preds = %originalBBpart225, %30
  %37 = load i32, i32* @x.41
  %38 = load i32, i32* @y.42
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %36
  %45 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %46 = icmp ne %struct.rtx_def* %45, null
  %47 = load i32, i32* @x.41
  %48 = load i32, i32* @y.42
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %46, label %55, label %142

; <label>:55:                                     ; preds = %originalBBpart24
  %56 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %58 = load i32, i32* %57, align 8
  %59 = lshr i32 %58, 16
  %60 = and i32 %59, 255
  %61 = icmp eq i32 %60, 2
  br i1 %61, label %62, label %119

; <label>:62:                                     ; preds = %55
  %63 = load i32, i32* @x.41
  %64 = load i32, i32* @y.42
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %62
  %71 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %73, i64 0, i64 0
  %75 = bitcast %union.rtunion_def* %74 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %75, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %78 = bitcast %struct.rtx_def* %77 to i32*
  %79 = load i32, i32* %78, align 8
  %80 = and i32 %79, 65535
  %81 = icmp eq i32 %80, 38
  %82 = load i32, i32* @x.41
  %83 = load i32, i32* @y.42
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart217, label %originalBB6alteredBB

originalBBpart217:                                ; preds = %originalBB6
  br i1 %81, label %90, label %96

; <label>:90:                                     ; preds = %originalBBpart217
  %91 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %92, i64 0, i64 0
  %94 = bitcast %union.rtunion_def* %93 to %struct.rtx_def**
  %95 = load %struct.rtx_def*, %struct.rtx_def** %94, align 8
  br label %113

; <label>:96:                                     ; preds = %originalBBpart217
  %97 = load i32, i32* @x.41
  %98 = load i32, i32* @y.42
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %96
  %105 = load i32, i32* @x.41
  %106 = load i32, i32* @y.42
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %113

; <label>:113:                                    ; preds = %originalBBpart221, %90
  %114 = phi %struct.rtx_def* [ %95, %90 ], [ null, %originalBBpart221 ]
  %115 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %116 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %117 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %116, i32 0, i32 9
  %118 = load i32, i32* %117, align 8
  call void @mark_set_1(%struct.propagate_block_info* %71, i32 47, %struct.rtx_def* %76, %struct.rtx_def* %114, %struct.rtx_def* %115, i32 %118)
  br label %119

; <label>:119:                                    ; preds = %113, %55
  br label %120

; <label>:120:                                    ; preds = %119
  %121 = load i32, i32* @x.41
  %122 = load i32, i32* @y.42
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %120
  %129 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1
  %131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %130, i64 0, i64 1
  %132 = bitcast %union.rtunion_def* %131 to %struct.rtx_def**
  %133 = load %struct.rtx_def*, %struct.rtx_def** %132, align 8
  store %struct.rtx_def* %133, %struct.rtx_def** %16, align 8
  %134 = load i32, i32* @x.41
  %135 = load i32, i32* @y.42
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %36

; <label>:142:                                    ; preds = %originalBBpart24
  br label %143

; <label>:143:                                    ; preds = %142, %originalBBpart2
  %144 = load i32, i32* @x.41
  %145 = load i32, i32* @y.42
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %originalBB27alteredBB, %143
  %152 = load i32, i32* @x.41
  %153 = load i32, i32* @y.42
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %160

; <label>:160:                                    ; preds = %210, %originalBBpart229
  %161 = load i32, i32* @x.41
  %162 = load i32, i32* @y.42
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %originalBB31alteredBB, %160
  %169 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %170 = bitcast %struct.rtx_def* %169 to i32*
  %171 = load i32, i32* %170, align 8
  %172 = and i32 %171, 65535
  store i32 %172, i32* %17, align 4
  %173 = load i32, i32* @x.41
  %174 = load i32, i32* @y.42
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart246, label %originalBB31alteredBB

originalBBpart246:                                ; preds = %originalBB31
  switch i32 %172, label %343 [
    i32 47, label %181
    i32 49, label %181
    i32 38, label %210
    i32 39, label %221
  ]

; <label>:181:                                    ; preds = %originalBBpart246, %originalBBpart246
  %182 = load i32, i32* @x.41
  %183 = load i32, i32* @y.42
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %originalBB48alteredBB, %181
  %190 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %191 = load i32, i32* %17, align 4
  %192 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %192, i32 0, i32 1
  %194 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %193, i64 0, i64 0
  %195 = bitcast %union.rtunion_def* %194 to %struct.rtx_def**
  %196 = load %struct.rtx_def*, %struct.rtx_def** %195, align 8
  %197 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %198 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %199 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %200 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %199, i32 0, i32 9
  %201 = load i32, i32* %200, align 8
  call void @mark_set_1(%struct.propagate_block_info* %190, i32 %191, %struct.rtx_def* %196, %struct.rtx_def* %197, %struct.rtx_def* %198, i32 %201)
  %202 = load i32, i32* @x.41
  %203 = load i32, i32* @y.42
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br label %344

; <label>:210:                                    ; preds = %originalBBpart246
  %211 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %211, i32 0, i32 1
  %213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %212, i64 0, i64 0
  %214 = bitcast %union.rtunion_def* %213 to %struct.rtx_def**
  %215 = load %struct.rtx_def*, %struct.rtx_def** %214, align 8
  store %struct.rtx_def* %215, %struct.rtx_def** %15, align 8
  %216 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %217 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %216, i32 0, i32 1
  %218 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %217, i64 0, i64 1
  %219 = bitcast %union.rtunion_def* %218 to %struct.rtx_def**
  %220 = load %struct.rtx_def*, %struct.rtx_def** %219, align 8
  store %struct.rtx_def* %220, %struct.rtx_def** %13, align 8
  br label %160

; <label>:221:                                    ; preds = %originalBBpart246
  %222 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1
  %224 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %223, i64 0, i64 0
  %225 = bitcast %union.rtunion_def* %224 to %struct.rtvec_def**
  %226 = load %struct.rtvec_def*, %struct.rtvec_def** %225, align 8
  %227 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %226, i32 0, i32 0
  %228 = load i32, i32* %227, align 8
  %229 = sub nsw i32 %228, 1
  store i32 %229, i32* %18, align 4
  br label %230

; <label>:230:                                    ; preds = %originalBBpart276, %221
  %231 = load i32, i32* %18, align 4
  %232 = icmp sge i32 %231, 0
  br i1 %232, label %233, label %342

; <label>:233:                                    ; preds = %230
  %234 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %234, i32 0, i32 1
  %236 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %235, i64 0, i64 0
  %237 = bitcast %union.rtunion_def* %236 to %struct.rtvec_def**
  %238 = load %struct.rtvec_def*, %struct.rtvec_def** %237, align 8
  %239 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %238, i32 0, i32 1
  %240 = load i32, i32* %18, align 4
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %239, i64 0, i64 %241
  %243 = load %struct.rtx_def*, %struct.rtx_def** %242, align 8
  store %struct.rtx_def* %243, %struct.rtx_def** %19, align 8
  %244 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %245 = bitcast %struct.rtx_def* %244 to i32*
  %246 = load i32, i32* %245, align 8
  %247 = and i32 %246, 65535
  store i32 %247, i32* %17, align 4
  switch i32 %247, label %321 [
    i32 38, label %248
    i32 47, label %308
    i32 49, label %308
  ]

; <label>:248:                                    ; preds = %233
  %249 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %250 = icmp ne %struct.rtx_def* %249, null
  br i1 %250, label %251, label %252

; <label>:251:                                    ; preds = %248
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 2468, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.mark_set_regs, i32 0, i32 0)) #5
  unreachable

; <label>:252:                                    ; preds = %248
  %253 = load i32, i32* @x.41
  %254 = load i32, i32* @y.42
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %originalBB52alteredBB, %252
  %261 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %261, i32 0, i32 1
  %263 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %262, i64 0, i64 0
  %264 = bitcast %union.rtunion_def* %263 to %struct.rtx_def**
  %265 = load %struct.rtx_def*, %struct.rtx_def** %264, align 8
  store %struct.rtx_def* %265, %struct.rtx_def** %15, align 8
  %266 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %267 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %266, i32 0, i32 1
  %268 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %267, i64 0, i64 1
  %269 = bitcast %union.rtunion_def* %268 to %struct.rtx_def**
  %270 = load %struct.rtx_def*, %struct.rtx_def** %269, align 8
  store %struct.rtx_def* %270, %struct.rtx_def** %19, align 8
  %271 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %272 = bitcast %struct.rtx_def* %271 to i32*
  %273 = load i32, i32* %272, align 8
  %274 = and i32 %273, 65535
  %275 = icmp ne i32 %274, 47
  %276 = load i32, i32* @x.41
  %277 = load i32, i32* @y.42
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBBpart264, label %originalBB52alteredBB

originalBBpart264:                                ; preds = %originalBB52
  br i1 %275, label %284, label %291

; <label>:284:                                    ; preds = %originalBBpart264
  %285 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %286 = bitcast %struct.rtx_def* %285 to i32*
  %287 = load i32, i32* %286, align 8
  %288 = and i32 %287, 65535
  %289 = icmp ne i32 %288, 49
  br i1 %289, label %290, label %291

; <label>:290:                                    ; preds = %284
  br label %322

; <label>:291:                                    ; preds = %284, %originalBBpart264
  %292 = load i32, i32* @x.41
  %293 = load i32, i32* @y.42
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %291
  %300 = load i32, i32* @x.41
  %301 = load i32, i32* @y.42
  %302 = sub i32 %300, 1
  %303 = mul i32 %300, %302
  %304 = urem i32 %303, 2
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %305, %306
  br i1 %307, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %308

; <label>:308:                                    ; preds = %originalBBpart268, %233, %233
  %309 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %310 = load i32, i32* %17, align 4
  %311 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %312 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %311, i32 0, i32 1
  %313 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %312, i64 0, i64 0
  %314 = bitcast %union.rtunion_def* %313 to %struct.rtx_def**
  %315 = load %struct.rtx_def*, %struct.rtx_def** %314, align 8
  %316 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %317 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %318 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %319 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %318, i32 0, i32 9
  %320 = load i32, i32* %319, align 8
  call void @mark_set_1(%struct.propagate_block_info* %309, i32 %310, %struct.rtx_def* %315, %struct.rtx_def* %316, %struct.rtx_def* %317, i32 %320)
  br label %322

; <label>:321:                                    ; preds = %233
  br label %322

; <label>:322:                                    ; preds = %321, %308, %290
  br label %323

; <label>:323:                                    ; preds = %322
  %324 = load i32, i32* @x.41
  %325 = load i32, i32* @y.42
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %originalBB70alteredBB, %323
  %332 = load i32, i32* %18, align 4
  %333 = add nsw i32 %332, -1
  store i32 %333, i32* %18, align 4
  %334 = load i32, i32* @x.41
  %335 = load i32, i32* @y.42
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart276, label %originalBB70alteredBB

originalBBpart276:                                ; preds = %originalBB70
  br label %230

; <label>:342:                                    ; preds = %230
  br label %344

; <label>:343:                                    ; preds = %originalBBpart246
  br label %344

; <label>:344:                                    ; preds = %343, %342, %originalBBpart250
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %3
  %345 = alloca %struct.propagate_block_info*, align 8
  %346 = alloca %struct.rtx_def*, align 8
  %347 = alloca %struct.rtx_def*, align 8
  %348 = alloca %struct.rtx_def*, align 8
  %349 = alloca %struct.rtx_def*, align 8
  %350 = alloca i32, align 4
  %351 = alloca i32, align 4
  %352 = alloca %struct.rtx_def*, align 8
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %345, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %346, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %347, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %348, align 8
  %353 = load %struct.rtx_def*, %struct.rtx_def** %347, align 8
  %354 = icmp ne %struct.rtx_def* %353, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %355 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %356 = icmp ne %struct.rtx_def* %355, null
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %62
  %357 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %358 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %359 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %358, i32 0, i32 1
  %360 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %359, i64 0, i64 0
  %361 = bitcast %union.rtunion_def* %360 to %struct.rtx_def**
  %362 = load %struct.rtx_def*, %struct.rtx_def** %361, align 8
  %363 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %364 = bitcast %struct.rtx_def* %363 to i32*
  %365 = load i32, i32* %364, align 8
  %_ = sub i32 0, %365
  %gen = add i32 %_, 65535
  %_7 = sub i32 0, %365
  %gen8 = add i32 %_7, 65535
  %_9 = sub i32 0, %365
  %gen10 = add i32 %_9, 65535
  %_11 = sub i32 %365, 65535
  %gen12 = mul i32 %_11, 65535
  %_13 = shl i32 %365, 65535
  %_14 = sub i32 0, %365
  %gen15 = add i32 %_14, 65535
  %366 = and i32 %365, 65535
  %367 = icmp eq i32 %366, 38
  br label %originalBB6

originalBB19alteredBB:                            ; preds = %originalBB19, %96
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %120
  %368 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %369 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %368, i32 0, i32 1
  %370 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %369, i64 0, i64 1
  %371 = bitcast %union.rtunion_def* %370 to %struct.rtx_def**
  %372 = load %struct.rtx_def*, %struct.rtx_def** %371, align 8
  store %struct.rtx_def* %372, %struct.rtx_def** %16, align 8
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %143
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %160
  %373 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %374 = bitcast %struct.rtx_def* %373 to i32*
  %375 = load i32, i32* %374, align 8
  %_32 = sub i32 0, %375
  %gen33 = add i32 %_32, 65535
  %_34 = shl i32 %375, 65535
  %_35 = sub i32 %375, 65535
  %gen36 = mul i32 %_35, 65535
  %_37 = sub i32 %375, 65535
  %gen38 = mul i32 %_37, 65535
  %_39 = shl i32 %375, 65535
  %_40 = sub i32 0, %375
  %gen41 = add i32 %_40, 65535
  %_42 = sub i32 %375, 65535
  %gen43 = mul i32 %_42, 65535
  %_44 = shl i32 %375, 65535
  %376 = and i32 %375, 65535
  store i32 %376, i32* %17, align 4
  br label %originalBB31

originalBB48alteredBB:                            ; preds = %originalBB48, %181
  %377 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %378 = load i32, i32* %17, align 4
  %379 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %380 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %379, i32 0, i32 1
  %381 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %380, i64 0, i64 0
  %382 = bitcast %union.rtunion_def* %381 to %struct.rtx_def**
  %383 = load %struct.rtx_def*, %struct.rtx_def** %382, align 8
  %384 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %385 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %386 = load %struct.propagate_block_info*, %struct.propagate_block_info** %12, align 8
  %387 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %386, i32 0, i32 9
  %388 = load i32, i32* %387, align 8
  call void @mark_set_1(%struct.propagate_block_info* %377, i32 %378, %struct.rtx_def* %383, %struct.rtx_def* %384, %struct.rtx_def* %385, i32 %388)
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %252
  %389 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %390 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %389, i32 0, i32 1
  %391 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %390, i64 0, i64 0
  %392 = bitcast %union.rtunion_def* %391 to %struct.rtx_def**
  %393 = load %struct.rtx_def*, %struct.rtx_def** %392, align 8
  store %struct.rtx_def* %393, %struct.rtx_def** %15, align 8
  %394 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %395 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %394, i32 0, i32 1
  %396 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %395, i64 0, i64 1
  %397 = bitcast %union.rtunion_def* %396 to %struct.rtx_def**
  %398 = load %struct.rtx_def*, %struct.rtx_def** %397, align 8
  store %struct.rtx_def* %398, %struct.rtx_def** %19, align 8
  %399 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %400 = bitcast %struct.rtx_def* %399 to i32*
  %401 = load i32, i32* %400, align 8
  %_53 = sub i32 0, %401
  %gen54 = add i32 %_53, 65535
  %_55 = sub i32 %401, 65535
  %gen56 = mul i32 %_55, 65535
  %_57 = sub i32 %401, 65535
  %gen58 = mul i32 %_57, 65535
  %_59 = sub i32 0, %401
  %gen60 = add i32 %_59, 65535
  %_61 = sub i32 %401, 65535
  %gen62 = mul i32 %_61, 65535
  %402 = and i32 %401, 65535
  %403 = icmp ne i32 %402, 47
  br label %originalBB52

originalBB66alteredBB:                            ; preds = %originalBB66, %291
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %323
  %404 = load i32, i32* %18, align 4
  %_71 = sub i32 %404, -1
  %gen72 = mul i32 %_71, -1
  %_73 = sub i32 0, %404
  %gen74 = add i32 %_73, -1
  %405 = add nsw i32 %404, -1
  store i32 %405, i32* %18, align 4
  br label %originalBB70
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @propagate_block_delete_libcall(%struct.rtx_def*, %struct.rtx_def*) #0 {
  %3 = alloca %struct.rtx_def*, align 8
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %3, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %4, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %8, i64 0, i64 0
  %10 = bitcast %union.rtunion_def* %9 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %5, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %13, i64 0, i64 1
  %15 = bitcast %union.rtunion_def* %14 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %6, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  call void @delete_insn_chain(%struct.rtx_def* %17, %struct.rtx_def* %18)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  ret %struct.rtx_def* %19
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_block_delete_insn(%struct.basic_block_def*, %struct.rtx_def*) #0 {
  %3 = alloca %struct.basic_block_def*, align 8
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.rtx_def*, align 8
  %8 = alloca %struct.rtx_def*, align 8
  %9 = alloca %struct.rtx_def*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.basic_block_def* %0, %struct.basic_block_def** %3, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %4, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %14 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %13, i32 13, %struct.rtx_def* null)
  store %struct.rtx_def* %14, %struct.rtx_def** %5, align 8
  store i8 0, i8* %6, align 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %16 = icmp ne %struct.rtx_def* %15, null
  br i1 %16, label %17, label %189

; <label>:17:                                     ; preds = %2
  %18 = load i32, i32* @x.45
  %19 = load i32, i32* @y.46
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %17
  %26 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = and i32 %28, 65535
  %30 = icmp eq i32 %29, 36
  %31 = load i32, i32* @x.45
  %32 = load i32, i32* @y.46
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %30, label %39, label %189

; <label>:39:                                     ; preds = %originalBBpart2
  %40 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %41, i64 0, i64 0
  %43 = bitcast %union.rtunion_def* %42 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %43, align 8
  store %struct.rtx_def* %44, %struct.rtx_def** %7, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %46, i64 0, i64 3
  %48 = bitcast %union.rtunion_def* %47 to i32*
  %49 = load i32, i32* %48, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %52 = load i32, i32* %51, align 8
  %53 = lshr i32 %52, 28
  %54 = and i32 %53, 1
  %55 = add nsw i32 1, %54
  %56 = icmp eq i32 %49, %55
  br i1 %56, label %57, label %188

; <label>:57:                                     ; preds = %39
  %58 = load i32, i32* @x.45
  %59 = load i32, i32* @y.46
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %57
  %66 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %67 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %66)
  store %struct.rtx_def* %67, %struct.rtx_def** %8, align 8
  %68 = icmp ne %struct.rtx_def* %67, null
  %69 = load i32, i32* @x.45
  %70 = load i32, i32* @y.46
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %188

; <label>:77:                                     ; preds = %originalBBpart28
  %78 = load i32, i32* @x.45
  %79 = load i32, i32* @y.46
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %77
  %86 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %87 = bitcast %struct.rtx_def* %86 to i32*
  %88 = load i32, i32* %87, align 8
  %89 = and i32 %88, 65535
  %90 = icmp eq i32 %89, 33
  %91 = load i32, i32* @x.45
  %92 = load i32, i32* @y.46
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart217, label %originalBB10alteredBB

originalBBpart217:                                ; preds = %originalBB10
  br i1 %90, label %99, label %188

; <label>:99:                                     ; preds = %originalBBpart217
  %100 = load i32, i32* @x.45
  %101 = load i32, i32* @y.46
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %99
  %108 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %109, i64 0, i64 3
  %111 = bitcast %union.rtunion_def* %110 to %struct.rtx_def**
  %112 = load %struct.rtx_def*, %struct.rtx_def** %111, align 8
  %113 = bitcast %struct.rtx_def* %112 to i32*
  %114 = load i32, i32* %113, align 8
  %115 = and i32 %114, 65535
  %116 = icmp eq i32 %115, 44
  %117 = load i32, i32* @x.45
  %118 = load i32, i32* @y.46
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart231, label %originalBB19alteredBB

originalBBpart231:                                ; preds = %originalBB19
  br i1 %116, label %135, label %125

; <label>:125:                                    ; preds = %originalBBpart231
  %126 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1
  %128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %127, i64 0, i64 3
  %129 = bitcast %union.rtunion_def* %128 to %struct.rtx_def**
  %130 = load %struct.rtx_def*, %struct.rtx_def** %129, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %132 = load i32, i32* %131, align 8
  %133 = and i32 %132, 65535
  %134 = icmp eq i32 %133, 45
  br i1 %134, label %135, label %188

; <label>:135:                                    ; preds = %125, %originalBBpart231
  %136 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %137, i64 0, i64 3
  %139 = bitcast %union.rtunion_def* %138 to %struct.rtx_def**
  %140 = load %struct.rtx_def*, %struct.rtx_def** %139, align 8
  store %struct.rtx_def* %140, %struct.rtx_def** %9, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %142 = bitcast %struct.rtx_def* %141 to i32*
  %143 = load i32, i32* %142, align 8
  %144 = and i32 %143, 65535
  %145 = icmp eq i32 %144, 45
  %146 = zext i1 %145 to i32
  store i32 %146, i32* %10, align 4
  %147 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1
  %149 = load i32, i32* %10, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %148, i64 0, i64 %150
  %152 = bitcast %union.rtunion_def* %151 to %struct.rtvec_def**
  %153 = load %struct.rtvec_def*, %struct.rtvec_def** %152, align 8
  %154 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %153, i32 0, i32 0
  %155 = load i32, i32* %154, align 8
  store i32 %155, i32* %11, align 4
  store i32 0, i32* %12, align 4
  br label %156

; <label>:156:                                    ; preds = %182, %135
  %157 = load i32, i32* %12, align 4
  %158 = load i32, i32* %11, align 4
  %159 = icmp slt i32 %157, %158
  br i1 %159, label %160, label %185

; <label>:160:                                    ; preds = %156
  %161 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1
  %163 = load i32, i32* %10, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %162, i64 0, i64 %164
  %166 = bitcast %union.rtunion_def* %165 to %struct.rtvec_def**
  %167 = load %struct.rtvec_def*, %struct.rtvec_def** %166, align 8
  %168 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %167, i32 0, i32 1
  %169 = load i32, i32* %12, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %168, i64 0, i64 %170
  %172 = load %struct.rtx_def*, %struct.rtx_def** %171, align 8
  %173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %173, i64 0, i64 0
  %175 = bitcast %union.rtunion_def* %174 to %struct.rtx_def**
  %176 = load %struct.rtx_def*, %struct.rtx_def** %175, align 8
  %177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1
  %178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %177, i64 0, i64 3
  %179 = bitcast %union.rtunion_def* %178 to i32*
  %180 = load i32, i32* %179, align 8
  %181 = add nsw i32 %180, -1
  store i32 %181, i32* %179, align 8
  br label %182

; <label>:182:                                    ; preds = %160
  %183 = load i32, i32* %12, align 4
  %184 = add nsw i32 %183, 1
  store i32 %184, i32* %12, align 4
  br label %156

; <label>:185:                                    ; preds = %156
  %186 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %187 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %186)
  br label %188

; <label>:188:                                    ; preds = %185, %125, %originalBBpart217, %originalBBpart28, %39
  br label %189

; <label>:189:                                    ; preds = %188, %originalBBpart2, %2
  %190 = load %struct.basic_block_def*, %struct.basic_block_def** %3, align 8
  %191 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %190, i32 0, i32 1
  %192 = load %struct.rtx_def*, %struct.rtx_def** %191, align 8
  %193 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %194 = icmp eq %struct.rtx_def* %192, %193
  br i1 %194, label %195, label %196

; <label>:195:                                    ; preds = %189
  store i8 1, i8* %6, align 1
  br label %196

; <label>:196:                                    ; preds = %195, %189
  %197 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %198 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %197)
  %199 = load i8, i8* %6, align 1
  %200 = trunc i8 %199 to i1
  br i1 %200, label %201, label %204

; <label>:201:                                    ; preds = %196
  %202 = load %struct.basic_block_def*, %struct.basic_block_def** %3, align 8
  %203 = call zeroext i1 @purge_dead_edges(%struct.basic_block_def* %202)
  br label %204

; <label>:204:                                    ; preds = %201, %196
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %17
  %205 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %206 = bitcast %struct.rtx_def* %205 to i32*
  %207 = load i32, i32* %206, align 8
  %_ = sub i32 0, %207
  %gen = add i32 %_, 65535
  %_1 = shl i32 %207, 65535
  %_2 = sub i32 %207, 65535
  %gen3 = mul i32 %_2, 65535
  %_4 = sub i32 %207, 65535
  %gen5 = mul i32 %_4, 65535
  %208 = and i32 %207, 65535
  %209 = icmp eq i32 %208, 36
  br label %originalBB

originalBB6alteredBB:                             ; preds = %originalBB6, %57
  %210 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %211 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %210)
  store %struct.rtx_def* %211, %struct.rtx_def** %8, align 8
  %212 = icmp ne %struct.rtx_def* %211, null
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %213 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %214 = bitcast %struct.rtx_def* %213 to i32*
  %215 = load i32, i32* %214, align 8
  %_11 = shl i32 %215, 65535
  %_12 = sub i32 0, %215
  %gen13 = add i32 %_12, 65535
  %_14 = sub i32 0, %215
  %gen15 = add i32 %_14, 65535
  %216 = and i32 %215, 65535
  %217 = icmp eq i32 %216, 33
  br label %originalBB10

originalBB19alteredBB:                            ; preds = %originalBB19, %99
  %218 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %219 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %218, i32 0, i32 1
  %220 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %219, i64 0, i64 3
  %221 = bitcast %union.rtunion_def* %220 to %struct.rtx_def**
  %222 = load %struct.rtx_def*, %struct.rtx_def** %221, align 8
  %223 = bitcast %struct.rtx_def* %222 to i32*
  %224 = load i32, i32* %223, align 8
  %_20 = sub i32 0, %224
  %gen21 = add i32 %_20, 65535
  %_22 = shl i32 %224, 65535
  %_23 = sub i32 %224, 65535
  %gen24 = mul i32 %_23, 65535
  %_25 = shl i32 %224, 65535
  %_26 = sub i32 0, %224
  %gen27 = add i32 %_26, 65535
  %_28 = shl i32 %224, 65535
  %225 = and i32 %224, 65535
  %226 = icmp eq i32 %225, 44
  br label %originalBB19
}

declare void @free_EXPR_LIST_list(%struct.rtx_def**) #1

; Function Attrs: noinline nounwind uwtable
define internal void @mark_set_1(%struct.propagate_block_info*, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #0 {
  %7 = alloca %struct.propagate_block_info*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.rtx_def*, align 8
  %10 = alloca %struct.rtx_def*, align 8
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca %struct.rtx_def*, align 8
  %23 = alloca i32, align 4
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %7, align 8
  store i32 %1, i32* %8, align 4
  store %struct.rtx_def* %2, %struct.rtx_def** %9, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %10, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %11, align 8
  store i32 %5, i32* %12, align 4
  store i32 -1, i32* %13, align 4
  store i32 -1, i32* %14, align 4
  store i64 0, i64* %15, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %26, 65535
  switch i32 %27, label %780 [
    i32 39, label %28
    i32 133, label %97
    i32 132, label %97
    i32 64, label %97
    i32 61, label %244
    i32 63, label %482
  ]

; <label>:28:                                     ; preds = %6
  %29 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %30, i64 0, i64 0
  %32 = bitcast %union.rtunion_def* %31 to %struct.rtvec_def**
  %33 = load %struct.rtvec_def*, %struct.rtvec_def** %32, align 8
  %34 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = sub nsw i32 %35, 1
  store i32 %36, i32* %16, align 4
  br label %37

; <label>:37:                                     ; preds = %93, %28
  %38 = load i32, i32* @x.47
  %39 = load i32, i32* @y.48
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %37
  %46 = load i32, i32* %16, align 4
  %47 = icmp sge i32 %46, 0
  %48 = load i32, i32* @x.47
  %49 = load i32, i32* @y.48
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %47, label %56, label %96

; <label>:56:                                     ; preds = %originalBBpart2
  %57 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %58, i64 0, i64 0
  %60 = bitcast %union.rtunion_def* %59 to %struct.rtvec_def**
  %61 = load %struct.rtvec_def*, %struct.rtvec_def** %60, align 8
  %62 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %61, i32 0, i32 1
  %63 = load i32, i32* %16, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %62, i64 0, i64 %64
  %66 = load %struct.rtx_def*, %struct.rtx_def** %65, align 8
  %67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %67, i64 0, i64 0
  %69 = bitcast %union.rtunion_def* %68 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %69, align 8
  %71 = icmp ne %struct.rtx_def* %70, null
  br i1 %71, label %72, label %92

; <label>:72:                                     ; preds = %56
  %73 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %74 = load i32, i32* %8, align 4
  %75 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %76, i64 0, i64 0
  %78 = bitcast %union.rtunion_def* %77 to %struct.rtvec_def**
  %79 = load %struct.rtvec_def*, %struct.rtvec_def** %78, align 8
  %80 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %79, i32 0, i32 1
  %81 = load i32, i32* %16, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %80, i64 0, i64 %82
  %84 = load %struct.rtx_def*, %struct.rtx_def** %83, align 8
  %85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %85, i64 0, i64 0
  %87 = bitcast %union.rtunion_def* %86 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %87, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %91 = load i32, i32* %12, align 4
  call void @mark_set_1(%struct.propagate_block_info* %73, i32 %74, %struct.rtx_def* %88, %struct.rtx_def* %89, %struct.rtx_def* %90, i32 %91)
  br label %92

; <label>:92:                                     ; preds = %72, %56
  br label %93

; <label>:93:                                     ; preds = %92
  %94 = load i32, i32* %16, align 4
  %95 = add nsw i32 %94, -1
  store i32 %95, i32* %16, align 4
  br label %37

; <label>:96:                                     ; preds = %originalBBpart2
  br label %1929

; <label>:97:                                     ; preds = %6, %6, %6
  br label %98

; <label>:98:                                     ; preds = %originalBBpart228, %97
  %99 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1
  %101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %100, i64 0, i64 0
  %102 = bitcast %union.rtunion_def* %101 to %struct.rtx_def**
  %103 = load %struct.rtx_def*, %struct.rtx_def** %102, align 8
  store %struct.rtx_def* %103, %struct.rtx_def** %9, align 8
  br label %104

; <label>:104:                                    ; preds = %98
  %105 = load i32, i32* @x.47
  %106 = load i32, i32* @y.48
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %104
  %113 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %114 = bitcast %struct.rtx_def* %113 to i32*
  %115 = load i32, i32* %114, align 8
  %116 = and i32 %115, 65535
  %117 = icmp eq i32 %116, 63
  %118 = load i32, i32* @x.47
  %119 = load i32, i32* @y.48
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart29, label %originalBB1alteredBB

originalBBpart29:                                 ; preds = %originalBB1
  br i1 %117, label %160, label %126

; <label>:126:                                    ; preds = %originalBBpart29
  %127 = load i32, i32* @x.47
  %128 = load i32, i32* @y.48
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %originalBB11alteredBB, %126
  %135 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %136 = bitcast %struct.rtx_def* %135 to i32*
  %137 = load i32, i32* %136, align 8
  %138 = and i32 %137, 65535
  %139 = icmp eq i32 %138, 133
  %140 = load i32, i32* @x.47
  %141 = load i32, i32* @y.48
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart224, label %originalBB11alteredBB

originalBBpart224:                                ; preds = %originalBB11
  br i1 %139, label %160, label %148

; <label>:148:                                    ; preds = %originalBBpart224
  %149 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %150 = bitcast %struct.rtx_def* %149 to i32*
  %151 = load i32, i32* %150, align 8
  %152 = and i32 %151, 65535
  %153 = icmp eq i32 %152, 132
  br i1 %153, label %160, label %154

; <label>:154:                                    ; preds = %148
  %155 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %157 = load i32, i32* %156, align 8
  %158 = and i32 %157, 65535
  %159 = icmp eq i32 %158, 64
  br label %160

; <label>:160:                                    ; preds = %154, %148, %originalBBpart224, %originalBBpart29
  %161 = phi i1 [ true, %148 ], [ true, %originalBBpart224 ], [ true, %originalBBpart29 ], [ %159, %154 ]
  %162 = load i32, i32* @x.47
  %163 = load i32, i32* @y.48
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %160
  %170 = load i32, i32* @x.47
  %171 = load i32, i32* @y.48
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %161, label %98, label %178

; <label>:178:                                    ; preds = %originalBBpart228
  %179 = load i32, i32* @x.47
  %180 = load i32, i32* @y.48
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %178
  %187 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %189 = load i32, i32* %188, align 8
  %190 = and i32 %189, 65535
  %191 = icmp eq i32 %190, 66
  %192 = load i32, i32* @x.47
  %193 = load i32, i32* @y.48
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart237, label %originalBB30alteredBB

originalBBpart237:                                ; preds = %originalBB30
  br i1 %191, label %200, label %217

; <label>:200:                                    ; preds = %originalBBpart237
  %201 = load i32, i32* @x.47
  %202 = load i32, i32* @y.48
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %200
  %209 = load i32, i32* @x.47
  %210 = load i32, i32* @y.48
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %797

; <label>:217:                                    ; preds = %originalBBpart237
  %218 = load i32, i32* @x.47
  %219 = load i32, i32* @y.48
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %originalBB43alteredBB, %217
  %226 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %227 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %226, i32 0, i32 1
  %228 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %227, align 8
  %229 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1
  %231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %230, i64 0, i64 0
  %232 = bitcast %union.rtunion_def* %231 to i32*
  %233 = load i32, i32* %232, align 8
  %234 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %228, i32 %233)
  %235 = sext i32 %234 to i64
  store i64 %235, i64* %15, align 8
  %236 = load i32, i32* @x.47
  %237 = load i32, i32* @y.48
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br label %244

; <label>:244:                                    ; preds = %originalBBpart245, %6
  %245 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %246 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %245, i32 0, i32 1
  %247 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %246, i64 0, i64 0
  %248 = bitcast %union.rtunion_def* %247 to i32*
  %249 = load i32, i32* %248, align 8
  store i32 %249, i32* %13, align 4
  store i32 %249, i32* %14, align 4
  %250 = load i32, i32* %13, align 4
  %251 = icmp slt i32 %250, 53
  br i1 %251, label %252, label %465

; <label>:252:                                    ; preds = %244
  %253 = load i32, i32* @x.47
  %254 = load i32, i32* @y.48
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %originalBB47alteredBB, %252
  %261 = load i32, i32* %13, align 4
  %262 = icmp sge i32 %261, 8
  %263 = load i32, i32* @x.47
  %264 = load i32, i32* @y.48
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br i1 %262, label %271, label %274

; <label>:271:                                    ; preds = %originalBBpart249
  %272 = load i32, i32* %13, align 4
  %273 = icmp sle i32 %272, 15
  br i1 %273, label %324, label %274

; <label>:274:                                    ; preds = %271, %originalBBpart249
  %275 = load i32, i32* %13, align 4
  %276 = icmp sge i32 %275, 21
  br i1 %276, label %277, label %280

; <label>:277:                                    ; preds = %274
  %278 = load i32, i32* %13, align 4
  %279 = icmp sle i32 %278, 28
  br i1 %279, label %324, label %280

; <label>:280:                                    ; preds = %277, %274
  %281 = load i32, i32* %13, align 4
  %282 = icmp sge i32 %281, 45
  br i1 %282, label %283, label %302

; <label>:283:                                    ; preds = %280
  %284 = load i32, i32* @x.47
  %285 = load i32, i32* @y.48
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %originalBB51alteredBB, %283
  %292 = load i32, i32* %13, align 4
  %293 = icmp sle i32 %292, 52
  %294 = load i32, i32* @x.47
  %295 = load i32, i32* @y.48
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br i1 %293, label %324, label %302

; <label>:302:                                    ; preds = %originalBBpart253, %280
  %303 = load i32, i32* %13, align 4
  %304 = icmp sge i32 %303, 29
  br i1 %304, label %305, label %363

; <label>:305:                                    ; preds = %302
  %306 = load i32, i32* @x.47
  %307 = load i32, i32* @y.48
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %originalBB55alteredBB, %305
  %314 = load i32, i32* %13, align 4
  %315 = icmp sle i32 %314, 36
  %316 = load i32, i32* @x.47
  %317 = load i32, i32* @y.48
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %315, label %324, label %363

; <label>:324:                                    ; preds = %originalBBpart257, %originalBBpart253, %277, %271
  %325 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %326 = bitcast %struct.rtx_def* %325 to i32*
  %327 = load i32, i32* %326, align 8
  %328 = lshr i32 %327, 16
  %329 = and i32 %328, 255
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %330
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %332, 5
  br i1 %333, label %344, label %334

; <label>:334:                                    ; preds = %324
  %335 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %336 = bitcast %struct.rtx_def* %335 to i32*
  %337 = load i32, i32* %336, align 8
  %338 = lshr i32 %337, 16
  %339 = and i32 %338, 255
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %340
  %342 = load i32, i32* %341, align 4
  %343 = icmp eq i32 %342, 6
  br label %344

; <label>:344:                                    ; preds = %334, %324
  %345 = phi i1 [ true, %324 ], [ %343, %334 ]
  %346 = load i32, i32* @x.47
  %347 = load i32, i32* @y.48
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %originalBB59alteredBB, %344
  %354 = select i1 %345, i32 2, i32 1
  %355 = load i32, i32* @x.47
  %356 = load i32, i32* @y.48
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br label %444

; <label>:363:                                    ; preds = %originalBBpart257, %302
  %364 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %365 = bitcast %struct.rtx_def* %364 to i32*
  %366 = load i32, i32* %365, align 8
  %367 = lshr i32 %366, 16
  %368 = and i32 %367, 255
  %369 = icmp eq i32 %368, 18
  br i1 %369, label %370, label %391

; <label>:370:                                    ; preds = %363
  %371 = load i32, i32* @x.47
  %372 = load i32, i32* @y.48
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %originalBB63alteredBB, %370
  %379 = load i32, i32* @target_flags, align 4
  %380 = and i32 %379, 33554432
  %381 = icmp ne i32 %380, 0
  %382 = select i1 %381, i32 2, i32 3
  %383 = load i32, i32* @x.47
  %384 = load i32, i32* @y.48
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBBpart281, label %originalBB63alteredBB

originalBBpart281:                                ; preds = %originalBB63
  br label %442

; <label>:391:                                    ; preds = %363
  %392 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %393 = bitcast %struct.rtx_def* %392 to i32*
  %394 = load i32, i32* %393, align 8
  %395 = lshr i32 %394, 16
  %396 = and i32 %395, 255
  %397 = icmp eq i32 %396, 24
  br i1 %397, label %398, label %403

; <label>:398:                                    ; preds = %391
  %399 = load i32, i32* @target_flags, align 4
  %400 = and i32 %399, 33554432
  %401 = icmp ne i32 %400, 0
  %402 = select i1 %401, i32 4, i32 6
  br label %424

; <label>:403:                                    ; preds = %391
  %404 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %405 = bitcast %struct.rtx_def* %404 to i32*
  %406 = load i32, i32* %405, align 8
  %407 = lshr i32 %406, 16
  %408 = and i32 %407, 255
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %409
  %411 = load i8, i8* %410, align 1
  %412 = zext i8 %411 to i32
  %413 = load i32, i32* @target_flags, align 4
  %414 = and i32 %413, 33554432
  %415 = icmp ne i32 %414, 0
  %416 = select i1 %415, i32 8, i32 4
  %417 = add nsw i32 %412, %416
  %418 = sub nsw i32 %417, 1
  %419 = load i32, i32* @target_flags, align 4
  %420 = and i32 %419, 33554432
  %421 = icmp ne i32 %420, 0
  %422 = select i1 %421, i32 8, i32 4
  %423 = sdiv i32 %418, %422
  br label %424

; <label>:424:                                    ; preds = %403, %398
  %425 = phi i32 [ %402, %398 ], [ %423, %403 ]
  %426 = load i32, i32* @x.47
  %427 = load i32, i32* @y.48
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %originalBB83alteredBB, %424
  %434 = load i32, i32* @x.47
  %435 = load i32, i32* @y.48
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %442

; <label>:442:                                    ; preds = %originalBBpart285, %originalBBpart281
  %443 = phi i32 [ %382, %originalBBpart281 ], [ %425, %originalBBpart285 ]
  br label %444

; <label>:444:                                    ; preds = %442, %originalBBpart261
  %445 = phi i32 [ %354, %originalBBpart261 ], [ %443, %442 ]
  %446 = load i32, i32* @x.47
  %447 = load i32, i32* @y.48
  %448 = sub i32 %446, 1
  %449 = mul i32 %446, %448
  %450 = urem i32 %449, 2
  %451 = icmp eq i32 %450, 0
  %452 = icmp slt i32 %447, 10
  %453 = or i1 %451, %452
  br i1 %453, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %originalBB87alteredBB, %444
  %454 = sub nsw i32 %445, 1
  %455 = load i32, i32* %14, align 4
  %456 = add nsw i32 %455, %454
  store i32 %456, i32* %14, align 4
  %457 = load i32, i32* @x.47
  %458 = load i32, i32* @y.48
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBBpart2104, label %originalBB87alteredBB

originalBBpart2104:                               ; preds = %originalBB87
  br label %465

; <label>:465:                                    ; preds = %originalBBpart2104, %244
  %466 = load i32, i32* @x.47
  %467 = load i32, i32* @y.48
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %originalBB106alteredBB, %465
  %474 = load i32, i32* @x.47
  %475 = load i32, i32* @y.48
  %476 = sub i32 %474, 1
  %477 = mul i32 %474, %476
  %478 = urem i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %479, %480
  br i1 %481, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %797

; <label>:482:                                    ; preds = %6
  %483 = load i32, i32* @x.47
  %484 = load i32, i32* @y.48
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %originalBB110alteredBB, %482
  %491 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %492 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %491, i32 0, i32 1
  %493 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %492, i64 0, i64 0
  %494 = bitcast %union.rtunion_def* %493 to %struct.rtx_def**
  %495 = load %struct.rtx_def*, %struct.rtx_def** %494, align 8
  %496 = bitcast %struct.rtx_def* %495 to i32*
  %497 = load i32, i32* %496, align 8
  %498 = and i32 %497, 65535
  %499 = icmp eq i32 %498, 61
  %500 = load i32, i32* @x.47
  %501 = load i32, i32* @y.48
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBBpart2123, label %originalBB110alteredBB

originalBBpart2123:                               ; preds = %originalBB110
  br i1 %499, label %508, label %773

; <label>:508:                                    ; preds = %originalBBpart2123
  %509 = load i32, i32* @x.47
  %510 = load i32, i32* @y.48
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %originalBB125alteredBB, %508
  %517 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %518 = bitcast %struct.rtx_def* %517 to i32*
  %519 = load i32, i32* %518, align 8
  %520 = lshr i32 %519, 16
  %521 = and i32 %520, 255
  store i32 %521, i32* %17, align 4
  %522 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %523 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %522, i32 0, i32 1
  %524 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %523, i64 0, i64 0
  %525 = bitcast %union.rtunion_def* %524 to %struct.rtx_def**
  %526 = load %struct.rtx_def*, %struct.rtx_def** %525, align 8
  %527 = bitcast %struct.rtx_def* %526 to i32*
  %528 = load i32, i32* %527, align 8
  %529 = lshr i32 %528, 16
  %530 = and i32 %529, 255
  store i32 %530, i32* %18, align 4
  %531 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %532 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %531, i32 0, i32 1
  %533 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %532, i64 0, i64 0
  %534 = bitcast %union.rtunion_def* %533 to %struct.rtx_def**
  %535 = load %struct.rtx_def*, %struct.rtx_def** %534, align 8
  %536 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %535, i32 0, i32 1
  %537 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %536, i64 0, i64 0
  %538 = bitcast %union.rtunion_def* %537 to i32*
  %539 = load i32, i32* %538, align 8
  store i32 %539, i32* %13, align 4
  store i32 %539, i32* %14, align 4
  %540 = load i32, i32* %13, align 4
  %541 = icmp slt i32 %540, 53
  %542 = load i32, i32* @x.47
  %543 = load i32, i32* @y.48
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBBpart2154, label %originalBB125alteredBB

originalBBpart2154:                               ; preds = %originalBB125
  br i1 %541, label %550, label %693

; <label>:550:                                    ; preds = %originalBBpart2154
  %551 = load i32, i32* @x.47
  %552 = load i32, i32* @y.48
  %553 = sub i32 %551, 1
  %554 = mul i32 %551, %553
  %555 = urem i32 %554, 2
  %556 = icmp eq i32 %555, 0
  %557 = icmp slt i32 %552, 10
  %558 = or i1 %556, %557
  br i1 %558, label %originalBB156, label %originalBB156alteredBB

originalBB156:                                    ; preds = %originalBB156alteredBB, %550
  %559 = load i32, i32* %13, align 4
  %560 = load i32, i32* %18, align 4
  %561 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %562 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %561, i32 0, i32 1
  %563 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %562, i64 0, i64 1
  %564 = bitcast %union.rtunion_def* %563 to i32*
  %565 = load i32, i32* %564, align 8
  %566 = load i32, i32* %17, align 4
  %567 = call i32 @subreg_regno_offset(i32 %559, i32 %560, i32 %565, i32 %566)
  %568 = load i32, i32* %13, align 4
  %569 = add i32 %568, %567
  store i32 %569, i32* %13, align 4
  %570 = load i32, i32* %13, align 4
  %571 = load i32, i32* %13, align 4
  %572 = icmp sge i32 %571, 8
  %573 = load i32, i32* @x.47
  %574 = load i32, i32* @y.48
  %575 = sub i32 %573, 1
  %576 = mul i32 %573, %575
  %577 = urem i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = icmp slt i32 %574, 10
  %580 = or i1 %578, %579
  br i1 %580, label %originalBBpart2163, label %originalBB156alteredBB

originalBBpart2163:                               ; preds = %originalBB156
  br i1 %572, label %581, label %584

; <label>:581:                                    ; preds = %originalBBpart2163
  %582 = load i32, i32* %13, align 4
  %583 = icmp sle i32 %582, 15
  br i1 %583, label %634, label %584

; <label>:584:                                    ; preds = %581, %originalBBpart2163
  %585 = load i32, i32* %13, align 4
  %586 = icmp sge i32 %585, 21
  br i1 %586, label %587, label %590

; <label>:587:                                    ; preds = %584
  %588 = load i32, i32* %13, align 4
  %589 = icmp sle i32 %588, 28
  br i1 %589, label %634, label %590

; <label>:590:                                    ; preds = %587, %584
  %591 = load i32, i32* %13, align 4
  %592 = icmp sge i32 %591, 45
  br i1 %592, label %593, label %612

; <label>:593:                                    ; preds = %590
  %594 = load i32, i32* @x.47
  %595 = load i32, i32* @y.48
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %originalBB165alteredBB, %593
  %602 = load i32, i32* %13, align 4
  %603 = icmp sle i32 %602, 52
  %604 = load i32, i32* @x.47
  %605 = load i32, i32* @y.48
  %606 = sub i32 %604, 1
  %607 = mul i32 %604, %606
  %608 = urem i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = icmp slt i32 %605, 10
  %611 = or i1 %609, %610
  br i1 %611, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br i1 %603, label %634, label %612

; <label>:612:                                    ; preds = %originalBBpart2167, %590
  %613 = load i32, i32* %13, align 4
  %614 = icmp sge i32 %613, 29
  br i1 %614, label %615, label %649

; <label>:615:                                    ; preds = %612
  %616 = load i32, i32* @x.47
  %617 = load i32, i32* @y.48
  %618 = sub i32 %616, 1
  %619 = mul i32 %616, %618
  %620 = urem i32 %619, 2
  %621 = icmp eq i32 %620, 0
  %622 = icmp slt i32 %617, 10
  %623 = or i1 %621, %622
  br i1 %623, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %originalBB169alteredBB, %615
  %624 = load i32, i32* %13, align 4
  %625 = icmp sle i32 %624, 36
  %626 = load i32, i32* @x.47
  %627 = load i32, i32* @y.48
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br i1 %625, label %634, label %649

; <label>:634:                                    ; preds = %originalBBpart2171, %originalBBpart2167, %587, %581
  %635 = load i32, i32* %17, align 4
  %636 = sext i32 %635 to i64
  %637 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %636
  %638 = load i32, i32* %637, align 4
  %639 = icmp eq i32 %638, 5
  br i1 %639, label %646, label %640

; <label>:640:                                    ; preds = %634
  %641 = load i32, i32* %17, align 4
  %642 = sext i32 %641 to i64
  %643 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %642
  %644 = load i32, i32* %643, align 4
  %645 = icmp eq i32 %644, 6
  br label %646

; <label>:646:                                    ; preds = %640, %634
  %647 = phi i1 [ true, %634 ], [ %645, %640 ]
  %648 = select i1 %647, i32 2, i32 1
  br label %686

; <label>:649:                                    ; preds = %originalBBpart2171, %612
  %650 = load i32, i32* %17, align 4
  %651 = icmp eq i32 %650, 18
  br i1 %651, label %652, label %657

; <label>:652:                                    ; preds = %649
  %653 = load i32, i32* @target_flags, align 4
  %654 = and i32 %653, 33554432
  %655 = icmp ne i32 %654, 0
  %656 = select i1 %655, i32 2, i32 3
  br label %684

; <label>:657:                                    ; preds = %649
  %658 = load i32, i32* %17, align 4
  %659 = icmp eq i32 %658, 24
  br i1 %659, label %660, label %665

; <label>:660:                                    ; preds = %657
  %661 = load i32, i32* @target_flags, align 4
  %662 = and i32 %661, 33554432
  %663 = icmp ne i32 %662, 0
  %664 = select i1 %663, i32 4, i32 6
  br label %682

; <label>:665:                                    ; preds = %657
  %666 = load i32, i32* %17, align 4
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %667
  %669 = load i8, i8* %668, align 1
  %670 = zext i8 %669 to i32
  %671 = load i32, i32* @target_flags, align 4
  %672 = and i32 %671, 33554432
  %673 = icmp ne i32 %672, 0
  %674 = select i1 %673, i32 8, i32 4
  %675 = add nsw i32 %670, %674
  %676 = sub nsw i32 %675, 1
  %677 = load i32, i32* @target_flags, align 4
  %678 = and i32 %677, 33554432
  %679 = icmp ne i32 %678, 0
  %680 = select i1 %679, i32 8, i32 4
  %681 = sdiv i32 %676, %680
  br label %682

; <label>:682:                                    ; preds = %665, %660
  %683 = phi i32 [ %664, %660 ], [ %681, %665 ]
  br label %684

; <label>:684:                                    ; preds = %682, %652
  %685 = phi i32 [ %656, %652 ], [ %683, %682 ]
  br label %686

; <label>:686:                                    ; preds = %684, %646
  %687 = phi i32 [ %648, %646 ], [ %685, %684 ]
  %688 = add nsw i32 %570, %687
  %689 = sub nsw i32 %688, 1
  store i32 %689, i32* %14, align 4
  %690 = load i32, i32* %17, align 4
  %691 = load i32, i32* %13, align 4
  %692 = call %struct.rtx_def* @gen_rtx_REG(i32 %690, i32 %691)
  store %struct.rtx_def* %692, %struct.rtx_def** %9, align 8
  br label %756

; <label>:693:                                    ; preds = %originalBBpart2154
  %694 = load i32, i32* %17, align 4
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %695
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i32
  %699 = load i32, i32* @target_flags, align 4
  %700 = and i32 %699, 33554432
  %701 = icmp ne i32 %700, 0
  %702 = select i1 %701, i32 8, i32 4
  %703 = add nsw i32 %698, %702
  %704 = sub nsw i32 %703, 1
  %705 = load i32, i32* @target_flags, align 4
  %706 = and i32 %705, 33554432
  %707 = icmp ne i32 %706, 0
  %708 = select i1 %707, i32 8, i32 4
  %709 = sdiv i32 %704, %708
  %710 = load i32, i32* %18, align 4
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %711
  %713 = load i8, i8* %712, align 1
  %714 = zext i8 %713 to i32
  %715 = load i32, i32* @target_flags, align 4
  %716 = and i32 %715, 33554432
  %717 = icmp ne i32 %716, 0
  %718 = select i1 %717, i32 8, i32 4
  %719 = add nsw i32 %714, %718
  %720 = sub nsw i32 %719, 1
  %721 = load i32, i32* @target_flags, align 4
  %722 = and i32 %721, 33554432
  %723 = icmp ne i32 %722, 0
  %724 = select i1 %723, i32 8, i32 4
  %725 = sdiv i32 %720, %724
  %726 = icmp slt i32 %709, %725
  br i1 %726, label %727, label %734

; <label>:727:                                    ; preds = %693
  %728 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %729 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %728, i32 0, i32 1
  %730 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %729, align 8
  %731 = load i32, i32* %13, align 4
  %732 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %730, i32 %731)
  %733 = sext i32 %732 to i64
  store i64 %733, i64* %15, align 8
  br label %734

; <label>:734:                                    ; preds = %727, %693
  %735 = load i32, i32* @x.47
  %736 = load i32, i32* @y.48
  %737 = sub i32 %735, 1
  %738 = mul i32 %735, %737
  %739 = urem i32 %738, 2
  %740 = icmp eq i32 %739, 0
  %741 = icmp slt i32 %736, 10
  %742 = or i1 %740, %741
  br i1 %742, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %originalBB173alteredBB, %734
  %743 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %744 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %743, i32 0, i32 1
  %745 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %744, i64 0, i64 0
  %746 = bitcast %union.rtunion_def* %745 to %struct.rtx_def**
  %747 = load %struct.rtx_def*, %struct.rtx_def** %746, align 8
  store %struct.rtx_def* %747, %struct.rtx_def** %9, align 8
  %748 = load i32, i32* @x.47
  %749 = load i32, i32* @y.48
  %750 = sub i32 %748, 1
  %751 = mul i32 %748, %750
  %752 = urem i32 %751, 2
  %753 = icmp eq i32 %752, 0
  %754 = icmp slt i32 %749, 10
  %755 = or i1 %753, %754
  br i1 %755, label %originalBBpart2175, label %originalBB173alteredBB

originalBBpart2175:                               ; preds = %originalBB173
  br label %756

; <label>:756:                                    ; preds = %originalBBpart2175, %686
  %757 = load i32, i32* @x.47
  %758 = load i32, i32* @y.48
  %759 = sub i32 %757, 1
  %760 = mul i32 %757, %759
  %761 = urem i32 %760, 2
  %762 = icmp eq i32 %761, 0
  %763 = icmp slt i32 %758, 10
  %764 = or i1 %762, %763
  br i1 %764, label %originalBB177, label %originalBB177alteredBB

originalBB177:                                    ; preds = %originalBB177alteredBB, %756
  %765 = load i32, i32* @x.47
  %766 = load i32, i32* @y.48
  %767 = sub i32 %765, 1
  %768 = mul i32 %765, %767
  %769 = urem i32 %768, 2
  %770 = icmp eq i32 %769, 0
  %771 = icmp slt i32 %766, 10
  %772 = or i1 %770, %771
  br i1 %772, label %originalBBpart2179, label %originalBB177alteredBB

originalBBpart2179:                               ; preds = %originalBB177
  br label %779

; <label>:773:                                    ; preds = %originalBBpart2123
  %774 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %775 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %774, i32 0, i32 1
  %776 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %775, i64 0, i64 0
  %777 = bitcast %union.rtunion_def* %776 to %struct.rtx_def**
  %778 = load %struct.rtx_def*, %struct.rtx_def** %777, align 8
  store %struct.rtx_def* %778, %struct.rtx_def** %9, align 8
  br label %779

; <label>:779:                                    ; preds = %773, %originalBBpart2179
  br label %797

; <label>:780:                                    ; preds = %6
  %781 = load i32, i32* @x.47
  %782 = load i32, i32* @y.48
  %783 = sub i32 %781, 1
  %784 = mul i32 %781, %783
  %785 = urem i32 %784, 2
  %786 = icmp eq i32 %785, 0
  %787 = icmp slt i32 %782, 10
  %788 = or i1 %786, %787
  br i1 %788, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %originalBB181alteredBB, %780
  %789 = load i32, i32* @x.47
  %790 = load i32, i32* @y.48
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBBpart2183, label %originalBB181alteredBB

originalBBpart2183:                               ; preds = %originalBB181
  br label %797

; <label>:797:                                    ; preds = %originalBBpart2183, %779, %originalBBpart2108, %originalBBpart241
  %798 = load i32, i32* @optimize, align 4
  %799 = icmp ne i32 %798, 0
  br i1 %799, label %800, label %912

; <label>:800:                                    ; preds = %797
  %801 = load i32, i32* @x.47
  %802 = load i32, i32* @y.48
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBB185, label %originalBB185alteredBB

originalBB185:                                    ; preds = %originalBB185alteredBB, %800
  %809 = load i32, i32* %12, align 4
  %810 = and i32 %809, 16
  %811 = icmp ne i32 %810, 0
  %812 = load i32, i32* @x.47
  %813 = load i32, i32* @y.48
  %814 = sub i32 %812, 1
  %815 = mul i32 %812, %814
  %816 = urem i32 %815, 2
  %817 = icmp eq i32 %816, 0
  %818 = icmp slt i32 %813, 10
  %819 = or i1 %817, %818
  br i1 %819, label %originalBBpart2198, label %originalBB185alteredBB

originalBBpart2198:                               ; preds = %originalBB185
  br i1 %811, label %820, label %912

; <label>:820:                                    ; preds = %originalBBpart2198
  %821 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %822 = bitcast %struct.rtx_def* %821 to i32*
  %823 = load i32, i32* %822, align 8
  %824 = and i32 %823, 65535
  %825 = icmp eq i32 %824, 61
  br i1 %825, label %826, label %829

; <label>:826:                                    ; preds = %820
  %827 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %828 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  call void @invalidate_mems_from_set(%struct.propagate_block_info* %827, %struct.rtx_def* %828)
  br label %829

; <label>:829:                                    ; preds = %826, %820
  %830 = load i32, i32* @x.47
  %831 = load i32, i32* @y.48
  %832 = sub i32 %830, 1
  %833 = mul i32 %830, %832
  %834 = urem i32 %833, 2
  %835 = icmp eq i32 %834, 0
  %836 = icmp slt i32 %831, 10
  %837 = or i1 %835, %836
  br i1 %837, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %originalBB200alteredBB, %829
  %838 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %839 = icmp ne %struct.rtx_def* %838, null
  %840 = load i32, i32* @x.47
  %841 = load i32, i32* @y.48
  %842 = sub i32 %840, 1
  %843 = mul i32 %840, %842
  %844 = urem i32 %843, 2
  %845 = icmp eq i32 %844, 0
  %846 = icmp slt i32 %841, 10
  %847 = or i1 %845, %846
  br i1 %847, label %originalBBpart2202, label %originalBB200alteredBB

originalBBpart2202:                               ; preds = %originalBB200
  br i1 %839, label %848, label %873

; <label>:848:                                    ; preds = %originalBBpart2202
  %849 = load i32, i32* @x.47
  %850 = load i32, i32* @y.48
  %851 = sub i32 %849, 1
  %852 = mul i32 %849, %851
  %853 = urem i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = icmp slt i32 %850, 10
  %856 = or i1 %854, %855
  br i1 %856, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %originalBB204alteredBB, %848
  %857 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %858 = bitcast %struct.rtx_def* %857 to i32*
  %859 = load i32, i32* %858, align 8
  %860 = and i32 %859, 65535
  %861 = icmp eq i32 %860, 66
  %862 = load i32, i32* @x.47
  %863 = load i32, i32* @y.48
  %864 = sub i32 %862, 1
  %865 = mul i32 %862, %864
  %866 = urem i32 %865, 2
  %867 = icmp eq i32 %866, 0
  %868 = icmp slt i32 %863, 10
  %869 = or i1 %867, %868
  br i1 %869, label %originalBBpart2207, label %originalBB204alteredBB

originalBBpart2207:                               ; preds = %originalBB204
  br i1 %861, label %870, label %873

; <label>:870:                                    ; preds = %originalBBpart2207
  %871 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %872 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  call void @invalidate_mems_from_autoinc(%struct.propagate_block_info* %871, %struct.rtx_def* %872)
  br label %873

; <label>:873:                                    ; preds = %870, %originalBBpart2207, %originalBBpart2202
  %874 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %875 = bitcast %struct.rtx_def* %874 to i32*
  %876 = load i32, i32* %875, align 8
  %877 = and i32 %876, 65535
  %878 = icmp eq i32 %877, 66
  br i1 %878, label %879, label %895

; <label>:879:                                    ; preds = %873
  %880 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %881 = call i32 @side_effects_p(%struct.rtx_def* %880)
  %882 = icmp ne i32 %881, 0
  br i1 %882, label %895, label %883

; <label>:883:                                    ; preds = %879
  %884 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %885 = icmp ne %struct.rtx_def* %884, null
  br i1 %885, label %895, label %886

; <label>:886:                                    ; preds = %883
  %887 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %888 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %889 = call i32 @reg_mentioned_p(%struct.rtx_def* %887, %struct.rtx_def* %888)
  %890 = icmp ne i32 %889, 0
  br i1 %890, label %895, label %891

; <label>:891:                                    ; preds = %886
  %892 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %893 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %894 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %893)
  call void @add_to_mem_set_list(%struct.propagate_block_info* %892, %struct.rtx_def* %894)
  br label %895

; <label>:895:                                    ; preds = %891, %886, %883, %879, %873
  %896 = load i32, i32* @x.47
  %897 = load i32, i32* @y.48
  %898 = sub i32 %896, 1
  %899 = mul i32 %896, %898
  %900 = urem i32 %899, 2
  %901 = icmp eq i32 %900, 0
  %902 = icmp slt i32 %897, 10
  %903 = or i1 %901, %902
  br i1 %903, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %originalBB209alteredBB, %895
  %904 = load i32, i32* @x.47
  %905 = load i32, i32* @y.48
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBBpart2212, label %originalBB209alteredBB

originalBBpart2212:                               ; preds = %originalBB209
  br label %912

; <label>:912:                                    ; preds = %originalBBpart2212, %originalBBpart2198, %797
  %913 = load i32, i32* @x.47
  %914 = load i32, i32* @y.48
  %915 = sub i32 %913, 1
  %916 = mul i32 %913, %915
  %917 = urem i32 %916, 2
  %918 = icmp eq i32 %917, 0
  %919 = icmp slt i32 %914, 10
  %920 = or i1 %918, %919
  br i1 %920, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %originalBB214alteredBB, %912
  %921 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %922 = bitcast %struct.rtx_def* %921 to i32*
  %923 = load i32, i32* %922, align 8
  %924 = and i32 %923, 65535
  %925 = icmp eq i32 %924, 61
  %926 = load i32, i32* @x.47
  %927 = load i32, i32* @y.48
  %928 = sub i32 %926, 1
  %929 = mul i32 %926, %928
  %930 = urem i32 %929, 2
  %931 = icmp eq i32 %930, 0
  %932 = icmp slt i32 %927, 10
  %933 = or i1 %931, %932
  br i1 %933, label %originalBBpart2224, label %originalBB214alteredBB

originalBBpart2224:                               ; preds = %originalBB214
  br i1 %925, label %934, label %1822

; <label>:934:                                    ; preds = %originalBBpart2224
  %935 = load i32, i32* %13, align 4
  %936 = icmp eq i32 %935, 20
  br i1 %936, label %937, label %943

; <label>:937:                                    ; preds = %934
  %938 = load i32, i32* @reload_completed, align 4
  %939 = icmp ne i32 %938, 0
  br i1 %939, label %940, label %1822

; <label>:940:                                    ; preds = %937
  %941 = load i32, i32* @frame_pointer_needed, align 4
  %942 = icmp ne i32 %941, 0
  br i1 %942, label %1822, label %943

; <label>:943:                                    ; preds = %940, %934
  %944 = load i32, i32* %13, align 4
  %945 = icmp eq i32 %944, 6
  br i1 %945, label %946, label %968

; <label>:946:                                    ; preds = %943
  %947 = load i32, i32* @x.47
  %948 = load i32, i32* @y.48
  %949 = sub i32 %947, 1
  %950 = mul i32 %947, %949
  %951 = urem i32 %950, 2
  %952 = icmp eq i32 %951, 0
  %953 = icmp slt i32 %948, 10
  %954 = or i1 %952, %953
  br i1 %954, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %originalBB226alteredBB, %946
  %955 = load i32, i32* @reload_completed, align 4
  %956 = icmp ne i32 %955, 0
  %957 = load i32, i32* @x.47
  %958 = load i32, i32* @y.48
  %959 = sub i32 %957, 1
  %960 = mul i32 %957, %959
  %961 = urem i32 %960, 2
  %962 = icmp eq i32 %961, 0
  %963 = icmp slt i32 %958, 10
  %964 = or i1 %962, %963
  br i1 %964, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br i1 %956, label %965, label %1822

; <label>:965:                                    ; preds = %originalBBpart2228
  %966 = load i32, i32* @frame_pointer_needed, align 4
  %967 = icmp ne i32 %966, 0
  br i1 %967, label %1822, label %968

; <label>:968:                                    ; preds = %965, %943
  %969 = load i32, i32* %13, align 4
  %970 = icmp eq i32 %969, 16
  br i1 %970, label %971, label %994

; <label>:971:                                    ; preds = %968
  %972 = load i32, i32* @x.47
  %973 = load i32, i32* @y.48
  %974 = sub i32 %972, 1
  %975 = mul i32 %972, %974
  %976 = urem i32 %975, 2
  %977 = icmp eq i32 %976, 0
  %978 = icmp slt i32 %973, 10
  %979 = or i1 %977, %978
  br i1 %979, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %originalBB230alteredBB, %971
  %980 = load i32, i32* %13, align 4
  %981 = sext i32 %980 to i64
  %982 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %981
  %983 = load i8, i8* %982, align 1
  %984 = sext i8 %983 to i32
  %985 = icmp ne i32 %984, 0
  %986 = load i32, i32* @x.47
  %987 = load i32, i32* @y.48
  %988 = sub i32 %986, 1
  %989 = mul i32 %986, %988
  %990 = urem i32 %989, 2
  %991 = icmp eq i32 %990, 0
  %992 = icmp slt i32 %987, 10
  %993 = or i1 %991, %992
  br i1 %993, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br i1 %985, label %1822, label %994

; <label>:994:                                    ; preds = %originalBBpart2232, %968
  %995 = load i32, i32* @x.47
  %996 = load i32, i32* @y.48
  %997 = sub i32 %995, 1
  %998 = mul i32 %995, %997
  %999 = urem i32 %998, 2
  %1000 = icmp eq i32 %999, 0
  %1001 = icmp slt i32 %996, 10
  %1002 = or i1 %1000, %1001
  br i1 %1002, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %originalBB234alteredBB, %994
  store i32 0, i32* %19, align 4
  store i32 0, i32* %20, align 4
  %1003 = load i32, i32* %13, align 4
  store i32 %1003, i32* %16, align 4
  %1004 = load i32, i32* @x.47
  %1005 = load i32, i32* @y.48
  %1006 = sub i32 %1004, 1
  %1007 = mul i32 %1004, %1006
  %1008 = urem i32 %1007, 2
  %1009 = icmp eq i32 %1008, 0
  %1010 = icmp slt i32 %1005, 10
  %1011 = or i1 %1009, %1010
  br i1 %1011, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br label %1012

; <label>:1012:                                   ; preds = %1117, %originalBBpart2236
  %1013 = load i32, i32* %16, align 4
  %1014 = load i32, i32* %14, align 4
  %1015 = icmp sle i32 %1013, %1014
  br i1 %1015, label %1016, label %1120

; <label>:1016:                                   ; preds = %1012
  %1017 = load i32, i32* @x.47
  %1018 = load i32, i32* @y.48
  %1019 = sub i32 %1017, 1
  %1020 = mul i32 %1017, %1019
  %1021 = urem i32 %1020, 2
  %1022 = icmp eq i32 %1021, 0
  %1023 = icmp slt i32 %1018, 10
  %1024 = or i1 %1022, %1023
  br i1 %1024, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %originalBB238alteredBB, %1016
  %1025 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1026 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1025, i32 0, i32 1
  %1027 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1026, align 8
  %1028 = load i32, i32* %16, align 4
  %1029 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1027, i32 %1028)
  store i32 %1029, i32* %21, align 4
  %1030 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1031 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1030, i32 0, i32 5
  %1032 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1031, align 8
  %1033 = icmp ne %struct.bitmap_head_def* %1032, null
  %1034 = load i32, i32* @x.47
  %1035 = load i32, i32* @y.48
  %1036 = sub i32 %1034, 1
  %1037 = mul i32 %1034, %1036
  %1038 = urem i32 %1037, 2
  %1039 = icmp eq i32 %1038, 0
  %1040 = icmp slt i32 %1035, 10
  %1041 = or i1 %1039, %1040
  br i1 %1041, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br i1 %1033, label %1042, label %1067

; <label>:1042:                                   ; preds = %originalBBpart2240
  %1043 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1044 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1043, i32 0, i32 6
  %1045 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1044, align 8
  %1046 = load i32, i32* %16, align 4
  call void @bitmap_clear_bit(%struct.bitmap_head_def* %1045, i32 %1046)
  %1047 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %1048 = icmp ne %struct.rtx_def* %1047, null
  br i1 %1048, label %1049, label %1061

; <label>:1049:                                   ; preds = %1042
  %1050 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1051 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1050, i32 0, i32 5
  %1052 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1051, align 8
  %1053 = load i32, i32* %16, align 4
  %1054 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1052, i32 %1053)
  %1055 = icmp ne i32 %1054, 0
  br i1 %1055, label %1061, label %1056

; <label>:1056:                                   ; preds = %1049
  %1057 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1058 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1057, i32 0, i32 6
  %1059 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1058, align 8
  %1060 = load i32, i32* %16, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %1059, i32 %1060)
  br label %1066

; <label>:1061:                                   ; preds = %1049, %1042
  %1062 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1063 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1062, i32 0, i32 5
  %1064 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1063, align 8
  %1065 = load i32, i32* %16, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %1064, i32 %1065)
  br label %1066

; <label>:1066:                                   ; preds = %1061, %1056
  br label %1067

; <label>:1067:                                   ; preds = %1066, %originalBBpart2240
  %1068 = load i32, i32* @x.47
  %1069 = load i32, i32* @y.48
  %1070 = sub i32 %1068, 1
  %1071 = mul i32 %1068, %1070
  %1072 = urem i32 %1071, 2
  %1073 = icmp eq i32 %1072, 0
  %1074 = icmp slt i32 %1069, 10
  %1075 = or i1 %1073, %1074
  br i1 %1075, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %originalBB242alteredBB, %1067
  %1076 = load i32, i32* %8, align 4
  %1077 = icmp ne i32 %1076, 49
  %1078 = load i32, i32* @x.47
  %1079 = load i32, i32* @y.48
  %1080 = sub i32 %1078, 1
  %1081 = mul i32 %1078, %1080
  %1082 = urem i32 %1081, 2
  %1083 = icmp eq i32 %1082, 0
  %1084 = icmp slt i32 %1079, 10
  %1085 = or i1 %1083, %1084
  br i1 %1085, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br i1 %1077, label %1086, label %1091

; <label>:1086:                                   ; preds = %originalBBpart2244
  %1087 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1088 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1087, i32 0, i32 2
  %1089 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1088, align 8
  %1090 = load i32, i32* %16, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %1089, i32 %1090)
  br label %1091

; <label>:1091:                                   ; preds = %1086, %originalBBpart2244
  %1092 = load i32, i32* @x.47
  %1093 = load i32, i32* @y.48
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %originalBB246alteredBB, %1091
  %1100 = load i32, i32* %21, align 4
  %1101 = load i32, i32* %19, align 4
  %1102 = or i32 %1101, %1100
  store i32 %1102, i32* %19, align 4
  %1103 = load i32, i32* %21, align 4
  %1104 = icmp ne i32 %1103, 0
  %1105 = xor i1 %1104, true
  %1106 = zext i1 %1105 to i32
  %1107 = load i32, i32* %20, align 4
  %1108 = or i32 %1107, %1106
  store i32 %1108, i32* %20, align 4
  %1109 = load i32, i32* @x.47
  %1110 = load i32, i32* @y.48
  %1111 = sub i32 %1109, 1
  %1112 = mul i32 %1109, %1111
  %1113 = urem i32 %1112, 2
  %1114 = icmp eq i32 %1113, 0
  %1115 = icmp slt i32 %1110, 10
  %1116 = or i1 %1114, %1115
  br i1 %1116, label %originalBBpart2275, label %originalBB246alteredBB

originalBBpart2275:                               ; preds = %originalBB246
  br label %1117

; <label>:1117:                                   ; preds = %originalBBpart2275
  %1118 = load i32, i32* %16, align 4
  %1119 = add nsw i32 %1118, 1
  store i32 %1119, i32* %16, align 4
  br label %1012

; <label>:1120:                                   ; preds = %1012
  %1121 = load i32, i32* %12, align 4
  %1122 = and i32 %1121, 71
  %1123 = icmp ne i32 %1122, 0
  br i1 %1123, label %1124, label %1742

; <label>:1124:                                   ; preds = %1120
  %1125 = load i32, i32* @x.47
  %1126 = load i32, i32* @y.48
  %1127 = sub i32 %1125, 1
  %1128 = mul i32 %1125, %1127
  %1129 = urem i32 %1128, 2
  %1130 = icmp eq i32 %1129, 0
  %1131 = icmp slt i32 %1126, 10
  %1132 = or i1 %1130, %1131
  br i1 %1132, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %originalBB277alteredBB, %1124
  %1133 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1134 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1133, i32 0, i32 0
  %1135 = load %struct.basic_block_def*, %struct.basic_block_def** %1134, align 8
  %1136 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1135, i32 0, i32 11
  %1137 = load i32, i32* %1136, align 8
  store i32 %1137, i32* %23, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %22, align 8
  %1138 = load i32, i32* %12, align 4
  %1139 = and i32 %1138, 66
  %1140 = icmp ne i32 %1139, 0
  %1141 = load i32, i32* @x.47
  %1142 = load i32, i32* @y.48
  %1143 = sub i32 %1141, 1
  %1144 = mul i32 %1141, %1143
  %1145 = urem i32 %1144, 2
  %1146 = icmp eq i32 %1145, 0
  %1147 = icmp slt i32 %1142, 10
  %1148 = or i1 %1146, %1147
  br i1 %1148, label %originalBBpart2288, label %originalBB277alteredBB

originalBBpart2288:                               ; preds = %originalBB277
  br i1 %1140, label %1149, label %1221

; <label>:1149:                                   ; preds = %originalBBpart2288
  %1150 = load i32, i32* @x.47
  %1151 = load i32, i32* @y.48
  %1152 = sub i32 %1150, 1
  %1153 = mul i32 %1150, %1152
  %1154 = urem i32 %1153, 2
  %1155 = icmp eq i32 %1154, 0
  %1156 = icmp slt i32 %1151, 10
  %1157 = or i1 %1155, %1156
  br i1 %1157, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %originalBB290alteredBB, %1149
  %1158 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1159 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1158, i32 0, i32 3
  %1160 = load %struct.rtx_def**, %struct.rtx_def*** %1159, align 8
  %1161 = load i32, i32* %13, align 4
  %1162 = sext i32 %1161 to i64
  %1163 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1160, i64 %1162
  %1164 = load %struct.rtx_def*, %struct.rtx_def** %1163, align 8
  store %struct.rtx_def* %1164, %struct.rtx_def** %22, align 8
  %1165 = load i32, i32* %13, align 4
  store i32 %1165, i32* %16, align 4
  %1166 = load i32, i32* @x.47
  %1167 = load i32, i32* @y.48
  %1168 = sub i32 %1166, 1
  %1169 = mul i32 %1166, %1168
  %1170 = urem i32 %1169, 2
  %1171 = icmp eq i32 %1170, 0
  %1172 = icmp slt i32 %1167, 10
  %1173 = or i1 %1171, %1172
  br i1 %1173, label %originalBBpart2292, label %originalBB290alteredBB

originalBBpart2292:                               ; preds = %originalBB290
  br label %1174

; <label>:1174:                                   ; preds = %originalBBpart2303, %originalBBpart2292
  %1175 = load i32, i32* %16, align 4
  %1176 = load i32, i32* %14, align 4
  %1177 = icmp sle i32 %1175, %1176
  br i1 %1177, label %1178, label %1220

; <label>:1178:                                   ; preds = %1174
  %1179 = load i32, i32* @x.47
  %1180 = load i32, i32* @y.48
  %1181 = sub i32 %1179, 1
  %1182 = mul i32 %1179, %1181
  %1183 = urem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  %1185 = icmp slt i32 %1180, 10
  %1186 = or i1 %1184, %1185
  br i1 %1186, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %originalBB294alteredBB, %1178
  %1187 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1188 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1187, i32 0, i32 3
  %1189 = load %struct.rtx_def**, %struct.rtx_def*** %1188, align 8
  %1190 = load i32, i32* %16, align 4
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1189, i64 %1191
  store %struct.rtx_def* null, %struct.rtx_def** %1192, align 8
  %1193 = load i32, i32* @x.47
  %1194 = load i32, i32* @y.48
  %1195 = sub i32 %1193, 1
  %1196 = mul i32 %1193, %1195
  %1197 = urem i32 %1196, 2
  %1198 = icmp eq i32 %1197, 0
  %1199 = icmp slt i32 %1194, 10
  %1200 = or i1 %1198, %1199
  br i1 %1200, label %originalBBpart2296, label %originalBB294alteredBB

originalBBpart2296:                               ; preds = %originalBB294
  br label %1201

; <label>:1201:                                   ; preds = %originalBBpart2296
  %1202 = load i32, i32* @x.47
  %1203 = load i32, i32* @y.48
  %1204 = sub i32 %1202, 1
  %1205 = mul i32 %1202, %1204
  %1206 = urem i32 %1205, 2
  %1207 = icmp eq i32 %1206, 0
  %1208 = icmp slt i32 %1203, 10
  %1209 = or i1 %1207, %1208
  br i1 %1209, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %originalBB298alteredBB, %1201
  %1210 = load i32, i32* %16, align 4
  %1211 = add nsw i32 %1210, 1
  store i32 %1211, i32* %16, align 4
  %1212 = load i32, i32* @x.47
  %1213 = load i32, i32* @y.48
  %1214 = sub i32 %1212, 1
  %1215 = mul i32 %1212, %1214
  %1216 = urem i32 %1215, 2
  %1217 = icmp eq i32 %1216, 0
  %1218 = icmp slt i32 %1213, 10
  %1219 = or i1 %1217, %1218
  br i1 %1219, label %originalBBpart2303, label %originalBB298alteredBB

originalBBpart2303:                               ; preds = %originalBB298
  br label %1174

; <label>:1220:                                   ; preds = %1174
  br label %1221

; <label>:1221:                                   ; preds = %1220, %originalBBpart2288
  %1222 = load i32, i32* %12, align 4
  %1223 = and i32 %1222, 4
  %1224 = icmp ne i32 %1223, 0
  br i1 %1224, label %1225, label %1448

; <label>:1225:                                   ; preds = %1221
  %1226 = load i32, i32* %13, align 4
  store i32 %1226, i32* %16, align 4
  br label %1227

; <label>:1227:                                   ; preds = %originalBBpart2345, %1225
  %1228 = load i32, i32* @x.47
  %1229 = load i32, i32* @y.48
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB305, label %originalBB305alteredBB

originalBB305:                                    ; preds = %originalBB305alteredBB, %1227
  %1236 = load i32, i32* %16, align 4
  %1237 = load i32, i32* %14, align 4
  %1238 = icmp sle i32 %1236, %1237
  %1239 = load i32, i32* @x.47
  %1240 = load i32, i32* @y.48
  %1241 = sub i32 %1239, 1
  %1242 = mul i32 %1239, %1241
  %1243 = urem i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  %1245 = icmp slt i32 %1240, 10
  %1246 = or i1 %1244, %1245
  br i1 %1246, label %originalBBpart2307, label %originalBB305alteredBB

originalBBpart2307:                               ; preds = %originalBB305
  br i1 %1238, label %1247, label %1354

; <label>:1247:                                   ; preds = %originalBBpart2307
  %1248 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1249 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1248, i32 0, i32 4
  %1250 = bitcast %union.varray_data_tag* %1249 to [1 x %struct.reg_info_def*]*
  %1251 = load i32, i32* %16, align 4
  %1252 = sext i32 %1251 to i64
  %1253 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1250, i64 0, i64 %1252
  %1254 = load %struct.reg_info_def*, %struct.reg_info_def** %1253, align 8
  %1255 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1254, i32 0, i32 3
  %1256 = load i32, i32* %1255, align 4
  %1257 = add nsw i32 %1256, 1
  store i32 %1257, i32* %1255, align 4
  %1258 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1259 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1258, i32 0, i32 4
  %1260 = bitcast %union.varray_data_tag* %1259 to [1 x %struct.reg_info_def*]*
  %1261 = load i32, i32* %16, align 4
  %1262 = sext i32 %1261 to i64
  %1263 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1260, i64 0, i64 %1262
  %1264 = load %struct.reg_info_def*, %struct.reg_info_def** %1263, align 8
  %1265 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1264, i32 0, i32 4
  %1266 = load i32, i32* %1265, align 4
  %1267 = add nsw i32 %1266, 1
  store i32 %1267, i32* %1265, align 4
  %1268 = load i32, i32* @optimize_size, align 4
  %1269 = icmp ne i32 %1268, 0
  br i1 %1269, label %1276, label %1270

; <label>:1270:                                   ; preds = %1247
  %1271 = load i32, i32* @flag_branch_probabilities, align 4
  %1272 = icmp ne i32 %1271, 0
  br i1 %1272, label %1273, label %1277

; <label>:1273:                                   ; preds = %1270
  %1274 = load i64, i64* getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 13), align 16
  %1275 = icmp ne i64 %1274, 0
  br i1 %1275, label %1277, label %1276

; <label>:1276:                                   ; preds = %1273, %1247
  br label %1297

; <label>:1277:                                   ; preds = %1273, %1270
  %1278 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1279 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1278, i32 0, i32 0
  %1280 = load %struct.basic_block_def*, %struct.basic_block_def** %1279, align 8
  %1281 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1280, i32 0, i32 14
  %1282 = load i32, i32* %1281, align 8
  %1283 = mul nsw i32 %1282, 1000
  %1284 = sdiv i32 %1283, 10000
  %1285 = icmp ne i32 %1284, 0
  br i1 %1285, label %1286, label %1294

; <label>:1286:                                   ; preds = %1277
  %1287 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1288 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1287, i32 0, i32 0
  %1289 = load %struct.basic_block_def*, %struct.basic_block_def** %1288, align 8
  %1290 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1289, i32 0, i32 14
  %1291 = load i32, i32* %1290, align 8
  %1292 = mul nsw i32 %1291, 1000
  %1293 = sdiv i32 %1292, 10000
  br label %1295

; <label>:1294:                                   ; preds = %1277
  br label %1295

; <label>:1295:                                   ; preds = %1294, %1286
  %1296 = phi i32 [ %1293, %1286 ], [ 1, %1294 ]
  br label %1297

; <label>:1297:                                   ; preds = %1295, %1276
  %1298 = phi i32 [ 1000, %1276 ], [ %1296, %1295 ]
  %1299 = load i32, i32* @x.47
  %1300 = load i32, i32* @y.48
  %1301 = sub i32 %1299, 1
  %1302 = mul i32 %1299, %1301
  %1303 = urem i32 %1302, 2
  %1304 = icmp eq i32 %1303, 0
  %1305 = icmp slt i32 %1300, 10
  %1306 = or i1 %1304, %1305
  br i1 %1306, label %originalBB309, label %originalBB309alteredBB

originalBB309:                                    ; preds = %originalBB309alteredBB, %1297
  %1307 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1308 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1307, i32 0, i32 4
  %1309 = bitcast %union.varray_data_tag* %1308 to [1 x %struct.reg_info_def*]*
  %1310 = load i32, i32* %16, align 4
  %1311 = sext i32 %1310 to i64
  %1312 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1309, i64 0, i64 %1311
  %1313 = load %struct.reg_info_def*, %struct.reg_info_def** %1312, align 8
  %1314 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1313, i32 0, i32 5
  %1315 = load i32, i32* %1314, align 4
  %1316 = add nsw i32 %1315, %1298
  store i32 %1316, i32* %1314, align 4
  %1317 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1318 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1317, i32 0, i32 4
  %1319 = bitcast %union.varray_data_tag* %1318 to [1 x %struct.reg_info_def*]*
  %1320 = load i32, i32* %16, align 4
  %1321 = sext i32 %1320 to i64
  %1322 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1319, i64 0, i64 %1321
  %1323 = load %struct.reg_info_def*, %struct.reg_info_def** %1322, align 8
  %1324 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1323, i32 0, i32 7
  %1325 = load i32, i32* %1324, align 4
  %1326 = add nsw i32 %1325, 1
  store i32 %1326, i32* %1324, align 4
  %1327 = load i32, i32* @x.47
  %1328 = load i32, i32* @y.48
  %1329 = sub i32 %1327, 1
  %1330 = mul i32 %1327, %1329
  %1331 = urem i32 %1330, 2
  %1332 = icmp eq i32 %1331, 0
  %1333 = icmp slt i32 %1328, 10
  %1334 = or i1 %1332, %1333
  br i1 %1334, label %originalBBpart2334, label %originalBB309alteredBB

originalBBpart2334:                               ; preds = %originalBB309
  br label %1335

; <label>:1335:                                   ; preds = %originalBBpart2334
  %1336 = load i32, i32* @x.47
  %1337 = load i32, i32* @y.48
  %1338 = sub i32 %1336, 1
  %1339 = mul i32 %1336, %1338
  %1340 = urem i32 %1339, 2
  %1341 = icmp eq i32 %1340, 0
  %1342 = icmp slt i32 %1337, 10
  %1343 = or i1 %1341, %1342
  br i1 %1343, label %originalBB336, label %originalBB336alteredBB

originalBB336:                                    ; preds = %originalBB336alteredBB, %1335
  %1344 = load i32, i32* %16, align 4
  %1345 = add nsw i32 %1344, 1
  store i32 %1345, i32* %16, align 4
  %1346 = load i32, i32* @x.47
  %1347 = load i32, i32* @y.48
  %1348 = sub i32 %1346, 1
  %1349 = mul i32 %1346, %1348
  %1350 = urem i32 %1349, 2
  %1351 = icmp eq i32 %1350, 0
  %1352 = icmp slt i32 %1347, 10
  %1353 = or i1 %1351, %1352
  br i1 %1353, label %originalBBpart2345, label %originalBB336alteredBB

originalBBpart2345:                               ; preds = %originalBB336
  br label %1227

; <label>:1354:                                   ; preds = %originalBBpart2307
  %1355 = load i32, i32* %13, align 4
  %1356 = icmp slt i32 %1355, 53
  br i1 %1356, label %1357, label %1371

; <label>:1357:                                   ; preds = %1354
  %1358 = load i32, i32* %13, align 4
  store i32 %1358, i32* %16, align 4
  br label %1359

; <label>:1359:                                   ; preds = %1367, %1357
  %1360 = load i32, i32* %16, align 4
  %1361 = load i32, i32* %14, align 4
  %1362 = icmp sle i32 %1360, %1361
  br i1 %1362, label %1363, label %1370

; <label>:1363:                                   ; preds = %1359
  %1364 = load i32, i32* %16, align 4
  %1365 = sext i32 %1364 to i64
  %1366 = getelementptr inbounds [53 x i8], [53 x i8]* @regs_ever_live, i64 0, i64 %1365
  store i8 1, i8* %1366, align 1
  br label %1367

; <label>:1367:                                   ; preds = %1363
  %1368 = load i32, i32* %16, align 4
  %1369 = add nsw i32 %1368, 1
  store i32 %1369, i32* %16, align 4
  br label %1359

; <label>:1370:                                   ; preds = %1359
  br label %1447

; <label>:1371:                                   ; preds = %1354
  %1372 = load i32, i32* @x.47
  %1373 = load i32, i32* @y.48
  %1374 = sub i32 %1372, 1
  %1375 = mul i32 %1372, %1374
  %1376 = urem i32 %1375, 2
  %1377 = icmp eq i32 %1376, 0
  %1378 = icmp slt i32 %1373, 10
  %1379 = or i1 %1377, %1378
  br i1 %1379, label %originalBB347, label %originalBB347alteredBB

originalBB347:                                    ; preds = %originalBB347alteredBB, %1371
  %1380 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1381 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1380, i32 0, i32 4
  %1382 = bitcast %union.varray_data_tag* %1381 to [1 x %struct.reg_info_def*]*
  %1383 = load i32, i32* %13, align 4
  %1384 = sext i32 %1383 to i64
  %1385 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1382, i64 0, i64 %1384
  %1386 = load %struct.reg_info_def*, %struct.reg_info_def** %1385, align 8
  %1387 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1386, i32 0, i32 9
  %1388 = load i32, i32* %1387, align 4
  %1389 = icmp eq i32 %1388, -1
  %1390 = load i32, i32* @x.47
  %1391 = load i32, i32* @y.48
  %1392 = sub i32 %1390, 1
  %1393 = mul i32 %1390, %1392
  %1394 = urem i32 %1393, 2
  %1395 = icmp eq i32 %1394, 0
  %1396 = icmp slt i32 %1391, 10
  %1397 = or i1 %1395, %1396
  br i1 %1397, label %originalBBpart2349, label %originalBB347alteredBB

originalBBpart2349:                               ; preds = %originalBB347
  br i1 %1389, label %1398, label %1408

; <label>:1398:                                   ; preds = %originalBBpart2349
  %1399 = load i32, i32* %23, align 4
  %1400 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1401 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1400, i32 0, i32 4
  %1402 = bitcast %union.varray_data_tag* %1401 to [1 x %struct.reg_info_def*]*
  %1403 = load i32, i32* %13, align 4
  %1404 = sext i32 %1403 to i64
  %1405 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1402, i64 0, i64 %1404
  %1406 = load %struct.reg_info_def*, %struct.reg_info_def** %1405, align 8
  %1407 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1406, i32 0, i32 9
  store i32 %1399, i32* %1407, align 4
  br label %1446

; <label>:1408:                                   ; preds = %originalBBpart2349
  %1409 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1410 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1409, i32 0, i32 4
  %1411 = bitcast %union.varray_data_tag* %1410 to [1 x %struct.reg_info_def*]*
  %1412 = load i32, i32* %13, align 4
  %1413 = sext i32 %1412 to i64
  %1414 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1411, i64 0, i64 %1413
  %1415 = load %struct.reg_info_def*, %struct.reg_info_def** %1414, align 8
  %1416 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1415, i32 0, i32 9
  %1417 = load i32, i32* %1416, align 4
  %1418 = load i32, i32* %23, align 4
  %1419 = icmp ne i32 %1417, %1418
  br i1 %1419, label %1420, label %1429

; <label>:1420:                                   ; preds = %1408
  %1421 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1422 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1421, i32 0, i32 4
  %1423 = bitcast %union.varray_data_tag* %1422 to [1 x %struct.reg_info_def*]*
  %1424 = load i32, i32* %13, align 4
  %1425 = sext i32 %1424 to i64
  %1426 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1423, i64 0, i64 %1425
  %1427 = load %struct.reg_info_def*, %struct.reg_info_def** %1426, align 8
  %1428 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1427, i32 0, i32 9
  store i32 -2, i32* %1428, align 4
  br label %1429

; <label>:1429:                                   ; preds = %1420, %1408
  %1430 = load i32, i32* @x.47
  %1431 = load i32, i32* @y.48
  %1432 = sub i32 %1430, 1
  %1433 = mul i32 %1430, %1432
  %1434 = urem i32 %1433, 2
  %1435 = icmp eq i32 %1434, 0
  %1436 = icmp slt i32 %1431, 10
  %1437 = or i1 %1435, %1436
  br i1 %1437, label %originalBB351, label %originalBB351alteredBB

originalBB351:                                    ; preds = %originalBB351alteredBB, %1429
  %1438 = load i32, i32* @x.47
  %1439 = load i32, i32* @y.48
  %1440 = sub i32 %1438, 1
  %1441 = mul i32 %1438, %1440
  %1442 = urem i32 %1441, 2
  %1443 = icmp eq i32 %1442, 0
  %1444 = icmp slt i32 %1439, 10
  %1445 = or i1 %1443, %1444
  br i1 %1445, label %originalBBpart2353, label %originalBB351alteredBB

originalBBpart2353:                               ; preds = %originalBB351
  br label %1446

; <label>:1446:                                   ; preds = %originalBBpart2353, %1398
  br label %1447

; <label>:1447:                                   ; preds = %1446, %1370
  br label %1448

; <label>:1448:                                   ; preds = %1447, %1221
  %1449 = load i32, i32* @x.47
  %1450 = load i32, i32* @y.48
  %1451 = sub i32 %1449, 1
  %1452 = mul i32 %1449, %1451
  %1453 = urem i32 %1452, 2
  %1454 = icmp eq i32 %1453, 0
  %1455 = icmp slt i32 %1450, 10
  %1456 = or i1 %1454, %1455
  br i1 %1456, label %originalBB355, label %originalBB355alteredBB

originalBB355:                                    ; preds = %originalBB355alteredBB, %1448
  %1457 = load i32, i32* %20, align 4
  %1458 = icmp ne i32 %1457, 0
  %1459 = load i32, i32* @x.47
  %1460 = load i32, i32* @y.48
  %1461 = sub i32 %1459, 1
  %1462 = mul i32 %1459, %1461
  %1463 = urem i32 %1462, 2
  %1464 = icmp eq i32 %1463, 0
  %1465 = icmp slt i32 %1460, 10
  %1466 = or i1 %1464, %1465
  br i1 %1466, label %originalBBpart2357, label %originalBB355alteredBB

originalBBpart2357:                               ; preds = %originalBB355
  br i1 %1458, label %1580, label %1467

; <label>:1467:                                   ; preds = %originalBBpart2357
  %1468 = load i32, i32* %12, align 4
  %1469 = and i32 %1468, 2
  %1470 = icmp ne i32 %1469, 0
  br i1 %1470, label %1471, label %1579

; <label>:1471:                                   ; preds = %1467
  %1472 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %1473 = icmp ne %struct.rtx_def* %1472, null
  br i1 %1473, label %1474, label %1562

; <label>:1474:                                   ; preds = %1471
  %1475 = load i32, i32* @x.47
  %1476 = load i32, i32* @y.48
  %1477 = sub i32 %1475, 1
  %1478 = mul i32 %1475, %1477
  %1479 = urem i32 %1478, 2
  %1480 = icmp eq i32 %1479, 0
  %1481 = icmp slt i32 %1476, 10
  %1482 = or i1 %1480, %1481
  br i1 %1482, label %originalBB359, label %originalBB359alteredBB

originalBB359:                                    ; preds = %originalBB359alteredBB, %1474
  %1483 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %1484 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1483, i32 0, i32 4
  %1485 = bitcast %union.varray_data_tag* %1484 to [1 x %struct.basic_block_def*]*
  %1486 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %1487 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1486, i32 0, i32 1
  %1488 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1487, i64 0, i64 0
  %1489 = bitcast %union.rtunion_def* %1488 to i32*
  %1490 = load i32, i32* %1489, align 8
  %1491 = sext i32 %1490 to i64
  %1492 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %1485, i64 0, i64 %1491
  %1493 = load %struct.basic_block_def*, %struct.basic_block_def** %1492, align 8
  %1494 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1493, i32 0, i32 11
  %1495 = load i32, i32* %1494, align 8
  %1496 = add nsw i32 %1495, 0
  %1497 = load i32, i32* %23, align 4
  %1498 = icmp eq i32 %1496, %1497
  %1499 = load i32, i32* @x.47
  %1500 = load i32, i32* @y.48
  %1501 = sub i32 %1499, 1
  %1502 = mul i32 %1499, %1501
  %1503 = urem i32 %1502, 2
  %1504 = icmp eq i32 %1503, 0
  %1505 = icmp slt i32 %1500, 10
  %1506 = or i1 %1504, %1505
  br i1 %1506, label %originalBBpart2364, label %originalBB359alteredBB

originalBBpart2364:                               ; preds = %originalBB359
  br i1 %1498, label %1507, label %1562

; <label>:1507:                                   ; preds = %originalBBpart2364
  %1508 = load i32, i32* %13, align 4
  %1509 = icmp sge i32 %1508, 53
  br i1 %1509, label %1534, label %1510

; <label>:1510:                                   ; preds = %1507
  %1511 = load i32, i32* @x.47
  %1512 = load i32, i32* @y.48
  %1513 = sub i32 %1511, 1
  %1514 = mul i32 %1511, %1513
  %1515 = urem i32 %1514, 2
  %1516 = icmp eq i32 %1515, 0
  %1517 = icmp slt i32 %1512, 10
  %1518 = or i1 %1516, %1517
  br i1 %1518, label %originalBB366, label %originalBB366alteredBB

originalBB366:                                    ; preds = %originalBB366alteredBB, %1510
  %1519 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %1520 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1519, i32 0, i32 1
  %1521 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1520, i64 0, i64 3
  %1522 = bitcast %union.rtunion_def* %1521 to %struct.rtx_def**
  %1523 = load %struct.rtx_def*, %struct.rtx_def** %1522, align 8
  %1524 = call i32 @asm_noperands(%struct.rtx_def* %1523)
  %1525 = icmp slt i32 %1524, 0
  %1526 = load i32, i32* @x.47
  %1527 = load i32, i32* @y.48
  %1528 = sub i32 %1526, 1
  %1529 = mul i32 %1526, %1528
  %1530 = urem i32 %1529, 2
  %1531 = icmp eq i32 %1530, 0
  %1532 = icmp slt i32 %1527, 10
  %1533 = or i1 %1531, %1532
  br i1 %1533, label %originalBBpart2368, label %originalBB366alteredBB

originalBBpart2368:                               ; preds = %originalBB366
  br i1 %1525, label %1534, label %1562

; <label>:1534:                                   ; preds = %originalBBpart2368, %1507
  %1535 = load i32, i32* @x.47
  %1536 = load i32, i32* @y.48
  %1537 = sub i32 %1535, 1
  %1538 = mul i32 %1535, %1537
  %1539 = urem i32 %1538, 2
  %1540 = icmp eq i32 %1539, 0
  %1541 = icmp slt i32 %1536, 10
  %1542 = or i1 %1540, %1541
  br i1 %1542, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %originalBB370alteredBB, %1534
  %1543 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %1544 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %1545 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1544, i32 0, i32 1
  %1546 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1545, i64 0, i64 5
  %1547 = bitcast %union.rtunion_def* %1546 to %struct.rtx_def**
  %1548 = load %struct.rtx_def*, %struct.rtx_def** %1547, align 8
  %1549 = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %1543, %struct.rtx_def* %1548)
  %1550 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %1551 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1550, i32 0, i32 1
  %1552 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1551, i64 0, i64 5
  %1553 = bitcast %union.rtunion_def* %1552 to %struct.rtx_def**
  store %struct.rtx_def* %1549, %struct.rtx_def** %1553, align 8
  %1554 = load i32, i32* @x.47
  %1555 = load i32, i32* @y.48
  %1556 = sub i32 %1554, 1
  %1557 = mul i32 %1554, %1556
  %1558 = urem i32 %1557, 2
  %1559 = icmp eq i32 %1558, 0
  %1560 = icmp slt i32 %1555, 10
  %1561 = or i1 %1559, %1560
  br i1 %1561, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  br label %1562

; <label>:1562:                                   ; preds = %originalBBpart2372, %originalBBpart2368, %originalBBpart2364, %1471
  %1563 = load i32, i32* @x.47
  %1564 = load i32, i32* @y.48
  %1565 = sub i32 %1563, 1
  %1566 = mul i32 %1563, %1565
  %1567 = urem i32 %1566, 2
  %1568 = icmp eq i32 %1567, 0
  %1569 = icmp slt i32 %1564, 10
  %1570 = or i1 %1568, %1569
  br i1 %1570, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %originalBB374alteredBB, %1562
  %1571 = load i32, i32* @x.47
  %1572 = load i32, i32* @y.48
  %1573 = sub i32 %1571, 1
  %1574 = mul i32 %1571, %1573
  %1575 = urem i32 %1574, 2
  %1576 = icmp eq i32 %1575, 0
  %1577 = icmp slt i32 %1572, 10
  %1578 = or i1 %1576, %1577
  br i1 %1578, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br label %1579

; <label>:1579:                                   ; preds = %originalBBpart2376, %1467
  br label %1741

; <label>:1580:                                   ; preds = %originalBBpart2357
  %1581 = load i64, i64* %15, align 8
  %1582 = icmp ne i64 %1581, 0
  br i1 %1582, label %1583, label %1600

; <label>:1583:                                   ; preds = %1580
  %1584 = load i32, i32* @x.47
  %1585 = load i32, i32* @y.48
  %1586 = sub i32 %1584, 1
  %1587 = mul i32 %1584, %1586
  %1588 = urem i32 %1587, 2
  %1589 = icmp eq i32 %1588, 0
  %1590 = icmp slt i32 %1585, 10
  %1591 = or i1 %1589, %1590
  br i1 %1591, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %originalBB378alteredBB, %1583
  %1592 = load i32, i32* @x.47
  %1593 = load i32, i32* @y.48
  %1594 = sub i32 %1592, 1
  %1595 = mul i32 %1592, %1594
  %1596 = urem i32 %1595, 2
  %1597 = icmp eq i32 %1596, 0
  %1598 = icmp slt i32 %1593, 10
  %1599 = or i1 %1597, %1598
  br i1 %1599, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  br label %1740

; <label>:1600:                                   ; preds = %1580
  %1601 = load i32, i32* %19, align 4
  %1602 = icmp ne i32 %1601, 0
  br i1 %1602, label %1651, label %1603

; <label>:1603:                                   ; preds = %1600
  %1604 = load i32, i32* %12, align 4
  %1605 = and i32 %1604, 4
  %1606 = icmp ne i32 %1605, 0
  br i1 %1606, label %1607, label %1618

; <label>:1607:                                   ; preds = %1603
  %1608 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %1609 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %1608, i32 0, i32 4
  %1610 = bitcast %union.varray_data_tag* %1609 to [1 x %struct.reg_info_def*]*
  %1611 = load i32, i32* %13, align 4
  %1612 = sext i32 %1611 to i64
  %1613 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %1610, i64 0, i64 %1612
  %1614 = load %struct.reg_info_def*, %struct.reg_info_def** %1613, align 8
  %1615 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %1614, i32 0, i32 6
  %1616 = load i32, i32* %1615, align 4
  %1617 = add nsw i32 %1616, 1
  store i32 %1617, i32* %1615, align 4
  br label %1618

; <label>:1618:                                   ; preds = %1607, %1603
  %1619 = load i32, i32* @x.47
  %1620 = load i32, i32* @y.48
  %1621 = sub i32 %1619, 1
  %1622 = mul i32 %1619, %1621
  %1623 = urem i32 %1622, 2
  %1624 = icmp eq i32 %1623, 0
  %1625 = icmp slt i32 %1620, 10
  %1626 = or i1 %1624, %1625
  br i1 %1626, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %originalBB382alteredBB, %1618
  %1627 = load i32, i32* %12, align 4
  %1628 = and i32 %1627, 1
  %1629 = icmp ne i32 %1628, 0
  %1630 = load i32, i32* @x.47
  %1631 = load i32, i32* @y.48
  %1632 = sub i32 %1630, 1
  %1633 = mul i32 %1630, %1632
  %1634 = urem i32 %1633, 2
  %1635 = icmp eq i32 %1634, 0
  %1636 = icmp slt i32 %1631, 10
  %1637 = or i1 %1635, %1636
  br i1 %1637, label %originalBBpart2391, label %originalBB382alteredBB

originalBBpart2391:                               ; preds = %originalBB382
  br i1 %1629, label %1638, label %1650

; <label>:1638:                                   ; preds = %originalBBpart2391
  %1639 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1640 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %1641 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1640, i32 0, i32 1
  %1642 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1641, i64 0, i64 6
  %1643 = bitcast %union.rtunion_def* %1642 to %struct.rtx_def**
  %1644 = load %struct.rtx_def*, %struct.rtx_def** %1643, align 8
  %1645 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 10, %struct.rtx_def* %1639, %struct.rtx_def* %1644)
  %1646 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %1647 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1646, i32 0, i32 1
  %1648 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1647, i64 0, i64 6
  %1649 = bitcast %union.rtunion_def* %1648 to %struct.rtx_def**
  store %struct.rtx_def* %1645, %struct.rtx_def** %1649, align 8
  br label %1650

; <label>:1650:                                   ; preds = %1638, %originalBBpart2391
  br label %1739

; <label>:1651:                                   ; preds = %1600
  %1652 = load i32, i32* %12, align 4
  %1653 = and i32 %1652, 1
  %1654 = icmp ne i32 %1653, 0
  br i1 %1654, label %1655, label %1738

; <label>:1655:                                   ; preds = %1651
  %1656 = load i32, i32* @x.47
  %1657 = load i32, i32* @y.48
  %1658 = sub i32 %1656, 1
  %1659 = mul i32 %1656, %1658
  %1660 = urem i32 %1659, 2
  %1661 = icmp eq i32 %1660, 0
  %1662 = icmp slt i32 %1657, 10
  %1663 = or i1 %1661, %1662
  br i1 %1663, label %originalBB393, label %originalBB393alteredBB

originalBB393:                                    ; preds = %originalBB393alteredBB, %1655
  %1664 = load i32, i32* %13, align 4
  store i32 %1664, i32* %16, align 4
  %1665 = load i32, i32* @x.47
  %1666 = load i32, i32* @y.48
  %1667 = sub i32 %1665, 1
  %1668 = mul i32 %1665, %1667
  %1669 = urem i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  %1671 = icmp slt i32 %1666, 10
  %1672 = or i1 %1670, %1671
  br i1 %1672, label %originalBBpart2395, label %originalBB393alteredBB

originalBBpart2395:                               ; preds = %originalBB393
  br label %1673

; <label>:1673:                                   ; preds = %1718, %originalBBpart2395
  %1674 = load i32, i32* %16, align 4
  %1675 = load i32, i32* %14, align 4
  %1676 = icmp sle i32 %1674, %1675
  br i1 %1676, label %1677, label %1721

; <label>:1677:                                   ; preds = %1673
  %1678 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1679 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1678, i32 0, i32 1
  %1680 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1679, align 8
  %1681 = load i32, i32* %16, align 4
  %1682 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1680, i32 %1681)
  %1683 = icmp ne i32 %1682, 0
  br i1 %1683, label %1701, label %1684

; <label>:1684:                                   ; preds = %1677
  %1685 = load i32, i32* %16, align 4
  %1686 = sext i32 %1685 to i64
  %1687 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i64 0, i64 %1686
  %1688 = load i32, i32* %1687, align 4
  %1689 = load i32, i32* %16, align 4
  %1690 = call %struct.rtx_def* @gen_rtx_REG(i32 %1688, i32 %1689)
  %1691 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %1692 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1691, i32 0, i32 1
  %1693 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1692, i64 0, i64 6
  %1694 = bitcast %union.rtunion_def* %1693 to %struct.rtx_def**
  %1695 = load %struct.rtx_def*, %struct.rtx_def** %1694, align 8
  %1696 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 10, %struct.rtx_def* %1690, %struct.rtx_def* %1695)
  %1697 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %1698 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1697, i32 0, i32 1
  %1699 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1698, i64 0, i64 6
  %1700 = bitcast %union.rtunion_def* %1699 to %struct.rtx_def**
  store %struct.rtx_def* %1696, %struct.rtx_def** %1700, align 8
  br label %1701

; <label>:1701:                                   ; preds = %1684, %1677
  %1702 = load i32, i32* @x.47
  %1703 = load i32, i32* @y.48
  %1704 = sub i32 %1702, 1
  %1705 = mul i32 %1702, %1704
  %1706 = urem i32 %1705, 2
  %1707 = icmp eq i32 %1706, 0
  %1708 = icmp slt i32 %1703, 10
  %1709 = or i1 %1707, %1708
  br i1 %1709, label %originalBB397, label %originalBB397alteredBB

originalBB397:                                    ; preds = %originalBB397alteredBB, %1701
  %1710 = load i32, i32* @x.47
  %1711 = load i32, i32* @y.48
  %1712 = sub i32 %1710, 1
  %1713 = mul i32 %1710, %1712
  %1714 = urem i32 %1713, 2
  %1715 = icmp eq i32 %1714, 0
  %1716 = icmp slt i32 %1711, 10
  %1717 = or i1 %1715, %1716
  br i1 %1717, label %originalBBpart2399, label %originalBB397alteredBB

originalBBpart2399:                               ; preds = %originalBB397
  br label %1718

; <label>:1718:                                   ; preds = %originalBBpart2399
  %1719 = load i32, i32* %16, align 4
  %1720 = add nsw i32 %1719, 1
  store i32 %1720, i32* %16, align 4
  br label %1673

; <label>:1721:                                   ; preds = %1673
  %1722 = load i32, i32* @x.47
  %1723 = load i32, i32* @y.48
  %1724 = sub i32 %1722, 1
  %1725 = mul i32 %1722, %1724
  %1726 = urem i32 %1725, 2
  %1727 = icmp eq i32 %1726, 0
  %1728 = icmp slt i32 %1723, 10
  %1729 = or i1 %1727, %1728
  br i1 %1729, label %originalBB401, label %originalBB401alteredBB

originalBB401:                                    ; preds = %originalBB401alteredBB, %1721
  %1730 = load i32, i32* @x.47
  %1731 = load i32, i32* @y.48
  %1732 = sub i32 %1730, 1
  %1733 = mul i32 %1730, %1732
  %1734 = urem i32 %1733, 2
  %1735 = icmp eq i32 %1734, 0
  %1736 = icmp slt i32 %1731, 10
  %1737 = or i1 %1735, %1736
  br i1 %1737, label %originalBBpart2403, label %originalBB401alteredBB

originalBBpart2403:                               ; preds = %originalBB401
  br label %1738

; <label>:1738:                                   ; preds = %originalBBpart2403, %1651
  br label %1739

; <label>:1739:                                   ; preds = %1738, %1650
  br label %1740

; <label>:1740:                                   ; preds = %1739, %originalBBpart2380
  br label %1741

; <label>:1741:                                   ; preds = %1740, %1579
  br label %1742

; <label>:1742:                                   ; preds = %1741, %1120
  %1743 = load i32, i32* %19, align 4
  %1744 = icmp ne i32 %1743, 0
  br i1 %1744, label %1745, label %1821

; <label>:1745:                                   ; preds = %1742
  %1746 = load i32, i32* %13, align 4
  %1747 = icmp ne i32 %1746, 7
  br i1 %1747, label %1748, label %1821

; <label>:1748:                                   ; preds = %1745
  %1749 = load i32, i32* @x.47
  %1750 = load i32, i32* @y.48
  %1751 = sub i32 %1749, 1
  %1752 = mul i32 %1749, %1751
  %1753 = urem i32 %1752, 2
  %1754 = icmp eq i32 %1753, 0
  %1755 = icmp slt i32 %1750, 10
  %1756 = or i1 %1754, %1755
  br i1 %1756, label %originalBB405, label %originalBB405alteredBB

originalBB405:                                    ; preds = %originalBB405alteredBB, %1748
  %1757 = load i32, i32* %13, align 4
  store i32 %1757, i32* %16, align 4
  %1758 = load i32, i32* @x.47
  %1759 = load i32, i32* @y.48
  %1760 = sub i32 %1758, 1
  %1761 = mul i32 %1758, %1760
  %1762 = urem i32 %1761, 2
  %1763 = icmp eq i32 %1762, 0
  %1764 = icmp slt i32 %1759, 10
  %1765 = or i1 %1763, %1764
  br i1 %1765, label %originalBBpart2407, label %originalBB405alteredBB

originalBBpart2407:                               ; preds = %originalBB405
  br label %1766

; <label>:1766:                                   ; preds = %originalBBpart2444, %originalBBpart2407
  %1767 = load i32, i32* %16, align 4
  %1768 = load i32, i32* %14, align 4
  %1769 = icmp sle i32 %1767, %1768
  br i1 %1769, label %1770, label %1820

; <label>:1770:                                   ; preds = %1766
  %1771 = load i32, i32* @x.47
  %1772 = load i32, i32* @y.48
  %1773 = sub i32 %1771, 1
  %1774 = mul i32 %1771, %1773
  %1775 = urem i32 %1774, 2
  %1776 = icmp eq i32 %1775, 0
  %1777 = icmp slt i32 %1772, 10
  %1778 = or i1 %1776, %1777
  br i1 %1778, label %originalBB409, label %originalBB409alteredBB

originalBB409:                                    ; preds = %originalBB409alteredBB, %1770
  %1779 = load i64, i64* %15, align 8
  %1780 = load i32, i32* %16, align 4
  %1781 = load i32, i32* %13, align 4
  %1782 = sub nsw i32 %1780, %1781
  %1783 = zext i32 %1782 to i64
  %1784 = shl i64 1, %1783
  %1785 = and i64 %1779, %1784
  %1786 = icmp ne i64 %1785, 0
  %1787 = load i32, i32* @x.47
  %1788 = load i32, i32* @y.48
  %1789 = sub i32 %1787, 1
  %1790 = mul i32 %1787, %1789
  %1791 = urem i32 %1790, 2
  %1792 = icmp eq i32 %1791, 0
  %1793 = icmp slt i32 %1788, 10
  %1794 = or i1 %1792, %1793
  br i1 %1794, label %originalBBpart2438, label %originalBB409alteredBB

originalBBpart2438:                               ; preds = %originalBB409
  br i1 %1786, label %1800, label %1795

; <label>:1795:                                   ; preds = %originalBBpart2438
  %1796 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1797 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1796, i32 0, i32 1
  %1798 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1797, align 8
  %1799 = load i32, i32* %16, align 4
  call void @bitmap_clear_bit(%struct.bitmap_head_def* %1798, i32 %1799)
  br label %1800

; <label>:1800:                                   ; preds = %1795, %originalBBpart2438
  br label %1801

; <label>:1801:                                   ; preds = %1800
  %1802 = load i32, i32* @x.47
  %1803 = load i32, i32* @y.48
  %1804 = sub i32 %1802, 1
  %1805 = mul i32 %1802, %1804
  %1806 = urem i32 %1805, 2
  %1807 = icmp eq i32 %1806, 0
  %1808 = icmp slt i32 %1803, 10
  %1809 = or i1 %1807, %1808
  br i1 %1809, label %originalBB440, label %originalBB440alteredBB

originalBB440:                                    ; preds = %originalBB440alteredBB, %1801
  %1810 = load i32, i32* %16, align 4
  %1811 = add nsw i32 %1810, 1
  store i32 %1811, i32* %16, align 4
  %1812 = load i32, i32* @x.47
  %1813 = load i32, i32* @y.48
  %1814 = sub i32 %1812, 1
  %1815 = mul i32 %1812, %1814
  %1816 = urem i32 %1815, 2
  %1817 = icmp eq i32 %1816, 0
  %1818 = icmp slt i32 %1813, 10
  %1819 = or i1 %1817, %1818
  br i1 %1819, label %originalBBpart2444, label %originalBB440alteredBB

originalBBpart2444:                               ; preds = %originalBB440
  br label %1766

; <label>:1820:                                   ; preds = %1766
  br label %1821

; <label>:1821:                                   ; preds = %1820, %1745, %1742
  br label %1929

; <label>:1822:                                   ; preds = %originalBBpart2232, %965, %originalBBpart2228, %940, %937, %originalBBpart2224
  %1823 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1824 = bitcast %struct.rtx_def* %1823 to i32*
  %1825 = load i32, i32* %1824, align 8
  %1826 = and i32 %1825, 65535
  %1827 = icmp eq i32 %1826, 61
  br i1 %1827, label %1828, label %1856

; <label>:1828:                                   ; preds = %1822
  %1829 = load i32, i32* %12, align 4
  %1830 = and i32 %1829, 66
  %1831 = icmp ne i32 %1830, 0
  br i1 %1831, label %1832, label %1855

; <label>:1832:                                   ; preds = %1828
  %1833 = load i32, i32* @x.47
  %1834 = load i32, i32* @y.48
  %1835 = sub i32 %1833, 1
  %1836 = mul i32 %1833, %1835
  %1837 = urem i32 %1836, 2
  %1838 = icmp eq i32 %1837, 0
  %1839 = icmp slt i32 %1834, 10
  %1840 = or i1 %1838, %1839
  br i1 %1840, label %originalBB446, label %originalBB446alteredBB

originalBB446:                                    ; preds = %originalBB446alteredBB, %1832
  %1841 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1842 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1841, i32 0, i32 3
  %1843 = load %struct.rtx_def**, %struct.rtx_def*** %1842, align 8
  %1844 = load i32, i32* %13, align 4
  %1845 = sext i32 %1844 to i64
  %1846 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1843, i64 %1845
  store %struct.rtx_def* null, %struct.rtx_def** %1846, align 8
  %1847 = load i32, i32* @x.47
  %1848 = load i32, i32* @y.48
  %1849 = sub i32 %1847, 1
  %1850 = mul i32 %1847, %1849
  %1851 = urem i32 %1850, 2
  %1852 = icmp eq i32 %1851, 0
  %1853 = icmp slt i32 %1848, 10
  %1854 = or i1 %1852, %1853
  br i1 %1854, label %originalBBpart2448, label %originalBB446alteredBB

originalBBpart2448:                               ; preds = %originalBB446
  br label %1855

; <label>:1855:                                   ; preds = %originalBBpart2448, %1828
  br label %1912

; <label>:1856:                                   ; preds = %1822
  %1857 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1858 = bitcast %struct.rtx_def* %1857 to i32*
  %1859 = load i32, i32* %1858, align 8
  %1860 = and i32 %1859, 65535
  %1861 = icmp eq i32 %1860, 62
  br i1 %1861, label %1862, label %1895

; <label>:1862:                                   ; preds = %1856
  %1863 = load i32, i32* %12, align 4
  %1864 = and i32 %1863, 1
  %1865 = icmp ne i32 %1864, 0
  br i1 %1865, label %1866, label %1894

; <label>:1866:                                   ; preds = %1862
  %1867 = load i32, i32* @x.47
  %1868 = load i32, i32* @y.48
  %1869 = sub i32 %1867, 1
  %1870 = mul i32 %1867, %1869
  %1871 = urem i32 %1870, 2
  %1872 = icmp eq i32 %1871, 0
  %1873 = icmp slt i32 %1868, 10
  %1874 = or i1 %1872, %1873
  br i1 %1874, label %originalBB450, label %originalBB450alteredBB

originalBB450:                                    ; preds = %originalBB450alteredBB, %1866
  %1875 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1876 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %1877 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1876, i32 0, i32 1
  %1878 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1877, i64 0, i64 6
  %1879 = bitcast %union.rtunion_def* %1878 to %struct.rtx_def**
  %1880 = load %struct.rtx_def*, %struct.rtx_def** %1879, align 8
  %1881 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 10, %struct.rtx_def* %1875, %struct.rtx_def* %1880)
  %1882 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %1883 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1882, i32 0, i32 1
  %1884 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1883, i64 0, i64 6
  %1885 = bitcast %union.rtunion_def* %1884 to %struct.rtx_def**
  store %struct.rtx_def* %1881, %struct.rtx_def** %1885, align 8
  %1886 = load i32, i32* @x.47
  %1887 = load i32, i32* @y.48
  %1888 = sub i32 %1886, 1
  %1889 = mul i32 %1886, %1888
  %1890 = urem i32 %1889, 2
  %1891 = icmp eq i32 %1890, 0
  %1892 = icmp slt i32 %1887, 10
  %1893 = or i1 %1891, %1892
  br i1 %1893, label %originalBBpart2452, label %originalBB450alteredBB

originalBBpart2452:                               ; preds = %originalBB450
  br label %1894

; <label>:1894:                                   ; preds = %originalBBpart2452, %1862
  br label %1895

; <label>:1895:                                   ; preds = %1894, %1856
  %1896 = load i32, i32* @x.47
  %1897 = load i32, i32* @y.48
  %1898 = sub i32 %1896, 1
  %1899 = mul i32 %1896, %1898
  %1900 = urem i32 %1899, 2
  %1901 = icmp eq i32 %1900, 0
  %1902 = icmp slt i32 %1897, 10
  %1903 = or i1 %1901, %1902
  br i1 %1903, label %originalBB454, label %originalBB454alteredBB

originalBB454:                                    ; preds = %originalBB454alteredBB, %1895
  %1904 = load i32, i32* @x.47
  %1905 = load i32, i32* @y.48
  %1906 = sub i32 %1904, 1
  %1907 = mul i32 %1904, %1906
  %1908 = urem i32 %1907, 2
  %1909 = icmp eq i32 %1908, 0
  %1910 = icmp slt i32 %1905, 10
  %1911 = or i1 %1909, %1910
  br i1 %1911, label %originalBBpart2456, label %originalBB454alteredBB

originalBBpart2456:                               ; preds = %originalBB454
  br label %1912

; <label>:1912:                                   ; preds = %originalBBpart2456, %1855
  %1913 = load i32, i32* @x.47
  %1914 = load i32, i32* @y.48
  %1915 = sub i32 %1913, 1
  %1916 = mul i32 %1913, %1915
  %1917 = urem i32 %1916, 2
  %1918 = icmp eq i32 %1917, 0
  %1919 = icmp slt i32 %1914, 10
  %1920 = or i1 %1918, %1919
  br i1 %1920, label %originalBB458, label %originalBB458alteredBB

originalBB458:                                    ; preds = %originalBB458alteredBB, %1912
  %1921 = load i32, i32* @x.47
  %1922 = load i32, i32* @y.48
  %1923 = sub i32 %1921, 1
  %1924 = mul i32 %1921, %1923
  %1925 = urem i32 %1924, 2
  %1926 = icmp eq i32 %1925, 0
  %1927 = icmp slt i32 %1922, 10
  %1928 = or i1 %1926, %1927
  br i1 %1928, label %originalBBpart2460, label %originalBB458alteredBB

originalBBpart2460:                               ; preds = %originalBB458
  br label %1929

; <label>:1929:                                   ; preds = %originalBBpart2460, %1821, %96
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %37
  %1930 = load i32, i32* %16, align 4
  %1931 = icmp sge i32 %1930, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %104
  %1932 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1933 = bitcast %struct.rtx_def* %1932 to i32*
  %1934 = load i32, i32* %1933, align 8
  %_ = sub i32 %1934, 65535
  %gen = mul i32 %_, 65535
  %_2 = sub i32 %1934, 65535
  %gen3 = mul i32 %_2, 65535
  %_4 = sub i32 %1934, 65535
  %gen5 = mul i32 %_4, 65535
  %_6 = sub i32 0, %1934
  %gen7 = add i32 %_6, 65535
  %1935 = and i32 %1934, 65535
  %1936 = icmp eq i32 %1935, 63
  br label %originalBB1

originalBB11alteredBB:                            ; preds = %originalBB11, %126
  %1937 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1938 = bitcast %struct.rtx_def* %1937 to i32*
  %1939 = load i32, i32* %1938, align 8
  %_12 = sub i32 0, %1939
  %gen13 = add i32 %_12, 65535
  %_14 = sub i32 %1939, 65535
  %gen15 = mul i32 %_14, 65535
  %_16 = shl i32 %1939, 65535
  %_17 = sub i32 0, %1939
  %gen18 = add i32 %_17, 65535
  %_19 = shl i32 %1939, 65535
  %_20 = sub i32 %1939, 65535
  %gen21 = mul i32 %_20, 65535
  %_22 = shl i32 %1939, 65535
  %1940 = and i32 %1939, 65535
  %1941 = icmp eq i32 %1940, 133
  br label %originalBB11

originalBB26alteredBB:                            ; preds = %originalBB26, %160
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %178
  %1942 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1943 = bitcast %struct.rtx_def* %1942 to i32*
  %1944 = load i32, i32* %1943, align 8
  %_31 = sub i32 0, %1944
  %gen32 = add i32 %_31, 65535
  %_33 = sub i32 0, %1944
  %gen34 = add i32 %_33, 65535
  %_35 = shl i32 %1944, 65535
  %1945 = and i32 %1944, 65535
  %1946 = icmp eq i32 %1945, 66
  br label %originalBB30

originalBB39alteredBB:                            ; preds = %originalBB39, %200
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %217
  %1947 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %1948 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %1947, i32 0, i32 1
  %1949 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %1948, align 8
  %1950 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1951 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1950, i32 0, i32 1
  %1952 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1951, i64 0, i64 0
  %1953 = bitcast %union.rtunion_def* %1952 to i32*
  %1954 = load i32, i32* %1953, align 8
  %1955 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1949, i32 %1954)
  %1956 = sext i32 %1955 to i64
  store i64 %1956, i64* %15, align 8
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %252
  %1957 = load i32, i32* %13, align 4
  %1958 = icmp sge i32 %1957, 8
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %283
  %1959 = load i32, i32* %13, align 4
  %1960 = icmp sle i32 %1959, 52
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %305
  %1961 = load i32, i32* %13, align 4
  %1962 = icmp sle i32 %1961, 36
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %344
  %1963 = select i1 %345, i32 2, i32 1
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %370
  %1964 = load i32, i32* @target_flags, align 4
  %_64 = sub i32 0, %1964
  %gen65 = add i32 %_64, 33554432
  %_66 = shl i32 %1964, 33554432
  %_67 = sub i32 %1964, 33554432
  %gen68 = mul i32 %_67, 33554432
  %_69 = sub i32 0, %1964
  %gen70 = add i32 %_69, 33554432
  %_71 = sub i32 0, %1964
  %gen72 = add i32 %_71, 33554432
  %_73 = sub i32 0, %1964
  %gen74 = add i32 %_73, 33554432
  %_75 = shl i32 %1964, 33554432
  %_76 = sub i32 %1964, 33554432
  %gen77 = mul i32 %_76, 33554432
  %_78 = sub i32 %1964, 33554432
  %gen79 = mul i32 %_78, 33554432
  %1965 = and i32 %1964, 33554432
  %1966 = icmp ne i32 %1965, 0
  %1967 = select i1 %1966, i32 2, i32 3
  br label %originalBB63

originalBB83alteredBB:                            ; preds = %originalBB83, %424
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %444
  %_88 = shl i32 %445, 1
  %1968 = sub nsw i32 %445, 1
  %1969 = load i32, i32* %14, align 4
  %_89 = shl i32 %1969, %1968
  %_90 = sub i32 0, %1969
  %gen91 = add i32 %_90, %1968
  %_92 = sub i32 0, %1969
  %gen93 = add i32 %_92, %1968
  %_94 = sub i32 0, %1969
  %gen95 = add i32 %_94, %1968
  %_96 = sub i32 0, %1969
  %gen97 = add i32 %_96, %1968
  %_98 = shl i32 %1969, %1968
  %_99 = shl i32 %1969, %1968
  %_100 = shl i32 %1969, %1968
  %_101 = shl i32 %1969, %1968
  %_102 = shl i32 %1969, %1968
  %1970 = add nsw i32 %1969, %1968
  store i32 %1970, i32* %14, align 4
  br label %originalBB87

originalBB106alteredBB:                           ; preds = %originalBB106, %465
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %482
  %1971 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1972 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1971, i32 0, i32 1
  %1973 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1972, i64 0, i64 0
  %1974 = bitcast %union.rtunion_def* %1973 to %struct.rtx_def**
  %1975 = load %struct.rtx_def*, %struct.rtx_def** %1974, align 8
  %1976 = bitcast %struct.rtx_def* %1975 to i32*
  %1977 = load i32, i32* %1976, align 8
  %_111 = sub i32 0, %1977
  %gen112 = add i32 %_111, 65535
  %_113 = sub i32 0, %1977
  %gen114 = add i32 %_113, 65535
  %_115 = shl i32 %1977, 65535
  %_116 = sub i32 0, %1977
  %gen117 = add i32 %_116, 65535
  %_118 = sub i32 %1977, 65535
  %gen119 = mul i32 %_118, 65535
  %_120 = sub i32 0, %1977
  %gen121 = add i32 %_120, 65535
  %1978 = and i32 %1977, 65535
  %1979 = icmp eq i32 %1978, 61
  br label %originalBB110

originalBB125alteredBB:                           ; preds = %originalBB125, %508
  %1980 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1981 = bitcast %struct.rtx_def* %1980 to i32*
  %1982 = load i32, i32* %1981, align 8
  %_126 = sub i32 0, %1982
  %gen127 = add i32 %_126, 16
  %_128 = sub i32 %1982, 16
  %gen129 = mul i32 %_128, 16
  %_130 = sub i32 %1982, 16
  %gen131 = mul i32 %_130, 16
  %_132 = sub i32 %1982, 16
  %gen133 = mul i32 %_132, 16
  %_134 = sub i32 0, %1982
  %gen135 = add i32 %_134, 16
  %_136 = sub i32 %1982, 16
  %gen137 = mul i32 %_136, 16
  %1983 = lshr i32 %1982, 16
  %_138 = shl i32 %1983, 255
  %_139 = sub i32 0, %1983
  %gen140 = add i32 %_139, 255
  %_141 = shl i32 %1983, 255
  %_142 = shl i32 %1983, 255
  %_143 = sub i32 %1983, 255
  %gen144 = mul i32 %_143, 255
  %1984 = and i32 %1983, 255
  store i32 %1984, i32* %17, align 4
  %1985 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1986 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1985, i32 0, i32 1
  %1987 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1986, i64 0, i64 0
  %1988 = bitcast %union.rtunion_def* %1987 to %struct.rtx_def**
  %1989 = load %struct.rtx_def*, %struct.rtx_def** %1988, align 8
  %1990 = bitcast %struct.rtx_def* %1989 to i32*
  %1991 = load i32, i32* %1990, align 8
  %_145 = sub i32 0, %1991
  %gen146 = add i32 %_145, 16
  %_147 = sub i32 %1991, 16
  %gen148 = mul i32 %_147, 16
  %_149 = sub i32 0, %1991
  %gen150 = add i32 %_149, 16
  %1992 = lshr i32 %1991, 16
  %_151 = sub i32 %1992, 255
  %gen152 = mul i32 %_151, 255
  %1993 = and i32 %1992, 255
  store i32 %1993, i32* %18, align 4
  %1994 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %1995 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1994, i32 0, i32 1
  %1996 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1995, i64 0, i64 0
  %1997 = bitcast %union.rtunion_def* %1996 to %struct.rtx_def**
  %1998 = load %struct.rtx_def*, %struct.rtx_def** %1997, align 8
  %1999 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1998, i32 0, i32 1
  %2000 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1999, i64 0, i64 0
  %2001 = bitcast %union.rtunion_def* %2000 to i32*
  %2002 = load i32, i32* %2001, align 8
  store i32 %2002, i32* %13, align 4
  store i32 %2002, i32* %14, align 4
  %2003 = load i32, i32* %13, align 4
  %2004 = icmp slt i32 %2003, 53
  br label %originalBB125

originalBB156alteredBB:                           ; preds = %originalBB156, %550
  %2005 = load i32, i32* %13, align 4
  %2006 = load i32, i32* %18, align 4
  %2007 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %2008 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2007, i32 0, i32 1
  %2009 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2008, i64 0, i64 1
  %2010 = bitcast %union.rtunion_def* %2009 to i32*
  %2011 = load i32, i32* %2010, align 8
  %2012 = load i32, i32* %17, align 4
  %2013 = call i32 @subreg_regno_offset(i32 %2005, i32 %2006, i32 %2011, i32 %2012)
  %2014 = load i32, i32* %13, align 4
  %_157 = sub i32 %2014, %2013
  %gen158 = mul i32 %_157, %2013
  %_159 = sub i32 %2014, %2013
  %gen160 = mul i32 %_159, %2013
  %_161 = shl i32 %2014, %2013
  %2015 = add i32 %2014, %2013
  store i32 %2015, i32* %13, align 4
  %2016 = load i32, i32* %13, align 4
  %2017 = load i32, i32* %13, align 4
  %2018 = icmp sge i32 %2017, 8
  br label %originalBB156

originalBB165alteredBB:                           ; preds = %originalBB165, %593
  %2019 = load i32, i32* %13, align 4
  %2020 = icmp sle i32 %2019, 52
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %615
  %2021 = load i32, i32* %13, align 4
  %2022 = icmp sle i32 %2021, 36
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %734
  %2023 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %2024 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2023, i32 0, i32 1
  %2025 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2024, i64 0, i64 0
  %2026 = bitcast %union.rtunion_def* %2025 to %struct.rtx_def**
  %2027 = load %struct.rtx_def*, %struct.rtx_def** %2026, align 8
  store %struct.rtx_def* %2027, %struct.rtx_def** %9, align 8
  br label %originalBB173

originalBB177alteredBB:                           ; preds = %originalBB177, %756
  br label %originalBB177

originalBB181alteredBB:                           ; preds = %originalBB181, %780
  br label %originalBB181

originalBB185alteredBB:                           ; preds = %originalBB185, %800
  %2028 = load i32, i32* %12, align 4
  %_186 = sub i32 %2028, 16
  %gen187 = mul i32 %_186, 16
  %_188 = sub i32 %2028, 16
  %gen189 = mul i32 %_188, 16
  %_190 = shl i32 %2028, 16
  %_191 = shl i32 %2028, 16
  %_192 = shl i32 %2028, 16
  %_193 = sub i32 0, %2028
  %gen194 = add i32 %_193, 16
  %_195 = sub i32 %2028, 16
  %gen196 = mul i32 %_195, 16
  %2029 = and i32 %2028, 16
  %2030 = icmp ne i32 %2029, 0
  br label %originalBB185

originalBB200alteredBB:                           ; preds = %originalBB200, %829
  %2031 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %2032 = icmp ne %struct.rtx_def* %2031, null
  br label %originalBB200

originalBB204alteredBB:                           ; preds = %originalBB204, %848
  %2033 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %2034 = bitcast %struct.rtx_def* %2033 to i32*
  %2035 = load i32, i32* %2034, align 8
  %_205 = shl i32 %2035, 65535
  %2036 = and i32 %2035, 65535
  %2037 = icmp eq i32 %2036, 66
  br label %originalBB204

originalBB209alteredBB:                           ; preds = %originalBB209, %895
  br label %originalBB209

originalBB214alteredBB:                           ; preds = %originalBB214, %912
  %2038 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %2039 = bitcast %struct.rtx_def* %2038 to i32*
  %2040 = load i32, i32* %2039, align 8
  %_215 = sub i32 %2040, 65535
  %gen216 = mul i32 %_215, 65535
  %_217 = shl i32 %2040, 65535
  %_218 = shl i32 %2040, 65535
  %_219 = sub i32 0, %2040
  %gen220 = add i32 %_219, 65535
  %_221 = shl i32 %2040, 65535
  %_222 = shl i32 %2040, 65535
  %2041 = and i32 %2040, 65535
  %2042 = icmp eq i32 %2041, 61
  br label %originalBB214

originalBB226alteredBB:                           ; preds = %originalBB226, %946
  %2043 = load i32, i32* @reload_completed, align 4
  %2044 = icmp ne i32 %2043, 0
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %971
  %2045 = load i32, i32* %13, align 4
  %2046 = sext i32 %2045 to i64
  %2047 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %2046
  %2048 = load i8, i8* %2047, align 1
  %2049 = sext i8 %2048 to i32
  %2050 = icmp ne i32 %2049, 0
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %994
  store i32 0, i32* %19, align 4
  store i32 0, i32* %20, align 4
  %2051 = load i32, i32* %13, align 4
  store i32 %2051, i32* %16, align 4
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1016
  %2052 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %2053 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %2052, i32 0, i32 1
  %2054 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2053, align 8
  %2055 = load i32, i32* %16, align 4
  %2056 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %2054, i32 %2055)
  store i32 %2056, i32* %21, align 4
  %2057 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %2058 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %2057, i32 0, i32 5
  %2059 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2058, align 8
  %2060 = icmp ne %struct.bitmap_head_def* %2059, null
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1067
  %2061 = load i32, i32* %8, align 4
  %2062 = icmp ne i32 %2061, 49
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1091
  %2063 = load i32, i32* %21, align 4
  %2064 = load i32, i32* %19, align 4
  %_247 = sub i32 0, %2064
  %gen248 = add i32 %_247, %2063
  %_249 = sub i32 %2064, %2063
  %gen250 = mul i32 %_249, %2063
  %_251 = sub i32 0, %2064
  %gen252 = add i32 %_251, %2063
  %_253 = shl i32 %2064, %2063
  %_254 = sub i32 %2064, %2063
  %gen255 = mul i32 %_254, %2063
  %_256 = shl i32 %2064, %2063
  %_257 = sub i32 0, %2064
  %gen258 = add i32 %_257, %2063
  %_259 = sub i32 0, %2064
  %gen260 = add i32 %_259, %2063
  %_261 = sub i32 %2064, %2063
  %gen262 = mul i32 %_261, %2063
  %2065 = or i32 %2064, %2063
  store i32 %2065, i32* %19, align 4
  %2066 = load i32, i32* %21, align 4
  %2067 = icmp ne i32 %2066, 0
  %_263 = sub i1 %2067, true
  %gen264 = mul i1 %_263, true
  %_265 = shl i1 %2067, true
  %2068 = xor i1 %2067, true
  %2069 = zext i1 %2068 to i32
  %2070 = load i32, i32* %20, align 4
  %_266 = sub i32 %2070, %2069
  %gen267 = mul i32 %_266, %2069
  %_268 = sub i32 %2070, %2069
  %gen269 = mul i32 %_268, %2069
  %_270 = shl i32 %2070, %2069
  %_271 = sub i32 %2070, %2069
  %gen272 = mul i32 %_271, %2069
  %_273 = shl i32 %2070, %2069
  %2071 = or i32 %2070, %2069
  store i32 %2071, i32* %20, align 4
  br label %originalBB246

originalBB277alteredBB:                           ; preds = %originalBB277, %1124
  %2072 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %2073 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %2072, i32 0, i32 0
  %2074 = load %struct.basic_block_def*, %struct.basic_block_def** %2073, align 8
  %2075 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2074, i32 0, i32 11
  %2076 = load i32, i32* %2075, align 8
  store i32 %2076, i32* %23, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %22, align 8
  %2077 = load i32, i32* %12, align 4
  %_278 = sub i32 0, %2077
  %gen279 = add i32 %_278, 66
  %_280 = sub i32 %2077, 66
  %gen281 = mul i32 %_280, 66
  %_282 = sub i32 %2077, 66
  %gen283 = mul i32 %_282, 66
  %_284 = sub i32 0, %2077
  %gen285 = add i32 %_284, 66
  %2078 = and i32 %2077, 66
  %2079 = icmp ne i32 %2078, 0
  br label %originalBB277

originalBB290alteredBB:                           ; preds = %originalBB290, %1149
  %2080 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %2081 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %2080, i32 0, i32 3
  %2082 = load %struct.rtx_def**, %struct.rtx_def*** %2081, align 8
  %2083 = load i32, i32* %13, align 4
  %2084 = sext i32 %2083 to i64
  %2085 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2082, i64 %2084
  %2086 = load %struct.rtx_def*, %struct.rtx_def** %2085, align 8
  store %struct.rtx_def* %2086, %struct.rtx_def** %22, align 8
  %2087 = load i32, i32* %13, align 4
  store i32 %2087, i32* %16, align 4
  br label %originalBB290

originalBB294alteredBB:                           ; preds = %originalBB294, %1178
  %2088 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %2089 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %2088, i32 0, i32 3
  %2090 = load %struct.rtx_def**, %struct.rtx_def*** %2089, align 8
  %2091 = load i32, i32* %16, align 4
  %2092 = sext i32 %2091 to i64
  %2093 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2090, i64 %2092
  store %struct.rtx_def* null, %struct.rtx_def** %2093, align 8
  br label %originalBB294

originalBB298alteredBB:                           ; preds = %originalBB298, %1201
  %2094 = load i32, i32* %16, align 4
  %_299 = shl i32 %2094, 1
  %_300 = sub i32 0, %2094
  %gen301 = add i32 %_300, 1
  %2095 = add nsw i32 %2094, 1
  store i32 %2095, i32* %16, align 4
  br label %originalBB298

originalBB305alteredBB:                           ; preds = %originalBB305, %1227
  %2096 = load i32, i32* %16, align 4
  %2097 = load i32, i32* %14, align 4
  %2098 = icmp sle i32 %2096, %2097
  br label %originalBB305

originalBB309alteredBB:                           ; preds = %originalBB309, %1297
  %2099 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %2100 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %2099, i32 0, i32 4
  %2101 = bitcast %union.varray_data_tag* %2100 to [1 x %struct.reg_info_def*]*
  %2102 = load i32, i32* %16, align 4
  %2103 = sext i32 %2102 to i64
  %2104 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %2101, i64 0, i64 %2103
  %2105 = load %struct.reg_info_def*, %struct.reg_info_def** %2104, align 8
  %2106 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %2105, i32 0, i32 5
  %2107 = load i32, i32* %2106, align 4
  %_310 = shl i32 %2107, %1298
  %_311 = sub i32 0, %2107
  %gen312 = add i32 %_311, %1298
  %_313 = sub i32 0, %2107
  %gen314 = add i32 %_313, %1298
  %_315 = sub i32 %2107, %1298
  %gen316 = mul i32 %_315, %1298
  %_317 = shl i32 %2107, %1298
  %_318 = sub i32 %2107, %1298
  %gen319 = mul i32 %_318, %1298
  %_320 = sub i32 %2107, %1298
  %gen321 = mul i32 %_320, %1298
  %_322 = sub i32 0, %2107
  %gen323 = add i32 %_322, %1298
  %2108 = add nsw i32 %2107, %1298
  store i32 %2108, i32* %2106, align 4
  %2109 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %2110 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %2109, i32 0, i32 4
  %2111 = bitcast %union.varray_data_tag* %2110 to [1 x %struct.reg_info_def*]*
  %2112 = load i32, i32* %16, align 4
  %2113 = sext i32 %2112 to i64
  %2114 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %2111, i64 0, i64 %2113
  %2115 = load %struct.reg_info_def*, %struct.reg_info_def** %2114, align 8
  %2116 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %2115, i32 0, i32 7
  %2117 = load i32, i32* %2116, align 4
  %_324 = sub i32 %2117, 1
  %gen325 = mul i32 %_324, 1
  %_326 = shl i32 %2117, 1
  %_327 = sub i32 %2117, 1
  %gen328 = mul i32 %_327, 1
  %_329 = sub i32 0, %2117
  %gen330 = add i32 %_329, 1
  %_331 = sub i32 0, %2117
  %gen332 = add i32 %_331, 1
  %2118 = add nsw i32 %2117, 1
  store i32 %2118, i32* %2116, align 4
  br label %originalBB309

originalBB336alteredBB:                           ; preds = %originalBB336, %1335
  %2119 = load i32, i32* %16, align 4
  %_337 = shl i32 %2119, 1
  %_338 = sub i32 %2119, 1
  %gen339 = mul i32 %_338, 1
  %_340 = sub i32 0, %2119
  %gen341 = add i32 %_340, 1
  %_342 = sub i32 %2119, 1
  %gen343 = mul i32 %_342, 1
  %2120 = add nsw i32 %2119, 1
  store i32 %2120, i32* %16, align 4
  br label %originalBB336

originalBB347alteredBB:                           ; preds = %originalBB347, %1371
  %2121 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %2122 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %2121, i32 0, i32 4
  %2123 = bitcast %union.varray_data_tag* %2122 to [1 x %struct.reg_info_def*]*
  %2124 = load i32, i32* %13, align 4
  %2125 = sext i32 %2124 to i64
  %2126 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %2123, i64 0, i64 %2125
  %2127 = load %struct.reg_info_def*, %struct.reg_info_def** %2126, align 8
  %2128 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %2127, i32 0, i32 9
  %2129 = load i32, i32* %2128, align 4
  %2130 = icmp eq i32 %2129, -1
  br label %originalBB347

originalBB351alteredBB:                           ; preds = %originalBB351, %1429
  br label %originalBB351

originalBB355alteredBB:                           ; preds = %originalBB355, %1448
  %2131 = load i32, i32* %20, align 4
  %2132 = icmp ne i32 %2131, 0
  br label %originalBB355

originalBB359alteredBB:                           ; preds = %originalBB359, %1474
  %2133 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %2134 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %2133, i32 0, i32 4
  %2135 = bitcast %union.varray_data_tag* %2134 to [1 x %struct.basic_block_def*]*
  %2136 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %2137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2136, i32 0, i32 1
  %2138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2137, i64 0, i64 0
  %2139 = bitcast %union.rtunion_def* %2138 to i32*
  %2140 = load i32, i32* %2139, align 8
  %2141 = sext i32 %2140 to i64
  %2142 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %2135, i64 0, i64 %2141
  %2143 = load %struct.basic_block_def*, %struct.basic_block_def** %2142, align 8
  %2144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2143, i32 0, i32 11
  %2145 = load i32, i32* %2144, align 8
  %_360 = shl i32 %2145, 0
  %_361 = sub i32 %2145, 0
  %gen362 = mul i32 %_361, 0
  %2146 = add nsw i32 %2145, 0
  %2147 = load i32, i32* %23, align 4
  %2148 = icmp eq i32 %2146, %2147
  br label %originalBB359

originalBB366alteredBB:                           ; preds = %originalBB366, %1510
  %2149 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %2150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2149, i32 0, i32 1
  %2151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2150, i64 0, i64 3
  %2152 = bitcast %union.rtunion_def* %2151 to %struct.rtx_def**
  %2153 = load %struct.rtx_def*, %struct.rtx_def** %2152, align 8
  %2154 = call i32 @asm_noperands(%struct.rtx_def* %2153)
  %2155 = icmp slt i32 %2154, 0
  br label %originalBB366

originalBB370alteredBB:                           ; preds = %originalBB370, %1534
  %2156 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %2157 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %2158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2157, i32 0, i32 1
  %2159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2158, i64 0, i64 5
  %2160 = bitcast %union.rtunion_def* %2159 to %struct.rtx_def**
  %2161 = load %struct.rtx_def*, %struct.rtx_def** %2160, align 8
  %2162 = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %2156, %struct.rtx_def* %2161)
  %2163 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %2164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2163, i32 0, i32 1
  %2165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2164, i64 0, i64 5
  %2166 = bitcast %union.rtunion_def* %2165 to %struct.rtx_def**
  store %struct.rtx_def* %2162, %struct.rtx_def** %2166, align 8
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %1562
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %1583
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %1618
  %2167 = load i32, i32* %12, align 4
  %_383 = sub i32 0, %2167
  %gen384 = add i32 %_383, 1
  %_385 = sub i32 %2167, 1
  %gen386 = mul i32 %_385, 1
  %_387 = sub i32 %2167, 1
  %gen388 = mul i32 %_387, 1
  %_389 = shl i32 %2167, 1
  %2168 = and i32 %2167, 1
  %2169 = icmp ne i32 %2168, 0
  br label %originalBB382

originalBB393alteredBB:                           ; preds = %originalBB393, %1655
  %2170 = load i32, i32* %13, align 4
  store i32 %2170, i32* %16, align 4
  br label %originalBB393

originalBB397alteredBB:                           ; preds = %originalBB397, %1701
  br label %originalBB397

originalBB401alteredBB:                           ; preds = %originalBB401, %1721
  br label %originalBB401

originalBB405alteredBB:                           ; preds = %originalBB405, %1748
  %2171 = load i32, i32* %13, align 4
  store i32 %2171, i32* %16, align 4
  br label %originalBB405

originalBB409alteredBB:                           ; preds = %originalBB409, %1770
  %2172 = load i64, i64* %15, align 8
  %2173 = load i32, i32* %16, align 4
  %2174 = load i32, i32* %13, align 4
  %_410 = shl i32 %2173, %2174
  %_411 = sub i32 0, %2173
  %gen412 = add i32 %_411, %2174
  %_413 = sub i32 0, %2173
  %gen414 = add i32 %_413, %2174
  %_415 = sub i32 %2173, %2174
  %gen416 = mul i32 %_415, %2174
  %_417 = sub i32 0, %2173
  %gen418 = add i32 %_417, %2174
  %_419 = sub i32 %2173, %2174
  %gen420 = mul i32 %_419, %2174
  %2175 = sub nsw i32 %2173, %2174
  %2176 = zext i32 %2175 to i64
  %_421 = sub i64 1, %2176
  %gen422 = mul i64 %_421, %2176
  %2177 = shl i64 1, %2176
  %_423 = shl i64 %2172, %2177
  %_424 = shl i64 %2172, %2177
  %_425 = sub i64 %2172, %2177
  %gen426 = mul i64 %_425, %2177
  %_427 = sub i64 0, %2172
  %gen428 = add i64 %_427, %2177
  %_429 = sub i64 %2172, %2177
  %gen430 = mul i64 %_429, %2177
  %_431 = sub i64 %2172, %2177
  %gen432 = mul i64 %_431, %2177
  %_433 = sub i64 %2172, %2177
  %gen434 = mul i64 %_433, %2177
  %_435 = sub i64 0, %2172
  %gen436 = add i64 %_435, %2177
  %2178 = and i64 %2172, %2177
  %2179 = icmp ne i64 %2178, 0
  br label %originalBB409

originalBB440alteredBB:                           ; preds = %originalBB440, %1801
  %2180 = load i32, i32* %16, align 4
  %_441 = sub i32 %2180, 1
  %gen442 = mul i32 %_441, 1
  %2181 = add nsw i32 %2180, 1
  store i32 %2181, i32* %16, align 4
  br label %originalBB440

originalBB446alteredBB:                           ; preds = %originalBB446, %1832
  %2182 = load %struct.propagate_block_info*, %struct.propagate_block_info** %7, align 8
  %2183 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %2182, i32 0, i32 3
  %2184 = load %struct.rtx_def**, %struct.rtx_def*** %2183, align 8
  %2185 = load i32, i32* %13, align 4
  %2186 = sext i32 %2185 to i64
  %2187 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2184, i64 %2186
  store %struct.rtx_def* null, %struct.rtx_def** %2187, align 8
  br label %originalBB446

originalBB450alteredBB:                           ; preds = %originalBB450, %1866
  %2188 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %2189 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %2190 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2189, i32 0, i32 1
  %2191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2190, i64 0, i64 6
  %2192 = bitcast %union.rtunion_def* %2191 to %struct.rtx_def**
  %2193 = load %struct.rtx_def*, %struct.rtx_def** %2192, align 8
  %2194 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 10, %struct.rtx_def* %2188, %struct.rtx_def* %2193)
  %2195 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %2196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2195, i32 0, i32 1
  %2197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2196, i64 0, i64 6
  %2198 = bitcast %union.rtunion_def* %2197 to %struct.rtx_def**
  store %struct.rtx_def* %2194, %struct.rtx_def** %2198, align 8
  br label %originalBB450

originalBB454alteredBB:                           ; preds = %originalBB454, %1895
  br label %originalBB454

originalBB458alteredBB:                           ; preds = %originalBB458, %1912
  br label %originalBB458
}

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @mark_used_regs(%struct.propagate_block_info*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0 {
  %5 = load i32, i32* @x.49
  %6 = load i32, i32* @y.50
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca %struct.propagate_block_info*, align 8
  %14 = alloca %struct.rtx_def*, align 8
  %15 = alloca %struct.rtx_def*, align 8
  %16 = alloca %struct.rtx_def*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca %struct.rtx_def*, align 8
  %21 = alloca %struct.rtx_def*, align 8
  %22 = alloca %struct.rtx_def*, align 8
  %23 = alloca %struct.rtx_def*, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i8*, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %13, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %14, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %15, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %16, align 8
  %29 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %30 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %29, i32 0, i32 9
  %31 = load i32, i32* %30, align 8
  store i32 %31, i32* %19, align 4
  %32 = load i32, i32* @x.49
  %33 = load i32, i32* @y.50
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %40

; <label>:40:                                     ; preds = %770, %677, %296, %originalBBpart2
  %41 = load i32, i32* @x.49
  %42 = load i32, i32* @y.50
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %40
  %49 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %50 = icmp ne %struct.rtx_def* %49, null
  %51 = load i32, i32* @x.49
  %52 = load i32, i32* @y.50
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %76, label %59

; <label>:59:                                     ; preds = %originalBBpart24
  %60 = load i32, i32* @x.49
  %61 = load i32, i32* @y.50
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %59
  %68 = load i32, i32* @x.49
  %69 = load i32, i32* @y.50
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %897

; <label>:76:                                     ; preds = %originalBBpart24
  %77 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %78 = bitcast %struct.rtx_def* %77 to i32*
  %79 = load i32, i32* %78, align 8
  %80 = and i32 %79, 65535
  store i32 %80, i32* %17, align 4
  %81 = load i32, i32* %17, align 4
  switch i32 %81, label %696 [
    i32 67, label %82
    i32 68, label %82
    i32 54, label %82
    i32 58, label %82
    i32 55, label %82
    i32 56, label %82
    i32 59, label %82
    i32 44, label %82
    i32 45, label %82
    i32 49, label %99
    i32 66, label %123
    i32 63, label %269
    i32 61, label %298
    i32 47, label %319
    i32 41, label %577
    i32 43, label %577
    i32 52, label %577
    i32 40, label %577
    i32 38, label %657
    i32 152, label %695
  ]

; <label>:82:                                     ; preds = %76, %76, %76, %76, %76, %76, %76, %76, %76
  %83 = load i32, i32* @x.49
  %84 = load i32, i32* @y.50
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %82
  %91 = load i32, i32* @x.49
  %92 = load i32, i32* @y.50
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %897

; <label>:99:                                     ; preds = %76
  %100 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %101, i64 0, i64 0
  %103 = bitcast %union.rtunion_def* %102 to %struct.rtx_def**
  %104 = load %struct.rtx_def*, %struct.rtx_def** %103, align 8
  %105 = bitcast %struct.rtx_def* %104 to i32*
  %106 = load i32, i32* %105, align 8
  %107 = and i32 %106, 65535
  %108 = icmp eq i32 %107, 66
  br i1 %108, label %109, label %122

; <label>:109:                                    ; preds = %99
  %110 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %111 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1
  %113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %112, i64 0, i64 0
  %114 = bitcast %union.rtunion_def* %113 to %struct.rtx_def**
  %115 = load %struct.rtx_def*, %struct.rtx_def** %114, align 8
  %116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %116, i64 0, i64 0
  %118 = bitcast %union.rtunion_def* %117 to %struct.rtx_def**
  %119 = load %struct.rtx_def*, %struct.rtx_def** %118, align 8
  %120 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %110, %struct.rtx_def* %119, %struct.rtx_def* %120, %struct.rtx_def* %121)
  br label %122

; <label>:122:                                    ; preds = %109, %99
  br label %897

; <label>:123:                                    ; preds = %76
  %124 = load i32, i32* @optimize, align 4
  %125 = icmp ne i32 %124, 0
  br i1 %125, label %126, label %268

; <label>:126:                                    ; preds = %123
  %127 = load i32, i32* %19, align 4
  %128 = and i32 %127, 16
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %130, label %268

; <label>:130:                                    ; preds = %126
  %131 = load i32, i32* @x.49
  %132 = load i32, i32* @y.50
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %130
  %139 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %140, i64 0, i64 0
  %142 = bitcast %union.rtunion_def* %141 to %struct.rtx_def**
  %143 = load %struct.rtx_def*, %struct.rtx_def** %142, align 8
  %144 = bitcast %struct.rtx_def* %143 to i32*
  %145 = load i32, i32* %144, align 8
  %146 = and i32 %145, 65535
  %147 = icmp eq i32 %146, 68
  %148 = load i32, i32* @x.49
  %149 = load i32, i32* @y.50
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart223, label %originalBB14alteredBB

originalBBpart223:                                ; preds = %originalBB14
  br i1 %147, label %156, label %168

; <label>:156:                                    ; preds = %originalBBpart223
  %157 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %157, i32 0, i32 1
  %159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %158, i64 0, i64 0
  %160 = bitcast %union.rtunion_def* %159 to %struct.rtx_def**
  %161 = load %struct.rtx_def*, %struct.rtx_def** %160, align 8
  %162 = bitcast %struct.rtx_def* %161 to i32*
  %163 = load i32, i32* %162, align 8
  %164 = lshr i32 %163, 26
  %165 = and i32 %164, 1
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %168

; <label>:167:                                    ; preds = %156
  br label %261

; <label>:168:                                    ; preds = %156, %originalBBpart223
  %169 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %170 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %169, i32 0, i32 4
  %171 = load %struct.rtx_def*, %struct.rtx_def** %170, align 8
  store %struct.rtx_def* %171, %struct.rtx_def** %20, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %21, align 8
  br label %172

; <label>:172:                                    ; preds = %originalBBpart231, %168
  %173 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %174 = icmp ne %struct.rtx_def* %173, null
  br i1 %174, label %175, label %244

; <label>:175:                                    ; preds = %172
  %176 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1
  %178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %177, i64 0, i64 1
  %179 = bitcast %union.rtunion_def* %178 to %struct.rtx_def**
  %180 = load %struct.rtx_def*, %struct.rtx_def** %179, align 8
  store %struct.rtx_def* %180, %struct.rtx_def** %22, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1
  %183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %182, i64 0, i64 0
  %184 = bitcast %union.rtunion_def* %183 to %struct.rtx_def**
  %185 = load %struct.rtx_def*, %struct.rtx_def** %184, align 8
  %186 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %187 = call i32 @anti_dependence(%struct.rtx_def* %185, %struct.rtx_def* %186)
  %188 = icmp ne i32 %187, 0
  br i1 %188, label %189, label %224

; <label>:189:                                    ; preds = %175
  %190 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %191 = icmp ne %struct.rtx_def* %190, null
  br i1 %191, label %192, label %198

; <label>:192:                                    ; preds = %189
  %193 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %194 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %194, i32 0, i32 1
  %196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %195, i64 0, i64 1
  %197 = bitcast %union.rtunion_def* %196 to %struct.rtx_def**
  store %struct.rtx_def* %193, %struct.rtx_def** %197, align 8
  br label %218

; <label>:198:                                    ; preds = %189
  %199 = load i32, i32* @x.49
  %200 = load i32, i32* @y.50
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %198
  %207 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %208 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %209 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %208, i32 0, i32 4
  store %struct.rtx_def* %207, %struct.rtx_def** %209, align 8
  %210 = load i32, i32* @x.49
  %211 = load i32, i32* @y.50
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %218

; <label>:218:                                    ; preds = %originalBBpart227, %192
  %219 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  call void @free_EXPR_LIST_node(%struct.rtx_def* %219)
  %220 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %221 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %220, i32 0, i32 7
  %222 = load i32, i32* %221, align 8
  %223 = add nsw i32 %222, -1
  store i32 %223, i32* %221, align 8
  br label %226

; <label>:224:                                    ; preds = %175
  %225 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  store %struct.rtx_def* %225, %struct.rtx_def** %21, align 8
  br label %226

; <label>:226:                                    ; preds = %224, %218
  %227 = load i32, i32* @x.49
  %228 = load i32, i32* @y.50
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %226
  %235 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  store %struct.rtx_def* %235, %struct.rtx_def** %20, align 8
  %236 = load i32, i32* @x.49
  %237 = load i32, i32* @y.50
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %172

; <label>:244:                                    ; preds = %172
  %245 = load i32, i32* @x.49
  %246 = load i32, i32* @y.50
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %244
  %253 = load i32, i32* @x.49
  %254 = load i32, i32* @y.50
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %261

; <label>:261:                                    ; preds = %originalBBpart235, %167
  %262 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %263 = icmp ne %struct.rtx_def* %262, null
  br i1 %263, label %264, label %267

; <label>:264:                                    ; preds = %261
  %265 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %266 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @invalidate_mems_from_autoinc(%struct.propagate_block_info* %265, %struct.rtx_def* %266)
  br label %267

; <label>:267:                                    ; preds = %264, %261
  br label %268

; <label>:268:                                    ; preds = %267, %126, %123
  br label %713

; <label>:269:                                    ; preds = %76
  %270 = load i32, i32* @x.49
  %271 = load i32, i32* @y.50
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %269
  %278 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %279 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %278, i32 0, i32 1
  %280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %279, i64 0, i64 0
  %281 = bitcast %union.rtunion_def* %280 to %struct.rtx_def**
  %282 = load %struct.rtx_def*, %struct.rtx_def** %281, align 8
  store %struct.rtx_def* %282, %struct.rtx_def** %14, align 8
  %283 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %284 = bitcast %struct.rtx_def* %283 to i32*
  %285 = load i32, i32* %284, align 8
  %286 = and i32 %285, 65535
  %287 = icmp ne i32 %286, 61
  %288 = load i32, i32* @x.49
  %289 = load i32, i32* @y.50
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart251, label %originalBB37alteredBB

originalBBpart251:                                ; preds = %originalBB37
  br i1 %287, label %296, label %297

; <label>:296:                                    ; preds = %originalBBpart251
  br label %40

; <label>:297:                                    ; preds = %originalBBpart251
  br label %298

; <label>:298:                                    ; preds = %297, %76
  %299 = load i32, i32* @x.49
  %300 = load i32, i32* @y.50
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %originalBB53alteredBB, %298
  %307 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %308 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %309 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %310 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_reg(%struct.propagate_block_info* %307, %struct.rtx_def* %308, %struct.rtx_def* %309, %struct.rtx_def* %310)
  %311 = load i32, i32* @x.49
  %312 = load i32, i32* @y.50
  %313 = sub i32 %311, 1
  %314 = mul i32 %311, %313
  %315 = urem i32 %314, 2
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %316, %317
  br i1 %318, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br label %897

; <label>:319:                                    ; preds = %76
  %320 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %321 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %320, i32 0, i32 1
  %322 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %321, i64 0, i64 0
  %323 = bitcast %union.rtunion_def* %322 to %struct.rtx_def**
  %324 = load %struct.rtx_def*, %struct.rtx_def** %323, align 8
  store %struct.rtx_def* %324, %struct.rtx_def** %23, align 8
  store i32 0, i32* %24, align 4
  %325 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %326 = bitcast %struct.rtx_def* %325 to i32*
  %327 = load i32, i32* %326, align 8
  %328 = and i32 %327, 65535
  %329 = icmp eq i32 %328, 66
  br i1 %329, label %330, label %347

; <label>:330:                                    ; preds = %319
  %331 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %332 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %333 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %332, i32 0, i32 1
  %334 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %333, i64 0, i64 0
  %335 = bitcast %union.rtunion_def* %334 to %struct.rtx_def**
  %336 = load %struct.rtx_def*, %struct.rtx_def** %335, align 8
  %337 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %338 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %331, %struct.rtx_def* %336, %struct.rtx_def* %337, %struct.rtx_def* %338)
  %339 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %340 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %341 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %340, i32 0, i32 1
  %342 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %341, i64 0, i64 1
  %343 = bitcast %union.rtunion_def* %342 to %struct.rtx_def**
  %344 = load %struct.rtx_def*, %struct.rtx_def** %343, align 8
  %345 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %346 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %339, %struct.rtx_def* %344, %struct.rtx_def* %345, %struct.rtx_def* %346)
  br label %897

; <label>:347:                                    ; preds = %319
  br label %348

; <label>:348:                                    ; preds = %444, %347
  %349 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %350 = bitcast %struct.rtx_def* %349 to i32*
  %351 = load i32, i32* %350, align 8
  %352 = and i32 %351, 65535
  %353 = icmp eq i32 %352, 64
  br i1 %353, label %372, label %354

; <label>:354:                                    ; preds = %348
  %355 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %356 = bitcast %struct.rtx_def* %355 to i32*
  %357 = load i32, i32* %356, align 8
  %358 = and i32 %357, 65535
  %359 = icmp eq i32 %358, 133
  br i1 %359, label %372, label %360

; <label>:360:                                    ; preds = %354
  %361 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %362 = bitcast %struct.rtx_def* %361 to i32*
  %363 = load i32, i32* %362, align 8
  %364 = and i32 %363, 65535
  %365 = icmp eq i32 %364, 132
  br i1 %365, label %372, label %366

; <label>:366:                                    ; preds = %360
  %367 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %368 = bitcast %struct.rtx_def* %367 to i32*
  %369 = load i32, i32* %368, align 8
  %370 = and i32 %369, 65535
  %371 = icmp eq i32 %370, 63
  br label %372

; <label>:372:                                    ; preds = %366, %360, %354, %348
  %373 = phi i1 [ true, %360 ], [ true, %354 ], [ true, %348 ], [ %371, %366 ]
  %374 = load i32, i32* @x.49
  %375 = load i32, i32* @y.50
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %originalBB57alteredBB, %372
  %382 = load i32, i32* @x.49
  %383 = load i32, i32* @y.50
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br i1 %373, label %390, label %450

; <label>:390:                                    ; preds = %originalBBpart259
  %391 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %392 = bitcast %struct.rtx_def* %391 to i32*
  %393 = load i32, i32* %392, align 8
  %394 = and i32 %393, 65535
  %395 = icmp eq i32 %394, 63
  br i1 %395, label %396, label %443

; <label>:396:                                    ; preds = %390
  %397 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %398 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %397, i32 0, i32 1
  %399 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %398, i64 0, i64 0
  %400 = bitcast %union.rtunion_def* %399 to %struct.rtx_def**
  %401 = load %struct.rtx_def*, %struct.rtx_def** %400, align 8
  %402 = bitcast %struct.rtx_def* %401 to i32*
  %403 = load i32, i32* %402, align 8
  %404 = lshr i32 %403, 16
  %405 = and i32 %404, 255
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %406
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i32
  %410 = load i32, i32* @target_flags, align 4
  %411 = and i32 %410, 33554432
  %412 = icmp ne i32 %411, 0
  %413 = select i1 %412, i32 8, i32 4
  %414 = add nsw i32 %409, %413
  %415 = sub nsw i32 %414, 1
  %416 = load i32, i32* @target_flags, align 4
  %417 = and i32 %416, 33554432
  %418 = icmp ne i32 %417, 0
  %419 = select i1 %418, i32 8, i32 4
  %420 = sdiv i32 %415, %419
  %421 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %422 = bitcast %struct.rtx_def* %421 to i32*
  %423 = load i32, i32* %422, align 8
  %424 = lshr i32 %423, 16
  %425 = and i32 %424, 255
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %426
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i32
  %430 = load i32, i32* @target_flags, align 4
  %431 = and i32 %430, 33554432
  %432 = icmp ne i32 %431, 0
  %433 = select i1 %432, i32 8, i32 4
  %434 = add nsw i32 %429, %433
  %435 = sub nsw i32 %434, 1
  %436 = load i32, i32* @target_flags, align 4
  %437 = and i32 %436, 33554432
  %438 = icmp ne i32 %437, 0
  %439 = select i1 %438, i32 8, i32 4
  %440 = sdiv i32 %435, %439
  %441 = icmp sgt i32 %420, %440
  br i1 %441, label %443, label %442

; <label>:442:                                    ; preds = %396
  br label %444

; <label>:443:                                    ; preds = %396, %390
  store i32 1, i32* %24, align 4
  br label %444

; <label>:444:                                    ; preds = %443, %442
  %445 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %446 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %445, i32 0, i32 1
  %447 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %446, i64 0, i64 0
  %448 = bitcast %union.rtunion_def* %447 to %struct.rtx_def**
  %449 = load %struct.rtx_def*, %struct.rtx_def** %448, align 8
  store %struct.rtx_def* %449, %struct.rtx_def** %23, align 8
  br label %348

; <label>:450:                                    ; preds = %originalBBpart259
  %451 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %452 = bitcast %struct.rtx_def* %451 to i32*
  %453 = load i32, i32* %452, align 8
  %454 = and i32 %453, 65535
  %455 = icmp eq i32 %454, 39
  br i1 %455, label %456, label %463

; <label>:456:                                    ; preds = %450
  %457 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %458 = bitcast %struct.rtx_def* %457 to i32*
  %459 = load i32, i32* %458, align 8
  %460 = lshr i32 %459, 16
  %461 = and i32 %460, 255
  %462 = icmp eq i32 %461, 51
  br i1 %462, label %555, label %463

; <label>:463:                                    ; preds = %456, %450
  %464 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %465 = bitcast %struct.rtx_def* %464 to i32*
  %466 = load i32, i32* %465, align 8
  %467 = and i32 %466, 65535
  %468 = icmp eq i32 %467, 61
  br i1 %468, label %469, label %576

; <label>:469:                                    ; preds = %463
  %470 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %471 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %470, i32 0, i32 1
  %472 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %471, i64 0, i64 0
  %473 = bitcast %union.rtunion_def* %472 to i32*
  %474 = load i32, i32* %473, align 8
  store i32 %474, i32* %18, align 4
  %475 = load i32, i32* %18, align 4
  %476 = icmp eq i32 %475, 20
  br i1 %476, label %477, label %501

; <label>:477:                                    ; preds = %469
  %478 = load i32, i32* @reload_completed, align 4
  %479 = icmp ne i32 %478, 0
  br i1 %479, label %480, label %499

; <label>:480:                                    ; preds = %477
  %481 = load i32, i32* @x.49
  %482 = load i32, i32* @y.50
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %originalBB61alteredBB, %480
  %489 = load i32, i32* @frame_pointer_needed, align 4
  %490 = icmp ne i32 %489, 0
  %491 = load i32, i32* @x.49
  %492 = load i32, i32* @y.50
  %493 = sub i32 %491, 1
  %494 = mul i32 %491, %493
  %495 = urem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = icmp slt i32 %492, 10
  %498 = or i1 %496, %497
  br i1 %498, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %499

; <label>:499:                                    ; preds = %originalBBpart263, %477
  %500 = phi i1 [ true, %477 ], [ %490, %originalBBpart263 ]
  br label %501

; <label>:501:                                    ; preds = %499, %469
  %502 = phi i1 [ false, %469 ], [ %500, %499 ]
  %503 = xor i1 %502, true
  br i1 %503, label %504, label %576

; <label>:504:                                    ; preds = %501
  %505 = load i32, i32* %18, align 4
  %506 = icmp eq i32 %505, 6
  br i1 %506, label %507, label %545

; <label>:507:                                    ; preds = %504
  %508 = load i32, i32* @x.49
  %509 = load i32, i32* @y.50
  %510 = sub i32 %508, 1
  %511 = mul i32 %508, %510
  %512 = urem i32 %511, 2
  %513 = icmp eq i32 %512, 0
  %514 = icmp slt i32 %509, 10
  %515 = or i1 %513, %514
  br i1 %515, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %originalBB65alteredBB, %507
  %516 = load i32, i32* @reload_completed, align 4
  %517 = icmp ne i32 %516, 0
  %518 = load i32, i32* @x.49
  %519 = load i32, i32* @y.50
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br i1 %517, label %526, label %576

; <label>:526:                                    ; preds = %originalBBpart267
  %527 = load i32, i32* @x.49
  %528 = load i32, i32* @y.50
  %529 = sub i32 %527, 1
  %530 = mul i32 %527, %529
  %531 = urem i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = icmp slt i32 %528, 10
  %534 = or i1 %532, %533
  br i1 %534, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %originalBB69alteredBB, %526
  %535 = load i32, i32* @frame_pointer_needed, align 4
  %536 = icmp ne i32 %535, 0
  %537 = load i32, i32* @x.49
  %538 = load i32, i32* @y.50
  %539 = sub i32 %537, 1
  %540 = mul i32 %537, %539
  %541 = urem i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = icmp slt i32 %538, 10
  %544 = or i1 %542, %543
  br i1 %544, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br i1 %536, label %576, label %545

; <label>:545:                                    ; preds = %originalBBpart271, %504
  %546 = load i32, i32* %18, align 4
  %547 = icmp eq i32 %546, 16
  br i1 %547, label %548, label %555

; <label>:548:                                    ; preds = %545
  %549 = load i32, i32* %18, align 4
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %550
  %552 = load i8, i8* %551, align 1
  %553 = sext i8 %552 to i32
  %554 = icmp ne i32 %553, 0
  br i1 %554, label %576, label %555

; <label>:555:                                    ; preds = %548, %545, %456
  %556 = load i32, i32* %24, align 4
  %557 = icmp ne i32 %556, 0
  br i1 %557, label %558, label %567

; <label>:558:                                    ; preds = %555
  %559 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %560 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %561 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %560, i32 0, i32 1
  %562 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %561, i64 0, i64 0
  %563 = bitcast %union.rtunion_def* %562 to %struct.rtx_def**
  %564 = load %struct.rtx_def*, %struct.rtx_def** %563, align 8
  %565 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %566 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %559, %struct.rtx_def* %564, %struct.rtx_def* %565, %struct.rtx_def* %566)
  br label %567

; <label>:567:                                    ; preds = %558, %555
  %568 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %569 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %570 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %569, i32 0, i32 1
  %571 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %570, i64 0, i64 1
  %572 = bitcast %union.rtunion_def* %571 to %struct.rtx_def**
  %573 = load %struct.rtx_def*, %struct.rtx_def** %572, align 8
  %574 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %575 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %568, %struct.rtx_def* %573, %struct.rtx_def* %574, %struct.rtx_def* %575)
  br label %897

; <label>:576:                                    ; preds = %548, %originalBBpart271, %originalBBpart267, %501, %463
  br label %713

; <label>:577:                                    ; preds = %76, %76, %76, %76
  %578 = load i32, i32* %17, align 4
  %579 = icmp ne i32 %578, 41
  br i1 %579, label %587, label %580

; <label>:580:                                    ; preds = %577
  %581 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %582 = bitcast %struct.rtx_def* %581 to i32*
  %583 = load i32, i32* %582, align 8
  %584 = lshr i32 %583, 27
  %585 = and i32 %584, 1
  %586 = icmp ne i32 %585, 0
  br i1 %586, label %587, label %592

; <label>:587:                                    ; preds = %580, %577
  %588 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %589 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %588, i32 0, i32 4
  call void @free_EXPR_LIST_list(%struct.rtx_def** %589)
  %590 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %591 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %590, i32 0, i32 7
  store i32 0, i32* %591, align 8
  br label %592

; <label>:592:                                    ; preds = %587, %580
  %593 = load i32, i32* @x.49
  %594 = load i32, i32* @y.50
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %originalBB73alteredBB, %592
  %601 = load i32, i32* %17, align 4
  %602 = icmp eq i32 %601, 41
  %603 = load i32, i32* @x.49
  %604 = load i32, i32* @y.50
  %605 = sub i32 %603, 1
  %606 = mul i32 %603, %605
  %607 = urem i32 %606, 2
  %608 = icmp eq i32 %607, 0
  %609 = icmp slt i32 %604, 10
  %610 = or i1 %608, %609
  br i1 %610, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br i1 %602, label %611, label %656

; <label>:611:                                    ; preds = %originalBBpart275
  store i32 0, i32* %25, align 4
  br label %612

; <label>:612:                                    ; preds = %652, %611
  %613 = load i32, i32* @x.49
  %614 = load i32, i32* @y.50
  %615 = sub i32 %613, 1
  %616 = mul i32 %613, %615
  %617 = urem i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = icmp slt i32 %614, 10
  %620 = or i1 %618, %619
  br i1 %620, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %originalBB77alteredBB, %612
  %621 = load i32, i32* %25, align 4
  %622 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %623 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %622, i32 0, i32 1
  %624 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %623, i64 0, i64 3
  %625 = bitcast %union.rtunion_def* %624 to %struct.rtvec_def**
  %626 = load %struct.rtvec_def*, %struct.rtvec_def** %625, align 8
  %627 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %626, i32 0, i32 0
  %628 = load i32, i32* %627, align 8
  %629 = icmp slt i32 %621, %628
  %630 = load i32, i32* @x.49
  %631 = load i32, i32* @y.50
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br i1 %629, label %638, label %655

; <label>:638:                                    ; preds = %originalBBpart279
  %639 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %640 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %641 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %640, i32 0, i32 1
  %642 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %641, i64 0, i64 3
  %643 = bitcast %union.rtunion_def* %642 to %struct.rtvec_def**
  %644 = load %struct.rtvec_def*, %struct.rtvec_def** %643, align 8
  %645 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %644, i32 0, i32 1
  %646 = load i32, i32* %25, align 4
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %645, i64 0, i64 %647
  %649 = load %struct.rtx_def*, %struct.rtx_def** %648, align 8
  %650 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %651 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %639, %struct.rtx_def* %649, %struct.rtx_def* %650, %struct.rtx_def* %651)
  br label %652

; <label>:652:                                    ; preds = %638
  %653 = load i32, i32* %25, align 4
  %654 = add nsw i32 %653, 1
  store i32 %654, i32* %25, align 4
  br label %612

; <label>:655:                                    ; preds = %originalBBpart279
  br label %656

; <label>:656:                                    ; preds = %655, %originalBBpart275
  br label %713

; <label>:657:                                    ; preds = %76
  %658 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %659 = icmp ne %struct.rtx_def* %658, null
  br i1 %659, label %660, label %677

; <label>:660:                                    ; preds = %657
  %661 = load i32, i32* @x.49
  %662 = load i32, i32* @y.50
  %663 = sub i32 %661, 1
  %664 = mul i32 %661, %663
  %665 = urem i32 %664, 2
  %666 = icmp eq i32 %665, 0
  %667 = icmp slt i32 %662, 10
  %668 = or i1 %666, %667
  br i1 %668, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %originalBB81alteredBB, %660
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 3893, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.mark_used_regs, i32 0, i32 0)) #5
  %669 = load i32, i32* @x.49
  %670 = load i32, i32* @y.50
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  unreachable

; <label>:677:                                    ; preds = %657
  %678 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %679 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %680 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %679, i32 0, i32 1
  %681 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %680, i64 0, i64 0
  %682 = bitcast %union.rtunion_def* %681 to %struct.rtx_def**
  %683 = load %struct.rtx_def*, %struct.rtx_def** %682, align 8
  %684 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %678, %struct.rtx_def* %683, %struct.rtx_def* null, %struct.rtx_def* %684)
  %685 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %686 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %685, i32 0, i32 1
  %687 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %686, i64 0, i64 0
  %688 = bitcast %union.rtunion_def* %687 to %struct.rtx_def**
  %689 = load %struct.rtx_def*, %struct.rtx_def** %688, align 8
  store %struct.rtx_def* %689, %struct.rtx_def** %15, align 8
  %690 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %691 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %690, i32 0, i32 1
  %692 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %691, i64 0, i64 1
  %693 = bitcast %union.rtunion_def* %692 to %struct.rtx_def**
  %694 = load %struct.rtx_def*, %struct.rtx_def** %693, align 8
  store %struct.rtx_def* %694, %struct.rtx_def** %14, align 8
  br label %40

; <label>:695:                                    ; preds = %76
  br label %897

; <label>:696:                                    ; preds = %76
  %697 = load i32, i32* @x.49
  %698 = load i32, i32* @y.50
  %699 = sub i32 %697, 1
  %700 = mul i32 %697, %699
  %701 = urem i32 %700, 2
  %702 = icmp eq i32 %701, 0
  %703 = icmp slt i32 %698, 10
  %704 = or i1 %702, %703
  br i1 %704, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %originalBB85alteredBB, %696
  %705 = load i32, i32* @x.49
  %706 = load i32, i32* @y.50
  %707 = sub i32 %705, 1
  %708 = mul i32 %705, %707
  %709 = urem i32 %708, 2
  %710 = icmp eq i32 %709, 0
  %711 = icmp slt i32 %706, 10
  %712 = or i1 %710, %711
  br i1 %712, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %713

; <label>:713:                                    ; preds = %originalBBpart287, %656, %576, %268
  %714 = load i32, i32* @x.49
  %715 = load i32, i32* @y.50
  %716 = sub i32 %714, 1
  %717 = mul i32 %714, %716
  %718 = urem i32 %717, 2
  %719 = icmp eq i32 %718, 0
  %720 = icmp slt i32 %715, 10
  %721 = or i1 %719, %720
  br i1 %721, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %originalBB89alteredBB, %713
  %722 = load i32, i32* %17, align 4
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i64 0, i64 %723
  %725 = load i8*, i8** %724, align 8
  store i8* %725, i8** %26, align 8
  %726 = load i32, i32* %17, align 4
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i64 0, i64 %727
  %729 = load i8, i8* %728, align 1
  %730 = zext i8 %729 to i32
  %731 = sub nsw i32 %730, 1
  store i32 %731, i32* %27, align 4
  %732 = load i32, i32* @x.49
  %733 = load i32, i32* @y.50
  %734 = sub i32 %732, 1
  %735 = mul i32 %732, %734
  %736 = urem i32 %735, 2
  %737 = icmp eq i32 %736, 0
  %738 = icmp slt i32 %733, 10
  %739 = or i1 %737, %738
  br i1 %739, label %originalBBpart2101, label %originalBB89alteredBB

originalBBpart2101:                               ; preds = %originalBB89
  br label %740

; <label>:740:                                    ; preds = %originalBBpart2127, %originalBBpart2101
  %741 = load i32, i32* %27, align 4
  %742 = icmp sge i32 %741, 0
  br i1 %742, label %743, label %897

; <label>:743:                                    ; preds = %740
  %744 = load i8*, i8** %26, align 8
  %745 = load i32, i32* %27, align 4
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i8, i8* %744, i64 %746
  %748 = load i8, i8* %747, align 1
  %749 = sext i8 %748 to i32
  %750 = icmp eq i32 %749, 101
  br i1 %750, label %751, label %787

; <label>:751:                                    ; preds = %743
  %752 = load i32, i32* @x.49
  %753 = load i32, i32* @y.50
  %754 = sub i32 %752, 1
  %755 = mul i32 %752, %754
  %756 = urem i32 %755, 2
  %757 = icmp eq i32 %756, 0
  %758 = icmp slt i32 %753, 10
  %759 = or i1 %757, %758
  br i1 %759, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %originalBB103alteredBB, %751
  %760 = load i32, i32* %27, align 4
  %761 = icmp eq i32 %760, 0
  %762 = load i32, i32* @x.49
  %763 = load i32, i32* @y.50
  %764 = sub i32 %762, 1
  %765 = mul i32 %762, %764
  %766 = urem i32 %765, 2
  %767 = icmp eq i32 %766, 0
  %768 = icmp slt i32 %763, 10
  %769 = or i1 %767, %768
  br i1 %769, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %761, label %770, label %776

; <label>:770:                                    ; preds = %originalBBpart2105
  %771 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %772 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %771, i32 0, i32 1
  %773 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %772, i64 0, i64 0
  %774 = bitcast %union.rtunion_def* %773 to %struct.rtx_def**
  %775 = load %struct.rtx_def*, %struct.rtx_def** %774, align 8
  store %struct.rtx_def* %775, %struct.rtx_def** %14, align 8
  br label %40

; <label>:776:                                    ; preds = %originalBBpart2105
  %777 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %778 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %779 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %778, i32 0, i32 1
  %780 = load i32, i32* %27, align 4
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %779, i64 0, i64 %781
  %783 = bitcast %union.rtunion_def* %782 to %struct.rtx_def**
  %784 = load %struct.rtx_def*, %struct.rtx_def** %783, align 8
  %785 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %786 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %777, %struct.rtx_def* %784, %struct.rtx_def* %785, %struct.rtx_def* %786)
  br label %877

; <label>:787:                                    ; preds = %743
  %788 = load i32, i32* @x.49
  %789 = load i32, i32* @y.50
  %790 = sub i32 %788, 1
  %791 = mul i32 %788, %790
  %792 = urem i32 %791, 2
  %793 = icmp eq i32 %792, 0
  %794 = icmp slt i32 %789, 10
  %795 = or i1 %793, %794
  br i1 %795, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %originalBB107alteredBB, %787
  %796 = load i8*, i8** %26, align 8
  %797 = load i32, i32* %27, align 4
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i8, i8* %796, i64 %798
  %800 = load i8, i8* %799, align 1
  %801 = sext i8 %800 to i32
  %802 = icmp eq i32 %801, 69
  %803 = load i32, i32* @x.49
  %804 = load i32, i32* @y.50
  %805 = sub i32 %803, 1
  %806 = mul i32 %803, %805
  %807 = urem i32 %806, 2
  %808 = icmp eq i32 %807, 0
  %809 = icmp slt i32 %804, 10
  %810 = or i1 %808, %809
  br i1 %810, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br i1 %802, label %811, label %860

; <label>:811:                                    ; preds = %originalBBpart2109
  store i32 0, i32* %28, align 4
  br label %812

; <label>:812:                                    ; preds = %856, %811
  %813 = load i32, i32* %28, align 4
  %814 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %815 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %814, i32 0, i32 1
  %816 = load i32, i32* %27, align 4
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %815, i64 0, i64 %817
  %819 = bitcast %union.rtunion_def* %818 to %struct.rtvec_def**
  %820 = load %struct.rtvec_def*, %struct.rtvec_def** %819, align 8
  %821 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %820, i32 0, i32 0
  %822 = load i32, i32* %821, align 8
  %823 = icmp slt i32 %813, %822
  br i1 %823, label %824, label %859

; <label>:824:                                    ; preds = %812
  %825 = load i32, i32* @x.49
  %826 = load i32, i32* @y.50
  %827 = sub i32 %825, 1
  %828 = mul i32 %825, %827
  %829 = urem i32 %828, 2
  %830 = icmp eq i32 %829, 0
  %831 = icmp slt i32 %826, 10
  %832 = or i1 %830, %831
  br i1 %832, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %originalBB111alteredBB, %824
  %833 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %834 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %835 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %834, i32 0, i32 1
  %836 = load i32, i32* %27, align 4
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %835, i64 0, i64 %837
  %839 = bitcast %union.rtunion_def* %838 to %struct.rtvec_def**
  %840 = load %struct.rtvec_def*, %struct.rtvec_def** %839, align 8
  %841 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %840, i32 0, i32 1
  %842 = load i32, i32* %28, align 4
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %841, i64 0, i64 %843
  %845 = load %struct.rtx_def*, %struct.rtx_def** %844, align 8
  %846 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %847 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %833, %struct.rtx_def* %845, %struct.rtx_def* %846, %struct.rtx_def* %847)
  %848 = load i32, i32* @x.49
  %849 = load i32, i32* @y.50
  %850 = sub i32 %848, 1
  %851 = mul i32 %848, %850
  %852 = urem i32 %851, 2
  %853 = icmp eq i32 %852, 0
  %854 = icmp slt i32 %849, 10
  %855 = or i1 %853, %854
  br i1 %855, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %856

; <label>:856:                                    ; preds = %originalBBpart2113
  %857 = load i32, i32* %28, align 4
  %858 = add nsw i32 %857, 1
  store i32 %858, i32* %28, align 4
  br label %812

; <label>:859:                                    ; preds = %812
  br label %860

; <label>:860:                                    ; preds = %859, %originalBBpart2109
  %861 = load i32, i32* @x.49
  %862 = load i32, i32* @y.50
  %863 = sub i32 %861, 1
  %864 = mul i32 %861, %863
  %865 = urem i32 %864, 2
  %866 = icmp eq i32 %865, 0
  %867 = icmp slt i32 %862, 10
  %868 = or i1 %866, %867
  br i1 %868, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %originalBB115alteredBB, %860
  %869 = load i32, i32* @x.49
  %870 = load i32, i32* @y.50
  %871 = sub i32 %869, 1
  %872 = mul i32 %869, %871
  %873 = urem i32 %872, 2
  %874 = icmp eq i32 %873, 0
  %875 = icmp slt i32 %870, 10
  %876 = or i1 %874, %875
  br i1 %876, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br label %877

; <label>:877:                                    ; preds = %originalBBpart2117, %776
  br label %878

; <label>:878:                                    ; preds = %877
  %879 = load i32, i32* @x.49
  %880 = load i32, i32* @y.50
  %881 = sub i32 %879, 1
  %882 = mul i32 %879, %881
  %883 = urem i32 %882, 2
  %884 = icmp eq i32 %883, 0
  %885 = icmp slt i32 %880, 10
  %886 = or i1 %884, %885
  br i1 %886, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %originalBB119alteredBB, %878
  %887 = load i32, i32* %27, align 4
  %888 = add nsw i32 %887, -1
  store i32 %888, i32* %27, align 4
  %889 = load i32, i32* @x.49
  %890 = load i32, i32* @y.50
  %891 = sub i32 %889, 1
  %892 = mul i32 %889, %891
  %893 = urem i32 %892, 2
  %894 = icmp eq i32 %893, 0
  %895 = icmp slt i32 %890, 10
  %896 = or i1 %894, %895
  br i1 %896, label %originalBBpart2127, label %originalBB119alteredBB

originalBBpart2127:                               ; preds = %originalBB119
  br label %740

; <label>:897:                                    ; preds = %740, %695, %567, %330, %originalBBpart255, %122, %originalBBpart212, %originalBBpart28
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %4
  %898 = alloca %struct.propagate_block_info*, align 8
  %899 = alloca %struct.rtx_def*, align 8
  %900 = alloca %struct.rtx_def*, align 8
  %901 = alloca %struct.rtx_def*, align 8
  %902 = alloca i32, align 4
  %903 = alloca i32, align 4
  %904 = alloca i32, align 4
  %905 = alloca %struct.rtx_def*, align 8
  %906 = alloca %struct.rtx_def*, align 8
  %907 = alloca %struct.rtx_def*, align 8
  %908 = alloca %struct.rtx_def*, align 8
  %909 = alloca i32, align 4
  %910 = alloca i32, align 4
  %911 = alloca i8*, align 8
  %912 = alloca i32, align 4
  %913 = alloca i32, align 4
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %898, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %899, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %900, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %901, align 8
  %914 = load %struct.propagate_block_info*, %struct.propagate_block_info** %898, align 8
  %915 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %914, i32 0, i32 9
  %916 = load i32, i32* %915, align 8
  store i32 %916, i32* %904, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %917 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %918 = icmp ne %struct.rtx_def* %917, null
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %130
  %919 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %920 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %919, i32 0, i32 1
  %921 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %920, i64 0, i64 0
  %922 = bitcast %union.rtunion_def* %921 to %struct.rtx_def**
  %923 = load %struct.rtx_def*, %struct.rtx_def** %922, align 8
  %924 = bitcast %struct.rtx_def* %923 to i32*
  %925 = load i32, i32* %924, align 8
  %_ = sub i32 0, %925
  %gen = add i32 %_, 65535
  %_15 = sub i32 %925, 65535
  %gen16 = mul i32 %_15, 65535
  %_17 = shl i32 %925, 65535
  %_18 = shl i32 %925, 65535
  %_19 = shl i32 %925, 65535
  %_20 = shl i32 %925, 65535
  %_21 = shl i32 %925, 65535
  %926 = and i32 %925, 65535
  %927 = icmp eq i32 %926, 68
  br label %originalBB14

originalBB25alteredBB:                            ; preds = %originalBB25, %198
  %928 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %929 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %930 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %929, i32 0, i32 4
  store %struct.rtx_def* %928, %struct.rtx_def** %930, align 8
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %226
  %931 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  store %struct.rtx_def* %931, %struct.rtx_def** %20, align 8
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %244
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %269
  %932 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %933 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %932, i32 0, i32 1
  %934 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %933, i64 0, i64 0
  %935 = bitcast %union.rtunion_def* %934 to %struct.rtx_def**
  %936 = load %struct.rtx_def*, %struct.rtx_def** %935, align 8
  store %struct.rtx_def* %936, %struct.rtx_def** %14, align 8
  %937 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %938 = bitcast %struct.rtx_def* %937 to i32*
  %939 = load i32, i32* %938, align 8
  %_38 = shl i32 %939, 65535
  %_39 = sub i32 0, %939
  %gen40 = add i32 %_39, 65535
  %_41 = sub i32 0, %939
  %gen42 = add i32 %_41, 65535
  %_43 = shl i32 %939, 65535
  %_44 = sub i32 %939, 65535
  %gen45 = mul i32 %_44, 65535
  %_46 = sub i32 0, %939
  %gen47 = add i32 %_46, 65535
  %_48 = sub i32 0, %939
  %gen49 = add i32 %_48, 65535
  %940 = and i32 %939, 65535
  %941 = icmp ne i32 %940, 61
  br label %originalBB37

originalBB53alteredBB:                            ; preds = %originalBB53, %298
  %942 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %943 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %944 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %945 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_reg(%struct.propagate_block_info* %942, %struct.rtx_def* %943, %struct.rtx_def* %944, %struct.rtx_def* %945)
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %372
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %480
  %946 = load i32, i32* @frame_pointer_needed, align 4
  %947 = icmp ne i32 %946, 0
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %507
  %948 = load i32, i32* @reload_completed, align 4
  %949 = icmp ne i32 %948, 0
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %526
  %950 = load i32, i32* @frame_pointer_needed, align 4
  %951 = icmp ne i32 %950, 0
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %592
  %952 = load i32, i32* %17, align 4
  %953 = icmp eq i32 %952, 41
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %612
  %954 = load i32, i32* %25, align 4
  %955 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %956 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %955, i32 0, i32 1
  %957 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %956, i64 0, i64 3
  %958 = bitcast %union.rtunion_def* %957 to %struct.rtvec_def**
  %959 = load %struct.rtvec_def*, %struct.rtvec_def** %958, align 8
  %960 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %959, i32 0, i32 0
  %961 = load i32, i32* %960, align 8
  %962 = icmp slt i32 %954, %961
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %660
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 3893, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.mark_used_regs, i32 0, i32 0)) #5
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %696
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %713
  %963 = load i32, i32* %17, align 4
  %964 = sext i32 %963 to i64
  %965 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i64 0, i64 %964
  %966 = load i8*, i8** %965, align 8
  store i8* %966, i8** %26, align 8
  %967 = load i32, i32* %17, align 4
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i64 0, i64 %968
  %970 = load i8, i8* %969, align 1
  %971 = zext i8 %970 to i32
  %_90 = sub i32 0, %971
  %gen91 = add i32 %_90, 1
  %_92 = sub i32 0, %971
  %gen93 = add i32 %_92, 1
  %_94 = shl i32 %971, 1
  %_95 = sub i32 0, %971
  %gen96 = add i32 %_95, 1
  %_97 = sub i32 %971, 1
  %gen98 = mul i32 %_97, 1
  %_99 = shl i32 %971, 1
  %972 = sub nsw i32 %971, 1
  store i32 %972, i32* %27, align 4
  br label %originalBB89

originalBB103alteredBB:                           ; preds = %originalBB103, %751
  %973 = load i32, i32* %27, align 4
  %974 = icmp eq i32 %973, 0
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %787
  %975 = load i8*, i8** %26, align 8
  %976 = load i32, i32* %27, align 4
  %977 = sext i32 %976 to i64
  %978 = getelementptr inbounds i8, i8* %975, i64 %977
  %979 = load i8, i8* %978, align 1
  %980 = sext i8 %979 to i32
  %981 = icmp eq i32 %980, 69
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %824
  %982 = load %struct.propagate_block_info*, %struct.propagate_block_info** %13, align 8
  %983 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %984 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %983, i32 0, i32 1
  %985 = load i32, i32* %27, align 4
  %986 = sext i32 %985 to i64
  %987 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %984, i64 0, i64 %986
  %988 = bitcast %union.rtunion_def* %987 to %struct.rtvec_def**
  %989 = load %struct.rtvec_def*, %struct.rtvec_def** %988, align 8
  %990 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %989, i32 0, i32 1
  %991 = load i32, i32* %28, align 4
  %992 = sext i32 %991 to i64
  %993 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %990, i64 0, i64 %992
  %994 = load %struct.rtx_def*, %struct.rtx_def** %993, align 8
  %995 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %996 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  call void @mark_used_regs(%struct.propagate_block_info* %982, %struct.rtx_def* %994, %struct.rtx_def* %995, %struct.rtx_def* %996)
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %860
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %878
  %997 = load i32, i32* %27, align 4
  %_120 = sub i32 %997, -1
  %gen121 = mul i32 %_120, -1
  %_122 = sub i32 0, %997
  %gen123 = add i32 %_122, -1
  %_124 = shl i32 %997, -1
  %_125 = shl i32 %997, -1
  %998 = add nsw i32 %997, -1
  store i32 %998, i32* %27, align 4
  br label %originalBB119
}

declare void @bitmap_set_bit(%struct.bitmap_head_def*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @mark_used_reg(%struct.propagate_block_info*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0 {
  %5 = alloca %struct.propagate_block_info*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca %struct.rtx_def*, align 8
  %8 = alloca %struct.rtx_def*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %5, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %7, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %8, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %18, i64 0, i64 0
  %20 = bitcast %union.rtunion_def* %19 to i32*
  %21 = load i32, i32* %20, align 8
  store i32 %21, i32* %9, align 4
  store i32 %21, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = icmp ult i32 %22, 53
  br i1 %23, label %24, label %205

; <label>:24:                                     ; preds = %4
  %25 = load i32, i32* %9, align 4
  %26 = icmp uge i32 %25, 8
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %24
  %28 = load i32, i32* %9, align 4
  %29 = icmp ule i32 %28, 15
  br i1 %29, label %64, label %30

; <label>:30:                                     ; preds = %27, %24
  %31 = load i32, i32* @x.51
  %32 = load i32, i32* @y.52
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %30
  %39 = load i32, i32* %9, align 4
  %40 = icmp uge i32 %39, 21
  %41 = load i32, i32* @x.51
  %42 = load i32, i32* @y.52
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %40, label %49, label %52

; <label>:49:                                     ; preds = %originalBBpart2
  %50 = load i32, i32* %9, align 4
  %51 = icmp ule i32 %50, 28
  br i1 %51, label %64, label %52

; <label>:52:                                     ; preds = %49, %originalBBpart2
  %53 = load i32, i32* %9, align 4
  %54 = icmp uge i32 %53, 45
  br i1 %54, label %55, label %58

; <label>:55:                                     ; preds = %52
  %56 = load i32, i32* %9, align 4
  %57 = icmp ule i32 %56, 52
  br i1 %57, label %64, label %58

; <label>:58:                                     ; preds = %55, %52
  %59 = load i32, i32* %9, align 4
  %60 = icmp uge i32 %59, 29
  br i1 %60, label %61, label %119

; <label>:61:                                     ; preds = %58
  %62 = load i32, i32* %9, align 4
  %63 = icmp ule i32 %62, 36
  br i1 %63, label %64, label %119

; <label>:64:                                     ; preds = %61, %55, %49, %27
  %65 = load i32, i32* @x.51
  %66 = load i32, i32* @y.52
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %64
  %73 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %75 = load i32, i32* %74, align 8
  %76 = lshr i32 %75, 16
  %77 = and i32 %76, 255
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 5
  %82 = load i32, i32* @x.51
  %83 = load i32, i32* @y.52
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %81, label %116, label %90

; <label>:90:                                     ; preds = %originalBBpart24
  %91 = load i32, i32* @x.51
  %92 = load i32, i32* @y.52
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %90
  %99 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %100 = bitcast %struct.rtx_def* %99 to i32*
  %101 = load i32, i32* %100, align 8
  %102 = lshr i32 %101, 16
  %103 = and i32 %102, 255
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 6
  %108 = load i32, i32* @x.51
  %109 = load i32, i32* @y.52
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart227, label %originalBB6alteredBB

originalBBpart227:                                ; preds = %originalBB6
  br label %116

; <label>:116:                                    ; preds = %originalBBpart227, %originalBBpart24
  %117 = phi i1 [ true, %originalBBpart24 ], [ %107, %originalBBpart227 ]
  %118 = select i1 %117, i32 2, i32 1
  br label %200

; <label>:119:                                    ; preds = %61, %58
  %120 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %122 = load i32, i32* %121, align 8
  %123 = lshr i32 %122, 16
  %124 = and i32 %123, 255
  %125 = icmp eq i32 %124, 18
  br i1 %125, label %126, label %147

; <label>:126:                                    ; preds = %119
  %127 = load i32, i32* @x.51
  %128 = load i32, i32* @y.52
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %126
  %135 = load i32, i32* @target_flags, align 4
  %136 = and i32 %135, 33554432
  %137 = icmp ne i32 %136, 0
  %138 = select i1 %137, i32 2, i32 3
  %139 = load i32, i32* @x.51
  %140 = load i32, i32* @y.52
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart233, label %originalBB29alteredBB

originalBBpart233:                                ; preds = %originalBB29
  br label %198

; <label>:147:                                    ; preds = %119
  %148 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %149 = bitcast %struct.rtx_def* %148 to i32*
  %150 = load i32, i32* %149, align 8
  %151 = lshr i32 %150, 16
  %152 = and i32 %151, 255
  %153 = icmp eq i32 %152, 24
  br i1 %153, label %154, label %159

; <label>:154:                                    ; preds = %147
  %155 = load i32, i32* @target_flags, align 4
  %156 = and i32 %155, 33554432
  %157 = icmp ne i32 %156, 0
  %158 = select i1 %157, i32 4, i32 6
  br label %180

; <label>:159:                                    ; preds = %147
  %160 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %162 = load i32, i32* %161, align 8
  %163 = lshr i32 %162, 16
  %164 = and i32 %163, 255
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = load i32, i32* @target_flags, align 4
  %170 = and i32 %169, 33554432
  %171 = icmp ne i32 %170, 0
  %172 = select i1 %171, i32 8, i32 4
  %173 = add nsw i32 %168, %172
  %174 = sub nsw i32 %173, 1
  %175 = load i32, i32* @target_flags, align 4
  %176 = and i32 %175, 33554432
  %177 = icmp ne i32 %176, 0
  %178 = select i1 %177, i32 8, i32 4
  %179 = sdiv i32 %174, %178
  br label %180

; <label>:180:                                    ; preds = %159, %154
  %181 = phi i32 [ %158, %154 ], [ %179, %159 ]
  %182 = load i32, i32* @x.51
  %183 = load i32, i32* @y.52
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %originalBB35alteredBB, %180
  %190 = load i32, i32* @x.51
  %191 = load i32, i32* @y.52
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %198

; <label>:198:                                    ; preds = %originalBBpart237, %originalBBpart233
  %199 = phi i32 [ %138, %originalBBpart233 ], [ %181, %originalBBpart237 ]
  br label %200

; <label>:200:                                    ; preds = %198, %116
  %201 = phi i32 [ %118, %116 ], [ %199, %198 ]
  %202 = sub nsw i32 %201, 1
  %203 = load i32, i32* %10, align 4
  %204 = add i32 %203, %202
  store i32 %204, i32* %10, align 4
  br label %205

; <label>:205:                                    ; preds = %200, %4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %12, align 4
  %206 = load i32, i32* %9, align 4
  store i32 %206, i32* %11, align 4
  br label %207

; <label>:207:                                    ; preds = %originalBBpart242, %205
  %208 = load i32, i32* %11, align 4
  %209 = load i32, i32* %10, align 4
  %210 = icmp ule i32 %208, %209
  br i1 %210, label %211, label %245

; <label>:211:                                    ; preds = %207
  %212 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %213 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %212, i32 0, i32 1
  %214 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %213, align 8
  %215 = load i32, i32* %11, align 4
  %216 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %214, i32 %215)
  store i32 %216, i32* %15, align 4
  %217 = load i32, i32* %15, align 4
  %218 = load i32, i32* %12, align 4
  %219 = or i32 %218, %217
  store i32 %219, i32* %12, align 4
  %220 = load i32, i32* %15, align 4
  %221 = icmp ne i32 %220, 0
  %222 = xor i1 %221, true
  %223 = zext i1 %222 to i32
  %224 = load i32, i32* %13, align 4
  %225 = or i32 %224, %223
  store i32 %225, i32* %13, align 4
  br label %226

; <label>:226:                                    ; preds = %211
  %227 = load i32, i32* @x.51
  %228 = load i32, i32* @y.52
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %226
  %235 = load i32, i32* %11, align 4
  %236 = add i32 %235, 1
  store i32 %236, i32* %11, align 4
  %237 = load i32, i32* @x.51
  %238 = load i32, i32* @y.52
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart242, label %originalBB39alteredBB

originalBBpart242:                                ; preds = %originalBB39
  br label %207

; <label>:245:                                    ; preds = %207
  store i32 0, i32* %14, align 4
  %246 = load i32, i32* %9, align 4
  store i32 %246, i32* %11, align 4
  br label %247

; <label>:247:                                    ; preds = %originalBBpart252, %245
  %248 = load i32, i32* %11, align 4
  %249 = load i32, i32* %10, align 4
  %250 = icmp ule i32 %248, %249
  br i1 %250, label %251, label %281

; <label>:251:                                    ; preds = %247
  %252 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %253 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %252, i32 0, i32 2
  %254 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %253, align 8
  %255 = load i32, i32* %11, align 4
  %256 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %254, i32 %255)
  %257 = icmp ne i32 %256, 0
  %258 = xor i1 %257, true
  %259 = zext i1 %258 to i32
  %260 = load i32, i32* %14, align 4
  %261 = or i32 %260, %259
  store i32 %261, i32* %14, align 4
  br label %262

; <label>:262:                                    ; preds = %251
  %263 = load i32, i32* @x.51
  %264 = load i32, i32* @y.52
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %originalBB44alteredBB, %262
  %271 = load i32, i32* %11, align 4
  %272 = add i32 %271, 1
  store i32 %272, i32* %11, align 4
  %273 = load i32, i32* @x.51
  %274 = load i32, i32* @y.52
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart252, label %originalBB44alteredBB

originalBBpart252:                                ; preds = %originalBB44
  br label %247

; <label>:281:                                    ; preds = %247
  %282 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %283 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %282, i32 0, i32 9
  %284 = load i32, i32* %283, align 8
  %285 = and i32 %284, 66
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %295

; <label>:287:                                    ; preds = %281
  %288 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %289 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %290 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %289, i32 0, i32 3
  %291 = load %struct.rtx_def**, %struct.rtx_def*** %290, align 8
  %292 = load i32, i32* %9, align 4
  %293 = zext i32 %292 to i64
  %294 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %291, i64 %293
  store %struct.rtx_def* %288, %struct.rtx_def** %294, align 8
  br label %295

; <label>:295:                                    ; preds = %287, %281
  %296 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %297 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %296, i32 0, i32 9
  %298 = load i32, i32* %297, align 8
  %299 = and i32 %298, 4
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %301, label %593

; <label>:301:                                    ; preds = %295
  %302 = load i32, i32* @x.51
  %303 = load i32, i32* @y.52
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %originalBB54alteredBB, %301
  %310 = load i32, i32* %9, align 4
  %311 = icmp ult i32 %310, 53
  %312 = load i32, i32* @x.51
  %313 = load i32, i32* @y.52
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %311, label %320, label %412

; <label>:320:                                    ; preds = %originalBBpart256
  %321 = load i64, i64* @elim_reg_set, align 8
  %322 = load i32, i32* %9, align 4
  %323 = zext i32 %322 to i64
  %324 = shl i64 1, %323
  %325 = and i64 %321, %324
  %326 = icmp ne i64 %325, 0
  br i1 %326, label %327, label %365

; <label>:327:                                    ; preds = %320
  %328 = load i32, i32* @x.51
  %329 = load i32, i32* @y.52
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %originalBB58alteredBB, %327
  %336 = load i32, i32* %9, align 4
  %337 = icmp eq i32 %336, 20
  %338 = load i32, i32* @x.51
  %339 = load i32, i32* @y.52
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %337, label %395, label %346

; <label>:346:                                    ; preds = %originalBBpart260
  %347 = load i32, i32* @x.51
  %348 = load i32, i32* @y.52
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %originalBB62alteredBB, %346
  %355 = load i32, i32* %9, align 4
  %356 = icmp eq i32 %355, 16
  %357 = load i32, i32* @x.51
  %358 = load i32, i32* @y.52
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %356, label %395, label %365

; <label>:365:                                    ; preds = %originalBBpart264, %320
  %366 = load i32, i32* %9, align 4
  store i32 %366, i32* %11, align 4
  br label %367

; <label>:367:                                    ; preds = %375, %365
  %368 = load i32, i32* %11, align 4
  %369 = load i32, i32* %10, align 4
  %370 = icmp ule i32 %368, %369
  br i1 %370, label %371, label %378

; <label>:371:                                    ; preds = %367
  %372 = load i32, i32* %11, align 4
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds [53 x i8], [53 x i8]* @regs_ever_live, i64 0, i64 %373
  store i8 1, i8* %374, align 1
  br label %375

; <label>:375:                                    ; preds = %371
  %376 = load i32, i32* %11, align 4
  %377 = add i32 %376, 1
  store i32 %377, i32* %11, align 4
  br label %367

; <label>:378:                                    ; preds = %367
  %379 = load i32, i32* @x.51
  %380 = load i32, i32* @y.52
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %378
  %387 = load i32, i32* @x.51
  %388 = load i32, i32* @y.52
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %395

; <label>:395:                                    ; preds = %originalBBpart268, %originalBBpart264, %originalBBpart260
  %396 = load i32, i32* @x.51
  %397 = load i32, i32* @y.52
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %originalBB70alteredBB, %395
  %404 = load i32, i32* @x.51
  %405 = load i32, i32* @y.52
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %576

; <label>:412:                                    ; preds = %originalBBpart256
  %413 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %414 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %413, i32 0, i32 0
  %415 = load %struct.basic_block_def*, %struct.basic_block_def** %414, align 8
  %416 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %415, i32 0, i32 11
  %417 = load i32, i32* %416, align 8
  store i32 %417, i32* %16, align 4
  %418 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %419 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %418, i32 0, i32 4
  %420 = bitcast %union.varray_data_tag* %419 to [1 x %struct.reg_info_def*]*
  %421 = load i32, i32* %9, align 4
  %422 = zext i32 %421 to i64
  %423 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %420, i64 0, i64 %422
  %424 = load %struct.reg_info_def*, %struct.reg_info_def** %423, align 8
  %425 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %424, i32 0, i32 9
  %426 = load i32, i32* %425, align 4
  %427 = icmp eq i32 %426, -1
  br i1 %427, label %428, label %438

; <label>:428:                                    ; preds = %412
  %429 = load i32, i32* %16, align 4
  %430 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %431 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %430, i32 0, i32 4
  %432 = bitcast %union.varray_data_tag* %431 to [1 x %struct.reg_info_def*]*
  %433 = load i32, i32* %9, align 4
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %432, i64 0, i64 %434
  %436 = load %struct.reg_info_def*, %struct.reg_info_def** %435, align 8
  %437 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %436, i32 0, i32 9
  store i32 %429, i32* %437, align 4
  br label %476

; <label>:438:                                    ; preds = %412
  %439 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %440 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %439, i32 0, i32 4
  %441 = bitcast %union.varray_data_tag* %440 to [1 x %struct.reg_info_def*]*
  %442 = load i32, i32* %9, align 4
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %441, i64 0, i64 %443
  %445 = load %struct.reg_info_def*, %struct.reg_info_def** %444, align 8
  %446 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %445, i32 0, i32 9
  %447 = load i32, i32* %446, align 4
  %448 = load i32, i32* %16, align 4
  %449 = icmp ne i32 %447, %448
  br i1 %449, label %450, label %475

; <label>:450:                                    ; preds = %438
  %451 = load i32, i32* @x.51
  %452 = load i32, i32* @y.52
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %450
  %459 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %460 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %459, i32 0, i32 4
  %461 = bitcast %union.varray_data_tag* %460 to [1 x %struct.reg_info_def*]*
  %462 = load i32, i32* %9, align 4
  %463 = zext i32 %462 to i64
  %464 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %461, i64 0, i64 %463
  %465 = load %struct.reg_info_def*, %struct.reg_info_def** %464, align 8
  %466 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %465, i32 0, i32 9
  store i32 -2, i32* %466, align 4
  %467 = load i32, i32* @x.51
  %468 = load i32, i32* @y.52
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %475

; <label>:475:                                    ; preds = %originalBBpart276, %438
  br label %476

; <label>:476:                                    ; preds = %475, %428
  %477 = load i32, i32* @optimize_size, align 4
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %501, label %479

; <label>:479:                                    ; preds = %476
  %480 = load i32, i32* @flag_branch_probabilities, align 4
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %502

; <label>:482:                                    ; preds = %479
  %483 = load i32, i32* @x.51
  %484 = load i32, i32* @y.52
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %originalBB78alteredBB, %482
  %491 = load i64, i64* getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 13), align 16
  %492 = icmp ne i64 %491, 0
  %493 = load i32, i32* @x.51
  %494 = load i32, i32* @y.52
  %495 = sub i32 %493, 1
  %496 = mul i32 %493, %495
  %497 = urem i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = icmp slt i32 %494, 10
  %500 = or i1 %498, %499
  br i1 %500, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %492, label %502, label %501

; <label>:501:                                    ; preds = %originalBBpart280, %476
  br label %554

; <label>:502:                                    ; preds = %originalBBpart280, %479
  %503 = load i32, i32* @x.51
  %504 = load i32, i32* @y.52
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %originalBB82alteredBB, %502
  %511 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %512 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %511, i32 0, i32 0
  %513 = load %struct.basic_block_def*, %struct.basic_block_def** %512, align 8
  %514 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %513, i32 0, i32 14
  %515 = load i32, i32* %514, align 8
  %516 = mul nsw i32 %515, 1000
  %517 = sdiv i32 %516, 10000
  %518 = icmp ne i32 %517, 0
  %519 = load i32, i32* @x.51
  %520 = load i32, i32* @y.52
  %521 = sub i32 %519, 1
  %522 = mul i32 %519, %521
  %523 = urem i32 %522, 2
  %524 = icmp eq i32 %523, 0
  %525 = icmp slt i32 %520, 10
  %526 = or i1 %524, %525
  br i1 %526, label %originalBBpart299, label %originalBB82alteredBB

originalBBpart299:                                ; preds = %originalBB82
  br i1 %518, label %527, label %535

; <label>:527:                                    ; preds = %originalBBpart299
  %528 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %529 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %528, i32 0, i32 0
  %530 = load %struct.basic_block_def*, %struct.basic_block_def** %529, align 8
  %531 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %530, i32 0, i32 14
  %532 = load i32, i32* %531, align 8
  %533 = mul nsw i32 %532, 1000
  %534 = sdiv i32 %533, 10000
  br label %536

; <label>:535:                                    ; preds = %originalBBpart299
  br label %536

; <label>:536:                                    ; preds = %535, %527
  %537 = phi i32 [ %534, %527 ], [ 1, %535 ]
  %538 = load i32, i32* @x.51
  %539 = load i32, i32* @y.52
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %originalBB101alteredBB, %536
  %546 = load i32, i32* @x.51
  %547 = load i32, i32* @y.52
  %548 = sub i32 %546, 1
  %549 = mul i32 %546, %548
  %550 = urem i32 %549, 2
  %551 = icmp eq i32 %550, 0
  %552 = icmp slt i32 %547, 10
  %553 = or i1 %551, %552
  br i1 %553, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br label %554

; <label>:554:                                    ; preds = %originalBBpart2103, %501
  %555 = phi i32 [ 1000, %501 ], [ %537, %originalBBpart2103 ]
  %556 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %557 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %556, i32 0, i32 4
  %558 = bitcast %union.varray_data_tag* %557 to [1 x %struct.reg_info_def*]*
  %559 = load i32, i32* %9, align 4
  %560 = zext i32 %559 to i64
  %561 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %558, i64 0, i64 %560
  %562 = load %struct.reg_info_def*, %struct.reg_info_def** %561, align 8
  %563 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %562, i32 0, i32 5
  %564 = load i32, i32* %563, align 4
  %565 = add nsw i32 %564, %555
  store i32 %565, i32* %563, align 4
  %566 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %567 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %566, i32 0, i32 4
  %568 = bitcast %union.varray_data_tag* %567 to [1 x %struct.reg_info_def*]*
  %569 = load i32, i32* %9, align 4
  %570 = zext i32 %569 to i64
  %571 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %568, i64 0, i64 %570
  %572 = load %struct.reg_info_def*, %struct.reg_info_def** %571, align 8
  %573 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %572, i32 0, i32 4
  %574 = load i32, i32* %573, align 4
  %575 = add nsw i32 %574, 1
  store i32 %575, i32* %573, align 4
  br label %576

; <label>:576:                                    ; preds = %554, %originalBBpart272
  %577 = load i32, i32* @x.51
  %578 = load i32, i32* @y.52
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %originalBB105alteredBB, %576
  %585 = load i32, i32* @x.51
  %586 = load i32, i32* @y.52
  %587 = sub i32 %585, 1
  %588 = mul i32 %585, %587
  %589 = urem i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = icmp slt i32 %586, 10
  %592 = or i1 %590, %591
  br i1 %592, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br label %593

; <label>:593:                                    ; preds = %originalBBpart2107, %295
  %594 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %595 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %594, i32 0, i32 9
  %596 = load i32, i32* %595, align 8
  %597 = and i32 %596, 5
  %598 = icmp ne i32 %597, 0
  br i1 %598, label %599, label %824

; <label>:599:                                    ; preds = %593
  %600 = load i32, i32* @x.51
  %601 = load i32, i32* @y.52
  %602 = sub i32 %600, 1
  %603 = mul i32 %600, %602
  %604 = urem i32 %603, 2
  %605 = icmp eq i32 %604, 0
  %606 = icmp slt i32 %601, 10
  %607 = or i1 %605, %606
  br i1 %607, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %originalBB109alteredBB, %599
  %608 = load i32, i32* %13, align 4
  %609 = icmp ne i32 %608, 0
  %610 = load i32, i32* @x.51
  %611 = load i32, i32* @y.52
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br i1 %609, label %618, label %824

; <label>:618:                                    ; preds = %originalBBpart2111
  %619 = load i32, i32* @x.51
  %620 = load i32, i32* @y.52
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %originalBB113alteredBB, %618
  %627 = load i32, i32* %14, align 4
  %628 = icmp ne i32 %627, 0
  %629 = load i32, i32* @x.51
  %630 = load i32, i32* @y.52
  %631 = sub i32 %629, 1
  %632 = mul i32 %629, %631
  %633 = urem i32 %632, 2
  %634 = icmp eq i32 %633, 0
  %635 = icmp slt i32 %630, 10
  %636 = or i1 %634, %635
  br i1 %636, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br i1 %628, label %637, label %824

; <label>:637:                                    ; preds = %originalBBpart2115
  %638 = load i32, i32* %9, align 4
  %639 = load i32, i32* %10, align 4
  %640 = icmp ne i32 %638, %639
  br i1 %640, label %641, label %675

; <label>:641:                                    ; preds = %637
  %642 = load i32, i32* %9, align 4
  store i32 %642, i32* %11, align 4
  br label %643

; <label>:643:                                    ; preds = %671, %641
  %644 = load i32, i32* %11, align 4
  %645 = load i32, i32* %10, align 4
  %646 = icmp ule i32 %644, %645
  br i1 %646, label %647, label %674

; <label>:647:                                    ; preds = %643
  %648 = load i32, i32* @x.51
  %649 = load i32, i32* @y.52
  %650 = sub i32 %648, 1
  %651 = mul i32 %648, %650
  %652 = urem i32 %651, 2
  %653 = icmp eq i32 %652, 0
  %654 = icmp slt i32 %649, 10
  %655 = or i1 %653, %654
  br i1 %655, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %originalBB117alteredBB, %647
  %656 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %657 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %656, i32 0, i32 2
  %658 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %657, align 8
  %659 = load i32, i32* %11, align 4
  %660 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %658, i32 %659)
  %661 = load i32, i32* %12, align 4
  %662 = or i32 %661, %660
  store i32 %662, i32* %12, align 4
  %663 = load i32, i32* @x.51
  %664 = load i32, i32* @y.52
  %665 = sub i32 %663, 1
  %666 = mul i32 %663, %665
  %667 = urem i32 %666, 2
  %668 = icmp eq i32 %667, 0
  %669 = icmp slt i32 %664, 10
  %670 = or i1 %668, %669
  br i1 %670, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  br label %671

; <label>:671:                                    ; preds = %originalBBpart2119
  %672 = load i32, i32* %11, align 4
  %673 = add i32 %672, 1
  store i32 %673, i32* %11, align 4
  br label %643

; <label>:674:                                    ; preds = %643
  br label %675

; <label>:675:                                    ; preds = %674, %637
  %676 = load i32, i32* %12, align 4
  %677 = icmp ne i32 %676, 0
  br i1 %677, label %751, label %678

; <label>:678:                                    ; preds = %675
  %679 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %680 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %679, i32 0, i32 9
  %681 = load i32, i32* %680, align 8
  %682 = and i32 %681, 1
  %683 = icmp ne i32 %682, 0
  br i1 %683, label %684, label %717

; <label>:684:                                    ; preds = %678
  %685 = load i32, i32* @x.51
  %686 = load i32, i32* @y.52
  %687 = sub i32 %685, 1
  %688 = mul i32 %685, %687
  %689 = urem i32 %688, 2
  %690 = icmp eq i32 %689, 0
  %691 = icmp slt i32 %686, 10
  %692 = or i1 %690, %691
  br i1 %692, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %originalBB121alteredBB, %684
  %693 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %694 = load i32, i32* %9, align 4
  %695 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %693, i32 1, i32 %694)
  %696 = icmp ne %struct.rtx_def* %695, null
  %697 = load i32, i32* @x.51
  %698 = load i32, i32* @y.52
  %699 = sub i32 %697, 1
  %700 = mul i32 %697, %699
  %701 = urem i32 %700, 2
  %702 = icmp eq i32 %701, 0
  %703 = icmp slt i32 %698, 10
  %704 = or i1 %702, %703
  br i1 %704, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  br i1 %696, label %717, label %705

; <label>:705:                                    ; preds = %originalBBpart2123
  %706 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %707 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %708 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %707, i32 0, i32 1
  %709 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %708, i64 0, i64 6
  %710 = bitcast %union.rtunion_def* %709 to %struct.rtx_def**
  %711 = load %struct.rtx_def*, %struct.rtx_def** %710, align 8
  %712 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 1, %struct.rtx_def* %706, %struct.rtx_def* %711)
  %713 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %714 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %713, i32 0, i32 1
  %715 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %714, i64 0, i64 6
  %716 = bitcast %union.rtunion_def* %715 to %struct.rtx_def**
  store %struct.rtx_def* %712, %struct.rtx_def** %716, align 8
  br label %717

; <label>:717:                                    ; preds = %705, %originalBBpart2123, %678
  %718 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %719 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %718, i32 0, i32 9
  %720 = load i32, i32* %719, align 8
  %721 = and i32 %720, 4
  %722 = icmp ne i32 %721, 0
  br i1 %722, label %723, label %734

; <label>:723:                                    ; preds = %717
  %724 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %725 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %724, i32 0, i32 4
  %726 = bitcast %union.varray_data_tag* %725 to [1 x %struct.reg_info_def*]*
  %727 = load i32, i32* %9, align 4
  %728 = zext i32 %727 to i64
  %729 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %726, i64 0, i64 %728
  %730 = load %struct.reg_info_def*, %struct.reg_info_def** %729, align 8
  %731 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %730, i32 0, i32 6
  %732 = load i32, i32* %731, align 4
  %733 = add nsw i32 %732, 1
  store i32 %733, i32* %731, align 4
  br label %734

; <label>:734:                                    ; preds = %723, %717
  %735 = load i32, i32* @x.51
  %736 = load i32, i32* @y.52
  %737 = sub i32 %735, 1
  %738 = mul i32 %735, %737
  %739 = urem i32 %738, 2
  %740 = icmp eq i32 %739, 0
  %741 = icmp slt i32 %736, 10
  %742 = or i1 %740, %741
  br i1 %742, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %originalBB125alteredBB, %734
  %743 = load i32, i32* @x.51
  %744 = load i32, i32* @y.52
  %745 = sub i32 %743, 1
  %746 = mul i32 %743, %745
  %747 = urem i32 %746, 2
  %748 = icmp eq i32 %747, 0
  %749 = icmp slt i32 %744, 10
  %750 = or i1 %748, %749
  br i1 %750, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  br label %807

; <label>:751:                                    ; preds = %675
  %752 = load i32, i32* %9, align 4
  store i32 %752, i32* %11, align 4
  br label %753

; <label>:753:                                    ; preds = %803, %751
  %754 = load i32, i32* %11, align 4
  %755 = load i32, i32* %10, align 4
  %756 = icmp ule i32 %754, %755
  br i1 %756, label %757, label %806

; <label>:757:                                    ; preds = %753
  %758 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %759 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %758, i32 0, i32 1
  %760 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %759, align 8
  %761 = load i32, i32* %11, align 4
  %762 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %760, i32 %761)
  %763 = icmp ne i32 %762, 0
  br i1 %763, label %802, label %764

; <label>:764:                                    ; preds = %757
  %765 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %766 = load i32, i32* %11, align 4
  %767 = call i32 @dead_or_set_regno_p(%struct.rtx_def* %765, i32 %766)
  %768 = icmp ne i32 %767, 0
  br i1 %768, label %802, label %769

; <label>:769:                                    ; preds = %764
  %770 = load i32, i32* @x.51
  %771 = load i32, i32* @y.52
  %772 = sub i32 %770, 1
  %773 = mul i32 %770, %772
  %774 = urem i32 %773, 2
  %775 = icmp eq i32 %774, 0
  %776 = icmp slt i32 %771, 10
  %777 = or i1 %775, %776
  br i1 %777, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %originalBB129alteredBB, %769
  %778 = load i32, i32* %11, align 4
  %779 = zext i32 %778 to i64
  %780 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i64 0, i64 %779
  %781 = load i32, i32* %780, align 4
  %782 = load i32, i32* %11, align 4
  %783 = call %struct.rtx_def* @gen_rtx_REG(i32 %781, i32 %782)
  %784 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %785 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %784, i32 0, i32 1
  %786 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %785, i64 0, i64 6
  %787 = bitcast %union.rtunion_def* %786 to %struct.rtx_def**
  %788 = load %struct.rtx_def*, %struct.rtx_def** %787, align 8
  %789 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 1, %struct.rtx_def* %783, %struct.rtx_def* %788)
  %790 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %791 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %790, i32 0, i32 1
  %792 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %791, i64 0, i64 6
  %793 = bitcast %union.rtunion_def* %792 to %struct.rtx_def**
  store %struct.rtx_def* %789, %struct.rtx_def** %793, align 8
  %794 = load i32, i32* @x.51
  %795 = load i32, i32* @y.52
  %796 = sub i32 %794, 1
  %797 = mul i32 %794, %796
  %798 = urem i32 %797, 2
  %799 = icmp eq i32 %798, 0
  %800 = icmp slt i32 %795, 10
  %801 = or i1 %799, %800
  br i1 %801, label %originalBBpart2131, label %originalBB129alteredBB

originalBBpart2131:                               ; preds = %originalBB129
  br label %802

; <label>:802:                                    ; preds = %originalBBpart2131, %764, %757
  br label %803

; <label>:803:                                    ; preds = %802
  %804 = load i32, i32* %11, align 4
  %805 = add i32 %804, 1
  store i32 %805, i32* %11, align 4
  br label %753

; <label>:806:                                    ; preds = %753
  br label %807

; <label>:807:                                    ; preds = %806, %originalBBpart2127
  %808 = load i32, i32* @x.51
  %809 = load i32, i32* @y.52
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %originalBB133alteredBB, %807
  %816 = load i32, i32* @x.51
  %817 = load i32, i32* @y.52
  %818 = sub i32 %816, 1
  %819 = mul i32 %816, %818
  %820 = urem i32 %819, 2
  %821 = icmp eq i32 %820, 0
  %822 = icmp slt i32 %817, 10
  %823 = or i1 %821, %822
  br i1 %823, label %originalBBpart2135, label %originalBB133alteredBB

originalBBpart2135:                               ; preds = %originalBB133
  br label %824

; <label>:824:                                    ; preds = %originalBBpart2135, %originalBBpart2115, %originalBBpart2111, %593
  %825 = load i32, i32* %9, align 4
  store i32 %825, i32* %11, align 4
  br label %826

; <label>:826:                                    ; preds = %835, %824
  %827 = load i32, i32* %11, align 4
  %828 = load i32, i32* %10, align 4
  %829 = icmp ule i32 %827, %828
  br i1 %829, label %830, label %838

; <label>:830:                                    ; preds = %826
  %831 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %832 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %831, i32 0, i32 1
  %833 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %832, align 8
  %834 = load i32, i32* %11, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %833, i32 %834)
  br label %835

; <label>:835:                                    ; preds = %830
  %836 = load i32, i32* %11, align 4
  %837 = add i32 %836, 1
  store i32 %837, i32* %11, align 4
  br label %826

; <label>:838:                                    ; preds = %826
  %839 = load i32, i32* @x.51
  %840 = load i32, i32* @y.52
  %841 = sub i32 %839, 1
  %842 = mul i32 %839, %841
  %843 = urem i32 %842, 2
  %844 = icmp eq i32 %843, 0
  %845 = icmp slt i32 %840, 10
  %846 = or i1 %844, %845
  br i1 %846, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %originalBB137alteredBB, %838
  %847 = load i32, i32* @x.51
  %848 = load i32, i32* @y.52
  %849 = sub i32 %847, 1
  %850 = mul i32 %847, %849
  %851 = urem i32 %850, 2
  %852 = icmp eq i32 %851, 0
  %853 = icmp slt i32 %848, 10
  %854 = or i1 %852, %853
  br i1 %854, label %originalBBpart2139, label %originalBB137alteredBB

originalBBpart2139:                               ; preds = %originalBB137
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %30
  %855 = load i32, i32* %9, align 4
  %856 = icmp uge i32 %855, 21
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %64
  %857 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %858 = bitcast %struct.rtx_def* %857 to i32*
  %859 = load i32, i32* %858, align 8
  %_ = shl i32 %859, 16
  %860 = lshr i32 %859, 16
  %_2 = sub i32 %860, 255
  %gen = mul i32 %_2, 255
  %861 = and i32 %860, 255
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %862
  %864 = load i32, i32* %863, align 4
  %865 = icmp eq i32 %864, 5
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %90
  %866 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %867 = bitcast %struct.rtx_def* %866 to i32*
  %868 = load i32, i32* %867, align 8
  %_7 = sub i32 0, %868
  %gen8 = add i32 %_7, 16
  %_9 = sub i32 0, %868
  %gen10 = add i32 %_9, 16
  %_11 = sub i32 0, %868
  %gen12 = add i32 %_11, 16
  %869 = lshr i32 %868, 16
  %_13 = sub i32 0, %869
  %gen14 = add i32 %_13, 255
  %_15 = shl i32 %869, 255
  %_16 = sub i32 %869, 255
  %gen17 = mul i32 %_16, 255
  %_18 = sub i32 %869, 255
  %gen19 = mul i32 %_18, 255
  %_20 = shl i32 %869, 255
  %_21 = sub i32 0, %869
  %gen22 = add i32 %_21, 255
  %_23 = shl i32 %869, 255
  %_24 = sub i32 %869, 255
  %gen25 = mul i32 %_24, 255
  %870 = and i32 %869, 255
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %871
  %873 = load i32, i32* %872, align 4
  %874 = icmp eq i32 %873, 6
  br label %originalBB6

originalBB29alteredBB:                            ; preds = %originalBB29, %126
  %875 = load i32, i32* @target_flags, align 4
  %_30 = shl i32 %875, 33554432
  %_31 = shl i32 %875, 33554432
  %876 = and i32 %875, 33554432
  %877 = icmp ne i32 %876, 0
  %878 = select i1 %877, i32 2, i32 3
  br label %originalBB29

originalBB35alteredBB:                            ; preds = %originalBB35, %180
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %226
  %879 = load i32, i32* %11, align 4
  %_40 = shl i32 %879, 1
  %880 = add i32 %879, 1
  store i32 %880, i32* %11, align 4
  br label %originalBB39

originalBB44alteredBB:                            ; preds = %originalBB44, %262
  %881 = load i32, i32* %11, align 4
  %_45 = sub i32 0, %881
  %gen46 = add i32 %_45, 1
  %_47 = shl i32 %881, 1
  %_48 = shl i32 %881, 1
  %_49 = sub i32 %881, 1
  %gen50 = mul i32 %_49, 1
  %882 = add i32 %881, 1
  store i32 %882, i32* %11, align 4
  br label %originalBB44

originalBB54alteredBB:                            ; preds = %originalBB54, %301
  %883 = load i32, i32* %9, align 4
  %884 = icmp ult i32 %883, 53
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %327
  %885 = load i32, i32* %9, align 4
  %886 = icmp eq i32 %885, 20
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %346
  %887 = load i32, i32* %9, align 4
  %888 = icmp eq i32 %887, 16
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %378
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %395
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %450
  %889 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %890 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %889, i32 0, i32 4
  %891 = bitcast %union.varray_data_tag* %890 to [1 x %struct.reg_info_def*]*
  %892 = load i32, i32* %9, align 4
  %893 = zext i32 %892 to i64
  %894 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %891, i64 0, i64 %893
  %895 = load %struct.reg_info_def*, %struct.reg_info_def** %894, align 8
  %896 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %895, i32 0, i32 9
  store i32 -2, i32* %896, align 4
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %482
  %897 = load i64, i64* getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 13), align 16
  %898 = icmp ne i64 %897, 0
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %502
  %899 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %900 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %899, i32 0, i32 0
  %901 = load %struct.basic_block_def*, %struct.basic_block_def** %900, align 8
  %902 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %901, i32 0, i32 14
  %903 = load i32, i32* %902, align 8
  %_83 = sub i32 0, %903
  %gen84 = add i32 %_83, 1000
  %_85 = shl i32 %903, 1000
  %_86 = sub i32 %903, 1000
  %gen87 = mul i32 %_86, 1000
  %_88 = sub i32 %903, 1000
  %gen89 = mul i32 %_88, 1000
  %_90 = shl i32 %903, 1000
  %_91 = shl i32 %903, 1000
  %904 = mul nsw i32 %903, 1000
  %_92 = sub i32 %904, 10000
  %gen93 = mul i32 %_92, 10000
  %_94 = shl i32 %904, 10000
  %_95 = shl i32 %904, 10000
  %_96 = sub i32 0, %904
  %gen97 = add i32 %_96, 10000
  %905 = sdiv i32 %904, 10000
  %906 = icmp ne i32 %905, 0
  br label %originalBB82

originalBB101alteredBB:                           ; preds = %originalBB101, %536
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %576
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %599
  %907 = load i32, i32* %13, align 4
  %908 = icmp ne i32 %907, 0
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %618
  %909 = load i32, i32* %14, align 4
  %910 = icmp ne i32 %909, 0
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %647
  %911 = load %struct.propagate_block_info*, %struct.propagate_block_info** %5, align 8
  %912 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %911, i32 0, i32 2
  %913 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %912, align 8
  %914 = load i32, i32* %11, align 4
  %915 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %913, i32 %914)
  %916 = load i32, i32* %12, align 4
  %917 = or i32 %916, %915
  store i32 %917, i32* %12, align 4
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %684
  %918 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %919 = load i32, i32* %9, align 4
  %920 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %918, i32 1, i32 %919)
  %921 = icmp ne %struct.rtx_def* %920, null
  br label %originalBB121

originalBB125alteredBB:                           ; preds = %originalBB125, %734
  br label %originalBB125

originalBB129alteredBB:                           ; preds = %originalBB129, %769
  %922 = load i32, i32* %11, align 4
  %923 = zext i32 %922 to i64
  %924 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i64 0, i64 %923
  %925 = load i32, i32* %924, align 4
  %926 = load i32, i32* %11, align 4
  %927 = call %struct.rtx_def* @gen_rtx_REG(i32 %925, i32 %926)
  %928 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %929 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %928, i32 0, i32 1
  %930 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %929, i64 0, i64 6
  %931 = bitcast %union.rtunion_def* %930 to %struct.rtx_def**
  %932 = load %struct.rtx_def*, %struct.rtx_def** %931, align 8
  %933 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 1, %struct.rtx_def* %927, %struct.rtx_def* %932)
  %934 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %935 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %934, i32 0, i32 1
  %936 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %935, i64 0, i64 6
  %937 = bitcast %union.rtunion_def* %936 to %struct.rtx_def**
  store %struct.rtx_def* %933, %struct.rtx_def** %937, align 8
  br label %originalBB129

originalBB133alteredBB:                           ; preds = %originalBB133, %807
  br label %originalBB133

originalBB137alteredBB:                           ; preds = %originalBB137, %838
  br label %originalBB137
}

; Function Attrs: noinline nounwind uwtable
define %struct.propagate_block_info* @init_propagate_block_info(%struct.basic_block_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32) #0 {
  %6 = load i32, i32* @x.53
  %7 = load i32, i32* @y.54
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %5
  %14 = alloca %struct.basic_block_def*, align 8
  %15 = alloca %struct.bitmap_head_def*, align 8
  %16 = alloca %struct.bitmap_head_def*, align 8
  %17 = alloca %struct.bitmap_head_def*, align 8
  %18 = alloca i32, align 4
  %19 = alloca %struct.propagate_block_info*, align 8
  %20 = alloca %struct.rtx_def*, align 8
  %21 = alloca %struct.rtx_def*, align 8
  %22 = alloca %struct.rtx_def*, align 8
  %23 = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %0, %struct.basic_block_def** %14, align 8
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %15, align 8
  store %struct.bitmap_head_def* %2, %struct.bitmap_head_def** %16, align 8
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %17, align 8
  store i32 %4, i32* %18, align 4
  %24 = call noalias i8* @xmalloc(i64 72)
  %25 = bitcast i8* %24 to %struct.propagate_block_info*
  store %struct.propagate_block_info* %25, %struct.propagate_block_info** %19, align 8
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %27 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %28 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %27, i32 0, i32 0
  store %struct.basic_block_def* %26, %struct.basic_block_def** %28, align 8
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %30 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %31 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %30, i32 0, i32 1
  store %struct.bitmap_head_def* %29, %struct.bitmap_head_def** %31, align 8
  %32 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %33 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %32, i32 0, i32 4
  store %struct.rtx_def* null, %struct.rtx_def** %33, align 8
  %34 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %35 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %34, i32 0, i32 7
  store i32 0, i32* %35, align 8
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %16, align 8
  %37 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %38 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %37, i32 0, i32 5
  store %struct.bitmap_head_def* %36, %struct.bitmap_head_def** %38, align 8
  %39 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %17, align 8
  %40 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %41 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %40, i32 0, i32 6
  store %struct.bitmap_head_def* %39, %struct.bitmap_head_def** %41, align 8
  %42 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %43 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %42, i32 0, i32 8
  store i32 0, i32* %43, align 4
  %44 = load i32, i32* %18, align 4
  %45 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %46 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %45, i32 0, i32 9
  store i32 %44, i32* %46, align 8
  %47 = load i32, i32* %18, align 4
  %48 = and i32 %47, 66
  %49 = icmp ne i32 %48, 0
  %50 = load i32, i32* @x.53
  %51 = load i32, i32* @y.54
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %49, label %58, label %65

; <label>:58:                                     ; preds = %originalBBpart2
  %59 = call i32 @max_reg_num()
  %60 = sext i32 %59 to i64
  %61 = call noalias i8* @xcalloc(i64 %60, i64 8)
  %62 = bitcast i8* %61 to %struct.rtx_def**
  %63 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %64 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %63, i32 0, i32 3
  store %struct.rtx_def** %62, %struct.rtx_def*** %64, align 8
  br label %68

; <label>:65:                                     ; preds = %originalBBpart2
  %66 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %67 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %66, i32 0, i32 3
  store %struct.rtx_def** null, %struct.rtx_def*** %67, align 8
  br label %68

; <label>:68:                                     ; preds = %65, %58
  %69 = call noalias i8* @xmalloc(i64 24)
  %70 = bitcast i8* %69 to %struct.bitmap_head_def*
  %71 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %70)
  %72 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %73 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %72, i32 0, i32 2
  store %struct.bitmap_head_def* %71, %struct.bitmap_head_def** %73, align 8
  %74 = load i32, i32* @optimize, align 4
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %393

; <label>:76:                                     ; preds = %68
  %77 = load i32, i32* @x.53
  %78 = load i32, i32* @y.54
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %76
  %85 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %86 = bitcast %union.tree_node* %85 to %struct.tree_common*
  %87 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %86, i32 0, i32 1
  %88 = load %union.tree_node*, %union.tree_node** %87, align 8
  %89 = bitcast %union.tree_node* %88 to %struct.tree_common*
  %90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %89, i32 0, i32 2
  %91 = load i32, i32* %90, align 8
  %92 = and i32 %91, 255
  %93 = icmp eq i32 %92, 23
  %94 = load i32, i32* @x.53
  %95 = load i32, i32* @y.54
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart26, label %originalBB1alteredBB

originalBBpart26:                                 ; preds = %originalBB1
  br i1 %93, label %102, label %113

; <label>:102:                                    ; preds = %originalBBpart26
  %103 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %104 = bitcast %union.tree_node* %103 to %struct.tree_common*
  %105 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %104, i32 0, i32 1
  %106 = load %union.tree_node*, %union.tree_node** %105, align 8
  %107 = bitcast %union.tree_node* %106 to %struct.tree_type*
  %108 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %107, i32 0, i32 6
  %109 = load i32, i32* %108, align 4
  %110 = lshr i32 %109, 17
  %111 = and i32 %110, 1
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %393, label %113

; <label>:113:                                    ; preds = %102, %originalBBpart26
  %114 = load i32, i32* %18, align 4
  %115 = and i32 %114, 16
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %393

; <label>:117:                                    ; preds = %113
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %119 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %118, i32 0, i32 5
  %120 = load %struct.edge_def*, %struct.edge_def** %119, align 8
  %121 = icmp eq %struct.edge_def* %120, null
  br i1 %121, label %144, label %122

; <label>:122:                                    ; preds = %117
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %124 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %123, i32 0, i32 5
  %125 = load %struct.edge_def*, %struct.edge_def** %124, align 8
  %126 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %125, i32 0, i32 1
  %127 = load %struct.edge_def*, %struct.edge_def** %126, align 8
  %128 = icmp eq %struct.edge_def* %127, null
  br i1 %128, label %129, label %393

; <label>:129:                                    ; preds = %122
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %131 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %130, i32 0, i32 5
  %132 = load %struct.edge_def*, %struct.edge_def** %131, align 8
  %133 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %132, i32 0, i32 3
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %133, align 8
  %135 = icmp eq %struct.basic_block_def* %134, getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %135, label %136, label %393

; <label>:136:                                    ; preds = %129
  %137 = load %struct.function*, %struct.function** @cfun, align 8
  %138 = getelementptr inbounds %struct.function, %struct.function* %137, i32 0, i32 56
  %139 = bitcast i24* %138 to i32*
  %140 = load i32, i32* %139, align 8
  %141 = lshr i32 %140, 7
  %142 = and i32 %141, 1
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %393, label %144

; <label>:144:                                    ; preds = %136, %117
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %146 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %145, i32 0, i32 1
  %147 = load %struct.rtx_def*, %struct.rtx_def** %146, align 8
  store %struct.rtx_def* %147, %struct.rtx_def** %20, align 8
  br label %148

; <label>:148:                                    ; preds = %386, %144
  %149 = load i32, i32* @x.53
  %150 = load i32, i32* @y.54
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %originalBB8alteredBB, %148
  %157 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %159 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %158, i32 0, i32 0
  %160 = load %struct.rtx_def*, %struct.rtx_def** %159, align 8
  %161 = icmp ne %struct.rtx_def* %157, %160
  %162 = load i32, i32* @x.53
  %163 = load i32, i32* @y.54
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br i1 %161, label %170, label %392

; <label>:170:                                    ; preds = %originalBBpart210
  %171 = load i32, i32* @x.53
  %172 = load i32, i32* @y.54
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %170
  %179 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %180 = bitcast %struct.rtx_def* %179 to i32*
  %181 = load i32, i32* %180, align 8
  %182 = and i32 %181, 65535
  %183 = icmp eq i32 %182, 32
  %184 = load i32, i32* @x.53
  %185 = load i32, i32* @y.54
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBBpart215, label %originalBB12alteredBB

originalBBpart215:                                ; preds = %originalBB12
  br i1 %183, label %192, label %385

; <label>:192:                                    ; preds = %originalBBpart215
  %193 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %194 = bitcast %struct.rtx_def* %193 to i32*
  %195 = load i32, i32* %194, align 8
  %196 = and i32 %195, 65535
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = sext i8 %199 to i32
  %201 = icmp eq i32 %200, 105
  br i1 %201, label %202, label %244

; <label>:202:                                    ; preds = %192
  %203 = load i32, i32* @x.53
  %204 = load i32, i32* @y.54
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %202
  %211 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %211, i32 0, i32 1
  %213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %212, i64 0, i64 3
  %214 = bitcast %union.rtunion_def* %213 to %struct.rtx_def**
  %215 = load %struct.rtx_def*, %struct.rtx_def** %214, align 8
  %216 = bitcast %struct.rtx_def* %215 to i32*
  %217 = load i32, i32* %216, align 8
  %218 = and i32 %217, 65535
  %219 = icmp eq i32 %218, 47
  %220 = load i32, i32* @x.53
  %221 = load i32, i32* @y.54
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart221, label %originalBB17alteredBB

originalBBpart221:                                ; preds = %originalBB17
  br i1 %219, label %228, label %234

; <label>:228:                                    ; preds = %originalBBpart221
  %229 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1
  %231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %230, i64 0, i64 3
  %232 = bitcast %union.rtunion_def* %231 to %struct.rtx_def**
  %233 = load %struct.rtx_def*, %struct.rtx_def** %232, align 8
  br label %242

; <label>:234:                                    ; preds = %originalBBpart221
  %235 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %236 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1
  %238 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %237, i64 0, i64 3
  %239 = bitcast %union.rtunion_def* %238 to %struct.rtx_def**
  %240 = load %struct.rtx_def*, %struct.rtx_def** %239, align 8
  %241 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %235, %struct.rtx_def* %240)
  br label %242

; <label>:242:                                    ; preds = %234, %228
  %243 = phi %struct.rtx_def* [ %233, %228 ], [ %241, %234 ]
  br label %261

; <label>:244:                                    ; preds = %192
  %245 = load i32, i32* @x.53
  %246 = load i32, i32* @y.54
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %244
  %253 = load i32, i32* @x.53
  %254 = load i32, i32* @y.54
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %261

; <label>:261:                                    ; preds = %originalBBpart225, %242
  %262 = phi %struct.rtx_def* [ %243, %242 ], [ null, %originalBBpart225 ]
  store %struct.rtx_def* %262, %struct.rtx_def** %21, align 8
  %263 = icmp ne %struct.rtx_def* %262, null
  br i1 %263, label %264, label %385

; <label>:264:                                    ; preds = %261
  %265 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %266 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %265, i32 0, i32 1
  %267 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %266, i64 0, i64 0
  %268 = bitcast %union.rtunion_def* %267 to %struct.rtx_def**
  %269 = load %struct.rtx_def*, %struct.rtx_def** %268, align 8
  %270 = bitcast %struct.rtx_def* %269 to i32*
  %271 = load i32, i32* %270, align 8
  %272 = and i32 %271, 65535
  %273 = icmp eq i32 %272, 66
  br i1 %273, label %274, label %385

; <label>:274:                                    ; preds = %264
  %275 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %276 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %275, i32 0, i32 1
  %277 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %276, i64 0, i64 0
  %278 = bitcast %union.rtunion_def* %277 to %struct.rtx_def**
  %279 = load %struct.rtx_def*, %struct.rtx_def** %278, align 8
  store %struct.rtx_def* %279, %struct.rtx_def** %22, align 8
  %280 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %281 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %280)
  store %struct.rtx_def* %281, %struct.rtx_def** %23, align 8
  %282 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %283 = bitcast %struct.rtx_def* %282 to i32*
  %284 = load i32, i32* %283, align 8
  %285 = lshr i32 %284, 26
  %286 = and i32 %285, 1
  %287 = icmp ne i32 %286, 0
  br i1 %287, label %288, label %289

; <label>:288:                                    ; preds = %274
  br label %386

; <label>:289:                                    ; preds = %274
  %290 = load i32, i32* @x.53
  %291 = load i32, i32* @y.54
  %292 = sub i32 %290, 1
  %293 = mul i32 %290, %292
  %294 = urem i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %295, %296
  br i1 %297, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %originalBB27alteredBB, %289
  %298 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %299 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %298, i32 0, i32 1
  %300 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %299, i64 0, i64 0
  %301 = bitcast %union.rtunion_def* %300 to %struct.rtx_def**
  %302 = load %struct.rtx_def*, %struct.rtx_def** %301, align 8
  %303 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8
  %304 = icmp eq %struct.rtx_def* %302, %303
  %305 = load i32, i32* @x.53
  %306 = load i32, i32* @y.54
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %304, label %381, label %313

; <label>:313:                                    ; preds = %originalBBpart229
  %314 = load i32, i32* @x.53
  %315 = load i32, i32* @y.54
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %originalBB31alteredBB, %313
  %322 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %323 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %322, i32 0, i32 1
  %324 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %323, i64 0, i64 0
  %325 = bitcast %union.rtunion_def* %324 to %struct.rtx_def**
  %326 = load %struct.rtx_def*, %struct.rtx_def** %325, align 8
  %327 = bitcast %struct.rtx_def* %326 to i32*
  %328 = load i32, i32* %327, align 8
  %329 = and i32 %328, 65535
  %330 = icmp eq i32 %329, 75
  %331 = load i32, i32* @x.53
  %332 = load i32, i32* @y.54
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBBpart237, label %originalBB31alteredBB

originalBBpart237:                                ; preds = %originalBB31
  br i1 %330, label %339, label %384

; <label>:339:                                    ; preds = %originalBBpart237
  %340 = load i32, i32* @x.53
  %341 = load i32, i32* @y.54
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %339
  %348 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %349 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %348, i32 0, i32 1
  %350 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %349, i64 0, i64 0
  %351 = bitcast %union.rtunion_def* %350 to %struct.rtx_def**
  %352 = load %struct.rtx_def*, %struct.rtx_def** %351, align 8
  %353 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %352, i32 0, i32 1
  %354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %353, i64 0, i64 0
  %355 = bitcast %union.rtunion_def* %354 to %struct.rtx_def**
  %356 = load %struct.rtx_def*, %struct.rtx_def** %355, align 8
  %357 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8
  %358 = icmp eq %struct.rtx_def* %356, %357
  %359 = load i32, i32* @x.53
  %360 = load i32, i32* @y.54
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br i1 %358, label %367, label %384

; <label>:367:                                    ; preds = %originalBBpart241
  %368 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %369 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %368, i32 0, i32 1
  %370 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %369, i64 0, i64 0
  %371 = bitcast %union.rtunion_def* %370 to %struct.rtx_def**
  %372 = load %struct.rtx_def*, %struct.rtx_def** %371, align 8
  %373 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %372, i32 0, i32 1
  %374 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %373, i64 0, i64 1
  %375 = bitcast %union.rtunion_def* %374 to %struct.rtx_def**
  %376 = load %struct.rtx_def*, %struct.rtx_def** %375, align 8
  %377 = bitcast %struct.rtx_def* %376 to i32*
  %378 = load i32, i32* %377, align 8
  %379 = and i32 %378, 65535
  %380 = icmp eq i32 %379, 54
  br i1 %380, label %381, label %384

; <label>:381:                                    ; preds = %367, %originalBBpart229
  %382 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %383 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  call void @add_to_mem_set_list(%struct.propagate_block_info* %382, %struct.rtx_def* %383)
  br label %384

; <label>:384:                                    ; preds = %381, %367, %originalBBpart241, %originalBBpart237
  br label %385

; <label>:385:                                    ; preds = %384, %264, %261, %originalBBpart215
  br label %386

; <label>:386:                                    ; preds = %385, %288
  %387 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %388 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %387, i32 0, i32 1
  %389 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %388, i64 0, i64 1
  %390 = bitcast %union.rtunion_def* %389 to %struct.rtx_def**
  %391 = load %struct.rtx_def*, %struct.rtx_def** %390, align 8
  store %struct.rtx_def* %391, %struct.rtx_def** %20, align 8
  br label %148

; <label>:392:                                    ; preds = %originalBBpart210
  br label %393

; <label>:393:                                    ; preds = %392, %136, %129, %122, %113, %102, %68
  %394 = load i32, i32* @x.53
  %395 = load i32, i32* @y.54
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %originalBB43alteredBB, %393
  %402 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  %403 = load i32, i32* @x.53
  %404 = load i32, i32* @y.54
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  ret %struct.propagate_block_info* %402

originalBBalteredBB:                              ; preds = %originalBB, %5
  %411 = alloca %struct.basic_block_def*, align 8
  %412 = alloca %struct.bitmap_head_def*, align 8
  %413 = alloca %struct.bitmap_head_def*, align 8
  %414 = alloca %struct.bitmap_head_def*, align 8
  %415 = alloca i32, align 4
  %416 = alloca %struct.propagate_block_info*, align 8
  %417 = alloca %struct.rtx_def*, align 8
  %418 = alloca %struct.rtx_def*, align 8
  %419 = alloca %struct.rtx_def*, align 8
  %420 = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %0, %struct.basic_block_def** %411, align 8
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %412, align 8
  store %struct.bitmap_head_def* %2, %struct.bitmap_head_def** %413, align 8
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %414, align 8
  store i32 %4, i32* %415, align 4
  %421 = call noalias i8* @xmalloc(i64 72)
  %422 = bitcast i8* %421 to %struct.propagate_block_info*
  store %struct.propagate_block_info* %422, %struct.propagate_block_info** %416, align 8
  %423 = load %struct.basic_block_def*, %struct.basic_block_def** %411, align 8
  %424 = load %struct.propagate_block_info*, %struct.propagate_block_info** %416, align 8
  %425 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %424, i32 0, i32 0
  store %struct.basic_block_def* %423, %struct.basic_block_def** %425, align 8
  %426 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %412, align 8
  %427 = load %struct.propagate_block_info*, %struct.propagate_block_info** %416, align 8
  %428 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %427, i32 0, i32 1
  store %struct.bitmap_head_def* %426, %struct.bitmap_head_def** %428, align 8
  %429 = load %struct.propagate_block_info*, %struct.propagate_block_info** %416, align 8
  %430 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %429, i32 0, i32 4
  store %struct.rtx_def* null, %struct.rtx_def** %430, align 8
  %431 = load %struct.propagate_block_info*, %struct.propagate_block_info** %416, align 8
  %432 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %431, i32 0, i32 7
  store i32 0, i32* %432, align 8
  %433 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %413, align 8
  %434 = load %struct.propagate_block_info*, %struct.propagate_block_info** %416, align 8
  %435 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %434, i32 0, i32 5
  store %struct.bitmap_head_def* %433, %struct.bitmap_head_def** %435, align 8
  %436 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %414, align 8
  %437 = load %struct.propagate_block_info*, %struct.propagate_block_info** %416, align 8
  %438 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %437, i32 0, i32 6
  store %struct.bitmap_head_def* %436, %struct.bitmap_head_def** %438, align 8
  %439 = load %struct.propagate_block_info*, %struct.propagate_block_info** %416, align 8
  %440 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %439, i32 0, i32 8
  store i32 0, i32* %440, align 4
  %441 = load i32, i32* %415, align 4
  %442 = load %struct.propagate_block_info*, %struct.propagate_block_info** %416, align 8
  %443 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %442, i32 0, i32 9
  store i32 %441, i32* %443, align 8
  %444 = load i32, i32* %415, align 4
  %_ = sub i32 %444, 66
  %gen = mul i32 %_, 66
  %445 = and i32 %444, 66
  %446 = icmp ne i32 %445, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %76
  %447 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %448 = bitcast %union.tree_node* %447 to %struct.tree_common*
  %449 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %448, i32 0, i32 1
  %450 = load %union.tree_node*, %union.tree_node** %449, align 8
  %451 = bitcast %union.tree_node* %450 to %struct.tree_common*
  %452 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %451, i32 0, i32 2
  %453 = load i32, i32* %452, align 8
  %_2 = sub i32 %453, 255
  %gen3 = mul i32 %_2, 255
  %_4 = shl i32 %453, 255
  %454 = and i32 %453, 255
  %455 = icmp eq i32 %454, 23
  br label %originalBB1

originalBB8alteredBB:                             ; preds = %originalBB8, %148
  %456 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %457 = load %struct.basic_block_def*, %struct.basic_block_def** %14, align 8
  %458 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %457, i32 0, i32 0
  %459 = load %struct.rtx_def*, %struct.rtx_def** %458, align 8
  %460 = icmp ne %struct.rtx_def* %456, %459
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %170
  %461 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %462 = bitcast %struct.rtx_def* %461 to i32*
  %463 = load i32, i32* %462, align 8
  %_13 = shl i32 %463, 65535
  %464 = and i32 %463, 65535
  %465 = icmp eq i32 %464, 32
  br label %originalBB12

originalBB17alteredBB:                            ; preds = %originalBB17, %202
  %466 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %467 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %466, i32 0, i32 1
  %468 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %467, i64 0, i64 3
  %469 = bitcast %union.rtunion_def* %468 to %struct.rtx_def**
  %470 = load %struct.rtx_def*, %struct.rtx_def** %469, align 8
  %471 = bitcast %struct.rtx_def* %470 to i32*
  %472 = load i32, i32* %471, align 8
  %_18 = sub i32 0, %472
  %gen19 = add i32 %_18, 65535
  %473 = and i32 %472, 65535
  %474 = icmp eq i32 %473, 47
  br label %originalBB17

originalBB23alteredBB:                            ; preds = %originalBB23, %244
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %289
  %475 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %476 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %475, i32 0, i32 1
  %477 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %476, i64 0, i64 0
  %478 = bitcast %union.rtunion_def* %477 to %struct.rtx_def**
  %479 = load %struct.rtx_def*, %struct.rtx_def** %478, align 8
  %480 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8
  %481 = icmp eq %struct.rtx_def* %479, %480
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %313
  %482 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %483 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %482, i32 0, i32 1
  %484 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %483, i64 0, i64 0
  %485 = bitcast %union.rtunion_def* %484 to %struct.rtx_def**
  %486 = load %struct.rtx_def*, %struct.rtx_def** %485, align 8
  %487 = bitcast %struct.rtx_def* %486 to i32*
  %488 = load i32, i32* %487, align 8
  %_32 = sub i32 %488, 65535
  %gen33 = mul i32 %_32, 65535
  %_34 = shl i32 %488, 65535
  %_35 = shl i32 %488, 65535
  %489 = and i32 %488, 65535
  %490 = icmp eq i32 %489, 75
  br label %originalBB31

originalBB39alteredBB:                            ; preds = %originalBB39, %339
  %491 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %492 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %491, i32 0, i32 1
  %493 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %492, i64 0, i64 0
  %494 = bitcast %union.rtunion_def* %493 to %struct.rtx_def**
  %495 = load %struct.rtx_def*, %struct.rtx_def** %494, align 8
  %496 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %495, i32 0, i32 1
  %497 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %496, i64 0, i64 0
  %498 = bitcast %union.rtunion_def* %497 to %struct.rtx_def**
  %499 = load %struct.rtx_def*, %struct.rtx_def** %498, align 8
  %500 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8
  %501 = icmp eq %struct.rtx_def* %499, %500
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %393
  %502 = load %struct.propagate_block_info*, %struct.propagate_block_info** %19, align 8
  br label %originalBB43
}

declare noalias i8* @xmalloc(i64) #1

declare noalias i8* @xcalloc(i64, i64) #1

declare %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @canon_rtx(%struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @add_to_mem_set_list(%struct.propagate_block_info*, %struct.rtx_def*) #0 {
  %3 = load i32, i32* @x.55
  %4 = load i32, i32* @y.56
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca %struct.propagate_block_info*, align 8
  %12 = alloca %struct.rtx_def*, align 8
  %13 = alloca %struct.rtx_def*, align 8
  %14 = alloca %struct.rtx_def*, align 8
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %11, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %12, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = lshr i32 %17, 16
  %19 = and i32 %18, 255
  %20 = icmp eq i32 %19, 51
  %21 = load i32, i32* @x.55
  %22 = load i32, i32* @y.56
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %46

; <label>:29:                                     ; preds = %originalBBpart2
  %30 = load i32, i32* @x.55
  %31 = load i32, i32* @y.56
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %29
  %38 = load i32, i32* @x.55
  %39 = load i32, i32* @y.56
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %186

; <label>:46:                                     ; preds = %originalBBpart2
  %47 = load %struct.propagate_block_info*, %struct.propagate_block_info** %11, align 8
  %48 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %47, i32 0, i32 4
  %49 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %13, align 8
  br label %50

; <label>:50:                                     ; preds = %147, %46
  %51 = load i32, i32* @x.55
  %52 = load i32, i32* @y.56
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %50
  %59 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %60 = icmp ne %struct.rtx_def* %59, null
  %61 = load i32, i32* @x.55
  %62 = load i32, i32* @y.56
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %60, label %69, label %153

; <label>:69:                                     ; preds = %originalBBpart224
  %70 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %71, i64 0, i64 0
  %73 = bitcast %union.rtunion_def* %72 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  store %struct.rtx_def* %74, %struct.rtx_def** %14, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %76, i64 0, i64 0
  %78 = bitcast %union.rtunion_def* %77 to %struct.rtx_def**
  %79 = load %struct.rtx_def*, %struct.rtx_def** %78, align 8
  %80 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %81, i64 0, i64 0
  %83 = bitcast %union.rtunion_def* %82 to %struct.rtx_def**
  %84 = load %struct.rtx_def*, %struct.rtx_def** %83, align 8
  %85 = call i32 @rtx_equal_p(%struct.rtx_def* %79, %struct.rtx_def* %84)
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %130

; <label>:87:                                     ; preds = %69
  %88 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %90 = load i32, i32* %89, align 8
  %91 = lshr i32 %90, 16
  %92 = and i32 %91, 255
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %99 = load i32, i32* %98, align 8
  %100 = lshr i32 %99, 16
  %101 = and i32 %100, 255
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = icmp sgt i32 %96, %105
  br i1 %106, label %107, label %113

; <label>:107:                                    ; preds = %87
  %108 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %109 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1
  %111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %110, i64 0, i64 0
  %112 = bitcast %union.rtunion_def* %111 to %struct.rtx_def**
  store %struct.rtx_def* %108, %struct.rtx_def** %112, align 8
  br label %113

; <label>:113:                                    ; preds = %107, %87
  %114 = load i32, i32* @x.55
  %115 = load i32, i32* @y.56
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %113
  %122 = load i32, i32* @x.55
  %123 = load i32, i32* @y.56
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %186

; <label>:130:                                    ; preds = %69
  %131 = load i32, i32* @x.55
  %132 = load i32, i32* @y.56
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %130
  %139 = load i32, i32* @x.55
  %140 = load i32, i32* @y.56
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %147

; <label>:147:                                    ; preds = %originalBBpart232
  %148 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1
  %150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %149, i64 0, i64 1
  %151 = bitcast %union.rtunion_def* %150 to %struct.rtx_def**
  %152 = load %struct.rtx_def*, %struct.rtx_def** %151, align 8
  store %struct.rtx_def* %152, %struct.rtx_def** %13, align 8
  br label %50

; <label>:153:                                    ; preds = %originalBBpart224
  %154 = load i32, i32* @x.55
  %155 = load i32, i32* @y.56
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %153
  %162 = load %struct.propagate_block_info*, %struct.propagate_block_info** %11, align 8
  %163 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %162, i32 0, i32 7
  %164 = load i32, i32* %163, align 8
  %165 = icmp slt i32 %164, 100
  %166 = load i32, i32* @x.55
  %167 = load i32, i32* @y.56
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %165, label %174, label %186

; <label>:174:                                    ; preds = %originalBBpart236
  %175 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %176 = load %struct.propagate_block_info*, %struct.propagate_block_info** %11, align 8
  %177 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %176, i32 0, i32 4
  %178 = load %struct.rtx_def*, %struct.rtx_def** %177, align 8
  %179 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 0, %struct.rtx_def* %175, %struct.rtx_def* %178)
  %180 = load %struct.propagate_block_info*, %struct.propagate_block_info** %11, align 8
  %181 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %180, i32 0, i32 4
  store %struct.rtx_def* %179, %struct.rtx_def** %181, align 8
  %182 = load %struct.propagate_block_info*, %struct.propagate_block_info** %11, align 8
  %183 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %182, i32 0, i32 7
  %184 = load i32, i32* %183, align 8
  %185 = add nsw i32 %184, 1
  store i32 %185, i32* %183, align 8
  br label %186

; <label>:186:                                    ; preds = %174, %originalBBpart236, %originalBBpart228, %originalBBpart220
  %187 = load i32, i32* @x.55
  %188 = load i32, i32* @y.56
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %186
  %195 = load i32, i32* @x.55
  %196 = load i32, i32* @y.56
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %203 = alloca %struct.propagate_block_info*, align 8
  %204 = alloca %struct.rtx_def*, align 8
  %205 = alloca %struct.rtx_def*, align 8
  %206 = alloca %struct.rtx_def*, align 8
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %203, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %204, align 8
  %207 = load %struct.rtx_def*, %struct.rtx_def** %204, align 8
  %208 = bitcast %struct.rtx_def* %207 to i32*
  %209 = load i32, i32* %208, align 8
  %_ = shl i32 %209, 16
  %_1 = shl i32 %209, 16
  %_2 = sub i32 0, %209
  %gen = add i32 %_2, 16
  %_3 = shl i32 %209, 16
  %_4 = shl i32 %209, 16
  %_5 = sub i32 %209, 16
  %gen6 = mul i32 %_5, 16
  %_7 = sub i32 %209, 16
  %gen8 = mul i32 %_7, 16
  %_9 = sub i32 0, %209
  %gen10 = add i32 %_9, 16
  %210 = lshr i32 %209, 16
  %_11 = sub i32 %210, 255
  %gen12 = mul i32 %_11, 255
  %_13 = sub i32 %210, 255
  %gen14 = mul i32 %_13, 255
  %_15 = sub i32 %210, 255
  %gen16 = mul i32 %_15, 255
  %_17 = shl i32 %210, 255
  %211 = and i32 %210, 255
  %212 = icmp eq i32 %211, 51
  br label %originalBB

originalBB18alteredBB:                            ; preds = %originalBB18, %29
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %50
  %213 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %214 = icmp ne %struct.rtx_def* %213, null
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %113
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %130
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %153
  %215 = load %struct.propagate_block_info*, %struct.propagate_block_info** %11, align 8
  %216 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %215, i32 0, i32 7
  %217 = load i32, i32* %216, align 8
  %218 = icmp slt i32 %217, 100
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %186
  br label %originalBB38
}

; Function Attrs: noinline nounwind uwtable
define void @free_propagate_block_info(%struct.propagate_block_info*) #0 {
  %2 = alloca %struct.propagate_block_info*, align 8
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %2, align 8
  %3 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %4 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %3, i32 0, i32 4
  call void @free_EXPR_LIST_list(%struct.rtx_def** %4)
  br label %5

; <label>:5:                                      ; preds = %1
  %6 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %7 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %6, i32 0, i32 2
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %7, align 8
  %9 = icmp ne %struct.bitmap_head_def* %8, null
  br i1 %9, label %10, label %20

; <label>:10:                                     ; preds = %5
  %11 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %12 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %11, i32 0, i32 2
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %12, align 8
  call void @bitmap_clear(%struct.bitmap_head_def* %13)
  %14 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %15 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %14, i32 0, i32 2
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8
  %17 = bitcast %struct.bitmap_head_def* %16 to i8*
  call void @free(i8* %17) #6
  %18 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %19 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %18, i32 0, i32 2
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %19, align 8
  br label %20

; <label>:20:                                     ; preds = %10, %5
  br label %21

; <label>:21:                                     ; preds = %20
  %22 = load i32, i32* @x.57
  %23 = load i32, i32* @y.58
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %21
  %30 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %31 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %30, i32 0, i32 3
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %31, align 8
  %33 = icmp ne %struct.rtx_def** %32, null
  %34 = load i32, i32* @x.57
  %35 = load i32, i32* @y.58
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %33, label %42, label %47

; <label>:42:                                     ; preds = %originalBBpart2
  %43 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %44 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %43, i32 0, i32 3
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %44, align 8
  %46 = bitcast %struct.rtx_def** %45 to i8*
  call void @free(i8* %46) #6
  br label %47

; <label>:47:                                     ; preds = %42, %originalBBpart2
  %48 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %49 = bitcast %struct.propagate_block_info* %48 to i8*
  call void @free(i8* %49) #6
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %21
  %50 = load %struct.propagate_block_info*, %struct.propagate_block_info** %2, align 8
  %51 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %50, i32 0, i32 3
  %52 = load %struct.rtx_def**, %struct.rtx_def*** %51, align 8
  %53 = icmp ne %struct.rtx_def** %52, null
  br label %originalBB
}

declare i32 @bitmap_operation(%struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32) #1

; Function Attrs: noinline nounwind uwtable
define i32 @regno_uninitialized(i32) #0 {
  %2 = load i32, i32* @x.59
  %3 = load i32, i32* @y.60
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  %12 = load i32, i32* @n_basic_blocks, align 4
  %13 = icmp eq i32 %12, 0
  %14 = load i32, i32* @x.59
  %15 = load i32, i32* @y.60
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %74, label %22

; <label>:22:                                     ; preds = %originalBBpart2
  %23 = load i32, i32* @x.59
  %24 = load i32, i32* @y.60
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %22
  %31 = load i32, i32* %11, align 4
  %32 = icmp ult i32 %31, 53
  %33 = load i32, i32* @x.59
  %34 = load i32, i32* @y.60
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %32, label %41, label %75

; <label>:41:                                     ; preds = %originalBBpart24
  %42 = load i32, i32* %11, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [53 x i8], [53 x i8]* @global_regs, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %74, label %48

; <label>:48:                                     ; preds = %41
  %49 = load i32, i32* @x.59
  %50 = load i32, i32* @y.60
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %48
  %57 = load i32, i32* %11, align 4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = icmp ne i32 %61, 0
  %63 = load i32, i32* @x.59
  %64 = load i32, i32* @y.60
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %62, label %74, label %71

; <label>:71:                                     ; preds = %originalBBpart28
  %72 = load i32, i32* %11, align 4
  %73 = call zeroext i1 @ix86_function_arg_regno_p(i32 %72)
  br i1 %73, label %74, label %75

; <label>:74:                                     ; preds = %71, %originalBBpart28, %41, %originalBBpart2
  store i32 0, i32* %10, align 4
  br label %85

; <label>:75:                                     ; preds = %71, %originalBBpart24
  %76 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %77 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %76, i32 0, i32 4
  %78 = bitcast %union.varray_data_tag* %77 to [1 x %struct.basic_block_def*]*
  %79 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %78, i64 0, i64 0
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %79, align 8
  %81 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %80, i32 0, i32 8
  %82 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %81, align 8
  %83 = load i32, i32* %11, align 4
  %84 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %82, i32 %83)
  store i32 %84, i32* %10, align 4
  br label %85

; <label>:85:                                     ; preds = %75, %74
  %86 = load i32, i32* %10, align 4
  ret i32 %86

originalBBalteredBB:                              ; preds = %originalBB, %1
  %87 = alloca i32, align 4
  %88 = alloca i32, align 4
  store i32 %0, i32* %88, align 4
  %89 = load i32, i32* @n_basic_blocks, align 4
  %90 = icmp eq i32 %89, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %91 = load i32, i32* %11, align 4
  %92 = icmp ult i32 %91, 53
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %93 = load i32, i32* %11, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = icmp ne i32 %97, 0
  br label %originalBB6
}

declare zeroext i1 @ix86_function_arg_regno_p(i32) #1

declare i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #1

; Function Attrs: noinline nounwind uwtable
define i32 @regno_clobbered_at_setjmp(i32) #0 {
  %2 = load i32, i32* @x.61
  %3 = load i32, i32* @y.62
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  %12 = load i32, i32* @n_basic_blocks, align 4
  %13 = icmp eq i32 %12, 0
  %14 = load i32, i32* @x.61
  %15 = load i32, i32* @y.62
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %22, label %23

; <label>:22:                                     ; preds = %originalBBpart2
  store i32 0, i32* %10, align 4
  br label %85

; <label>:23:                                     ; preds = %originalBBpart2
  %24 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %25 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %24, i32 0, i32 4
  %26 = bitcast %union.varray_data_tag* %25 to [1 x %struct.reg_info_def*]*
  %27 = load i32, i32* %11, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %26, i64 0, i64 %28
  %30 = load %struct.reg_info_def*, %struct.reg_info_def** %29, align 8
  %31 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %30, i32 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %45, label %34

; <label>:34:                                     ; preds = %23
  %35 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %36 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %35, i32 0, i32 4
  %37 = bitcast %union.varray_data_tag* %36 to [1 x %struct.basic_block_def*]*
  %38 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %37, i64 0, i64 0
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %38, align 8
  %40 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 8
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %40, align 8
  %42 = load i32, i32* %11, align 4
  %43 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %41, i32 %42)
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %66

; <label>:45:                                     ; preds = %34, %23
  %46 = load i32, i32* @x.61
  %47 = load i32, i32* @y.62
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %45
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  %55 = load i32, i32* %11, align 4
  %56 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %54, i32 %55)
  %57 = icmp ne i32 %56, 0
  %58 = load i32, i32* @x.61
  %59 = load i32, i32* @y.62
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %66

; <label>:66:                                     ; preds = %originalBBpart24, %34
  %67 = phi i1 [ false, %34 ], [ %57, %originalBBpart24 ]
  %68 = load i32, i32* @x.61
  %69 = load i32, i32* @y.62
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %66
  %76 = zext i1 %67 to i32
  store i32 %76, i32* %10, align 4
  %77 = load i32, i32* @x.61
  %78 = load i32, i32* @y.62
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %85

; <label>:85:                                     ; preds = %originalBBpart28, %22
  %86 = load i32, i32* %10, align 4
  ret i32 %86

originalBBalteredBB:                              ; preds = %originalBB, %1
  %87 = alloca i32, align 4
  %88 = alloca i32, align 4
  store i32 %0, i32* %88, align 4
  %89 = load i32, i32* @n_basic_blocks, align 4
  %90 = icmp eq i32 %89, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %45
  %91 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @regs_live_at_setjmp, align 8
  %92 = load i32, i32* %11, align 4
  %93 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %91, i32 %92)
  %94 = icmp ne i32 %93, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %66
  %95 = zext i1 %67 to i32
  store i32 %95, i32* %10, align 4
  br label %originalBB6
}

; Function Attrs: noinline nounwind uwtable
define %struct.rtx_def* @find_use_as_address(%struct.rtx_def*, %struct.rtx_def*, i64) #0 {
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca %struct.rtx_def*, align 8
  %13 = alloca i32, align 4
  store %struct.rtx_def* %0, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %6, align 8
  store i64 %2, i64* %7, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 65535
  store i32 %17, i32* %8, align 4
  %18 = load i32, i32* %8, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i64 0, i64 %19
  %21 = load i8*, i8** %20, align 8
  store i8* %21, i8** %9, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %11, align 8
  %22 = load i32, i32* %8, align 4
  %23 = icmp eq i32 %22, 66
  br i1 %23, label %24, label %53

; <label>:24:                                     ; preds = %3
  %25 = load i32, i32* @x.63
  %26 = load i32, i32* @y.64
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %24
  %33 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %34, i64 0, i64 0
  %36 = bitcast %union.rtunion_def* %35 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %36, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %39 = icmp eq %struct.rtx_def* %37, %38
  %40 = load i32, i32* @x.63
  %41 = load i32, i32* @y.64
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %39, label %48, label %53

; <label>:48:                                     ; preds = %originalBBpart2
  %49 = load i64, i64* %7, align 8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %53

; <label>:51:                                     ; preds = %48
  %52 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* %52, %struct.rtx_def** %4, align 8
  br label %390

; <label>:53:                                     ; preds = %48, %originalBBpart2, %3
  %54 = load i32, i32* @x.63
  %55 = load i32, i32* @y.64
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %53
  %62 = load i32, i32* %8, align 4
  %63 = icmp eq i32 %62, 66
  %64 = load i32, i32* @x.63
  %65 = load i32, i32* @y.64
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %63, label %72, label %174

; <label>:72:                                     ; preds = %originalBBpart24
  %73 = load i32, i32* @x.63
  %74 = load i32, i32* @y.64
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %72
  %81 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %82, i64 0, i64 0
  %84 = bitcast %union.rtunion_def* %83 to %struct.rtx_def**
  %85 = load %struct.rtx_def*, %struct.rtx_def** %84, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %87 = load i32, i32* %86, align 8
  %88 = and i32 %87, 65535
  %89 = icmp eq i32 %88, 75
  %90 = load i32, i32* @x.63
  %91 = load i32, i32* @y.64
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart29, label %originalBB6alteredBB

originalBBpart29:                                 ; preds = %originalBB6
  br i1 %89, label %98, label %174

; <label>:98:                                     ; preds = %originalBBpart29
  %99 = load i32, i32* @x.63
  %100 = load i32, i32* @y.64
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %originalBB11alteredBB, %98
  %107 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %108, i64 0, i64 0
  %110 = bitcast %union.rtunion_def* %109 to %struct.rtx_def**
  %111 = load %struct.rtx_def*, %struct.rtx_def** %110, align 8
  %112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1
  %113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %112, i64 0, i64 0
  %114 = bitcast %union.rtunion_def* %113 to %struct.rtx_def**
  %115 = load %struct.rtx_def*, %struct.rtx_def** %114, align 8
  %116 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %117 = icmp eq %struct.rtx_def* %115, %116
  %118 = load i32, i32* @x.63
  %119 = load i32, i32* @y.64
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br i1 %117, label %126, label %174

; <label>:126:                                    ; preds = %originalBBpart213
  %127 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %128, i64 0, i64 0
  %130 = bitcast %union.rtunion_def* %129 to %struct.rtx_def**
  %131 = load %struct.rtx_def*, %struct.rtx_def** %130, align 8
  %132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1
  %133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %132, i64 0, i64 1
  %134 = bitcast %union.rtunion_def* %133 to %struct.rtx_def**
  %135 = load %struct.rtx_def*, %struct.rtx_def** %134, align 8
  %136 = bitcast %struct.rtx_def* %135 to i32*
  %137 = load i32, i32* %136, align 8
  %138 = and i32 %137, 65535
  %139 = icmp eq i32 %138, 54
  br i1 %139, label %140, label %174

; <label>:140:                                    ; preds = %126
  %141 = load i32, i32* @x.63
  %142 = load i32, i32* @y.64
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %140
  %149 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %150, i64 0, i64 0
  %152 = bitcast %union.rtunion_def* %151 to %struct.rtx_def**
  %153 = load %struct.rtx_def*, %struct.rtx_def** %152, align 8
  %154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %153, i32 0, i32 1
  %155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %154, i64 0, i64 1
  %156 = bitcast %union.rtunion_def* %155 to %struct.rtx_def**
  %157 = load %struct.rtx_def*, %struct.rtx_def** %156, align 8
  %158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %157, i32 0, i32 1
  %159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %158, i64 0, i64 0
  %160 = bitcast %union.rtunion_def* %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = load i64, i64* %7, align 8
  %163 = icmp eq i64 %161, %162
  %164 = load i32, i32* @x.63
  %165 = load i32, i32* @y.64
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %163, label %172, label %174

; <label>:172:                                    ; preds = %originalBBpart217
  %173 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* %173, %struct.rtx_def** %4, align 8
  br label %390

; <label>:174:                                    ; preds = %originalBBpart217, %126, %originalBBpart213, %originalBBpart29, %originalBBpart24
  %175 = load i32, i32* %8, align 4
  %176 = icmp eq i32 %175, 132
  br i1 %176, label %196, label %177

; <label>:177:                                    ; preds = %174
  %178 = load i32, i32* @x.63
  %179 = load i32, i32* @y.64
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %177
  %186 = load i32, i32* %8, align 4
  %187 = icmp eq i32 %186, 133
  %188 = load i32, i32* @x.63
  %189 = load i32, i32* @y.64
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %187, label %196, label %207

; <label>:196:                                    ; preds = %originalBBpart221, %174
  %197 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %198 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %197, i32 0, i32 1
  %199 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %198, i64 0, i64 0
  %200 = bitcast %union.rtunion_def* %199 to %struct.rtx_def**
  %201 = load %struct.rtx_def*, %struct.rtx_def** %200, align 8
  %202 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %203 = call %struct.rtx_def* @find_use_as_address(%struct.rtx_def* %201, %struct.rtx_def* %202, i64 0)
  %204 = icmp ne %struct.rtx_def* %203, null
  br i1 %204, label %205, label %206

; <label>:205:                                    ; preds = %196
  store %struct.rtx_def* inttoptr (i64 1 to %struct.rtx_def*), %struct.rtx_def** %4, align 8
  br label %390

; <label>:206:                                    ; preds = %196
  br label %207

; <label>:207:                                    ; preds = %206, %originalBBpart221
  %208 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %209 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %210 = icmp eq %struct.rtx_def* %208, %209
  br i1 %210, label %211, label %212

; <label>:211:                                    ; preds = %207
  store %struct.rtx_def* inttoptr (i64 1 to %struct.rtx_def*), %struct.rtx_def** %4, align 8
  br label %390

; <label>:212:                                    ; preds = %207
  %213 = load i32, i32* %8, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i64 0, i64 %214
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = sub nsw i32 %217, 1
  store i32 %218, i32* %10, align 4
  br label %219

; <label>:219:                                    ; preds = %385, %212
  %220 = load i32, i32* %10, align 4
  %221 = icmp sge i32 %220, 0
  br i1 %221, label %222, label %388

; <label>:222:                                    ; preds = %219
  %223 = load i8*, i8** %9, align 8
  %224 = load i32, i32* %10, align 4
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds i8, i8* %223, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = sext i8 %227 to i32
  %229 = icmp eq i32 %228, 101
  br i1 %229, label %230, label %267

; <label>:230:                                    ; preds = %222
  %231 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %232 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %231, i32 0, i32 1
  %233 = load i32, i32* %10, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %232, i64 0, i64 %234
  %236 = bitcast %union.rtunion_def* %235 to %struct.rtx_def**
  %237 = load %struct.rtx_def*, %struct.rtx_def** %236, align 8
  %238 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %239 = load i64, i64* %7, align 8
  %240 = call %struct.rtx_def* @find_use_as_address(%struct.rtx_def* %237, %struct.rtx_def* %238, i64 %239)
  store %struct.rtx_def* %240, %struct.rtx_def** %12, align 8
  %241 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %242 = icmp eq %struct.rtx_def* %241, null
  br i1 %242, label %243, label %245

; <label>:243:                                    ; preds = %230
  %244 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  store %struct.rtx_def* %244, %struct.rtx_def** %11, align 8
  br label %250

; <label>:245:                                    ; preds = %230
  %246 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %247 = icmp ne %struct.rtx_def* %246, null
  br i1 %247, label %248, label %249

; <label>:248:                                    ; preds = %245
  store %struct.rtx_def* inttoptr (i64 1 to %struct.rtx_def*), %struct.rtx_def** %4, align 8
  br label %390

; <label>:249:                                    ; preds = %245
  br label %250

; <label>:250:                                    ; preds = %249, %243
  %251 = load i32, i32* @x.63
  %252 = load i32, i32* @y.64
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %250
  %259 = load i32, i32* @x.63
  %260 = load i32, i32* @y.64
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %368

; <label>:267:                                    ; preds = %222
  %268 = load i8*, i8** %9, align 8
  %269 = load i32, i32* %10, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %268, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = sext i8 %272 to i32
  %274 = icmp eq i32 %273, 69
  br i1 %274, label %275, label %367

; <label>:275:                                    ; preds = %267
  %276 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %277 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %276, i32 0, i32 1
  %278 = load i32, i32* %10, align 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %277, i64 0, i64 %279
  %281 = bitcast %union.rtunion_def* %280 to %struct.rtvec_def**
  %282 = load %struct.rtvec_def*, %struct.rtvec_def** %281, align 8
  %283 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %282, i32 0, i32 0
  %284 = load i32, i32* %283, align 8
  %285 = sub nsw i32 %284, 1
  store i32 %285, i32* %13, align 4
  br label %286

; <label>:286:                                    ; preds = %347, %275
  %287 = load i32, i32* %13, align 4
  %288 = icmp sge i32 %287, 0
  br i1 %288, label %289, label %350

; <label>:289:                                    ; preds = %286
  %290 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %291 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %290, i32 0, i32 1
  %292 = load i32, i32* %10, align 4
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %291, i64 0, i64 %293
  %295 = bitcast %union.rtunion_def* %294 to %struct.rtvec_def**
  %296 = load %struct.rtvec_def*, %struct.rtvec_def** %295, align 8
  %297 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %296, i32 0, i32 1
  %298 = load i32, i32* %13, align 4
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %297, i64 0, i64 %299
  %301 = load %struct.rtx_def*, %struct.rtx_def** %300, align 8
  %302 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %303 = load i64, i64* %7, align 8
  %304 = call %struct.rtx_def* @find_use_as_address(%struct.rtx_def* %301, %struct.rtx_def* %302, i64 %303)
  store %struct.rtx_def* %304, %struct.rtx_def** %12, align 8
  %305 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %306 = icmp eq %struct.rtx_def* %305, null
  br i1 %306, label %307, label %309

; <label>:307:                                    ; preds = %289
  %308 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  store %struct.rtx_def* %308, %struct.rtx_def** %11, align 8
  br label %346

; <label>:309:                                    ; preds = %289
  %310 = load i32, i32* @x.63
  %311 = load i32, i32* @y.64
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %originalBB27alteredBB, %309
  %318 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %319 = icmp ne %struct.rtx_def* %318, null
  %320 = load i32, i32* @x.63
  %321 = load i32, i32* @y.64
  %322 = sub i32 %320, 1
  %323 = mul i32 %320, %322
  %324 = urem i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %325, %326
  br i1 %327, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %319, label %328, label %329

; <label>:328:                                    ; preds = %originalBBpart229
  store %struct.rtx_def* inttoptr (i64 1 to %struct.rtx_def*), %struct.rtx_def** %4, align 8
  br label %390

; <label>:329:                                    ; preds = %originalBBpart229
  %330 = load i32, i32* @x.63
  %331 = load i32, i32* @y.64
  %332 = sub i32 %330, 1
  %333 = mul i32 %330, %332
  %334 = urem i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %335, %336
  br i1 %337, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %originalBB31alteredBB, %329
  %338 = load i32, i32* @x.63
  %339 = load i32, i32* @y.64
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %346

; <label>:346:                                    ; preds = %originalBBpart233, %307
  br label %347

; <label>:347:                                    ; preds = %346
  %348 = load i32, i32* %13, align 4
  %349 = add nsw i32 %348, -1
  store i32 %349, i32* %13, align 4
  br label %286

; <label>:350:                                    ; preds = %286
  %351 = load i32, i32* @x.63
  %352 = load i32, i32* @y.64
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %originalBB35alteredBB, %350
  %359 = load i32, i32* @x.63
  %360 = load i32, i32* @y.64
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %367

; <label>:367:                                    ; preds = %originalBBpart237, %267
  br label %368

; <label>:368:                                    ; preds = %367, %originalBBpart225
  %369 = load i32, i32* @x.63
  %370 = load i32, i32* @y.64
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %368
  %377 = load i32, i32* @x.63
  %378 = load i32, i32* @y.64
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %385

; <label>:385:                                    ; preds = %originalBBpart241
  %386 = load i32, i32* %10, align 4
  %387 = add nsw i32 %386, -1
  store i32 %387, i32* %10, align 4
  br label %219

; <label>:388:                                    ; preds = %219
  %389 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  store %struct.rtx_def* %389, %struct.rtx_def** %4, align 8
  br label %390

; <label>:390:                                    ; preds = %388, %328, %248, %211, %205, %172, %51
  %391 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  ret %struct.rtx_def* %391

originalBBalteredBB:                              ; preds = %originalBB, %24
  %392 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %393 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %392, i32 0, i32 1
  %394 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %393, i64 0, i64 0
  %395 = bitcast %union.rtunion_def* %394 to %struct.rtx_def**
  %396 = load %struct.rtx_def*, %struct.rtx_def** %395, align 8
  %397 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %398 = icmp eq %struct.rtx_def* %396, %397
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %53
  %399 = load i32, i32* %8, align 4
  %400 = icmp eq i32 %399, 66
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %72
  %401 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %402 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %401, i32 0, i32 1
  %403 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %402, i64 0, i64 0
  %404 = bitcast %union.rtunion_def* %403 to %struct.rtx_def**
  %405 = load %struct.rtx_def*, %struct.rtx_def** %404, align 8
  %406 = bitcast %struct.rtx_def* %405 to i32*
  %407 = load i32, i32* %406, align 8
  %_ = sub i32 0, %407
  %gen = add i32 %_, 65535
  %_7 = shl i32 %407, 65535
  %408 = and i32 %407, 65535
  %409 = icmp eq i32 %408, 75
  br label %originalBB6

originalBB11alteredBB:                            ; preds = %originalBB11, %98
  %410 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %411 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %410, i32 0, i32 1
  %412 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %411, i64 0, i64 0
  %413 = bitcast %union.rtunion_def* %412 to %struct.rtx_def**
  %414 = load %struct.rtx_def*, %struct.rtx_def** %413, align 8
  %415 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %414, i32 0, i32 1
  %416 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %415, i64 0, i64 0
  %417 = bitcast %union.rtunion_def* %416 to %struct.rtx_def**
  %418 = load %struct.rtx_def*, %struct.rtx_def** %417, align 8
  %419 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %420 = icmp eq %struct.rtx_def* %418, %419
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %140
  %421 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %422 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %421, i32 0, i32 1
  %423 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %422, i64 0, i64 0
  %424 = bitcast %union.rtunion_def* %423 to %struct.rtx_def**
  %425 = load %struct.rtx_def*, %struct.rtx_def** %424, align 8
  %426 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %425, i32 0, i32 1
  %427 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %426, i64 0, i64 1
  %428 = bitcast %union.rtunion_def* %427 to %struct.rtx_def**
  %429 = load %struct.rtx_def*, %struct.rtx_def** %428, align 8
  %430 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %429, i32 0, i32 1
  %431 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %430, i64 0, i64 0
  %432 = bitcast %union.rtunion_def* %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = load i64, i64* %7, align 8
  %435 = icmp eq i64 %433, %434
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %177
  %436 = load i32, i32* %8, align 4
  %437 = icmp eq i32 %436, 133
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %250
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %309
  %438 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %439 = icmp ne %struct.rtx_def* %438, null
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %329
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %350
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %368
  br label %originalBB39
}

; Function Attrs: noinline nounwind uwtable
define void @dump_regset(%struct.bitmap_head_def*, %struct._IO_FILE*) #0 {
  %3 = alloca %struct.bitmap_head_def*, align 8
  %4 = alloca %struct._IO_FILE*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.bitmap_element_def*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store %struct.bitmap_head_def* %0, %struct.bitmap_head_def** %3, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %4, align 8
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %13 = icmp eq %struct.bitmap_head_def* %12, null
  br i1 %13, label %14, label %33

; <label>:14:                                     ; preds = %2
  %15 = load i32, i32* @x.65
  %16 = load i32, i32* @y.66
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %14
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %24 = call i32 @fputs(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), %struct._IO_FILE* %23)
  %25 = load i32, i32* @x.65
  %26 = load i32, i32* @y.66
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %266

; <label>:33:                                     ; preds = %2
  %34 = load i32, i32* @x.65
  %35 = load i32, i32* @y.66
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %33
  %42 = load i32, i32* @x.65
  %43 = load i32, i32* @y.66
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50

; <label>:50:                                     ; preds = %originalBBpart24
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, align 8
  %52 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %51, i32 0, i32 0
  %53 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %52, align 8
  store %struct.bitmap_element_def* %53, %struct.bitmap_element_def** %6, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %54

; <label>:54:                                     ; preds = %65, %50
  %55 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %56 = icmp ne %struct.bitmap_element_def* %55, null
  br i1 %56, label %57, label %63

; <label>:57:                                     ; preds = %54
  %58 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %59 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %58, i32 0, i32 2
  %60 = load i32, i32* %59, align 8
  %61 = load i32, i32* %7, align 4
  %62 = icmp ult i32 %60, %61
  br label %63

; <label>:63:                                     ; preds = %57, %54
  %64 = phi i1 [ false, %54 ], [ %62, %57 ]
  br i1 %64, label %65, label %69

; <label>:65:                                     ; preds = %63
  %66 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %67 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %66, i32 0, i32 0
  %68 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %67, align 8
  store %struct.bitmap_element_def* %68, %struct.bitmap_element_def** %6, align 8
  br label %54

; <label>:69:                                     ; preds = %63
  %70 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %71 = icmp ne %struct.bitmap_element_def* %70, null
  br i1 %71, label %72, label %111

; <label>:72:                                     ; preds = %69
  %73 = load i32, i32* @x.65
  %74 = load i32, i32* @y.66
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %72
  %81 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %82 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %81, i32 0, i32 2
  %83 = load i32, i32* %82, align 8
  %84 = load i32, i32* %7, align 4
  %85 = icmp ne i32 %83, %84
  %86 = load i32, i32* @x.65
  %87 = load i32, i32* @y.66
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %85, label %94, label %111

; <label>:94:                                     ; preds = %originalBBpart28
  %95 = load i32, i32* @x.65
  %96 = load i32, i32* @y.66
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %94
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %103 = load i32, i32* @x.65
  %104 = load i32, i32* @y.66
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %111

; <label>:111:                                    ; preds = %originalBBpart212, %originalBBpart28, %69
  %112 = load i32, i32* @x.65
  %113 = load i32, i32* @y.66
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %111
  %120 = load i32, i32* @x.65
  %121 = load i32, i32* @y.66
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %128

; <label>:128:                                    ; preds = %261, %originalBBpart216
  %129 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %130 = icmp ne %struct.bitmap_element_def* %129, null
  br i1 %130, label %131, label %265

; <label>:131:                                    ; preds = %128
  %132 = load i32, i32* @x.65
  %133 = load i32, i32* @y.66
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %131
  %140 = load i32, i32* @x.65
  %141 = load i32, i32* @y.66
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %148

; <label>:148:                                    ; preds = %241, %originalBBpart220
  %149 = load i32, i32* %9, align 4
  %150 = icmp ult i32 %149, 2
  br i1 %150, label %151, label %244

; <label>:151:                                    ; preds = %148
  %152 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %153 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %152, i32 0, i32 3
  %154 = load i32, i32* %9, align 4
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [2 x i64], [2 x i64]* %153, i64 0, i64 %155
  %157 = load i64, i64* %156, align 8
  store i64 %157, i64* %10, align 8
  %158 = load i64, i64* %10, align 8
  %159 = icmp ne i64 %158, 0
  br i1 %159, label %160, label %240

; <label>:160:                                    ; preds = %151
  br label %161

; <label>:161:                                    ; preds = %originalBBpart231, %160
  %162 = load i32, i32* %8, align 4
  %163 = icmp ult i32 %162, 64
  br i1 %163, label %164, label %239

; <label>:164:                                    ; preds = %161
  %165 = load i32, i32* %8, align 4
  %166 = zext i32 %165 to i64
  %167 = shl i64 1, %166
  store i64 %167, i64* %11, align 8
  %168 = load i64, i64* %10, align 8
  %169 = load i64, i64* %11, align 8
  %170 = and i64 %168, %169
  %171 = icmp ne i64 %170, 0
  br i1 %171, label %172, label %203

; <label>:172:                                    ; preds = %164
  %173 = load i64, i64* %11, align 8
  %174 = xor i64 %173, -1
  %175 = load i64, i64* %10, align 8
  %176 = and i64 %175, %174
  store i64 %176, i64* %10, align 8
  %177 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %178 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %177, i32 0, i32 2
  %179 = load i32, i32* %178, align 8
  %180 = mul i32 %179, 128
  %181 = load i32, i32* %9, align 4
  %182 = mul i32 %181, 64
  %183 = add i32 %180, %182
  %184 = load i32, i32* %8, align 4
  %185 = add i32 %183, %184
  store i32 %185, i32* %5, align 4
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %187 = load i32, i32* %5, align 4
  %188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %186, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %187)
  %189 = load i32, i32* %5, align 4
  %190 = icmp slt i32 %189, 53
  br i1 %190, label %191, label %198

; <label>:191:                                    ; preds = %172
  %192 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %193 = load i32, i32* %5, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds [53 x i8*], [53 x i8*]* @reg_names, i64 0, i64 %194
  %196 = load i8*, i8** %195, align 8
  %197 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %192, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* %196)
  br label %198

; <label>:198:                                    ; preds = %191, %172
  %199 = load i64, i64* %10, align 8
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %202

; <label>:201:                                    ; preds = %198
  br label %239

; <label>:202:                                    ; preds = %198
  br label %203

; <label>:203:                                    ; preds = %202, %164
  %204 = load i32, i32* @x.65
  %205 = load i32, i32* @y.66
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %203
  %212 = load i32, i32* @x.65
  %213 = load i32, i32* @y.66
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %220

; <label>:220:                                    ; preds = %originalBBpart224
  %221 = load i32, i32* @x.65
  %222 = load i32, i32* @y.66
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %220
  %229 = load i32, i32* %8, align 4
  %230 = add i32 %229, 1
  store i32 %230, i32* %8, align 4
  %231 = load i32, i32* @x.65
  %232 = load i32, i32* @y.66
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart231, label %originalBB26alteredBB

originalBBpart231:                                ; preds = %originalBB26
  br label %161

; <label>:239:                                    ; preds = %201, %161
  br label %240

; <label>:240:                                    ; preds = %239, %151
  store i32 0, i32* %8, align 4
  br label %241

; <label>:241:                                    ; preds = %240
  %242 = load i32, i32* %9, align 4
  %243 = add i32 %242, 1
  store i32 %243, i32* %9, align 4
  br label %148

; <label>:244:                                    ; preds = %148
  %245 = load i32, i32* @x.65
  %246 = load i32, i32* @y.66
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %244
  store i32 0, i32* %9, align 4
  %253 = load i32, i32* @x.65
  %254 = load i32, i32* @y.66
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %261

; <label>:261:                                    ; preds = %originalBBpart235
  %262 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %263 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %262, i32 0, i32 0
  %264 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %263, align 8
  store %struct.bitmap_element_def* %264, %struct.bitmap_element_def** %6, align 8
  br label %128

; <label>:265:                                    ; preds = %128
  br label %266

; <label>:266:                                    ; preds = %265, %originalBBpart2
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %14
  %267 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %268 = call i32 @fputs(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), %struct._IO_FILE* %267)
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %72
  %269 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %270 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %269, i32 0, i32 2
  %271 = load i32, i32* %270, align 8
  %272 = load i32, i32* %7, align 4
  %273 = icmp ne i32 %271, %272
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %94
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %111
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %131
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %203
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %220
  %274 = load i32, i32* %8, align 4
  %_ = shl i32 %274, 1
  %_27 = shl i32 %274, 1
  %_28 = shl i32 %274, 1
  %275 = add i32 %274, 1
  store i32 %275, i32* %8, align 4
  br label %originalBB26

originalBB33alteredBB:                            ; preds = %originalBB33, %244
  store i32 0, i32* %9, align 4
  br label %originalBB33
}

declare i32 @fputs(i8*, %struct._IO_FILE*) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define void @debug_regset(%struct.bitmap_head_def*) #0 {
  %2 = alloca %struct.bitmap_head_def*, align 8
  store %struct.bitmap_head_def* %0, %struct.bitmap_head_def** %2, align 8
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %2, align 8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @dump_regset(%struct.bitmap_head_def* %3, %struct._IO_FILE* %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %6 = call i32 @putc(i32 10, %struct._IO_FILE* %5)
  ret void
}

declare i32 @putc(i32, %struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define void @recompute_reg_usage(%struct.rtx_def*, i32) #0 {
  %3 = load i32, i32* @x.69
  %4 = load i32, i32* @y.70
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca i32, align 4
  store %struct.rtx_def* %0, %struct.rtx_def** %11, align 8
  store i32 %1, i32* %12, align 4
  call void @allocate_reg_life_data()
  call void @update_life_info(%struct.simple_bitmap_def* null, i32 0, i32 4)
  %13 = load i32, i32* @x.69
  %14 = load i32, i32* @y.70
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %21 = alloca %struct.rtx_def*, align 8
  %22 = alloca i32, align 4
  store %struct.rtx_def* %0, %struct.rtx_def** %21, align 8
  store i32 %1, i32* %22, align 4
  call void @allocate_reg_life_data()
  call void @update_life_info(%struct.simple_bitmap_def* null, i32 0, i32 4)
  br label %originalBB
}

declare void @free_EXPR_LIST_node(%struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define void @reg_set_to_hard_reg_set(i64*, %struct.bitmap_head_def*) #0 {
  %3 = alloca i64*, align 8
  %4 = alloca %struct.bitmap_head_def*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.bitmap_element_def*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store i64* %0, i64** %3, align 8
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %4, align 8
  br label %12

; <label>:12:                                     ; preds = %2
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %12
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %4, align 8
  %22 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %21, i32 0, i32 0
  %23 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %22, align 8
  store %struct.bitmap_element_def* %23, %struct.bitmap_element_def** %6, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %24 = load i32, i32* @x.71
  %25 = load i32, i32* @y.72
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %32

; <label>:32:                                     ; preds = %43, %originalBBpart2
  %33 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %34 = icmp ne %struct.bitmap_element_def* %33, null
  br i1 %34, label %35, label %41

; <label>:35:                                     ; preds = %32
  %36 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %37 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %36, i32 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = load i32, i32* %7, align 4
  %40 = icmp ult i32 %38, %39
  br label %41

; <label>:41:                                     ; preds = %35, %32
  %42 = phi i1 [ false, %32 ], [ %40, %35 ]
  br i1 %42, label %43, label %47

; <label>:43:                                     ; preds = %41
  %44 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %45 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %44, i32 0, i32 0
  %46 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %45, align 8
  store %struct.bitmap_element_def* %46, %struct.bitmap_element_def** %6, align 8
  br label %32

; <label>:47:                                     ; preds = %41
  %48 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %49 = icmp ne %struct.bitmap_element_def* %48, null
  br i1 %49, label %50, label %57

; <label>:50:                                     ; preds = %47
  %51 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %52 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %51, i32 0, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = load i32, i32* %7, align 4
  %55 = icmp ne i32 %53, %54
  br i1 %55, label %56, label %57

; <label>:56:                                     ; preds = %50
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %57

; <label>:57:                                     ; preds = %56, %50, %47
  br label %58

; <label>:58:                                     ; preds = %220, %57
  %59 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %60 = icmp ne %struct.bitmap_element_def* %59, null
  br i1 %60, label %61, label %224

; <label>:61:                                     ; preds = %58
  %62 = load i32, i32* @x.71
  %63 = load i32, i32* @y.72
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %61
  %70 = load i32, i32* @x.71
  %71 = load i32, i32* @y.72
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %78

; <label>:78:                                     ; preds = %200, %originalBBpart24
  %79 = load i32, i32* %9, align 4
  %80 = icmp ult i32 %79, 2
  br i1 %80, label %81, label %203

; <label>:81:                                     ; preds = %78
  %82 = load i32, i32* @x.71
  %83 = load i32, i32* @y.72
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %81
  %90 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %91 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %90, i32 0, i32 3
  %92 = load i32, i32* %9, align 4
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds [2 x i64], [2 x i64]* %91, i64 0, i64 %93
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %10, align 8
  %96 = load i64, i64* %10, align 8
  %97 = icmp ne i64 %96, 0
  %98 = load i32, i32* @x.71
  %99 = load i32, i32* @y.72
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %97, label %106, label %183

; <label>:106:                                    ; preds = %originalBBpart28
  br label %107

; <label>:107:                                    ; preds = %179, %106
  %108 = load i32, i32* @x.71
  %109 = load i32, i32* @y.72
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %107
  %116 = load i32, i32* %8, align 4
  %117 = icmp ult i32 %116, 64
  %118 = load i32, i32* @x.71
  %119 = load i32, i32* @y.72
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %117, label %126, label %182

; <label>:126:                                    ; preds = %originalBBpart212
  %127 = load i32, i32* %8, align 4
  %128 = zext i32 %127 to i64
  %129 = shl i64 1, %128
  store i64 %129, i64* %11, align 8
  %130 = load i64, i64* %10, align 8
  %131 = load i64, i64* %11, align 8
  %132 = and i64 %130, %131
  %133 = icmp ne i64 %132, 0
  br i1 %133, label %134, label %178

; <label>:134:                                    ; preds = %126
  %135 = load i64, i64* %11, align 8
  %136 = xor i64 %135, -1
  %137 = load i64, i64* %10, align 8
  %138 = and i64 %137, %136
  store i64 %138, i64* %10, align 8
  %139 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %140 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %139, i32 0, i32 2
  %141 = load i32, i32* %140, align 8
  %142 = mul i32 %141, 128
  %143 = load i32, i32* %9, align 4
  %144 = mul i32 %143, 64
  %145 = add i32 %142, %144
  %146 = load i32, i32* %8, align 4
  %147 = add i32 %145, %146
  store i32 %147, i32* %5, align 4
  %148 = load i32, i32* %5, align 4
  %149 = icmp sge i32 %148, 53
  br i1 %149, label %150, label %167

; <label>:150:                                    ; preds = %134
  %151 = load i32, i32* @x.71
  %152 = load i32, i32* @y.72
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %150
  %159 = load i32, i32* @x.71
  %160 = load i32, i32* @y.72
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %225

; <label>:167:                                    ; preds = %134
  %168 = load i32, i32* %5, align 4
  %169 = zext i32 %168 to i64
  %170 = shl i64 1, %169
  %171 = load i64*, i64** %3, align 8
  %172 = load i64, i64* %171, align 8
  %173 = or i64 %172, %170
  store i64 %173, i64* %171, align 8
  %174 = load i64, i64* %10, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %177

; <label>:176:                                    ; preds = %167
  br label %182

; <label>:177:                                    ; preds = %167
  br label %178

; <label>:178:                                    ; preds = %177, %126
  br label %179

; <label>:179:                                    ; preds = %178
  %180 = load i32, i32* %8, align 4
  %181 = add i32 %180, 1
  store i32 %181, i32* %8, align 4
  br label %107

; <label>:182:                                    ; preds = %176, %originalBBpart212
  br label %183

; <label>:183:                                    ; preds = %182, %originalBBpart28
  %184 = load i32, i32* @x.71
  %185 = load i32, i32* @y.72
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %183
  store i32 0, i32* %8, align 4
  %192 = load i32, i32* @x.71
  %193 = load i32, i32* @y.72
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %200

; <label>:200:                                    ; preds = %originalBBpart220
  %201 = load i32, i32* %9, align 4
  %202 = add i32 %201, 1
  store i32 %202, i32* %9, align 4
  br label %78

; <label>:203:                                    ; preds = %78
  %204 = load i32, i32* @x.71
  %205 = load i32, i32* @y.72
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %203
  store i32 0, i32* %9, align 4
  %212 = load i32, i32* @x.71
  %213 = load i32, i32* @y.72
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %220

; <label>:220:                                    ; preds = %originalBBpart224
  %221 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %222 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %221, i32 0, i32 0
  %223 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %222, align 8
  store %struct.bitmap_element_def* %223, %struct.bitmap_element_def** %6, align 8
  br label %58

; <label>:224:                                    ; preds = %58
  br label %225

; <label>:225:                                    ; preds = %224, %originalBBpart216
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %12
  %226 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %4, align 8
  %227 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %226, i32 0, i32 0
  %228 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %227, align 8
  store %struct.bitmap_element_def* %228, %struct.bitmap_element_def** %6, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %61
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %81
  %229 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %6, align 8
  %230 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %229, i32 0, i32 3
  %231 = load i32, i32* %9, align 4
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds [2 x i64], [2 x i64]* %230, i64 0, i64 %232
  %234 = load i64, i64* %233, align 8
  store i64 %234, i64* %10, align 8
  %235 = load i64, i64* %10, align 8
  %236 = icmp ne i64 %235, 0
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %107
  %237 = load i32, i32* %8, align 4
  %238 = icmp ult i32 %237, 64
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %150
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %183
  store i32 0, i32* %8, align 4
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %203
  store i32 0, i32* %9, align 4
  br label %originalBB22
}

declare i32 @bitmap_equal_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #1

declare void @debug_bitmap_file(%struct._IO_FILE*, %struct.bitmap_head_def*) #1

declare void @dump_bb(%struct.basic_block_def*, %struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @verify_wide_reg(i32, %struct.basic_block_def*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.basic_block_def*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store %struct.basic_block_def* %1, %struct.basic_block_def** %4, align 8
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %5, align 8
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %6, align 8
  br label %14

; <label>:14:                                     ; preds = %92, %2
  %15 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, 65535
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp eq i32 %22, 105
  br i1 %23, label %24, label %87

; <label>:24:                                     ; preds = %14
  %25 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %26, i64 0, i64 3
  %28 = bitcast %union.rtunion_def* %27 to %struct.rtx_def**
  %29 = bitcast i32* %3 to i8*
  %30 = call i32 @for_each_rtx(%struct.rtx_def** %28, i32 (%struct.rtx_def**, i8*)* @verify_wide_reg_1, i8* %29)
  store i32 %30, i32* %7, align 4
  %31 = load i32, i32* %7, align 4
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %50

; <label>:33:                                     ; preds = %24
  %34 = load i32, i32* @x.73
  %35 = load i32, i32* @y.74
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %33
  %42 = load i32, i32* @x.73
  %43 = load i32, i32* @y.74
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void

; <label>:50:                                     ; preds = %24
  %51 = load i32, i32* %7, align 4
  %52 = icmp eq i32 %51, 2
  br i1 %52, label %53, label %70

; <label>:53:                                     ; preds = %50
  %54 = load i32, i32* @x.73
  %55 = load i32, i32* @y.74
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %53
  %62 = load i32, i32* @x.73
  %63 = load i32, i32* @y.74
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %98

; <label>:70:                                     ; preds = %50
  %71 = load i32, i32* @x.73
  %72 = load i32, i32* @y.74
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %70
  %79 = load i32, i32* @x.73
  %80 = load i32, i32* @y.74
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %87

; <label>:87:                                     ; preds = %originalBBpart28, %14
  %88 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %90 = icmp eq %struct.rtx_def* %88, %89
  br i1 %90, label %91, label %92

; <label>:91:                                     ; preds = %87
  br label %98

; <label>:92:                                     ; preds = %87
  %93 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %94, i64 0, i64 2
  %96 = bitcast %union.rtunion_def* %95 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %96, align 8
  store %struct.rtx_def* %97, %struct.rtx_def** %5, align 8
  br label %14

; <label>:98:                                     ; preds = %91, %originalBBpart24
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %100 = icmp ne %struct._IO_FILE* %99, null
  br i1 %100, label %101, label %107

; <label>:101:                                    ; preds = %98
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  %103 = load i32, i32* %3, align 4
  %104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %102, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i32 0, i32 0), i32 %103)
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @rtl_dump_file, align 8
  call void @dump_bb(%struct.basic_block_def* %105, %struct._IO_FILE* %106)
  br label %107

; <label>:107:                                    ; preds = %101, %98
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 557, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.verify_wide_reg, i32 0, i32 0)) #5
  unreachable

originalBBalteredBB:                              ; preds = %originalBB, %33
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %53
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %70
  br label %originalBB6
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @verify_wide_reg_1(%struct.rtx_def**, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.rtx_def**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca i32, align 4
  store %struct.rtx_def** %0, %struct.rtx_def*** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %4, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %6, align 8
  %10 = load i8*, i8** %5, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %7, align 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 65535
  %17 = icmp eq i32 %16, 61
  br i1 %17, label %18, label %91

; <label>:18:                                     ; preds = %2
  %19 = load i32, i32* @x.75
  %20 = load i32, i32* @y.76
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %18
  %27 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %28, i64 0, i64 0
  %30 = bitcast %union.rtunion_def* %29 to i32*
  %31 = load i32, i32* %30, align 8
  %32 = load i32, i32* %7, align 4
  %33 = icmp eq i32 %31, %32
  %34 = load i32, i32* @x.75
  %35 = load i32, i32* @y.76
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %33, label %42, label %91

; <label>:42:                                     ; preds = %originalBBpart2
  %43 = load i32, i32* @x.75
  %44 = load i32, i32* @y.76
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %42
  %51 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = lshr i32 %53, 16
  %55 = and i32 %54, 255
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i64 0, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = load i32, i32* @target_flags, align 4
  %61 = and i32 %60, 33554432
  %62 = icmp ne i32 %61, 0
  %63 = select i1 %62, i32 64, i32 32
  %64 = icmp sle i32 %59, %63
  %65 = load i32, i32* @x.75
  %66 = load i32, i32* @y.76
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart29, label %originalBB1alteredBB

originalBBpart29:                                 ; preds = %originalBB1
  br i1 %64, label %73, label %90

; <label>:73:                                     ; preds = %originalBBpart29
  %74 = load i32, i32* @x.75
  %75 = load i32, i32* @y.76
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %originalBB11alteredBB, %73
  store i32 2, i32* %3, align 4
  %82 = load i32, i32* @x.75
  %83 = load i32, i32* @y.76
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %108

; <label>:90:                                     ; preds = %originalBBpart29
  store i32 1, i32* %3, align 4
  br label %108

; <label>:91:                                     ; preds = %originalBBpart2, %2
  %92 = load i32, i32* @x.75
  %93 = load i32, i32* @y.76
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %91
  store i32 0, i32* %3, align 4
  %100 = load i32, i32* @x.75
  %101 = load i32, i32* @y.76
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %108

; <label>:108:                                    ; preds = %originalBBpart217, %90, %originalBBpart213
  %109 = load i32, i32* %3, align 4
  ret i32 %109

originalBBalteredBB:                              ; preds = %originalBB, %18
  %110 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1
  %112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %111, i64 0, i64 0
  %113 = bitcast %union.rtunion_def* %112 to i32*
  %114 = load i32, i32* %113, align 8
  %115 = load i32, i32* %7, align 4
  %116 = icmp eq i32 %114, %115
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  %117 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %118 = bitcast %struct.rtx_def* %117 to i32*
  %119 = load i32, i32* %118, align 8
  %120 = lshr i32 %119, 16
  %_ = shl i32 %120, 255
  %_2 = sub i32 %120, 255
  %gen = mul i32 %_2, 255
  %_3 = sub i32 0, %120
  %gen4 = add i32 %_3, 255
  %_5 = shl i32 %120, 255
  %_6 = sub i32 0, %120
  %gen7 = add i32 %_6, 255
  %121 = and i32 %120, 255
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i64 0, i64 %122
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  %126 = load i32, i32* @target_flags, align 4
  %127 = and i32 %126, 33554432
  %128 = icmp ne i32 %127, 0
  %129 = select i1 %128, i32 64, i32 32
  %130 = icmp sle i32 %125, %129
  br label %originalBB1

originalBB11alteredBB:                            ; preds = %originalBB11, %73
  store i32 2, i32* %3, align 4
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %91
  store i32 0, i32* %3, align 4
  br label %originalBB15
}

declare %struct.rtx_def* @delete_insn(%struct.rtx_def*) #1

declare void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @notice_stack_pointer_modification_1(%struct.rtx_def*, %struct.rtx_def*, i8*) #0 {
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca i8*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %4, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %5, align 8
  store i8* %2, i8** %6, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %9 = icmp eq %struct.rtx_def* %7, %8
  br i1 %9, label %58, label %10

; <label>:10:                                     ; preds = %3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 66
  br i1 %15, label %16, label %75

; <label>:16:                                     ; preds = %10
  %17 = load i32, i32* @x.77
  %18 = load i32, i32* @y.78
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %16
  %25 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %26, i64 0, i64 0
  %28 = bitcast %union.rtunion_def* %27 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %31 = load i32, i32* %30, align 8
  %32 = and i32 %31, 65535
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 97
  %38 = load i32, i32* @x.77
  %39 = load i32, i32* @y.78
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %37, label %46, label %75

; <label>:46:                                     ; preds = %originalBBpart2
  %47 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %48, i64 0, i64 0
  %50 = bitcast %union.rtunion_def* %49 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %50, align 8
  %52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %52, i64 0, i64 0
  %54 = bitcast %union.rtunion_def* %53 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %54, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %57 = icmp eq %struct.rtx_def* %55, %56
  br i1 %57, label %58, label %75

; <label>:58:                                     ; preds = %46, %3
  %59 = load i32, i32* @x.77
  %60 = load i32, i32* @y.78
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB3, label %originalBB3alteredBB

originalBB3:                                      ; preds = %originalBB3alteredBB, %58
  store i32 0, i32* @current_function_sp_is_unchanging, align 4
  %67 = load i32, i32* @x.77
  %68 = load i32, i32* @y.78
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart25, label %originalBB3alteredBB

originalBBpart25:                                 ; preds = %originalBB3
  br label %75

; <label>:75:                                     ; preds = %originalBBpart25, %46, %originalBBpart2, %10
  %76 = load i32, i32* @x.77
  %77 = load i32, i32* @y.78
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %originalBB7alteredBB, %75
  %84 = load i32, i32* @x.77
  %85 = load i32, i32* @y.78
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %16
  %92 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1
  %94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %93, i64 0, i64 0
  %95 = bitcast %union.rtunion_def* %94 to %struct.rtx_def**
  %96 = load %struct.rtx_def*, %struct.rtx_def** %95, align 8
  %97 = bitcast %struct.rtx_def* %96 to i32*
  %98 = load i32, i32* %97, align 8
  %_ = sub i32 0, %98
  %gen = add i32 %_, 65535
  %_1 = sub i32 0, %98
  %gen2 = add i32 %_1, 65535
  %99 = and i32 %98, 65535
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = sext i8 %102 to i32
  %104 = icmp eq i32 %103, 97
  br label %originalBB

originalBB3alteredBB:                             ; preds = %originalBB3, %58
  store i32 0, i32* @current_function_sp_is_unchanging, align 4
  br label %originalBB3

originalBB7alteredBB:                             ; preds = %originalBB7, %75
  br label %originalBB7
}

declare i32 @ix86_frame_pointer_required() #1

; Function Attrs: noinline nounwind uwtable
define internal void @mark_reg(%struct.rtx_def*, i8*) #0 {
  %3 = alloca %struct.rtx_def*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.bitmap_head_def*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.rtx_def* %0, %struct.rtx_def** %3, align 8
  store i8* %1, i8** %4, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = bitcast i8* %8 to %struct.bitmap_head_def*
  store %struct.bitmap_head_def* %9, %struct.bitmap_head_def** %5, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %11, i64 0, i64 0
  %13 = bitcast %union.rtunion_def* %12 to i32*
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %6, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = lshr i32 %17, 16
  %19 = and i32 %18, 255
  %20 = icmp eq i32 %19, 51
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %2
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 918, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__FUNCTION__.mark_reg, i32 0, i32 0)) #5
  unreachable

; <label>:22:                                     ; preds = %2
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %5, align 8
  %24 = load i32, i32* %6, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %23, i32 %24)
  %25 = load i32, i32* %6, align 4
  %26 = icmp slt i32 %25, 53
  br i1 %26, label %27, label %231

; <label>:27:                                     ; preds = %22
  %28 = load i32, i32* %6, align 4
  %29 = icmp sge i32 %28, 8
  br i1 %29, label %30, label %33

; <label>:30:                                     ; preds = %27
  %31 = load i32, i32* %6, align 4
  %32 = icmp sle i32 %31, 15
  br i1 %32, label %67, label %33

; <label>:33:                                     ; preds = %30, %27
  %34 = load i32, i32* @x.79
  %35 = load i32, i32* @y.80
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %33
  %42 = load i32, i32* %6, align 4
  %43 = icmp sge i32 %42, 21
  %44 = load i32, i32* @x.79
  %45 = load i32, i32* @y.80
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %43, label %52, label %55

; <label>:52:                                     ; preds = %originalBBpart2
  %53 = load i32, i32* %6, align 4
  %54 = icmp sle i32 %53, 28
  br i1 %54, label %67, label %55

; <label>:55:                                     ; preds = %52, %originalBBpart2
  %56 = load i32, i32* %6, align 4
  %57 = icmp sge i32 %56, 45
  br i1 %57, label %58, label %61

; <label>:58:                                     ; preds = %55
  %59 = load i32, i32* %6, align 4
  %60 = icmp sle i32 %59, 52
  br i1 %60, label %67, label %61

; <label>:61:                                     ; preds = %58, %55
  %62 = load i32, i32* %6, align 4
  %63 = icmp sge i32 %62, 29
  br i1 %63, label %64, label %138

; <label>:64:                                     ; preds = %61
  %65 = load i32, i32* %6, align 4
  %66 = icmp sle i32 %65, 36
  br i1 %66, label %67, label %138

; <label>:67:                                     ; preds = %64, %58, %52, %30
  %68 = load i32, i32* @x.79
  %69 = load i32, i32* @y.80
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %67
  %76 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %78 = load i32, i32* %77, align 8
  %79 = lshr i32 %78, 16
  %80 = and i32 %79, 255
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 5
  %85 = load i32, i32* @x.79
  %86 = load i32, i32* @y.80
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart217, label %originalBB1alteredBB

originalBBpart217:                                ; preds = %originalBB1
  br i1 %84, label %119, label %93

; <label>:93:                                     ; preds = %originalBBpart217
  %94 = load i32, i32* @x.79
  %95 = load i32, i32* @y.80
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %93
  %102 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %103 = bitcast %struct.rtx_def* %102 to i32*
  %104 = load i32, i32* %103, align 8
  %105 = lshr i32 %104, 16
  %106 = and i32 %105, 255
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %109, 6
  %111 = load i32, i32* @x.79
  %112 = load i32, i32* @y.80
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart232, label %originalBB19alteredBB

originalBBpart232:                                ; preds = %originalBB19
  br label %119

; <label>:119:                                    ; preds = %originalBBpart232, %originalBBpart217
  %120 = phi i1 [ true, %originalBBpart217 ], [ %110, %originalBBpart232 ]
  %121 = load i32, i32* @x.79
  %122 = load i32, i32* @y.80
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %119
  %129 = select i1 %120, i32 2, i32 1
  %130 = load i32, i32* @x.79
  %131 = load i32, i32* @y.80
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %219

; <label>:138:                                    ; preds = %64, %61
  %139 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %140 = bitcast %struct.rtx_def* %139 to i32*
  %141 = load i32, i32* %140, align 8
  %142 = lshr i32 %141, 16
  %143 = and i32 %142, 255
  %144 = icmp eq i32 %143, 18
  br i1 %144, label %145, label %150

; <label>:145:                                    ; preds = %138
  %146 = load i32, i32* @target_flags, align 4
  %147 = and i32 %146, 33554432
  %148 = icmp ne i32 %147, 0
  %149 = select i1 %148, i32 2, i32 3
  br label %217

; <label>:150:                                    ; preds = %138
  %151 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %152 = bitcast %struct.rtx_def* %151 to i32*
  %153 = load i32, i32* %152, align 8
  %154 = lshr i32 %153, 16
  %155 = and i32 %154, 255
  %156 = icmp eq i32 %155, 24
  br i1 %156, label %157, label %178

; <label>:157:                                    ; preds = %150
  %158 = load i32, i32* @x.79
  %159 = load i32, i32* @y.80
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %157
  %166 = load i32, i32* @target_flags, align 4
  %167 = and i32 %166, 33554432
  %168 = icmp ne i32 %167, 0
  %169 = select i1 %168, i32 4, i32 6
  %170 = load i32, i32* @x.79
  %171 = load i32, i32* @y.80
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart242, label %originalBB38alteredBB

originalBBpart242:                                ; preds = %originalBB38
  br label %215

; <label>:178:                                    ; preds = %150
  %179 = load i32, i32* @x.79
  %180 = load i32, i32* @y.80
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %originalBB44alteredBB, %178
  %187 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %189 = load i32, i32* %188, align 8
  %190 = lshr i32 %189, 16
  %191 = and i32 %190, 255
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = load i32, i32* @target_flags, align 4
  %197 = and i32 %196, 33554432
  %198 = icmp ne i32 %197, 0
  %199 = select i1 %198, i32 8, i32 4
  %200 = add nsw i32 %195, %199
  %201 = sub nsw i32 %200, 1
  %202 = load i32, i32* @target_flags, align 4
  %203 = and i32 %202, 33554432
  %204 = icmp ne i32 %203, 0
  %205 = select i1 %204, i32 8, i32 4
  %206 = sdiv i32 %201, %205
  %207 = load i32, i32* @x.79
  %208 = load i32, i32* @y.80
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart287, label %originalBB44alteredBB

originalBBpart287:                                ; preds = %originalBB44
  br label %215

; <label>:215:                                    ; preds = %originalBBpart287, %originalBBpart242
  %216 = phi i32 [ %169, %originalBBpart242 ], [ %206, %originalBBpart287 ]
  br label %217

; <label>:217:                                    ; preds = %215, %145
  %218 = phi i32 [ %149, %145 ], [ %216, %215 ]
  br label %219

; <label>:219:                                    ; preds = %217, %originalBBpart236
  %220 = phi i32 [ %129, %originalBBpart236 ], [ %218, %217 ]
  store i32 %220, i32* %7, align 4
  br label %221

; <label>:221:                                    ; preds = %225, %219
  %222 = load i32, i32* %7, align 4
  %223 = add nsw i32 %222, -1
  store i32 %223, i32* %7, align 4
  %224 = icmp sgt i32 %223, 0
  br i1 %224, label %225, label %230

; <label>:225:                                    ; preds = %221
  %226 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %5, align 8
  %227 = load i32, i32* %6, align 4
  %228 = load i32, i32* %7, align 4
  %229 = add nsw i32 %227, %228
  call void @bitmap_set_bit(%struct.bitmap_head_def* %226, i32 %229)
  br label %221

; <label>:230:                                    ; preds = %221
  br label %231

; <label>:231:                                    ; preds = %230, %22
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %33
  %232 = load i32, i32* %6, align 4
  %233 = icmp sge i32 %232, 21
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %67
  %234 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %235 = bitcast %struct.rtx_def* %234 to i32*
  %236 = load i32, i32* %235, align 8
  %_ = sub i32 %236, 16
  %gen = mul i32 %_, 16
  %_2 = sub i32 %236, 16
  %gen3 = mul i32 %_2, 16
  %_4 = sub i32 0, %236
  %gen5 = add i32 %_4, 16
  %_6 = sub i32 %236, 16
  %gen7 = mul i32 %_6, 16
  %_8 = shl i32 %236, 16
  %237 = lshr i32 %236, 16
  %_9 = sub i32 0, %237
  %gen10 = add i32 %_9, 255
  %_11 = sub i32 0, %237
  %gen12 = add i32 %_11, 255
  %_13 = shl i32 %237, 255
  %_14 = sub i32 %237, 255
  %gen15 = mul i32 %_14, 255
  %238 = and i32 %237, 255
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %239
  %241 = load i32, i32* %240, align 4
  %242 = icmp eq i32 %241, 5
  br label %originalBB1

originalBB19alteredBB:                            ; preds = %originalBB19, %93
  %243 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %244 = bitcast %struct.rtx_def* %243 to i32*
  %245 = load i32, i32* %244, align 8
  %_20 = shl i32 %245, 16
  %_21 = sub i32 %245, 16
  %gen22 = mul i32 %_21, 16
  %_23 = shl i32 %245, 16
  %246 = lshr i32 %245, 16
  %_24 = sub i32 0, %246
  %gen25 = add i32 %_24, 255
  %_26 = shl i32 %246, 255
  %_27 = sub i32 %246, 255
  %gen28 = mul i32 %_27, 255
  %_29 = sub i32 %246, 255
  %gen30 = mul i32 %_29, 255
  %247 = and i32 %246, 255
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %250, 6
  br label %originalBB19

originalBB34alteredBB:                            ; preds = %originalBB34, %119
  %252 = select i1 %120, i32 2, i32 1
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %157
  %253 = load i32, i32* @target_flags, align 4
  %_39 = sub i32 0, %253
  %gen40 = add i32 %_39, 33554432
  %254 = and i32 %253, 33554432
  %255 = icmp ne i32 %254, 0
  %256 = select i1 %255, i32 4, i32 6
  br label %originalBB38

originalBB44alteredBB:                            ; preds = %originalBB44, %178
  %257 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %258 = bitcast %struct.rtx_def* %257 to i32*
  %259 = load i32, i32* %258, align 8
  %_45 = shl i32 %259, 16
  %_46 = shl i32 %259, 16
  %_47 = sub i32 0, %259
  %gen48 = add i32 %_47, 16
  %_49 = shl i32 %259, 16
  %_50 = shl i32 %259, 16
  %_51 = shl i32 %259, 16
  %_52 = sub i32 %259, 16
  %gen53 = mul i32 %_52, 16
  %260 = lshr i32 %259, 16
  %_54 = shl i32 %260, 255
  %_55 = sub i32 0, %260
  %gen56 = add i32 %_55, 255
  %_57 = sub i32 %260, 255
  %gen58 = mul i32 %_57, 255
  %261 = and i32 %260, 255
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = load i32, i32* @target_flags, align 4
  %_59 = shl i32 %266, 33554432
  %_60 = sub i32 %266, 33554432
  %gen61 = mul i32 %_60, 33554432
  %_62 = sub i32 0, %266
  %gen63 = add i32 %_62, 33554432
  %_64 = sub i32 0, %266
  %gen65 = add i32 %_64, 33554432
  %_66 = sub i32 0, %266
  %gen67 = add i32 %_66, 33554432
  %267 = and i32 %266, 33554432
  %268 = icmp ne i32 %267, 0
  %269 = select i1 %268, i32 8, i32 4
  %_68 = shl i32 %265, %269
  %_69 = sub i32 0, %265
  %gen70 = add i32 %_69, %269
  %_71 = sub i32 0, %265
  %gen72 = add i32 %_71, %269
  %_73 = sub i32 %265, %269
  %gen74 = mul i32 %_73, %269
  %_75 = shl i32 %265, %269
  %_76 = shl i32 %265, %269
  %270 = add nsw i32 %265, %269
  %_77 = sub i32 0, %270
  %gen78 = add i32 %_77, 1
  %_79 = sub i32 0, %270
  %gen80 = add i32 %_79, 1
  %271 = sub nsw i32 %270, 1
  %272 = load i32, i32* @target_flags, align 4
  %_81 = shl i32 %272, 33554432
  %273 = and i32 %272, 33554432
  %274 = icmp ne i32 %273, 0
  %275 = select i1 %274, i32 8, i32 4
  %_82 = shl i32 %271, %275
  %_83 = sub i32 %271, %275
  %gen84 = mul i32 %_83, %275
  %_85 = shl i32 %271, %275
  %276 = sdiv i32 %271, %275
  br label %originalBB44
}

declare void @diddle_return_value(void (%struct.rtx_def*, i8*)*, i8*) #1

declare void @sbitmap_zero(%struct.simple_bitmap_def*) #1

declare i32 @for_each_successor_phi(%struct.basic_block_def*, i32 (%struct.rtx_def*, i32, i32, i8*)*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @set_phi_alternative_reg(%struct.rtx_def*, i32, i32, i8*) #0 {
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca %struct.bitmap_head_def*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i8* %3, i8** %8, align 8
  %10 = load i8*, i8** %8, align 8
  %11 = bitcast i8* %10 to %struct.bitmap_head_def*
  store %struct.bitmap_head_def* %11, %struct.bitmap_head_def** %9, align 8
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %9, align 8
  %13 = load i32, i32* %7, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %12, i32 %13)
  ret i32 0
}

declare void @delete_insn_chain(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #1

declare zeroext i1 @purge_dead_edges(%struct.basic_block_def*) #1

declare i32 @volatile_refs_p(%struct.rtx_def*) #1

declare i32 @anti_dependence(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @alloc_EXPR_LIST(i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @subreg_regno_offset(i32, i32, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @invalidate_mems_from_set(%struct.propagate_block_info*, %struct.rtx_def*) #0 {
  %3 = alloca %struct.propagate_block_info*, align 8
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca %struct.rtx_def*, align 8
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %3, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %4, align 8
  %8 = load %struct.propagate_block_info*, %struct.propagate_block_info** %3, align 8
  %9 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %8, i32 0, i32 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %6, align 8
  br label %11

; <label>:11:                                     ; preds = %81, %2
  %12 = load i32, i32* @x.83
  %13 = load i32, i32* @y.84
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %11
  %20 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %21 = icmp ne %struct.rtx_def* %20, null
  %22 = load i32, i32* @x.83
  %23 = load i32, i32* @y.84
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %83

; <label>:30:                                     ; preds = %originalBBpart2
  %31 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %32, i64 0, i64 1
  %34 = bitcast %union.rtunion_def* %33 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %7, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %38, i64 0, i64 0
  %40 = bitcast %union.rtunion_def* %39 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %40, align 8
  %42 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %36, %struct.rtx_def* %41)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %63

; <label>:44:                                     ; preds = %30
  %45 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %46 = icmp ne %struct.rtx_def* %45, null
  br i1 %46, label %47, label %53

; <label>:47:                                     ; preds = %44
  %48 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %50, i64 0, i64 1
  %52 = bitcast %union.rtunion_def* %51 to %struct.rtx_def**
  store %struct.rtx_def* %48, %struct.rtx_def** %52, align 8
  br label %57

; <label>:53:                                     ; preds = %44
  %54 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %55 = load %struct.propagate_block_info*, %struct.propagate_block_info** %3, align 8
  %56 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %55, i32 0, i32 4
  store %struct.rtx_def* %54, %struct.rtx_def** %56, align 8
  br label %57

; <label>:57:                                     ; preds = %53, %47
  %58 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  call void @free_EXPR_LIST_node(%struct.rtx_def* %58)
  %59 = load %struct.propagate_block_info*, %struct.propagate_block_info** %3, align 8
  %60 = getelementptr inbounds %struct.propagate_block_info, %struct.propagate_block_info* %59, i32 0, i32 7
  %61 = load i32, i32* %60, align 8
  %62 = add nsw i32 %61, -1
  store i32 %62, i32* %60, align 8
  br label %81

; <label>:63:                                     ; preds = %30
  %64 = load i32, i32* @x.83
  %65 = load i32, i32* @y.84
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %63
  %72 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* %72, %struct.rtx_def** %6, align 8
  %73 = load i32, i32* @x.83
  %74 = load i32, i32* @y.84
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %81

; <label>:81:                                     ; preds = %originalBBpart24, %57
  %82 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  store %struct.rtx_def* %82, %struct.rtx_def** %5, align 8
  br label %11

; <label>:83:                                     ; preds = %originalBBpart2
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %11
  %84 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %85 = icmp ne %struct.rtx_def* %84, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %63
  %86 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* %86, %struct.rtx_def** %6, align 8
  br label %originalBB1
}

; Function Attrs: noinline nounwind uwtable
define internal void @invalidate_mems_from_autoinc(%struct.propagate_block_info*, %struct.rtx_def*) #0 {
  %3 = alloca %struct.propagate_block_info*, align 8
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  store %struct.propagate_block_info* %0, %struct.propagate_block_info** %3, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %4, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %7, i64 0, i64 6
  %9 = bitcast %union.rtunion_def* %8 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %5, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %12, i64 0, i64 6
  %14 = bitcast %union.rtunion_def* %13 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %5, align 8
  br label %16

; <label>:16:                                     ; preds = %66, %2
  %17 = load i32, i32* @x.85
  %18 = load i32, i32* @y.86
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %16
  %25 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %26 = icmp ne %struct.rtx_def* %25, null
  %27 = load i32, i32* @x.85
  %28 = load i32, i32* @y.86
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %26, label %35, label %72

; <label>:35:                                     ; preds = %originalBBpart2
  %36 = load i32, i32* @x.85
  %37 = load i32, i32* @y.86
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %35
  %44 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %46 = load i32, i32* %45, align 8
  %47 = lshr i32 %46, 16
  %48 = and i32 %47, 255
  %49 = icmp eq i32 %48, 2
  %50 = load i32, i32* @x.85
  %51 = load i32, i32* @y.86
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart219, label %originalBB1alteredBB

originalBBpart219:                                ; preds = %originalBB1
  br i1 %49, label %58, label %65

; <label>:58:                                     ; preds = %originalBBpart219
  %59 = load %struct.propagate_block_info*, %struct.propagate_block_info** %3, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %61, i64 0, i64 0
  %63 = bitcast %union.rtunion_def* %62 to %struct.rtx_def**
  %64 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  call void @invalidate_mems_from_set(%struct.propagate_block_info* %59, %struct.rtx_def* %64)
  br label %65

; <label>:65:                                     ; preds = %58, %originalBBpart219
  br label %66

; <label>:66:                                     ; preds = %65
  %67 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %68, i64 0, i64 1
  %70 = bitcast %union.rtunion_def* %69 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %70, align 8
  store %struct.rtx_def* %71, %struct.rtx_def** %5, align 8
  br label %16

; <label>:72:                                     ; preds = %originalBBpart2
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %16
  %73 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %74 = icmp ne %struct.rtx_def* %73, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %35
  %75 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %76 = bitcast %struct.rtx_def* %75 to i32*
  %77 = load i32, i32* %76, align 8
  %_ = sub i32 %77, 16
  %gen = mul i32 %_, 16
  %_2 = sub i32 0, %77
  %gen3 = add i32 %_2, 16
  %_4 = shl i32 %77, 16
  %_5 = sub i32 %77, 16
  %gen6 = mul i32 %_5, 16
  %78 = lshr i32 %77, 16
  %_7 = shl i32 %78, 255
  %_8 = sub i32 0, %78
  %gen9 = add i32 %_8, 255
  %_10 = sub i32 %78, 255
  %gen11 = mul i32 %_10, 255
  %_12 = shl i32 %78, 255
  %_13 = shl i32 %78, 255
  %_14 = sub i32 %78, 255
  %gen15 = mul i32 %_14, 255
  %_16 = sub i32 0, %78
  %gen17 = add i32 %_16, 255
  %79 = and i32 %78, 255
  %80 = icmp eq i32 %79, 2
  br label %originalBB1
}

declare i32 @side_effects_p(%struct.rtx_def*) #1

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #1

declare i32 @asm_noperands(%struct.rtx_def*) #1

declare %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @find_regno_note(%struct.rtx_def*, i32, i32) #1

declare i32 @dead_or_set_regno_p(%struct.rtx_def*, i32) #1

declare void @free_INSN_LIST_list(%struct.rtx_def**) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
