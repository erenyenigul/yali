; ModuleID = 'host/ir_bcf/gcc_calls.ll'
source_filename = "calls.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.simple_bitmap_def = type { i32, i32, i32, [1 x i64] }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i32, i8* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.arg_data = type { %union.tree_node*, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.args_size, %struct.args_size, %struct.args_size, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def**, i32, %struct.args_size }
%struct.args_size = type { i64, %union.tree_node* }
%struct.tree_exp = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.arg = type { %struct.rtx_def*, i32, %struct.rtx_def*, i32, %struct.args_size, %struct.args_size, %struct.rtx_def* }
%struct.tree_block = type { %struct.tree_common, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }

@static_chain_rtx = external global %struct.rtx_def*, align 8
@expand_call.currently_expanding_call = internal global i32 0, align 4
@target_flags = external global i32, align 4
@highest_outgoing_arg_in_use = internal global i32 0, align 4
@stack_usage_map = internal global i8* null, align 8
@cfun = external global %struct.function*, align 8
@flag_no_inline = external global i32, align 4
@current_function_decl = external global %union.tree_node*, align 8
@warn_inline = external global i32, align 4
@optimize = external global i32, align 4
@.str = private unnamed_addr constant [26 x i8] c"can't inline call to `%s'\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"called from here\00", align 1
@warn_aggregate_return = external global i32, align 4
@.str.2 = private unnamed_addr constant [34 x i8] c"function call has aggregate value\00", align 1
@ix86_preferred_stack_boundary = external global i32, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"calls.c\00", align 1
@__FUNCTION__.expand_call = private unnamed_addr constant [12 x i8] c"expand_call\00", align 1
@struct_value_rtx = external global %struct.rtx_def*, align 8
@stack_arg_under_construction = common global i32 0, align 4
@global_rtl = external global [11 x %struct.rtx_def*], align 16
@global_trees = external global [51 x %union.tree_node*], align 16
@flag_optimize_sibling_calls = external global i32, align 4
@rtx_equal_function_value_matters = external global i32, align 4
@flag_pic = external global i32, align 4
@mode_class = external constant [59 x i32], align 16
@profile_arc_flag = external global i32, align 4
@.str.4 = private unnamed_addr constant [15 x i8] c"__bb_fork_func\00", align 1
@stored_args_map = internal global %struct.simple_bitmap_def* null, align 8
@sizetype_tab = external global [6 x %union.tree_node*], align 16
@const_int_rtx = external global [129 x %struct.rtx_def*], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"alloca\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"__builtin_alloca\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"setjmp\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"setjmp_syscall\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"sigsetjmp\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"savectx\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"siglongjmp\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"qsetjmp\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"vfork\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"longjmp\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"clone\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"calloc\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"strdup\00", align 1
@tree_code_type = external global [256 x i8], align 16
@.str.20 = private unnamed_addr constant [32 x i8] c"inlining failed in call to `%s'\00", align 1
@integer_types = external global [11 x %union.tree_node*], align 16
@flag_stack_check = external global i32, align 4
@__FUNCTION__.precompute_arguments = private unnamed_addr constant [21 x i8] c"precompute_arguments\00", align 1
@calls_function_save_exprs = internal global %union.tree_node* null, align 8
@__FUNCTION__.compute_argument_block_size = private unnamed_addr constant [28 x i8] c"compute_argument_block_size\00", align 1
@mode_size = external constant [59 x i8], align 16
@rtx_class = external constant [153 x i8], align 16
@rtx_format = external constant [153 x i8*], align 16
@rtx_length = external constant [153 x i8], align 16
@word_mode = external global i32, align 4
@__FUNCTION__.emit_call_1 = private unnamed_addr constant [12 x i8] c"emit_call_1\00", align 1
@flag_defer_pop = external global i32, align 4
@__FUNCTION__.emit_library_call_value_1 = private unnamed_addr constant [26 x i8] c"emit_library_call_value_1\00", align 1
@virtuals_instantiated = external global i32, align 4
@__FUNCTION__.store_one_arg = private unnamed_addr constant [14 x i8] c"store_one_arg\00", align 1
@.str.21 = private unnamed_addr constant [56 x i8] c"variable offset is passed partially in stack and in reg\00", align 1
@.str.22 = private unnamed_addr constant [54 x i8] c"variable size is passed partially in stack and in reg\00", align 1
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0

; Function Attrs: noinline nounwind uwtable
define %struct.rtx_def* @prepare_call_address(%struct.rtx_def*, %union.tree_node*, %struct.rtx_def**, i32, i32) #0 {
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca %union.tree_node*, align 8
  %8 = alloca %struct.rtx_def**, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %6, align 8
  store %union.tree_node* %1, %union.tree_node** %7, align 8
  store %struct.rtx_def** %2, %struct.rtx_def*** %8, align 8
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %11, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %13 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %12, i32 0)
  store %struct.rtx_def* %13, %struct.rtx_def** %6, align 8
  %14 = load %union.tree_node*, %union.tree_node** %7, align 8
  %15 = icmp ne %union.tree_node* %14, null
  br i1 %15, label %16, label %35

; <label>:16:                                     ; preds = %5
  %17 = load i32, i32* @x
  %18 = load i32, i32* @y
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %16
  %25 = load %union.tree_node*, %union.tree_node** %7, align 8
  %26 = call %struct.rtx_def* @lookup_static_chain(%union.tree_node* %25)
  store %struct.rtx_def* %26, %struct.rtx_def** %11, align 8
  %27 = load i32, i32* @x
  %28 = load i32, i32* @y
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %35

; <label>:35:                                     ; preds = %originalBBpart2, %5
  %36 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %38 = load i32, i32* %37, align 8
  %39 = and i32 %38, 65535
  %40 = icmp ne i32 %39, 68
  br i1 %40, label %41, label %85

; <label>:41:                                     ; preds = %35
  %42 = load i32, i32* @x
  %43 = load i32, i32* @y
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %41
  %50 = load i32, i32* %9, align 4
  %51 = icmp ne i32 %50, 0
  %52 = load i32, i32* @x
  %53 = load i32, i32* @y
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %51, label %60, label %64

; <label>:60:                                     ; preds = %originalBBpart24
  %61 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %62 = call %struct.rtx_def* @memory_address(i32 2, %struct.rtx_def* %61)
  %63 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %62)
  br label %67

; <label>:64:                                     ; preds = %originalBBpart24
  %65 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %66 = call %struct.rtx_def* @memory_address(i32 2, %struct.rtx_def* %65)
  br label %67

; <label>:67:                                     ; preds = %64, %60
  %68 = phi %struct.rtx_def* [ %63, %60 ], [ %66, %64 ]
  %69 = load i32, i32* @x
  %70 = load i32, i32* @y
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %67
  store %struct.rtx_def* %68, %struct.rtx_def** %6, align 8
  %77 = load i32, i32* @x
  %78 = load i32, i32* @y
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %90

; <label>:85:                                     ; preds = %35
  %86 = load i32, i32* %10, align 4
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %89, label %88

; <label>:88:                                     ; preds = %85
  br label %89

; <label>:89:                                     ; preds = %88, %85
  br label %90

; <label>:90:                                     ; preds = %89, %originalBBpart28
  %91 = load i32, i32* @x
  %92 = load i32, i32* @y
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %90
  %99 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %100 = icmp ne %struct.rtx_def* %99, null
  %101 = load i32, i32* @x
  %102 = load i32, i32* @y
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %100, label %109, label %154

; <label>:109:                                    ; preds = %originalBBpart212
  %110 = load i32, i32* @x
  %111 = load i32, i32* @y
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %109
  %118 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_rtx, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %120 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %118, %struct.rtx_def* %119)
  %121 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_rtx, align 8
  %122 = bitcast %struct.rtx_def* %121 to i32*
  %123 = load i32, i32* %122, align 8
  %124 = and i32 %123, 65535
  %125 = icmp eq i32 %124, 61
  %126 = load i32, i32* @x
  %127 = load i32, i32* @y
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart227, label %originalBB14alteredBB

originalBBpart227:                                ; preds = %originalBB14
  br i1 %125, label %134, label %153

; <label>:134:                                    ; preds = %originalBBpart227
  %135 = load i32, i32* @x
  %136 = load i32, i32* @y
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %134
  %143 = load %struct.rtx_def**, %struct.rtx_def*** %8, align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_rtx, align 8
  call void @use_reg(%struct.rtx_def** %143, %struct.rtx_def* %144)
  %145 = load i32, i32* @x
  %146 = load i32, i32* @y
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %153

; <label>:153:                                    ; preds = %originalBBpart231, %originalBBpart227
  br label %154

; <label>:154:                                    ; preds = %153, %originalBBpart212
  %155 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  ret %struct.rtx_def* %155

originalBBalteredBB:                              ; preds = %originalBB, %16
  %156 = load %union.tree_node*, %union.tree_node** %7, align 8
  %157 = call %struct.rtx_def* @lookup_static_chain(%union.tree_node* %156)
  store %struct.rtx_def* %157, %struct.rtx_def** %11, align 8
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %41
  %158 = load i32, i32* %9, align 4
  %159 = icmp ne i32 %158, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %67
  store %struct.rtx_def* %68, %struct.rtx_def** %6, align 8
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %90
  %160 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %161 = icmp ne %struct.rtx_def* %160, null
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %109
  %162 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_rtx, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %164 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %162, %struct.rtx_def* %163)
  %165 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_rtx, align 8
  %166 = bitcast %struct.rtx_def* %165 to i32*
  %167 = load i32, i32* %166, align 8
  %_ = sub i32 0, %167
  %gen = add i32 %_, 65535
  %_15 = shl i32 %167, 65535
  %_16 = sub i32 0, %167
  %gen17 = add i32 %_16, 65535
  %_18 = shl i32 %167, 65535
  %_19 = shl i32 %167, 65535
  %_20 = sub i32 0, %167
  %gen21 = add i32 %_20, 65535
  %_22 = sub i32 %167, 65535
  %gen23 = mul i32 %_22, 65535
  %_24 = sub i32 0, %167
  %gen25 = add i32 %_24, 65535
  %168 = and i32 %167, 65535
  %169 = icmp eq i32 %168, 61
  br label %originalBB14

originalBB29alteredBB:                            ; preds = %originalBB29, %134
  %170 = load %struct.rtx_def**, %struct.rtx_def*** %8, align 8
  %171 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_rtx, align 8
  call void @use_reg(%struct.rtx_def** %170, %struct.rtx_def* %171)
  br label %originalBB29
}

declare %struct.rtx_def* @protect_from_queue(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @lookup_static_chain(%union.tree_node*) #1

declare %struct.rtx_def* @force_not_mem(%struct.rtx_def*) #1

declare %struct.rtx_def* @memory_address(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @use_reg(%struct.rtx_def**, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @setjmp_call_p(%union.tree_node*) #0 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca %union.tree_node*, align 8
  store %union.tree_node* %0, %union.tree_node** %10, align 8
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8
  %12 = call i32 @special_function_p(%union.tree_node* %11, i32 0)
  %13 = and i32 %12, 32
  %14 = load i32, i32* @x.1
  %15 = load i32, i32* @y.2
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %13

originalBBalteredBB:                              ; preds = %originalBB, %1
  %22 = alloca %union.tree_node*, align 8
  store %union.tree_node* %0, %union.tree_node** %22, align 8
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8
  %24 = call i32 @special_function_p(%union.tree_node* %23, i32 0)
  %_ = shl i32 %24, 32
  %25 = and i32 %24, 32
  br label %originalBB
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @special_function_p(%union.tree_node*, i32) #0 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %2
  %11 = alloca %union.tree_node*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  store %union.tree_node* %0, %union.tree_node** %11, align 8
  store i32 %1, i32* %12, align 4
  %15 = load i32, i32* %12, align 4
  %16 = and i32 %15, 4
  %17 = icmp ne i32 %16, 0
  %18 = load i32, i32* @x.3
  %19 = load i32, i32* @y.4
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %694, label %26

; <label>:26:                                     ; preds = %originalBBpart2
  %27 = load %union.tree_node*, %union.tree_node** %11, align 8
  %28 = icmp ne %union.tree_node* %27, null
  br i1 %28, label %29, label %694

; <label>:29:                                     ; preds = %26
  %30 = load %union.tree_node*, %union.tree_node** %11, align 8
  %31 = bitcast %union.tree_node* %30 to %struct.tree_decl*
  %32 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %31, i32 0, i32 8
  %33 = load %union.tree_node*, %union.tree_node** %32, align 8
  %34 = icmp ne %union.tree_node* %33, null
  br i1 %34, label %35, label %694

; <label>:35:                                     ; preds = %29
  %36 = load %union.tree_node*, %union.tree_node** %11, align 8
  %37 = bitcast %union.tree_node* %36 to %struct.tree_decl*
  %38 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %37, i32 0, i32 8
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8
  %40 = bitcast %union.tree_node* %39 to %struct.tree_identifier*
  %41 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %40, i32 0, i32 1
  %42 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %41, i32 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = icmp ule i32 %43, 17
  br i1 %44, label %45, label %694

; <label>:45:                                     ; preds = %35
  %46 = load %union.tree_node*, %union.tree_node** %11, align 8
  %47 = bitcast %union.tree_node* %46 to %struct.tree_decl*
  %48 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %47, i32 0, i32 9
  %49 = load %union.tree_node*, %union.tree_node** %48, align 8
  %50 = icmp eq %union.tree_node* %49, null
  br i1 %50, label %51, label %694

; <label>:51:                                     ; preds = %45
  %52 = load i32, i32* @x.3
  %53 = load i32, i32* @y.4
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB2, label %originalBB2alteredBB

originalBB2:                                      ; preds = %originalBB2alteredBB, %51
  %60 = load %union.tree_node*, %union.tree_node** %11, align 8
  %61 = bitcast %union.tree_node* %60 to %struct.tree_common*
  %62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %61, i32 0, i32 2
  %63 = load i32, i32* %62, align 8
  %64 = lshr i32 %63, 19
  %65 = and i32 %64, 1
  %66 = icmp ne i32 %65, 0
  %67 = load i32, i32* @x.3
  %68 = load i32, i32* @y.4
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart213, label %originalBB2alteredBB

originalBBpart213:                                ; preds = %originalBB2
  br i1 %66, label %75, label %694

; <label>:75:                                     ; preds = %originalBBpart213
  %76 = load i32, i32* @x.3
  %77 = load i32, i32* @y.4
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %75
  %84 = load %union.tree_node*, %union.tree_node** %11, align 8
  %85 = bitcast %union.tree_node* %84 to %struct.tree_decl*
  %86 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %85, i32 0, i32 8
  %87 = load %union.tree_node*, %union.tree_node** %86, align 8
  %88 = bitcast %union.tree_node* %87 to %struct.tree_identifier*
  %89 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %88, i32 0, i32 1
  %90 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %89, i32 0, i32 1
  %91 = load i8*, i8** %90, align 8
  store i8* %91, i8** %13, align 8
  %92 = load i8*, i8** %13, align 8
  store i8* %92, i8** %14, align 8
  %93 = load %union.tree_node*, %union.tree_node** %11, align 8
  %94 = bitcast %union.tree_node* %93 to %struct.tree_decl*
  %95 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %94, i32 0, i32 8
  %96 = load %union.tree_node*, %union.tree_node** %95, align 8
  %97 = bitcast %union.tree_node* %96 to %struct.tree_identifier*
  %98 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %97, i32 0, i32 1
  %99 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %98, i32 0, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %100, 6
  %102 = load i32, i32* @x.3
  %103 = load i32, i32* @y.4
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %101, label %110, label %136

; <label>:110:                                    ; preds = %originalBBpart217
  %111 = load i8*, i8** %13, align 8
  %112 = getelementptr inbounds i8, i8* %111, i64 0
  %113 = load i8, i8* %112, align 1
  %114 = sext i8 %113 to i32
  %115 = icmp eq i32 %114, 97
  br i1 %115, label %116, label %136

; <label>:116:                                    ; preds = %110
  %117 = load i32, i32* @x.3
  %118 = load i32, i32* @y.4
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %116
  %125 = load i8*, i8** %13, align 8
  %126 = call i32 @strcmp(i8* %125, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)) #7
  %127 = icmp ne i32 %126, 0
  %128 = load i32, i32* @x.3
  %129 = load i32, i32* @y.4
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %127, label %136, label %188

; <label>:136:                                    ; preds = %originalBBpart221, %110, %originalBBpart217
  %137 = load i32, i32* @x.3
  %138 = load i32, i32* @y.4
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %136
  %145 = load %union.tree_node*, %union.tree_node** %11, align 8
  %146 = bitcast %union.tree_node* %145 to %struct.tree_decl*
  %147 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %146, i32 0, i32 8
  %148 = load %union.tree_node*, %union.tree_node** %147, align 8
  %149 = bitcast %union.tree_node* %148 to %struct.tree_identifier*
  %150 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %149, i32 0, i32 1
  %151 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %150, i32 0, i32 0
  %152 = load i32, i32* %151, align 8
  %153 = icmp eq i32 %152, 16
  %154 = load i32, i32* @x.3
  %155 = load i32, i32* @y.4
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %153, label %162, label %207

; <label>:162:                                    ; preds = %originalBBpart225
  %163 = load i8*, i8** %13, align 8
  %164 = getelementptr inbounds i8, i8* %163, i64 0
  %165 = load i8, i8* %164, align 1
  %166 = sext i8 %165 to i32
  %167 = icmp eq i32 %166, 95
  br i1 %167, label %168, label %207

; <label>:168:                                    ; preds = %162
  %169 = load i32, i32* @x.3
  %170 = load i32, i32* @y.4
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %originalBB27alteredBB, %168
  %177 = load i8*, i8** %13, align 8
  %178 = call i32 @strcmp(i8* %177, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0)) #7
  %179 = icmp ne i32 %178, 0
  %180 = load i32, i32* @x.3
  %181 = load i32, i32* @y.4
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %179, label %207, label %188

; <label>:188:                                    ; preds = %originalBBpart229, %originalBBpart221
  %189 = load i32, i32* @x.3
  %190 = load i32, i32* @y.4
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %originalBB31alteredBB, %188
  %197 = load i32, i32* %12, align 4
  %198 = or i32 %197, 8
  store i32 %198, i32* %12, align 4
  %199 = load i32, i32* @x.3
  %200 = load i32, i32* @y.4
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart235, label %originalBB31alteredBB

originalBBpart235:                                ; preds = %originalBB31
  br label %207

; <label>:207:                                    ; preds = %originalBBpart235, %originalBBpart229, %162, %originalBBpart225
  %208 = load i32, i32* @x.3
  %209 = load i32, i32* @y.4
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %207
  %216 = load i8*, i8** %13, align 8
  %217 = getelementptr inbounds i8, i8* %216, i64 0
  %218 = load i8, i8* %217, align 1
  %219 = sext i8 %218 to i32
  %220 = icmp eq i32 %219, 95
  %221 = load i32, i32* @x.3
  %222 = load i32, i32* @y.4
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %220, label %229, label %290

; <label>:229:                                    ; preds = %originalBBpart239
  %230 = load i8*, i8** %13, align 8
  %231 = getelementptr inbounds i8, i8* %230, i64 1
  %232 = load i8, i8* %231, align 1
  %233 = sext i8 %232 to i32
  %234 = icmp eq i32 %233, 95
  br i1 %234, label %235, label %276

; <label>:235:                                    ; preds = %229
  %236 = load i32, i32* @x.3
  %237 = load i32, i32* @y.4
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %235
  %244 = load i8*, i8** %13, align 8
  %245 = getelementptr inbounds i8, i8* %244, i64 2
  %246 = load i8, i8* %245, align 1
  %247 = sext i8 %246 to i32
  %248 = icmp eq i32 %247, 120
  %249 = load i32, i32* @x.3
  %250 = load i32, i32* @y.4
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br i1 %248, label %257, label %276

; <label>:257:                                    ; preds = %originalBBpart243
  %258 = load i32, i32* @x.3
  %259 = load i32, i32* @y.4
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %originalBB45alteredBB, %257
  %266 = load i8*, i8** %14, align 8
  %267 = getelementptr inbounds i8, i8* %266, i64 3
  store i8* %267, i8** %14, align 8
  %268 = load i32, i32* @x.3
  %269 = load i32, i32* @y.4
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %289

; <label>:276:                                    ; preds = %originalBBpart243, %229
  %277 = load i8*, i8** %13, align 8
  %278 = getelementptr inbounds i8, i8* %277, i64 1
  %279 = load i8, i8* %278, align 1
  %280 = sext i8 %279 to i32
  %281 = icmp eq i32 %280, 95
  br i1 %281, label %282, label %285

; <label>:282:                                    ; preds = %276
  %283 = load i8*, i8** %14, align 8
  %284 = getelementptr inbounds i8, i8* %283, i64 2
  store i8* %284, i8** %14, align 8
  br label %288

; <label>:285:                                    ; preds = %276
  %286 = load i8*, i8** %14, align 8
  %287 = getelementptr inbounds i8, i8* %286, i64 1
  store i8* %287, i8** %14, align 8
  br label %288

; <label>:288:                                    ; preds = %285, %282
  br label %289

; <label>:289:                                    ; preds = %288, %originalBBpart247
  br label %290

; <label>:290:                                    ; preds = %289, %originalBBpart239
  %291 = load i8*, i8** %14, align 8
  %292 = getelementptr inbounds i8, i8* %291, i64 0
  %293 = load i8, i8* %292, align 1
  %294 = sext i8 %293 to i32
  %295 = icmp eq i32 %294, 115
  br i1 %295, label %296, label %347

; <label>:296:                                    ; preds = %290
  %297 = load i8*, i8** %14, align 8
  %298 = getelementptr inbounds i8, i8* %297, i64 1
  %299 = load i8, i8* %298, align 1
  %300 = sext i8 %299 to i32
  %301 = icmp eq i32 %300, 101
  br i1 %301, label %302, label %310

; <label>:302:                                    ; preds = %296
  %303 = load i8*, i8** %14, align 8
  %304 = call i32 @strcmp(i8* %303, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0)) #7
  %305 = icmp ne i32 %304, 0
  br i1 %305, label %306, label %330

; <label>:306:                                    ; preds = %302
  %307 = load i8*, i8** %14, align 8
  %308 = call i32 @strcmp(i8* %307, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0)) #7
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %310, label %330

; <label>:310:                                    ; preds = %306, %296
  %311 = load i8*, i8** %14, align 8
  %312 = getelementptr inbounds i8, i8* %311, i64 1
  %313 = load i8, i8* %312, align 1
  %314 = sext i8 %313 to i32
  %315 = icmp eq i32 %314, 105
  br i1 %315, label %316, label %320

; <label>:316:                                    ; preds = %310
  %317 = load i8*, i8** %14, align 8
  %318 = call i32 @strcmp(i8* %317, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)) #7
  %319 = icmp ne i32 %318, 0
  br i1 %319, label %320, label %330

; <label>:320:                                    ; preds = %316, %310
  %321 = load i8*, i8** %14, align 8
  %322 = getelementptr inbounds i8, i8* %321, i64 1
  %323 = load i8, i8* %322, align 1
  %324 = sext i8 %323 to i32
  %325 = icmp eq i32 %324, 97
  br i1 %325, label %326, label %333

; <label>:326:                                    ; preds = %320
  %327 = load i8*, i8** %14, align 8
  %328 = call i32 @strcmp(i8* %327, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0)) #7
  %329 = icmp ne i32 %328, 0
  br i1 %329, label %333, label %330

; <label>:330:                                    ; preds = %326, %316, %306, %302
  %331 = load i32, i32* %12, align 4
  %332 = or i32 %331, 32
  store i32 %332, i32* %12, align 4
  br label %333

; <label>:333:                                    ; preds = %330, %326, %320
  %334 = load i8*, i8** %14, align 8
  %335 = getelementptr inbounds i8, i8* %334, i64 1
  %336 = load i8, i8* %335, align 1
  %337 = sext i8 %336 to i32
  %338 = icmp eq i32 %337, 105
  br i1 %338, label %339, label %346

; <label>:339:                                    ; preds = %333
  %340 = load i8*, i8** %14, align 8
  %341 = call i32 @strcmp(i8* %340, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0)) #7
  %342 = icmp ne i32 %341, 0
  br i1 %342, label %346, label %343

; <label>:343:                                    ; preds = %339
  %344 = load i32, i32* %12, align 4
  %345 = or i32 %344, 64
  store i32 %345, i32* %12, align 4
  br label %346

; <label>:346:                                    ; preds = %343, %339, %333
  br label %693

; <label>:347:                                    ; preds = %290
  %348 = load i32, i32* @x.3
  %349 = load i32, i32* @y.4
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %originalBB49alteredBB, %347
  %356 = load i8*, i8** %14, align 8
  %357 = getelementptr inbounds i8, i8* %356, i64 0
  %358 = load i8, i8* %357, align 1
  %359 = sext i8 %358 to i32
  %360 = icmp eq i32 %359, 113
  %361 = load i32, i32* @x.3
  %362 = load i32, i32* @y.4
  %363 = sub i32 %361, 1
  %364 = mul i32 %361, %363
  %365 = urem i32 %364, 2
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %366, %367
  br i1 %368, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %360, label %369, label %395

; <label>:369:                                    ; preds = %originalBBpart251
  %370 = load i8*, i8** %14, align 8
  %371 = getelementptr inbounds i8, i8* %370, i64 1
  %372 = load i8, i8* %371, align 1
  %373 = sext i8 %372 to i32
  %374 = icmp eq i32 %373, 115
  br i1 %374, label %375, label %395

; <label>:375:                                    ; preds = %369
  %376 = load i32, i32* @x.3
  %377 = load i32, i32* @y.4
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %originalBB53alteredBB, %375
  %384 = load i8*, i8** %14, align 8
  %385 = call i32 @strcmp(i8* %384, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0)) #7
  %386 = icmp ne i32 %385, 0
  %387 = load i32, i32* @x.3
  %388 = load i32, i32* @y.4
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %386, label %395, label %411

; <label>:395:                                    ; preds = %originalBBpart255, %369, %originalBBpart251
  %396 = load i8*, i8** %14, align 8
  %397 = getelementptr inbounds i8, i8* %396, i64 0
  %398 = load i8, i8* %397, align 1
  %399 = sext i8 %398 to i32
  %400 = icmp eq i32 %399, 118
  br i1 %400, label %401, label %414

; <label>:401:                                    ; preds = %395
  %402 = load i8*, i8** %14, align 8
  %403 = getelementptr inbounds i8, i8* %402, i64 1
  %404 = load i8, i8* %403, align 1
  %405 = sext i8 %404 to i32
  %406 = icmp eq i32 %405, 102
  br i1 %406, label %407, label %414

; <label>:407:                                    ; preds = %401
  %408 = load i8*, i8** %14, align 8
  %409 = call i32 @strcmp(i8* %408, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0)) #7
  %410 = icmp ne i32 %409, 0
  br i1 %410, label %414, label %411

; <label>:411:                                    ; preds = %407, %originalBBpart255
  %412 = load i32, i32* %12, align 4
  %413 = or i32 %412, 32
  store i32 %413, i32* %12, align 4
  br label %692

; <label>:414:                                    ; preds = %407, %401, %395
  %415 = load i8*, i8** %14, align 8
  %416 = getelementptr inbounds i8, i8* %415, i64 0
  %417 = load i8, i8* %416, align 1
  %418 = sext i8 %417 to i32
  %419 = icmp eq i32 %418, 108
  br i1 %419, label %420, label %449

; <label>:420:                                    ; preds = %414
  %421 = load i8*, i8** %14, align 8
  %422 = getelementptr inbounds i8, i8* %421, i64 1
  %423 = load i8, i8* %422, align 1
  %424 = sext i8 %423 to i32
  %425 = icmp eq i32 %424, 111
  br i1 %425, label %426, label %449

; <label>:426:                                    ; preds = %420
  %427 = load i32, i32* @x.3
  %428 = load i32, i32* @y.4
  %429 = sub i32 %427, 1
  %430 = mul i32 %427, %429
  %431 = urem i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %432, %433
  br i1 %434, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %originalBB57alteredBB, %426
  %435 = load i8*, i8** %14, align 8
  %436 = call i32 @strcmp(i8* %435, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0)) #7
  %437 = icmp ne i32 %436, 0
  %438 = load i32, i32* @x.3
  %439 = load i32, i32* @y.4
  %440 = sub i32 %438, 1
  %441 = mul i32 %438, %440
  %442 = urem i32 %441, 2
  %443 = icmp eq i32 %442, 0
  %444 = icmp slt i32 %439, 10
  %445 = or i1 %443, %444
  br i1 %445, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br i1 %437, label %449, label %446

; <label>:446:                                    ; preds = %originalBBpart259
  %447 = load i32, i32* %12, align 4
  %448 = or i32 %447, 64
  store i32 %448, i32* %12, align 4
  br label %691

; <label>:449:                                    ; preds = %originalBBpart259, %420, %414
  %450 = load i8*, i8** %14, align 8
  %451 = getelementptr inbounds i8, i8* %450, i64 0
  %452 = load i8, i8* %451, align 1
  %453 = sext i8 %452 to i32
  %454 = icmp eq i32 %453, 102
  br i1 %454, label %455, label %465

; <label>:455:                                    ; preds = %449
  %456 = load i8*, i8** %14, align 8
  %457 = getelementptr inbounds i8, i8* %456, i64 1
  %458 = load i8, i8* %457, align 1
  %459 = sext i8 %458 to i32
  %460 = icmp eq i32 %459, 111
  br i1 %460, label %461, label %465

; <label>:461:                                    ; preds = %455
  %462 = load i8*, i8** %14, align 8
  %463 = call i32 @strcmp(i8* %462, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0)) #7
  %464 = icmp ne i32 %463, 0
  br i1 %464, label %465, label %589

; <label>:465:                                    ; preds = %461, %455, %449
  %466 = load i8*, i8** %13, align 8
  %467 = getelementptr inbounds i8, i8* %466, i64 0
  %468 = load i8, i8* %467, align 1
  %469 = sext i8 %468 to i32
  %470 = icmp eq i32 %469, 95
  br i1 %470, label %471, label %497

; <label>:471:                                    ; preds = %465
  %472 = load i8*, i8** %13, align 8
  %473 = getelementptr inbounds i8, i8* %472, i64 1
  %474 = load i8, i8* %473, align 1
  %475 = sext i8 %474 to i32
  %476 = icmp eq i32 %475, 95
  br i1 %476, label %477, label %497

; <label>:477:                                    ; preds = %471
  %478 = load i32, i32* @x.3
  %479 = load i32, i32* @y.4
  %480 = sub i32 %478, 1
  %481 = mul i32 %478, %480
  %482 = urem i32 %481, 2
  %483 = icmp eq i32 %482, 0
  %484 = icmp slt i32 %479, 10
  %485 = or i1 %483, %484
  br i1 %485, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %originalBB61alteredBB, %477
  %486 = load i8*, i8** %14, align 8
  %487 = call i32 @strcmp(i8* %486, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0)) #7
  %488 = icmp ne i32 %487, 0
  %489 = load i32, i32* @x.3
  %490 = load i32, i32* @y.4
  %491 = sub i32 %489, 1
  %492 = mul i32 %489, %491
  %493 = urem i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = icmp slt i32 %490, 10
  %496 = or i1 %494, %495
  br i1 %496, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br i1 %488, label %497, label %589

; <label>:497:                                    ; preds = %originalBBpart263, %471, %465
  %498 = load i8*, i8** %14, align 8
  %499 = getelementptr inbounds i8, i8* %498, i64 0
  %500 = load i8, i8* %499, align 1
  %501 = sext i8 %500 to i32
  %502 = icmp eq i32 %501, 101
  br i1 %502, label %503, label %592

; <label>:503:                                    ; preds = %497
  %504 = load i8*, i8** %14, align 8
  %505 = getelementptr inbounds i8, i8* %504, i64 1
  %506 = load i8, i8* %505, align 1
  %507 = sext i8 %506 to i32
  %508 = icmp eq i32 %507, 120
  br i1 %508, label %509, label %592

; <label>:509:                                    ; preds = %503
  %510 = load i32, i32* @x.3
  %511 = load i32, i32* @y.4
  %512 = sub i32 %510, 1
  %513 = mul i32 %510, %512
  %514 = urem i32 %513, 2
  %515 = icmp eq i32 %514, 0
  %516 = icmp slt i32 %511, 10
  %517 = or i1 %515, %516
  br i1 %517, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %originalBB65alteredBB, %509
  %518 = load i8*, i8** %14, align 8
  %519 = getelementptr inbounds i8, i8* %518, i64 2
  %520 = load i8, i8* %519, align 1
  %521 = sext i8 %520 to i32
  %522 = icmp eq i32 %521, 101
  %523 = load i32, i32* @x.3
  %524 = load i32, i32* @y.4
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br i1 %522, label %531, label %592

; <label>:531:                                    ; preds = %originalBBpart267
  %532 = load i8*, i8** %14, align 8
  %533 = getelementptr inbounds i8, i8* %532, i64 3
  %534 = load i8, i8* %533, align 1
  %535 = sext i8 %534 to i32
  %536 = icmp eq i32 %535, 99
  br i1 %536, label %537, label %592

; <label>:537:                                    ; preds = %531
  %538 = load i8*, i8** %14, align 8
  %539 = getelementptr inbounds i8, i8* %538, i64 4
  %540 = load i8, i8* %539, align 1
  %541 = sext i8 %540 to i32
  %542 = icmp eq i32 %541, 108
  br i1 %542, label %565, label %543

; <label>:543:                                    ; preds = %537
  %544 = load i32, i32* @x.3
  %545 = load i32, i32* @y.4
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %originalBB69alteredBB, %543
  %552 = load i8*, i8** %14, align 8
  %553 = getelementptr inbounds i8, i8* %552, i64 4
  %554 = load i8, i8* %553, align 1
  %555 = sext i8 %554 to i32
  %556 = icmp eq i32 %555, 118
  %557 = load i32, i32* @x.3
  %558 = load i32, i32* @y.4
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br i1 %556, label %565, label %592

; <label>:565:                                    ; preds = %originalBBpart271, %537
  %566 = load i8*, i8** %14, align 8
  %567 = getelementptr inbounds i8, i8* %566, i64 5
  %568 = load i8, i8* %567, align 1
  %569 = sext i8 %568 to i32
  %570 = icmp eq i32 %569, 0
  br i1 %570, label %589, label %571

; <label>:571:                                    ; preds = %565
  %572 = load i8*, i8** %14, align 8
  %573 = getelementptr inbounds i8, i8* %572, i64 5
  %574 = load i8, i8* %573, align 1
  %575 = sext i8 %574 to i32
  %576 = icmp eq i32 %575, 112
  br i1 %576, label %583, label %577

; <label>:577:                                    ; preds = %571
  %578 = load i8*, i8** %14, align 8
  %579 = getelementptr inbounds i8, i8* %578, i64 5
  %580 = load i8, i8* %579, align 1
  %581 = sext i8 %580 to i32
  %582 = icmp eq i32 %581, 101
  br i1 %582, label %583, label %592

; <label>:583:                                    ; preds = %577, %571
  %584 = load i8*, i8** %14, align 8
  %585 = getelementptr inbounds i8, i8* %584, i64 6
  %586 = load i8, i8* %585, align 1
  %587 = sext i8 %586 to i32
  %588 = icmp eq i32 %587, 0
  br i1 %588, label %589, label %592

; <label>:589:                                    ; preds = %583, %565, %originalBBpart263, %461
  %590 = load i32, i32* %12, align 4
  %591 = or i32 %590, 128
  store i32 %591, i32* %12, align 4
  br label %674

; <label>:592:                                    ; preds = %583, %577, %originalBBpart271, %531, %originalBBpart267, %503, %497
  %593 = load %union.tree_node*, %union.tree_node** %11, align 8
  %594 = bitcast %union.tree_node* %593 to %struct.tree_common*
  %595 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %594, i32 0, i32 1
  %596 = load %union.tree_node*, %union.tree_node** %595, align 8
  %597 = bitcast %union.tree_node* %596 to %struct.tree_common*
  %598 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %597, i32 0, i32 1
  %599 = load %union.tree_node*, %union.tree_node** %598, align 8
  %600 = bitcast %union.tree_node* %599 to %struct.tree_type*
  %601 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %600, i32 0, i32 6
  %602 = load i32, i32* %601, align 4
  %603 = lshr i32 %602, 9
  %604 = and i32 %603, 127
  %605 = load i32, i32* @target_flags, align 4
  %606 = and i32 %605, 33554432
  %607 = icmp ne i32 %606, 0
  %608 = select i1 %607, i32 5, i32 4
  %609 = icmp eq i32 %604, %608
  br i1 %609, label %610, label %657

; <label>:610:                                    ; preds = %592
  %611 = load i8*, i8** %14, align 8
  %612 = call i32 @strcmp(i8* %611, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0)) #7
  %613 = icmp ne i32 %612, 0
  br i1 %613, label %614, label %654

; <label>:614:                                    ; preds = %610
  %615 = load i32, i32* @x.3
  %616 = load i32, i32* @y.4
  %617 = sub i32 %615, 1
  %618 = mul i32 %615, %617
  %619 = urem i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = icmp slt i32 %616, 10
  %622 = or i1 %620, %621
  br i1 %622, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %originalBB73alteredBB, %614
  %623 = load i8*, i8** %14, align 8
  %624 = call i32 @strcmp(i8* %623, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)) #7
  %625 = icmp ne i32 %624, 0
  %626 = load i32, i32* @x.3
  %627 = load i32, i32* @y.4
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br i1 %625, label %634, label %654

; <label>:634:                                    ; preds = %originalBBpart275
  %635 = load i32, i32* @x.3
  %636 = load i32, i32* @y.4
  %637 = sub i32 %635, 1
  %638 = mul i32 %635, %637
  %639 = urem i32 %638, 2
  %640 = icmp eq i32 %639, 0
  %641 = icmp slt i32 %636, 10
  %642 = or i1 %640, %641
  br i1 %642, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %originalBB77alteredBB, %634
  %643 = load i8*, i8** %14, align 8
  %644 = call i32 @strcmp(i8* %643, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0)) #7
  %645 = icmp ne i32 %644, 0
  %646 = load i32, i32* @x.3
  %647 = load i32, i32* @y.4
  %648 = sub i32 %646, 1
  %649 = mul i32 %646, %648
  %650 = urem i32 %649, 2
  %651 = icmp eq i32 %650, 0
  %652 = icmp slt i32 %647, 10
  %653 = or i1 %651, %652
  br i1 %653, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br i1 %645, label %657, label %654

; <label>:654:                                    ; preds = %originalBBpart279, %originalBBpart275, %610
  %655 = load i32, i32* %12, align 4
  %656 = or i32 %655, 4
  store i32 %656, i32* %12, align 4
  br label %657

; <label>:657:                                    ; preds = %654, %originalBBpart279, %592
  %658 = load i32, i32* @x.3
  %659 = load i32, i32* @y.4
  %660 = sub i32 %658, 1
  %661 = mul i32 %658, %660
  %662 = urem i32 %661, 2
  %663 = icmp eq i32 %662, 0
  %664 = icmp slt i32 %659, 10
  %665 = or i1 %663, %664
  br i1 %665, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %originalBB81alteredBB, %657
  %666 = load i32, i32* @x.3
  %667 = load i32, i32* @y.4
  %668 = sub i32 %666, 1
  %669 = mul i32 %666, %668
  %670 = urem i32 %669, 2
  %671 = icmp eq i32 %670, 0
  %672 = icmp slt i32 %667, 10
  %673 = or i1 %671, %672
  br i1 %673, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %674

; <label>:674:                                    ; preds = %originalBBpart283, %589
  %675 = load i32, i32* @x.3
  %676 = load i32, i32* @y.4
  %677 = sub i32 %675, 1
  %678 = mul i32 %675, %677
  %679 = urem i32 %678, 2
  %680 = icmp eq i32 %679, 0
  %681 = icmp slt i32 %676, 10
  %682 = or i1 %680, %681
  br i1 %682, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %originalBB85alteredBB, %674
  %683 = load i32, i32* @x.3
  %684 = load i32, i32* @y.4
  %685 = sub i32 %683, 1
  %686 = mul i32 %683, %685
  %687 = urem i32 %686, 2
  %688 = icmp eq i32 %687, 0
  %689 = icmp slt i32 %684, 10
  %690 = or i1 %688, %689
  br i1 %690, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %691

; <label>:691:                                    ; preds = %originalBBpart287, %446
  br label %692

; <label>:692:                                    ; preds = %691, %411
  br label %693

; <label>:693:                                    ; preds = %692, %346
  br label %694

; <label>:694:                                    ; preds = %693, %originalBBpart213, %45, %35, %29, %26, %originalBBpart2
  %695 = load i32, i32* @x.3
  %696 = load i32, i32* @y.4
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %originalBB89alteredBB, %694
  %703 = load i32, i32* %12, align 4
  %704 = load i32, i32* @x.3
  %705 = load i32, i32* @y.4
  %706 = sub i32 %704, 1
  %707 = mul i32 %704, %706
  %708 = urem i32 %707, 2
  %709 = icmp eq i32 %708, 0
  %710 = icmp slt i32 %705, 10
  %711 = or i1 %709, %710
  br i1 %711, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  ret i32 %703

originalBBalteredBB:                              ; preds = %originalBB, %2
  %712 = alloca %union.tree_node*, align 8
  %713 = alloca i32, align 4
  %714 = alloca i8*, align 8
  %715 = alloca i8*, align 8
  store %union.tree_node* %0, %union.tree_node** %712, align 8
  store i32 %1, i32* %713, align 4
  %716 = load i32, i32* %713, align 4
  %_ = shl i32 %716, 4
  %_1 = sub i32 %716, 4
  %gen = mul i32 %_1, 4
  %717 = and i32 %716, 4
  %718 = icmp ne i32 %717, 0
  br label %originalBB

originalBB2alteredBB:                             ; preds = %originalBB2, %51
  %719 = load %union.tree_node*, %union.tree_node** %11, align 8
  %720 = bitcast %union.tree_node* %719 to %struct.tree_common*
  %721 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %720, i32 0, i32 2
  %722 = load i32, i32* %721, align 8
  %_3 = sub i32 0, %722
  %gen4 = add i32 %_3, 19
  %723 = lshr i32 %722, 19
  %_5 = shl i32 %723, 1
  %_6 = shl i32 %723, 1
  %_7 = sub i32 0, %723
  %gen8 = add i32 %_7, 1
  %_9 = shl i32 %723, 1
  %_10 = sub i32 0, %723
  %gen11 = add i32 %_10, 1
  %724 = and i32 %723, 1
  %725 = icmp ne i32 %724, 0
  br label %originalBB2

originalBB15alteredBB:                            ; preds = %originalBB15, %75
  %726 = load %union.tree_node*, %union.tree_node** %11, align 8
  %727 = bitcast %union.tree_node* %726 to %struct.tree_decl*
  %728 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %727, i32 0, i32 8
  %729 = load %union.tree_node*, %union.tree_node** %728, align 8
  %730 = bitcast %union.tree_node* %729 to %struct.tree_identifier*
  %731 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %730, i32 0, i32 1
  %732 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %731, i32 0, i32 1
  %733 = load i8*, i8** %732, align 8
  store i8* %733, i8** %13, align 8
  %734 = load i8*, i8** %13, align 8
  store i8* %734, i8** %14, align 8
  %735 = load %union.tree_node*, %union.tree_node** %11, align 8
  %736 = bitcast %union.tree_node* %735 to %struct.tree_decl*
  %737 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %736, i32 0, i32 8
  %738 = load %union.tree_node*, %union.tree_node** %737, align 8
  %739 = bitcast %union.tree_node* %738 to %struct.tree_identifier*
  %740 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %739, i32 0, i32 1
  %741 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %740, i32 0, i32 0
  %742 = load i32, i32* %741, align 8
  %743 = icmp eq i32 %742, 6
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %116
  %744 = load i8*, i8** %13, align 8
  %745 = call i32 @strcmp(i8* %744, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)) #7
  %746 = icmp ne i32 %745, 0
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %136
  %747 = load %union.tree_node*, %union.tree_node** %11, align 8
  %748 = bitcast %union.tree_node* %747 to %struct.tree_decl*
  %749 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %748, i32 0, i32 8
  %750 = load %union.tree_node*, %union.tree_node** %749, align 8
  %751 = bitcast %union.tree_node* %750 to %struct.tree_identifier*
  %752 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %751, i32 0, i32 1
  %753 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %752, i32 0, i32 0
  %754 = load i32, i32* %753, align 8
  %755 = icmp eq i32 %754, 16
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %168
  %756 = load i8*, i8** %13, align 8
  %757 = call i32 @strcmp(i8* %756, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0)) #7
  %758 = icmp ne i32 %757, 0
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %188
  %759 = load i32, i32* %12, align 4
  %_32 = shl i32 %759, 8
  %_33 = shl i32 %759, 8
  %760 = or i32 %759, 8
  store i32 %760, i32* %12, align 4
  br label %originalBB31

originalBB37alteredBB:                            ; preds = %originalBB37, %207
  %761 = load i8*, i8** %13, align 8
  %762 = getelementptr inbounds i8, i8* %761, i64 0
  %763 = load i8, i8* %762, align 1
  %764 = sext i8 %763 to i32
  %765 = icmp eq i32 %764, 95
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %235
  %766 = load i8*, i8** %13, align 8
  %767 = getelementptr inbounds i8, i8* %766, i64 2
  %768 = load i8, i8* %767, align 1
  %769 = sext i8 %768 to i32
  %770 = icmp eq i32 %769, 120
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %257
  %771 = load i8*, i8** %14, align 8
  %772 = getelementptr inbounds i8, i8* %771, i64 3
  store i8* %772, i8** %14, align 8
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %347
  %773 = load i8*, i8** %14, align 8
  %774 = getelementptr inbounds i8, i8* %773, i64 0
  %775 = load i8, i8* %774, align 1
  %776 = sext i8 %775 to i32
  %777 = icmp eq i32 %776, 113
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %375
  %778 = load i8*, i8** %14, align 8
  %779 = call i32 @strcmp(i8* %778, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0)) #7
  %780 = icmp ne i32 %779, 0
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %426
  %781 = load i8*, i8** %14, align 8
  %782 = call i32 @strcmp(i8* %781, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0)) #7
  %783 = icmp ne i32 %782, 0
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %477
  %784 = load i8*, i8** %14, align 8
  %785 = call i32 @strcmp(i8* %784, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0)) #7
  %786 = icmp ne i32 %785, 0
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %509
  %787 = load i8*, i8** %14, align 8
  %788 = getelementptr inbounds i8, i8* %787, i64 2
  %789 = load i8, i8* %788, align 1
  %790 = sext i8 %789 to i32
  %791 = icmp eq i32 %790, 101
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %543
  %792 = load i8*, i8** %14, align 8
  %793 = getelementptr inbounds i8, i8* %792, i64 4
  %794 = load i8, i8* %793, align 1
  %795 = sext i8 %794 to i32
  %796 = icmp eq i32 %795, 118
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %614
  %797 = load i8*, i8** %14, align 8
  %798 = call i32 @strcmp(i8* %797, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)) #7
  %799 = icmp ne i32 %798, 0
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %634
  %800 = load i8*, i8** %14, align 8
  %801 = call i32 @strcmp(i8* %800, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0)) #7
  %802 = icmp ne i32 %801, 0
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %657
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %674
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %694
  %803 = load i32, i32* %12, align 4
  br label %originalBB89
}

; Function Attrs: noinline nounwind uwtable
define %struct.rtx_def* @expand_call(%union.tree_node*, %struct.rtx_def*, i32) #0 {
  %4 = alloca %struct.rtx_def*, align 8
  %5 = alloca %union.tree_node*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %union.tree_node*, align 8
  %9 = alloca %struct.rtx_def*, align 8
  %10 = alloca %struct.rtx_def*, align 8
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca %struct.rtx_def*, align 8
  %13 = alloca %union.tree_node*, align 8
  %14 = alloca %union.tree_node*, align 8
  %15 = alloca %struct.rtx_def*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %struct.rtx_def*, align 8
  %20 = alloca %struct.rtx_def*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca %struct.arg_data*, align 8
  %27 = alloca %struct.args_size, align 8
  %28 = alloca %struct.args_size, align 8
  %29 = alloca i32, align 4
  %30 = alloca %struct.ix86_args, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca %struct.rtx_def*, align 8
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca %struct.rtx_def*, align 8
  %40 = alloca i32, align 4
  %41 = alloca i8*, align 8
  %42 = alloca i32, align 4
  %43 = alloca %struct.rtx_def*, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca %struct.rtx_def*, align 8
  %48 = alloca %union.tree_node*, align 8
  %49 = alloca i32, align 4
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca %struct.rtx_def*, align 8
  %53 = alloca %struct.rtx_def*, align 8
  %54 = alloca %struct.rtx_def*, align 8
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca %union.tree_node*, align 8
  %58 = alloca i32, align 4
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca i32, align 4
  %63 = alloca %struct.rtx_def*, align 8
  %64 = alloca %struct.rtx_def*, align 8
  %65 = alloca %struct.rtx_def*, align 8
  %66 = alloca i32, align 4
  %67 = alloca %struct.rtx_def*, align 8
  %68 = alloca %struct.rtx_def*, align 8
  %69 = alloca %struct.rtx_def*, align 8
  %70 = alloca %struct.rtx_def*, align 8
  %71 = alloca %struct.rtx_def*, align 8
  %72 = alloca %struct.rtx_def*, align 8
  %73 = alloca %struct.rtx_def*, align 8
  %74 = alloca %struct.rtx_def*, align 8
  %75 = alloca %struct.rtx_def*, align 8
  %76 = alloca %struct.rtx_def*, align 8
  %77 = alloca %union.tree_node*, align 8
  %78 = alloca i32, align 4
  %79 = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %0, %union.tree_node** %5, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %6, align 8
  store i32 %2, i32* %7, align 4
  %80 = load %union.tree_node*, %union.tree_node** %5, align 8
  %81 = bitcast %union.tree_node* %80 to %struct.tree_exp*
  %82 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %81, i32 0, i32 2
  %83 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %82, i64 0, i64 1
  %84 = load %union.tree_node*, %union.tree_node** %83, align 8
  store %union.tree_node* %84, %union.tree_node** %8, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %10, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %11, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %12, align 8
  store %union.tree_node* null, %union.tree_node** %14, align 8
  store i32 1, i32* %16, align 4
  store i32 1, i32* %17, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %20, align 8
  store i32 0, i32* %21, align 4
  store i64 0, i64* %22, align 8
  store i32 0, i32* %23, align 4
  %85 = load i32, i32* @target_flags, align 4
  %86 = and i32 %85, 2048
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %93, label %88

; <label>:88:                                     ; preds = %3
  %89 = load i32, i32* @target_flags, align 4
  %90 = and i32 %89, 4096
  %91 = icmp ne i32 %90, 0
  %92 = xor i1 %91, true
  br label %93

; <label>:93:                                     ; preds = %88, %3
  %94 = phi i1 [ false, %3 ], [ %92, %88 ]
  %95 = xor i1 %94, true
  %96 = zext i1 %95 to i32
  store i32 %96, i32* %32, align 4
  store i32 0, i32* %33, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %34, align 8
  store i32 0, i32* %35, align 4
  store i32 0, i32* %36, align 4
  store i32 -1, i32* %37, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %39, align 8
  %97 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  store i32 %97, i32* %40, align 4
  %98 = load i8*, i8** @stack_usage_map, align 8
  store i8* %98, i8** %41, align 8
  store i32 0, i32* %42, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %43, align 8
  store i32 0, i32* %44, align 4
  %99 = load %struct.function*, %struct.function** @cfun, align 8
  %100 = getelementptr inbounds %struct.function, %struct.function* %99, i32 0, i32 2
  %101 = load %struct.expr_status*, %struct.expr_status** %100, align 8
  %102 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %101, i32 0, i32 1
  %103 = load i32, i32* %102, align 4
  store i32 %103, i32* %45, align 4
  %104 = load %union.tree_node*, %union.tree_node** %5, align 8
  %105 = bitcast %union.tree_node* %104 to %struct.tree_exp*
  %106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %105, i32 0, i32 2
  %107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %106, i64 0, i64 0
  %108 = load %union.tree_node*, %union.tree_node** %107, align 8
  store %union.tree_node* %108, %union.tree_node** %48, align 8
  %109 = load %union.tree_node*, %union.tree_node** %5, align 8
  %110 = bitcast %union.tree_node* %109 to %struct.tree_common*
  %111 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %110, i32 0, i32 2
  %112 = load i32, i32* %111, align 8
  %113 = lshr i32 %112, 17
  %114 = and i32 %113, 1
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %119

; <label>:116:                                    ; preds = %93
  %117 = load i32, i32* %35, align 4
  %118 = or i32 %117, 16
  store i32 %118, i32* %35, align 4
  br label %119

; <label>:119:                                    ; preds = %116, %93
  %120 = load %union.tree_node*, %union.tree_node** %5, align 8
  %121 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %120)
  store %union.tree_node* %121, %union.tree_node** %14, align 8
  %122 = load %union.tree_node*, %union.tree_node** %14, align 8
  %123 = icmp ne %union.tree_node* %122, null
  br i1 %123, label %124, label %260

; <label>:124:                                    ; preds = %119
  %125 = load i32, i32* @flag_no_inline, align 4
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %158, label %127

; <label>:127:                                    ; preds = %124
  %128 = load %union.tree_node*, %union.tree_node** %14, align 8
  %129 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %130 = icmp ne %union.tree_node* %128, %129
  br i1 %130, label %131, label %158

; <label>:131:                                    ; preds = %127
  %132 = load %union.tree_node*, %union.tree_node** %14, align 8
  %133 = bitcast %union.tree_node* %132 to %struct.tree_decl*
  %134 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %133, i32 0, i32 5
  %135 = bitcast i48* %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = lshr i64 %136, 11
  %138 = and i64 %137, 1
  %139 = trunc i64 %138 to i32
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %141, label %158

; <label>:141:                                    ; preds = %131
  %142 = load %union.tree_node*, %union.tree_node** %14, align 8
  %143 = bitcast %union.tree_node* %142 to %struct.tree_decl*
  %144 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %143, i32 0, i32 19
  %145 = bitcast %union.anon.1* %144 to %struct.function**
  %146 = load %struct.function*, %struct.function** %145, align 8
  %147 = icmp ne %struct.function* %146, null
  br i1 %147, label %148, label %158

; <label>:148:                                    ; preds = %141
  %149 = load %union.tree_node*, %union.tree_node** %14, align 8
  %150 = bitcast %union.tree_node* %149 to %struct.tree_decl*
  %151 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %150, i32 0, i32 19
  %152 = bitcast %union.anon.1* %151 to %struct.function**
  %153 = load %struct.function*, %struct.function** %152, align 8
  %154 = getelementptr inbounds %struct.function, %struct.function* %153, i32 0, i32 44
  %155 = load i32, i32* %154, align 8
  %156 = icmp ne i32 %155, 0
  br i1 %156, label %157, label %158

; <label>:157:                                    ; preds = %148
  store i32 1, i32* %36, align 4
  br label %255

; <label>:158:                                    ; preds = %148, %141, %131, %127, %124
  %159 = load i32, i32* @x.5
  %160 = load i32, i32* @y.6
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %158
  %167 = load %union.tree_node*, %union.tree_node** %14, align 8
  %168 = bitcast %union.tree_node* %167 to %struct.tree_common*
  %169 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %168, i32 0, i32 2
  %170 = load i32, i32* %169, align 8
  %171 = lshr i32 %170, 10
  %172 = and i32 %171, 1
  %173 = icmp ne i32 %172, 0
  %174 = load i32, i32* @x.5
  %175 = load i32, i32* @y.6
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %173, label %254, label %182

; <label>:182:                                    ; preds = %originalBBpart2
  %183 = load %union.tree_node*, %union.tree_node** %14, align 8
  %184 = bitcast %union.tree_node* %183 to %struct.tree_decl*
  %185 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %184, i32 0, i32 5
  %186 = bitcast i48* %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = lshr i64 %187, 11
  %189 = and i64 %188, 1
  %190 = trunc i64 %189 to i32
  %191 = icmp ne i32 %190, 0
  br i1 %191, label %192, label %235

; <label>:192:                                    ; preds = %182
  %193 = load i32, i32* @warn_inline, align 4
  %194 = icmp ne i32 %193, 0
  br i1 %194, label %195, label %235

; <label>:195:                                    ; preds = %192
  %196 = load i32, i32* @flag_no_inline, align 4
  %197 = icmp ne i32 %196, 0
  br i1 %197, label %235, label %198

; <label>:198:                                    ; preds = %195
  %199 = load i32, i32* @x.5
  %200 = load i32, i32* @y.6
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %originalBB13alteredBB, %198
  %207 = load i32, i32* @optimize, align 4
  %208 = icmp sgt i32 %207, 0
  %209 = load i32, i32* @x.5
  %210 = load i32, i32* @y.6
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br i1 %208, label %217, label %235

; <label>:217:                                    ; preds = %originalBBpart215
  %218 = load i32, i32* @x.5
  %219 = load i32, i32* @y.6
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %217
  %226 = load %union.tree_node*, %union.tree_node** %14, align 8
  call void (%union.tree_node*, i8*, ...) @warning_with_decl(%union.tree_node* %226, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0))
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  %227 = load i32, i32* @x.5
  %228 = load i32, i32* @y.6
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %235

; <label>:235:                                    ; preds = %originalBBpart219, %originalBBpart215, %195, %192, %182
  %236 = load i32, i32* @x.5
  %237 = load i32, i32* @y.6
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %originalBB21alteredBB, %235
  %244 = load %union.tree_node*, %union.tree_node** %14, align 8
  %245 = call i32 @mark_addressable(%union.tree_node* %244)
  %246 = load i32, i32* @x.5
  %247 = load i32, i32* @y.6
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %254

; <label>:254:                                    ; preds = %originalBBpart223, %originalBBpart2
  br label %255

; <label>:255:                                    ; preds = %254, %157
  %256 = load %union.tree_node*, %union.tree_node** %14, align 8
  %257 = call i32 @flags_from_decl_or_type(%union.tree_node* %256)
  %258 = load i32, i32* %35, align 4
  %259 = or i32 %258, %257
  store i32 %259, i32* %35, align 4
  br label %271

; <label>:260:                                    ; preds = %119
  %261 = load %union.tree_node*, %union.tree_node** %48, align 8
  %262 = bitcast %union.tree_node* %261 to %struct.tree_common*
  %263 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %262, i32 0, i32 1
  %264 = load %union.tree_node*, %union.tree_node** %263, align 8
  %265 = bitcast %union.tree_node* %264 to %struct.tree_common*
  %266 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %265, i32 0, i32 1
  %267 = load %union.tree_node*, %union.tree_node** %266, align 8
  %268 = call i32 @flags_from_decl_or_type(%union.tree_node* %267)
  %269 = load i32, i32* %35, align 4
  %270 = or i32 %269, %268
  store i32 %270, i32* %35, align 4
  br label %271

; <label>:271:                                    ; preds = %260, %255
  %272 = load i32, i32* @x.5
  %273 = load i32, i32* @y.6
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %271
  store i32 0, i32* %33, align 4
  %280 = load i32, i32* %33, align 4
  %281 = icmp sgt i32 %280, 0
  %282 = load i32, i32* @x.5
  %283 = load i32, i32* @y.6
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %281, label %290, label %315

; <label>:290:                                    ; preds = %originalBBpart227
  %291 = load i32, i32* @x.5
  %292 = load i32, i32* @y.6
  %293 = sub i32 %291, 1
  %294 = mul i32 %291, %293
  %295 = urem i32 %294, 2
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %296, %297
  br i1 %298, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %290
  %299 = load i32, i32* @target_flags, align 4
  %300 = and i32 %299, 2048
  %301 = icmp ne i32 %300, 0
  %302 = load i32, i32* @x.5
  %303 = load i32, i32* @y.6
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBBpart239, label %originalBB29alteredBB

originalBBpart239:                                ; preds = %originalBB29
  br i1 %301, label %315, label %310

; <label>:310:                                    ; preds = %originalBBpart239
  %311 = load i32, i32* @target_flags, align 4
  %312 = and i32 %311, 4096
  %313 = icmp ne i32 %312, 0
  br i1 %313, label %315, label %314

; <label>:314:                                    ; preds = %310
  store i32 1, i32* %32, align 4
  br label %315

; <label>:315:                                    ; preds = %314, %310, %originalBBpart239, %originalBBpart227
  %316 = load i32, i32* @warn_aggregate_return, align 4
  %317 = icmp ne i32 %316, 0
  br i1 %317, label %318, label %449

; <label>:318:                                    ; preds = %315
  %319 = load i32, i32* @x.5
  %320 = load i32, i32* @y.6
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %318
  %327 = load %union.tree_node*, %union.tree_node** %5, align 8
  %328 = bitcast %union.tree_node* %327 to %struct.tree_common*
  %329 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %328, i32 0, i32 1
  %330 = load %union.tree_node*, %union.tree_node** %329, align 8
  %331 = bitcast %union.tree_node* %330 to %struct.tree_common*
  %332 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %331, i32 0, i32 2
  %333 = load i32, i32* %332, align 8
  %334 = and i32 %333, 255
  %335 = icmp eq i32 %334, 18
  %336 = load i32, i32* @x.5
  %337 = load i32, i32* @y.6
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart249, label %originalBB41alteredBB

originalBBpart249:                                ; preds = %originalBB41
  br i1 %335, label %432, label %344

; <label>:344:                                    ; preds = %originalBBpart249
  %345 = load %union.tree_node*, %union.tree_node** %5, align 8
  %346 = bitcast %union.tree_node* %345 to %struct.tree_common*
  %347 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %346, i32 0, i32 1
  %348 = load %union.tree_node*, %union.tree_node** %347, align 8
  %349 = bitcast %union.tree_node* %348 to %struct.tree_common*
  %350 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %349, i32 0, i32 2
  %351 = load i32, i32* %350, align 8
  %352 = and i32 %351, 255
  %353 = icmp eq i32 %352, 20
  br i1 %353, label %432, label %354

; <label>:354:                                    ; preds = %344
  %355 = load i32, i32* @x.5
  %356 = load i32, i32* @y.6
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %originalBB51alteredBB, %354
  %363 = load %union.tree_node*, %union.tree_node** %5, align 8
  %364 = bitcast %union.tree_node* %363 to %struct.tree_common*
  %365 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %364, i32 0, i32 1
  %366 = load %union.tree_node*, %union.tree_node** %365, align 8
  %367 = bitcast %union.tree_node* %366 to %struct.tree_common*
  %368 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %367, i32 0, i32 2
  %369 = load i32, i32* %368, align 8
  %370 = and i32 %369, 255
  %371 = icmp eq i32 %370, 21
  %372 = load i32, i32* @x.5
  %373 = load i32, i32* @y.6
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBBpart264, label %originalBB51alteredBB

originalBBpart264:                                ; preds = %originalBB51
  br i1 %371, label %432, label %380

; <label>:380:                                    ; preds = %originalBBpart264
  %381 = load i32, i32* @x.5
  %382 = load i32, i32* @y.6
  %383 = sub i32 %381, 1
  %384 = mul i32 %381, %383
  %385 = urem i32 %384, 2
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %386, %387
  br i1 %388, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %380
  %389 = load %union.tree_node*, %union.tree_node** %5, align 8
  %390 = bitcast %union.tree_node* %389 to %struct.tree_common*
  %391 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %390, i32 0, i32 1
  %392 = load %union.tree_node*, %union.tree_node** %391, align 8
  %393 = bitcast %union.tree_node* %392 to %struct.tree_common*
  %394 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %393, i32 0, i32 2
  %395 = load i32, i32* %394, align 8
  %396 = and i32 %395, 255
  %397 = icmp eq i32 %396, 22
  %398 = load i32, i32* @x.5
  %399 = load i32, i32* @y.6
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %originalBBpart286, label %originalBB66alteredBB

originalBBpart286:                                ; preds = %originalBB66
  br i1 %397, label %432, label %406

; <label>:406:                                    ; preds = %originalBBpart286
  %407 = load i32, i32* @x.5
  %408 = load i32, i32* @y.6
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %originalBB88alteredBB, %406
  %415 = load %union.tree_node*, %union.tree_node** %5, align 8
  %416 = bitcast %union.tree_node* %415 to %struct.tree_common*
  %417 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %416, i32 0, i32 1
  %418 = load %union.tree_node*, %union.tree_node** %417, align 8
  %419 = bitcast %union.tree_node* %418 to %struct.tree_common*
  %420 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %419, i32 0, i32 2
  %421 = load i32, i32* %420, align 8
  %422 = and i32 %421, 255
  %423 = icmp eq i32 %422, 19
  %424 = load i32, i32* @x.5
  %425 = load i32, i32* @y.6
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBBpart292, label %originalBB88alteredBB

originalBBpart292:                                ; preds = %originalBB88
  br i1 %423, label %432, label %449

; <label>:432:                                    ; preds = %originalBBpart292, %originalBBpart286, %originalBBpart264, %344, %originalBBpart249
  %433 = load i32, i32* @x.5
  %434 = load i32, i32* @y.6
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %originalBB94alteredBB, %432
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0))
  %441 = load i32, i32* @x.5
  %442 = load i32, i32* @y.6
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br label %449

; <label>:449:                                    ; preds = %originalBBpart296, %originalBBpart292, %315
  %450 = load i32, i32* @x.5
  %451 = load i32, i32* @y.6
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %originalBB98alteredBB, %449
  %458 = load %union.tree_node*, %union.tree_node** %5, align 8
  %459 = call i32 @aggregate_value_p(%union.tree_node* %458)
  %460 = icmp ne i32 %459, 0
  %461 = load i32, i32* @x.5
  %462 = load i32, i32* @y.6
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br i1 %460, label %469, label %520

; <label>:469:                                    ; preds = %originalBBpart2100
  %470 = load i32, i32* %35, align 4
  %471 = and i32 %470, -4610
  store i32 %471, i32* %35, align 4
  %472 = load %union.tree_node*, %union.tree_node** %5, align 8
  %473 = bitcast %union.tree_node* %472 to %struct.tree_common*
  %474 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %473, i32 0, i32 1
  %475 = load %union.tree_node*, %union.tree_node** %474, align 8
  %476 = call i64 @int_size_in_bytes(%union.tree_node* %475)
  store i64 %476, i64* %22, align 8
  %477 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %478 = icmp ne %struct.rtx_def* %477, null
  br i1 %478, label %479, label %507

; <label>:479:                                    ; preds = %469
  %480 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %481 = bitcast %struct.rtx_def* %480 to i32*
  %482 = load i32, i32* %481, align 8
  %483 = and i32 %482, 65535
  %484 = icmp eq i32 %483, 66
  br i1 %484, label %485, label %507

; <label>:485:                                    ; preds = %479
  %486 = load i32, i32* @x.5
  %487 = load i32, i32* @y.6
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %originalBB102alteredBB, %485
  %494 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %495 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %494, i32 0, i32 1
  %496 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %495, i64 0, i64 0
  %497 = bitcast %union.rtunion_def* %496 to %struct.rtx_def**
  %498 = load %struct.rtx_def*, %struct.rtx_def** %497, align 8
  store %struct.rtx_def* %498, %struct.rtx_def** %20, align 8
  %499 = load i32, i32* @x.5
  %500 = load i32, i32* @y.6
  %501 = sub i32 %499, 1
  %502 = mul i32 %499, %501
  %503 = urem i32 %502, 2
  %504 = icmp eq i32 %503, 0
  %505 = icmp slt i32 %500, 10
  %506 = or i1 %504, %505
  br i1 %506, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %519

; <label>:507:                                    ; preds = %479, %469
  %508 = load %union.tree_node*, %union.tree_node** %5, align 8
  %509 = bitcast %union.tree_node* %508 to %struct.tree_common*
  %510 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %509, i32 0, i32 1
  %511 = load %union.tree_node*, %union.tree_node** %510, align 8
  %512 = call %struct.rtx_def* @assign_temp(%union.tree_node* %511, i32 1, i32 1, i32 1)
  store %struct.rtx_def* %512, %struct.rtx_def** %52, align 8
  %513 = load %struct.rtx_def*, %struct.rtx_def** %52, align 8
  call void @mark_temp_addr_taken(%struct.rtx_def* %513)
  %514 = load %struct.rtx_def*, %struct.rtx_def** %52, align 8
  %515 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %514, i32 0, i32 1
  %516 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %515, i64 0, i64 0
  %517 = bitcast %union.rtunion_def* %516 to %struct.rtx_def**
  %518 = load %struct.rtx_def*, %struct.rtx_def** %517, align 8
  store %struct.rtx_def* %518, %struct.rtx_def** %20, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %6, align 8
  br label %519

; <label>:519:                                    ; preds = %507, %originalBBpart2104
  br label %520

; <label>:520:                                    ; preds = %519, %originalBBpart2100
  %521 = load i32, i32* @x.5
  %522 = load i32, i32* @y.6
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %originalBB106alteredBB, %520
  %529 = load i32, i32* %36, align 4
  %530 = icmp ne i32 %529, 0
  %531 = load i32, i32* @x.5
  %532 = load i32, i32* @y.6
  %533 = sub i32 %531, 1
  %534 = mul i32 %531, %533
  %535 = urem i32 %534, 2
  %536 = icmp eq i32 %535, 0
  %537 = icmp slt i32 %532, 10
  %538 = or i1 %536, %537
  br i1 %538, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br i1 %530, label %539, label %571

; <label>:539:                                    ; preds = %originalBBpart2108
  %540 = load %union.tree_node*, %union.tree_node** %14, align 8
  %541 = load %union.tree_node*, %union.tree_node** %8, align 8
  %542 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %543 = load i32, i32* %7, align 4
  %544 = load %union.tree_node*, %union.tree_node** %5, align 8
  %545 = bitcast %union.tree_node* %544 to %struct.tree_common*
  %546 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %545, i32 0, i32 1
  %547 = load %union.tree_node*, %union.tree_node** %546, align 8
  %548 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %549 = call %struct.rtx_def* @try_to_integrate(%union.tree_node* %540, %union.tree_node* %541, %struct.rtx_def* %542, i32 %543, %union.tree_node* %547, %struct.rtx_def* %548)
  store %struct.rtx_def* %549, %struct.rtx_def** %53, align 8
  %550 = load %struct.rtx_def*, %struct.rtx_def** %53, align 8
  %551 = icmp ne %struct.rtx_def* %550, inttoptr (i64 -1 to %struct.rtx_def*)
  br i1 %551, label %552, label %570

; <label>:552:                                    ; preds = %539
  %553 = load i32, i32* @x.5
  %554 = load i32, i32* @y.6
  %555 = sub i32 %553, 1
  %556 = mul i32 %553, %555
  %557 = urem i32 %556, 2
  %558 = icmp eq i32 %557, 0
  %559 = icmp slt i32 %554, 10
  %560 = or i1 %558, %559
  br i1 %560, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %originalBB110alteredBB, %552
  %561 = load %struct.rtx_def*, %struct.rtx_def** %53, align 8
  store %struct.rtx_def* %561, %struct.rtx_def** %4, align 8
  %562 = load i32, i32* @x.5
  %563 = load i32, i32* @y.6
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %4429

; <label>:570:                                    ; preds = %539
  br label %571

; <label>:571:                                    ; preds = %570, %originalBBpart2108
  %572 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %573 = sext i32 %572 to i64
  store i64 %573, i64* %50, align 8
  %574 = load %union.tree_node*, %union.tree_node** %5, align 8
  %575 = bitcast %union.tree_node* %574 to %struct.tree_exp*
  %576 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %575, i32 0, i32 2
  %577 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %576, i64 0, i64 0
  %578 = load %union.tree_node*, %union.tree_node** %577, align 8
  %579 = bitcast %union.tree_node* %578 to %struct.tree_common*
  %580 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %579, i32 0, i32 1
  %581 = load %union.tree_node*, %union.tree_node** %580, align 8
  store %union.tree_node* %581, %union.tree_node** %13, align 8
  %582 = load %union.tree_node*, %union.tree_node** %13, align 8
  %583 = bitcast %union.tree_node* %582 to %struct.tree_common*
  %584 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %583, i32 0, i32 2
  %585 = load i32, i32* %584, align 8
  %586 = and i32 %585, 255
  %587 = icmp eq i32 %586, 13
  br i1 %587, label %612, label %588

; <label>:588:                                    ; preds = %571
  %589 = load %union.tree_node*, %union.tree_node** %13, align 8
  %590 = bitcast %union.tree_node* %589 to %struct.tree_common*
  %591 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %590, i32 0, i32 2
  %592 = load i32, i32* %591, align 8
  %593 = and i32 %592, 255
  %594 = icmp eq i32 %593, 15
  br i1 %594, label %612, label %595

; <label>:595:                                    ; preds = %588
  %596 = load i32, i32* @x.5
  %597 = load i32, i32* @y.6
  %598 = sub i32 %596, 1
  %599 = mul i32 %596, %598
  %600 = urem i32 %599, 2
  %601 = icmp eq i32 %600, 0
  %602 = icmp slt i32 %597, 10
  %603 = or i1 %601, %602
  br i1 %603, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %originalBB114alteredBB, %595
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 2299, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_call, i32 0, i32 0)) #8
  %604 = load i32, i32* @x.5
  %605 = load i32, i32* @y.6
  %606 = sub i32 %604, 1
  %607 = mul i32 %604, %606
  %608 = urem i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = icmp slt i32 %605, 10
  %611 = or i1 %609, %610
  br i1 %611, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  unreachable

; <label>:612:                                    ; preds = %588, %571
  %613 = load i32, i32* @x.5
  %614 = load i32, i32* @y.6
  %615 = sub i32 %613, 1
  %616 = mul i32 %613, %615
  %617 = urem i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = icmp slt i32 %614, 10
  %620 = or i1 %618, %619
  br i1 %620, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %originalBB118alteredBB, %612
  %621 = load %union.tree_node*, %union.tree_node** %13, align 8
  %622 = bitcast %union.tree_node* %621 to %struct.tree_common*
  %623 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %622, i32 0, i32 1
  %624 = load %union.tree_node*, %union.tree_node** %623, align 8
  store %union.tree_node* %624, %union.tree_node** %13, align 8
  %625 = load %union.tree_node*, %union.tree_node** %14, align 8
  %626 = load i32, i32* %35, align 4
  %627 = call i32 @special_function_p(%union.tree_node* %625, i32 %626)
  %628 = load i32, i32* %35, align 4
  %629 = or i32 %628, %627
  store i32 %629, i32* %35, align 4
  %630 = load i32, i32* %35, align 4
  %631 = and i32 %630, 8
  %632 = icmp ne i32 %631, 0
  %633 = load i32, i32* @x.5
  %634 = load i32, i32* @y.6
  %635 = sub i32 %633, 1
  %636 = mul i32 %633, %635
  %637 = urem i32 %636, 2
  %638 = icmp eq i32 %637, 0
  %639 = icmp slt i32 %634, 10
  %640 = or i1 %638, %639
  br i1 %640, label %originalBBpart2146, label %originalBB118alteredBB

originalBBpart2146:                               ; preds = %originalBB118
  br i1 %632, label %641, label %664

; <label>:641:                                    ; preds = %originalBBpart2146
  %642 = load i32, i32* @x.5
  %643 = load i32, i32* @y.6
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %originalBB148alteredBB, %641
  %650 = load %struct.function*, %struct.function** @cfun, align 8
  %651 = getelementptr inbounds %struct.function, %struct.function* %650, i32 0, i32 56
  %652 = bitcast i24* %651 to i32*
  %653 = load i32, i32* %652, align 8
  %654 = and i32 %653, -65
  %655 = or i32 %654, 64
  store i32 %655, i32* %652, align 8
  %656 = load i32, i32* @x.5
  %657 = load i32, i32* @y.6
  %658 = sub i32 %656, 1
  %659 = mul i32 %656, %658
  %660 = urem i32 %659, 2
  %661 = icmp eq i32 %660, 0
  %662 = icmp slt i32 %657, 10
  %663 = or i1 %661, %662
  br i1 %663, label %originalBBpart2156, label %originalBB148alteredBB

originalBBpart2156:                               ; preds = %originalBB148
  br label %664

; <label>:664:                                    ; preds = %originalBBpart2156, %originalBBpart2146
  %665 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %666 = icmp ne %struct.rtx_def* %665, null
  br i1 %666, label %667, label %752

; <label>:667:                                    ; preds = %664
  %668 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  %669 = icmp eq %struct.rtx_def* %668, null
  br i1 %669, label %670, label %752

; <label>:670:                                    ; preds = %667
  %671 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %672 = bitcast %struct.rtx_def* %671 to i32*
  %673 = load i32, i32* %672, align 8
  %674 = and i32 %673, 65535
  %675 = icmp ne i32 %674, 61
  br i1 %675, label %703, label %676

; <label>:676:                                    ; preds = %670
  %677 = load i32, i32* @target_flags, align 4
  %678 = and i32 %677, 4096
  %679 = icmp ne i32 %678, 0
  br i1 %679, label %680, label %706

; <label>:680:                                    ; preds = %676
  %681 = load i32, i32* @x.5
  %682 = load i32, i32* @y.6
  %683 = sub i32 %681, 1
  %684 = mul i32 %681, %683
  %685 = urem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %686, %687
  br i1 %688, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %originalBB158alteredBB, %680
  %689 = load i32, i32* @stack_arg_under_construction, align 4
  %690 = icmp ne i32 %689, 0
  %691 = load i32, i32* @x.5
  %692 = load i32, i32* @y.6
  %693 = sub i32 %691, 1
  %694 = mul i32 %691, %693
  %695 = urem i32 %694, 2
  %696 = icmp eq i32 %695, 0
  %697 = icmp slt i32 %692, 10
  %698 = or i1 %696, %697
  br i1 %698, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br i1 %690, label %699, label %706

; <label>:699:                                    ; preds = %originalBBpart2160
  %700 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %701 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8
  %702 = icmp eq %struct.rtx_def* %700, %701
  br i1 %702, label %703, label %706

; <label>:703:                                    ; preds = %699, %670
  %704 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %705 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %704)
  br label %724

; <label>:706:                                    ; preds = %699, %originalBBpart2160, %676
  %707 = load i32, i32* @x.5
  %708 = load i32, i32* @y.6
  %709 = sub i32 %707, 1
  %710 = mul i32 %707, %709
  %711 = urem i32 %710, 2
  %712 = icmp eq i32 %711, 0
  %713 = icmp slt i32 %708, 10
  %714 = or i1 %712, %713
  br i1 %714, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %originalBB162alteredBB, %706
  %715 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %716 = load i32, i32* @x.5
  %717 = load i32, i32* @y.6
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br label %724

; <label>:724:                                    ; preds = %originalBBpart2164, %703
  %725 = phi %struct.rtx_def* [ %705, %703 ], [ %715, %originalBBpart2164 ]
  %726 = load i32, i32* @x.5
  %727 = load i32, i32* @y.6
  %728 = sub i32 %726, 1
  %729 = mul i32 %726, %728
  %730 = urem i32 %729, 2
  %731 = icmp eq i32 %730, 0
  %732 = icmp slt i32 %727, 10
  %733 = or i1 %731, %732
  br i1 %733, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %originalBB166alteredBB, %724
  store %struct.rtx_def* %725, %struct.rtx_def** %54, align 8
  %734 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16
  %735 = load %union.tree_node*, %union.tree_node** %13, align 8
  %736 = bitcast %union.tree_node* %735 to %struct.tree_common*
  %737 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %736, i32 0, i32 1
  %738 = load %union.tree_node*, %union.tree_node** %737, align 8
  %739 = call %union.tree_node* @build_pointer_type(%union.tree_node* %738)
  %740 = load %struct.rtx_def*, %struct.rtx_def** %54, align 8
  %741 = call %union.tree_node* @make_tree(%union.tree_node* %739, %struct.rtx_def* %740)
  %742 = load %union.tree_node*, %union.tree_node** %8, align 8
  %743 = call %union.tree_node* @tree_cons(%union.tree_node* %734, %union.tree_node* %741, %union.tree_node* %742)
  store %union.tree_node* %743, %union.tree_node** %8, align 8
  store i32 1, i32* %21, align 4
  %744 = load i32, i32* @x.5
  %745 = load i32, i32* @y.6
  %746 = sub i32 %744, 1
  %747 = mul i32 %744, %746
  %748 = urem i32 %747, 2
  %749 = icmp eq i32 %748, 0
  %750 = icmp slt i32 %745, 10
  %751 = or i1 %749, %750
  br i1 %751, label %originalBBpart2168, label %originalBB166alteredBB

originalBBpart2168:                               ; preds = %originalBB166
  br label %752

; <label>:752:                                    ; preds = %originalBBpart2168, %667, %664
  %753 = load %union.tree_node*, %union.tree_node** %8, align 8
  store %union.tree_node* %753, %union.tree_node** %48, align 8
  store i32 0, i32* %24, align 4
  br label %754

; <label>:754:                                    ; preds = %776, %752
  %755 = load %union.tree_node*, %union.tree_node** %48, align 8
  %756 = icmp ne %union.tree_node* %755, null
  br i1 %756, label %757, label %781

; <label>:757:                                    ; preds = %754
  %758 = load i32, i32* @x.5
  %759 = load i32, i32* @y.6
  %760 = sub i32 %758, 1
  %761 = mul i32 %758, %760
  %762 = urem i32 %761, 2
  %763 = icmp eq i32 %762, 0
  %764 = icmp slt i32 %759, 10
  %765 = or i1 %763, %764
  br i1 %765, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %originalBB170alteredBB, %757
  %766 = load i32, i32* %24, align 4
  %767 = add nsw i32 %766, 1
  store i32 %767, i32* %24, align 4
  %768 = load i32, i32* @x.5
  %769 = load i32, i32* @y.6
  %770 = sub i32 %768, 1
  %771 = mul i32 %768, %770
  %772 = urem i32 %771, 2
  %773 = icmp eq i32 %772, 0
  %774 = icmp slt i32 %769, 10
  %775 = or i1 %773, %774
  br i1 %775, label %originalBBpart2180, label %originalBB170alteredBB

originalBBpart2180:                               ; preds = %originalBB170
  br label %776

; <label>:776:                                    ; preds = %originalBBpart2180
  %777 = load %union.tree_node*, %union.tree_node** %48, align 8
  %778 = bitcast %union.tree_node* %777 to %struct.tree_common*
  %779 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %778, i32 0, i32 0
  %780 = load %union.tree_node*, %union.tree_node** %779, align 8
  store %union.tree_node* %780, %union.tree_node** %48, align 8
  br label %754

; <label>:781:                                    ; preds = %754
  %782 = load i32, i32* @x.5
  %783 = load i32, i32* @y.6
  %784 = sub i32 %782, 1
  %785 = mul i32 %782, %784
  %786 = urem i32 %785, 2
  %787 = icmp eq i32 %786, 0
  %788 = icmp slt i32 %783, 10
  %789 = or i1 %787, %788
  br i1 %789, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %originalBB182alteredBB, %781
  %790 = load i32, i32* %24, align 4
  store i32 %790, i32* %25, align 4
  %791 = load %union.tree_node*, %union.tree_node** %13, align 8
  call void @init_cumulative_args(%struct.ix86_args* %30, %union.tree_node* %791, %struct.rtx_def* null)
  %792 = load i32, i32* %24, align 4
  %793 = sext i32 %792 to i64
  %794 = mul i64 %793, 168
  %795 = alloca i8, i64 %794, align 16
  %796 = bitcast i8* %795 to %struct.arg_data*
  store %struct.arg_data* %796, %struct.arg_data** %26, align 8
  %797 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %798 = bitcast %struct.arg_data* %797 to i8*
  %799 = load i32, i32* %24, align 4
  %800 = sext i32 %799 to i64
  %801 = mul i64 %800, 168
  call void @llvm.memset.p0i8.i64(i8* %798, i8 0, i64 %801, i32 1, i1 false)
  %802 = load i32, i32* %24, align 4
  %803 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %804 = load i32, i32* %25, align 4
  %805 = load %union.tree_node*, %union.tree_node** %8, align 8
  %806 = load %union.tree_node*, %union.tree_node** %14, align 8
  %807 = load i32, i32* %33, align 4
  call void @initialize_argument_information(i32 %802, %struct.arg_data* %803, %struct.args_size* %27, i32 %804, %union.tree_node* %805, %union.tree_node* %806, %struct.ix86_args* %30, i32 %807, %struct.rtx_def** %43, i32* %44, i32* %32, i32* %35)
  %808 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 1
  %809 = load %union.tree_node*, %union.tree_node** %808, align 8
  %810 = icmp ne %union.tree_node* %809, null
  %811 = load i32, i32* @x.5
  %812 = load i32, i32* @y.6
  %813 = sub i32 %811, 1
  %814 = mul i32 %811, %813
  %815 = urem i32 %814, 2
  %816 = icmp eq i32 %815, 0
  %817 = icmp slt i32 %812, 10
  %818 = or i1 %816, %817
  br i1 %818, label %originalBBpart2193, label %originalBB182alteredBB

originalBBpart2193:                               ; preds = %originalBB182
  br i1 %810, label %819, label %822

; <label>:819:                                    ; preds = %originalBBpart2193
  %820 = load i32, i32* %35, align 4
  %821 = and i32 %820, -4097
  store i32 %821, i32* %35, align 4
  store i32 1, i32* %32, align 4
  br label %822

; <label>:822:                                    ; preds = %819, %originalBBpart2193
  %823 = load i32, i32* %32, align 4
  %824 = load i32, i32* %24, align 4
  %825 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %826 = call i32 @finalize_must_preallocate(i32 %823, i32 %824, %struct.arg_data* %825, %struct.args_size* %27)
  store i32 %826, i32* %32, align 4
  %827 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %828 = icmp ne %struct.rtx_def* %827, null
  br i1 %828, label %829, label %870

; <label>:829:                                    ; preds = %822
  %830 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16
  %831 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %832 = call i32 @reg_mentioned_p(%struct.rtx_def* %830, %struct.rtx_def* %831)
  %833 = icmp ne i32 %832, 0
  br i1 %833, label %839, label %834

; <label>:834:                                    ; preds = %829
  %835 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8
  %836 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %837 = call i32 @reg_mentioned_p(%struct.rtx_def* %835, %struct.rtx_def* %836)
  %838 = icmp ne i32 %837, 0
  br i1 %838, label %839, label %870

; <label>:839:                                    ; preds = %834, %829
  %840 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 1
  %841 = load %union.tree_node*, %union.tree_node** %840, align 8
  %842 = icmp ne %union.tree_node* %841, null
  br i1 %842, label %867, label %843

; <label>:843:                                    ; preds = %839
  %844 = load i32, i32* @x.5
  %845 = load i32, i32* @y.6
  %846 = sub i32 %844, 1
  %847 = mul i32 %844, %846
  %848 = urem i32 %847, 2
  %849 = icmp eq i32 %848, 0
  %850 = icmp slt i32 %845, 10
  %851 = or i1 %849, %850
  br i1 %851, label %originalBB195, label %originalBB195alteredBB

originalBB195:                                    ; preds = %originalBB195alteredBB, %843
  %852 = load i32, i32* @target_flags, align 4
  %853 = and i32 %852, 4096
  %854 = icmp ne i32 %853, 0
  %855 = load i32, i32* @x.5
  %856 = load i32, i32* @y.6
  %857 = sub i32 %855, 1
  %858 = mul i32 %855, %857
  %859 = urem i32 %858, 2
  %860 = icmp eq i32 %859, 0
  %861 = icmp slt i32 %856, 10
  %862 = or i1 %860, %861
  br i1 %862, label %originalBBpart2212, label %originalBB195alteredBB

originalBBpart2212:                               ; preds = %originalBB195
  br i1 %854, label %870, label %863

; <label>:863:                                    ; preds = %originalBBpart2212
  %864 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 0
  %865 = load i64, i64* %864, align 8
  %866 = icmp ne i64 %865, 0
  br i1 %866, label %867, label %870

; <label>:867:                                    ; preds = %863, %839
  %868 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %869 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %868)
  store %struct.rtx_def* %869, %struct.rtx_def** %20, align 8
  br label %870

; <label>:870:                                    ; preds = %867, %863, %originalBBpart2212, %834, %822
  %871 = load i32, i32* @expand_call.currently_expanding_call, align 4
  %872 = add nsw i32 %871, 1
  store i32 %872, i32* @expand_call.currently_expanding_call, align 4
  %873 = icmp ne i32 %871, 0
  br i1 %873, label %887, label %874

; <label>:874:                                    ; preds = %870
  %875 = load i32, i32* @flag_optimize_sibling_calls, align 4
  %876 = icmp ne i32 %875, 0
  br i1 %876, label %877, label %887

; <label>:877:                                    ; preds = %874
  %878 = load i32, i32* @rtx_equal_function_value_matters, align 4
  %879 = icmp ne i32 %878, 0
  br i1 %879, label %880, label %887

; <label>:880:                                    ; preds = %877
  %881 = call i32 @any_pending_cleanups(i32 1)
  %882 = icmp ne i32 %881, 0
  br i1 %882, label %887, label %883

; <label>:883:                                    ; preds = %880
  %884 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 1
  %885 = load %union.tree_node*, %union.tree_node** %884, align 8
  %886 = icmp ne %union.tree_node* %885, null
  br i1 %886, label %887, label %888

; <label>:887:                                    ; preds = %883, %880, %877, %874, %870
  store i32 0, i32* %17, align 4
  store i32 0, i32* %16, align 4
  br label %888

; <label>:888:                                    ; preds = %887, %883
  %889 = load i32, i32* %17, align 4
  %890 = icmp ne i32 %889, 0
  br i1 %890, label %891, label %930

; <label>:891:                                    ; preds = %888
  %892 = load %union.tree_node*, %union.tree_node** %5, align 8
  %893 = bitcast %union.tree_node* %892 to %struct.tree_exp*
  %894 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %893, i32 0, i32 2
  %895 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %894, i64 0, i64 0
  %896 = load %union.tree_node*, %union.tree_node** %895, align 8
  %897 = bitcast %union.tree_node* %896 to %struct.tree_common*
  %898 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %897, i32 0, i32 2
  %899 = load i32, i32* %898, align 8
  %900 = and i32 %899, 255
  %901 = icmp ne i32 %900, 121
  br i1 %901, label %930, label %902

; <label>:902:                                    ; preds = %891
  %903 = load i32, i32* @x.5
  %904 = load i32, i32* @y.6
  %905 = sub i32 %903, 1
  %906 = mul i32 %903, %905
  %907 = urem i32 %906, 2
  %908 = icmp eq i32 %907, 0
  %909 = icmp slt i32 %904, 10
  %910 = or i1 %908, %909
  br i1 %910, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %originalBB214alteredBB, %902
  %911 = load %union.tree_node*, %union.tree_node** %5, align 8
  %912 = bitcast %union.tree_node* %911 to %struct.tree_exp*
  %913 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %912, i32 0, i32 2
  %914 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %913, i64 0, i64 0
  %915 = load %union.tree_node*, %union.tree_node** %914, align 8
  %916 = bitcast %union.tree_node* %915 to %struct.tree_exp*
  %917 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %916, i32 0, i32 2
  %918 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %917, i64 0, i64 0
  %919 = load %union.tree_node*, %union.tree_node** %918, align 8
  %920 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %921 = icmp ne %union.tree_node* %919, %920
  %922 = load i32, i32* @x.5
  %923 = load i32, i32* @y.6
  %924 = sub i32 %922, 1
  %925 = mul i32 %922, %924
  %926 = urem i32 %925, 2
  %927 = icmp eq i32 %926, 0
  %928 = icmp slt i32 %923, 10
  %929 = or i1 %927, %928
  br i1 %929, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br i1 %921, label %930, label %947

; <label>:930:                                    ; preds = %originalBBpart2216, %891, %888
  %931 = load i32, i32* @x.5
  %932 = load i32, i32* @y.6
  %933 = sub i32 %931, 1
  %934 = mul i32 %931, %933
  %935 = urem i32 %934, 2
  %936 = icmp eq i32 %935, 0
  %937 = icmp slt i32 %932, 10
  %938 = or i1 %936, %937
  br i1 %938, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %originalBB218alteredBB, %930
  store i32 0, i32* %17, align 4
  %939 = load i32, i32* @x.5
  %940 = load i32, i32* @y.6
  %941 = sub i32 %939, 1
  %942 = mul i32 %939, %941
  %943 = urem i32 %942, 2
  %944 = icmp eq i32 %943, 0
  %945 = icmp slt i32 %940, 10
  %946 = or i1 %944, %945
  br i1 %946, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br label %947

; <label>:947:                                    ; preds = %originalBBpart2220, %originalBBpart2216
  %948 = load i32, i32* %16, align 4
  %949 = icmp ne i32 %948, 0
  br i1 %949, label %950, label %1199

; <label>:950:                                    ; preds = %947
  %951 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %952 = icmp ne %struct.rtx_def* %951, null
  br i1 %952, label %1199, label %953

; <label>:953:                                    ; preds = %950
  %954 = load i32, i32* @x.5
  %955 = load i32, i32* @y.6
  %956 = sub i32 %954, 1
  %957 = mul i32 %954, %956
  %958 = urem i32 %957, 2
  %959 = icmp eq i32 %958, 0
  %960 = icmp slt i32 %955, 10
  %961 = or i1 %959, %960
  br i1 %961, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %originalBB222alteredBB, %953
  %962 = load %union.tree_node*, %union.tree_node** %14, align 8
  %963 = icmp eq %union.tree_node* %962, null
  %964 = load i32, i32* @x.5
  %965 = load i32, i32* @y.6
  %966 = sub i32 %964, 1
  %967 = mul i32 %964, %966
  %968 = urem i32 %967, 2
  %969 = icmp eq i32 %968, 0
  %970 = icmp slt i32 %965, 10
  %971 = or i1 %969, %970
  br i1 %971, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %963, label %1199, label %972

; <label>:972:                                    ; preds = %originalBBpart2224
  %973 = load i32, i32* %35, align 4
  %974 = and i32 %973, 96
  %975 = icmp ne i32 %974, 0
  br i1 %975, label %1199, label %976

; <label>:976:                                    ; preds = %972
  %977 = load i32, i32* @x.5
  %978 = load i32, i32* @y.6
  %979 = sub i32 %977, 1
  %980 = mul i32 %977, %979
  %981 = urem i32 %980, 2
  %982 = icmp eq i32 %981, 0
  %983 = icmp slt i32 %978, 10
  %984 = or i1 %982, %983
  br i1 %984, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %originalBB226alteredBB, %976
  %985 = load %union.tree_node*, %union.tree_node** %14, align 8
  %986 = bitcast %union.tree_node* %985 to %struct.tree_common*
  %987 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %986, i32 0, i32 2
  %988 = load i32, i32* %987, align 8
  %989 = lshr i32 %988, 11
  %990 = and i32 %989, 1
  %991 = icmp ne i32 %990, 0
  %992 = load i32, i32* @x.5
  %993 = load i32, i32* @y.6
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBBpart2248, label %originalBB226alteredBB

originalBBpart2248:                               ; preds = %originalBB226
  br i1 %991, label %1199, label %1000

; <label>:1000:                                   ; preds = %originalBBpart2248
  %1001 = load i32, i32* @x.5
  %1002 = load i32, i32* @y.6
  %1003 = sub i32 %1001, 1
  %1004 = mul i32 %1001, %1003
  %1005 = urem i32 %1004, 2
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp slt i32 %1002, 10
  %1008 = or i1 %1006, %1007
  br i1 %1008, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %originalBB250alteredBB, %1000
  %1009 = load %union.tree_node*, %union.tree_node** %14, align 8
  %1010 = icmp ne %union.tree_node* %1009, null
  %1011 = load i32, i32* @x.5
  %1012 = load i32, i32* @y.6
  %1013 = sub i32 %1011, 1
  %1014 = mul i32 %1011, %1013
  %1015 = urem i32 %1014, 2
  %1016 = icmp eq i32 %1015, 0
  %1017 = icmp slt i32 %1012, 10
  %1018 = or i1 %1016, %1017
  br i1 %1018, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br i1 %1010, label %1019, label %1199

; <label>:1019:                                   ; preds = %originalBBpart2252
  %1020 = load i32, i32* @flag_pic, align 4
  %1021 = icmp ne i32 %1020, 0
  br i1 %1021, label %1022, label %1030

; <label>:1022:                                   ; preds = %1019
  %1023 = load %union.tree_node*, %union.tree_node** %14, align 8
  %1024 = bitcast %union.tree_node* %1023 to %struct.tree_common*
  %1025 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1024, i32 0, i32 2
  %1026 = load i32, i32* %1025, align 8
  %1027 = lshr i32 %1026, 19
  %1028 = and i32 %1027, 1
  %1029 = icmp ne i32 %1028, 0
  br i1 %1029, label %1199, label %1030

; <label>:1030:                                   ; preds = %1022, %1019
  %1031 = load i32, i32* @target_flags, align 4
  %1032 = and i32 %1031, 32
  %1033 = icmp ne i32 %1032, 0
  br i1 %1033, label %1034, label %1158

; <label>:1034:                                   ; preds = %1030
  %1035 = load i32, i32* @x.5
  %1036 = load i32, i32* @y.6
  %1037 = sub i32 %1035, 1
  %1038 = mul i32 %1035, %1037
  %1039 = urem i32 %1038, 2
  %1040 = icmp eq i32 %1039, 0
  %1041 = icmp slt i32 %1036, 10
  %1042 = or i1 %1040, %1041
  br i1 %1042, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %originalBB254alteredBB, %1034
  %1043 = load %union.tree_node*, %union.tree_node** %14, align 8
  %1044 = bitcast %union.tree_node* %1043 to %struct.tree_common*
  %1045 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1044, i32 0, i32 1
  %1046 = load %union.tree_node*, %union.tree_node** %1045, align 8
  %1047 = bitcast %union.tree_node* %1046 to %struct.tree_common*
  %1048 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1047, i32 0, i32 1
  %1049 = load %union.tree_node*, %union.tree_node** %1048, align 8
  %1050 = bitcast %union.tree_node* %1049 to %struct.tree_type*
  %1051 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1050, i32 0, i32 6
  %1052 = load i32, i32* %1051, align 4
  %1053 = lshr i32 %1052, 9
  %1054 = and i32 %1053, 127
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %1055
  %1057 = load i32, i32* %1056, align 4
  %1058 = icmp eq i32 %1057, 2
  %1059 = load i32, i32* @x.5
  %1060 = load i32, i32* @y.6
  %1061 = sub i32 %1059, 1
  %1062 = mul i32 %1059, %1061
  %1063 = urem i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = icmp slt i32 %1060, 10
  %1066 = or i1 %1064, %1065
  br i1 %1066, label %originalBBpart2264, label %originalBB254alteredBB

originalBBpart2264:                               ; preds = %originalBB254
  br i1 %1058, label %1101, label %1067

; <label>:1067:                                   ; preds = %originalBBpart2264
  %1068 = load %union.tree_node*, %union.tree_node** %14, align 8
  %1069 = bitcast %union.tree_node* %1068 to %struct.tree_common*
  %1070 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1069, i32 0, i32 1
  %1071 = load %union.tree_node*, %union.tree_node** %1070, align 8
  %1072 = bitcast %union.tree_node* %1071 to %struct.tree_common*
  %1073 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1072, i32 0, i32 1
  %1074 = load %union.tree_node*, %union.tree_node** %1073, align 8
  %1075 = bitcast %union.tree_node* %1074 to %struct.tree_type*
  %1076 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1075, i32 0, i32 6
  %1077 = load i32, i32* %1076, align 4
  %1078 = lshr i32 %1077, 9
  %1079 = and i32 %1078, 127
  %1080 = sext i32 %1079 to i64
  %1081 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %1080
  %1082 = load i32, i32* %1081, align 4
  %1083 = icmp eq i32 %1082, 6
  br i1 %1083, label %1101, label %1084

; <label>:1084:                                   ; preds = %1067
  %1085 = load %union.tree_node*, %union.tree_node** %14, align 8
  %1086 = bitcast %union.tree_node* %1085 to %struct.tree_common*
  %1087 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1086, i32 0, i32 1
  %1088 = load %union.tree_node*, %union.tree_node** %1087, align 8
  %1089 = bitcast %union.tree_node* %1088 to %struct.tree_common*
  %1090 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1089, i32 0, i32 1
  %1091 = load %union.tree_node*, %union.tree_node** %1090, align 8
  %1092 = bitcast %union.tree_node* %1091 to %struct.tree_type*
  %1093 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1092, i32 0, i32 6
  %1094 = load i32, i32* %1093, align 4
  %1095 = lshr i32 %1094, 9
  %1096 = and i32 %1095, 127
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %1097
  %1099 = load i32, i32* %1098, align 4
  %1100 = icmp eq i32 %1099, 8
  br i1 %1100, label %1101, label %1158

; <label>:1101:                                   ; preds = %1084, %1067, %originalBBpart2264
  %1102 = load %struct.function*, %struct.function** @cfun, align 8
  %1103 = getelementptr inbounds %struct.function, %struct.function* %1102, i32 0, i32 6
  %1104 = load %union.tree_node*, %union.tree_node** %1103, align 8
  %1105 = bitcast %union.tree_node* %1104 to %struct.tree_common*
  %1106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1105, i32 0, i32 1
  %1107 = load %union.tree_node*, %union.tree_node** %1106, align 8
  %1108 = bitcast %union.tree_node* %1107 to %struct.tree_common*
  %1109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1108, i32 0, i32 1
  %1110 = load %union.tree_node*, %union.tree_node** %1109, align 8
  %1111 = bitcast %union.tree_node* %1110 to %struct.tree_type*
  %1112 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1111, i32 0, i32 6
  %1113 = load i32, i32* %1112, align 4
  %1114 = lshr i32 %1113, 9
  %1115 = and i32 %1114, 127
  %1116 = sext i32 %1115 to i64
  %1117 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %1116
  %1118 = load i32, i32* %1117, align 4
  %1119 = icmp eq i32 %1118, 2
  br i1 %1119, label %1158, label %1120

; <label>:1120:                                   ; preds = %1101
  %1121 = load %struct.function*, %struct.function** @cfun, align 8
  %1122 = getelementptr inbounds %struct.function, %struct.function* %1121, i32 0, i32 6
  %1123 = load %union.tree_node*, %union.tree_node** %1122, align 8
  %1124 = bitcast %union.tree_node* %1123 to %struct.tree_common*
  %1125 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1124, i32 0, i32 1
  %1126 = load %union.tree_node*, %union.tree_node** %1125, align 8
  %1127 = bitcast %union.tree_node* %1126 to %struct.tree_common*
  %1128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1127, i32 0, i32 1
  %1129 = load %union.tree_node*, %union.tree_node** %1128, align 8
  %1130 = bitcast %union.tree_node* %1129 to %struct.tree_type*
  %1131 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1130, i32 0, i32 6
  %1132 = load i32, i32* %1131, align 4
  %1133 = lshr i32 %1132, 9
  %1134 = and i32 %1133, 127
  %1135 = sext i32 %1134 to i64
  %1136 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %1135
  %1137 = load i32, i32* %1136, align 4
  %1138 = icmp eq i32 %1137, 6
  br i1 %1138, label %1158, label %1139

; <label>:1139:                                   ; preds = %1120
  %1140 = load %struct.function*, %struct.function** @cfun, align 8
  %1141 = getelementptr inbounds %struct.function, %struct.function* %1140, i32 0, i32 6
  %1142 = load %union.tree_node*, %union.tree_node** %1141, align 8
  %1143 = bitcast %union.tree_node* %1142 to %struct.tree_common*
  %1144 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1143, i32 0, i32 1
  %1145 = load %union.tree_node*, %union.tree_node** %1144, align 8
  %1146 = bitcast %union.tree_node* %1145 to %struct.tree_common*
  %1147 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1146, i32 0, i32 1
  %1148 = load %union.tree_node*, %union.tree_node** %1147, align 8
  %1149 = bitcast %union.tree_node* %1148 to %struct.tree_type*
  %1150 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1149, i32 0, i32 6
  %1151 = load i32, i32* %1150, align 4
  %1152 = lshr i32 %1151, 9
  %1153 = and i32 %1152, 127
  %1154 = sext i32 %1153 to i64
  %1155 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %1154
  %1156 = load i32, i32* %1155, align 4
  %1157 = icmp eq i32 %1156, 8
  br i1 %1157, label %1158, label %1199

; <label>:1158:                                   ; preds = %1139, %1120, %1101, %1084, %1030
  %1159 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 0
  %1160 = load i64, i64* %1159, align 8
  %1161 = load %struct.function*, %struct.function** @cfun, align 8
  %1162 = getelementptr inbounds %struct.function, %struct.function* %1161, i32 0, i32 9
  %1163 = load i32, i32* %1162, align 4
  %1164 = sext i32 %1163 to i64
  %1165 = icmp sgt i64 %1160, %1164
  br i1 %1165, label %1199, label %1166

; <label>:1166:                                   ; preds = %1158
  %1167 = load i32, i32* @x.5
  %1168 = load i32, i32* @y.6
  %1169 = sub i32 %1167, 1
  %1170 = mul i32 %1167, %1169
  %1171 = urem i32 %1170, 2
  %1172 = icmp eq i32 %1171, 0
  %1173 = icmp slt i32 %1168, 10
  %1174 = or i1 %1172, %1173
  br i1 %1174, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %originalBB266alteredBB, %1166
  %1175 = load %union.tree_node*, %union.tree_node** %14, align 8
  %1176 = load %union.tree_node*, %union.tree_node** %13, align 8
  %1177 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 0
  %1178 = load i64, i64* %1177, align 8
  %1179 = trunc i64 %1178 to i32
  %1180 = call i32 @ix86_return_pops_args(%union.tree_node* %1175, %union.tree_node* %1176, i32 %1179)
  %1181 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %1182 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %1183 = bitcast %union.tree_node* %1182 to %struct.tree_common*
  %1184 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1183, i32 0, i32 1
  %1185 = load %union.tree_node*, %union.tree_node** %1184, align 8
  %1186 = load %struct.function*, %struct.function** @cfun, align 8
  %1187 = getelementptr inbounds %struct.function, %struct.function* %1186, i32 0, i32 9
  %1188 = load i32, i32* %1187, align 4
  %1189 = call i32 @ix86_return_pops_args(%union.tree_node* %1181, %union.tree_node* %1185, i32 %1188)
  %1190 = icmp ne i32 %1180, %1189
  %1191 = load i32, i32* @x.5
  %1192 = load i32, i32* @y.6
  %1193 = sub i32 %1191, 1
  %1194 = mul i32 %1191, %1193
  %1195 = urem i32 %1194, 2
  %1196 = icmp eq i32 %1195, 0
  %1197 = icmp slt i32 %1192, 10
  %1198 = or i1 %1196, %1197
  br i1 %1198, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  br i1 %1190, label %1199, label %1200

; <label>:1199:                                   ; preds = %originalBBpart2268, %1158, %1139, %1022, %originalBBpart2252, %originalBBpart2248, %972, %originalBBpart2224, %950, %947
  store i32 0, i32* %16, align 4
  br label %1200

; <label>:1200:                                   ; preds = %1199, %originalBBpart2268
  %1201 = load i32, i32* %16, align 4
  %1202 = icmp ne i32 %1201, 0
  br i1 %1202, label %1206, label %1203

; <label>:1203:                                   ; preds = %1200
  %1204 = load i32, i32* %17, align 4
  %1205 = icmp ne i32 %1204, 0
  br i1 %1205, label %1206, label %1328

; <label>:1206:                                   ; preds = %1203, %1200
  store %union.tree_node* null, %union.tree_node** %8, align 8
  %1207 = load i32, i32* @target_flags, align 4
  %1208 = and i32 %1207, 2048
  %1209 = icmp ne i32 %1208, 0
  br i1 %1209, label %1216, label %1210

; <label>:1210:                                   ; preds = %1206
  %1211 = load i32, i32* @target_flags, align 4
  %1212 = and i32 %1211, 4096
  %1213 = icmp ne i32 %1212, 0
  br i1 %1213, label %1216, label %1214

; <label>:1214:                                   ; preds = %1210
  store i32 1, i32* %56, align 4
  store i32 0, i32* %49, align 4
  %1215 = load i32, i32* %24, align 4
  store i32 %1215, i32* %55, align 4
  br label %1219

; <label>:1216:                                   ; preds = %1210, %1206
  store i32 -1, i32* %56, align 4
  %1217 = load i32, i32* %24, align 4
  %1218 = sub nsw i32 %1217, 1
  store i32 %1218, i32* %49, align 4
  store i32 -1, i32* %55, align 4
  br label %1219

; <label>:1219:                                   ; preds = %1216, %1214
  br label %1220

; <label>:1220:                                   ; preds = %1303, %1219
  %1221 = load i32, i32* %49, align 4
  %1222 = load i32, i32* %55, align 4
  %1223 = icmp ne i32 %1221, %1222
  br i1 %1223, label %1224, label %1307

; <label>:1224:                                   ; preds = %1220
  %1225 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %1226 = load i32, i32* %49, align 4
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1225, i64 %1227
  %1229 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1228, i32 0, i32 0
  %1230 = load %union.tree_node*, %union.tree_node** %1229, align 8
  %1231 = call i32 @unsafe_for_reeval(%union.tree_node* %1230)
  switch i32 %1231, label %1273 [
    i32 0, label %1232
    i32 1, label %1233
    i32 2, label %1246
  ]

; <label>:1232:                                   ; preds = %1224
  br label %1274

; <label>:1233:                                   ; preds = %1224
  %1234 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %1235 = load i32, i32* %49, align 4
  %1236 = sext i32 %1235 to i64
  %1237 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1234, i64 %1236
  %1238 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1237, i32 0, i32 0
  %1239 = load %union.tree_node*, %union.tree_node** %1238, align 8
  %1240 = call %union.tree_node* @unsave_expr(%union.tree_node* %1239)
  %1241 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %1242 = load i32, i32* %49, align 4
  %1243 = sext i32 %1242 to i64
  %1244 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1241, i64 %1243
  %1245 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1244, i32 0, i32 0
  store %union.tree_node* %1240, %union.tree_node** %1245, align 8
  br label %1274

; <label>:1246:                                   ; preds = %1224
  %1247 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %1248 = load i32, i32* %49, align 4
  %1249 = sext i32 %1248 to i64
  %1250 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1247, i64 %1249
  %1251 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1250, i32 0, i32 0
  %1252 = load %union.tree_node*, %union.tree_node** %1251, align 8
  %1253 = bitcast %union.tree_node* %1252 to %struct.tree_common*
  %1254 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1253, i32 0, i32 1
  %1255 = load %union.tree_node*, %union.tree_node** %1254, align 8
  %1256 = call %union.tree_node* @build_decl(i32 34, %union.tree_node* null, %union.tree_node* %1255)
  store %union.tree_node* %1256, %union.tree_node** %57, align 8
  %1257 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %1258 = load i32, i32* %49, align 4
  %1259 = sext i32 %1258 to i64
  %1260 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1257, i64 %1259
  %1261 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1260, i32 0, i32 0
  %1262 = load %union.tree_node*, %union.tree_node** %1261, align 8
  %1263 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1262, %struct.rtx_def* null, i32 0, i32 0)
  %1264 = load %union.tree_node*, %union.tree_node** %57, align 8
  %1265 = bitcast %union.tree_node* %1264 to %struct.tree_decl*
  %1266 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %1265, i32 0, i32 17
  store %struct.rtx_def* %1263, %struct.rtx_def** %1266, align 8
  %1267 = load %union.tree_node*, %union.tree_node** %57, align 8
  %1268 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %1269 = load i32, i32* %49, align 4
  %1270 = sext i32 %1269 to i64
  %1271 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1268, i64 %1270
  %1272 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1271, i32 0, i32 0
  store %union.tree_node* %1267, %union.tree_node** %1272, align 8
  br label %1274

; <label>:1273:                                   ; preds = %1224
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 2528, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_call, i32 0, i32 0)) #8
  unreachable

; <label>:1274:                                   ; preds = %1246, %1233, %1232
  %1275 = load i32, i32* %17, align 4
  %1276 = icmp ne i32 %1275, 0
  br i1 %1276, label %1277, label %1286

; <label>:1277:                                   ; preds = %1274
  %1278 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %1279 = load i32, i32* %49, align 4
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1278, i64 %1280
  %1282 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1281, i32 0, i32 0
  %1283 = load %union.tree_node*, %union.tree_node** %1282, align 8
  %1284 = load %union.tree_node*, %union.tree_node** %8, align 8
  %1285 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %1283, %union.tree_node* %1284)
  store %union.tree_node* %1285, %union.tree_node** %8, align 8
  br label %1286

; <label>:1286:                                   ; preds = %1277, %1274
  %1287 = load i32, i32* @x.5
  %1288 = load i32, i32* @y.6
  %1289 = sub i32 %1287, 1
  %1290 = mul i32 %1287, %1289
  %1291 = urem i32 %1290, 2
  %1292 = icmp eq i32 %1291, 0
  %1293 = icmp slt i32 %1288, 10
  %1294 = or i1 %1292, %1293
  br i1 %1294, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %originalBB270alteredBB, %1286
  %1295 = load i32, i32* @x.5
  %1296 = load i32, i32* @y.6
  %1297 = sub i32 %1295, 1
  %1298 = mul i32 %1295, %1297
  %1299 = urem i32 %1298, 2
  %1300 = icmp eq i32 %1299, 0
  %1301 = icmp slt i32 %1296, 10
  %1302 = or i1 %1300, %1301
  br i1 %1302, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br label %1303

; <label>:1303:                                   ; preds = %originalBBpart2272
  %1304 = load i32, i32* %56, align 4
  %1305 = load i32, i32* %49, align 4
  %1306 = add nsw i32 %1305, %1304
  store i32 %1306, i32* %49, align 4
  br label %1220

; <label>:1307:                                   ; preds = %1220
  %1308 = call i32 @any_pending_cleanups(i32 1)
  %1309 = icmp ne i32 %1308, 0
  br i1 %1309, label %1310, label %1311

; <label>:1310:                                   ; preds = %1307
  store i32 0, i32* %17, align 4
  store i32 0, i32* %16, align 4
  br label %1311

; <label>:1311:                                   ; preds = %1310, %1307
  %1312 = load i32, i32* @x.5
  %1313 = load i32, i32* @y.6
  %1314 = sub i32 %1312, 1
  %1315 = mul i32 %1312, %1314
  %1316 = urem i32 %1315, 2
  %1317 = icmp eq i32 %1316, 0
  %1318 = icmp slt i32 %1313, 10
  %1319 = or i1 %1317, %1318
  br i1 %1319, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %originalBB274alteredBB, %1311
  %1320 = load i32, i32* @x.5
  %1321 = load i32, i32* @y.6
  %1322 = sub i32 %1320, 1
  %1323 = mul i32 %1320, %1322
  %1324 = urem i32 %1323, 2
  %1325 = icmp eq i32 %1324, 0
  %1326 = icmp slt i32 %1321, 10
  %1327 = or i1 %1325, %1326
  br i1 %1327, label %originalBBpart2276, label %originalBB274alteredBB

originalBBpart2276:                               ; preds = %originalBB274
  br label %1328

; <label>:1328:                                   ; preds = %originalBBpart2276, %1203
  %1329 = load i32, i32* @x.5
  %1330 = load i32, i32* @y.6
  %1331 = sub i32 %1329, 1
  %1332 = mul i32 %1329, %1331
  %1333 = urem i32 %1332, 2
  %1334 = icmp eq i32 %1333, 0
  %1335 = icmp slt i32 %1330, 10
  %1336 = or i1 %1334, %1335
  br i1 %1336, label %originalBB278, label %originalBB278alteredBB

originalBB278:                                    ; preds = %originalBB278alteredBB, %1328
  %1337 = load i32, i32* %17, align 4
  %1338 = icmp ne i32 %1337, 0
  %1339 = load i32, i32* @x.5
  %1340 = load i32, i32* @y.6
  %1341 = sub i32 %1339, 1
  %1342 = mul i32 %1339, %1341
  %1343 = urem i32 %1342, 2
  %1344 = icmp eq i32 %1343, 0
  %1345 = icmp slt i32 %1340, 10
  %1346 = or i1 %1344, %1345
  br i1 %1346, label %originalBBpart2280, label %originalBB278alteredBB

originalBBpart2280:                               ; preds = %originalBB278
  br i1 %1338, label %1347, label %1412

; <label>:1347:                                   ; preds = %originalBBpart2280
  %1348 = load %struct.function*, %struct.function** @cfun, align 8
  %1349 = getelementptr inbounds %struct.function, %struct.function* %1348, i32 0, i32 2
  %1350 = load %struct.expr_status*, %struct.expr_status** %1349, align 8
  %1351 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1350, i32 0, i32 0
  %1352 = load i32, i32* %1351, align 8
  store i32 %1352, i32* %58, align 4
  %1353 = load %struct.function*, %struct.function** @cfun, align 8
  %1354 = getelementptr inbounds %struct.function, %struct.function* %1353, i32 0, i32 2
  %1355 = load %struct.expr_status*, %struct.expr_status** %1354, align 8
  %1356 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1355, i32 0, i32 2
  %1357 = load i32, i32* %1356, align 8
  store i32 %1357, i32* %59, align 4
  call void @emit_queue()
  call void @start_sequence()
  call void @expand_start_target_temps()
  %1358 = load %union.tree_node*, %union.tree_node** %8, align 8
  %1359 = call %struct.rtx_def* @get_last_insn()
  %1360 = call i32 @optimize_tail_recursion(%union.tree_node* %1358, %struct.rtx_def* %1359)
  %1361 = icmp ne i32 %1360, 0
  br i1 %1361, label %1362, label %1401

; <label>:1362:                                   ; preds = %1347
  %1363 = call i32 @any_pending_cleanups(i32 1)
  %1364 = icmp ne i32 %1363, 0
  br i1 %1364, label %1365, label %1382

; <label>:1365:                                   ; preds = %1362
  %1366 = load i32, i32* @x.5
  %1367 = load i32, i32* @y.6
  %1368 = sub i32 %1366, 1
  %1369 = mul i32 %1366, %1368
  %1370 = urem i32 %1369, 2
  %1371 = icmp eq i32 %1370, 0
  %1372 = icmp slt i32 %1367, 10
  %1373 = or i1 %1371, %1372
  br i1 %1373, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %originalBB282alteredBB, %1365
  store i32 0, i32* %17, align 4
  store i32 0, i32* %16, align 4
  %1374 = load i32, i32* @x.5
  %1375 = load i32, i32* @y.6
  %1376 = sub i32 %1374, 1
  %1377 = mul i32 %1374, %1376
  %1378 = urem i32 %1377, 2
  %1379 = icmp eq i32 %1378, 0
  %1380 = icmp slt i32 %1375, 10
  %1381 = or i1 %1379, %1380
  br i1 %1381, label %originalBBpart2284, label %originalBB282alteredBB

originalBBpart2284:                               ; preds = %originalBB282
  br label %1384

; <label>:1382:                                   ; preds = %1362
  %1383 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %1383, %struct.rtx_def** %10, align 8
  br label %1384

; <label>:1384:                                   ; preds = %1382, %originalBBpart2284
  %1385 = load i32, i32* @x.5
  %1386 = load i32, i32* @y.6
  %1387 = sub i32 %1385, 1
  %1388 = mul i32 %1385, %1387
  %1389 = urem i32 %1388, 2
  %1390 = icmp eq i32 %1389, 0
  %1391 = icmp slt i32 %1386, 10
  %1392 = or i1 %1390, %1391
  br i1 %1392, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %originalBB286alteredBB, %1384
  %1393 = load i32, i32* @x.5
  %1394 = load i32, i32* @y.6
  %1395 = sub i32 %1393, 1
  %1396 = mul i32 %1393, %1395
  %1397 = urem i32 %1396, 2
  %1398 = icmp eq i32 %1397, 0
  %1399 = icmp slt i32 %1394, 10
  %1400 = or i1 %1398, %1399
  br i1 %1400, label %originalBBpart2289, label %originalBB286alteredBB

originalBBpart2289:                               ; preds = %originalBB286
  br label %1401

; <label>:1401:                                   ; preds = %originalBBpart2289, %1347
  call void @expand_end_target_temps()
  call void @end_sequence()
  %1402 = load i32, i32* %58, align 4
  %1403 = load %struct.function*, %struct.function** @cfun, align 8
  %1404 = getelementptr inbounds %struct.function, %struct.function* %1403, i32 0, i32 2
  %1405 = load %struct.expr_status*, %struct.expr_status** %1404, align 8
  %1406 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1405, i32 0, i32 0
  store i32 %1402, i32* %1406, align 8
  %1407 = load i32, i32* %59, align 4
  %1408 = load %struct.function*, %struct.function** @cfun, align 8
  %1409 = getelementptr inbounds %struct.function, %struct.function* %1408, i32 0, i32 2
  %1410 = load %struct.expr_status*, %struct.expr_status** %1409, align 8
  %1411 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1410, i32 0, i32 2
  store i32 %1407, i32* %1411, align 8
  br label %1412

; <label>:1412:                                   ; preds = %1401, %originalBBpart2280
  %1413 = load i32, i32* @x.5
  %1414 = load i32, i32* @y.6
  %1415 = sub i32 %1413, 1
  %1416 = mul i32 %1413, %1415
  %1417 = urem i32 %1416, 2
  %1418 = icmp eq i32 %1417, 0
  %1419 = icmp slt i32 %1414, 10
  %1420 = or i1 %1418, %1419
  br i1 %1420, label %originalBB291, label %originalBB291alteredBB

originalBB291:                                    ; preds = %originalBB291alteredBB, %1412
  %1421 = load i32, i32* @profile_arc_flag, align 4
  %1422 = icmp ne i32 %1421, 0
  %1423 = load i32, i32* @x.5
  %1424 = load i32, i32* @y.6
  %1425 = sub i32 %1423, 1
  %1426 = mul i32 %1423, %1425
  %1427 = urem i32 %1426, 2
  %1428 = icmp eq i32 %1427, 0
  %1429 = icmp slt i32 %1424, 10
  %1430 = or i1 %1428, %1429
  br i1 %1430, label %originalBBpart2293, label %originalBB291alteredBB

originalBBpart2293:                               ; preds = %originalBB291
  br i1 %1422, label %1431, label %1457

; <label>:1431:                                   ; preds = %originalBBpart2293
  %1432 = load i32, i32* %35, align 4
  %1433 = and i32 %1432, 128
  %1434 = icmp ne i32 %1433, 0
  br i1 %1434, label %1435, label %1457

; <label>:1435:                                   ; preds = %1431
  %1436 = load i32, i32* @x.5
  %1437 = load i32, i32* @y.6
  %1438 = sub i32 %1436, 1
  %1439 = mul i32 %1436, %1438
  %1440 = urem i32 %1439, 2
  %1441 = icmp eq i32 %1440, 0
  %1442 = icmp slt i32 %1437, 10
  %1443 = or i1 %1441, %1442
  br i1 %1443, label %originalBB295, label %originalBB295alteredBB

originalBB295:                                    ; preds = %originalBB295alteredBB, %1435
  %1444 = load i32, i32* @target_flags, align 4
  %1445 = and i32 %1444, 33554432
  %1446 = icmp ne i32 %1445, 0
  %1447 = select i1 %1446, i32 5, i32 4
  %1448 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %1447, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0))
  call void (%struct.rtx_def*, i32, i32, i32, ...) @emit_library_call(%struct.rtx_def* %1448, i32 7, i32 0, i32 0)
  %1449 = load i32, i32* @x.5
  %1450 = load i32, i32* @y.6
  %1451 = sub i32 %1449, 1
  %1452 = mul i32 %1449, %1451
  %1453 = urem i32 %1452, 2
  %1454 = icmp eq i32 %1453, 0
  %1455 = icmp slt i32 %1450, 10
  %1456 = or i1 %1454, %1455
  br i1 %1456, label %originalBBpart2299, label %originalBB295alteredBB

originalBBpart2299:                               ; preds = %originalBB295
  br label %1457

; <label>:1457:                                   ; preds = %originalBBpart2299, %1431, %originalBBpart2293
  %1458 = load %struct.function*, %struct.function** @cfun, align 8
  %1459 = getelementptr inbounds %struct.function, %struct.function* %1458, i32 0, i32 53
  %1460 = load i32, i32* %1459, align 4
  %1461 = sext i32 %1460 to i64
  %1462 = load i64, i64* %50, align 8
  %1463 = icmp slt i64 %1461, %1462
  br i1 %1463, label %1464, label %1489

; <label>:1464:                                   ; preds = %1457
  %1465 = load i32, i32* @x.5
  %1466 = load i32, i32* @y.6
  %1467 = sub i32 %1465, 1
  %1468 = mul i32 %1465, %1467
  %1469 = urem i32 %1468, 2
  %1470 = icmp eq i32 %1469, 0
  %1471 = icmp slt i32 %1466, 10
  %1472 = or i1 %1470, %1471
  br i1 %1472, label %originalBB301, label %originalBB301alteredBB

originalBB301:                                    ; preds = %originalBB301alteredBB, %1464
  %1473 = load %union.tree_node*, %union.tree_node** %14, align 8
  %1474 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %1475 = icmp ne %union.tree_node* %1473, %1474
  %1476 = load i32, i32* @x.5
  %1477 = load i32, i32* @y.6
  %1478 = sub i32 %1476, 1
  %1479 = mul i32 %1476, %1478
  %1480 = urem i32 %1479, 2
  %1481 = icmp eq i32 %1480, 0
  %1482 = icmp slt i32 %1477, 10
  %1483 = or i1 %1481, %1482
  br i1 %1483, label %originalBBpart2303, label %originalBB301alteredBB

originalBBpart2303:                               ; preds = %originalBB301
  br i1 %1475, label %1484, label %1489

; <label>:1484:                                   ; preds = %originalBBpart2303
  %1485 = load i64, i64* %50, align 8
  %1486 = trunc i64 %1485 to i32
  %1487 = load %struct.function*, %struct.function** @cfun, align 8
  %1488 = getelementptr inbounds %struct.function, %struct.function* %1487, i32 0, i32 53
  store i32 %1486, i32* %1488, align 4
  br label %1489

; <label>:1489:                                   ; preds = %1484, %originalBBpart2303, %1457
  %1490 = load i64, i64* %50, align 8
  %1491 = sdiv i64 %1490, 8
  store i64 %1491, i64* %51, align 8
  %1492 = load %struct.function*, %struct.function** @cfun, align 8
  %1493 = getelementptr inbounds %struct.function, %struct.function* %1492, i32 0, i32 18
  %1494 = load i32, i32* %1493, align 8
  %1495 = add nsw i32 %1494, 1
  store i32 %1495, i32* %1493, align 8
  store i32 0, i32* %18, align 4
  br label %1496

; <label>:1496:                                   ; preds = %4132, %1489
  %1497 = load i32, i32* %18, align 4
  %1498 = icmp slt i32 %1497, 2
  br i1 %1498, label %1499, label %4135

; <label>:1499:                                   ; preds = %1496
  store i32 0, i32* %60, align 4
  store i32 0, i32* %61, align 4
  store i32 0, i32* %62, align 4
  %1500 = load i32, i32* %18, align 4
  %1501 = icmp eq i32 %1500, 0
  br i1 %1501, label %1502, label %1549

; <label>:1502:                                   ; preds = %1499
  %1503 = load i32, i32* @x.5
  %1504 = load i32, i32* @y.6
  %1505 = sub i32 %1503, 1
  %1506 = mul i32 %1503, %1505
  %1507 = urem i32 %1506, 2
  %1508 = icmp eq i32 %1507, 0
  %1509 = icmp slt i32 %1504, 10
  %1510 = or i1 %1508, %1509
  br i1 %1510, label %originalBB305, label %originalBB305alteredBB

originalBB305:                                    ; preds = %originalBB305alteredBB, %1502
  %1511 = load i32, i32* %16, align 4
  %1512 = icmp ne i32 %1511, 0
  %1513 = load i32, i32* @x.5
  %1514 = load i32, i32* @y.6
  %1515 = sub i32 %1513, 1
  %1516 = mul i32 %1513, %1515
  %1517 = urem i32 %1516, 2
  %1518 = icmp eq i32 %1517, 0
  %1519 = icmp slt i32 %1514, 10
  %1520 = or i1 %1518, %1519
  br i1 %1520, label %originalBBpart2307, label %originalBB305alteredBB

originalBBpart2307:                               ; preds = %originalBB305
  br i1 %1512, label %1522, label %1521

; <label>:1521:                                   ; preds = %originalBBpart2307
  br label %4132

; <label>:1522:                                   ; preds = %originalBBpart2307
  %1523 = load i32, i32* @x.5
  %1524 = load i32, i32* @y.6
  %1525 = sub i32 %1523, 1
  %1526 = mul i32 %1523, %1525
  %1527 = urem i32 %1526, 2
  %1528 = icmp eq i32 %1527, 0
  %1529 = icmp slt i32 %1524, 10
  %1530 = or i1 %1528, %1529
  br i1 %1530, label %originalBB309, label %originalBB309alteredBB

originalBB309:                                    ; preds = %originalBB309alteredBB, %1522
  call void @emit_queue()
  %1531 = load %struct.function*, %struct.function** @cfun, align 8
  %1532 = getelementptr inbounds %struct.function, %struct.function* %1531, i32 0, i32 2
  %1533 = load %struct.expr_status*, %struct.expr_status** %1532, align 8
  %1534 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1533, i32 0, i32 0
  %1535 = load i32, i32* %1534, align 8
  store i32 %1535, i32* %61, align 4
  %1536 = load %struct.function*, %struct.function** @cfun, align 8
  %1537 = getelementptr inbounds %struct.function, %struct.function* %1536, i32 0, i32 2
  %1538 = load %struct.expr_status*, %struct.expr_status** %1537, align 8
  %1539 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1538, i32 0, i32 2
  %1540 = load i32, i32* %1539, align 8
  store i32 %1540, i32* %62, align 4
  %1541 = load i32, i32* @x.5
  %1542 = load i32, i32* @y.6
  %1543 = sub i32 %1541, 1
  %1544 = mul i32 %1541, %1543
  %1545 = urem i32 %1544, 2
  %1546 = icmp eq i32 %1545, 0
  %1547 = icmp slt i32 %1542, 10
  %1548 = or i1 %1546, %1547
  br i1 %1548, label %originalBBpart2311, label %originalBB309alteredBB

originalBBpart2311:                               ; preds = %originalBB309
  br label %1549

; <label>:1549:                                   ; preds = %originalBBpart2311, %1499
  %1550 = load i32, i32* @x.5
  %1551 = load i32, i32* @y.6
  %1552 = sub i32 %1550, 1
  %1553 = mul i32 %1550, %1552
  %1554 = urem i32 %1553, 2
  %1555 = icmp eq i32 %1554, 0
  %1556 = icmp slt i32 %1551, 10
  %1557 = or i1 %1555, %1556
  br i1 %1557, label %originalBB313, label %originalBB313alteredBB

originalBB313:                                    ; preds = %originalBB313alteredBB, %1549
  %1558 = load i32, i32* %18, align 4
  %1559 = icmp ne i32 %1558, 0
  %1560 = load i32, i32* @x.5
  %1561 = load i32, i32* @y.6
  %1562 = sub i32 %1560, 1
  %1563 = mul i32 %1560, %1562
  %1564 = urem i32 %1563, 2
  %1565 = icmp eq i32 %1564, 0
  %1566 = icmp slt i32 %1561, 10
  %1567 = or i1 %1565, %1566
  br i1 %1567, label %originalBBpart2315, label %originalBB313alteredBB

originalBBpart2315:                               ; preds = %originalBB313
  br i1 %1559, label %1568, label %1571

; <label>:1568:                                   ; preds = %originalBBpart2315
  %1569 = load i32, i32* %35, align 4
  %1570 = and i32 %1569, -257
  store i32 %1570, i32* %35, align 4
  br label %1574

; <label>:1571:                                   ; preds = %originalBBpart2315
  %1572 = load i32, i32* %35, align 4
  %1573 = or i32 %1572, 256
  store i32 %1573, i32* %35, align 4
  br label %1574

; <label>:1574:                                   ; preds = %1571, %1568
  store %struct.rtx_def* null, %struct.rtx_def** %34, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %47, align 8
  call void @start_sequence()
  %1575 = load i32, i32* %18, align 4
  %1576 = icmp eq i32 %1575, 0
  br i1 %1576, label %1577, label %1578

; <label>:1577:                                   ; preds = %1574
  call void @expand_start_target_temps()
  br label %1578

; <label>:1578:                                   ; preds = %1577, %1574
  %1579 = load %struct.function*, %struct.function** @cfun, align 8
  %1580 = getelementptr inbounds %struct.function, %struct.function* %1579, i32 0, i32 2
  %1581 = load %struct.expr_status*, %struct.expr_status** %1580, align 8
  %1582 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1581, i32 0, i32 0
  %1583 = load i32, i32* %1582, align 8
  %1584 = icmp sge i32 %1583, 32
  br i1 %1584, label %1599, label %1585

; <label>:1585:                                   ; preds = %1578
  %1586 = load %struct.function*, %struct.function** @cfun, align 8
  %1587 = getelementptr inbounds %struct.function, %struct.function* %1586, i32 0, i32 2
  %1588 = load %struct.expr_status*, %struct.expr_status** %1587, align 8
  %1589 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1588, i32 0, i32 0
  %1590 = load i32, i32* %1589, align 8
  %1591 = icmp sgt i32 %1590, 0
  br i1 %1591, label %1592, label %1596

; <label>:1592:                                   ; preds = %1585
  %1593 = load i32, i32* %35, align 4
  %1594 = and i32 %1593, 1032
  %1595 = icmp ne i32 %1594, 0
  br i1 %1595, label %1599, label %1596

; <label>:1596:                                   ; preds = %1592, %1585
  %1597 = load i32, i32* %18, align 4
  %1598 = icmp eq i32 %1597, 0
  br i1 %1598, label %1599, label %1600

; <label>:1599:                                   ; preds = %1596, %1592, %1578
  call void @do_pending_stack_adjust()
  br label %1600

; <label>:1600:                                   ; preds = %1599, %1596
  %1601 = load i32, i32* %18, align 4
  %1602 = icmp ne i32 %1601, 0
  br i1 %1602, label %1603, label %1614

; <label>:1603:                                   ; preds = %1600
  %1604 = load i32, i32* %35, align 4
  %1605 = and i32 %1604, 4096
  %1606 = icmp ne i32 %1605, 0
  br i1 %1606, label %1607, label %1614

; <label>:1607:                                   ; preds = %1603
  %1608 = load %struct.function*, %struct.function** @cfun, align 8
  %1609 = getelementptr inbounds %struct.function, %struct.function* %1608, i32 0, i32 2
  %1610 = load %struct.expr_status*, %struct.expr_status** %1609, align 8
  %1611 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1610, i32 0, i32 1
  %1612 = load i32, i32* %1611, align 4
  %1613 = add nsw i32 %1612, 1
  store i32 %1613, i32* %1611, align 4
  br label %1614

; <label>:1614:                                   ; preds = %1607, %1603, %1600
  %1615 = load i32, i32* @x.5
  %1616 = load i32, i32* @y.6
  %1617 = sub i32 %1615, 1
  %1618 = mul i32 %1615, %1617
  %1619 = urem i32 %1618, 2
  %1620 = icmp eq i32 %1619, 0
  %1621 = icmp slt i32 %1616, 10
  %1622 = or i1 %1620, %1621
  br i1 %1622, label %originalBB317, label %originalBB317alteredBB

originalBB317:                                    ; preds = %originalBB317alteredBB, %1614
  %1623 = load i32, i32* %18, align 4
  %1624 = icmp ne i32 %1623, 0
  %1625 = load i32, i32* @x.5
  %1626 = load i32, i32* @y.6
  %1627 = sub i32 %1625, 1
  %1628 = mul i32 %1625, %1627
  %1629 = urem i32 %1628, 2
  %1630 = icmp eq i32 %1629, 0
  %1631 = icmp slt i32 %1626, 10
  %1632 = or i1 %1630, %1631
  br i1 %1632, label %originalBBpart2319, label %originalBB317alteredBB

originalBBpart2319:                               ; preds = %originalBB317
  br i1 %1624, label %1633, label %1637

; <label>:1633:                                   ; preds = %originalBBpart2319
  %1634 = load i32, i32* %35, align 4
  %1635 = load i32, i32* %24, align 4
  %1636 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  call void @precompute_arguments(i32 %1634, i32 %1635, %struct.arg_data* %1636)
  br label %1637

; <label>:1637:                                   ; preds = %1633, %originalBBpart2319
  %1638 = load i32, i32* %18, align 4
  %1639 = icmp ne i32 %1638, 0
  br i1 %1639, label %1640, label %1661

; <label>:1640:                                   ; preds = %1637
  %1641 = load i32, i32* %35, align 4
  %1642 = and i32 %1641, 4100
  %1643 = icmp ne i32 %1642, 0
  br i1 %1643, label %1644, label %1661

; <label>:1644:                                   ; preds = %1640
  %1645 = load i32, i32* @x.5
  %1646 = load i32, i32* @y.6
  %1647 = sub i32 %1645, 1
  %1648 = mul i32 %1645, %1647
  %1649 = urem i32 %1648, 2
  %1650 = icmp eq i32 %1649, 0
  %1651 = icmp slt i32 %1646, 10
  %1652 = or i1 %1650, %1651
  br i1 %1652, label %originalBB321, label %originalBB321alteredBB

originalBB321:                                    ; preds = %originalBB321alteredBB, %1644
  call void @start_sequence()
  %1653 = load i32, i32* @x.5
  %1654 = load i32, i32* @y.6
  %1655 = sub i32 %1653, 1
  %1656 = mul i32 %1653, %1655
  %1657 = urem i32 %1656, 2
  %1658 = icmp eq i32 %1657, 0
  %1659 = icmp slt i32 %1654, 10
  %1660 = or i1 %1658, %1659
  br i1 %1660, label %originalBBpart2323, label %originalBB321alteredBB

originalBBpart2323:                               ; preds = %originalBB321
  br label %1661

; <label>:1661:                                   ; preds = %originalBBpart2323, %1640, %1637
  %1662 = load i32, i32* @x.5
  %1663 = load i32, i32* @y.6
  %1664 = sub i32 %1662, 1
  %1665 = mul i32 %1662, %1664
  %1666 = urem i32 %1665, 2
  %1667 = icmp eq i32 %1666, 0
  %1668 = icmp slt i32 %1663, 10
  %1669 = or i1 %1667, %1668
  br i1 %1669, label %originalBB325, label %originalBB325alteredBB

originalBB325:                                    ; preds = %originalBB325alteredBB, %1661
  %1670 = bitcast %struct.args_size* %28 to i8*
  %1671 = bitcast %struct.args_size* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1670, i8* %1671, i64 16, i32 8, i1 false)
  %1672 = load i32, i32* %33, align 4
  %1673 = load i32, i32* %18, align 4
  %1674 = icmp eq i32 %1673, 0
  %1675 = load i32, i32* @x.5
  %1676 = load i32, i32* @y.6
  %1677 = sub i32 %1675, 1
  %1678 = mul i32 %1675, %1677
  %1679 = urem i32 %1678, 2
  %1680 = icmp eq i32 %1679, 0
  %1681 = icmp slt i32 %1676, 10
  %1682 = or i1 %1680, %1681
  br i1 %1682, label %originalBBpart2327, label %originalBB325alteredBB

originalBBpart2327:                               ; preds = %originalBB325
  br i1 %1674, label %1683, label %1700

; <label>:1683:                                   ; preds = %originalBBpart2327
  %1684 = load i32, i32* @x.5
  %1685 = load i32, i32* @y.6
  %1686 = sub i32 %1684, 1
  %1687 = mul i32 %1684, %1686
  %1688 = urem i32 %1687, 2
  %1689 = icmp eq i32 %1688, 0
  %1690 = icmp slt i32 %1685, 10
  %1691 = or i1 %1689, %1690
  br i1 %1691, label %originalBB329, label %originalBB329alteredBB

originalBB329:                                    ; preds = %originalBB329alteredBB, %1683
  %1692 = load i32, i32* @x.5
  %1693 = load i32, i32* @y.6
  %1694 = sub i32 %1692, 1
  %1695 = mul i32 %1692, %1694
  %1696 = urem i32 %1695, 2
  %1697 = icmp eq i32 %1696, 0
  %1698 = icmp slt i32 %1693, 10
  %1699 = or i1 %1697, %1698
  br i1 %1699, label %originalBBpart2331, label %originalBB329alteredBB

originalBBpart2331:                               ; preds = %originalBB329
  br label %1702

; <label>:1700:                                   ; preds = %originalBBpart2327
  %1701 = load i64, i64* %50, align 8
  br label %1702

; <label>:1702:                                   ; preds = %1700, %originalBBpart2331
  %1703 = phi i64 [ 0, %originalBBpart2331 ], [ %1701, %1700 ]
  %1704 = trunc i64 %1703 to i32
  %1705 = call i32 @compute_argument_block_size(i32 %1672, %struct.args_size* %28, i32 %1704)
  store i32 %1705, i32* %29, align 4
  %1706 = load %struct.function*, %struct.function** @cfun, align 8
  %1707 = getelementptr inbounds %struct.function, %struct.function* %1706, i32 0, i32 2
  %1708 = load %struct.expr_status*, %struct.expr_status** %1707, align 8
  %1709 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1708, i32 0, i32 2
  %1710 = load i32, i32* %1709, align 8
  %1711 = load %struct.function*, %struct.function** @cfun, align 8
  %1712 = getelementptr inbounds %struct.function, %struct.function* %1711, i32 0, i32 2
  %1713 = load %struct.expr_status*, %struct.expr_status** %1712, align 8
  %1714 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1713, i32 0, i32 0
  %1715 = load i32, i32* %1714, align 8
  %1716 = sub nsw i32 %1710, %1715
  store i32 %1716, i32* %46, align 4
  %1717 = load i32, i32* %18, align 4
  %1718 = icmp eq i32 %1717, 0
  br i1 %1718, label %1719, label %1726

; <label>:1719:                                   ; preds = %1702
  %1720 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16
  store %struct.rtx_def* %1720, %struct.rtx_def** %34, align 8
  %1721 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 0
  %1722 = load i64, i64* %1721, align 8
  %1723 = trunc i64 %1722 to i32
  %1724 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %1723)
  store %struct.simple_bitmap_def* %1724, %struct.simple_bitmap_def** @stored_args_map, align 8
  %1725 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8
  call void @sbitmap_zero(%struct.simple_bitmap_def* %1725)
  br label %2155

; <label>:1726:                                   ; preds = %1702
  %1727 = load i32, i32* @x.5
  %1728 = load i32, i32* @y.6
  %1729 = sub i32 %1727, 1
  %1730 = mul i32 %1727, %1729
  %1731 = urem i32 %1730, 2
  %1732 = icmp eq i32 %1731, 0
  %1733 = icmp slt i32 %1728, 10
  %1734 = or i1 %1732, %1733
  br i1 %1734, label %originalBB333, label %originalBB333alteredBB

originalBB333:                                    ; preds = %originalBB333alteredBB, %1726
  %1735 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %1736 = load %union.tree_node*, %union.tree_node** %1735, align 8
  %1737 = icmp ne %union.tree_node* %1736, null
  %1738 = load i32, i32* @x.5
  %1739 = load i32, i32* @y.6
  %1740 = sub i32 %1738, 1
  %1741 = mul i32 %1738, %1740
  %1742 = urem i32 %1741, 2
  %1743 = icmp eq i32 %1742, 0
  %1744 = icmp slt i32 %1739, 10
  %1745 = or i1 %1743, %1744
  br i1 %1745, label %originalBBpart2335, label %originalBB333alteredBB

originalBBpart2335:                               ; preds = %originalBB333
  br i1 %1737, label %1746, label %1823

; <label>:1746:                                   ; preds = %originalBBpart2335
  %1747 = load %struct.rtx_def*, %struct.rtx_def** %43, align 8
  %1748 = icmp eq %struct.rtx_def* %1747, null
  br i1 %1748, label %1749, label %1760

; <label>:1749:                                   ; preds = %1746
  call void @emit_stack_save(i32 0, %struct.rtx_def** %43, %struct.rtx_def* null)
  %1750 = load %struct.function*, %struct.function** @cfun, align 8
  %1751 = getelementptr inbounds %struct.function, %struct.function* %1750, i32 0, i32 2
  %1752 = load %struct.expr_status*, %struct.expr_status** %1751, align 8
  %1753 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1752, i32 0, i32 0
  %1754 = load i32, i32* %1753, align 8
  store i32 %1754, i32* %44, align 4
  %1755 = load %struct.function*, %struct.function** @cfun, align 8
  %1756 = getelementptr inbounds %struct.function, %struct.function* %1755, i32 0, i32 2
  %1757 = load %struct.expr_status*, %struct.expr_status** %1756, align 8
  %1758 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1757, i32 0, i32 0
  store i32 0, i32* %1758, align 8
  %1759 = load i32, i32* @stack_arg_under_construction, align 4
  store i32 %1759, i32* %42, align 4
  store i32 0, i32* @stack_arg_under_construction, align 4
  br label %1760

; <label>:1760:                                   ; preds = %1749, %1746
  %1761 = load i32, i32* @x.5
  %1762 = load i32, i32* @y.6
  %1763 = sub i32 %1761, 1
  %1764 = mul i32 %1761, %1763
  %1765 = urem i32 %1764, 2
  %1766 = icmp eq i32 %1765, 0
  %1767 = icmp slt i32 %1762, 10
  %1768 = or i1 %1766, %1767
  br i1 %1768, label %originalBB337, label %originalBB337alteredBB

originalBB337:                                    ; preds = %originalBB337alteredBB, %1760
  %1769 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %1770 = load %union.tree_node*, %union.tree_node** %1769, align 8
  %1771 = icmp eq %union.tree_node* %1770, null
  %1772 = load i32, i32* @x.5
  %1773 = load i32, i32* @y.6
  %1774 = sub i32 %1772, 1
  %1775 = mul i32 %1772, %1774
  %1776 = urem i32 %1775, 2
  %1777 = icmp eq i32 %1776, 0
  %1778 = icmp slt i32 %1773, 10
  %1779 = or i1 %1777, %1778
  br i1 %1779, label %originalBBpart2339, label %originalBB337alteredBB

originalBBpart2339:                               ; preds = %originalBB337
  br i1 %1771, label %1780, label %1784

; <label>:1780:                                   ; preds = %originalBBpart2339
  %1781 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %1782 = load i64, i64* %1781, align 8
  %1783 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1782)
  br label %1820

; <label>:1784:                                   ; preds = %originalBBpart2339
  %1785 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %1786 = load %union.tree_node*, %union.tree_node** %1785, align 8
  %1787 = icmp eq %union.tree_node* %1786, null
  br i1 %1787, label %1788, label %1792

; <label>:1788:                                   ; preds = %1784
  %1789 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %1790 = load i64, i64* %1789, align 8
  %1791 = call %union.tree_node* @size_int_wide(i64 %1790, i32 1)
  br label %1801

; <label>:1792:                                   ; preds = %1784
  %1793 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1794 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %1795 = load %union.tree_node*, %union.tree_node** %1794, align 8
  %1796 = call %union.tree_node* @convert(%union.tree_node* %1793, %union.tree_node* %1795)
  %1797 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %1798 = load i64, i64* %1797, align 8
  %1799 = call %union.tree_node* @size_int_wide(i64 %1798, i32 1)
  %1800 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1796, %union.tree_node* %1799)
  br label %1801

; <label>:1801:                                   ; preds = %1792, %1788
  %1802 = phi %union.tree_node* [ %1791, %1788 ], [ %1800, %1792 ]
  %1803 = load i32, i32* @x.5
  %1804 = load i32, i32* @y.6
  %1805 = sub i32 %1803, 1
  %1806 = mul i32 %1803, %1805
  %1807 = urem i32 %1806, 2
  %1808 = icmp eq i32 %1807, 0
  %1809 = icmp slt i32 %1804, 10
  %1810 = or i1 %1808, %1809
  br i1 %1810, label %originalBB341, label %originalBB341alteredBB

originalBB341:                                    ; preds = %originalBB341alteredBB, %1801
  %1811 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1802, %struct.rtx_def* null, i32 0, i32 0)
  %1812 = load i32, i32* @x.5
  %1813 = load i32, i32* @y.6
  %1814 = sub i32 %1812, 1
  %1815 = mul i32 %1812, %1814
  %1816 = urem i32 %1815, 2
  %1817 = icmp eq i32 %1816, 0
  %1818 = icmp slt i32 %1813, 10
  %1819 = or i1 %1817, %1818
  br i1 %1819, label %originalBBpart2343, label %originalBB341alteredBB

originalBBpart2343:                               ; preds = %originalBB341
  br label %1820

; <label>:1820:                                   ; preds = %originalBBpart2343, %1780
  %1821 = phi %struct.rtx_def* [ %1783, %1780 ], [ %1811, %originalBBpart2343 ]
  %1822 = call %struct.rtx_def* @push_block(%struct.rtx_def* %1821, i32 0, i32 0)
  store %struct.rtx_def* %1822, %struct.rtx_def** %34, align 8
  br label %2138

; <label>:1823:                                   ; preds = %originalBBpart2335
  %1824 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %1825 = load i64, i64* %1824, align 8
  %1826 = trunc i64 %1825 to i32
  store i32 %1826, i32* %66, align 4
  %1827 = load i32, i32* %66, align 4
  %1828 = load %struct.function*, %struct.function** @cfun, align 8
  %1829 = getelementptr inbounds %struct.function, %struct.function* %1828, i32 0, i32 11
  %1830 = load i32, i32* %1829, align 4
  %1831 = icmp sgt i32 %1827, %1830
  br i1 %1831, label %1832, label %1836

; <label>:1832:                                   ; preds = %1823
  %1833 = load i32, i32* %66, align 4
  %1834 = load %struct.function*, %struct.function** @cfun, align 8
  %1835 = getelementptr inbounds %struct.function, %struct.function* %1834, i32 0, i32 11
  store i32 %1833, i32* %1835, align 4
  br label %1836

; <label>:1836:                                   ; preds = %1832, %1823
  %1837 = load i32, i32* %32, align 4
  %1838 = icmp ne i32 %1837, 0
  br i1 %1838, label %1839, label %2137

; <label>:1839:                                   ; preds = %1836
  %1840 = load i32, i32* @x.5
  %1841 = load i32, i32* @y.6
  %1842 = sub i32 %1840, 1
  %1843 = mul i32 %1840, %1842
  %1844 = urem i32 %1843, 2
  %1845 = icmp eq i32 %1844, 0
  %1846 = icmp slt i32 %1841, 10
  %1847 = or i1 %1845, %1846
  br i1 %1847, label %originalBB345, label %originalBB345alteredBB

originalBB345:                                    ; preds = %originalBB345alteredBB, %1839
  %1848 = load i32, i32* @target_flags, align 4
  %1849 = and i32 %1848, 4096
  %1850 = icmp ne i32 %1849, 0
  %1851 = load i32, i32* @x.5
  %1852 = load i32, i32* @y.6
  %1853 = sub i32 %1851, 1
  %1854 = mul i32 %1851, %1853
  %1855 = urem i32 %1854, 2
  %1856 = icmp eq i32 %1855, 0
  %1857 = icmp slt i32 %1852, 10
  %1858 = or i1 %1856, %1857
  br i1 %1858, label %originalBBpart2354, label %originalBB345alteredBB

originalBBpart2354:                               ; preds = %originalBB345
  br i1 %1850, label %1859, label %1913

; <label>:1859:                                   ; preds = %originalBBpart2354
  %1860 = load i32, i32* %33, align 4
  %1861 = load i32, i32* %66, align 4
  %1862 = add nsw i32 %1861, %1860
  store i32 %1862, i32* %66, align 4
  %1863 = load i32, i32* %40, align 4
  %1864 = load i32, i32* %66, align 4
  %1865 = icmp sgt i32 %1863, %1864
  br i1 %1865, label %1866, label %1868

; <label>:1866:                                   ; preds = %1859
  %1867 = load i32, i32* %40, align 4
  br label %1870

; <label>:1868:                                   ; preds = %1859
  %1869 = load i32, i32* %66, align 4
  br label %1870

; <label>:1870:                                   ; preds = %1868, %1866
  %1871 = phi i32 [ %1867, %1866 ], [ %1869, %1868 ]
  store i32 %1871, i32* @highest_outgoing_arg_in_use, align 4
  %1872 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %1873 = sext i32 %1872 to i64
  %1874 = alloca i8, i64 %1873, align 16
  store i8* %1874, i8** @stack_usage_map, align 8
  %1875 = load i32, i32* %40, align 4
  %1876 = icmp ne i32 %1875, 0
  br i1 %1876, label %1877, label %1882

; <label>:1877:                                   ; preds = %1870
  %1878 = load i8*, i8** @stack_usage_map, align 8
  %1879 = load i8*, i8** %41, align 8
  %1880 = load i32, i32* %40, align 4
  %1881 = sext i32 %1880 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1878, i8* %1879, i64 %1881, i32 1, i1 false)
  br label %1882

; <label>:1882:                                   ; preds = %1877, %1870
  %1883 = load i32, i32* %40, align 4
  %1884 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %1885 = icmp ne i32 %1883, %1884
  br i1 %1885, label %1886, label %1911

; <label>:1886:                                   ; preds = %1882
  %1887 = load i32, i32* @x.5
  %1888 = load i32, i32* @y.6
  %1889 = sub i32 %1887, 1
  %1890 = mul i32 %1887, %1889
  %1891 = urem i32 %1890, 2
  %1892 = icmp eq i32 %1891, 0
  %1893 = icmp slt i32 %1888, 10
  %1894 = or i1 %1892, %1893
  br i1 %1894, label %originalBB356, label %originalBB356alteredBB

originalBB356:                                    ; preds = %originalBB356alteredBB, %1886
  %1895 = load i8*, i8** @stack_usage_map, align 8
  %1896 = load i32, i32* %40, align 4
  %1897 = sext i32 %1896 to i64
  %1898 = getelementptr inbounds i8, i8* %1895, i64 %1897
  %1899 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %1900 = load i32, i32* %40, align 4
  %1901 = sub nsw i32 %1899, %1900
  %1902 = sext i32 %1901 to i64
  call void @llvm.memset.p0i8.i64(i8* %1898, i8 0, i64 %1902, i32 1, i1 false)
  %1903 = load i32, i32* @x.5
  %1904 = load i32, i32* @y.6
  %1905 = sub i32 %1903, 1
  %1906 = mul i32 %1903, %1905
  %1907 = urem i32 %1906, 2
  %1908 = icmp eq i32 %1907, 0
  %1909 = icmp slt i32 %1904, 10
  %1910 = or i1 %1908, %1909
  br i1 %1910, label %originalBBpart2362, label %originalBB356alteredBB

originalBBpart2362:                               ; preds = %originalBB356
  br label %1911

; <label>:1911:                                   ; preds = %originalBBpart2362, %1882
  store i32 0, i32* %66, align 4
  %1912 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8
  store %struct.rtx_def* %1912, %struct.rtx_def** %34, align 8
  br label %2120

; <label>:1913:                                   ; preds = %originalBBpart2354
  %1914 = load %struct.function*, %struct.function** @cfun, align 8
  %1915 = getelementptr inbounds %struct.function, %struct.function* %1914, i32 0, i32 2
  %1916 = load %struct.expr_status*, %struct.expr_status** %1915, align 8
  %1917 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1916, i32 0, i32 1
  %1918 = load i32, i32* %1917, align 4
  %1919 = icmp eq i32 %1918, 0
  br i1 %1919, label %1920, label %1959

; <label>:1920:                                   ; preds = %1913
  %1921 = load i32, i32* %29, align 4
  %1922 = load i64, i64* %51, align 8
  %1923 = trunc i64 %1922 to i32
  %1924 = call i32 @combine_pending_stack_adjustment_and_call(i32 %1921, %struct.args_size* %28, i32 %1923)
  store i32 %1924, i32* %66, align 4
  %1925 = load i32, i32* %29, align 4
  %1926 = load i32, i32* %66, align 4
  %1927 = sub nsw i32 %1925, %1926
  store i32 %1927, i32* %66, align 4
  %1928 = load i32, i32* %66, align 4
  %1929 = icmp slt i32 %1928, 0
  br i1 %1929, label %1930, label %1953

; <label>:1930:                                   ; preds = %1920
  %1931 = load i32, i32* @x.5
  %1932 = load i32, i32* @y.6
  %1933 = sub i32 %1931, 1
  %1934 = mul i32 %1931, %1933
  %1935 = urem i32 %1934, 2
  %1936 = icmp eq i32 %1935, 0
  %1937 = icmp slt i32 %1932, 10
  %1938 = or i1 %1936, %1937
  br i1 %1938, label %originalBB364, label %originalBB364alteredBB

originalBB364:                                    ; preds = %originalBB364alteredBB, %1930
  %1939 = load i32, i32* %66, align 4
  %1940 = sub nsw i32 0, %1939
  %1941 = load %struct.function*, %struct.function** @cfun, align 8
  %1942 = getelementptr inbounds %struct.function, %struct.function* %1941, i32 0, i32 2
  %1943 = load %struct.expr_status*, %struct.expr_status** %1942, align 8
  %1944 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1943, i32 0, i32 0
  store i32 %1940, i32* %1944, align 8
  call void @do_pending_stack_adjust()
  store i32 0, i32* %66, align 4
  %1945 = load i32, i32* @x.5
  %1946 = load i32, i32* @y.6
  %1947 = sub i32 %1945, 1
  %1948 = mul i32 %1945, %1947
  %1949 = urem i32 %1948, 2
  %1950 = icmp eq i32 %1949, 0
  %1951 = icmp slt i32 %1946, 10
  %1952 = or i1 %1950, %1951
  br i1 %1952, label %originalBBpart2366, label %originalBB364alteredBB

originalBBpart2366:                               ; preds = %originalBB364
  br label %1958

; <label>:1953:                                   ; preds = %1920
  %1954 = load %struct.function*, %struct.function** @cfun, align 8
  %1955 = getelementptr inbounds %struct.function, %struct.function* %1954, i32 0, i32 2
  %1956 = load %struct.expr_status*, %struct.expr_status** %1955, align 8
  %1957 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1956, i32 0, i32 0
  store i32 0, i32* %1957, align 8
  br label %1958

; <label>:1958:                                   ; preds = %1953, %originalBBpart2366
  br label %1959

; <label>:1959:                                   ; preds = %1958, %1913
  %1960 = load i32, i32* %66, align 4
  %1961 = icmp eq i32 %1960, 0
  br i1 %1961, label %1962, label %1964

; <label>:1962:                                   ; preds = %1959
  %1963 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8
  store %struct.rtx_def* %1963, %struct.rtx_def** %34, align 8
  br label %1985

; <label>:1964:                                   ; preds = %1959
  %1965 = load i32, i32* @x.5
  %1966 = load i32, i32* @y.6
  %1967 = sub i32 %1965, 1
  %1968 = mul i32 %1965, %1967
  %1969 = urem i32 %1968, 2
  %1970 = icmp eq i32 %1969, 0
  %1971 = icmp slt i32 %1966, 10
  %1972 = or i1 %1970, %1971
  br i1 %1972, label %originalBB368, label %originalBB368alteredBB

originalBB368:                                    ; preds = %originalBB368alteredBB, %1964
  %1973 = load i32, i32* %66, align 4
  %1974 = sext i32 %1973 to i64
  %1975 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1974)
  %1976 = call %struct.rtx_def* @push_block(%struct.rtx_def* %1975, i32 0, i32 0)
  store %struct.rtx_def* %1976, %struct.rtx_def** %34, align 8
  %1977 = load i32, i32* @x.5
  %1978 = load i32, i32* @y.6
  %1979 = sub i32 %1977, 1
  %1980 = mul i32 %1977, %1979
  %1981 = urem i32 %1980, 2
  %1982 = icmp eq i32 %1981, 0
  %1983 = icmp slt i32 %1978, 10
  %1984 = or i1 %1982, %1983
  br i1 %1984, label %originalBBpart2370, label %originalBB368alteredBB

originalBBpart2370:                               ; preds = %originalBB368
  br label %1985

; <label>:1985:                                   ; preds = %originalBBpart2370, %1962
  %1986 = load i32, i32* @x.5
  %1987 = load i32, i32* @y.6
  %1988 = sub i32 %1986, 1
  %1989 = mul i32 %1986, %1988
  %1990 = urem i32 %1989, 2
  %1991 = icmp eq i32 %1990, 0
  %1992 = icmp slt i32 %1987, 10
  %1993 = or i1 %1991, %1992
  br i1 %1993, label %originalBB372, label %originalBB372alteredBB

originalBB372:                                    ; preds = %originalBB372alteredBB, %1985
  %1994 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %1995 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %1994)
  store %struct.rtx_def* %1995, %struct.rtx_def** %34, align 8
  %1996 = load i32, i32* @stack_arg_under_construction, align 4
  %1997 = icmp ne i32 %1996, 0
  %1998 = load i32, i32* @x.5
  %1999 = load i32, i32* @y.6
  %2000 = sub i32 %1998, 1
  %2001 = mul i32 %1998, %2000
  %2002 = urem i32 %2001, 2
  %2003 = icmp eq i32 %2002, 0
  %2004 = icmp slt i32 %1999, 10
  %2005 = or i1 %2003, %2004
  br i1 %2005, label %originalBBpart2374, label %originalBB372alteredBB

originalBBpart2374:                               ; preds = %originalBB372
  br i1 %1997, label %2006, label %2051

; <label>:2006:                                   ; preds = %originalBBpart2374
  %2007 = load i32, i32* %33, align 4
  %2008 = sext i32 %2007 to i64
  %2009 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %2010 = load i64, i64* %2009, align 8
  %2011 = add nsw i64 %2008, %2010
  %2012 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %2011)
  store %struct.rtx_def* %2012, %struct.rtx_def** %67, align 8
  %2013 = load %struct.rtx_def*, %struct.rtx_def** %43, align 8
  %2014 = icmp eq %struct.rtx_def* %2013, null
  br i1 %2014, label %2015, label %2048

; <label>:2015:                                   ; preds = %2006
  %2016 = load i32, i32* @x.5
  %2017 = load i32, i32* @y.6
  %2018 = sub i32 %2016, 1
  %2019 = mul i32 %2016, %2018
  %2020 = urem i32 %2019, 2
  %2021 = icmp eq i32 %2020, 0
  %2022 = icmp slt i32 %2017, 10
  %2023 = or i1 %2021, %2022
  br i1 %2023, label %originalBB376, label %originalBB376alteredBB

originalBB376:                                    ; preds = %originalBB376alteredBB, %2015
  call void @emit_stack_save(i32 0, %struct.rtx_def** %43, %struct.rtx_def* null)
  %2024 = load %struct.function*, %struct.function** @cfun, align 8
  %2025 = getelementptr inbounds %struct.function, %struct.function* %2024, i32 0, i32 2
  %2026 = load %struct.expr_status*, %struct.expr_status** %2025, align 8
  %2027 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2026, i32 0, i32 0
  %2028 = load i32, i32* %2027, align 8
  store i32 %2028, i32* %44, align 4
  %2029 = load %struct.function*, %struct.function** @cfun, align 8
  %2030 = getelementptr inbounds %struct.function, %struct.function* %2029, i32 0, i32 2
  %2031 = load %struct.expr_status*, %struct.expr_status** %2030, align 8
  %2032 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2031, i32 0, i32 0
  store i32 0, i32* %2032, align 8
  %2033 = load i32, i32* @stack_arg_under_construction, align 4
  store i32 %2033, i32* %42, align 4
  store i32 0, i32* @stack_arg_under_construction, align 4
  %2034 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %2035 = sext i32 %2034 to i64
  %2036 = alloca i8, i64 %2035, align 16
  store i8* %2036, i8** @stack_usage_map, align 8
  %2037 = load i8*, i8** @stack_usage_map, align 8
  %2038 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %2039 = sext i32 %2038 to i64
  call void @llvm.memset.p0i8.i64(i8* %2037, i8 0, i64 %2039, i32 1, i1 false)
  store i32 0, i32* @highest_outgoing_arg_in_use, align 4
  %2040 = load i32, i32* @x.5
  %2041 = load i32, i32* @y.6
  %2042 = sub i32 %2040, 1
  %2043 = mul i32 %2040, %2042
  %2044 = urem i32 %2043, 2
  %2045 = icmp eq i32 %2044, 0
  %2046 = icmp slt i32 %2041, 10
  %2047 = or i1 %2045, %2046
  br i1 %2047, label %originalBBpart2378, label %originalBB376alteredBB

originalBBpart2378:                               ; preds = %originalBB376
  br label %2048

; <label>:2048:                                   ; preds = %originalBBpart2378, %2006
  %2049 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8
  %2050 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %2049, %struct.rtx_def* null, i32 8)
  br label %2051

; <label>:2051:                                   ; preds = %2048, %originalBBpart2374
  %2052 = load i32, i32* @x.5
  %2053 = load i32, i32* @y.6
  %2054 = sub i32 %2052, 1
  %2055 = mul i32 %2052, %2054
  %2056 = urem i32 %2055, 2
  %2057 = icmp eq i32 %2056, 0
  %2058 = icmp slt i32 %2053, 10
  %2059 = or i1 %2057, %2058
  br i1 %2059, label %originalBB380, label %originalBB380alteredBB

originalBB380:                                    ; preds = %originalBB380alteredBB, %2051
  store i32 0, i32* %49, align 4
  %2060 = load i32, i32* @x.5
  %2061 = load i32, i32* @y.6
  %2062 = sub i32 %2060, 1
  %2063 = mul i32 %2060, %2062
  %2064 = urem i32 %2063, 2
  %2065 = icmp eq i32 %2064, 0
  %2066 = icmp slt i32 %2061, 10
  %2067 = or i1 %2065, %2066
  br i1 %2067, label %originalBBpart2382, label %originalBB380alteredBB

originalBBpart2382:                               ; preds = %originalBB380
  br label %2068

; <label>:2068:                                   ; preds = %2100, %originalBBpart2382
  %2069 = load i32, i32* %49, align 4
  %2070 = load i32, i32* %24, align 4
  %2071 = icmp slt i32 %2069, %2070
  br i1 %2071, label %2072, label %2103

; <label>:2072:                                   ; preds = %2068
  %2073 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2074 = load i32, i32* %49, align 4
  %2075 = sext i32 %2074 to i64
  %2076 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2073, i64 %2075
  %2077 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2076, i32 0, i32 8
  %2078 = load i32, i32* %2077, align 8
  %2079 = icmp ne i32 %2078, 0
  br i1 %2079, label %2080, label %2083

; <label>:2080:                                   ; preds = %2072
  %2081 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2082 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %2081)
  store %struct.rtx_def* %2082, %struct.rtx_def** %34, align 8
  br label %2103

; <label>:2083:                                   ; preds = %2072
  %2084 = load i32, i32* @x.5
  %2085 = load i32, i32* @y.6
  %2086 = sub i32 %2084, 1
  %2087 = mul i32 %2084, %2086
  %2088 = urem i32 %2087, 2
  %2089 = icmp eq i32 %2088, 0
  %2090 = icmp slt i32 %2085, 10
  %2091 = or i1 %2089, %2090
  br i1 %2091, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %originalBB384alteredBB, %2083
  %2092 = load i32, i32* @x.5
  %2093 = load i32, i32* @y.6
  %2094 = sub i32 %2092, 1
  %2095 = mul i32 %2092, %2094
  %2096 = urem i32 %2095, 2
  %2097 = icmp eq i32 %2096, 0
  %2098 = icmp slt i32 %2093, 10
  %2099 = or i1 %2097, %2098
  br i1 %2099, label %originalBBpart2386, label %originalBB384alteredBB

originalBBpart2386:                               ; preds = %originalBB384
  br label %2100

; <label>:2100:                                   ; preds = %originalBBpart2386
  %2101 = load i32, i32* %49, align 4
  %2102 = add nsw i32 %2101, 1
  store i32 %2102, i32* %49, align 4
  br label %2068

; <label>:2103:                                   ; preds = %2080, %2068
  %2104 = load i32, i32* @x.5
  %2105 = load i32, i32* @y.6
  %2106 = sub i32 %2104, 1
  %2107 = mul i32 %2104, %2106
  %2108 = urem i32 %2107, 2
  %2109 = icmp eq i32 %2108, 0
  %2110 = icmp slt i32 %2105, 10
  %2111 = or i1 %2109, %2110
  br i1 %2111, label %originalBB388, label %originalBB388alteredBB

originalBB388:                                    ; preds = %originalBB388alteredBB, %2103
  %2112 = load i32, i32* @x.5
  %2113 = load i32, i32* @y.6
  %2114 = sub i32 %2112, 1
  %2115 = mul i32 %2112, %2114
  %2116 = urem i32 %2115, 2
  %2117 = icmp eq i32 %2116, 0
  %2118 = icmp slt i32 %2113, 10
  %2119 = or i1 %2117, %2118
  br i1 %2119, label %originalBBpart2390, label %originalBB388alteredBB

originalBBpart2390:                               ; preds = %originalBB388
  br label %2120

; <label>:2120:                                   ; preds = %originalBBpart2390, %1911
  %2121 = load i32, i32* @x.5
  %2122 = load i32, i32* @y.6
  %2123 = sub i32 %2121, 1
  %2124 = mul i32 %2121, %2123
  %2125 = urem i32 %2124, 2
  %2126 = icmp eq i32 %2125, 0
  %2127 = icmp slt i32 %2122, 10
  %2128 = or i1 %2126, %2127
  br i1 %2128, label %originalBB392, label %originalBB392alteredBB

originalBB392:                                    ; preds = %originalBB392alteredBB, %2120
  %2129 = load i32, i32* @x.5
  %2130 = load i32, i32* @y.6
  %2131 = sub i32 %2129, 1
  %2132 = mul i32 %2129, %2131
  %2133 = urem i32 %2132, 2
  %2134 = icmp eq i32 %2133, 0
  %2135 = icmp slt i32 %2130, 10
  %2136 = or i1 %2134, %2135
  br i1 %2136, label %originalBBpart2394, label %originalBB392alteredBB

originalBBpart2394:                               ; preds = %originalBB392
  br label %2137

; <label>:2137:                                   ; preds = %originalBBpart2394, %1836
  br label %2138

; <label>:2138:                                   ; preds = %2137, %1820
  %2139 = load i32, i32* @x.5
  %2140 = load i32, i32* @y.6
  %2141 = sub i32 %2139, 1
  %2142 = mul i32 %2139, %2141
  %2143 = urem i32 %2142, 2
  %2144 = icmp eq i32 %2143, 0
  %2145 = icmp slt i32 %2140, 10
  %2146 = or i1 %2144, %2145
  br i1 %2146, label %originalBB396, label %originalBB396alteredBB

originalBB396:                                    ; preds = %originalBB396alteredBB, %2138
  %2147 = load i32, i32* @x.5
  %2148 = load i32, i32* @y.6
  %2149 = sub i32 %2147, 1
  %2150 = mul i32 %2147, %2149
  %2151 = urem i32 %2150, 2
  %2152 = icmp eq i32 %2151, 0
  %2153 = icmp slt i32 %2148, 10
  %2154 = or i1 %2152, %2153
  br i1 %2154, label %originalBBpart2398, label %originalBB396alteredBB

originalBBpart2398:                               ; preds = %originalBB396
  br label %2155

; <label>:2155:                                   ; preds = %originalBBpart2398, %1719
  %2156 = load i32, i32* @x.5
  %2157 = load i32, i32* @y.6
  %2158 = sub i32 %2156, 1
  %2159 = mul i32 %2156, %2158
  %2160 = urem i32 %2159, 2
  %2161 = icmp eq i32 %2160, 0
  %2162 = icmp slt i32 %2157, 10
  %2163 = or i1 %2161, %2162
  br i1 %2163, label %originalBB400, label %originalBB400alteredBB

originalBB400:                                    ; preds = %originalBB400alteredBB, %2155
  %2164 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2165 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2166 = load i32, i32* %24, align 4
  call void @compute_argument_addresses(%struct.arg_data* %2164, %struct.rtx_def* %2165, i32 %2166)
  %2167 = load i32, i32* @target_flags, align 4
  %2168 = and i32 %2167, 2048
  %2169 = icmp ne i32 %2168, 0
  %2170 = load i32, i32* @x.5
  %2171 = load i32, i32* @y.6
  %2172 = sub i32 %2170, 1
  %2173 = mul i32 %2170, %2172
  %2174 = urem i32 %2173, 2
  %2175 = icmp eq i32 %2174, 0
  %2176 = icmp slt i32 %2171, 10
  %2177 = or i1 %2175, %2176
  br i1 %2177, label %originalBBpart2410, label %originalBB400alteredBB

originalBBpart2410:                               ; preds = %originalBB400
  br i1 %2169, label %2326, label %2178

; <label>:2178:                                   ; preds = %originalBBpart2410
  %2179 = load i32, i32* @x.5
  %2180 = load i32, i32* @y.6
  %2181 = sub i32 %2179, 1
  %2182 = mul i32 %2179, %2181
  %2183 = urem i32 %2182, 2
  %2184 = icmp eq i32 %2183, 0
  %2185 = icmp slt i32 %2180, 10
  %2186 = or i1 %2184, %2185
  br i1 %2186, label %originalBB412, label %originalBB412alteredBB

originalBB412:                                    ; preds = %originalBB412alteredBB, %2178
  %2187 = load i32, i32* @target_flags, align 4
  %2188 = and i32 %2187, 4096
  %2189 = icmp ne i32 %2188, 0
  %2190 = load i32, i32* @x.5
  %2191 = load i32, i32* @y.6
  %2192 = sub i32 %2190, 1
  %2193 = mul i32 %2190, %2192
  %2194 = urem i32 %2193, 2
  %2195 = icmp eq i32 %2194, 0
  %2196 = icmp slt i32 %2191, 10
  %2197 = or i1 %2195, %2196
  br i1 %2197, label %originalBBpart2419, label %originalBB412alteredBB

originalBBpart2419:                               ; preds = %originalBB412
  br i1 %2189, label %2326, label %2198

; <label>:2198:                                   ; preds = %originalBBpart2419
  %2199 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2200 = icmp eq %struct.rtx_def* %2199, null
  br i1 %2200, label %2201, label %2326

; <label>:2201:                                   ; preds = %2198
  %2202 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %2203 = load i64, i64* %2202, align 8
  %2204 = load i32, i32* %29, align 4
  %2205 = sext i32 %2204 to i64
  %2206 = icmp ne i64 %2203, %2205
  br i1 %2206, label %2207, label %2326

; <label>:2207:                                   ; preds = %2201
  %2208 = load i32, i32* @x.5
  %2209 = load i32, i32* @y.6
  %2210 = sub i32 %2208, 1
  %2211 = mul i32 %2208, %2210
  %2212 = urem i32 %2211, 2
  %2213 = icmp eq i32 %2212, 0
  %2214 = icmp slt i32 %2209, 10
  %2215 = or i1 %2213, %2214
  br i1 %2215, label %originalBB421, label %originalBB421alteredBB

originalBB421:                                    ; preds = %originalBB421alteredBB, %2207
  %2216 = load %struct.function*, %struct.function** @cfun, align 8
  %2217 = getelementptr inbounds %struct.function, %struct.function* %2216, i32 0, i32 2
  %2218 = load %struct.expr_status*, %struct.expr_status** %2217, align 8
  %2219 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2218, i32 0, i32 0
  %2220 = load i32, i32* %2219, align 8
  %2221 = icmp ne i32 %2220, 0
  %2222 = load i32, i32* @x.5
  %2223 = load i32, i32* @y.6
  %2224 = sub i32 %2222, 1
  %2225 = mul i32 %2222, %2224
  %2226 = urem i32 %2225, 2
  %2227 = icmp eq i32 %2226, 0
  %2228 = icmp slt i32 %2223, 10
  %2229 = or i1 %2227, %2228
  br i1 %2229, label %originalBBpart2423, label %originalBB421alteredBB

originalBBpart2423:                               ; preds = %originalBB421
  br i1 %2221, label %2230, label %2266

; <label>:2230:                                   ; preds = %originalBBpart2423
  %2231 = load i32, i32* @x.5
  %2232 = load i32, i32* @y.6
  %2233 = sub i32 %2231, 1
  %2234 = mul i32 %2231, %2233
  %2235 = urem i32 %2234, 2
  %2236 = icmp eq i32 %2235, 0
  %2237 = icmp slt i32 %2232, 10
  %2238 = or i1 %2236, %2237
  br i1 %2238, label %originalBB425, label %originalBB425alteredBB

originalBB425:                                    ; preds = %originalBB425alteredBB, %2230
  %2239 = load i32, i32* %35, align 4
  %2240 = and i32 %2239, 4096
  %2241 = icmp ne i32 %2240, 0
  %2242 = load i32, i32* @x.5
  %2243 = load i32, i32* @y.6
  %2244 = sub i32 %2242, 1
  %2245 = mul i32 %2242, %2244
  %2246 = urem i32 %2245, 2
  %2247 = icmp eq i32 %2246, 0
  %2248 = icmp slt i32 %2243, 10
  %2249 = or i1 %2247, %2248
  br i1 %2249, label %originalBBpart2429, label %originalBB425alteredBB

originalBBpart2429:                               ; preds = %originalBB425
  br i1 %2241, label %2266, label %2250

; <label>:2250:                                   ; preds = %originalBBpart2429
  %2251 = load %struct.function*, %struct.function** @cfun, align 8
  %2252 = getelementptr inbounds %struct.function, %struct.function* %2251, i32 0, i32 2
  %2253 = load %struct.expr_status*, %struct.expr_status** %2252, align 8
  %2254 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2253, i32 0, i32 1
  %2255 = load i32, i32* %2254, align 4
  %2256 = icmp ne i32 %2255, 0
  br i1 %2256, label %2266, label %2257

; <label>:2257:                                   ; preds = %2250
  %2258 = load i32, i32* %29, align 4
  %2259 = load i64, i64* %51, align 8
  %2260 = trunc i64 %2259 to i32
  %2261 = call i32 @combine_pending_stack_adjustment_and_call(i32 %2258, %struct.args_size* %28, i32 %2260)
  %2262 = load %struct.function*, %struct.function** @cfun, align 8
  %2263 = getelementptr inbounds %struct.function, %struct.function* %2262, i32 0, i32 2
  %2264 = load %struct.expr_status*, %struct.expr_status** %2263, align 8
  %2265 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2264, i32 0, i32 0
  store i32 %2261, i32* %2265, align 8
  call void @do_pending_stack_adjust()
  br label %2309

; <label>:2266:                                   ; preds = %2250, %originalBBpart2429, %originalBBpart2423
  %2267 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2268 = icmp eq %struct.rtx_def* %2267, null
  br i1 %2268, label %2269, label %2292

; <label>:2269:                                   ; preds = %2266
  %2270 = load i32, i32* @x.5
  %2271 = load i32, i32* @y.6
  %2272 = sub i32 %2270, 1
  %2273 = mul i32 %2270, %2272
  %2274 = urem i32 %2273, 2
  %2275 = icmp eq i32 %2274, 0
  %2276 = icmp slt i32 %2271, 10
  %2277 = or i1 %2275, %2276
  br i1 %2277, label %originalBB431, label %originalBB431alteredBB

originalBB431:                                    ; preds = %originalBB431alteredBB, %2269
  %2278 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %2279 = load i64, i64* %2278, align 8
  %2280 = load i32, i32* %29, align 4
  %2281 = sext i32 %2280 to i64
  %2282 = sub nsw i64 %2279, %2281
  %2283 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %2282)
  call void @anti_adjust_stack(%struct.rtx_def* %2283)
  %2284 = load i32, i32* @x.5
  %2285 = load i32, i32* @y.6
  %2286 = sub i32 %2284, 1
  %2287 = mul i32 %2284, %2286
  %2288 = urem i32 %2287, 2
  %2289 = icmp eq i32 %2288, 0
  %2290 = icmp slt i32 %2285, 10
  %2291 = or i1 %2289, %2290
  br i1 %2291, label %originalBBpart2446, label %originalBB431alteredBB

originalBBpart2446:                               ; preds = %originalBB431
  br label %2292

; <label>:2292:                                   ; preds = %originalBBpart2446, %2266
  %2293 = load i32, i32* @x.5
  %2294 = load i32, i32* @y.6
  %2295 = sub i32 %2293, 1
  %2296 = mul i32 %2293, %2295
  %2297 = urem i32 %2296, 2
  %2298 = icmp eq i32 %2297, 0
  %2299 = icmp slt i32 %2294, 10
  %2300 = or i1 %2298, %2299
  br i1 %2300, label %originalBB448, label %originalBB448alteredBB

originalBB448:                                    ; preds = %originalBB448alteredBB, %2292
  %2301 = load i32, i32* @x.5
  %2302 = load i32, i32* @y.6
  %2303 = sub i32 %2301, 1
  %2304 = mul i32 %2301, %2303
  %2305 = urem i32 %2304, 2
  %2306 = icmp eq i32 %2305, 0
  %2307 = icmp slt i32 %2302, 10
  %2308 = or i1 %2306, %2307
  br i1 %2308, label %originalBBpart2450, label %originalBB448alteredBB

originalBBpart2450:                               ; preds = %originalBB448
  br label %2309

; <label>:2309:                                   ; preds = %originalBBpart2450, %2257
  %2310 = load i32, i32* @x.5
  %2311 = load i32, i32* @y.6
  %2312 = sub i32 %2310, 1
  %2313 = mul i32 %2310, %2312
  %2314 = urem i32 %2313, 2
  %2315 = icmp eq i32 %2314, 0
  %2316 = icmp slt i32 %2311, 10
  %2317 = or i1 %2315, %2316
  br i1 %2317, label %originalBB452, label %originalBB452alteredBB

originalBB452:                                    ; preds = %originalBB452alteredBB, %2309
  %2318 = load i32, i32* @x.5
  %2319 = load i32, i32* @y.6
  %2320 = sub i32 %2318, 1
  %2321 = mul i32 %2318, %2320
  %2322 = urem i32 %2321, 2
  %2323 = icmp eq i32 %2322, 0
  %2324 = icmp slt i32 %2319, 10
  %2325 = or i1 %2323, %2324
  br i1 %2325, label %originalBBpart2454, label %originalBB452alteredBB

originalBBpart2454:                               ; preds = %originalBB452
  br label %2326

; <label>:2326:                                   ; preds = %originalBBpart2454, %2201, %2198, %originalBBpart2419, %originalBBpart2410
  %2327 = load i32, i32* @x.5
  %2328 = load i32, i32* @y.6
  %2329 = sub i32 %2327, 1
  %2330 = mul i32 %2327, %2329
  %2331 = urem i32 %2330, 2
  %2332 = icmp eq i32 %2331, 0
  %2333 = icmp slt i32 %2328, 10
  %2334 = or i1 %2332, %2333
  br i1 %2334, label %originalBB456, label %originalBB456alteredBB

originalBB456:                                    ; preds = %originalBB456alteredBB, %2326
  %2335 = load %struct.function*, %struct.function** @cfun, align 8
  %2336 = getelementptr inbounds %struct.function, %struct.function* %2335, i32 0, i32 2
  %2337 = load %struct.expr_status*, %struct.expr_status** %2336, align 8
  %2338 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2337, i32 0, i32 1
  %2339 = load i32, i32* %2338, align 4
  %2340 = add nsw i32 %2339, 1
  store i32 %2340, i32* %2338, align 4
  %2341 = load %union.tree_node*, %union.tree_node** %14, align 8
  %2342 = load %union.tree_node*, %union.tree_node** %5, align 8
  %2343 = call %struct.rtx_def* @rtx_for_function_call(%union.tree_node* %2341, %union.tree_node* %2342)
  store %struct.rtx_def* %2343, %struct.rtx_def** %9, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %19, align 8
  %2344 = load %union.tree_node*, %union.tree_node** %5, align 8
  %2345 = bitcast %union.tree_node* %2344 to %struct.tree_common*
  %2346 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2345, i32 0, i32 1
  %2347 = load %union.tree_node*, %union.tree_node** %2346, align 8
  %2348 = bitcast %union.tree_node* %2347 to %struct.tree_type*
  %2349 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %2348, i32 0, i32 6
  %2350 = load i32, i32* %2349, align 4
  %2351 = lshr i32 %2350, 9
  %2352 = and i32 %2351, 127
  %2353 = icmp ne i32 %2352, 0
  %2354 = load i32, i32* @x.5
  %2355 = load i32, i32* @y.6
  %2356 = sub i32 %2354, 1
  %2357 = mul i32 %2354, %2356
  %2358 = urem i32 %2357, 2
  %2359 = icmp eq i32 %2358, 0
  %2360 = icmp slt i32 %2355, 10
  %2361 = or i1 %2359, %2360
  br i1 %2361, label %originalBBpart2475, label %originalBB456alteredBB

originalBBpart2475:                               ; preds = %originalBB456
  br i1 %2353, label %2362, label %2438

; <label>:2362:                                   ; preds = %originalBBpart2475
  %2363 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %2364 = icmp ne %struct.rtx_def* %2363, null
  br i1 %2364, label %2438, label %2365

; <label>:2365:                                   ; preds = %2362
  %2366 = load i32, i32* @x.5
  %2367 = load i32, i32* @y.6
  %2368 = sub i32 %2366, 1
  %2369 = mul i32 %2366, %2368
  %2370 = urem i32 %2369, 2
  %2371 = icmp eq i32 %2370, 0
  %2372 = icmp slt i32 %2367, 10
  %2373 = or i1 %2371, %2372
  br i1 %2373, label %originalBB477, label %originalBB477alteredBB

originalBB477:                                    ; preds = %originalBB477alteredBB, %2365
  %2374 = load i32, i32* %23, align 4
  %2375 = icmp ne i32 %2374, 0
  %2376 = load i32, i32* @x.5
  %2377 = load i32, i32* @y.6
  %2378 = sub i32 %2376, 1
  %2379 = mul i32 %2376, %2378
  %2380 = urem i32 %2379, 2
  %2381 = icmp eq i32 %2380, 0
  %2382 = icmp slt i32 %2377, 10
  %2383 = or i1 %2381, %2382
  br i1 %2383, label %originalBBpart2479, label %originalBB477alteredBB

originalBBpart2479:                               ; preds = %originalBB477
  br i1 %2375, label %2384, label %2411

; <label>:2384:                                   ; preds = %originalBBpart2479
  %2385 = load i32, i32* @x.5
  %2386 = load i32, i32* @y.6
  %2387 = sub i32 %2385, 1
  %2388 = mul i32 %2385, %2387
  %2389 = urem i32 %2388, 2
  %2390 = icmp eq i32 %2389, 0
  %2391 = icmp slt i32 %2386, 10
  %2392 = or i1 %2390, %2391
  br i1 %2392, label %originalBB481, label %originalBB481alteredBB

originalBB481:                                    ; preds = %originalBB481alteredBB, %2384
  %2393 = load %union.tree_node*, %union.tree_node** %5, align 8
  %2394 = bitcast %union.tree_node* %2393 to %struct.tree_common*
  %2395 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2394, i32 0, i32 1
  %2396 = load %union.tree_node*, %union.tree_node** %2395, align 8
  %2397 = call %union.tree_node* @build_pointer_type(%union.tree_node* %2396)
  %2398 = load %union.tree_node*, %union.tree_node** %14, align 8
  %2399 = load i32, i32* %18, align 4
  %2400 = icmp eq i32 %2399, 0
  %2401 = zext i1 %2400 to i32
  %2402 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %2397, %union.tree_node* %2398, i32 %2401)
  store %struct.rtx_def* %2402, %struct.rtx_def** %19, align 8
  %2403 = load i32, i32* @x.5
  %2404 = load i32, i32* @y.6
  %2405 = sub i32 %2403, 1
  %2406 = mul i32 %2403, %2405
  %2407 = urem i32 %2406, 2
  %2408 = icmp eq i32 %2407, 0
  %2409 = icmp slt i32 %2404, 10
  %2410 = or i1 %2408, %2409
  br i1 %2410, label %originalBBpart2483, label %originalBB481alteredBB

originalBBpart2483:                               ; preds = %originalBB481
  br label %2437

; <label>:2411:                                   ; preds = %originalBBpart2479
  %2412 = load i32, i32* @x.5
  %2413 = load i32, i32* @y.6
  %2414 = sub i32 %2412, 1
  %2415 = mul i32 %2412, %2414
  %2416 = urem i32 %2415, 2
  %2417 = icmp eq i32 %2416, 0
  %2418 = icmp slt i32 %2413, 10
  %2419 = or i1 %2417, %2418
  br i1 %2419, label %originalBB485, label %originalBB485alteredBB

originalBB485:                                    ; preds = %originalBB485alteredBB, %2411
  %2420 = load %union.tree_node*, %union.tree_node** %5, align 8
  %2421 = bitcast %union.tree_node* %2420 to %struct.tree_common*
  %2422 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2421, i32 0, i32 1
  %2423 = load %union.tree_node*, %union.tree_node** %2422, align 8
  %2424 = load %union.tree_node*, %union.tree_node** %14, align 8
  %2425 = load i32, i32* %18, align 4
  %2426 = icmp eq i32 %2425, 0
  %2427 = zext i1 %2426 to i32
  %2428 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %2423, %union.tree_node* %2424, i32 %2427)
  store %struct.rtx_def* %2428, %struct.rtx_def** %19, align 8
  %2429 = load i32, i32* @x.5
  %2430 = load i32, i32* @y.6
  %2431 = sub i32 %2429, 1
  %2432 = mul i32 %2429, %2431
  %2433 = urem i32 %2432, 2
  %2434 = icmp eq i32 %2433, 0
  %2435 = icmp slt i32 %2430, 10
  %2436 = or i1 %2434, %2435
  br i1 %2436, label %originalBBpart2487, label %originalBB485alteredBB

originalBBpart2487:                               ; preds = %originalBB485
  br label %2437

; <label>:2437:                                   ; preds = %originalBBpart2487, %originalBBpart2483
  br label %2438

; <label>:2438:                                   ; preds = %2437, %2362, %originalBBpart2475
  %2439 = load i32, i32* %24, align 4
  %2440 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  call void @precompute_register_parameters(i32 %2439, %struct.arg_data* %2440, i32* %31)
  %2441 = load i32, i32* @target_flags, align 4
  %2442 = and i32 %2441, 4096
  %2443 = icmp ne i32 %2442, 0
  br i1 %2443, label %2444, label %2451

; <label>:2444:                                   ; preds = %2438
  %2445 = load i32, i32* %18, align 4
  %2446 = icmp ne i32 %2445, 0
  br i1 %2446, label %2447, label %2451

; <label>:2447:                                   ; preds = %2444
  %2448 = load i32, i32* %33, align 4
  %2449 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2450 = call %struct.rtx_def* @save_fixed_argument_area(i32 %2448, %struct.rtx_def* %2449, i32* %37, i32* %38)
  store %struct.rtx_def* %2450, %struct.rtx_def** %39, align 8
  br label %2451

; <label>:2451:                                   ; preds = %2447, %2444, %2438
  %2452 = load i32, i32* @x.5
  %2453 = load i32, i32* @y.6
  %2454 = sub i32 %2452, 1
  %2455 = mul i32 %2452, %2454
  %2456 = urem i32 %2455, 2
  %2457 = icmp eq i32 %2456, 0
  %2458 = icmp slt i32 %2453, 10
  %2459 = or i1 %2457, %2458
  br i1 %2459, label %originalBB489, label %originalBB489alteredBB

originalBB489:                                    ; preds = %originalBB489alteredBB, %2451
  store i32 0, i32* %49, align 4
  %2460 = load i32, i32* @x.5
  %2461 = load i32, i32* @y.6
  %2462 = sub i32 %2460, 1
  %2463 = mul i32 %2460, %2462
  %2464 = urem i32 %2463, 2
  %2465 = icmp eq i32 %2464, 0
  %2466 = icmp slt i32 %2461, 10
  %2467 = or i1 %2465, %2466
  br i1 %2467, label %originalBBpart2491, label %originalBB489alteredBB

originalBBpart2491:                               ; preds = %originalBB489
  br label %2468

; <label>:2468:                                   ; preds = %2549, %originalBBpart2491
  %2469 = load i32, i32* @x.5
  %2470 = load i32, i32* @y.6
  %2471 = sub i32 %2469, 1
  %2472 = mul i32 %2469, %2471
  %2473 = urem i32 %2472, 2
  %2474 = icmp eq i32 %2473, 0
  %2475 = icmp slt i32 %2470, 10
  %2476 = or i1 %2474, %2475
  br i1 %2476, label %originalBB493, label %originalBB493alteredBB

originalBB493:                                    ; preds = %originalBB493alteredBB, %2468
  %2477 = load i32, i32* %49, align 4
  %2478 = load i32, i32* %24, align 4
  %2479 = icmp slt i32 %2477, %2478
  %2480 = load i32, i32* @x.5
  %2481 = load i32, i32* @y.6
  %2482 = sub i32 %2480, 1
  %2483 = mul i32 %2480, %2482
  %2484 = urem i32 %2483, 2
  %2485 = icmp eq i32 %2484, 0
  %2486 = icmp slt i32 %2481, 10
  %2487 = or i1 %2485, %2486
  br i1 %2487, label %originalBBpart2495, label %originalBB493alteredBB

originalBBpart2495:                               ; preds = %originalBB493
  br i1 %2479, label %2488, label %2552

; <label>:2488:                                   ; preds = %originalBBpart2495
  %2489 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2490 = load i32, i32* %49, align 4
  %2491 = sext i32 %2490 to i64
  %2492 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2489, i64 %2491
  %2493 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2492, i32 0, i32 4
  %2494 = load %struct.rtx_def*, %struct.rtx_def** %2493, align 8
  %2495 = icmp eq %struct.rtx_def* %2494, null
  br i1 %2495, label %2504, label %2496

; <label>:2496:                                   ; preds = %2488
  %2497 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2498 = load i32, i32* %49, align 4
  %2499 = sext i32 %2498 to i64
  %2500 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2497, i64 %2499
  %2501 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2500, i32 0, i32 8
  %2502 = load i32, i32* %2501, align 8
  %2503 = icmp ne i32 %2502, 0
  br i1 %2503, label %2504, label %2548

; <label>:2504:                                   ; preds = %2496, %2488
  %2505 = load i32, i32* @x.5
  %2506 = load i32, i32* @y.6
  %2507 = sub i32 %2505, 1
  %2508 = mul i32 %2505, %2507
  %2509 = urem i32 %2508, 2
  %2510 = icmp eq i32 %2509, 0
  %2511 = icmp slt i32 %2506, 10
  %2512 = or i1 %2510, %2511
  br i1 %2512, label %originalBB497, label %originalBB497alteredBB

originalBB497:                                    ; preds = %originalBB497alteredBB, %2504
  %2513 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %2513, %struct.rtx_def** %68, align 8
  %2514 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2515 = load i32, i32* %49, align 4
  %2516 = sext i32 %2515 to i64
  %2517 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2514, i64 %2516
  %2518 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2519 = load i32, i32* %35, align 4
  %2520 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %2521 = load %union.tree_node*, %union.tree_node** %2520, align 8
  %2522 = icmp ne %union.tree_node* %2521, null
  %2523 = zext i1 %2522 to i32
  %2524 = load i32, i32* %33, align 4
  %2525 = call i32 @store_one_arg(%struct.arg_data* %2517, %struct.rtx_def* %2518, i32 %2519, i32 %2523, i32 %2524)
  %2526 = icmp ne i32 %2525, 0
  %2527 = load i32, i32* @x.5
  %2528 = load i32, i32* @y.6
  %2529 = sub i32 %2527, 1
  %2530 = mul i32 %2527, %2529
  %2531 = urem i32 %2530, 2
  %2532 = icmp eq i32 %2531, 0
  %2533 = icmp slt i32 %2528, 10
  %2534 = or i1 %2532, %2533
  br i1 %2534, label %originalBBpart2499, label %originalBB497alteredBB

originalBBpart2499:                               ; preds = %originalBB497
  br i1 %2526, label %2546, label %2535

; <label>:2535:                                   ; preds = %originalBBpart2499
  %2536 = load i32, i32* %18, align 4
  %2537 = icmp eq i32 %2536, 0
  br i1 %2537, label %2538, label %2547

; <label>:2538:                                   ; preds = %2535
  %2539 = load %struct.rtx_def*, %struct.rtx_def** %68, align 8
  %2540 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2541 = load i32, i32* %49, align 4
  %2542 = sext i32 %2541 to i64
  %2543 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2540, i64 %2542
  %2544 = call i32 @check_sibcall_argument_overlap(%struct.rtx_def* %2539, %struct.arg_data* %2543)
  %2545 = icmp ne i32 %2544, 0
  br i1 %2545, label %2546, label %2547

; <label>:2546:                                   ; preds = %2538, %originalBBpart2499
  store i32 1, i32* %60, align 4
  br label %2547

; <label>:2547:                                   ; preds = %2546, %2538, %2535
  br label %2548

; <label>:2548:                                   ; preds = %2547, %2496
  br label %2549

; <label>:2549:                                   ; preds = %2548
  %2550 = load i32, i32* %49, align 4
  %2551 = add nsw i32 %2550, 1
  store i32 %2551, i32* %49, align 4
  br label %2468

; <label>:2552:                                   ; preds = %originalBBpart2495
  %2553 = load i32, i32* @x.5
  %2554 = load i32, i32* @y.6
  %2555 = sub i32 %2553, 1
  %2556 = mul i32 %2553, %2555
  %2557 = urem i32 %2556, 2
  %2558 = icmp eq i32 %2557, 0
  %2559 = icmp slt i32 %2554, 10
  %2560 = or i1 %2558, %2559
  br i1 %2560, label %originalBB501, label %originalBB501alteredBB

originalBB501:                                    ; preds = %originalBB501alteredBB, %2552
  %2561 = load i32, i32* %31, align 4
  %2562 = icmp ne i32 %2561, 0
  %2563 = load i32, i32* @x.5
  %2564 = load i32, i32* @y.6
  %2565 = sub i32 %2563, 1
  %2566 = mul i32 %2563, %2565
  %2567 = urem i32 %2566, 2
  %2568 = icmp eq i32 %2567, 0
  %2569 = icmp slt i32 %2564, 10
  %2570 = or i1 %2568, %2569
  br i1 %2570, label %originalBBpart2503, label %originalBB501alteredBB

originalBBpart2503:                               ; preds = %originalBB501
  br i1 %2562, label %2571, label %2689

; <label>:2571:                                   ; preds = %originalBBpart2503
  store i32 0, i32* %49, align 4
  br label %2572

; <label>:2572:                                   ; preds = %2685, %2571
  %2573 = load i32, i32* %49, align 4
  %2574 = load i32, i32* %24, align 4
  %2575 = icmp slt i32 %2573, %2574
  br i1 %2575, label %2576, label %2688

; <label>:2576:                                   ; preds = %2572
  %2577 = load i32, i32* @x.5
  %2578 = load i32, i32* @y.6
  %2579 = sub i32 %2577, 1
  %2580 = mul i32 %2577, %2579
  %2581 = urem i32 %2580, 2
  %2582 = icmp eq i32 %2581, 0
  %2583 = icmp slt i32 %2578, 10
  %2584 = or i1 %2582, %2583
  br i1 %2584, label %originalBB505, label %originalBB505alteredBB

originalBB505:                                    ; preds = %originalBB505alteredBB, %2576
  %2585 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2586 = load i32, i32* %49, align 4
  %2587 = sext i32 %2586 to i64
  %2588 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2585, i64 %2587
  %2589 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2588, i32 0, i32 7
  %2590 = load i32, i32* %2589, align 4
  %2591 = icmp ne i32 %2590, 0
  %2592 = load i32, i32* @x.5
  %2593 = load i32, i32* @y.6
  %2594 = sub i32 %2592, 1
  %2595 = mul i32 %2592, %2594
  %2596 = urem i32 %2595, 2
  %2597 = icmp eq i32 %2596, 0
  %2598 = icmp slt i32 %2593, 10
  %2599 = or i1 %2597, %2598
  br i1 %2599, label %originalBBpart2507, label %originalBB505alteredBB

originalBBpart2507:                               ; preds = %originalBB505
  br i1 %2591, label %2600, label %2668

; <label>:2600:                                   ; preds = %originalBBpart2507
  %2601 = load i32, i32* @x.5
  %2602 = load i32, i32* @y.6
  %2603 = sub i32 %2601, 1
  %2604 = mul i32 %2601, %2603
  %2605 = urem i32 %2604, 2
  %2606 = icmp eq i32 %2605, 0
  %2607 = icmp slt i32 %2602, 10
  %2608 = or i1 %2606, %2607
  br i1 %2608, label %originalBB509, label %originalBB509alteredBB

originalBB509:                                    ; preds = %originalBB509alteredBB, %2600
  %2609 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2610 = load i32, i32* %49, align 4
  %2611 = sext i32 %2610 to i64
  %2612 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2609, i64 %2611
  %2613 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2612, i32 0, i32 8
  %2614 = load i32, i32* %2613, align 8
  %2615 = icmp ne i32 %2614, 0
  %2616 = load i32, i32* @x.5
  %2617 = load i32, i32* @y.6
  %2618 = sub i32 %2616, 1
  %2619 = mul i32 %2616, %2618
  %2620 = urem i32 %2619, 2
  %2621 = icmp eq i32 %2620, 0
  %2622 = icmp slt i32 %2617, 10
  %2623 = or i1 %2621, %2622
  br i1 %2623, label %originalBBpart2511, label %originalBB509alteredBB

originalBBpart2511:                               ; preds = %originalBB509
  br i1 %2615, label %2668, label %2624

; <label>:2624:                                   ; preds = %originalBBpart2511
  %2625 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %2625, %struct.rtx_def** %69, align 8
  %2626 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2627 = load i32, i32* %49, align 4
  %2628 = sext i32 %2627 to i64
  %2629 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2626, i64 %2628
  %2630 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2631 = load i32, i32* %35, align 4
  %2632 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %2633 = load %union.tree_node*, %union.tree_node** %2632, align 8
  %2634 = icmp ne %union.tree_node* %2633, null
  %2635 = zext i1 %2634 to i32
  %2636 = load i32, i32* %33, align 4
  %2637 = call i32 @store_one_arg(%struct.arg_data* %2629, %struct.rtx_def* %2630, i32 %2631, i32 %2635, i32 %2636)
  %2638 = icmp ne i32 %2637, 0
  br i1 %2638, label %2650, label %2639

; <label>:2639:                                   ; preds = %2624
  %2640 = load i32, i32* %18, align 4
  %2641 = icmp eq i32 %2640, 0
  br i1 %2641, label %2642, label %2651

; <label>:2642:                                   ; preds = %2639
  %2643 = load %struct.rtx_def*, %struct.rtx_def** %69, align 8
  %2644 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2645 = load i32, i32* %49, align 4
  %2646 = sext i32 %2645 to i64
  %2647 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2644, i64 %2646
  %2648 = call i32 @check_sibcall_argument_overlap(%struct.rtx_def* %2643, %struct.arg_data* %2647)
  %2649 = icmp ne i32 %2648, 0
  br i1 %2649, label %2650, label %2651

; <label>:2650:                                   ; preds = %2642, %2624
  store i32 1, i32* %60, align 4
  br label %2651

; <label>:2651:                                   ; preds = %2650, %2642, %2639
  %2652 = load i32, i32* @x.5
  %2653 = load i32, i32* @y.6
  %2654 = sub i32 %2652, 1
  %2655 = mul i32 %2652, %2654
  %2656 = urem i32 %2655, 2
  %2657 = icmp eq i32 %2656, 0
  %2658 = icmp slt i32 %2653, 10
  %2659 = or i1 %2657, %2658
  br i1 %2659, label %originalBB513, label %originalBB513alteredBB

originalBB513:                                    ; preds = %originalBB513alteredBB, %2651
  %2660 = load i32, i32* @x.5
  %2661 = load i32, i32* @y.6
  %2662 = sub i32 %2660, 1
  %2663 = mul i32 %2660, %2662
  %2664 = urem i32 %2663, 2
  %2665 = icmp eq i32 %2664, 0
  %2666 = icmp slt i32 %2661, 10
  %2667 = or i1 %2665, %2666
  br i1 %2667, label %originalBBpart2515, label %originalBB513alteredBB

originalBBpart2515:                               ; preds = %originalBB513
  br label %2668

; <label>:2668:                                   ; preds = %originalBBpart2515, %originalBBpart2511, %originalBBpart2507
  %2669 = load i32, i32* @x.5
  %2670 = load i32, i32* @y.6
  %2671 = sub i32 %2669, 1
  %2672 = mul i32 %2669, %2671
  %2673 = urem i32 %2672, 2
  %2674 = icmp eq i32 %2673, 0
  %2675 = icmp slt i32 %2670, 10
  %2676 = or i1 %2674, %2675
  br i1 %2676, label %originalBB517, label %originalBB517alteredBB

originalBB517:                                    ; preds = %originalBB517alteredBB, %2668
  %2677 = load i32, i32* @x.5
  %2678 = load i32, i32* @y.6
  %2679 = sub i32 %2677, 1
  %2680 = mul i32 %2677, %2679
  %2681 = urem i32 %2680, 2
  %2682 = icmp eq i32 %2681, 0
  %2683 = icmp slt i32 %2678, 10
  %2684 = or i1 %2682, %2683
  br i1 %2684, label %originalBBpart2519, label %originalBB517alteredBB

originalBBpart2519:                               ; preds = %originalBB517
  br label %2685

; <label>:2685:                                   ; preds = %originalBBpart2519
  %2686 = load i32, i32* %49, align 4
  %2687 = add nsw i32 %2686, 1
  store i32 %2687, i32* %49, align 4
  br label %2572

; <label>:2688:                                   ; preds = %2572
  br label %2689

; <label>:2689:                                   ; preds = %2688, %originalBBpart2503
  %2690 = load i32, i32* @x.5
  %2691 = load i32, i32* @y.6
  %2692 = sub i32 %2690, 1
  %2693 = mul i32 %2690, %2692
  %2694 = urem i32 %2693, 2
  %2695 = icmp eq i32 %2694, 0
  %2696 = icmp slt i32 %2691, 10
  %2697 = or i1 %2695, %2696
  br i1 %2697, label %originalBB521, label %originalBB521alteredBB

originalBB521:                                    ; preds = %originalBB521alteredBB, %2689
  %2698 = load i32, i32* @target_flags, align 4
  %2699 = and i32 %2698, 2048
  %2700 = icmp ne i32 %2699, 0
  %2701 = load i32, i32* @x.5
  %2702 = load i32, i32* @y.6
  %2703 = sub i32 %2701, 1
  %2704 = mul i32 %2701, %2703
  %2705 = urem i32 %2704, 2
  %2706 = icmp eq i32 %2705, 0
  %2707 = icmp slt i32 %2702, 10
  %2708 = or i1 %2706, %2707
  br i1 %2708, label %originalBBpart2526, label %originalBB521alteredBB

originalBBpart2526:                               ; preds = %originalBB521
  br i1 %2700, label %2713, label %2709

; <label>:2709:                                   ; preds = %originalBBpart2526
  %2710 = load i32, i32* @target_flags, align 4
  %2711 = and i32 %2710, 4096
  %2712 = icmp ne i32 %2711, 0
  br i1 %2712, label %2713, label %2723

; <label>:2713:                                   ; preds = %2709, %originalBBpart2526
  %2714 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2715 = icmp eq %struct.rtx_def* %2714, null
  br i1 %2715, label %2716, label %2723

; <label>:2716:                                   ; preds = %2713
  %2717 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %2718 = load i64, i64* %2717, align 8
  %2719 = load i32, i32* %29, align 4
  %2720 = sext i32 %2719 to i64
  %2721 = sub nsw i64 %2718, %2720
  %2722 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %2721)
  call void @anti_adjust_stack(%struct.rtx_def* %2722)
  br label %2723

; <label>:2723:                                   ; preds = %2716, %2713, %2709
  %2724 = load i32, i32* %18, align 4
  %2725 = icmp ne i32 %2724, 0
  br i1 %2725, label %2726, label %2766

; <label>:2726:                                   ; preds = %2723
  %2727 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %2728 = icmp ne %struct.rtx_def* %2727, null
  br i1 %2728, label %2729, label %2766

; <label>:2729:                                   ; preds = %2726
  %2730 = load i32, i32* %21, align 4
  %2731 = icmp ne i32 %2730, 0
  br i1 %2731, label %2766, label %2732

; <label>:2732:                                   ; preds = %2729
  %2733 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  %2734 = load i32, i32* @target_flags, align 4
  %2735 = and i32 %2734, 33554432
  %2736 = icmp ne i32 %2735, 0
  %2737 = select i1 %2736, i32 5, i32 4
  %2738 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %2739 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %2738, %struct.rtx_def* null)
  %2740 = call %struct.rtx_def* @force_reg(i32 %2737, %struct.rtx_def* %2739)
  %2741 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2733, %struct.rtx_def* %2740)
  %2742 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  %2743 = bitcast %struct.rtx_def* %2742 to i32*
  %2744 = load i32, i32* %2743, align 8
  %2745 = and i32 %2744, 65535
  %2746 = icmp eq i32 %2745, 61
  br i1 %2746, label %2747, label %2765

; <label>:2747:                                   ; preds = %2732
  %2748 = load i32, i32* @x.5
  %2749 = load i32, i32* @y.6
  %2750 = sub i32 %2748, 1
  %2751 = mul i32 %2748, %2750
  %2752 = urem i32 %2751, 2
  %2753 = icmp eq i32 %2752, 0
  %2754 = icmp slt i32 %2749, 10
  %2755 = or i1 %2753, %2754
  br i1 %2755, label %originalBB528, label %originalBB528alteredBB

originalBB528:                                    ; preds = %originalBB528alteredBB, %2747
  %2756 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  call void @use_reg(%struct.rtx_def** %47, %struct.rtx_def* %2756)
  %2757 = load i32, i32* @x.5
  %2758 = load i32, i32* @y.6
  %2759 = sub i32 %2757, 1
  %2760 = mul i32 %2757, %2759
  %2761 = urem i32 %2760, 2
  %2762 = icmp eq i32 %2761, 0
  %2763 = icmp slt i32 %2758, 10
  %2764 = or i1 %2762, %2763
  br i1 %2764, label %originalBBpart2530, label %originalBB528alteredBB

originalBBpart2530:                               ; preds = %originalBB528
  br label %2765

; <label>:2765:                                   ; preds = %originalBBpart2530, %2732
  br label %2766

; <label>:2766:                                   ; preds = %2765, %2729, %2726, %2723
  %2767 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %2768 = load %union.tree_node*, %union.tree_node** %14, align 8
  %2769 = load i32, i32* %31, align 4
  %2770 = load i32, i32* %18, align 4
  %2771 = icmp eq i32 %2770, 0
  %2772 = zext i1 %2771 to i32
  %2773 = call %struct.rtx_def* @prepare_call_address(%struct.rtx_def* %2767, %union.tree_node* %2768, %struct.rtx_def** %47, i32 %2769, i32 %2772)
  store %struct.rtx_def* %2773, %struct.rtx_def** %9, align 8
  %2774 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2775 = load i32, i32* %24, align 4
  %2776 = load i32, i32* %35, align 4
  call void @load_register_parameters(%struct.arg_data* %2774, i32 %2775, %struct.rtx_def** %47, i32 %2776)
  call void @emit_queue()
  %2777 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %2777, %struct.rtx_def** %64, align 8
  %2778 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8
  %2779 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %30, i32 0, %union.tree_node* %2778, i32 1)
  store %struct.rtx_def* %2779, %struct.rtx_def** %65, align 8
  %2780 = load i32, i32* %18, align 4
  %2781 = icmp ne i32 %2780, 0
  br i1 %2781, label %2782, label %2793

; <label>:2782:                                   ; preds = %2766
  %2783 = load %struct.function*, %struct.function** @cfun, align 8
  %2784 = getelementptr inbounds %struct.function, %struct.function* %2783, i32 0, i32 2
  %2785 = load %struct.expr_status*, %struct.expr_status** %2784, align 8
  %2786 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2785, i32 0, i32 2
  %2787 = load i32, i32* %2786, align 8
  %2788 = sext i32 %2787 to i64
  %2789 = load i64, i64* %51, align 8
  %2790 = srem i64 %2788, %2789
  %2791 = icmp ne i64 %2790, 0
  br i1 %2791, label %2792, label %2793

; <label>:2792:                                   ; preds = %2782
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 3049, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_call, i32 0, i32 0)) #8
  unreachable

; <label>:2793:                                   ; preds = %2782, %2766
  %2794 = load i32, i32* @x.5
  %2795 = load i32, i32* @y.6
  %2796 = sub i32 %2794, 1
  %2797 = mul i32 %2794, %2796
  %2798 = urem i32 %2797, 2
  %2799 = icmp eq i32 %2798, 0
  %2800 = icmp slt i32 %2795, 10
  %2801 = or i1 %2799, %2800
  br i1 %2801, label %originalBB532, label %originalBB532alteredBB

originalBB532:                                    ; preds = %originalBB532alteredBB, %2793
  %2802 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %2803 = load %union.tree_node*, %union.tree_node** %14, align 8
  %2804 = load %union.tree_node*, %union.tree_node** %13, align 8
  %2805 = load i32, i32* %29, align 4
  %2806 = sext i32 %2805 to i64
  %2807 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %2808 = load i64, i64* %2807, align 8
  %2809 = load i64, i64* %22, align 8
  %2810 = load %struct.rtx_def*, %struct.rtx_def** %65, align 8
  %2811 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %2812 = load i32, i32* %45, align 4
  %2813 = load %struct.rtx_def*, %struct.rtx_def** %47, align 8
  %2814 = load i32, i32* %35, align 4
  call void @emit_call_1(%struct.rtx_def* %2802, %union.tree_node* %2803, %union.tree_node* %2804, i64 %2806, i64 %2808, i64 %2809, %struct.rtx_def* %2810, %struct.rtx_def* %2811, i32 %2812, %struct.rtx_def* %2813, i32 %2814, %struct.ix86_args* %30)
  %2815 = load i32, i32* %18, align 4
  %2816 = icmp ne i32 %2815, 0
  %2817 = load i32, i32* @x.5
  %2818 = load i32, i32* @y.6
  %2819 = sub i32 %2817, 1
  %2820 = mul i32 %2817, %2819
  %2821 = urem i32 %2820, 2
  %2822 = icmp eq i32 %2821, 0
  %2823 = icmp slt i32 %2818, 10
  %2824 = or i1 %2822, %2823
  br i1 %2824, label %originalBBpart2534, label %originalBB532alteredBB

originalBBpart2534:                               ; preds = %originalBB532
  br i1 %2816, label %2825, label %2856

; <label>:2825:                                   ; preds = %originalBBpart2534
  %2826 = load i32, i32* @x.5
  %2827 = load i32, i32* @y.6
  %2828 = sub i32 %2826, 1
  %2829 = mul i32 %2826, %2828
  %2830 = urem i32 %2829, 2
  %2831 = icmp eq i32 %2830, 0
  %2832 = icmp slt i32 %2827, 10
  %2833 = or i1 %2831, %2832
  br i1 %2833, label %originalBB536, label %originalBB536alteredBB

originalBB536:                                    ; preds = %originalBB536alteredBB, %2825
  %2834 = load i32, i32* %46, align 4
  %2835 = load %struct.function*, %struct.function** @cfun, align 8
  %2836 = getelementptr inbounds %struct.function, %struct.function* %2835, i32 0, i32 2
  %2837 = load %struct.expr_status*, %struct.expr_status** %2836, align 8
  %2838 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2837, i32 0, i32 2
  %2839 = load i32, i32* %2838, align 8
  %2840 = load %struct.function*, %struct.function** @cfun, align 8
  %2841 = getelementptr inbounds %struct.function, %struct.function* %2840, i32 0, i32 2
  %2842 = load %struct.expr_status*, %struct.expr_status** %2841, align 8
  %2843 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2842, i32 0, i32 0
  %2844 = load i32, i32* %2843, align 8
  %2845 = sub nsw i32 %2839, %2844
  %2846 = icmp ne i32 %2834, %2845
  %2847 = load i32, i32* @x.5
  %2848 = load i32, i32* @y.6
  %2849 = sub i32 %2847, 1
  %2850 = mul i32 %2847, %2849
  %2851 = urem i32 %2850, 2
  %2852 = icmp eq i32 %2851, 0
  %2853 = icmp slt i32 %2848, 10
  %2854 = or i1 %2852, %2853
  br i1 %2854, label %originalBBpart2539, label %originalBB536alteredBB

originalBBpart2539:                               ; preds = %originalBB536
  br i1 %2846, label %2855, label %2856

; <label>:2855:                                   ; preds = %originalBBpart2539
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 3060, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_call, i32 0, i32 0)) #8
  unreachable

; <label>:2856:                                   ; preds = %originalBBpart2539, %originalBBpart2534
  %2857 = load i32, i32* %18, align 4
  %2858 = icmp ne i32 %2857, 0
  br i1 %2858, label %2859, label %3006

; <label>:2859:                                   ; preds = %2856
  %2860 = load i32, i32* @x.5
  %2861 = load i32, i32* @y.6
  %2862 = sub i32 %2860, 1
  %2863 = mul i32 %2860, %2862
  %2864 = urem i32 %2863, 2
  %2865 = icmp eq i32 %2864, 0
  %2866 = icmp slt i32 %2861, 10
  %2867 = or i1 %2865, %2866
  br i1 %2867, label %originalBB541, label %originalBB541alteredBB

originalBB541:                                    ; preds = %originalBB541alteredBB, %2859
  %2868 = load i32, i32* %35, align 4
  %2869 = and i32 %2868, 4096
  %2870 = icmp ne i32 %2869, 0
  %2871 = load i32, i32* @x.5
  %2872 = load i32, i32* @y.6
  %2873 = sub i32 %2871, 1
  %2874 = mul i32 %2871, %2873
  %2875 = urem i32 %2874, 2
  %2876 = icmp eq i32 %2875, 0
  %2877 = icmp slt i32 %2872, 10
  %2878 = or i1 %2876, %2877
  br i1 %2878, label %originalBBpart2555, label %originalBB541alteredBB

originalBBpart2555:                               ; preds = %originalBB541
  br i1 %2870, label %2879, label %3006

; <label>:2879:                                   ; preds = %originalBBpart2555
  %2880 = load i32, i32* @x.5
  %2881 = load i32, i32* @y.6
  %2882 = sub i32 %2880, 1
  %2883 = mul i32 %2880, %2882
  %2884 = urem i32 %2883, 2
  %2885 = icmp eq i32 %2884, 0
  %2886 = icmp slt i32 %2881, 10
  %2887 = or i1 %2885, %2886
  br i1 %2887, label %originalBB557, label %originalBB557alteredBB

originalBB557:                                    ; preds = %originalBB557alteredBB, %2879
  %2888 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %2889 = icmp eq %struct.rtx_def* %2888, null
  %2890 = load i32, i32* @x.5
  %2891 = load i32, i32* @y.6
  %2892 = sub i32 %2890, 1
  %2893 = mul i32 %2890, %2892
  %2894 = urem i32 %2893, 2
  %2895 = icmp eq i32 %2894, 0
  %2896 = icmp slt i32 %2891, 10
  %2897 = or i1 %2895, %2896
  br i1 %2897, label %originalBBpart2559, label %originalBB557alteredBB

originalBBpart2559:                               ; preds = %originalBB557
  br i1 %2889, label %2904, label %2898

; <label>:2898:                                   ; preds = %originalBBpart2559
  %2899 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %2900 = bitcast %struct.rtx_def* %2899 to i32*
  %2901 = load i32, i32* %2900, align 8
  %2902 = and i32 %2901, 65535
  %2903 = icmp eq i32 %2902, 39
  br i1 %2903, label %2904, label %2908

; <label>:2904:                                   ; preds = %2898, %originalBBpart2559
  %2905 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %2905, %struct.rtx_def** %70, align 8
  call void @end_sequence()
  %2906 = load %struct.rtx_def*, %struct.rtx_def** %70, align 8
  %2907 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %2906)
  br label %3005

; <label>:2908:                                   ; preds = %2898
  store %struct.rtx_def* null, %struct.rtx_def** %71, align 8
  %2909 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %2910 = bitcast %struct.rtx_def* %2909 to i32*
  %2911 = load i32, i32* %2910, align 8
  %2912 = lshr i32 %2911, 16
  %2913 = and i32 %2912, 255
  %2914 = call %struct.rtx_def* @gen_reg_rtx(i32 %2913)
  store %struct.rtx_def* %2914, %struct.rtx_def** %72, align 8
  %2915 = load %union.tree_node*, %union.tree_node** %5, align 8
  %2916 = bitcast %union.tree_node* %2915 to %struct.tree_common*
  %2917 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2916, i32 0, i32 1
  %2918 = load %union.tree_node*, %union.tree_node** %2917, align 8
  %2919 = bitcast %union.tree_node* %2918 to %struct.tree_common*
  %2920 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2919, i32 0, i32 2
  %2921 = load i32, i32* %2920, align 8
  %2922 = and i32 %2921, 255
  %2923 = icmp eq i32 %2922, 13
  br i1 %2923, label %2924, label %2952

; <label>:2924:                                   ; preds = %2908
  %2925 = load i32, i32* @x.5
  %2926 = load i32, i32* @y.6
  %2927 = sub i32 %2925, 1
  %2928 = mul i32 %2925, %2927
  %2929 = urem i32 %2928, 2
  %2930 = icmp eq i32 %2929, 0
  %2931 = icmp slt i32 %2926, 10
  %2932 = or i1 %2930, %2931
  br i1 %2932, label %originalBB561, label %originalBB561alteredBB

originalBB561:                                    ; preds = %originalBB561alteredBB, %2924
  %2933 = load %struct.rtx_def*, %struct.rtx_def** %72, align 8
  %2934 = load %union.tree_node*, %union.tree_node** %5, align 8
  %2935 = bitcast %union.tree_node* %2934 to %struct.tree_common*
  %2936 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2935, i32 0, i32 1
  %2937 = load %union.tree_node*, %union.tree_node** %2936, align 8
  %2938 = bitcast %union.tree_node* %2937 to %struct.tree_common*
  %2939 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2938, i32 0, i32 1
  %2940 = load %union.tree_node*, %union.tree_node** %2939, align 8
  %2941 = bitcast %union.tree_node* %2940 to %struct.tree_type*
  %2942 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %2941, i32 0, i32 7
  %2943 = load i32, i32* %2942, align 8
  call void @mark_reg_pointer(%struct.rtx_def* %2933, i32 %2943)
  %2944 = load i32, i32* @x.5
  %2945 = load i32, i32* @y.6
  %2946 = sub i32 %2944, 1
  %2947 = mul i32 %2944, %2946
  %2948 = urem i32 %2947, 2
  %2949 = icmp eq i32 %2948, 0
  %2950 = icmp slt i32 %2945, 10
  %2951 = or i1 %2949, %2950
  br i1 %2951, label %originalBBpart2563, label %originalBB561alteredBB

originalBBpart2563:                               ; preds = %originalBB561
  br label %2952

; <label>:2952:                                   ; preds = %originalBBpart2563, %2908
  store i32 0, i32* %49, align 4
  br label %2953

; <label>:2953:                                   ; preds = %2982, %2952
  %2954 = load i32, i32* @x.5
  %2955 = load i32, i32* @y.6
  %2956 = sub i32 %2954, 1
  %2957 = mul i32 %2954, %2956
  %2958 = urem i32 %2957, 2
  %2959 = icmp eq i32 %2958, 0
  %2960 = icmp slt i32 %2955, 10
  %2961 = or i1 %2959, %2960
  br i1 %2961, label %originalBB565, label %originalBB565alteredBB

originalBB565:                                    ; preds = %originalBB565alteredBB, %2953
  %2962 = load i32, i32* %49, align 4
  %2963 = load i32, i32* %24, align 4
  %2964 = icmp slt i32 %2962, %2963
  %2965 = load i32, i32* @x.5
  %2966 = load i32, i32* @y.6
  %2967 = sub i32 %2965, 1
  %2968 = mul i32 %2965, %2967
  %2969 = urem i32 %2968, 2
  %2970 = icmp eq i32 %2969, 0
  %2971 = icmp slt i32 %2966, 10
  %2972 = or i1 %2970, %2971
  br i1 %2972, label %originalBBpart2567, label %originalBB565alteredBB

originalBBpart2567:                               ; preds = %originalBB565
  br i1 %2964, label %2973, label %2985

; <label>:2973:                                   ; preds = %originalBBpart2567
  %2974 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %2975 = load i32, i32* %49, align 4
  %2976 = sext i32 %2975 to i64
  %2977 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2974, i64 %2976
  %2978 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2977, i32 0, i32 3
  %2979 = load %struct.rtx_def*, %struct.rtx_def** %2978, align 8
  %2980 = load %struct.rtx_def*, %struct.rtx_def** %71, align 8
  %2981 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %2979, %struct.rtx_def* %2980)
  store %struct.rtx_def* %2981, %struct.rtx_def** %71, align 8
  br label %2982

; <label>:2982:                                   ; preds = %2973
  %2983 = load i32, i32* %49, align 4
  %2984 = add nsw i32 %2983, 1
  store i32 %2984, i32* %49, align 4
  br label %2953

; <label>:2985:                                   ; preds = %originalBBpart2567
  %2986 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %2987 = load %struct.rtx_def*, %struct.rtx_def** %71, align 8
  %2988 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %2986, %struct.rtx_def* %2987)
  store %struct.rtx_def* %2988, %struct.rtx_def** %71, align 8
  %2989 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %2989, %struct.rtx_def** %70, align 8
  call void @end_sequence()
  %2990 = load i32, i32* %35, align 4
  %2991 = and i32 %2990, 512
  %2992 = icmp ne i32 %2991, 0
  br i1 %2992, label %2993, label %2999

; <label>:2993:                                   ; preds = %2985
  %2994 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %2995 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %2994)
  %2996 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2995)
  %2997 = load %struct.rtx_def*, %struct.rtx_def** %71, align 8
  %2998 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %2996, %struct.rtx_def* %2997)
  store %struct.rtx_def* %2998, %struct.rtx_def** %71, align 8
  br label %2999

; <label>:2999:                                   ; preds = %2993, %2985
  %3000 = load %struct.rtx_def*, %struct.rtx_def** %70, align 8
  %3001 = load %struct.rtx_def*, %struct.rtx_def** %72, align 8
  %3002 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3003 = load %struct.rtx_def*, %struct.rtx_def** %71, align 8
  call void @emit_libcall_block(%struct.rtx_def* %3000, %struct.rtx_def* %3001, %struct.rtx_def* %3002, %struct.rtx_def* %3003)
  %3004 = load %struct.rtx_def*, %struct.rtx_def** %72, align 8
  store %struct.rtx_def* %3004, %struct.rtx_def** %19, align 8
  br label %3005

; <label>:3005:                                   ; preds = %2999, %2904
  br label %3084

; <label>:3006:                                   ; preds = %originalBBpart2555, %2856
  %3007 = load i32, i32* @x.5
  %3008 = load i32, i32* @y.6
  %3009 = sub i32 %3007, 1
  %3010 = mul i32 %3007, %3009
  %3011 = urem i32 %3010, 2
  %3012 = icmp eq i32 %3011, 0
  %3013 = icmp slt i32 %3008, 10
  %3014 = or i1 %3012, %3013
  br i1 %3014, label %originalBB569, label %originalBB569alteredBB

originalBB569:                                    ; preds = %originalBB569alteredBB, %3006
  %3015 = load i32, i32* %18, align 4
  %3016 = icmp ne i32 %3015, 0
  %3017 = load i32, i32* @x.5
  %3018 = load i32, i32* @y.6
  %3019 = sub i32 %3017, 1
  %3020 = mul i32 %3017, %3019
  %3021 = urem i32 %3020, 2
  %3022 = icmp eq i32 %3021, 0
  %3023 = icmp slt i32 %3018, 10
  %3024 = or i1 %3022, %3023
  br i1 %3024, label %originalBBpart2571, label %originalBB569alteredBB

originalBBpart2571:                               ; preds = %originalBB569
  br i1 %3016, label %3025, label %3067

; <label>:3025:                                   ; preds = %originalBBpart2571
  %3026 = load i32, i32* %35, align 4
  %3027 = and i32 %3026, 4
  %3028 = icmp ne i32 %3027, 0
  br i1 %3028, label %3029, label %3067

; <label>:3029:                                   ; preds = %3025
  %3030 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3031 = bitcast %struct.rtx_def* %3030 to i32*
  %3032 = load i32, i32* %3031, align 8
  %3033 = lshr i32 %3032, 16
  %3034 = and i32 %3033, 255
  %3035 = call %struct.rtx_def* @gen_reg_rtx(i32 %3034)
  store %struct.rtx_def* %3035, %struct.rtx_def** %73, align 8
  %3036 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3037 = bitcast %union.tree_node* %3036 to %struct.tree_common*
  %3038 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3037, i32 0, i32 1
  %3039 = load %union.tree_node*, %union.tree_node** %3038, align 8
  %3040 = bitcast %union.tree_node* %3039 to %struct.tree_common*
  %3041 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3040, i32 0, i32 2
  %3042 = load i32, i32* %3041, align 8
  %3043 = and i32 %3042, 255
  %3044 = icmp eq i32 %3043, 13
  br i1 %3044, label %3045, label %3047

; <label>:3045:                                   ; preds = %3029
  %3046 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  call void @mark_reg_pointer(%struct.rtx_def* %3046, i32 128)
  br label %3047

; <label>:3047:                                   ; preds = %3045, %3029
  %3048 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  %3049 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3050 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3048, %struct.rtx_def* %3049)
  %3051 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %3051, %struct.rtx_def** %74, align 8
  %3052 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  %3053 = load %struct.rtx_def*, %struct.rtx_def** %74, align 8
  %3054 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3053, i32 0, i32 1
  %3055 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %3054, i64 0, i64 6
  %3056 = bitcast %union.rtunion_def* %3055 to %struct.rtx_def**
  %3057 = load %struct.rtx_def*, %struct.rtx_def** %3056, align 8
  %3058 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 18, %struct.rtx_def* %3052, %struct.rtx_def* %3057)
  %3059 = load %struct.rtx_def*, %struct.rtx_def** %74, align 8
  %3060 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3059, i32 0, i32 1
  %3061 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %3060, i64 0, i64 6
  %3062 = bitcast %union.rtunion_def* %3061 to %struct.rtx_def**
  store %struct.rtx_def* %3058, %struct.rtx_def** %3062, align 8
  %3063 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %3063, %struct.rtx_def** %75, align 8
  call void @end_sequence()
  %3064 = load %struct.rtx_def*, %struct.rtx_def** %75, align 8
  %3065 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %3064)
  %3066 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  store %struct.rtx_def* %3066, %struct.rtx_def** %19, align 8
  br label %3067

; <label>:3067:                                   ; preds = %3047, %3025, %originalBBpart2571
  %3068 = load i32, i32* @x.5
  %3069 = load i32, i32* @y.6
  %3070 = sub i32 %3068, 1
  %3071 = mul i32 %3068, %3070
  %3072 = urem i32 %3071, 2
  %3073 = icmp eq i32 %3072, 0
  %3074 = icmp slt i32 %3069, 10
  %3075 = or i1 %3073, %3074
  br i1 %3075, label %originalBB573, label %originalBB573alteredBB

originalBB573:                                    ; preds = %originalBB573alteredBB, %3067
  %3076 = load i32, i32* @x.5
  %3077 = load i32, i32* @y.6
  %3078 = sub i32 %3076, 1
  %3079 = mul i32 %3076, %3078
  %3080 = urem i32 %3079, 2
  %3081 = icmp eq i32 %3080, 0
  %3082 = icmp slt i32 %3077, 10
  %3083 = or i1 %3081, %3082
  br i1 %3083, label %originalBBpart2575, label %originalBB573alteredBB

originalBBpart2575:                               ; preds = %originalBB573
  br label %3084

; <label>:3084:                                   ; preds = %originalBBpart2575, %3005
  %3085 = load i32, i32* %35, align 4
  %3086 = and i32 %3085, 66
  %3087 = icmp ne i32 %3086, 0
  br i1 %3087, label %3091, label %3088

; <label>:3088:                                   ; preds = %3084
  %3089 = load i32, i32* %18, align 4
  %3090 = icmp eq i32 %3089, 0
  br i1 %3090, label %3091, label %3161

; <label>:3091:                                   ; preds = %3088, %3084
  %3092 = load i32, i32* @x.5
  %3093 = load i32, i32* @y.6
  %3094 = sub i32 %3092, 1
  %3095 = mul i32 %3092, %3094
  %3096 = urem i32 %3095, 2
  %3097 = icmp eq i32 %3096, 0
  %3098 = icmp slt i32 %3093, 10
  %3099 = or i1 %3097, %3098
  br i1 %3099, label %originalBB577, label %originalBB577alteredBB

originalBB577:                                    ; preds = %originalBB577alteredBB, %3091
  %3100 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %3100, %struct.rtx_def** %76, align 8
  %3101 = load i32, i32* @x.5
  %3102 = load i32, i32* @y.6
  %3103 = sub i32 %3101, 1
  %3104 = mul i32 %3101, %3103
  %3105 = urem i32 %3104, 2
  %3106 = icmp eq i32 %3105, 0
  %3107 = icmp slt i32 %3102, 10
  %3108 = or i1 %3106, %3107
  br i1 %3108, label %originalBBpart2579, label %originalBB577alteredBB

originalBBpart2579:                               ; preds = %originalBB577
  br label %3109

; <label>:3109:                                   ; preds = %3141, %originalBBpart2579
  %3110 = load %struct.rtx_def*, %struct.rtx_def** %76, align 8
  %3111 = bitcast %struct.rtx_def* %3110 to i32*
  %3112 = load i32, i32* %3111, align 8
  %3113 = and i32 %3112, 65535
  %3114 = icmp ne i32 %3113, 34
  br i1 %3114, label %3115, label %3142

; <label>:3115:                                   ; preds = %3109
  %3116 = load %struct.rtx_def*, %struct.rtx_def** %76, align 8
  %3117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3116, i32 0, i32 1
  %3118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %3117, i64 0, i64 1
  %3119 = bitcast %union.rtunion_def* %3118 to %struct.rtx_def**
  %3120 = load %struct.rtx_def*, %struct.rtx_def** %3119, align 8
  store %struct.rtx_def* %3120, %struct.rtx_def** %76, align 8
  %3121 = load %struct.rtx_def*, %struct.rtx_def** %76, align 8
  %3122 = load %struct.rtx_def*, %struct.rtx_def** %64, align 8
  %3123 = icmp eq %struct.rtx_def* %3121, %3122
  br i1 %3123, label %3124, label %3141

; <label>:3124:                                   ; preds = %3115
  %3125 = load i32, i32* @x.5
  %3126 = load i32, i32* @y.6
  %3127 = sub i32 %3125, 1
  %3128 = mul i32 %3125, %3127
  %3129 = urem i32 %3128, 2
  %3130 = icmp eq i32 %3129, 0
  %3131 = icmp slt i32 %3126, 10
  %3132 = or i1 %3130, %3131
  br i1 %3132, label %originalBB581, label %originalBB581alteredBB

originalBB581:                                    ; preds = %originalBB581alteredBB, %3124
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 3148, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_call, i32 0, i32 0)) #8
  %3133 = load i32, i32* @x.5
  %3134 = load i32, i32* @y.6
  %3135 = sub i32 %3133, 1
  %3136 = mul i32 %3133, %3135
  %3137 = urem i32 %3136, 2
  %3138 = icmp eq i32 %3137, 0
  %3139 = icmp slt i32 %3134, 10
  %3140 = or i1 %3138, %3139
  br i1 %3140, label %originalBBpart2583, label %originalBB581alteredBB

originalBBpart2583:                               ; preds = %originalBB581
  unreachable

; <label>:3141:                                   ; preds = %3115
  br label %3109

; <label>:3142:                                   ; preds = %3109
  %3143 = load i32, i32* @x.5
  %3144 = load i32, i32* @y.6
  %3145 = sub i32 %3143, 1
  %3146 = mul i32 %3143, %3145
  %3147 = urem i32 %3146, 2
  %3148 = icmp eq i32 %3147, 0
  %3149 = icmp slt i32 %3144, 10
  %3150 = or i1 %3148, %3149
  br i1 %3150, label %originalBB585, label %originalBB585alteredBB

originalBB585:                                    ; preds = %originalBB585alteredBB, %3142
  %3151 = load %struct.rtx_def*, %struct.rtx_def** %76, align 8
  %3152 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %3151)
  %3153 = load i32, i32* @x.5
  %3154 = load i32, i32* @y.6
  %3155 = sub i32 %3153, 1
  %3156 = mul i32 %3153, %3155
  %3157 = urem i32 %3156, 2
  %3158 = icmp eq i32 %3157, 0
  %3159 = icmp slt i32 %3154, 10
  %3160 = or i1 %3158, %3159
  br i1 %3160, label %originalBBpart2587, label %originalBB585alteredBB

originalBBpart2587:                               ; preds = %originalBB585
  br label %3161

; <label>:3161:                                   ; preds = %originalBBpart2587, %3088
  %3162 = load i32, i32* %35, align 4
  %3163 = and i32 %3162, 64
  %3164 = icmp ne i32 %3163, 0
  br i1 %3164, label %3165, label %3172

; <label>:3165:                                   ; preds = %3161
  %3166 = load %struct.function*, %struct.function** @cfun, align 8
  %3167 = getelementptr inbounds %struct.function, %struct.function* %3166, i32 0, i32 56
  %3168 = bitcast i24* %3167 to i32*
  %3169 = load i32, i32* %3168, align 8
  %3170 = and i32 %3169, -33
  %3171 = or i32 %3170, 32
  store i32 %3171, i32* %3168, align 8
  br label %3172

; <label>:3172:                                   ; preds = %3165, %3161
  %3173 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3174 = icmp ne %struct.rtx_def* %3173, null
  br i1 %3174, label %3175, label %3227

; <label>:3175:                                   ; preds = %3172
  %3176 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3177 = bitcast %struct.rtx_def* %3176 to i32*
  %3178 = load i32, i32* %3177, align 8
  %3179 = and i32 %3178, 65535
  %3180 = icmp eq i32 %3179, 66
  br i1 %3180, label %3181, label %3227

; <label>:3181:                                   ; preds = %3175
  %3182 = load i32, i32* @x.5
  %3183 = load i32, i32* @y.6
  %3184 = sub i32 %3182, 1
  %3185 = mul i32 %3182, %3184
  %3186 = urem i32 %3185, 2
  %3187 = icmp eq i32 %3186, 0
  %3188 = icmp slt i32 %3183, 10
  %3189 = or i1 %3187, %3188
  br i1 %3189, label %originalBB589, label %originalBB589alteredBB

originalBB589:                                    ; preds = %originalBB589alteredBB, %3181
  %3190 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %3191 = icmp ne %struct.rtx_def* %3190, null
  %3192 = load i32, i32* @x.5
  %3193 = load i32, i32* @y.6
  %3194 = sub i32 %3192, 1
  %3195 = mul i32 %3192, %3194
  %3196 = urem i32 %3195, 2
  %3197 = icmp eq i32 %3196, 0
  %3198 = icmp slt i32 %3193, 10
  %3199 = or i1 %3197, %3198
  br i1 %3199, label %originalBBpart2591, label %originalBB589alteredBB

originalBBpart2591:                               ; preds = %originalBB589
  br i1 %3191, label %3200, label %3227

; <label>:3200:                                   ; preds = %originalBBpart2591
  %3201 = load i32, i32* @x.5
  %3202 = load i32, i32* @y.6
  %3203 = sub i32 %3201, 1
  %3204 = mul i32 %3201, %3203
  %3205 = urem i32 %3204, 2
  %3206 = icmp eq i32 %3205, 0
  %3207 = icmp slt i32 %3202, 10
  %3208 = or i1 %3206, %3207
  br i1 %3208, label %originalBB593, label %originalBB593alteredBB

originalBB593:                                    ; preds = %originalBB593alteredBB, %3200
  %3209 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3210 = bitcast %struct.rtx_def* %3209 to i32*
  %3211 = load i32, i32* %3210, align 8
  %3212 = lshr i32 %3211, 26
  %3213 = and i32 %3212, 1
  %3214 = icmp ne i32 %3213, 0
  %3215 = load i32, i32* @x.5
  %3216 = load i32, i32* @y.6
  %3217 = sub i32 %3215, 1
  %3218 = mul i32 %3215, %3217
  %3219 = urem i32 %3218, 2
  %3220 = icmp eq i32 %3219, 0
  %3221 = icmp slt i32 %3216, 10
  %3222 = or i1 %3220, %3221
  br i1 %3222, label %originalBBpart2611, label %originalBB593alteredBB

originalBBpart2611:                               ; preds = %originalBB593
  br i1 %3214, label %3223, label %3227

; <label>:3223:                                   ; preds = %originalBBpart2611
  %3224 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3225 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3224)
  %3226 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %3225)
  br label %3227

; <label>:3227:                                   ; preds = %3223, %originalBBpart2611, %originalBBpart2591, %3175, %3172
  %3228 = load i32, i32* @x.5
  %3229 = load i32, i32* @y.6
  %3230 = sub i32 %3228, 1
  %3231 = mul i32 %3228, %3230
  %3232 = urem i32 %3231, 2
  %3233 = icmp eq i32 %3232, 0
  %3234 = icmp slt i32 %3229, 10
  %3235 = or i1 %3233, %3234
  br i1 %3235, label %originalBB613, label %originalBB613alteredBB

originalBB613:                                    ; preds = %originalBB613alteredBB, %3227
  %3236 = call i32 @any_pending_cleanups(i32 1)
  %3237 = icmp ne i32 %3236, 0
  %3238 = load i32, i32* @x.5
  %3239 = load i32, i32* @y.6
  %3240 = sub i32 %3238, 1
  %3241 = mul i32 %3238, %3240
  %3242 = urem i32 %3241, 2
  %3243 = icmp eq i32 %3242, 0
  %3244 = icmp slt i32 %3239, 10
  %3245 = or i1 %3243, %3244
  br i1 %3245, label %originalBBpart2615, label %originalBB613alteredBB

originalBBpart2615:                               ; preds = %originalBB613
  br i1 %3237, label %3246, label %3296

; <label>:3246:                                   ; preds = %originalBBpart2615
  %3247 = load i32, i32* @x.5
  %3248 = load i32, i32* @y.6
  %3249 = sub i32 %3247, 1
  %3250 = mul i32 %3247, %3249
  %3251 = urem i32 %3250, 2
  %3252 = icmp eq i32 %3251, 0
  %3253 = icmp slt i32 %3248, 10
  %3254 = or i1 %3252, %3253
  br i1 %3254, label %originalBB617, label %originalBB617alteredBB

originalBB617:                                    ; preds = %originalBB617alteredBB, %3246
  %3255 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3256 = icmp ne %struct.rtx_def* %3255, null
  %3257 = load i32, i32* @x.5
  %3258 = load i32, i32* @y.6
  %3259 = sub i32 %3257, 1
  %3260 = mul i32 %3257, %3259
  %3261 = urem i32 %3260, 2
  %3262 = icmp eq i32 %3261, 0
  %3263 = icmp slt i32 %3258, 10
  %3264 = or i1 %3262, %3263
  br i1 %3264, label %originalBBpart2619, label %originalBB617alteredBB

originalBBpart2619:                               ; preds = %originalBB617
  br i1 %3256, label %3265, label %3295

; <label>:3265:                                   ; preds = %originalBBpart2619
  %3266 = load i32, i32* @x.5
  %3267 = load i32, i32* @y.6
  %3268 = sub i32 %3266, 1
  %3269 = mul i32 %3266, %3268
  %3270 = urem i32 %3269, 2
  %3271 = icmp eq i32 %3270, 0
  %3272 = icmp slt i32 %3267, 10
  %3273 = or i1 %3271, %3272
  br i1 %3273, label %originalBB621, label %originalBB621alteredBB

originalBB621:                                    ; preds = %originalBB621alteredBB, %3265
  %3274 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3275 = bitcast %struct.rtx_def* %3274 to i32*
  %3276 = load i32, i32* %3275, align 8
  %3277 = and i32 %3276, 65535
  %3278 = icmp eq i32 %3277, 61
  %3279 = load i32, i32* @x.5
  %3280 = load i32, i32* @y.6
  %3281 = sub i32 %3279, 1
  %3282 = mul i32 %3279, %3281
  %3283 = urem i32 %3282, 2
  %3284 = icmp eq i32 %3283, 0
  %3285 = icmp slt i32 %3280, 10
  %3286 = or i1 %3284, %3285
  br i1 %3286, label %originalBBpart2630, label %originalBB621alteredBB

originalBBpart2630:                               ; preds = %originalBB621
  br i1 %3278, label %3287, label %3295

; <label>:3287:                                   ; preds = %originalBBpart2630
  %3288 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3289 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3288, i32 0, i32 1
  %3290 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %3289, i64 0, i64 0
  %3291 = bitcast %union.rtunion_def* %3290 to i32*
  %3292 = load i32, i32* %3291, align 8
  %3293 = icmp ult i32 %3292, 53
  br i1 %3293, label %3294, label %3295

; <label>:3294:                                   ; preds = %3287
  store %struct.rtx_def* null, %struct.rtx_def** %6, align 8
  br label %3295

; <label>:3295:                                   ; preds = %3294, %3287, %originalBBpart2630, %originalBBpart2619
  store i32 1, i32* %60, align 4
  br label %3296

; <label>:3296:                                   ; preds = %3295, %originalBBpart2615
  %3297 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3298 = bitcast %union.tree_node* %3297 to %struct.tree_common*
  %3299 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3298, i32 0, i32 1
  %3300 = load %union.tree_node*, %union.tree_node** %3299, align 8
  %3301 = bitcast %union.tree_node* %3300 to %struct.tree_type*
  %3302 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %3301, i32 0, i32 6
  %3303 = load i32, i32* %3302, align 4
  %3304 = lshr i32 %3303, 9
  %3305 = and i32 %3304, 127
  %3306 = icmp eq i32 %3305, 0
  br i1 %3306, label %3326, label %3307

; <label>:3307:                                   ; preds = %3296
  %3308 = load i32, i32* @x.5
  %3309 = load i32, i32* @y.6
  %3310 = sub i32 %3308, 1
  %3311 = mul i32 %3308, %3310
  %3312 = urem i32 %3311, 2
  %3313 = icmp eq i32 %3312, 0
  %3314 = icmp slt i32 %3309, 10
  %3315 = or i1 %3313, %3314
  br i1 %3315, label %originalBB632, label %originalBB632alteredBB

originalBB632:                                    ; preds = %originalBB632alteredBB, %3307
  %3316 = load i32, i32* %7, align 4
  %3317 = icmp ne i32 %3316, 0
  %3318 = load i32, i32* @x.5
  %3319 = load i32, i32* @y.6
  %3320 = sub i32 %3318, 1
  %3321 = mul i32 %3318, %3320
  %3322 = urem i32 %3321, 2
  %3323 = icmp eq i32 %3322, 0
  %3324 = icmp slt i32 %3319, 10
  %3325 = or i1 %3323, %3324
  br i1 %3325, label %originalBBpart2634, label %originalBB632alteredBB

originalBBpart2634:                               ; preds = %originalBB632
  br i1 %3317, label %3326, label %3328

; <label>:3326:                                   ; preds = %originalBBpart2634, %3296
  %3327 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16
  store %struct.rtx_def* %3327, %struct.rtx_def** %6, align 8
  br label %3662

; <label>:3328:                                   ; preds = %originalBBpart2634
  %3329 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %3330 = icmp ne %struct.rtx_def* %3329, null
  br i1 %3330, label %3331, label %3413

; <label>:3331:                                   ; preds = %3328
  %3332 = load i32, i32* @x.5
  %3333 = load i32, i32* @y.6
  %3334 = sub i32 %3332, 1
  %3335 = mul i32 %3332, %3334
  %3336 = urem i32 %3335, 2
  %3337 = icmp eq i32 %3336, 0
  %3338 = icmp slt i32 %3333, 10
  %3339 = or i1 %3337, %3338
  br i1 %3339, label %originalBB636, label %originalBB636alteredBB

originalBB636:                                    ; preds = %originalBB636alteredBB, %3331
  %3340 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3341 = icmp eq %struct.rtx_def* %3340, null
  %3342 = load i32, i32* @x.5
  %3343 = load i32, i32* @y.6
  %3344 = sub i32 %3342, 1
  %3345 = mul i32 %3342, %3344
  %3346 = urem i32 %3345, 2
  %3347 = icmp eq i32 %3346, 0
  %3348 = icmp slt i32 %3343, 10
  %3349 = or i1 %3347, %3348
  br i1 %3349, label %originalBBpart2638, label %originalBB636alteredBB

originalBBpart2638:                               ; preds = %originalBB636
  br i1 %3341, label %3372, label %3350

; <label>:3350:                                   ; preds = %originalBBpart2638
  %3351 = load i32, i32* @x.5
  %3352 = load i32, i32* @y.6
  %3353 = sub i32 %3351, 1
  %3354 = mul i32 %3351, %3353
  %3355 = urem i32 %3354, 2
  %3356 = icmp eq i32 %3355, 0
  %3357 = icmp slt i32 %3352, 10
  %3358 = or i1 %3356, %3357
  br i1 %3358, label %originalBB640, label %originalBB640alteredBB

originalBB640:                                    ; preds = %originalBB640alteredBB, %3350
  %3359 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3360 = bitcast %struct.rtx_def* %3359 to i32*
  %3361 = load i32, i32* %3360, align 8
  %3362 = and i32 %3361, 65535
  %3363 = icmp ne i32 %3362, 66
  %3364 = load i32, i32* @x.5
  %3365 = load i32, i32* @y.6
  %3366 = sub i32 %3364, 1
  %3367 = mul i32 %3364, %3366
  %3368 = urem i32 %3367, 2
  %3369 = icmp eq i32 %3368, 0
  %3370 = icmp slt i32 %3365, 10
  %3371 = or i1 %3369, %3370
  br i1 %3371, label %originalBBpart2651, label %originalBB640alteredBB

originalBBpart2651:                               ; preds = %originalBB640
  br i1 %3363, label %3372, label %3412

; <label>:3372:                                   ; preds = %originalBBpart2651, %originalBBpart2638
  %3373 = load i32, i32* @x.5
  %3374 = load i32, i32* @y.6
  %3375 = sub i32 %3373, 1
  %3376 = mul i32 %3373, %3375
  %3377 = urem i32 %3376, 2
  %3378 = icmp eq i32 %3377, 0
  %3379 = icmp slt i32 %3374, 10
  %3380 = or i1 %3378, %3379
  br i1 %3380, label %originalBB653, label %originalBB653alteredBB

originalBB653:                                    ; preds = %originalBB653alteredBB, %3372
  %3381 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3382 = bitcast %union.tree_node* %3381 to %struct.tree_common*
  %3383 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3382, i32 0, i32 1
  %3384 = load %union.tree_node*, %union.tree_node** %3383, align 8
  %3385 = bitcast %union.tree_node* %3384 to %struct.tree_type*
  %3386 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %3385, i32 0, i32 6
  %3387 = load i32, i32* %3386, align 4
  %3388 = lshr i32 %3387, 9
  %3389 = and i32 %3388, 127
  %3390 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3391 = bitcast %union.tree_node* %3390 to %struct.tree_common*
  %3392 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3391, i32 0, i32 1
  %3393 = load %union.tree_node*, %union.tree_node** %3392, align 8
  %3394 = bitcast %union.tree_node* %3393 to %struct.tree_type*
  %3395 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %3394, i32 0, i32 6
  %3396 = load i32, i32* %3395, align 4
  %3397 = lshr i32 %3396, 9
  %3398 = and i32 %3397, 127
  %3399 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %3400 = call %struct.rtx_def* @memory_address(i32 %3398, %struct.rtx_def* %3399)
  %3401 = call %struct.rtx_def* @gen_rtx_MEM(i32 %3389, %struct.rtx_def* %3400)
  store %struct.rtx_def* %3401, %struct.rtx_def** %6, align 8
  %3402 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3403 = load %union.tree_node*, %union.tree_node** %5, align 8
  call void @set_mem_attributes(%struct.rtx_def* %3402, %union.tree_node* %3403, i32 1)
  %3404 = load i32, i32* @x.5
  %3405 = load i32, i32* @y.6
  %3406 = sub i32 %3404, 1
  %3407 = mul i32 %3404, %3406
  %3408 = urem i32 %3407, 2
  %3409 = icmp eq i32 %3408, 0
  %3410 = icmp slt i32 %3405, 10
  %3411 = or i1 %3409, %3410
  br i1 %3411, label %originalBBpart2692, label %originalBB653alteredBB

originalBBpart2692:                               ; preds = %originalBB653
  br label %3412

; <label>:3412:                                   ; preds = %originalBBpart2692, %originalBBpart2651
  br label %3661

; <label>:3413:                                   ; preds = %3328
  %3414 = load i32, i32* %23, align 4
  %3415 = icmp ne i32 %3414, 0
  br i1 %3415, label %3416, label %3431

; <label>:3416:                                   ; preds = %3413
  %3417 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3418 = bitcast %union.tree_node* %3417 to %struct.tree_common*
  %3419 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3418, i32 0, i32 1
  %3420 = load %union.tree_node*, %union.tree_node** %3419, align 8
  %3421 = bitcast %union.tree_node* %3420 to %struct.tree_type*
  %3422 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %3421, i32 0, i32 6
  %3423 = load i32, i32* %3422, align 4
  %3424 = lshr i32 %3423, 9
  %3425 = and i32 %3424, 127
  %3426 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3427 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %3426)
  %3428 = call %struct.rtx_def* @gen_rtx_MEM(i32 %3425, %struct.rtx_def* %3427)
  store %struct.rtx_def* %3428, %struct.rtx_def** %6, align 8
  %3429 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3430 = load %union.tree_node*, %union.tree_node** %5, align 8
  call void @set_mem_attributes(%struct.rtx_def* %3429, %union.tree_node* %3430, i32 1)
  br label %3644

; <label>:3431:                                   ; preds = %3413
  %3432 = load i32, i32* @x.5
  %3433 = load i32, i32* @y.6
  %3434 = sub i32 %3432, 1
  %3435 = mul i32 %3432, %3434
  %3436 = urem i32 %3435, 2
  %3437 = icmp eq i32 %3436, 0
  %3438 = icmp slt i32 %3433, 10
  %3439 = or i1 %3437, %3438
  br i1 %3439, label %originalBB694, label %originalBB694alteredBB

originalBB694:                                    ; preds = %originalBB694alteredBB, %3431
  %3440 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3441 = bitcast %struct.rtx_def* %3440 to i32*
  %3442 = load i32, i32* %3441, align 8
  %3443 = and i32 %3442, 65535
  %3444 = icmp eq i32 %3443, 39
  %3445 = load i32, i32* @x.5
  %3446 = load i32, i32* @y.6
  %3447 = sub i32 %3445, 1
  %3448 = mul i32 %3445, %3447
  %3449 = urem i32 %3448, 2
  %3450 = icmp eq i32 %3449, 0
  %3451 = icmp slt i32 %3446, 10
  %3452 = or i1 %3450, %3451
  br i1 %3452, label %originalBBpart2700, label %originalBB694alteredBB

originalBBpart2700:                               ; preds = %originalBB694
  br i1 %3444, label %3453, label %3568

; <label>:3453:                                   ; preds = %originalBBpart2700
  %3454 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3455 = icmp eq %struct.rtx_def* %3454, null
  br i1 %3455, label %3456, label %3553

; <label>:3456:                                   ; preds = %3453
  %3457 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3458 = bitcast %union.tree_node* %3457 to %struct.tree_common*
  %3459 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3458, i32 0, i32 1
  %3460 = load %union.tree_node*, %union.tree_node** %3459, align 8
  %3461 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3462 = bitcast %union.tree_node* %3461 to %struct.tree_common*
  %3463 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3462, i32 0, i32 1
  %3464 = load %union.tree_node*, %union.tree_node** %3463, align 8
  %3465 = bitcast %union.tree_node* %3464 to %struct.tree_common*
  %3466 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3465, i32 0, i32 2
  %3467 = load i32, i32* %3466, align 8
  %3468 = lshr i32 %3467, 12
  %3469 = and i32 %3468, 1
  %3470 = mul nsw i32 %3469, 1
  %3471 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3472 = bitcast %union.tree_node* %3471 to %struct.tree_common*
  %3473 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3472, i32 0, i32 1
  %3474 = load %union.tree_node*, %union.tree_node** %3473, align 8
  %3475 = bitcast %union.tree_node* %3474 to %struct.tree_common*
  %3476 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3475, i32 0, i32 2
  %3477 = load i32, i32* %3476, align 8
  %3478 = lshr i32 %3477, 11
  %3479 = and i32 %3478, 1
  %3480 = mul nsw i32 %3479, 2
  %3481 = or i32 %3470, %3480
  %3482 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3483 = bitcast %union.tree_node* %3482 to %struct.tree_common*
  %3484 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3483, i32 0, i32 1
  %3485 = load %union.tree_node*, %union.tree_node** %3484, align 8
  %3486 = bitcast %union.tree_node* %3485 to %struct.tree_type*
  %3487 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %3486, i32 0, i32 6
  %3488 = load i32, i32* %3487, align 4
  %3489 = lshr i32 %3488, 21
  %3490 = and i32 %3489, 1
  %3491 = mul nsw i32 %3490, 4
  %3492 = or i32 %3481, %3491
  %3493 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3494 = bitcast %union.tree_node* %3493 to %struct.tree_common*
  %3495 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3494, i32 0, i32 1
  %3496 = load %union.tree_node*, %union.tree_node** %3495, align 8
  %3497 = bitcast %union.tree_node* %3496 to %struct.tree_common*
  %3498 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3497, i32 0, i32 2
  %3499 = load i32, i32* %3498, align 8
  %3500 = and i32 %3499, 255
  %3501 = icmp eq i32 %3500, 20
  br i1 %3501, label %3502, label %3527

; <label>:3502:                                   ; preds = %3456
  %3503 = load i32, i32* @x.5
  %3504 = load i32, i32* @y.6
  %3505 = sub i32 %3503, 1
  %3506 = mul i32 %3503, %3505
  %3507 = urem i32 %3506, 2
  %3508 = icmp eq i32 %3507, 0
  %3509 = icmp slt i32 %3504, 10
  %3510 = or i1 %3508, %3509
  br i1 %3510, label %originalBB702, label %originalBB702alteredBB

originalBB702:                                    ; preds = %originalBB702alteredBB, %3502
  %3511 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3512 = bitcast %union.tree_node* %3511 to %struct.tree_common*
  %3513 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3512, i32 0, i32 1
  %3514 = load %union.tree_node*, %union.tree_node** %3513, align 8
  %3515 = bitcast %union.tree_node* %3514 to %struct.tree_common*
  %3516 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3515, i32 0, i32 1
  %3517 = load %union.tree_node*, %union.tree_node** %3516, align 8
  %3518 = icmp ne %union.tree_node* %3517, null
  %3519 = load i32, i32* @x.5
  %3520 = load i32, i32* @y.6
  %3521 = sub i32 %3519, 1
  %3522 = mul i32 %3519, %3521
  %3523 = urem i32 %3522, 2
  %3524 = icmp eq i32 %3523, 0
  %3525 = icmp slt i32 %3520, 10
  %3526 = or i1 %3524, %3525
  br i1 %3526, label %originalBBpart2704, label %originalBB702alteredBB

originalBBpart2704:                               ; preds = %originalBB702
  br label %3527

; <label>:3527:                                   ; preds = %originalBBpart2704, %3456
  %3528 = phi i1 [ false, %3456 ], [ %3518, %originalBBpart2704 ]
  %3529 = load i32, i32* @x.5
  %3530 = load i32, i32* @y.6
  %3531 = sub i32 %3529, 1
  %3532 = mul i32 %3529, %3531
  %3533 = urem i32 %3532, 2
  %3534 = icmp eq i32 %3533, 0
  %3535 = icmp slt i32 %3530, 10
  %3536 = or i1 %3534, %3535
  br i1 %3536, label %originalBB706, label %originalBB706alteredBB

originalBB706:                                    ; preds = %originalBB706alteredBB, %3527
  %3537 = zext i1 %3528 to i32
  %3538 = mul nsw i32 %3537, 8
  %3539 = or i32 %3492, %3538
  %3540 = or i32 %3539, 1
  %3541 = call %union.tree_node* @build_qualified_type(%union.tree_node* %3460, i32 %3540)
  store %union.tree_node* %3541, %union.tree_node** %77, align 8
  %3542 = load %union.tree_node*, %union.tree_node** %77, align 8
  %3543 = call %struct.rtx_def* @assign_temp(%union.tree_node* %3542, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %3543, %struct.rtx_def** %6, align 8
  %3544 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %3544)
  %3545 = load i32, i32* @x.5
  %3546 = load i32, i32* @y.6
  %3547 = sub i32 %3545, 1
  %3548 = mul i32 %3545, %3547
  %3549 = urem i32 %3548, 2
  %3550 = icmp eq i32 %3549, 0
  %3551 = icmp slt i32 %3546, 10
  %3552 = or i1 %3550, %3551
  br i1 %3552, label %originalBBpart2741, label %originalBB706alteredBB

originalBBpart2741:                               ; preds = %originalBB706
  br label %3553

; <label>:3553:                                   ; preds = %originalBBpart2741, %3453
  %3554 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3555 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3556 = call i32 @rtx_equal_p(%struct.rtx_def* %3554, %struct.rtx_def* %3555)
  %3557 = icmp ne i32 %3556, 0
  br i1 %3557, label %3567, label %3558

; <label>:3558:                                   ; preds = %3553
  %3559 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3560 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3561 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3562 = bitcast %union.tree_node* %3561 to %struct.tree_common*
  %3563 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3562, i32 0, i32 1
  %3564 = load %union.tree_node*, %union.tree_node** %3563, align 8
  %3565 = call i64 @int_size_in_bytes(%union.tree_node* %3564)
  %3566 = trunc i64 %3565 to i32
  call void @emit_group_store(%struct.rtx_def* %3559, %struct.rtx_def* %3560, i32 %3566)
  br label %3567

; <label>:3567:                                   ; preds = %3558, %3553
  store i32 1, i32* %60, align 4
  br label %3643

; <label>:3568:                                   ; preds = %originalBBpart2700
  %3569 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3570 = icmp ne %struct.rtx_def* %3569, null
  br i1 %3570, label %3571, label %3619

; <label>:3571:                                   ; preds = %3568
  %3572 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3573 = bitcast %struct.rtx_def* %3572 to i32*
  %3574 = load i32, i32* %3573, align 8
  %3575 = lshr i32 %3574, 16
  %3576 = and i32 %3575, 255
  %3577 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3578 = bitcast %union.tree_node* %3577 to %struct.tree_common*
  %3579 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3578, i32 0, i32 1
  %3580 = load %union.tree_node*, %union.tree_node** %3579, align 8
  %3581 = bitcast %union.tree_node* %3580 to %struct.tree_type*
  %3582 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %3581, i32 0, i32 6
  %3583 = load i32, i32* %3582, align 4
  %3584 = lshr i32 %3583, 9
  %3585 = and i32 %3584, 127
  %3586 = icmp eq i32 %3576, %3585
  br i1 %3586, label %3587, label %3619

; <label>:3587:                                   ; preds = %3571
  %3588 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3589 = bitcast %struct.rtx_def* %3588 to i32*
  %3590 = load i32, i32* %3589, align 8
  %3591 = lshr i32 %3590, 16
  %3592 = and i32 %3591, 255
  %3593 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3594 = bitcast %struct.rtx_def* %3593 to i32*
  %3595 = load i32, i32* %3594, align 8
  %3596 = lshr i32 %3595, 16
  %3597 = and i32 %3596, 255
  %3598 = icmp eq i32 %3592, %3597
  br i1 %3598, label %3599, label %3619

; <label>:3599:                                   ; preds = %3587
  %3600 = load i32, i32* @x.5
  %3601 = load i32, i32* @y.6
  %3602 = sub i32 %3600, 1
  %3603 = mul i32 %3600, %3602
  %3604 = urem i32 %3603, 2
  %3605 = icmp eq i32 %3604, 0
  %3606 = icmp slt i32 %3601, 10
  %3607 = or i1 %3605, %3606
  br i1 %3607, label %originalBB743, label %originalBB743alteredBB

originalBB743:                                    ; preds = %originalBB743alteredBB, %3599
  %3608 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3609 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3610 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3608, %struct.rtx_def* %3609)
  %3611 = load i32, i32* @x.5
  %3612 = load i32, i32* @y.6
  %3613 = sub i32 %3611, 1
  %3614 = mul i32 %3611, %3613
  %3615 = urem i32 %3614, 2
  %3616 = icmp eq i32 %3615, 0
  %3617 = icmp slt i32 %3612, 10
  %3618 = or i1 %3616, %3617
  br i1 %3618, label %originalBBpart2745, label %originalBB743alteredBB

originalBBpart2745:                               ; preds = %originalBB743
  br label %3642

; <label>:3619:                                   ; preds = %3587, %3571, %3568
  %3620 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3621 = bitcast %union.tree_node* %3620 to %struct.tree_common*
  %3622 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3621, i32 0, i32 1
  %3623 = load %union.tree_node*, %union.tree_node** %3622, align 8
  %3624 = bitcast %union.tree_node* %3623 to %struct.tree_type*
  %3625 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %3624, i32 0, i32 6
  %3626 = load i32, i32* %3625, align 4
  %3627 = lshr i32 %3626, 9
  %3628 = and i32 %3627, 127
  %3629 = icmp eq i32 %3628, 51
  br i1 %3629, label %3630, label %3638

; <label>:3630:                                   ; preds = %3619
  %3631 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %3632 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3633 = load %union.tree_node*, %union.tree_node** %5, align 8
  %3634 = bitcast %union.tree_node* %3633 to %struct.tree_common*
  %3635 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3634, i32 0, i32 1
  %3636 = load %union.tree_node*, %union.tree_node** %3635, align 8
  %3637 = call %struct.rtx_def* @copy_blkmode_from_reg(%struct.rtx_def* %3631, %struct.rtx_def* %3632, %union.tree_node* %3636)
  store %struct.rtx_def* %3637, %struct.rtx_def** %6, align 8
  store i32 1, i32* %60, align 4
  br label %3641

; <label>:3638:                                   ; preds = %3619
  %3639 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %3640 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %3639)
  store %struct.rtx_def* %3640, %struct.rtx_def** %6, align 8
  br label %3641

; <label>:3641:                                   ; preds = %3638, %3630
  br label %3642

; <label>:3642:                                   ; preds = %3641, %originalBBpart2745
  br label %3643

; <label>:3643:                                   ; preds = %3642, %3567
  br label %3644

; <label>:3644:                                   ; preds = %3643, %3416
  %3645 = load i32, i32* @x.5
  %3646 = load i32, i32* @y.6
  %3647 = sub i32 %3645, 1
  %3648 = mul i32 %3645, %3647
  %3649 = urem i32 %3648, 2
  %3650 = icmp eq i32 %3649, 0
  %3651 = icmp slt i32 %3646, 10
  %3652 = or i1 %3650, %3651
  br i1 %3652, label %originalBB747, label %originalBB747alteredBB

originalBB747:                                    ; preds = %originalBB747alteredBB, %3644
  %3653 = load i32, i32* @x.5
  %3654 = load i32, i32* @y.6
  %3655 = sub i32 %3653, 1
  %3656 = mul i32 %3653, %3655
  %3657 = urem i32 %3656, 2
  %3658 = icmp eq i32 %3657, 0
  %3659 = icmp slt i32 %3654, 10
  %3660 = or i1 %3658, %3659
  br i1 %3660, label %originalBBpart2749, label %originalBB747alteredBB

originalBBpart2749:                               ; preds = %originalBB747
  br label %3661

; <label>:3661:                                   ; preds = %originalBBpart2749, %3412
  br label %3662

; <label>:3662:                                   ; preds = %3661, %3326
  %3663 = load %struct.rtx_def*, %struct.rtx_def** %43, align 8
  %3664 = icmp ne %struct.rtx_def* %3663, null
  br i1 %3664, label %3665, label %3679

; <label>:3665:                                   ; preds = %3662
  %3666 = load i32, i32* %35, align 4
  %3667 = and i32 %3666, 1024
  %3668 = icmp ne i32 %3667, 0
  br i1 %3668, label %3679, label %3669

; <label>:3669:                                   ; preds = %3665
  %3670 = load %struct.rtx_def*, %struct.rtx_def** %43, align 8
  call void @emit_stack_restore(i32 0, %struct.rtx_def* %3670, %struct.rtx_def* null)
  %3671 = load i32, i32* %44, align 4
  %3672 = load %struct.function*, %struct.function** @cfun, align 8
  %3673 = getelementptr inbounds %struct.function, %struct.function* %3672, i32 0, i32 2
  %3674 = load %struct.expr_status*, %struct.expr_status** %3673, align 8
  %3675 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %3674, i32 0, i32 0
  store i32 %3671, i32* %3675, align 8
  %3676 = load i32, i32* %42, align 4
  store i32 %3676, i32* @stack_arg_under_construction, align 4
  %3677 = load i32, i32* %40, align 4
  store i32 %3677, i32* @highest_outgoing_arg_in_use, align 4
  %3678 = load i8*, i8** %41, align 8
  store i8* %3678, i8** @stack_usage_map, align 8
  store i32 1, i32* %60, align 4
  br label %3898

; <label>:3679:                                   ; preds = %3665, %3662
  %3680 = load i32, i32* @x.5
  %3681 = load i32, i32* @y.6
  %3682 = sub i32 %3680, 1
  %3683 = mul i32 %3680, %3682
  %3684 = urem i32 %3683, 2
  %3685 = icmp eq i32 %3684, 0
  %3686 = icmp slt i32 %3681, 10
  %3687 = or i1 %3685, %3686
  br i1 %3687, label %originalBB751, label %originalBB751alteredBB

originalBB751:                                    ; preds = %originalBB751alteredBB, %3679
  %3688 = load i32, i32* @target_flags, align 4
  %3689 = and i32 %3688, 4096
  %3690 = icmp ne i32 %3689, 0
  %3691 = load i32, i32* @x.5
  %3692 = load i32, i32* @y.6
  %3693 = sub i32 %3691, 1
  %3694 = mul i32 %3691, %3693
  %3695 = urem i32 %3694, 2
  %3696 = icmp eq i32 %3695, 0
  %3697 = icmp slt i32 %3692, 10
  %3698 = or i1 %3696, %3697
  br i1 %3698, label %originalBBpart2756, label %originalBB751alteredBB

originalBBpart2756:                               ; preds = %originalBB751
  br i1 %3690, label %3699, label %3897

; <label>:3699:                                   ; preds = %originalBBpart2756
  %3700 = load i32, i32* %18, align 4
  %3701 = icmp ne i32 %3700, 0
  br i1 %3701, label %3702, label %3897

; <label>:3702:                                   ; preds = %3699
  %3703 = load %struct.rtx_def*, %struct.rtx_def** %39, align 8
  %3704 = icmp ne %struct.rtx_def* %3703, null
  br i1 %3704, label %3705, label %3726

; <label>:3705:                                   ; preds = %3702
  %3706 = load i32, i32* @x.5
  %3707 = load i32, i32* @y.6
  %3708 = sub i32 %3706, 1
  %3709 = mul i32 %3706, %3708
  %3710 = urem i32 %3709, 2
  %3711 = icmp eq i32 %3710, 0
  %3712 = icmp slt i32 %3707, 10
  %3713 = or i1 %3711, %3712
  br i1 %3713, label %originalBB758, label %originalBB758alteredBB

originalBB758:                                    ; preds = %originalBB758alteredBB, %3705
  %3714 = load %struct.rtx_def*, %struct.rtx_def** %39, align 8
  %3715 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %3716 = load i32, i32* %38, align 4
  %3717 = load i32, i32* %37, align 4
  call void @restore_fixed_argument_area(%struct.rtx_def* %3714, %struct.rtx_def* %3715, i32 %3716, i32 %3717)
  %3718 = load i32, i32* @x.5
  %3719 = load i32, i32* @y.6
  %3720 = sub i32 %3718, 1
  %3721 = mul i32 %3718, %3720
  %3722 = urem i32 %3721, 2
  %3723 = icmp eq i32 %3722, 0
  %3724 = icmp slt i32 %3719, 10
  %3725 = or i1 %3723, %3724
  br i1 %3725, label %originalBBpart2760, label %originalBB758alteredBB

originalBBpart2760:                               ; preds = %originalBB758
  br label %3726

; <label>:3726:                                   ; preds = %originalBBpart2760, %3702
  %3727 = load i32, i32* @x.5
  %3728 = load i32, i32* @y.6
  %3729 = sub i32 %3727, 1
  %3730 = mul i32 %3727, %3729
  %3731 = urem i32 %3730, 2
  %3732 = icmp eq i32 %3731, 0
  %3733 = icmp slt i32 %3728, 10
  %3734 = or i1 %3732, %3733
  br i1 %3734, label %originalBB762, label %originalBB762alteredBB

originalBB762:                                    ; preds = %originalBB762alteredBB, %3726
  store i32 0, i32* %49, align 4
  %3735 = load i32, i32* @x.5
  %3736 = load i32, i32* @y.6
  %3737 = sub i32 %3735, 1
  %3738 = mul i32 %3735, %3737
  %3739 = urem i32 %3738, 2
  %3740 = icmp eq i32 %3739, 0
  %3741 = icmp slt i32 %3736, 10
  %3742 = or i1 %3740, %3741
  br i1 %3742, label %originalBBpart2764, label %originalBB762alteredBB

originalBBpart2764:                               ; preds = %originalBB762
  br label %3743

; <label>:3743:                                   ; preds = %3875, %originalBBpart2764
  %3744 = load i32, i32* @x.5
  %3745 = load i32, i32* @y.6
  %3746 = sub i32 %3744, 1
  %3747 = mul i32 %3744, %3746
  %3748 = urem i32 %3747, 2
  %3749 = icmp eq i32 %3748, 0
  %3750 = icmp slt i32 %3745, 10
  %3751 = or i1 %3749, %3750
  br i1 %3751, label %originalBB766, label %originalBB766alteredBB

originalBB766:                                    ; preds = %originalBB766alteredBB, %3743
  %3752 = load i32, i32* %49, align 4
  %3753 = load i32, i32* %24, align 4
  %3754 = icmp slt i32 %3752, %3753
  %3755 = load i32, i32* @x.5
  %3756 = load i32, i32* @y.6
  %3757 = sub i32 %3755, 1
  %3758 = mul i32 %3755, %3757
  %3759 = urem i32 %3758, 2
  %3760 = icmp eq i32 %3759, 0
  %3761 = icmp slt i32 %3756, 10
  %3762 = or i1 %3760, %3761
  br i1 %3762, label %originalBBpart2768, label %originalBB766alteredBB

originalBBpart2768:                               ; preds = %originalBB766
  br i1 %3754, label %3763, label %3878

; <label>:3763:                                   ; preds = %originalBBpart2768
  %3764 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %3765 = load i32, i32* %49, align 4
  %3766 = sext i32 %3765 to i64
  %3767 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3764, i64 %3766
  %3768 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3767, i32 0, i32 14
  %3769 = load %struct.rtx_def*, %struct.rtx_def** %3768, align 8
  %3770 = icmp ne %struct.rtx_def* %3769, null
  br i1 %3770, label %3771, label %3858

; <label>:3771:                                   ; preds = %3763
  %3772 = load i32, i32* @x.5
  %3773 = load i32, i32* @y.6
  %3774 = sub i32 %3772, 1
  %3775 = mul i32 %3772, %3774
  %3776 = urem i32 %3775, 2
  %3777 = icmp eq i32 %3776, 0
  %3778 = icmp slt i32 %3773, 10
  %3779 = or i1 %3777, %3778
  br i1 %3779, label %originalBB770, label %originalBB770alteredBB

originalBB770:                                    ; preds = %originalBB770alteredBB, %3771
  %3780 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %3781 = load i32, i32* %49, align 4
  %3782 = sext i32 %3781 to i64
  %3783 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3780, i64 %3782
  %3784 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3783, i32 0, i32 14
  %3785 = load %struct.rtx_def*, %struct.rtx_def** %3784, align 8
  %3786 = bitcast %struct.rtx_def* %3785 to i32*
  %3787 = load i32, i32* %3786, align 8
  %3788 = lshr i32 %3787, 16
  %3789 = and i32 %3788, 255
  store i32 %3789, i32* %78, align 4
  %3790 = load i32, i32* %78, align 4
  %3791 = load i32, i32* %78, align 4
  %3792 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %3793 = load i32, i32* %49, align 4
  %3794 = sext i32 %3793 to i64
  %3795 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3792, i64 %3794
  %3796 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3795, i32 0, i32 13
  %3797 = load %struct.rtx_def*, %struct.rtx_def** %3796, align 8
  %3798 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3797, i32 0, i32 1
  %3799 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %3798, i64 0, i64 0
  %3800 = bitcast %union.rtunion_def* %3799 to %struct.rtx_def**
  %3801 = load %struct.rtx_def*, %struct.rtx_def** %3800, align 8
  %3802 = call %struct.rtx_def* @memory_address(i32 %3791, %struct.rtx_def* %3801)
  %3803 = call %struct.rtx_def* @gen_rtx_MEM(i32 %3790, %struct.rtx_def* %3802)
  store %struct.rtx_def* %3803, %struct.rtx_def** %79, align 8
  %3804 = load i32, i32* %78, align 4
  %3805 = icmp ne i32 %3804, 51
  %3806 = load i32, i32* @x.5
  %3807 = load i32, i32* @y.6
  %3808 = sub i32 %3806, 1
  %3809 = mul i32 %3806, %3808
  %3810 = urem i32 %3809, 2
  %3811 = icmp eq i32 %3810, 0
  %3812 = icmp slt i32 %3807, 10
  %3813 = or i1 %3811, %3812
  br i1 %3813, label %originalBBpart2780, label %originalBB770alteredBB

originalBBpart2780:                               ; preds = %originalBB770
  br i1 %3805, label %3814, label %3823

; <label>:3814:                                   ; preds = %originalBBpart2780
  %3815 = load %struct.rtx_def*, %struct.rtx_def** %79, align 8
  %3816 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %3817 = load i32, i32* %49, align 4
  %3818 = sext i32 %3817 to i64
  %3819 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3816, i64 %3818
  %3820 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3819, i32 0, i32 14
  %3821 = load %struct.rtx_def*, %struct.rtx_def** %3820, align 8
  %3822 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3815, %struct.rtx_def* %3821)
  br label %3841

; <label>:3823:                                   ; preds = %originalBBpart2780
  %3824 = load %struct.rtx_def*, %struct.rtx_def** %79, align 8
  %3825 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %3826 = load i32, i32* %49, align 4
  %3827 = sext i32 %3826 to i64
  %3828 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3825, i64 %3827
  %3829 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3828, i32 0, i32 14
  %3830 = load %struct.rtx_def*, %struct.rtx_def** %3829, align 8
  %3831 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %3830)
  %3832 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %3833 = load i32, i32* %49, align 4
  %3834 = sext i32 %3833 to i64
  %3835 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3832, i64 %3834
  %3836 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3835, i32 0, i32 11
  %3837 = getelementptr inbounds %struct.args_size, %struct.args_size* %3836, i32 0, i32 0
  %3838 = load i64, i64* %3837, align 8
  %3839 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %3838)
  %3840 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %3824, %struct.rtx_def* %3831, %struct.rtx_def* %3839)
  br label %3841

; <label>:3841:                                   ; preds = %3823, %3814
  %3842 = load i32, i32* @x.5
  %3843 = load i32, i32* @y.6
  %3844 = sub i32 %3842, 1
  %3845 = mul i32 %3842, %3844
  %3846 = urem i32 %3845, 2
  %3847 = icmp eq i32 %3846, 0
  %3848 = icmp slt i32 %3843, 10
  %3849 = or i1 %3847, %3848
  br i1 %3849, label %originalBB782, label %originalBB782alteredBB

originalBB782:                                    ; preds = %originalBB782alteredBB, %3841
  %3850 = load i32, i32* @x.5
  %3851 = load i32, i32* @y.6
  %3852 = sub i32 %3850, 1
  %3853 = mul i32 %3850, %3852
  %3854 = urem i32 %3853, 2
  %3855 = icmp eq i32 %3854, 0
  %3856 = icmp slt i32 %3851, 10
  %3857 = or i1 %3855, %3856
  br i1 %3857, label %originalBBpart2784, label %originalBB782alteredBB

originalBBpart2784:                               ; preds = %originalBB782
  br label %3858

; <label>:3858:                                   ; preds = %originalBBpart2784, %3763
  %3859 = load i32, i32* @x.5
  %3860 = load i32, i32* @y.6
  %3861 = sub i32 %3859, 1
  %3862 = mul i32 %3859, %3861
  %3863 = urem i32 %3862, 2
  %3864 = icmp eq i32 %3863, 0
  %3865 = icmp slt i32 %3860, 10
  %3866 = or i1 %3864, %3865
  br i1 %3866, label %originalBB786, label %originalBB786alteredBB

originalBB786:                                    ; preds = %originalBB786alteredBB, %3858
  %3867 = load i32, i32* @x.5
  %3868 = load i32, i32* @y.6
  %3869 = sub i32 %3867, 1
  %3870 = mul i32 %3867, %3869
  %3871 = urem i32 %3870, 2
  %3872 = icmp eq i32 %3871, 0
  %3873 = icmp slt i32 %3868, 10
  %3874 = or i1 %3872, %3873
  br i1 %3874, label %originalBBpart2788, label %originalBB786alteredBB

originalBBpart2788:                               ; preds = %originalBB786
  br label %3875

; <label>:3875:                                   ; preds = %originalBBpart2788
  %3876 = load i32, i32* %49, align 4
  %3877 = add nsw i32 %3876, 1
  store i32 %3877, i32* %49, align 4
  br label %3743

; <label>:3878:                                   ; preds = %originalBBpart2768
  %3879 = load i32, i32* @x.5
  %3880 = load i32, i32* @y.6
  %3881 = sub i32 %3879, 1
  %3882 = mul i32 %3879, %3881
  %3883 = urem i32 %3882, 2
  %3884 = icmp eq i32 %3883, 0
  %3885 = icmp slt i32 %3880, 10
  %3886 = or i1 %3884, %3885
  br i1 %3886, label %originalBB790, label %originalBB790alteredBB

originalBB790:                                    ; preds = %originalBB790alteredBB, %3878
  %3887 = load i32, i32* %40, align 4
  store i32 %3887, i32* @highest_outgoing_arg_in_use, align 4
  %3888 = load i8*, i8** %41, align 8
  store i8* %3888, i8** @stack_usage_map, align 8
  %3889 = load i32, i32* @x.5
  %3890 = load i32, i32* @y.6
  %3891 = sub i32 %3889, 1
  %3892 = mul i32 %3889, %3891
  %3893 = urem i32 %3892, 2
  %3894 = icmp eq i32 %3893, 0
  %3895 = icmp slt i32 %3890, 10
  %3896 = or i1 %3894, %3895
  br i1 %3896, label %originalBBpart2792, label %originalBB790alteredBB

originalBBpart2792:                               ; preds = %originalBB790
  br label %3897

; <label>:3897:                                   ; preds = %originalBBpart2792, %3699, %originalBBpart2756
  br label %3898

; <label>:3898:                                   ; preds = %3897, %3669
  %3899 = load i32, i32* %35, align 4
  %3900 = and i32 %3899, 8
  %3901 = icmp ne i32 %3900, 0
  br i1 %3901, label %3902, label %3910

; <label>:3902:                                   ; preds = %3898
  %3903 = load %struct.function*, %struct.function** @cfun, align 8
  %3904 = getelementptr inbounds %struct.function, %struct.function* %3903, i32 0, i32 20
  %3905 = load %struct.rtx_def*, %struct.rtx_def** %3904, align 8
  %3906 = icmp ne %struct.rtx_def* %3905, null
  br i1 %3906, label %3907, label %3910

; <label>:3907:                                   ; preds = %3902
  %3908 = load %struct.function*, %struct.function** @cfun, align 8
  %3909 = getelementptr inbounds %struct.function, %struct.function* %3908, i32 0, i32 22
  call void @emit_stack_save(i32 2, %struct.rtx_def** %3909, %struct.rtx_def* null)
  br label %3910

; <label>:3910:                                   ; preds = %3907, %3902, %3898
  store i32 0, i32* %49, align 4
  br label %3911

; <label>:3911:                                   ; preds = %3964, %3910
  %3912 = load i32, i32* @x.5
  %3913 = load i32, i32* @y.6
  %3914 = sub i32 %3912, 1
  %3915 = mul i32 %3912, %3914
  %3916 = urem i32 %3915, 2
  %3917 = icmp eq i32 %3916, 0
  %3918 = icmp slt i32 %3913, 10
  %3919 = or i1 %3917, %3918
  br i1 %3919, label %originalBB794, label %originalBB794alteredBB

originalBB794:                                    ; preds = %originalBB794alteredBB, %3911
  %3920 = load i32, i32* %49, align 4
  %3921 = load i32, i32* %24, align 4
  %3922 = icmp slt i32 %3920, %3921
  %3923 = load i32, i32* @x.5
  %3924 = load i32, i32* @y.6
  %3925 = sub i32 %3923, 1
  %3926 = mul i32 %3923, %3925
  %3927 = urem i32 %3926, 2
  %3928 = icmp eq i32 %3927, 0
  %3929 = icmp slt i32 %3924, 10
  %3930 = or i1 %3928, %3929
  br i1 %3930, label %originalBBpart2796, label %originalBB794alteredBB

originalBBpart2796:                               ; preds = %originalBB794
  br i1 %3922, label %3931, label %3967

; <label>:3931:                                   ; preds = %originalBBpart2796
  %3932 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %3933 = load i32, i32* %49, align 4
  %3934 = sext i32 %3933 to i64
  %3935 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3932, i64 %3934
  %3936 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3935, i32 0, i32 15
  %3937 = load %struct.rtx_def**, %struct.rtx_def*** %3936, align 8
  %3938 = icmp ne %struct.rtx_def** %3937, null
  br i1 %3938, label %3939, label %3963

; <label>:3939:                                   ; preds = %3931
  %3940 = load i32, i32* @x.5
  %3941 = load i32, i32* @y.6
  %3942 = sub i32 %3940, 1
  %3943 = mul i32 %3940, %3942
  %3944 = urem i32 %3943, 2
  %3945 = icmp eq i32 %3944, 0
  %3946 = icmp slt i32 %3941, 10
  %3947 = or i1 %3945, %3946
  br i1 %3947, label %originalBB798, label %originalBB798alteredBB

originalBB798:                                    ; preds = %originalBB798alteredBB, %3939
  %3948 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %3949 = load i32, i32* %49, align 4
  %3950 = sext i32 %3949 to i64
  %3951 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3948, i64 %3950
  %3952 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3951, i32 0, i32 15
  %3953 = load %struct.rtx_def**, %struct.rtx_def*** %3952, align 8
  %3954 = bitcast %struct.rtx_def** %3953 to i8*
  call void @free(i8* %3954) #5
  %3955 = load i32, i32* @x.5
  %3956 = load i32, i32* @y.6
  %3957 = sub i32 %3955, 1
  %3958 = mul i32 %3955, %3957
  %3959 = urem i32 %3958, 2
  %3960 = icmp eq i32 %3959, 0
  %3961 = icmp slt i32 %3956, 10
  %3962 = or i1 %3960, %3961
  br i1 %3962, label %originalBBpart2800, label %originalBB798alteredBB

originalBBpart2800:                               ; preds = %originalBB798
  br label %3963

; <label>:3963:                                   ; preds = %originalBBpart2800, %3931
  br label %3964

; <label>:3964:                                   ; preds = %3963
  %3965 = load i32, i32* %49, align 4
  %3966 = add nsw i32 %3965, 1
  store i32 %3966, i32* %49, align 4
  br label %3911

; <label>:3967:                                   ; preds = %originalBBpart2796
  %3968 = load i32, i32* @x.5
  %3969 = load i32, i32* @y.6
  %3970 = sub i32 %3968, 1
  %3971 = mul i32 %3968, %3970
  %3972 = urem i32 %3971, 2
  %3973 = icmp eq i32 %3972, 0
  %3974 = icmp slt i32 %3969, 10
  %3975 = or i1 %3973, %3974
  br i1 %3975, label %originalBB802, label %originalBB802alteredBB

originalBB802:                                    ; preds = %originalBB802alteredBB, %3967
  %3976 = load i32, i32* %18, align 4
  %3977 = icmp eq i32 %3976, 0
  %3978 = load i32, i32* @x.5
  %3979 = load i32, i32* @y.6
  %3980 = sub i32 %3978, 1
  %3981 = mul i32 %3978, %3980
  %3982 = urem i32 %3981, 2
  %3983 = icmp eq i32 %3982, 0
  %3984 = icmp slt i32 %3979, 10
  %3985 = or i1 %3983, %3984
  br i1 %3985, label %originalBBpart2804, label %originalBB802alteredBB

originalBBpart2804:                               ; preds = %originalBB802
  br i1 %3977, label %3986, label %3987

; <label>:3986:                                   ; preds = %originalBBpart2804
  call void @expand_end_target_temps()
  br label %3987

; <label>:3987:                                   ; preds = %3986, %originalBBpart2804
  %3988 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %3988, %struct.rtx_def** %63, align 8
  call void @end_sequence()
  %3989 = load i32, i32* %18, align 4
  %3990 = icmp eq i32 %3989, 0
  br i1 %3990, label %3991, label %4077

; <label>:3991:                                   ; preds = %3987
  %3992 = load i32, i32* @x.5
  %3993 = load i32, i32* @y.6
  %3994 = sub i32 %3992, 1
  %3995 = mul i32 %3992, %3994
  %3996 = urem i32 %3995, 2
  %3997 = icmp eq i32 %3996, 0
  %3998 = icmp slt i32 %3993, 10
  %3999 = or i1 %3997, %3998
  br i1 %3999, label %originalBB806, label %originalBB806alteredBB

originalBB806:                                    ; preds = %originalBB806alteredBB, %3991
  %4000 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  store %struct.rtx_def* %4000, %struct.rtx_def** %12, align 8
  %4001 = load i32, i32* %61, align 4
  %4002 = load %struct.function*, %struct.function** @cfun, align 8
  %4003 = getelementptr inbounds %struct.function, %struct.function* %4002, i32 0, i32 2
  %4004 = load %struct.expr_status*, %struct.expr_status** %4003, align 8
  %4005 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4004, i32 0, i32 0
  store i32 %4001, i32* %4005, align 8
  %4006 = load i32, i32* %62, align 4
  %4007 = load %struct.function*, %struct.function** @cfun, align 8
  %4008 = getelementptr inbounds %struct.function, %struct.function* %4007, i32 0, i32 2
  %4009 = load %struct.expr_status*, %struct.expr_status** %4008, align 8
  %4010 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4009, i32 0, i32 2
  store i32 %4006, i32* %4010, align 8
  store i32 0, i32* %49, align 4
  %4011 = load i32, i32* @x.5
  %4012 = load i32, i32* @y.6
  %4013 = sub i32 %4011, 1
  %4014 = mul i32 %4011, %4013
  %4015 = urem i32 %4014, 2
  %4016 = icmp eq i32 %4015, 0
  %4017 = icmp slt i32 %4012, 10
  %4018 = or i1 %4016, %4017
  br i1 %4018, label %originalBBpart2808, label %originalBB806alteredBB

originalBBpart2808:                               ; preds = %originalBB806
  br label %4019

; <label>:4019:                                   ; preds = %originalBBpart2824, %originalBBpart2808
  %4020 = load i32, i32* %49, align 4
  %4021 = load i32, i32* %24, align 4
  %4022 = icmp slt i32 %4020, %4021
  br i1 %4022, label %4023, label %4074

; <label>:4023:                                   ; preds = %4019
  %4024 = load i32, i32* @x.5
  %4025 = load i32, i32* @y.6
  %4026 = sub i32 %4024, 1
  %4027 = mul i32 %4024, %4026
  %4028 = urem i32 %4027, 2
  %4029 = icmp eq i32 %4028, 0
  %4030 = icmp slt i32 %4025, 10
  %4031 = or i1 %4029, %4030
  br i1 %4031, label %originalBB810, label %originalBB810alteredBB

originalBB810:                                    ; preds = %originalBB810alteredBB, %4023
  %4032 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4033 = load i32, i32* %49, align 4
  %4034 = sext i32 %4033 to i64
  %4035 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4032, i64 %4034
  %4036 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4035, i32 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %4036, align 8
  %4037 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4038 = load i32, i32* %49, align 4
  %4039 = sext i32 %4038 to i64
  %4040 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4037, i64 %4039
  %4041 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4040, i32 0, i32 15
  store %struct.rtx_def** null, %struct.rtx_def*** %4041, align 8
  %4042 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4043 = load i32, i32* %49, align 4
  %4044 = sext i32 %4043 to i64
  %4045 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4042, i64 %4044
  %4046 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4045, i32 0, i32 12
  store %struct.rtx_def* null, %struct.rtx_def** %4046, align 8
  %4047 = load i32, i32* @x.5
  %4048 = load i32, i32* @y.6
  %4049 = sub i32 %4047, 1
  %4050 = mul i32 %4047, %4049
  %4051 = urem i32 %4050, 2
  %4052 = icmp eq i32 %4051, 0
  %4053 = icmp slt i32 %4048, 10
  %4054 = or i1 %4052, %4053
  br i1 %4054, label %originalBBpart2812, label %originalBB810alteredBB

originalBBpart2812:                               ; preds = %originalBB810
  br label %4055

; <label>:4055:                                   ; preds = %originalBBpart2812
  %4056 = load i32, i32* @x.5
  %4057 = load i32, i32* @y.6
  %4058 = sub i32 %4056, 1
  %4059 = mul i32 %4056, %4058
  %4060 = urem i32 %4059, 2
  %4061 = icmp eq i32 %4060, 0
  %4062 = icmp slt i32 %4057, 10
  %4063 = or i1 %4061, %4062
  br i1 %4063, label %originalBB814, label %originalBB814alteredBB

originalBB814:                                    ; preds = %originalBB814alteredBB, %4055
  %4064 = load i32, i32* %49, align 4
  %4065 = add nsw i32 %4064, 1
  store i32 %4065, i32* %49, align 4
  %4066 = load i32, i32* @x.5
  %4067 = load i32, i32* @y.6
  %4068 = sub i32 %4066, 1
  %4069 = mul i32 %4066, %4068
  %4070 = urem i32 %4069, 2
  %4071 = icmp eq i32 %4070, 0
  %4072 = icmp slt i32 %4067, 10
  %4073 = or i1 %4071, %4072
  br i1 %4073, label %originalBBpart2824, label %originalBB814alteredBB

originalBBpart2824:                               ; preds = %originalBB814
  br label %4019

; <label>:4074:                                   ; preds = %4019
  %4075 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8
  %4076 = bitcast %struct.simple_bitmap_def* %4075 to i8*
  call void @free(i8* %4076) #5
  br label %4095

; <label>:4077:                                   ; preds = %3987
  %4078 = load i32, i32* @x.5
  %4079 = load i32, i32* @y.6
  %4080 = sub i32 %4078, 1
  %4081 = mul i32 %4078, %4080
  %4082 = urem i32 %4081, 2
  %4083 = icmp eq i32 %4082, 0
  %4084 = icmp slt i32 %4079, 10
  %4085 = or i1 %4083, %4084
  br i1 %4085, label %originalBB826, label %originalBB826alteredBB

originalBB826:                                    ; preds = %originalBB826alteredBB, %4077
  %4086 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  store %struct.rtx_def* %4086, %struct.rtx_def** %11, align 8
  %4087 = load i32, i32* @x.5
  %4088 = load i32, i32* @y.6
  %4089 = sub i32 %4087, 1
  %4090 = mul i32 %4087, %4089
  %4091 = urem i32 %4090, 2
  %4092 = icmp eq i32 %4091, 0
  %4093 = icmp slt i32 %4088, 10
  %4094 = or i1 %4092, %4093
  br i1 %4094, label %originalBBpart2828, label %originalBB826alteredBB

originalBBpart2828:                               ; preds = %originalBB826
  br label %4095

; <label>:4095:                                   ; preds = %originalBBpart2828, %4074
  %4096 = load i32, i32* @x.5
  %4097 = load i32, i32* @y.6
  %4098 = sub i32 %4096, 1
  %4099 = mul i32 %4096, %4098
  %4100 = urem i32 %4099, 2
  %4101 = icmp eq i32 %4100, 0
  %4102 = icmp slt i32 %4097, 10
  %4103 = or i1 %4101, %4102
  br i1 %4103, label %originalBB830, label %originalBB830alteredBB

originalBB830:                                    ; preds = %originalBB830alteredBB, %4095
  %4104 = load i32, i32* %60, align 4
  %4105 = icmp ne i32 %4104, 0
  %4106 = load i32, i32* @x.5
  %4107 = load i32, i32* @y.6
  %4108 = sub i32 %4106, 1
  %4109 = mul i32 %4106, %4108
  %4110 = urem i32 %4109, 2
  %4111 = icmp eq i32 %4110, 0
  %4112 = icmp slt i32 %4107, 10
  %4113 = or i1 %4111, %4112
  br i1 %4113, label %originalBBpart2832, label %originalBB830alteredBB

originalBBpart2832:                               ; preds = %originalBB830
  br i1 %4105, label %4114, label %4131

; <label>:4114:                                   ; preds = %originalBBpart2832
  %4115 = load i32, i32* @x.5
  %4116 = load i32, i32* @y.6
  %4117 = sub i32 %4115, 1
  %4118 = mul i32 %4115, %4117
  %4119 = urem i32 %4118, 2
  %4120 = icmp eq i32 %4119, 0
  %4121 = icmp slt i32 %4116, 10
  %4122 = or i1 %4120, %4121
  br i1 %4122, label %originalBB834, label %originalBB834alteredBB

originalBB834:                                    ; preds = %originalBB834alteredBB, %4114
  store %struct.rtx_def* null, %struct.rtx_def** %12, align 8
  %4123 = load i32, i32* @x.5
  %4124 = load i32, i32* @y.6
  %4125 = sub i32 %4123, 1
  %4126 = mul i32 %4123, %4125
  %4127 = urem i32 %4126, 2
  %4128 = icmp eq i32 %4127, 0
  %4129 = icmp slt i32 %4124, 10
  %4130 = or i1 %4128, %4129
  br i1 %4130, label %originalBBpart2836, label %originalBB834alteredBB

originalBBpart2836:                               ; preds = %originalBB834
  br label %4131

; <label>:4131:                                   ; preds = %originalBBpart2836, %originalBBpart2832
  br label %4132

; <label>:4132:                                   ; preds = %4131, %1521
  %4133 = load i32, i32* %18, align 4
  %4134 = add nsw i32 %4133, 1
  store i32 %4134, i32* %18, align 4
  br label %1496

; <label>:4135:                                   ; preds = %1496
  %4136 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  store %struct.rtx_def* %4136, %struct.rtx_def** %15, align 8
  br label %4137

; <label>:4137:                                   ; preds = %4191, %4135
  %4138 = load i32, i32* @x.5
  %4139 = load i32, i32* @y.6
  %4140 = sub i32 %4138, 1
  %4141 = mul i32 %4138, %4140
  %4142 = urem i32 %4141, 2
  %4143 = icmp eq i32 %4142, 0
  %4144 = icmp slt i32 %4139, 10
  %4145 = or i1 %4143, %4144
  br i1 %4145, label %originalBB838, label %originalBB838alteredBB

originalBB838:                                    ; preds = %originalBB838alteredBB, %4137
  %4146 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4147 = icmp ne %struct.rtx_def* %4146, null
  %4148 = load i32, i32* @x.5
  %4149 = load i32, i32* @y.6
  %4150 = sub i32 %4148, 1
  %4151 = mul i32 %4148, %4150
  %4152 = urem i32 %4151, 2
  %4153 = icmp eq i32 %4152, 0
  %4154 = icmp slt i32 %4149, 10
  %4155 = or i1 %4153, %4154
  br i1 %4155, label %originalBBpart2840, label %originalBB838alteredBB

originalBBpart2840:                               ; preds = %originalBB838
  br i1 %4147, label %4156, label %4197

; <label>:4156:                                   ; preds = %originalBBpart2840
  %4157 = load i32, i32* @x.5
  %4158 = load i32, i32* @y.6
  %4159 = sub i32 %4157, 1
  %4160 = mul i32 %4157, %4159
  %4161 = urem i32 %4160, 2
  %4162 = icmp eq i32 %4161, 0
  %4163 = icmp slt i32 %4158, 10
  %4164 = or i1 %4162, %4163
  br i1 %4164, label %originalBB842, label %originalBB842alteredBB

originalBB842:                                    ; preds = %originalBB842alteredBB, %4156
  %4165 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4166 = bitcast %struct.rtx_def* %4165 to i32*
  %4167 = load i32, i32* %4166, align 8
  %4168 = and i32 %4167, 65535
  %4169 = icmp eq i32 %4168, 34
  %4170 = load i32, i32* @x.5
  %4171 = load i32, i32* @y.6
  %4172 = sub i32 %4170, 1
  %4173 = mul i32 %4170, %4172
  %4174 = urem i32 %4173, 2
  %4175 = icmp eq i32 %4174, 0
  %4176 = icmp slt i32 %4171, 10
  %4177 = or i1 %4175, %4176
  br i1 %4177, label %originalBBpart2852, label %originalBB842alteredBB

originalBBpart2852:                               ; preds = %originalBB842
  br i1 %4169, label %4178, label %4190

; <label>:4178:                                   ; preds = %originalBBpart2852
  %4179 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4179, i32 0, i32 1
  %4181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %4180, i64 0, i64 3
  %4182 = bitcast %union.rtunion_def* %4181 to %struct.rtx_def**
  %4183 = load %struct.rtx_def*, %struct.rtx_def** %4182, align 8
  %4184 = bitcast %struct.rtx_def* %4183 to i32*
  %4185 = load i32, i32* %4184, align 8
  %4186 = and i32 %4185, 65535
  %4187 = icmp eq i32 %4186, 141
  br i1 %4187, label %4188, label %4190

; <label>:4188:                                   ; preds = %4178
  %4189 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  call void @replace_call_placeholder(%struct.rtx_def* %4189, i32 1)
  br label %4190

; <label>:4190:                                   ; preds = %4188, %4178, %originalBBpart2852
  br label %4191

; <label>:4191:                                   ; preds = %4190
  %4192 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4192, i32 0, i32 1
  %4194 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %4193, i64 0, i64 2
  %4195 = bitcast %union.rtunion_def* %4194 to %struct.rtx_def**
  %4196 = load %struct.rtx_def*, %struct.rtx_def** %4195, align 8
  store %struct.rtx_def* %4196, %struct.rtx_def** %15, align 8
  br label %4137

; <label>:4197:                                   ; preds = %originalBBpart2840
  %4198 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  store %struct.rtx_def* %4198, %struct.rtx_def** %15, align 8
  br label %4199

; <label>:4199:                                   ; preds = %4253, %4197
  %4200 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4201 = icmp ne %struct.rtx_def* %4200, null
  br i1 %4201, label %4202, label %4259

; <label>:4202:                                   ; preds = %4199
  %4203 = load i32, i32* @x.5
  %4204 = load i32, i32* @y.6
  %4205 = sub i32 %4203, 1
  %4206 = mul i32 %4203, %4205
  %4207 = urem i32 %4206, 2
  %4208 = icmp eq i32 %4207, 0
  %4209 = icmp slt i32 %4204, 10
  %4210 = or i1 %4208, %4209
  br i1 %4210, label %originalBB854, label %originalBB854alteredBB

originalBB854:                                    ; preds = %originalBB854alteredBB, %4202
  %4211 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4212 = bitcast %struct.rtx_def* %4211 to i32*
  %4213 = load i32, i32* %4212, align 8
  %4214 = and i32 %4213, 65535
  %4215 = icmp eq i32 %4214, 34
  %4216 = load i32, i32* @x.5
  %4217 = load i32, i32* @y.6
  %4218 = sub i32 %4216, 1
  %4219 = mul i32 %4216, %4218
  %4220 = urem i32 %4219, 2
  %4221 = icmp eq i32 %4220, 0
  %4222 = icmp slt i32 %4217, 10
  %4223 = or i1 %4221, %4222
  br i1 %4223, label %originalBBpart2863, label %originalBB854alteredBB

originalBBpart2863:                               ; preds = %originalBB854
  br i1 %4215, label %4224, label %4252

; <label>:4224:                                   ; preds = %originalBBpart2863
  %4225 = load i32, i32* @x.5
  %4226 = load i32, i32* @y.6
  %4227 = sub i32 %4225, 1
  %4228 = mul i32 %4225, %4227
  %4229 = urem i32 %4228, 2
  %4230 = icmp eq i32 %4229, 0
  %4231 = icmp slt i32 %4226, 10
  %4232 = or i1 %4230, %4231
  br i1 %4232, label %originalBB865, label %originalBB865alteredBB

originalBB865:                                    ; preds = %originalBB865alteredBB, %4224
  %4233 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4234 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4233, i32 0, i32 1
  %4235 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %4234, i64 0, i64 3
  %4236 = bitcast %union.rtunion_def* %4235 to %struct.rtx_def**
  %4237 = load %struct.rtx_def*, %struct.rtx_def** %4236, align 8
  %4238 = bitcast %struct.rtx_def* %4237 to i32*
  %4239 = load i32, i32* %4238, align 8
  %4240 = and i32 %4239, 65535
  %4241 = icmp eq i32 %4240, 141
  %4242 = load i32, i32* @x.5
  %4243 = load i32, i32* @y.6
  %4244 = sub i32 %4242, 1
  %4245 = mul i32 %4242, %4244
  %4246 = urem i32 %4245, 2
  %4247 = icmp eq i32 %4246, 0
  %4248 = icmp slt i32 %4243, 10
  %4249 = or i1 %4247, %4248
  br i1 %4249, label %originalBBpart2868, label %originalBB865alteredBB

originalBBpart2868:                               ; preds = %originalBB865
  br i1 %4241, label %4250, label %4252

; <label>:4250:                                   ; preds = %originalBBpart2868
  %4251 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  call void @replace_call_placeholder(%struct.rtx_def* %4251, i32 1)
  br label %4252

; <label>:4252:                                   ; preds = %4250, %originalBBpart2868, %originalBBpart2863
  br label %4253

; <label>:4253:                                   ; preds = %4252
  %4254 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4255 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4254, i32 0, i32 1
  %4256 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %4255, i64 0, i64 2
  %4257 = bitcast %union.rtunion_def* %4256 to %struct.rtx_def**
  %4258 = load %struct.rtx_def*, %struct.rtx_def** %4257, align 8
  store %struct.rtx_def* %4258, %struct.rtx_def** %15, align 8
  br label %4199

; <label>:4259:                                   ; preds = %4199
  %4260 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  store %struct.rtx_def* %4260, %struct.rtx_def** %15, align 8
  br label %4261

; <label>:4261:                                   ; preds = %4315, %4259
  %4262 = load i32, i32* @x.5
  %4263 = load i32, i32* @y.6
  %4264 = sub i32 %4262, 1
  %4265 = mul i32 %4262, %4264
  %4266 = urem i32 %4265, 2
  %4267 = icmp eq i32 %4266, 0
  %4268 = icmp slt i32 %4263, 10
  %4269 = or i1 %4267, %4268
  br i1 %4269, label %originalBB870, label %originalBB870alteredBB

originalBB870:                                    ; preds = %originalBB870alteredBB, %4261
  %4270 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4271 = icmp ne %struct.rtx_def* %4270, null
  %4272 = load i32, i32* @x.5
  %4273 = load i32, i32* @y.6
  %4274 = sub i32 %4272, 1
  %4275 = mul i32 %4272, %4274
  %4276 = urem i32 %4275, 2
  %4277 = icmp eq i32 %4276, 0
  %4278 = icmp slt i32 %4273, 10
  %4279 = or i1 %4277, %4278
  br i1 %4279, label %originalBBpart2872, label %originalBB870alteredBB

originalBBpart2872:                               ; preds = %originalBB870
  br i1 %4271, label %4280, label %4321

; <label>:4280:                                   ; preds = %originalBBpart2872
  %4281 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4282 = bitcast %struct.rtx_def* %4281 to i32*
  %4283 = load i32, i32* %4282, align 8
  %4284 = and i32 %4283, 65535
  %4285 = icmp eq i32 %4284, 34
  br i1 %4285, label %4286, label %4314

; <label>:4286:                                   ; preds = %4280
  %4287 = load i32, i32* @x.5
  %4288 = load i32, i32* @y.6
  %4289 = sub i32 %4287, 1
  %4290 = mul i32 %4287, %4289
  %4291 = urem i32 %4290, 2
  %4292 = icmp eq i32 %4291, 0
  %4293 = icmp slt i32 %4288, 10
  %4294 = or i1 %4292, %4293
  br i1 %4294, label %originalBB874, label %originalBB874alteredBB

originalBB874:                                    ; preds = %originalBB874alteredBB, %4286
  %4295 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4296 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4295, i32 0, i32 1
  %4297 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %4296, i64 0, i64 3
  %4298 = bitcast %union.rtunion_def* %4297 to %struct.rtx_def**
  %4299 = load %struct.rtx_def*, %struct.rtx_def** %4298, align 8
  %4300 = bitcast %struct.rtx_def* %4299 to i32*
  %4301 = load i32, i32* %4300, align 8
  %4302 = and i32 %4301, 65535
  %4303 = icmp eq i32 %4302, 141
  %4304 = load i32, i32* @x.5
  %4305 = load i32, i32* @y.6
  %4306 = sub i32 %4304, 1
  %4307 = mul i32 %4304, %4306
  %4308 = urem i32 %4307, 2
  %4309 = icmp eq i32 %4308, 0
  %4310 = icmp slt i32 %4305, 10
  %4311 = or i1 %4309, %4310
  br i1 %4311, label %originalBBpart2881, label %originalBB874alteredBB

originalBBpart2881:                               ; preds = %originalBB874
  br i1 %4303, label %4312, label %4314

; <label>:4312:                                   ; preds = %originalBBpart2881
  %4313 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  call void @replace_call_placeholder(%struct.rtx_def* %4313, i32 1)
  br label %4314

; <label>:4314:                                   ; preds = %4312, %originalBBpart2881, %4280
  br label %4315

; <label>:4315:                                   ; preds = %4314
  %4316 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4317 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4316, i32 0, i32 1
  %4318 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %4317, i64 0, i64 2
  %4319 = bitcast %union.rtunion_def* %4318 to %struct.rtx_def**
  %4320 = load %struct.rtx_def*, %struct.rtx_def** %4319, align 8
  store %struct.rtx_def* %4320, %struct.rtx_def** %15, align 8
  br label %4261

; <label>:4321:                                   ; preds = %originalBBpart2872
  %4322 = load i32, i32* @x.5
  %4323 = load i32, i32* @y.6
  %4324 = sub i32 %4322, 1
  %4325 = mul i32 %4322, %4324
  %4326 = urem i32 %4325, 2
  %4327 = icmp eq i32 %4326, 0
  %4328 = icmp slt i32 %4323, 10
  %4329 = or i1 %4327, %4328
  br i1 %4329, label %originalBB883, label %originalBB883alteredBB

originalBB883:                                    ; preds = %originalBB883alteredBB, %4321
  %4330 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %4331 = icmp ne %struct.rtx_def* %4330, null
  %4332 = load i32, i32* @x.5
  %4333 = load i32, i32* @y.6
  %4334 = sub i32 %4332, 1
  %4335 = mul i32 %4332, %4334
  %4336 = urem i32 %4335, 2
  %4337 = icmp eq i32 %4336, 0
  %4338 = icmp slt i32 %4333, 10
  %4339 = or i1 %4337, %4338
  br i1 %4339, label %originalBBpart2885, label %originalBB883alteredBB

originalBBpart2885:                               ; preds = %originalBB883
  br i1 %4331, label %4343, label %4340

; <label>:4340:                                   ; preds = %originalBBpart2885
  %4341 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %4342 = icmp ne %struct.rtx_def* %4341, null
  br i1 %4342, label %4343, label %4379

; <label>:4343:                                   ; preds = %4340, %originalBBpart2885
  %4344 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %4345 = icmp ne %struct.rtx_def* %4344, null
  br i1 %4345, label %4346, label %4354

; <label>:4346:                                   ; preds = %4343
  %4347 = load %struct.function*, %struct.function** @cfun, align 8
  %4348 = getelementptr inbounds %struct.function, %struct.function* %4347, i32 0, i32 28
  %4349 = load %struct.rtx_def*, %struct.rtx_def** %4348, align 8
  %4350 = bitcast %struct.rtx_def* %4349 to i32*
  %4351 = load i32, i32* %4350, align 8
  %4352 = and i32 %4351, -268435457
  %4353 = or i32 %4352, 268435456
  store i32 %4353, i32* %4350, align 8
  br label %4354

; <label>:4354:                                   ; preds = %4346, %4343
  %4355 = load i32, i32* @x.5
  %4356 = load i32, i32* @y.6
  %4357 = sub i32 %4355, 1
  %4358 = mul i32 %4355, %4357
  %4359 = urem i32 %4358, 2
  %4360 = icmp eq i32 %4359, 0
  %4361 = icmp slt i32 %4356, 10
  %4362 = or i1 %4360, %4361
  br i1 %4362, label %originalBB887, label %originalBB887alteredBB

originalBB887:                                    ; preds = %originalBB887alteredBB, %4354
  %4363 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %4364 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %4365 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %4366 = load %struct.function*, %struct.function** @cfun, align 8
  %4367 = getelementptr inbounds %struct.function, %struct.function* %4366, i32 0, i32 28
  %4368 = load %struct.rtx_def*, %struct.rtx_def** %4367, align 8
  %4369 = call %struct.rtx_def* @gen_rtx_fmt_uuuu(i32 141, i32 0, %struct.rtx_def* %4363, %struct.rtx_def* %4364, %struct.rtx_def* %4365, %struct.rtx_def* %4368)
  %4370 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %4369)
  %4371 = load i32, i32* @x.5
  %4372 = load i32, i32* @y.6
  %4373 = sub i32 %4371, 1
  %4374 = mul i32 %4371, %4373
  %4375 = urem i32 %4374, 2
  %4376 = icmp eq i32 %4375, 0
  %4377 = icmp slt i32 %4372, 10
  %4378 = or i1 %4376, %4377
  br i1 %4378, label %originalBBpart2889, label %originalBB887alteredBB

originalBBpart2889:                               ; preds = %originalBB887
  br label %4398

; <label>:4379:                                   ; preds = %4340
  %4380 = load i32, i32* @x.5
  %4381 = load i32, i32* @y.6
  %4382 = sub i32 %4380, 1
  %4383 = mul i32 %4380, %4382
  %4384 = urem i32 %4383, 2
  %4385 = icmp eq i32 %4384, 0
  %4386 = icmp slt i32 %4381, 10
  %4387 = or i1 %4385, %4386
  br i1 %4387, label %originalBB891, label %originalBB891alteredBB

originalBB891:                                    ; preds = %originalBB891alteredBB, %4379
  %4388 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %4389 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %4388)
  %4390 = load i32, i32* @x.5
  %4391 = load i32, i32* @y.6
  %4392 = sub i32 %4390, 1
  %4393 = mul i32 %4390, %4392
  %4394 = urem i32 %4393, 2
  %4395 = icmp eq i32 %4394, 0
  %4396 = icmp slt i32 %4391, 10
  %4397 = or i1 %4395, %4396
  br i1 %4397, label %originalBBpart2893, label %originalBB891alteredBB

originalBBpart2893:                               ; preds = %originalBB891
  br label %4398

; <label>:4398:                                   ; preds = %originalBBpart2893, %originalBBpart2889
  %4399 = load i32, i32* @expand_call.currently_expanding_call, align 4
  %4400 = add nsw i32 %4399, -1
  store i32 %4400, i32* @expand_call.currently_expanding_call, align 4
  %4401 = load i32, i32* %35, align 4
  %4402 = and i32 %4401, 1024
  %4403 = icmp ne i32 %4402, 0
  br i1 %4403, label %4404, label %4411

; <label>:4404:                                   ; preds = %4398
  call void @clear_pending_stack_adjust()
  %4405 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %4406 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 49, i32 0, %struct.rtx_def* %4405)
  %4407 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %4406)
  %4408 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16
  %4409 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %4410 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %4408, %struct.rtx_def* %4409)
  call void @save_stack_pointer()
  br label %4411

; <label>:4411:                                   ; preds = %4404, %4398
  %4412 = load i32, i32* @x.5
  %4413 = load i32, i32* @y.6
  %4414 = sub i32 %4412, 1
  %4415 = mul i32 %4412, %4414
  %4416 = urem i32 %4415, 2
  %4417 = icmp eq i32 %4416, 0
  %4418 = icmp slt i32 %4413, 10
  %4419 = or i1 %4417, %4418
  br i1 %4419, label %originalBB895, label %originalBB895alteredBB

originalBB895:                                    ; preds = %originalBB895alteredBB, %4411
  %4420 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %4420, %struct.rtx_def** %4, align 8
  %4421 = load i32, i32* @x.5
  %4422 = load i32, i32* @y.6
  %4423 = sub i32 %4421, 1
  %4424 = mul i32 %4421, %4423
  %4425 = urem i32 %4424, 2
  %4426 = icmp eq i32 %4425, 0
  %4427 = icmp slt i32 %4422, 10
  %4428 = or i1 %4426, %4427
  br i1 %4428, label %originalBBpart2897, label %originalBB895alteredBB

originalBBpart2897:                               ; preds = %originalBB895
  br label %4429

; <label>:4429:                                   ; preds = %originalBBpart2897, %originalBBpart2112
  %4430 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  ret %struct.rtx_def* %4430

originalBBalteredBB:                              ; preds = %originalBB, %158
  %4431 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4432 = bitcast %union.tree_node* %4431 to %struct.tree_common*
  %4433 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4432, i32 0, i32 2
  %4434 = load i32, i32* %4433, align 8
  %_ = sub i32 %4434, 10
  %gen = mul i32 %_, 10
  %_1 = sub i32 %4434, 10
  %gen2 = mul i32 %_1, 10
  %_3 = sub i32 %4434, 10
  %gen4 = mul i32 %_3, 10
  %_5 = sub i32 0, %4434
  %gen6 = add i32 %_5, 10
  %4435 = lshr i32 %4434, 10
  %_7 = shl i32 %4435, 1
  %_8 = sub i32 %4435, 1
  %gen9 = mul i32 %_8, 1
  %_10 = shl i32 %4435, 1
  %_11 = sub i32 %4435, 1
  %gen12 = mul i32 %_11, 1
  %4436 = and i32 %4435, 1
  %4437 = icmp ne i32 %4436, 0
  br label %originalBB

originalBB13alteredBB:                            ; preds = %originalBB13, %198
  %4438 = load i32, i32* @optimize, align 4
  %4439 = icmp sgt i32 %4438, 0
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %217
  %4440 = load %union.tree_node*, %union.tree_node** %14, align 8
  call void (%union.tree_node*, i8*, ...) @warning_with_decl(%union.tree_node* %4440, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0))
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %235
  %4441 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4442 = call i32 @mark_addressable(%union.tree_node* %4441)
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %271
  store i32 0, i32* %33, align 4
  %4443 = load i32, i32* %33, align 4
  %4444 = icmp sgt i32 %4443, 0
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %290
  %4445 = load i32, i32* @target_flags, align 4
  %_30 = shl i32 %4445, 2048
  %_31 = sub i32 0, %4445
  %gen32 = add i32 %_31, 2048
  %_33 = shl i32 %4445, 2048
  %_34 = sub i32 %4445, 2048
  %gen35 = mul i32 %_34, 2048
  %_36 = sub i32 0, %4445
  %gen37 = add i32 %_36, 2048
  %4446 = and i32 %4445, 2048
  %4447 = icmp ne i32 %4446, 0
  br label %originalBB29

originalBB41alteredBB:                            ; preds = %originalBB41, %318
  %4448 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4449 = bitcast %union.tree_node* %4448 to %struct.tree_common*
  %4450 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4449, i32 0, i32 1
  %4451 = load %union.tree_node*, %union.tree_node** %4450, align 8
  %4452 = bitcast %union.tree_node* %4451 to %struct.tree_common*
  %4453 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4452, i32 0, i32 2
  %4454 = load i32, i32* %4453, align 8
  %_42 = sub i32 %4454, 255
  %gen43 = mul i32 %_42, 255
  %_44 = shl i32 %4454, 255
  %_45 = shl i32 %4454, 255
  %_46 = sub i32 0, %4454
  %gen47 = add i32 %_46, 255
  %4455 = and i32 %4454, 255
  %4456 = icmp eq i32 %4455, 18
  br label %originalBB41

originalBB51alteredBB:                            ; preds = %originalBB51, %354
  %4457 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4458 = bitcast %union.tree_node* %4457 to %struct.tree_common*
  %4459 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4458, i32 0, i32 1
  %4460 = load %union.tree_node*, %union.tree_node** %4459, align 8
  %4461 = bitcast %union.tree_node* %4460 to %struct.tree_common*
  %4462 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4461, i32 0, i32 2
  %4463 = load i32, i32* %4462, align 8
  %_52 = sub i32 %4463, 255
  %gen53 = mul i32 %_52, 255
  %_54 = sub i32 0, %4463
  %gen55 = add i32 %_54, 255
  %_56 = sub i32 0, %4463
  %gen57 = add i32 %_56, 255
  %_58 = sub i32 %4463, 255
  %gen59 = mul i32 %_58, 255
  %_60 = shl i32 %4463, 255
  %_61 = sub i32 %4463, 255
  %gen62 = mul i32 %_61, 255
  %4464 = and i32 %4463, 255
  %4465 = icmp eq i32 %4464, 21
  br label %originalBB51

originalBB66alteredBB:                            ; preds = %originalBB66, %380
  %4466 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4467 = bitcast %union.tree_node* %4466 to %struct.tree_common*
  %4468 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4467, i32 0, i32 1
  %4469 = load %union.tree_node*, %union.tree_node** %4468, align 8
  %4470 = bitcast %union.tree_node* %4469 to %struct.tree_common*
  %4471 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4470, i32 0, i32 2
  %4472 = load i32, i32* %4471, align 8
  %_67 = sub i32 0, %4472
  %gen68 = add i32 %_67, 255
  %_69 = sub i32 0, %4472
  %gen70 = add i32 %_69, 255
  %_71 = sub i32 %4472, 255
  %gen72 = mul i32 %_71, 255
  %_73 = sub i32 0, %4472
  %gen74 = add i32 %_73, 255
  %_75 = sub i32 %4472, 255
  %gen76 = mul i32 %_75, 255
  %_77 = sub i32 0, %4472
  %gen78 = add i32 %_77, 255
  %_79 = shl i32 %4472, 255
  %_80 = sub i32 0, %4472
  %gen81 = add i32 %_80, 255
  %_82 = shl i32 %4472, 255
  %_83 = sub i32 %4472, 255
  %gen84 = mul i32 %_83, 255
  %4473 = and i32 %4472, 255
  %4474 = icmp eq i32 %4473, 22
  br label %originalBB66

originalBB88alteredBB:                            ; preds = %originalBB88, %406
  %4475 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4476 = bitcast %union.tree_node* %4475 to %struct.tree_common*
  %4477 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4476, i32 0, i32 1
  %4478 = load %union.tree_node*, %union.tree_node** %4477, align 8
  %4479 = bitcast %union.tree_node* %4478 to %struct.tree_common*
  %4480 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4479, i32 0, i32 2
  %4481 = load i32, i32* %4480, align 8
  %_89 = sub i32 0, %4481
  %gen90 = add i32 %_89, 255
  %4482 = and i32 %4481, 255
  %4483 = icmp eq i32 %4482, 19
  br label %originalBB88

originalBB94alteredBB:                            ; preds = %originalBB94, %432
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0))
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %449
  %4484 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4485 = call i32 @aggregate_value_p(%union.tree_node* %4484)
  %4486 = icmp ne i32 %4485, 0
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %485
  %4487 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %4488 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4487, i32 0, i32 1
  %4489 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %4488, i64 0, i64 0
  %4490 = bitcast %union.rtunion_def* %4489 to %struct.rtx_def**
  %4491 = load %struct.rtx_def*, %struct.rtx_def** %4490, align 8
  store %struct.rtx_def* %4491, %struct.rtx_def** %20, align 8
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %520
  %4492 = load i32, i32* %36, align 4
  %4493 = icmp ne i32 %4492, 0
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %552
  %4494 = load %struct.rtx_def*, %struct.rtx_def** %53, align 8
  store %struct.rtx_def* %4494, %struct.rtx_def** %4, align 8
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %595
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 2299, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_call, i32 0, i32 0)) #8
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %612
  %4495 = load %union.tree_node*, %union.tree_node** %13, align 8
  %4496 = bitcast %union.tree_node* %4495 to %struct.tree_common*
  %4497 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4496, i32 0, i32 1
  %4498 = load %union.tree_node*, %union.tree_node** %4497, align 8
  store %union.tree_node* %4498, %union.tree_node** %13, align 8
  %4499 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4500 = load i32, i32* %35, align 4
  %4501 = call i32 @special_function_p(%union.tree_node* %4499, i32 %4500)
  %4502 = load i32, i32* %35, align 4
  %_119 = sub i32 0, %4502
  %gen120 = add i32 %_119, %4501
  %_121 = sub i32 %4502, %4501
  %gen122 = mul i32 %_121, %4501
  %_123 = sub i32 0, %4502
  %gen124 = add i32 %_123, %4501
  %_125 = shl i32 %4502, %4501
  %_126 = shl i32 %4502, %4501
  %_127 = shl i32 %4502, %4501
  %_128 = sub i32 %4502, %4501
  %gen129 = mul i32 %_128, %4501
  %4503 = or i32 %4502, %4501
  store i32 %4503, i32* %35, align 4
  %4504 = load i32, i32* %35, align 4
  %_130 = sub i32 0, %4504
  %gen131 = add i32 %_130, 8
  %_132 = sub i32 0, %4504
  %gen133 = add i32 %_132, 8
  %_134 = sub i32 %4504, 8
  %gen135 = mul i32 %_134, 8
  %_136 = sub i32 %4504, 8
  %gen137 = mul i32 %_136, 8
  %_138 = sub i32 %4504, 8
  %gen139 = mul i32 %_138, 8
  %_140 = shl i32 %4504, 8
  %_141 = sub i32 %4504, 8
  %gen142 = mul i32 %_141, 8
  %_143 = sub i32 %4504, 8
  %gen144 = mul i32 %_143, 8
  %4505 = and i32 %4504, 8
  %4506 = icmp ne i32 %4505, 0
  br label %originalBB118

originalBB148alteredBB:                           ; preds = %originalBB148, %641
  %4507 = load %struct.function*, %struct.function** @cfun, align 8
  %4508 = getelementptr inbounds %struct.function, %struct.function* %4507, i32 0, i32 56
  %4509 = bitcast i24* %4508 to i32*
  %4510 = load i32, i32* %4509, align 8
  %_149 = shl i32 %4510, -65
  %_150 = shl i32 %4510, -65
  %4511 = and i32 %4510, -65
  %_151 = sub i32 0, %4511
  %gen152 = add i32 %_151, 64
  %_153 = sub i32 %4511, 64
  %gen154 = mul i32 %_153, 64
  %4512 = or i32 %4511, 64
  store i32 %4512, i32* %4509, align 8
  br label %originalBB148

originalBB158alteredBB:                           ; preds = %originalBB158, %680
  %4513 = load i32, i32* @stack_arg_under_construction, align 4
  %4514 = icmp ne i32 %4513, 0
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %706
  %4515 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %724
  store %struct.rtx_def* %725, %struct.rtx_def** %54, align 8
  %4516 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16
  %4517 = load %union.tree_node*, %union.tree_node** %13, align 8
  %4518 = bitcast %union.tree_node* %4517 to %struct.tree_common*
  %4519 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4518, i32 0, i32 1
  %4520 = load %union.tree_node*, %union.tree_node** %4519, align 8
  %4521 = call %union.tree_node* @build_pointer_type(%union.tree_node* %4520)
  %4522 = load %struct.rtx_def*, %struct.rtx_def** %54, align 8
  %4523 = call %union.tree_node* @make_tree(%union.tree_node* %4521, %struct.rtx_def* %4522)
  %4524 = load %union.tree_node*, %union.tree_node** %8, align 8
  %4525 = call %union.tree_node* @tree_cons(%union.tree_node* %4516, %union.tree_node* %4523, %union.tree_node* %4524)
  store %union.tree_node* %4525, %union.tree_node** %8, align 8
  store i32 1, i32* %21, align 4
  br label %originalBB166

originalBB170alteredBB:                           ; preds = %originalBB170, %757
  %4526 = load i32, i32* %24, align 4
  %_171 = shl i32 %4526, 1
  %_172 = sub i32 %4526, 1
  %gen173 = mul i32 %_172, 1
  %_174 = sub i32 %4526, 1
  %gen175 = mul i32 %_174, 1
  %_176 = sub i32 %4526, 1
  %gen177 = mul i32 %_176, 1
  %_178 = shl i32 %4526, 1
  %4527 = add nsw i32 %4526, 1
  store i32 %4527, i32* %24, align 4
  br label %originalBB170

originalBB182alteredBB:                           ; preds = %originalBB182, %781
  %4528 = load i32, i32* %24, align 4
  store i32 %4528, i32* %25, align 4
  %4529 = load %union.tree_node*, %union.tree_node** %13, align 8
  call void @init_cumulative_args(%struct.ix86_args* %30, %union.tree_node* %4529, %struct.rtx_def* null)
  %4530 = load i32, i32* %24, align 4
  %4531 = sext i32 %4530 to i64
  %_183 = sub i64 %4531, 168
  %gen184 = mul i64 %_183, 168
  %4532 = mul i64 %4531, 168
  %4533 = alloca i8, i64 %4532, align 16
  %4534 = bitcast i8* %4533 to %struct.arg_data*
  store %struct.arg_data* %4534, %struct.arg_data** %26, align 8
  %4535 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4536 = bitcast %struct.arg_data* %4535 to i8*
  %4537 = load i32, i32* %24, align 4
  %4538 = sext i32 %4537 to i64
  %_185 = shl i64 %4538, 168
  %_186 = sub i64 %4538, 168
  %gen187 = mul i64 %_186, 168
  %_188 = sub i64 %4538, 168
  %gen189 = mul i64 %_188, 168
  %_190 = sub i64 0, %4538
  %gen191 = add i64 %_190, 168
  %4539 = mul i64 %4538, 168
  call void @llvm.memset.p0i8.i64(i8* %4536, i8 0, i64 %4539, i32 1, i1 false)
  %4540 = load i32, i32* %24, align 4
  %4541 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4542 = load i32, i32* %25, align 4
  %4543 = load %union.tree_node*, %union.tree_node** %8, align 8
  %4544 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4545 = load i32, i32* %33, align 4
  call void @initialize_argument_information(i32 %4540, %struct.arg_data* %4541, %struct.args_size* %27, i32 %4542, %union.tree_node* %4543, %union.tree_node* %4544, %struct.ix86_args* %30, i32 %4545, %struct.rtx_def** %43, i32* %44, i32* %32, i32* %35)
  %4546 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 1
  %4547 = load %union.tree_node*, %union.tree_node** %4546, align 8
  %4548 = icmp ne %union.tree_node* %4547, null
  br label %originalBB182

originalBB195alteredBB:                           ; preds = %originalBB195, %843
  %4549 = load i32, i32* @target_flags, align 4
  %_196 = shl i32 %4549, 4096
  %_197 = sub i32 %4549, 4096
  %gen198 = mul i32 %_197, 4096
  %_199 = sub i32 %4549, 4096
  %gen200 = mul i32 %_199, 4096
  %_201 = sub i32 %4549, 4096
  %gen202 = mul i32 %_201, 4096
  %_203 = sub i32 0, %4549
  %gen204 = add i32 %_203, 4096
  %_205 = sub i32 %4549, 4096
  %gen206 = mul i32 %_205, 4096
  %_207 = sub i32 %4549, 4096
  %gen208 = mul i32 %_207, 4096
  %_209 = sub i32 %4549, 4096
  %gen210 = mul i32 %_209, 4096
  %4550 = and i32 %4549, 4096
  %4551 = icmp ne i32 %4550, 0
  br label %originalBB195

originalBB214alteredBB:                           ; preds = %originalBB214, %902
  %4552 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4553 = bitcast %union.tree_node* %4552 to %struct.tree_exp*
  %4554 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %4553, i32 0, i32 2
  %4555 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %4554, i64 0, i64 0
  %4556 = load %union.tree_node*, %union.tree_node** %4555, align 8
  %4557 = bitcast %union.tree_node* %4556 to %struct.tree_exp*
  %4558 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %4557, i32 0, i32 2
  %4559 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %4558, i64 0, i64 0
  %4560 = load %union.tree_node*, %union.tree_node** %4559, align 8
  %4561 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %4562 = icmp ne %union.tree_node* %4560, %4561
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %930
  store i32 0, i32* %17, align 4
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %953
  %4563 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4564 = icmp eq %union.tree_node* %4563, null
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %976
  %4565 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4566 = bitcast %union.tree_node* %4565 to %struct.tree_common*
  %4567 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4566, i32 0, i32 2
  %4568 = load i32, i32* %4567, align 8
  %_227 = shl i32 %4568, 11
  %_228 = shl i32 %4568, 11
  %_229 = shl i32 %4568, 11
  %_230 = sub i32 0, %4568
  %gen231 = add i32 %_230, 11
  %_232 = sub i32 %4568, 11
  %gen233 = mul i32 %_232, 11
  %4569 = lshr i32 %4568, 11
  %_234 = sub i32 0, %4569
  %gen235 = add i32 %_234, 1
  %_236 = sub i32 0, %4569
  %gen237 = add i32 %_236, 1
  %_238 = shl i32 %4569, 1
  %_239 = shl i32 %4569, 1
  %_240 = shl i32 %4569, 1
  %_241 = sub i32 0, %4569
  %gen242 = add i32 %_241, 1
  %_243 = sub i32 %4569, 1
  %gen244 = mul i32 %_243, 1
  %_245 = sub i32 %4569, 1
  %gen246 = mul i32 %_245, 1
  %4570 = and i32 %4569, 1
  %4571 = icmp ne i32 %4570, 0
  br label %originalBB226

originalBB250alteredBB:                           ; preds = %originalBB250, %1000
  %4572 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4573 = icmp ne %union.tree_node* %4572, null
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1034
  %4574 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4575 = bitcast %union.tree_node* %4574 to %struct.tree_common*
  %4576 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4575, i32 0, i32 1
  %4577 = load %union.tree_node*, %union.tree_node** %4576, align 8
  %4578 = bitcast %union.tree_node* %4577 to %struct.tree_common*
  %4579 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4578, i32 0, i32 1
  %4580 = load %union.tree_node*, %union.tree_node** %4579, align 8
  %4581 = bitcast %union.tree_node* %4580 to %struct.tree_type*
  %4582 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %4581, i32 0, i32 6
  %4583 = load i32, i32* %4582, align 4
  %_255 = sub i32 0, %4583
  %gen256 = add i32 %_255, 9
  %4584 = lshr i32 %4583, 9
  %_257 = sub i32 0, %4584
  %gen258 = add i32 %_257, 127
  %_259 = sub i32 0, %4584
  %gen260 = add i32 %_259, 127
  %_261 = sub i32 %4584, 127
  %gen262 = mul i32 %_261, 127
  %4585 = and i32 %4584, 127
  %4586 = sext i32 %4585 to i64
  %4587 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i64 0, i64 %4586
  %4588 = load i32, i32* %4587, align 4
  %4589 = icmp eq i32 %4588, 2
  br label %originalBB254

originalBB266alteredBB:                           ; preds = %originalBB266, %1166
  %4590 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4591 = load %union.tree_node*, %union.tree_node** %13, align 8
  %4592 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 0
  %4593 = load i64, i64* %4592, align 8
  %4594 = trunc i64 %4593 to i32
  %4595 = call i32 @ix86_return_pops_args(%union.tree_node* %4590, %union.tree_node* %4591, i32 %4594)
  %4596 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %4597 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %4598 = bitcast %union.tree_node* %4597 to %struct.tree_common*
  %4599 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4598, i32 0, i32 1
  %4600 = load %union.tree_node*, %union.tree_node** %4599, align 8
  %4601 = load %struct.function*, %struct.function** @cfun, align 8
  %4602 = getelementptr inbounds %struct.function, %struct.function* %4601, i32 0, i32 9
  %4603 = load i32, i32* %4602, align 4
  %4604 = call i32 @ix86_return_pops_args(%union.tree_node* %4596, %union.tree_node* %4600, i32 %4603)
  %4605 = icmp ne i32 %4595, %4604
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %1286
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %1311
  br label %originalBB274

originalBB278alteredBB:                           ; preds = %originalBB278, %1328
  %4606 = load i32, i32* %17, align 4
  %4607 = icmp ne i32 %4606, 0
  br label %originalBB278

originalBB282alteredBB:                           ; preds = %originalBB282, %1365
  store i32 0, i32* %17, align 4
  store i32 0, i32* %16, align 4
  br label %originalBB282

originalBB286alteredBB:                           ; preds = %originalBB286, %1384
  br label %originalBB286

originalBB291alteredBB:                           ; preds = %originalBB291, %1412
  %4608 = load i32, i32* @profile_arc_flag, align 4
  %4609 = icmp ne i32 %4608, 0
  br label %originalBB291

originalBB295alteredBB:                           ; preds = %originalBB295, %1435
  %4610 = load i32, i32* @target_flags, align 4
  %_296 = shl i32 %4610, 33554432
  %_297 = shl i32 %4610, 33554432
  %4611 = and i32 %4610, 33554432
  %4612 = icmp ne i32 %4611, 0
  %4613 = select i1 %4612, i32 5, i32 4
  %4614 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %4613, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0))
  call void (%struct.rtx_def*, i32, i32, i32, ...) @emit_library_call(%struct.rtx_def* %4614, i32 7, i32 0, i32 0)
  br label %originalBB295

originalBB301alteredBB:                           ; preds = %originalBB301, %1464
  %4615 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4616 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %4617 = icmp ne %union.tree_node* %4615, %4616
  br label %originalBB301

originalBB305alteredBB:                           ; preds = %originalBB305, %1502
  %4618 = load i32, i32* %16, align 4
  %4619 = icmp ne i32 %4618, 0
  br label %originalBB305

originalBB309alteredBB:                           ; preds = %originalBB309, %1522
  call void @emit_queue()
  %4620 = load %struct.function*, %struct.function** @cfun, align 8
  %4621 = getelementptr inbounds %struct.function, %struct.function* %4620, i32 0, i32 2
  %4622 = load %struct.expr_status*, %struct.expr_status** %4621, align 8
  %4623 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4622, i32 0, i32 0
  %4624 = load i32, i32* %4623, align 8
  store i32 %4624, i32* %61, align 4
  %4625 = load %struct.function*, %struct.function** @cfun, align 8
  %4626 = getelementptr inbounds %struct.function, %struct.function* %4625, i32 0, i32 2
  %4627 = load %struct.expr_status*, %struct.expr_status** %4626, align 8
  %4628 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4627, i32 0, i32 2
  %4629 = load i32, i32* %4628, align 8
  store i32 %4629, i32* %62, align 4
  br label %originalBB309

originalBB313alteredBB:                           ; preds = %originalBB313, %1549
  %4630 = load i32, i32* %18, align 4
  %4631 = icmp ne i32 %4630, 0
  br label %originalBB313

originalBB317alteredBB:                           ; preds = %originalBB317, %1614
  %4632 = load i32, i32* %18, align 4
  %4633 = icmp ne i32 %4632, 0
  br label %originalBB317

originalBB321alteredBB:                           ; preds = %originalBB321, %1644
  call void @start_sequence()
  br label %originalBB321

originalBB325alteredBB:                           ; preds = %originalBB325, %1661
  %4634 = bitcast %struct.args_size* %28 to i8*
  %4635 = bitcast %struct.args_size* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4634, i8* %4635, i64 16, i32 8, i1 false)
  %4636 = load i32, i32* %33, align 4
  %4637 = load i32, i32* %18, align 4
  %4638 = icmp eq i32 %4637, 0
  br label %originalBB325

originalBB329alteredBB:                           ; preds = %originalBB329, %1683
  br label %originalBB329

originalBB333alteredBB:                           ; preds = %originalBB333, %1726
  %4639 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %4640 = load %union.tree_node*, %union.tree_node** %4639, align 8
  %4641 = icmp ne %union.tree_node* %4640, null
  br label %originalBB333

originalBB337alteredBB:                           ; preds = %originalBB337, %1760
  %4642 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %4643 = load %union.tree_node*, %union.tree_node** %4642, align 8
  %4644 = icmp eq %union.tree_node* %4643, null
  br label %originalBB337

originalBB341alteredBB:                           ; preds = %originalBB341, %1801
  %4645 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1802, %struct.rtx_def* null, i32 0, i32 0)
  br label %originalBB341

originalBB345alteredBB:                           ; preds = %originalBB345, %1839
  %4646 = load i32, i32* @target_flags, align 4
  %_346 = shl i32 %4646, 4096
  %_347 = sub i32 %4646, 4096
  %gen348 = mul i32 %_347, 4096
  %_349 = sub i32 %4646, 4096
  %gen350 = mul i32 %_349, 4096
  %_351 = sub i32 %4646, 4096
  %gen352 = mul i32 %_351, 4096
  %4647 = and i32 %4646, 4096
  %4648 = icmp ne i32 %4647, 0
  br label %originalBB345

originalBB356alteredBB:                           ; preds = %originalBB356, %1886
  %4649 = load i8*, i8** @stack_usage_map, align 8
  %4650 = load i32, i32* %40, align 4
  %4651 = sext i32 %4650 to i64
  %4652 = getelementptr inbounds i8, i8* %4649, i64 %4651
  %4653 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %4654 = load i32, i32* %40, align 4
  %_357 = sub i32 %4653, %4654
  %gen358 = mul i32 %_357, %4654
  %_359 = sub i32 0, %4653
  %gen360 = add i32 %_359, %4654
  %4655 = sub nsw i32 %4653, %4654
  %4656 = sext i32 %4655 to i64
  call void @llvm.memset.p0i8.i64(i8* %4652, i8 0, i64 %4656, i32 1, i1 false)
  br label %originalBB356

originalBB364alteredBB:                           ; preds = %originalBB364, %1930
  %4657 = load i32, i32* %66, align 4
  %4658 = sub nsw i32 0, %4657
  %4659 = load %struct.function*, %struct.function** @cfun, align 8
  %4660 = getelementptr inbounds %struct.function, %struct.function* %4659, i32 0, i32 2
  %4661 = load %struct.expr_status*, %struct.expr_status** %4660, align 8
  %4662 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4661, i32 0, i32 0
  store i32 %4658, i32* %4662, align 8
  call void @do_pending_stack_adjust()
  store i32 0, i32* %66, align 4
  br label %originalBB364

originalBB368alteredBB:                           ; preds = %originalBB368, %1964
  %4663 = load i32, i32* %66, align 4
  %4664 = sext i32 %4663 to i64
  %4665 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %4664)
  %4666 = call %struct.rtx_def* @push_block(%struct.rtx_def* %4665, i32 0, i32 0)
  store %struct.rtx_def* %4666, %struct.rtx_def** %34, align 8
  br label %originalBB368

originalBB372alteredBB:                           ; preds = %originalBB372, %1985
  %4667 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %4668 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %4667)
  store %struct.rtx_def* %4668, %struct.rtx_def** %34, align 8
  %4669 = load i32, i32* @stack_arg_under_construction, align 4
  %4670 = icmp ne i32 %4669, 0
  br label %originalBB372

originalBB376alteredBB:                           ; preds = %originalBB376, %2015
  call void @emit_stack_save(i32 0, %struct.rtx_def** %43, %struct.rtx_def* null)
  %4671 = load %struct.function*, %struct.function** @cfun, align 8
  %4672 = getelementptr inbounds %struct.function, %struct.function* %4671, i32 0, i32 2
  %4673 = load %struct.expr_status*, %struct.expr_status** %4672, align 8
  %4674 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4673, i32 0, i32 0
  %4675 = load i32, i32* %4674, align 8
  store i32 %4675, i32* %44, align 4
  %4676 = load %struct.function*, %struct.function** @cfun, align 8
  %4677 = getelementptr inbounds %struct.function, %struct.function* %4676, i32 0, i32 2
  %4678 = load %struct.expr_status*, %struct.expr_status** %4677, align 8
  %4679 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4678, i32 0, i32 0
  store i32 0, i32* %4679, align 8
  %4680 = load i32, i32* @stack_arg_under_construction, align 4
  store i32 %4680, i32* %42, align 4
  store i32 0, i32* @stack_arg_under_construction, align 4
  %4681 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %4682 = sext i32 %4681 to i64
  %4683 = alloca i8, i64 %4682, align 16
  store i8* %4683, i8** @stack_usage_map, align 8
  %4684 = load i8*, i8** @stack_usage_map, align 8
  %4685 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %4686 = sext i32 %4685 to i64
  call void @llvm.memset.p0i8.i64(i8* %4684, i8 0, i64 %4686, i32 1, i1 false)
  store i32 0, i32* @highest_outgoing_arg_in_use, align 4
  br label %originalBB376

originalBB380alteredBB:                           ; preds = %originalBB380, %2051
  store i32 0, i32* %49, align 4
  br label %originalBB380

originalBB384alteredBB:                           ; preds = %originalBB384, %2083
  br label %originalBB384

originalBB388alteredBB:                           ; preds = %originalBB388, %2103
  br label %originalBB388

originalBB392alteredBB:                           ; preds = %originalBB392, %2120
  br label %originalBB392

originalBB396alteredBB:                           ; preds = %originalBB396, %2138
  br label %originalBB396

originalBB400alteredBB:                           ; preds = %originalBB400, %2155
  %4687 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4688 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %4689 = load i32, i32* %24, align 4
  call void @compute_argument_addresses(%struct.arg_data* %4687, %struct.rtx_def* %4688, i32 %4689)
  %4690 = load i32, i32* @target_flags, align 4
  %_401 = sub i32 0, %4690
  %gen402 = add i32 %_401, 2048
  %_403 = sub i32 0, %4690
  %gen404 = add i32 %_403, 2048
  %_405 = sub i32 0, %4690
  %gen406 = add i32 %_405, 2048
  %_407 = sub i32 0, %4690
  %gen408 = add i32 %_407, 2048
  %4691 = and i32 %4690, 2048
  %4692 = icmp ne i32 %4691, 0
  br label %originalBB400

originalBB412alteredBB:                           ; preds = %originalBB412, %2178
  %4693 = load i32, i32* @target_flags, align 4
  %_413 = sub i32 0, %4693
  %gen414 = add i32 %_413, 4096
  %_415 = sub i32 %4693, 4096
  %gen416 = mul i32 %_415, 4096
  %_417 = shl i32 %4693, 4096
  %4694 = and i32 %4693, 4096
  %4695 = icmp ne i32 %4694, 0
  br label %originalBB412

originalBB421alteredBB:                           ; preds = %originalBB421, %2207
  %4696 = load %struct.function*, %struct.function** @cfun, align 8
  %4697 = getelementptr inbounds %struct.function, %struct.function* %4696, i32 0, i32 2
  %4698 = load %struct.expr_status*, %struct.expr_status** %4697, align 8
  %4699 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4698, i32 0, i32 0
  %4700 = load i32, i32* %4699, align 8
  %4701 = icmp ne i32 %4700, 0
  br label %originalBB421

originalBB425alteredBB:                           ; preds = %originalBB425, %2230
  %4702 = load i32, i32* %35, align 4
  %_426 = sub i32 %4702, 4096
  %gen427 = mul i32 %_426, 4096
  %4703 = and i32 %4702, 4096
  %4704 = icmp ne i32 %4703, 0
  br label %originalBB425

originalBB431alteredBB:                           ; preds = %originalBB431, %2269
  %4705 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %4706 = load i64, i64* %4705, align 8
  %4707 = load i32, i32* %29, align 4
  %4708 = sext i32 %4707 to i64
  %_432 = shl i64 %4706, %4708
  %_433 = sub i64 %4706, %4708
  %gen434 = mul i64 %_433, %4708
  %_435 = sub i64 0, %4706
  %gen436 = add i64 %_435, %4708
  %_437 = shl i64 %4706, %4708
  %_438 = sub i64 %4706, %4708
  %gen439 = mul i64 %_438, %4708
  %_440 = sub i64 0, %4706
  %gen441 = add i64 %_440, %4708
  %_442 = sub i64 0, %4706
  %gen443 = add i64 %_442, %4708
  %_444 = shl i64 %4706, %4708
  %4709 = sub nsw i64 %4706, %4708
  %4710 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %4709)
  call void @anti_adjust_stack(%struct.rtx_def* %4710)
  br label %originalBB431

originalBB448alteredBB:                           ; preds = %originalBB448, %2292
  br label %originalBB448

originalBB452alteredBB:                           ; preds = %originalBB452, %2309
  br label %originalBB452

originalBB456alteredBB:                           ; preds = %originalBB456, %2326
  %4711 = load %struct.function*, %struct.function** @cfun, align 8
  %4712 = getelementptr inbounds %struct.function, %struct.function* %4711, i32 0, i32 2
  %4713 = load %struct.expr_status*, %struct.expr_status** %4712, align 8
  %4714 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4713, i32 0, i32 1
  %4715 = load i32, i32* %4714, align 4
  %_457 = sub i32 0, %4715
  %gen458 = add i32 %_457, 1
  %_459 = shl i32 %4715, 1
  %_460 = sub i32 0, %4715
  %gen461 = add i32 %_460, 1
  %4716 = add nsw i32 %4715, 1
  store i32 %4716, i32* %4714, align 4
  %4717 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4718 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4719 = call %struct.rtx_def* @rtx_for_function_call(%union.tree_node* %4717, %union.tree_node* %4718)
  store %struct.rtx_def* %4719, %struct.rtx_def** %9, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %19, align 8
  %4720 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4721 = bitcast %union.tree_node* %4720 to %struct.tree_common*
  %4722 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4721, i32 0, i32 1
  %4723 = load %union.tree_node*, %union.tree_node** %4722, align 8
  %4724 = bitcast %union.tree_node* %4723 to %struct.tree_type*
  %4725 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %4724, i32 0, i32 6
  %4726 = load i32, i32* %4725, align 4
  %_462 = sub i32 0, %4726
  %gen463 = add i32 %_462, 9
  %4727 = lshr i32 %4726, 9
  %_464 = sub i32 0, %4727
  %gen465 = add i32 %_464, 127
  %_466 = sub i32 %4727, 127
  %gen467 = mul i32 %_466, 127
  %_468 = sub i32 %4727, 127
  %gen469 = mul i32 %_468, 127
  %_470 = sub i32 %4727, 127
  %gen471 = mul i32 %_470, 127
  %_472 = sub i32 0, %4727
  %gen473 = add i32 %_472, 127
  %4728 = and i32 %4727, 127
  %4729 = icmp ne i32 %4728, 0
  br label %originalBB456

originalBB477alteredBB:                           ; preds = %originalBB477, %2365
  %4730 = load i32, i32* %23, align 4
  %4731 = icmp ne i32 %4730, 0
  br label %originalBB477

originalBB481alteredBB:                           ; preds = %originalBB481, %2384
  %4732 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4733 = bitcast %union.tree_node* %4732 to %struct.tree_common*
  %4734 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4733, i32 0, i32 1
  %4735 = load %union.tree_node*, %union.tree_node** %4734, align 8
  %4736 = call %union.tree_node* @build_pointer_type(%union.tree_node* %4735)
  %4737 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4738 = load i32, i32* %18, align 4
  %4739 = icmp eq i32 %4738, 0
  %4740 = zext i1 %4739 to i32
  %4741 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %4736, %union.tree_node* %4737, i32 %4740)
  store %struct.rtx_def* %4741, %struct.rtx_def** %19, align 8
  br label %originalBB481

originalBB485alteredBB:                           ; preds = %originalBB485, %2411
  %4742 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4743 = bitcast %union.tree_node* %4742 to %struct.tree_common*
  %4744 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4743, i32 0, i32 1
  %4745 = load %union.tree_node*, %union.tree_node** %4744, align 8
  %4746 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4747 = load i32, i32* %18, align 4
  %4748 = icmp eq i32 %4747, 0
  %4749 = zext i1 %4748 to i32
  %4750 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %4745, %union.tree_node* %4746, i32 %4749)
  store %struct.rtx_def* %4750, %struct.rtx_def** %19, align 8
  br label %originalBB485

originalBB489alteredBB:                           ; preds = %originalBB489, %2451
  store i32 0, i32* %49, align 4
  br label %originalBB489

originalBB493alteredBB:                           ; preds = %originalBB493, %2468
  %4751 = load i32, i32* %49, align 4
  %4752 = load i32, i32* %24, align 4
  %4753 = icmp slt i32 %4751, %4752
  br label %originalBB493

originalBB497alteredBB:                           ; preds = %originalBB497, %2504
  %4754 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %4754, %struct.rtx_def** %68, align 8
  %4755 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4756 = load i32, i32* %49, align 4
  %4757 = sext i32 %4756 to i64
  %4758 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4755, i64 %4757
  %4759 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %4760 = load i32, i32* %35, align 4
  %4761 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  %4762 = load %union.tree_node*, %union.tree_node** %4761, align 8
  %4763 = icmp ne %union.tree_node* %4762, null
  %4764 = zext i1 %4763 to i32
  %4765 = load i32, i32* %33, align 4
  %4766 = call i32 @store_one_arg(%struct.arg_data* %4758, %struct.rtx_def* %4759, i32 %4760, i32 %4764, i32 %4765)
  %4767 = icmp ne i32 %4766, 0
  br label %originalBB497

originalBB501alteredBB:                           ; preds = %originalBB501, %2552
  %4768 = load i32, i32* %31, align 4
  %4769 = icmp ne i32 %4768, 0
  br label %originalBB501

originalBB505alteredBB:                           ; preds = %originalBB505, %2576
  %4770 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4771 = load i32, i32* %49, align 4
  %4772 = sext i32 %4771 to i64
  %4773 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4770, i64 %4772
  %4774 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4773, i32 0, i32 7
  %4775 = load i32, i32* %4774, align 4
  %4776 = icmp ne i32 %4775, 0
  br label %originalBB505

originalBB509alteredBB:                           ; preds = %originalBB509, %2600
  %4777 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4778 = load i32, i32* %49, align 4
  %4779 = sext i32 %4778 to i64
  %4780 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4777, i64 %4779
  %4781 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4780, i32 0, i32 8
  %4782 = load i32, i32* %4781, align 8
  %4783 = icmp ne i32 %4782, 0
  br label %originalBB509

originalBB513alteredBB:                           ; preds = %originalBB513, %2651
  br label %originalBB513

originalBB517alteredBB:                           ; preds = %originalBB517, %2668
  br label %originalBB517

originalBB521alteredBB:                           ; preds = %originalBB521, %2689
  %4784 = load i32, i32* @target_flags, align 4
  %_522 = shl i32 %4784, 2048
  %_523 = sub i32 0, %4784
  %gen524 = add i32 %_523, 2048
  %4785 = and i32 %4784, 2048
  %4786 = icmp ne i32 %4785, 0
  br label %originalBB521

originalBB528alteredBB:                           ; preds = %originalBB528, %2747
  %4787 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  call void @use_reg(%struct.rtx_def** %47, %struct.rtx_def* %4787)
  br label %originalBB528

originalBB532alteredBB:                           ; preds = %originalBB532, %2793
  %4788 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %4789 = load %union.tree_node*, %union.tree_node** %14, align 8
  %4790 = load %union.tree_node*, %union.tree_node** %13, align 8
  %4791 = load i32, i32* %29, align 4
  %4792 = sext i32 %4791 to i64
  %4793 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  %4794 = load i64, i64* %4793, align 8
  %4795 = load i64, i64* %22, align 8
  %4796 = load %struct.rtx_def*, %struct.rtx_def** %65, align 8
  %4797 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %4798 = load i32, i32* %45, align 4
  %4799 = load %struct.rtx_def*, %struct.rtx_def** %47, align 8
  %4800 = load i32, i32* %35, align 4
  call void @emit_call_1(%struct.rtx_def* %4788, %union.tree_node* %4789, %union.tree_node* %4790, i64 %4792, i64 %4794, i64 %4795, %struct.rtx_def* %4796, %struct.rtx_def* %4797, i32 %4798, %struct.rtx_def* %4799, i32 %4800, %struct.ix86_args* %30)
  %4801 = load i32, i32* %18, align 4
  %4802 = icmp ne i32 %4801, 0
  br label %originalBB532

originalBB536alteredBB:                           ; preds = %originalBB536, %2825
  %4803 = load i32, i32* %46, align 4
  %4804 = load %struct.function*, %struct.function** @cfun, align 8
  %4805 = getelementptr inbounds %struct.function, %struct.function* %4804, i32 0, i32 2
  %4806 = load %struct.expr_status*, %struct.expr_status** %4805, align 8
  %4807 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4806, i32 0, i32 2
  %4808 = load i32, i32* %4807, align 8
  %4809 = load %struct.function*, %struct.function** @cfun, align 8
  %4810 = getelementptr inbounds %struct.function, %struct.function* %4809, i32 0, i32 2
  %4811 = load %struct.expr_status*, %struct.expr_status** %4810, align 8
  %4812 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4811, i32 0, i32 0
  %4813 = load i32, i32* %4812, align 8
  %_537 = shl i32 %4808, %4813
  %4814 = sub nsw i32 %4808, %4813
  %4815 = icmp ne i32 %4803, %4814
  br label %originalBB536

originalBB541alteredBB:                           ; preds = %originalBB541, %2859
  %4816 = load i32, i32* %35, align 4
  %_542 = sub i32 %4816, 4096
  %gen543 = mul i32 %_542, 4096
  %_544 = sub i32 %4816, 4096
  %gen545 = mul i32 %_544, 4096
  %_546 = sub i32 0, %4816
  %gen547 = add i32 %_546, 4096
  %_548 = shl i32 %4816, 4096
  %_549 = shl i32 %4816, 4096
  %_550 = sub i32 %4816, 4096
  %gen551 = mul i32 %_550, 4096
  %_552 = sub i32 0, %4816
  %gen553 = add i32 %_552, 4096
  %4817 = and i32 %4816, 4096
  %4818 = icmp ne i32 %4817, 0
  br label %originalBB541

originalBB557alteredBB:                           ; preds = %originalBB557, %2879
  %4819 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %4820 = icmp eq %struct.rtx_def* %4819, null
  br label %originalBB557

originalBB561alteredBB:                           ; preds = %originalBB561, %2924
  %4821 = load %struct.rtx_def*, %struct.rtx_def** %72, align 8
  %4822 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4823 = bitcast %union.tree_node* %4822 to %struct.tree_common*
  %4824 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4823, i32 0, i32 1
  %4825 = load %union.tree_node*, %union.tree_node** %4824, align 8
  %4826 = bitcast %union.tree_node* %4825 to %struct.tree_common*
  %4827 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4826, i32 0, i32 1
  %4828 = load %union.tree_node*, %union.tree_node** %4827, align 8
  %4829 = bitcast %union.tree_node* %4828 to %struct.tree_type*
  %4830 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %4829, i32 0, i32 7
  %4831 = load i32, i32* %4830, align 8
  call void @mark_reg_pointer(%struct.rtx_def* %4821, i32 %4831)
  br label %originalBB561

originalBB565alteredBB:                           ; preds = %originalBB565, %2953
  %4832 = load i32, i32* %49, align 4
  %4833 = load i32, i32* %24, align 4
  %4834 = icmp slt i32 %4832, %4833
  br label %originalBB565

originalBB569alteredBB:                           ; preds = %originalBB569, %3006
  %4835 = load i32, i32* %18, align 4
  %4836 = icmp ne i32 %4835, 0
  br label %originalBB569

originalBB573alteredBB:                           ; preds = %originalBB573, %3067
  br label %originalBB573

originalBB577alteredBB:                           ; preds = %originalBB577, %3091
  %4837 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %4837, %struct.rtx_def** %76, align 8
  br label %originalBB577

originalBB581alteredBB:                           ; preds = %originalBB581, %3124
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 3148, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_call, i32 0, i32 0)) #8
  br label %originalBB581

originalBB585alteredBB:                           ; preds = %originalBB585, %3142
  %4838 = load %struct.rtx_def*, %struct.rtx_def** %76, align 8
  %4839 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %4838)
  br label %originalBB585

originalBB589alteredBB:                           ; preds = %originalBB589, %3181
  %4840 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %4841 = icmp ne %struct.rtx_def* %4840, null
  br label %originalBB589

originalBB593alteredBB:                           ; preds = %originalBB593, %3200
  %4842 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %4843 = bitcast %struct.rtx_def* %4842 to i32*
  %4844 = load i32, i32* %4843, align 8
  %_594 = sub i32 0, %4844
  %gen595 = add i32 %_594, 26
  %_596 = sub i32 %4844, 26
  %gen597 = mul i32 %_596, 26
  %_598 = shl i32 %4844, 26
  %_599 = sub i32 0, %4844
  %gen600 = add i32 %_599, 26
  %_601 = sub i32 0, %4844
  %gen602 = add i32 %_601, 26
  %4845 = lshr i32 %4844, 26
  %_603 = sub i32 %4845, 1
  %gen604 = mul i32 %_603, 1
  %_605 = sub i32 0, %4845
  %gen606 = add i32 %_605, 1
  %_607 = sub i32 0, %4845
  %gen608 = add i32 %_607, 1
  %_609 = shl i32 %4845, 1
  %4846 = and i32 %4845, 1
  %4847 = icmp ne i32 %4846, 0
  br label %originalBB593

originalBB613alteredBB:                           ; preds = %originalBB613, %3227
  %4848 = call i32 @any_pending_cleanups(i32 1)
  %4849 = icmp ne i32 %4848, 0
  br label %originalBB613

originalBB617alteredBB:                           ; preds = %originalBB617, %3246
  %4850 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %4851 = icmp ne %struct.rtx_def* %4850, null
  br label %originalBB617

originalBB621alteredBB:                           ; preds = %originalBB621, %3265
  %4852 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %4853 = bitcast %struct.rtx_def* %4852 to i32*
  %4854 = load i32, i32* %4853, align 8
  %_622 = sub i32 %4854, 65535
  %gen623 = mul i32 %_622, 65535
  %_624 = shl i32 %4854, 65535
  %_625 = sub i32 0, %4854
  %gen626 = add i32 %_625, 65535
  %_627 = sub i32 %4854, 65535
  %gen628 = mul i32 %_627, 65535
  %4855 = and i32 %4854, 65535
  %4856 = icmp eq i32 %4855, 61
  br label %originalBB621

originalBB632alteredBB:                           ; preds = %originalBB632, %3307
  %4857 = load i32, i32* %7, align 4
  %4858 = icmp ne i32 %4857, 0
  br label %originalBB632

originalBB636alteredBB:                           ; preds = %originalBB636, %3331
  %4859 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %4860 = icmp eq %struct.rtx_def* %4859, null
  br label %originalBB636

originalBB640alteredBB:                           ; preds = %originalBB640, %3350
  %4861 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %4862 = bitcast %struct.rtx_def* %4861 to i32*
  %4863 = load i32, i32* %4862, align 8
  %_641 = shl i32 %4863, 65535
  %_642 = sub i32 0, %4863
  %gen643 = add i32 %_642, 65535
  %_644 = sub i32 0, %4863
  %gen645 = add i32 %_644, 65535
  %_646 = sub i32 0, %4863
  %gen647 = add i32 %_646, 65535
  %_648 = sub i32 0, %4863
  %gen649 = add i32 %_648, 65535
  %4864 = and i32 %4863, 65535
  %4865 = icmp ne i32 %4864, 66
  br label %originalBB640

originalBB653alteredBB:                           ; preds = %originalBB653, %3372
  %4866 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4867 = bitcast %union.tree_node* %4866 to %struct.tree_common*
  %4868 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4867, i32 0, i32 1
  %4869 = load %union.tree_node*, %union.tree_node** %4868, align 8
  %4870 = bitcast %union.tree_node* %4869 to %struct.tree_type*
  %4871 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %4870, i32 0, i32 6
  %4872 = load i32, i32* %4871, align 4
  %_654 = shl i32 %4872, 9
  %_655 = shl i32 %4872, 9
  %_656 = sub i32 0, %4872
  %gen657 = add i32 %_656, 9
  %_658 = shl i32 %4872, 9
  %_659 = shl i32 %4872, 9
  %_660 = sub i32 0, %4872
  %gen661 = add i32 %_660, 9
  %_662 = shl i32 %4872, 9
  %_663 = shl i32 %4872, 9
  %4873 = lshr i32 %4872, 9
  %_664 = sub i32 %4873, 127
  %gen665 = mul i32 %_664, 127
  %_666 = sub i32 %4873, 127
  %gen667 = mul i32 %_666, 127
  %_668 = sub i32 %4873, 127
  %gen669 = mul i32 %_668, 127
  %_670 = sub i32 %4873, 127
  %gen671 = mul i32 %_670, 127
  %_672 = sub i32 0, %4873
  %gen673 = add i32 %_672, 127
  %_674 = sub i32 %4873, 127
  %gen675 = mul i32 %_674, 127
  %4874 = and i32 %4873, 127
  %4875 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4876 = bitcast %union.tree_node* %4875 to %struct.tree_common*
  %4877 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4876, i32 0, i32 1
  %4878 = load %union.tree_node*, %union.tree_node** %4877, align 8
  %4879 = bitcast %union.tree_node* %4878 to %struct.tree_type*
  %4880 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %4879, i32 0, i32 6
  %4881 = load i32, i32* %4880, align 4
  %_676 = sub i32 0, %4881
  %gen677 = add i32 %_676, 9
  %_678 = sub i32 0, %4881
  %gen679 = add i32 %_678, 9
  %_680 = shl i32 %4881, 9
  %_681 = shl i32 %4881, 9
  %_682 = sub i32 %4881, 9
  %gen683 = mul i32 %_682, 9
  %_684 = sub i32 0, %4881
  %gen685 = add i32 %_684, 9
  %_686 = sub i32 %4881, 9
  %gen687 = mul i32 %_686, 9
  %4882 = lshr i32 %4881, 9
  %_688 = shl i32 %4882, 127
  %_689 = sub i32 0, %4882
  %gen690 = add i32 %_689, 127
  %4883 = and i32 %4882, 127
  %4884 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %4885 = call %struct.rtx_def* @memory_address(i32 %4883, %struct.rtx_def* %4884)
  %4886 = call %struct.rtx_def* @gen_rtx_MEM(i32 %4874, %struct.rtx_def* %4885)
  store %struct.rtx_def* %4886, %struct.rtx_def** %6, align 8
  %4887 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %4888 = load %union.tree_node*, %union.tree_node** %5, align 8
  call void @set_mem_attributes(%struct.rtx_def* %4887, %union.tree_node* %4888, i32 1)
  br label %originalBB653

originalBB694alteredBB:                           ; preds = %originalBB694, %3431
  %4889 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %4890 = bitcast %struct.rtx_def* %4889 to i32*
  %4891 = load i32, i32* %4890, align 8
  %_695 = sub i32 0, %4891
  %gen696 = add i32 %_695, 65535
  %_697 = sub i32 0, %4891
  %gen698 = add i32 %_697, 65535
  %4892 = and i32 %4891, 65535
  %4893 = icmp eq i32 %4892, 39
  br label %originalBB694

originalBB702alteredBB:                           ; preds = %originalBB702, %3502
  %4894 = load %union.tree_node*, %union.tree_node** %5, align 8
  %4895 = bitcast %union.tree_node* %4894 to %struct.tree_common*
  %4896 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4895, i32 0, i32 1
  %4897 = load %union.tree_node*, %union.tree_node** %4896, align 8
  %4898 = bitcast %union.tree_node* %4897 to %struct.tree_common*
  %4899 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %4898, i32 0, i32 1
  %4900 = load %union.tree_node*, %union.tree_node** %4899, align 8
  %4901 = icmp ne %union.tree_node* %4900, null
  br label %originalBB702

originalBB706alteredBB:                           ; preds = %originalBB706, %3527
  %4902 = zext i1 %3528 to i32
  %_707 = sub i32 %4902, 8
  %gen708 = mul i32 %_707, 8
  %_709 = sub i32 %4902, 8
  %gen710 = mul i32 %_709, 8
  %_711 = sub i32 %4902, 8
  %gen712 = mul i32 %_711, 8
  %_713 = sub i32 0, %4902
  %gen714 = add i32 %_713, 8
  %_715 = sub i32 %4902, 8
  %gen716 = mul i32 %_715, 8
  %_717 = sub i32 %4902, 8
  %gen718 = mul i32 %_717, 8
  %_719 = shl i32 %4902, 8
  %4903 = mul nsw i32 %4902, 8
  %_720 = sub i32 0, %3492
  %gen721 = add i32 %_720, %4903
  %_722 = sub i32 %3492, %4903
  %gen723 = mul i32 %_722, %4903
  %_724 = sub i32 %3492, %4903
  %gen725 = mul i32 %_724, %4903
  %_726 = shl i32 %3492, %4903
  %_727 = sub i32 0, %3492
  %gen728 = add i32 %_727, %4903
  %4904 = or i32 %3492, %4903
  %_729 = sub i32 %4904, 1
  %gen730 = mul i32 %_729, 1
  %_731 = shl i32 %4904, 1
  %_732 = shl i32 %4904, 1
  %_733 = sub i32 0, %4904
  %gen734 = add i32 %_733, 1
  %_735 = sub i32 0, %4904
  %gen736 = add i32 %_735, 1
  %_737 = shl i32 %4904, 1
  %_738 = sub i32 0, %4904
  %gen739 = add i32 %_738, 1
  %4905 = or i32 %4904, 1
  %4906 = call %union.tree_node* @build_qualified_type(%union.tree_node* %3460, i32 %4905)
  store %union.tree_node* %4906, %union.tree_node** %77, align 8
  %4907 = load %union.tree_node*, %union.tree_node** %77, align 8
  %4908 = call %struct.rtx_def* @assign_temp(%union.tree_node* %4907, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %4908, %struct.rtx_def** %6, align 8
  %4909 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %4909)
  br label %originalBB706

originalBB743alteredBB:                           ; preds = %originalBB743, %3599
  %4910 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %4911 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %4912 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %4910, %struct.rtx_def* %4911)
  br label %originalBB743

originalBB747alteredBB:                           ; preds = %originalBB747, %3644
  br label %originalBB747

originalBB751alteredBB:                           ; preds = %originalBB751, %3679
  %4913 = load i32, i32* @target_flags, align 4
  %_752 = shl i32 %4913, 4096
  %_753 = shl i32 %4913, 4096
  %_754 = shl i32 %4913, 4096
  %4914 = and i32 %4913, 4096
  %4915 = icmp ne i32 %4914, 0
  br label %originalBB751

originalBB758alteredBB:                           ; preds = %originalBB758, %3705
  %4916 = load %struct.rtx_def*, %struct.rtx_def** %39, align 8
  %4917 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %4918 = load i32, i32* %38, align 4
  %4919 = load i32, i32* %37, align 4
  call void @restore_fixed_argument_area(%struct.rtx_def* %4916, %struct.rtx_def* %4917, i32 %4918, i32 %4919)
  br label %originalBB758

originalBB762alteredBB:                           ; preds = %originalBB762, %3726
  store i32 0, i32* %49, align 4
  br label %originalBB762

originalBB766alteredBB:                           ; preds = %originalBB766, %3743
  %4920 = load i32, i32* %49, align 4
  %4921 = load i32, i32* %24, align 4
  %4922 = icmp slt i32 %4920, %4921
  br label %originalBB766

originalBB770alteredBB:                           ; preds = %originalBB770, %3771
  %4923 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4924 = load i32, i32* %49, align 4
  %4925 = sext i32 %4924 to i64
  %4926 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4923, i64 %4925
  %4927 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4926, i32 0, i32 14
  %4928 = load %struct.rtx_def*, %struct.rtx_def** %4927, align 8
  %4929 = bitcast %struct.rtx_def* %4928 to i32*
  %4930 = load i32, i32* %4929, align 8
  %_771 = sub i32 0, %4930
  %gen772 = add i32 %_771, 16
  %_773 = sub i32 %4930, 16
  %gen774 = mul i32 %_773, 16
  %_775 = sub i32 %4930, 16
  %gen776 = mul i32 %_775, 16
  %4931 = lshr i32 %4930, 16
  %_777 = sub i32 %4931, 255
  %gen778 = mul i32 %_777, 255
  %4932 = and i32 %4931, 255
  store i32 %4932, i32* %78, align 4
  %4933 = load i32, i32* %78, align 4
  %4934 = load i32, i32* %78, align 4
  %4935 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4936 = load i32, i32* %49, align 4
  %4937 = sext i32 %4936 to i64
  %4938 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4935, i64 %4937
  %4939 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4938, i32 0, i32 13
  %4940 = load %struct.rtx_def*, %struct.rtx_def** %4939, align 8
  %4941 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4940, i32 0, i32 1
  %4942 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %4941, i64 0, i64 0
  %4943 = bitcast %union.rtunion_def* %4942 to %struct.rtx_def**
  %4944 = load %struct.rtx_def*, %struct.rtx_def** %4943, align 8
  %4945 = call %struct.rtx_def* @memory_address(i32 %4934, %struct.rtx_def* %4944)
  %4946 = call %struct.rtx_def* @gen_rtx_MEM(i32 %4933, %struct.rtx_def* %4945)
  store %struct.rtx_def* %4946, %struct.rtx_def** %79, align 8
  %4947 = load i32, i32* %78, align 4
  %4948 = icmp ne i32 %4947, 51
  br label %originalBB770

originalBB782alteredBB:                           ; preds = %originalBB782, %3841
  br label %originalBB782

originalBB786alteredBB:                           ; preds = %originalBB786, %3858
  br label %originalBB786

originalBB790alteredBB:                           ; preds = %originalBB790, %3878
  %4949 = load i32, i32* %40, align 4
  store i32 %4949, i32* @highest_outgoing_arg_in_use, align 4
  %4950 = load i8*, i8** %41, align 8
  store i8* %4950, i8** @stack_usage_map, align 8
  br label %originalBB790

originalBB794alteredBB:                           ; preds = %originalBB794, %3911
  %4951 = load i32, i32* %49, align 4
  %4952 = load i32, i32* %24, align 4
  %4953 = icmp slt i32 %4951, %4952
  br label %originalBB794

originalBB798alteredBB:                           ; preds = %originalBB798, %3939
  %4954 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4955 = load i32, i32* %49, align 4
  %4956 = sext i32 %4955 to i64
  %4957 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4954, i64 %4956
  %4958 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4957, i32 0, i32 15
  %4959 = load %struct.rtx_def**, %struct.rtx_def*** %4958, align 8
  %4960 = bitcast %struct.rtx_def** %4959 to i8*
  call void @free(i8* %4960) #5
  br label %originalBB798

originalBB802alteredBB:                           ; preds = %originalBB802, %3967
  %4961 = load i32, i32* %18, align 4
  %4962 = icmp eq i32 %4961, 0
  br label %originalBB802

originalBB806alteredBB:                           ; preds = %originalBB806, %3991
  %4963 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  store %struct.rtx_def* %4963, %struct.rtx_def** %12, align 8
  %4964 = load i32, i32* %61, align 4
  %4965 = load %struct.function*, %struct.function** @cfun, align 8
  %4966 = getelementptr inbounds %struct.function, %struct.function* %4965, i32 0, i32 2
  %4967 = load %struct.expr_status*, %struct.expr_status** %4966, align 8
  %4968 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4967, i32 0, i32 0
  store i32 %4964, i32* %4968, align 8
  %4969 = load i32, i32* %62, align 4
  %4970 = load %struct.function*, %struct.function** @cfun, align 8
  %4971 = getelementptr inbounds %struct.function, %struct.function* %4970, i32 0, i32 2
  %4972 = load %struct.expr_status*, %struct.expr_status** %4971, align 8
  %4973 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4972, i32 0, i32 2
  store i32 %4969, i32* %4973, align 8
  store i32 0, i32* %49, align 4
  br label %originalBB806

originalBB810alteredBB:                           ; preds = %originalBB810, %4023
  %4974 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4975 = load i32, i32* %49, align 4
  %4976 = sext i32 %4975 to i64
  %4977 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4974, i64 %4976
  %4978 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4977, i32 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %4978, align 8
  %4979 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4980 = load i32, i32* %49, align 4
  %4981 = sext i32 %4980 to i64
  %4982 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4979, i64 %4981
  %4983 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4982, i32 0, i32 15
  store %struct.rtx_def** null, %struct.rtx_def*** %4983, align 8
  %4984 = load %struct.arg_data*, %struct.arg_data** %26, align 8
  %4985 = load i32, i32* %49, align 4
  %4986 = sext i32 %4985 to i64
  %4987 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4984, i64 %4986
  %4988 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %4987, i32 0, i32 12
  store %struct.rtx_def* null, %struct.rtx_def** %4988, align 8
  br label %originalBB810

originalBB814alteredBB:                           ; preds = %originalBB814, %4055
  %4989 = load i32, i32* %49, align 4
  %_815 = shl i32 %4989, 1
  %_816 = sub i32 0, %4989
  %gen817 = add i32 %_816, 1
  %_818 = sub i32 %4989, 1
  %gen819 = mul i32 %_818, 1
  %_820 = sub i32 0, %4989
  %gen821 = add i32 %_820, 1
  %_822 = shl i32 %4989, 1
  %4990 = add nsw i32 %4989, 1
  store i32 %4990, i32* %49, align 4
  br label %originalBB814

originalBB826alteredBB:                           ; preds = %originalBB826, %4077
  %4991 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  store %struct.rtx_def* %4991, %struct.rtx_def** %11, align 8
  br label %originalBB826

originalBB830alteredBB:                           ; preds = %originalBB830, %4095
  %4992 = load i32, i32* %60, align 4
  %4993 = icmp ne i32 %4992, 0
  br label %originalBB830

originalBB834alteredBB:                           ; preds = %originalBB834, %4114
  store %struct.rtx_def* null, %struct.rtx_def** %12, align 8
  br label %originalBB834

originalBB838alteredBB:                           ; preds = %originalBB838, %4137
  %4994 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4995 = icmp ne %struct.rtx_def* %4994, null
  br label %originalBB838

originalBB842alteredBB:                           ; preds = %originalBB842, %4156
  %4996 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %4997 = bitcast %struct.rtx_def* %4996 to i32*
  %4998 = load i32, i32* %4997, align 8
  %_843 = shl i32 %4998, 65535
  %_844 = sub i32 %4998, 65535
  %gen845 = mul i32 %_844, 65535
  %_846 = shl i32 %4998, 65535
  %_847 = sub i32 0, %4998
  %gen848 = add i32 %_847, 65535
  %_849 = sub i32 %4998, 65535
  %gen850 = mul i32 %_849, 65535
  %4999 = and i32 %4998, 65535
  %5000 = icmp eq i32 %4999, 34
  br label %originalBB842

originalBB854alteredBB:                           ; preds = %originalBB854, %4202
  %5001 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %5002 = bitcast %struct.rtx_def* %5001 to i32*
  %5003 = load i32, i32* %5002, align 8
  %_855 = shl i32 %5003, 65535
  %_856 = sub i32 0, %5003
  %gen857 = add i32 %_856, 65535
  %_858 = sub i32 0, %5003
  %gen859 = add i32 %_858, 65535
  %_860 = sub i32 0, %5003
  %gen861 = add i32 %_860, 65535
  %5004 = and i32 %5003, 65535
  %5005 = icmp eq i32 %5004, 34
  br label %originalBB854

originalBB865alteredBB:                           ; preds = %originalBB865, %4224
  %5006 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %5007 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5006, i32 0, i32 1
  %5008 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %5007, i64 0, i64 3
  %5009 = bitcast %union.rtunion_def* %5008 to %struct.rtx_def**
  %5010 = load %struct.rtx_def*, %struct.rtx_def** %5009, align 8
  %5011 = bitcast %struct.rtx_def* %5010 to i32*
  %5012 = load i32, i32* %5011, align 8
  %_866 = shl i32 %5012, 65535
  %5013 = and i32 %5012, 65535
  %5014 = icmp eq i32 %5013, 141
  br label %originalBB865

originalBB870alteredBB:                           ; preds = %originalBB870, %4261
  %5015 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %5016 = icmp ne %struct.rtx_def* %5015, null
  br label %originalBB870

originalBB874alteredBB:                           ; preds = %originalBB874, %4286
  %5017 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %5018 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5017, i32 0, i32 1
  %5019 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %5018, i64 0, i64 3
  %5020 = bitcast %union.rtunion_def* %5019 to %struct.rtx_def**
  %5021 = load %struct.rtx_def*, %struct.rtx_def** %5020, align 8
  %5022 = bitcast %struct.rtx_def* %5021 to i32*
  %5023 = load i32, i32* %5022, align 8
  %_875 = sub i32 %5023, 65535
  %gen876 = mul i32 %_875, 65535
  %_877 = shl i32 %5023, 65535
  %_878 = sub i32 %5023, 65535
  %gen879 = mul i32 %_878, 65535
  %5024 = and i32 %5023, 65535
  %5025 = icmp eq i32 %5024, 141
  br label %originalBB874

originalBB883alteredBB:                           ; preds = %originalBB883, %4321
  %5026 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %5027 = icmp ne %struct.rtx_def* %5026, null
  br label %originalBB883

originalBB887alteredBB:                           ; preds = %originalBB887, %4354
  %5028 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %5029 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %5030 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %5031 = load %struct.function*, %struct.function** @cfun, align 8
  %5032 = getelementptr inbounds %struct.function, %struct.function* %5031, i32 0, i32 28
  %5033 = load %struct.rtx_def*, %struct.rtx_def** %5032, align 8
  %5034 = call %struct.rtx_def* @gen_rtx_fmt_uuuu(i32 141, i32 0, %struct.rtx_def* %5028, %struct.rtx_def* %5029, %struct.rtx_def* %5030, %struct.rtx_def* %5033)
  %5035 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %5034)
  br label %originalBB887

originalBB891alteredBB:                           ; preds = %originalBB891, %4379
  %5036 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %5037 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %5036)
  br label %originalBB891

originalBB895alteredBB:                           ; preds = %originalBB895, %4411
  %5038 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %5038, %struct.rtx_def** %4, align 8
  br label %originalBB895
}

declare %union.tree_node* @get_callee_fndecl(%union.tree_node*) #1

declare void @warning_with_decl(%union.tree_node*, i8*, ...) #1

declare void @warning(i8*, ...) #1

declare i32 @mark_addressable(%union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @flags_from_decl_or_type(%union.tree_node*) #0 {
  %2 = load i32, i32* @x.7
  %3 = load i32, i32* @y.8
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca %union.tree_node*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %union.tree_node*, align 8
  store %union.tree_node* %0, %union.tree_node** %10, align 8
  store i32 0, i32* %11, align 4
  %13 = load %union.tree_node*, %union.tree_node** %10, align 8
  store %union.tree_node* %13, %union.tree_node** %12, align 8
  %14 = load %union.tree_node*, %union.tree_node** %10, align 8
  %15 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %15, i32 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, 255
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp eq i32 %22, 100
  %24 = load i32, i32* @x.7
  %25 = load i32, i32* @y.8
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %160

; <label>:32:                                     ; preds = %originalBBpart2
  %33 = load %union.tree_node*, %union.tree_node** %10, align 8
  %34 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %34, i32 0, i32 1
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8
  store %union.tree_node* %36, %union.tree_node** %12, align 8
  %37 = load %union.tree_node*, %union.tree_node** %10, align 8
  %38 = bitcast %union.tree_node* %37 to %struct.tree_common*
  %39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %38, i32 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, 255
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp eq i32 %45, 100
  br i1 %46, label %47, label %92

; <label>:47:                                     ; preds = %32
  %48 = load i32, i32* @x.7
  %49 = load i32, i32* @y.8
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB4, label %originalBB4alteredBB

originalBB4:                                      ; preds = %originalBB4alteredBB, %47
  %56 = load %union.tree_node*, %union.tree_node** %10, align 8
  %57 = bitcast %union.tree_node* %56 to %struct.tree_decl*
  %58 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %57, i32 0, i32 5
  %59 = bitcast i48* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = lshr i64 %60, 27
  %62 = and i64 %61, 1
  %63 = trunc i64 %62 to i32
  %64 = icmp ne i32 %63, 0
  %65 = load i32, i32* @x.7
  %66 = load i32, i32* @y.8
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart227, label %originalBB4alteredBB

originalBBpart227:                                ; preds = %originalBB4
  br i1 %64, label %73, label %92

; <label>:73:                                     ; preds = %originalBBpart227
  %74 = load i32, i32* @x.7
  %75 = load i32, i32* @y.8
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %73
  %82 = load i32, i32* %11, align 4
  %83 = or i32 %82, 4
  store i32 %83, i32* %11, align 4
  %84 = load i32, i32* @x.7
  %85 = load i32, i32* @y.8
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart235, label %originalBB29alteredBB

originalBBpart235:                                ; preds = %originalBB29
  br label %92

; <label>:92:                                     ; preds = %originalBBpart235, %originalBBpart227, %32
  %93 = load i32, i32* @x.7
  %94 = load i32, i32* @y.8
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %92
  %101 = load %union.tree_node*, %union.tree_node** %10, align 8
  %102 = bitcast %union.tree_node* %101 to %struct.tree_common*
  %103 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %102, i32 0, i32 2
  %104 = load i32, i32* %103, align 8
  %105 = and i32 %104, 255
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i32
  %110 = icmp eq i32 %109, 100
  %111 = load i32, i32* @x.7
  %112 = load i32, i32* @y.8
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart244, label %originalBB37alteredBB

originalBBpart244:                                ; preds = %originalBB37
  br i1 %110, label %119, label %132

; <label>:119:                                    ; preds = %originalBBpart244
  %120 = load %union.tree_node*, %union.tree_node** %10, align 8
  %121 = bitcast %union.tree_node* %120 to %struct.tree_decl*
  %122 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %121, i32 0, i32 5
  %123 = bitcast i48* %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = lshr i64 %124, 31
  %126 = and i64 %125, 1
  %127 = trunc i64 %126 to i32
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %129, label %132

; <label>:129:                                    ; preds = %119
  %130 = load i32, i32* %11, align 4
  %131 = or i32 %130, 4608
  store i32 %131, i32* %11, align 4
  br label %132

; <label>:132:                                    ; preds = %129, %119, %originalBBpart244
  %133 = load %union.tree_node*, %union.tree_node** %10, align 8
  %134 = bitcast %union.tree_node* %133 to %struct.tree_common*
  %135 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %134, i32 0, i32 2
  %136 = load i32, i32* %135, align 8
  %137 = lshr i32 %136, 17
  %138 = and i32 %137, 1
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %140, label %159

; <label>:140:                                    ; preds = %132
  %141 = load i32, i32* @x.7
  %142 = load i32, i32* @y.8
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %140
  %149 = load i32, i32* %11, align 4
  %150 = or i32 %149, 16
  store i32 %150, i32* %11, align 4
  %151 = load i32, i32* @x.7
  %152 = load i32, i32* @y.8
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart250, label %originalBB46alteredBB

originalBBpart250:                                ; preds = %originalBB46
  br label %159

; <label>:159:                                    ; preds = %originalBBpart250, %132
  br label %160

; <label>:160:                                    ; preds = %159, %originalBBpart2
  %161 = load %union.tree_node*, %union.tree_node** %10, align 8
  %162 = bitcast %union.tree_node* %161 to %struct.tree_common*
  %163 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %162, i32 0, i32 2
  %164 = load i32, i32* %163, align 8
  %165 = lshr i32 %164, 12
  %166 = and i32 %165, 1
  %167 = icmp ne i32 %166, 0
  br i1 %167, label %168, label %195

; <label>:168:                                    ; preds = %160
  %169 = load i32, i32* @x.7
  %170 = load i32, i32* @y.8
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %originalBB52alteredBB, %168
  %177 = load %union.tree_node*, %union.tree_node** %10, align 8
  %178 = bitcast %union.tree_node* %177 to %struct.tree_common*
  %179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %178, i32 0, i32 2
  %180 = load i32, i32* %179, align 8
  %181 = lshr i32 %180, 11
  %182 = and i32 %181, 1
  %183 = icmp ne i32 %182, 0
  %184 = load i32, i32* @x.7
  %185 = load i32, i32* @y.8
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBBpart264, label %originalBB52alteredBB

originalBBpart264:                                ; preds = %originalBB52
  br i1 %183, label %195, label %192

; <label>:192:                                    ; preds = %originalBBpart264
  %193 = load i32, i32* %11, align 4
  %194 = or i32 %193, 4097
  store i32 %194, i32* %11, align 4
  br label %195

; <label>:195:                                    ; preds = %192, %originalBBpart264, %160
  %196 = load %union.tree_node*, %union.tree_node** %10, align 8
  %197 = bitcast %union.tree_node* %196 to %struct.tree_common*
  %198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %197, i32 0, i32 2
  %199 = load i32, i32* %198, align 8
  %200 = lshr i32 %199, 11
  %201 = and i32 %200, 1
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %203, label %206

; <label>:203:                                    ; preds = %195
  %204 = load i32, i32* %11, align 4
  %205 = or i32 %204, 2
  store i32 %205, i32* %11, align 4
  br label %206

; <label>:206:                                    ; preds = %203, %195
  %207 = load %union.tree_node*, %union.tree_node** %12, align 8
  %208 = bitcast %union.tree_node* %207 to %struct.tree_common*
  %209 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %208, i32 0, i32 2
  %210 = load i32, i32* %209, align 8
  %211 = and i32 %210, 255
  %212 = icmp eq i32 %211, 23
  br i1 %212, label %213, label %242

; <label>:213:                                    ; preds = %206
  %214 = load %union.tree_node*, %union.tree_node** %12, align 8
  %215 = bitcast %union.tree_node* %214 to %struct.tree_type*
  %216 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %215, i32 0, i32 6
  %217 = load i32, i32* %216, align 4
  %218 = lshr i32 %217, 17
  %219 = and i32 %218, 1
  %220 = icmp ne i32 %219, 0
  br i1 %220, label %221, label %242

; <label>:221:                                    ; preds = %213
  %222 = load i32, i32* @x.7
  %223 = load i32, i32* @y.8
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %221
  %230 = load i32, i32* %11, align 4
  %231 = or i32 %230, 1024
  store i32 %231, i32* %11, align 4
  %232 = load i32, i32* %11, align 4
  %233 = and i32 %232, -4610
  store i32 %233, i32* %11, align 4
  %234 = load i32, i32* @x.7
  %235 = load i32, i32* @y.8
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart285, label %originalBB66alteredBB

originalBBpart285:                                ; preds = %originalBB66
  br label %242

; <label>:242:                                    ; preds = %originalBBpart285, %213, %206
  %243 = load i32, i32* %11, align 4
  ret i32 %243

originalBBalteredBB:                              ; preds = %originalBB, %1
  %244 = alloca %union.tree_node*, align 8
  %245 = alloca i32, align 4
  %246 = alloca %union.tree_node*, align 8
  store %union.tree_node* %0, %union.tree_node** %244, align 8
  store i32 0, i32* %245, align 4
  %247 = load %union.tree_node*, %union.tree_node** %244, align 8
  store %union.tree_node* %247, %union.tree_node** %246, align 8
  %248 = load %union.tree_node*, %union.tree_node** %244, align 8
  %249 = bitcast %union.tree_node* %248 to %struct.tree_common*
  %250 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %249, i32 0, i32 2
  %251 = load i32, i32* %250, align 8
  %_ = sub i32 0, %251
  %gen = add i32 %_, 255
  %_1 = shl i32 %251, 255
  %_2 = sub i32 0, %251
  %gen3 = add i32 %_2, 255
  %252 = and i32 %251, 255
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i64 0, i64 %253
  %255 = load i8, i8* %254, align 1
  %256 = sext i8 %255 to i32
  %257 = icmp eq i32 %256, 100
  br label %originalBB

originalBB4alteredBB:                             ; preds = %originalBB4, %47
  %258 = load %union.tree_node*, %union.tree_node** %10, align 8
  %259 = bitcast %union.tree_node* %258 to %struct.tree_decl*
  %260 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %259, i32 0, i32 5
  %261 = bitcast i48* %260 to i64*
  %262 = load i64, i64* %261, align 8
  %_5 = shl i64 %262, 27
  %_6 = sub i64 0, %262
  %gen7 = add i64 %_6, 27
  %_8 = shl i64 %262, 27
  %263 = lshr i64 %262, 27
  %_9 = shl i64 %263, 1
  %_10 = sub i64 %263, 1
  %gen11 = mul i64 %_10, 1
  %_12 = shl i64 %263, 1
  %_13 = sub i64 0, %263
  %gen14 = add i64 %_13, 1
  %_15 = sub i64 0, %263
  %gen16 = add i64 %_15, 1
  %_17 = sub i64 0, %263
  %gen18 = add i64 %_17, 1
  %_19 = sub i64 0, %263
  %gen20 = add i64 %_19, 1
  %_21 = sub i64 %263, 1
  %gen22 = mul i64 %_21, 1
  %_23 = sub i64 0, %263
  %gen24 = add i64 %_23, 1
  %_25 = shl i64 %263, 1
  %264 = and i64 %263, 1
  %265 = trunc i64 %264 to i32
  %266 = icmp ne i32 %265, 0
  br label %originalBB4

originalBB29alteredBB:                            ; preds = %originalBB29, %73
  %267 = load i32, i32* %11, align 4
  %_30 = sub i32 0, %267
  %gen31 = add i32 %_30, 4
  %_32 = shl i32 %267, 4
  %_33 = shl i32 %267, 4
  %268 = or i32 %267, 4
  store i32 %268, i32* %11, align 4
  br label %originalBB29

originalBB37alteredBB:                            ; preds = %originalBB37, %92
  %269 = load %union.tree_node*, %union.tree_node** %10, align 8
  %270 = bitcast %union.tree_node* %269 to %struct.tree_common*
  %271 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %270, i32 0, i32 2
  %272 = load i32, i32* %271, align 8
  %_38 = sub i32 0, %272
  %gen39 = add i32 %_38, 255
  %_40 = sub i32 0, %272
  %gen41 = add i32 %_40, 255
  %_42 = shl i32 %272, 255
  %273 = and i32 %272, 255
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i64 0, i64 %274
  %276 = load i8, i8* %275, align 1
  %277 = sext i8 %276 to i32
  %278 = icmp eq i32 %277, 100
  br label %originalBB37

originalBB46alteredBB:                            ; preds = %originalBB46, %140
  %279 = load i32, i32* %11, align 4
  %_47 = shl i32 %279, 16
  %_48 = shl i32 %279, 16
  %280 = or i32 %279, 16
  store i32 %280, i32* %11, align 4
  br label %originalBB46

originalBB52alteredBB:                            ; preds = %originalBB52, %168
  %281 = load %union.tree_node*, %union.tree_node** %10, align 8
  %282 = bitcast %union.tree_node* %281 to %struct.tree_common*
  %283 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %282, i32 0, i32 2
  %284 = load i32, i32* %283, align 8
  %_53 = sub i32 0, %284
  %gen54 = add i32 %_53, 11
  %_55 = sub i32 0, %284
  %gen56 = add i32 %_55, 11
  %_57 = sub i32 %284, 11
  %gen58 = mul i32 %_57, 11
  %_59 = sub i32 0, %284
  %gen60 = add i32 %_59, 11
  %_61 = shl i32 %284, 11
  %285 = lshr i32 %284, 11
  %_62 = shl i32 %285, 1
  %286 = and i32 %285, 1
  %287 = icmp ne i32 %286, 0
  br label %originalBB52

originalBB66alteredBB:                            ; preds = %originalBB66, %221
  %288 = load i32, i32* %11, align 4
  %_67 = sub i32 %288, 1024
  %gen68 = mul i32 %_67, 1024
  %_69 = sub i32 %288, 1024
  %gen70 = mul i32 %_69, 1024
  %_71 = sub i32 0, %288
  %gen72 = add i32 %_71, 1024
  %_73 = shl i32 %288, 1024
  %_74 = sub i32 %288, 1024
  %gen75 = mul i32 %_74, 1024
  %289 = or i32 %288, 1024
  store i32 %289, i32* %11, align 4
  %290 = load i32, i32* %11, align 4
  %_76 = shl i32 %290, -4610
  %_77 = sub i32 0, %290
  %gen78 = add i32 %_77, -4610
  %_79 = sub i32 %290, -4610
  %gen80 = mul i32 %_79, -4610
  %_81 = shl i32 %290, -4610
  %_82 = shl i32 %290, -4610
  %_83 = shl i32 %290, -4610
  %291 = and i32 %290, -4610
  store i32 %291, i32* %11, align 4
  br label %originalBB66
}

declare i32 @aggregate_value_p(%union.tree_node*) #1

declare i64 @int_size_in_bytes(%union.tree_node*) #1

declare %struct.rtx_def* @assign_temp(%union.tree_node*, i32, i32, i32) #1

declare void @mark_temp_addr_taken(%struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @try_to_integrate(%union.tree_node*, %union.tree_node*, %struct.rtx_def*, i32, %union.tree_node*, %struct.rtx_def*) #0 {
  %7 = load i32, i32* @x.9
  %8 = load i32, i32* @y.10
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %6
  %15 = alloca %struct.rtx_def*, align 8
  %16 = alloca %union.tree_node*, align 8
  %17 = alloca %union.tree_node*, align 8
  %18 = alloca %struct.rtx_def*, align 8
  %19 = alloca i32, align 4
  %20 = alloca %union.tree_node*, align 8
  %21 = alloca %struct.rtx_def*, align 8
  %22 = alloca %struct.rtx_def*, align 8
  %23 = alloca %struct.rtx_def*, align 8
  %24 = alloca i32, align 4
  %25 = alloca %struct.rtx_def*, align 8
  %26 = alloca i32, align 4
  %27 = alloca %struct.rtx_def*, align 8
  %28 = alloca %struct.rtx_def*, align 8
  %29 = alloca %struct.rtx_def*, align 8
  %30 = alloca i32, align 4
  store %union.tree_node* %0, %union.tree_node** %16, align 8
  store %union.tree_node* %1, %union.tree_node** %17, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %18, align 8
  store i32 %3, i32* %19, align 4
  store %union.tree_node* %4, %union.tree_node** %20, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %21, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %25, align 8
  store i32 0, i32* %26, align 4
  store i32 0, i32* %26, align 4
  %31 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %31, %struct.rtx_def** %23, align 8
  call void @timevar_push(i32 12)
  %32 = load %union.tree_node*, %union.tree_node** %16, align 8
  %33 = load %union.tree_node*, %union.tree_node** %17, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %35 = load i32, i32* %19, align 4
  %36 = load %union.tree_node*, %union.tree_node** %20, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %38 = call %struct.rtx_def* @expand_inline_function(%union.tree_node* %32, %union.tree_node* %33, %struct.rtx_def* %34, i32 %35, %union.tree_node* %36, %struct.rtx_def* %37)
  store %struct.rtx_def* %38, %struct.rtx_def** %22, align 8
  call void @timevar_pop(i32 12)
  %39 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %40 = icmp ne %struct.rtx_def* %39, inttoptr (i64 -1 to %struct.rtx_def*)
  %41 = load i32, i32* @x.9
  %42 = load i32, i32* @y.10
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %40, label %49, label %288

; <label>:49:                                     ; preds = %originalBBpart2
  %50 = load i32, i32* @target_flags, align 4
  %51 = and i32 %50, 4096
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %243

; <label>:53:                                     ; preds = %49
  %54 = load i32, i32* %26, align 4
  %55 = sub nsw i32 %54, 1
  store i32 %55, i32* %24, align 4
  br label %56

; <label>:56:                                     ; preds = %105, %53
  %57 = load i32, i32* @x.9
  %58 = load i32, i32* @y.10
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %56
  %65 = load i32, i32* %24, align 4
  %66 = icmp sge i32 %65, 0
  %67 = load i32, i32* @x.9
  %68 = load i32, i32* @y.10
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %66, label %75, label %108

; <label>:75:                                     ; preds = %originalBBpart24
  %76 = load i32, i32* @x.9
  %77 = load i32, i32* @y.10
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %75
  %84 = load i32, i32* %24, align 4
  %85 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %86 = icmp slt i32 %84, %85
  %87 = load i32, i32* @x.9
  %88 = load i32, i32* @y.10
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %86, label %95, label %104

; <label>:95:                                     ; preds = %originalBBpart28
  %96 = load i8*, i8** @stack_usage_map, align 8
  %97 = load i32, i32* %24, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %96, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = sext i8 %100 to i32
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %104

; <label>:103:                                    ; preds = %95
  br label %108

; <label>:104:                                    ; preds = %95, %originalBBpart28
  br label %105

; <label>:105:                                    ; preds = %104
  %106 = load i32, i32* %24, align 4
  %107 = add nsw i32 %106, -1
  store i32 %107, i32* %24, align 4
  br label %56

; <label>:108:                                    ; preds = %103, %originalBBpart24
  %109 = load i32, i32* @x.9
  %110 = load i32, i32* @y.10
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %108
  %117 = load i32, i32* @stack_arg_under_construction, align 4
  %118 = icmp ne i32 %117, 0
  %119 = load i32, i32* @x.9
  %120 = load i32, i32* @y.10
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %118, label %146, label %127

; <label>:127:                                    ; preds = %originalBBpart212
  %128 = load i32, i32* @x.9
  %129 = load i32, i32* @y.10
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %127
  %136 = load i32, i32* %24, align 4
  %137 = icmp sge i32 %136, 0
  %138 = load i32, i32* @x.9
  %139 = load i32, i32* @y.10
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %137, label %146, label %242

; <label>:146:                                    ; preds = %originalBBpart216, %originalBBpart212
  %147 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %148 = icmp ne %struct.rtx_def* %147, null
  br i1 %148, label %149, label %171

; <label>:149:                                    ; preds = %146
  %150 = load i32, i32* @x.9
  %151 = load i32, i32* @y.10
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %149
  %158 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %158, i32 0, i32 1
  %160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %159, i64 0, i64 2
  %161 = bitcast %union.rtunion_def* %160 to %struct.rtx_def**
  %162 = load %struct.rtx_def*, %struct.rtx_def** %161, align 8
  %163 = load i32, i32* @x.9
  %164 = load i32, i32* @y.10
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %173

; <label>:171:                                    ; preds = %146
  %172 = call %struct.rtx_def* @get_insns()
  br label %173

; <label>:173:                                    ; preds = %171, %originalBBpart220
  %174 = phi %struct.rtx_def* [ %162, %originalBBpart220 ], [ %172, %171 ]
  store %struct.rtx_def* %174, %struct.rtx_def** %27, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %28, align 8
  %175 = load %union.tree_node*, %union.tree_node** %16, align 8
  %176 = bitcast %union.tree_node* %175 to %struct.tree_decl*
  %177 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %176, i32 0, i32 19
  %178 = bitcast %union.anon.1* %177 to %struct.function**
  %179 = load %struct.function*, %struct.function** %178, align 8
  %180 = getelementptr inbounds %struct.function, %struct.function* %179, i32 0, i32 11
  %181 = load i32, i32* %180, align 4
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %219

; <label>:183:                                    ; preds = %173
  %184 = load i32, i32* @x.9
  %185 = load i32, i32* @y.10
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %183
  %192 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  store %struct.rtx_def* %192, %struct.rtx_def** %28, align 8
  %193 = load i32, i32* @x.9
  %194 = load i32, i32* @y.10
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %201

; <label>:201:                                    ; preds = %212, %originalBBpart224
  %202 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8
  %203 = icmp ne %struct.rtx_def* %202, null
  br i1 %203, label %204, label %218

; <label>:204:                                    ; preds = %201
  %205 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8
  %206 = bitcast %struct.rtx_def* %205 to i32*
  %207 = load i32, i32* %206, align 8
  %208 = and i32 %207, 65535
  %209 = icmp eq i32 %208, 34
  br i1 %209, label %210, label %211

; <label>:210:                                    ; preds = %204
  br label %218

; <label>:211:                                    ; preds = %204
  br label %212

; <label>:212:                                    ; preds = %211
  %213 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8
  %214 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %213, i32 0, i32 1
  %215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %214, i64 0, i64 2
  %216 = bitcast %union.rtunion_def* %215 to %struct.rtx_def**
  %217 = load %struct.rtx_def*, %struct.rtx_def** %216, align 8
  store %struct.rtx_def* %217, %struct.rtx_def** %28, align 8
  br label %201

; <label>:218:                                    ; preds = %210, %201
  br label %219

; <label>:219:                                    ; preds = %218, %173
  %220 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8
  %221 = icmp ne %struct.rtx_def* %220, null
  br i1 %221, label %222, label %241

; <label>:222:                                    ; preds = %219
  %223 = load %union.tree_node*, %union.tree_node** %16, align 8
  %224 = bitcast %union.tree_node* %223 to %struct.tree_decl*
  %225 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %224, i32 0, i32 19
  %226 = bitcast %union.anon.1* %225 to %struct.function**
  %227 = load %struct.function*, %struct.function** %226, align 8
  %228 = getelementptr inbounds %struct.function, %struct.function* %227, i32 0, i32 11
  %229 = load i32, i32* %228, align 4
  %230 = load i32, i32* %26, align 4
  %231 = add nsw i32 %229, %230
  store i32 %231, i32* %30, align 4
  call void @start_sequence()
  call void @emit_stack_save(i32 0, %struct.rtx_def** %25, %struct.rtx_def* null)
  %232 = load i32, i32* %30, align 4
  %233 = sext i32 %232 to i64
  %234 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %233)
  %235 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %234, %struct.rtx_def* null, i32 8)
  %236 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %236, %struct.rtx_def** %29, align 8
  call void @end_sequence()
  %237 = load %struct.rtx_def*, %struct.rtx_def** %29, align 8
  %238 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %239 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %237, %struct.rtx_def* %238)
  %240 = load %struct.rtx_def*, %struct.rtx_def** %25, align 8
  call void @emit_stack_restore(i32 0, %struct.rtx_def* %240, %struct.rtx_def* null)
  br label %241

; <label>:241:                                    ; preds = %222, %219
  br label %242

; <label>:242:                                    ; preds = %241, %originalBBpart216
  br label %243

; <label>:243:                                    ; preds = %242, %49
  %244 = load i32, i32* @x.9
  %245 = load i32, i32* @y.10
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %243
  %252 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %253 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %254 = icmp ne %struct.rtx_def* %252, %253
  %255 = load i32, i32* @x.9
  %256 = load i32, i32* @y.10
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %254, label %263, label %286

; <label>:263:                                    ; preds = %originalBBpart228
  %264 = load i32, i32* @x.9
  %265 = load i32, i32* @y.10
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %263
  %272 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %273 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %274 = call i32 @rtx_equal_p(%struct.rtx_def* %272, %struct.rtx_def* %273)
  %275 = icmp ne i32 %274, 0
  %276 = load i32, i32* @x.9
  %277 = load i32, i32* @y.10
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %275, label %284, label %286

; <label>:284:                                    ; preds = %originalBBpart232
  %285 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  store %struct.rtx_def* %285, %struct.rtx_def** %15, align 8
  br label %368

; <label>:286:                                    ; preds = %originalBBpart232, %originalBBpart228
  %287 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  store %struct.rtx_def* %287, %struct.rtx_def** %15, align 8
  br label %368

; <label>:288:                                    ; preds = %originalBBpart2
  %289 = load %union.tree_node*, %union.tree_node** %16, align 8
  %290 = bitcast %union.tree_node* %289 to %struct.tree_decl*
  %291 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %290, i32 0, i32 5
  %292 = bitcast i48* %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = lshr i64 %293, 11
  %295 = and i64 %294, 1
  %296 = trunc i64 %295 to i32
  %297 = icmp ne i32 %296, 0
  br i1 %297, label %298, label %365

; <label>:298:                                    ; preds = %288
  %299 = load i32, i32* @x.9
  %300 = load i32, i32* @y.10
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %298
  %307 = load i32, i32* @warn_inline, align 4
  %308 = icmp ne i32 %307, 0
  %309 = load i32, i32* @x.9
  %310 = load i32, i32* @y.10
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %308, label %317, label %365

; <label>:317:                                    ; preds = %originalBBpart236
  %318 = load i32, i32* @flag_no_inline, align 4
  %319 = icmp ne i32 %318, 0
  br i1 %319, label %365, label %320

; <label>:320:                                    ; preds = %317
  %321 = load i32, i32* @x.9
  %322 = load i32, i32* @y.10
  %323 = sub i32 %321, 1
  %324 = mul i32 %321, %323
  %325 = urem i32 %324, 2
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %326, %327
  br i1 %328, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %320
  %329 = load i32, i32* @optimize, align 4
  %330 = icmp sgt i32 %329, 0
  %331 = load i32, i32* @x.9
  %332 = load i32, i32* @y.10
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %330, label %339, label %365

; <label>:339:                                    ; preds = %originalBBpart240
  %340 = load i32, i32* @x.9
  %341 = load i32, i32* @y.10
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %339
  %348 = load %union.tree_node*, %union.tree_node** %16, align 8
  %349 = bitcast %union.tree_node* %348 to %struct.tree_common*
  %350 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %349, i32 0, i32 2
  %351 = load i32, i32* %350, align 8
  %352 = lshr i32 %351, 10
  %353 = and i32 %352, 1
  %354 = icmp ne i32 %353, 0
  %355 = load i32, i32* @x.9
  %356 = load i32, i32* @y.10
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBBpart250, label %originalBB42alteredBB

originalBBpart250:                                ; preds = %originalBB42
  br i1 %354, label %365, label %363

; <label>:363:                                    ; preds = %originalBBpart250
  %364 = load %union.tree_node*, %union.tree_node** %16, align 8
  call void (%union.tree_node*, i8*, ...) @warning_with_decl(%union.tree_node* %364, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.20, i32 0, i32 0))
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  br label %365

; <label>:365:                                    ; preds = %363, %originalBBpart250, %originalBBpart240, %317, %originalBBpart236, %288
  %366 = load %union.tree_node*, %union.tree_node** %16, align 8
  %367 = call i32 @mark_addressable(%union.tree_node* %366)
  store %struct.rtx_def* inttoptr (i64 -1 to %struct.rtx_def*), %struct.rtx_def** %15, align 8
  br label %368

; <label>:368:                                    ; preds = %365, %286, %284
  %369 = load i32, i32* @x.9
  %370 = load i32, i32* @y.10
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %originalBB52alteredBB, %368
  %377 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %378 = load i32, i32* @x.9
  %379 = load i32, i32* @y.10
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  ret %struct.rtx_def* %377

originalBBalteredBB:                              ; preds = %originalBB, %6
  %386 = alloca %struct.rtx_def*, align 8
  %387 = alloca %union.tree_node*, align 8
  %388 = alloca %union.tree_node*, align 8
  %389 = alloca %struct.rtx_def*, align 8
  %390 = alloca i32, align 4
  %391 = alloca %union.tree_node*, align 8
  %392 = alloca %struct.rtx_def*, align 8
  %393 = alloca %struct.rtx_def*, align 8
  %394 = alloca %struct.rtx_def*, align 8
  %395 = alloca i32, align 4
  %396 = alloca %struct.rtx_def*, align 8
  %397 = alloca i32, align 4
  %398 = alloca %struct.rtx_def*, align 8
  %399 = alloca %struct.rtx_def*, align 8
  %400 = alloca %struct.rtx_def*, align 8
  %401 = alloca i32, align 4
  store %union.tree_node* %0, %union.tree_node** %387, align 8
  store %union.tree_node* %1, %union.tree_node** %388, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %389, align 8
  store i32 %3, i32* %390, align 4
  store %union.tree_node* %4, %union.tree_node** %391, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %392, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %396, align 8
  store i32 0, i32* %397, align 4
  store i32 0, i32* %397, align 4
  %402 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %402, %struct.rtx_def** %394, align 8
  call void @timevar_push(i32 12)
  %403 = load %union.tree_node*, %union.tree_node** %387, align 8
  %404 = load %union.tree_node*, %union.tree_node** %388, align 8
  %405 = load %struct.rtx_def*, %struct.rtx_def** %389, align 8
  %406 = load i32, i32* %390, align 4
  %407 = load %union.tree_node*, %union.tree_node** %391, align 8
  %408 = load %struct.rtx_def*, %struct.rtx_def** %392, align 8
  %409 = call %struct.rtx_def* @expand_inline_function(%union.tree_node* %403, %union.tree_node* %404, %struct.rtx_def* %405, i32 %406, %union.tree_node* %407, %struct.rtx_def* %408)
  store %struct.rtx_def* %409, %struct.rtx_def** %393, align 8
  call void @timevar_pop(i32 12)
  %410 = load %struct.rtx_def*, %struct.rtx_def** %393, align 8
  %411 = icmp ne %struct.rtx_def* %410, inttoptr (i64 -1 to %struct.rtx_def*)
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %56
  %412 = load i32, i32* %24, align 4
  %413 = icmp sge i32 %412, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %75
  %414 = load i32, i32* %24, align 4
  %415 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %416 = icmp slt i32 %414, %415
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %108
  %417 = load i32, i32* @stack_arg_under_construction, align 4
  %418 = icmp ne i32 %417, 0
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %127
  %419 = load i32, i32* %24, align 4
  %420 = icmp sge i32 %419, 0
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %149
  %421 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %422 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %421, i32 0, i32 1
  %423 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %422, i64 0, i64 2
  %424 = bitcast %union.rtunion_def* %423 to %struct.rtx_def**
  %425 = load %struct.rtx_def*, %struct.rtx_def** %424, align 8
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %183
  %426 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  store %struct.rtx_def* %426, %struct.rtx_def** %28, align 8
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %243
  %427 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %428 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %429 = icmp ne %struct.rtx_def* %427, %428
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %263
  %430 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %431 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %432 = call i32 @rtx_equal_p(%struct.rtx_def* %430, %struct.rtx_def* %431)
  %433 = icmp ne i32 %432, 0
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %298
  %434 = load i32, i32* @warn_inline, align 4
  %435 = icmp ne i32 %434, 0
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %320
  %436 = load i32, i32* @optimize, align 4
  %437 = icmp sgt i32 %436, 0
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %339
  %438 = load %union.tree_node*, %union.tree_node** %16, align 8
  %439 = bitcast %union.tree_node* %438 to %struct.tree_common*
  %440 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %439, i32 0, i32 2
  %441 = load i32, i32* %440, align 8
  %_ = shl i32 %441, 10
  %_43 = sub i32 %441, 10
  %gen = mul i32 %_43, 10
  %_44 = sub i32 0, %441
  %gen45 = add i32 %_44, 10
  %442 = lshr i32 %441, 10
  %_46 = sub i32 %442, 1
  %gen47 = mul i32 %_46, 1
  %_48 = shl i32 %442, 1
  %443 = and i32 %442, 1
  %444 = icmp ne i32 %443, 0
  br label %originalBB42

originalBB52alteredBB:                            ; preds = %originalBB52, %368
  %445 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  br label %originalBB52
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

declare %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def*) #1

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #1

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #1

declare void @init_cumulative_args(%struct.ix86_args*, %union.tree_node*, %struct.rtx_def*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #3

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_argument_information(i32, %struct.arg_data*, %struct.args_size*, i32, %union.tree_node*, %union.tree_node*, %struct.ix86_args*, i32, %struct.rtx_def**, i32*, i32*, i32*) #0 {
  %13 = alloca i32, align 4
  %14 = alloca %struct.arg_data*, align 8
  %15 = alloca %struct.args_size*, align 8
  %16 = alloca i32, align 4
  %17 = alloca %union.tree_node*, align 8
  %18 = alloca %union.tree_node*, align 8
  %19 = alloca %struct.ix86_args*, align 8
  %20 = alloca i32, align 4
  %21 = alloca %struct.rtx_def**, align 8
  %22 = alloca i32*, align 8
  %23 = alloca i32*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca %struct.args_size, align 8
  %28 = alloca i32, align 4
  %29 = alloca %union.tree_node*, align 8
  %30 = alloca %union.tree_node*, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca %struct.rtx_def*, align 8
  %34 = alloca %struct.rtx_def*, align 8
  %35 = alloca %union.tree_node*, align 8
  store i32 %0, i32* %13, align 4
  store %struct.arg_data* %1, %struct.arg_data** %14, align 8
  store %struct.args_size* %2, %struct.args_size** %15, align 8
  store i32 %3, i32* %16, align 4
  store %union.tree_node* %4, %union.tree_node** %17, align 8
  store %union.tree_node* %5, %union.tree_node** %18, align 8
  store %struct.ix86_args* %6, %struct.ix86_args** %19, align 8
  store i32 %7, i32* %20, align 4
  store %struct.rtx_def** %8, %struct.rtx_def*** %21, align 8
  store i32* %9, i32** %22, align 8
  store i32* %10, i32** %23, align 8
  store i32* %11, i32** %24, align 8
  %36 = load %struct.args_size*, %struct.args_size** %15, align 8
  %37 = getelementptr inbounds %struct.args_size, %struct.args_size* %36, i32 0, i32 0
  store i64 0, i64* %37, align 8
  %38 = load %struct.args_size*, %struct.args_size** %15, align 8
  %39 = getelementptr inbounds %struct.args_size, %struct.args_size* %38, i32 0, i32 1
  store %union.tree_node* null, %union.tree_node** %39, align 8
  %40 = load i32, i32* @target_flags, align 4
  %41 = and i32 %40, 2048
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %66, label %43

; <label>:43:                                     ; preds = %12
  %44 = load i32, i32* @target_flags, align 4
  %45 = and i32 %44, 4096
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %66, label %47

; <label>:47:                                     ; preds = %43
  %48 = load i32, i32* @x.11
  %49 = load i32, i32* @y.12
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %47
  %56 = load i32, i32* %13, align 4
  %57 = sub nsw i32 %56, 1
  store i32 %57, i32* %28, align 4
  store i32 -1, i32* %25, align 4
  %58 = load i32, i32* @x.11
  %59 = load i32, i32* @y.12
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %67

; <label>:66:                                     ; preds = %43, %12
  store i32 0, i32* %28, align 4
  store i32 1, i32* %25, align 4
  br label %67

; <label>:67:                                     ; preds = %66, %originalBBpart2
  %68 = load i32, i32* @x.11
  %69 = load i32, i32* @y.12
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %originalBB11alteredBB, %67
  %76 = load %union.tree_node*, %union.tree_node** %17, align 8
  store %union.tree_node* %76, %union.tree_node** %29, align 8
  store i32 0, i32* %26, align 4
  %77 = load i32, i32* @x.11
  %78 = load i32, i32* @y.12
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %85

; <label>:85:                                     ; preds = %1169, %originalBBpart213
  %86 = load %union.tree_node*, %union.tree_node** %29, align 8
  %87 = icmp ne %union.tree_node* %86, null
  br i1 %87, label %88, label %1179

; <label>:88:                                     ; preds = %85
  %89 = load i32, i32* @x.11
  %90 = load i32, i32* @y.12
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %88
  %97 = load %union.tree_node*, %union.tree_node** %29, align 8
  %98 = bitcast %union.tree_node* %97 to %struct.tree_list*
  %99 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %98, i32 0, i32 2
  %100 = load %union.tree_node*, %union.tree_node** %99, align 8
  %101 = bitcast %union.tree_node* %100 to %struct.tree_common*
  %102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %101, i32 0, i32 1
  %103 = load %union.tree_node*, %union.tree_node** %102, align 8
  store %union.tree_node* %103, %union.tree_node** %30, align 8
  %104 = load %union.tree_node*, %union.tree_node** %29, align 8
  %105 = bitcast %union.tree_node* %104 to %struct.tree_list*
  %106 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %105, i32 0, i32 2
  %107 = load %union.tree_node*, %union.tree_node** %106, align 8
  %108 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %109 = load i32, i32* %28, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %108, i64 %110
  %112 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %111, i32 0, i32 0
  store %union.tree_node* %107, %union.tree_node** %112, align 8
  %113 = load %union.tree_node*, %union.tree_node** %30, align 8
  %114 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16
  %115 = icmp eq %union.tree_node* %113, %114
  %116 = load i32, i32* @x.11
  %117 = load i32, i32* @y.12
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %115, label %130, label %124

; <label>:124:                                    ; preds = %originalBBpart217
  %125 = load %union.tree_node*, %union.tree_node** %30, align 8
  %126 = bitcast %union.tree_node* %125 to %struct.tree_type*
  %127 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %126, i32 0, i32 2
  %128 = load %union.tree_node*, %union.tree_node** %127, align 8
  %129 = icmp ne %union.tree_node* %128, null
  br i1 %129, label %138, label %130

; <label>:130:                                    ; preds = %124, %originalBBpart217
  %131 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8
  %132 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %133 = load i32, i32* %28, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %132, i64 %134
  %136 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %135, i32 0, i32 0
  store %union.tree_node* %131, %union.tree_node** %136, align 8
  %137 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8
  store %union.tree_node* %137, %union.tree_node** %30, align 8
  br label %138

; <label>:138:                                    ; preds = %130, %124
  %139 = load %union.tree_node*, %union.tree_node** %30, align 8
  %140 = bitcast %union.tree_node* %139 to %struct.tree_common*
  %141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %140, i32 0, i32 2
  %142 = load i32, i32* %141, align 8
  %143 = and i32 %142, 255
  %144 = icmp eq i32 %143, 21
  br i1 %144, label %145, label %177

; <label>:145:                                    ; preds = %138
  %146 = load %union.tree_node*, %union.tree_node** %30, align 8
  %147 = bitcast %union.tree_node* %146 to %struct.tree_type*
  %148 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %147, i32 0, i32 6
  %149 = load i32, i32* %148, align 4
  %150 = lshr i32 %149, 19
  %151 = and i32 %150, 1
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %153, label %177

; <label>:153:                                    ; preds = %145
  %154 = load i32, i32* @x.11
  %155 = load i32, i32* @y.12
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %153
  %162 = load %union.tree_node*, %union.tree_node** %30, align 8
  %163 = bitcast %union.tree_node* %162 to %struct.tree_type*
  %164 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %163, i32 0, i32 1
  %165 = load %union.tree_node*, %union.tree_node** %164, align 8
  %166 = bitcast %union.tree_node* %165 to %struct.tree_common*
  %167 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %166, i32 0, i32 1
  %168 = load %union.tree_node*, %union.tree_node** %167, align 8
  store %union.tree_node* %168, %union.tree_node** %30, align 8
  %169 = load i32, i32* @x.11
  %170 = load i32, i32* @y.12
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %177

; <label>:177:                                    ; preds = %originalBBpart221, %145, %138
  %178 = load %union.tree_node*, %union.tree_node** %30, align 8
  %179 = bitcast %union.tree_node* %178 to %struct.tree_type*
  %180 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %179, i32 0, i32 2
  %181 = load %union.tree_node*, %union.tree_node** %180, align 8
  %182 = bitcast %union.tree_node* %181 to %struct.tree_common*
  %183 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %182, i32 0, i32 2
  %184 = load i32, i32* %183, align 8
  %185 = and i32 %184, 255
  %186 = icmp ne i32 %185, 25
  br i1 %186, label %187, label %194

; <label>:187:                                    ; preds = %177
  %188 = load %union.tree_node*, %union.tree_node** %30, align 8
  %189 = bitcast %union.tree_node* %188 to %struct.tree_type*
  %190 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %189, i32 0, i32 2
  %191 = load %union.tree_node*, %union.tree_node** %190, align 8
  %192 = call i32 @contains_placeholder_p(%union.tree_node* %191)
  %193 = icmp ne i32 %192, 0
  br i1 %193, label %202, label %194

; <label>:194:                                    ; preds = %187, %177
  %195 = load %union.tree_node*, %union.tree_node** %30, align 8
  %196 = bitcast %union.tree_node* %195 to %struct.tree_common*
  %197 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %196, i32 0, i32 2
  %198 = load i32, i32* %197, align 8
  %199 = lshr i32 %198, 10
  %200 = and i32 %199, 1
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %202, label %633

; <label>:202:                                    ; preds = %194, %187
  %203 = load i32, i32* @x.11
  %204 = load i32, i32* @y.12
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %202
  %211 = load %struct.function*, %struct.function** @cfun, align 8
  %212 = getelementptr inbounds %struct.function, %struct.function* %211, i32 0, i32 56
  %213 = bitcast i24* %212 to i32*
  %214 = load i32, i32* %213, align 8
  %215 = lshr i32 %214, 12
  %216 = and i32 %215, 1
  %217 = icmp ne i32 %216, 0
  %218 = load i32, i32* @x.11
  %219 = load i32, i32* @y.12
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart239, label %originalBB23alteredBB

originalBBpart239:                                ; preds = %originalBB23
  br i1 %217, label %226, label %446

; <label>:226:                                    ; preds = %originalBBpart239
  %227 = load i32, i32* @x.11
  %228 = load i32, i32* @y.12
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %226
  %235 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %236 = load i32, i32* %28, align 4
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %235, i64 %237
  %239 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %238, i32 0, i32 0
  %240 = load %union.tree_node*, %union.tree_node** %239, align 8
  %241 = bitcast %union.tree_node* %240 to %struct.tree_common*
  %242 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %241, i32 0, i32 2
  %243 = load i32, i32* %242, align 8
  %244 = and i32 %243, 255
  %245 = icmp eq i32 %244, 50
  %246 = load i32, i32* @x.11
  %247 = load i32, i32* @y.12
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart245, label %originalBB41alteredBB

originalBBpart245:                                ; preds = %originalBB41
  br i1 %245, label %254, label %429

; <label>:254:                                    ; preds = %originalBBpart245
  %255 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %256 = load i32, i32* %28, align 4
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %255, i64 %257
  %259 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %258, i32 0, i32 0
  %260 = load %union.tree_node*, %union.tree_node** %259, align 8
  %261 = bitcast %union.tree_node* %260 to %struct.tree_exp*
  %262 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %261, i32 0, i32 2
  %263 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %262, i64 0, i64 1
  %264 = load %union.tree_node*, %union.tree_node** %263, align 8
  %265 = bitcast %union.tree_node* %264 to %struct.tree_common*
  %266 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %265, i32 0, i32 2
  %267 = load i32, i32* %266, align 8
  %268 = and i32 %267, 255
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i64 0, i64 %269
  %271 = load i8, i8* %270, align 1
  %272 = sext i8 %271 to i32
  %273 = icmp eq i32 %272, 100
  br i1 %273, label %274, label %429

; <label>:274:                                    ; preds = %254
  %275 = load i32, i32* @x.11
  %276 = load i32, i32* @y.12
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %originalBB47alteredBB, %274
  %283 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %284 = load i32, i32* %28, align 4
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %283, i64 %285
  %287 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %286, i32 0, i32 0
  %288 = load %union.tree_node*, %union.tree_node** %287, align 8
  %289 = bitcast %union.tree_node* %288 to %struct.tree_exp*
  %290 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %289, i32 0, i32 2
  %291 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %290, i64 0, i64 1
  %292 = load %union.tree_node*, %union.tree_node** %291, align 8
  %293 = bitcast %union.tree_node* %292 to %struct.tree_decl*
  %294 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %293, i32 0, i32 17
  %295 = load %struct.rtx_def*, %struct.rtx_def** %294, align 8
  %296 = icmp ne %struct.rtx_def* %295, null
  %297 = load i32, i32* @x.11
  %298 = load i32, i32* @y.12
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br i1 %296, label %305, label %335

; <label>:305:                                    ; preds = %originalBBpart249
  %306 = load i32, i32* @x.11
  %307 = load i32, i32* @y.12
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %originalBB51alteredBB, %305
  %314 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %315 = load i32, i32* %28, align 4
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %314, i64 %316
  %318 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %317, i32 0, i32 0
  %319 = load %union.tree_node*, %union.tree_node** %318, align 8
  %320 = bitcast %union.tree_node* %319 to %struct.tree_exp*
  %321 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %320, i32 0, i32 2
  %322 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %321, i64 0, i64 1
  %323 = load %union.tree_node*, %union.tree_node** %322, align 8
  %324 = bitcast %union.tree_node* %323 to %struct.tree_decl*
  %325 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %324, i32 0, i32 17
  %326 = load %struct.rtx_def*, %struct.rtx_def** %325, align 8
  %327 = load i32, i32* @x.11
  %328 = load i32, i32* @y.12
  %329 = sub i32 %327, 1
  %330 = mul i32 %327, %329
  %331 = urem i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %332, %333
  br i1 %334, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br label %375

; <label>:335:                                    ; preds = %originalBBpart249
  %336 = load i32, i32* @x.11
  %337 = load i32, i32* @y.12
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %originalBB55alteredBB, %335
  %344 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %345 = load i32, i32* %28, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %344, i64 %346
  %348 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %347, i32 0, i32 0
  %349 = load %union.tree_node*, %union.tree_node** %348, align 8
  %350 = bitcast %union.tree_node* %349 to %struct.tree_exp*
  %351 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %350, i32 0, i32 2
  %352 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %351, i64 0, i64 1
  %353 = load %union.tree_node*, %union.tree_node** %352, align 8
  call void @make_decl_rtl(%union.tree_node* %353, i8* null)
  %354 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %355 = load i32, i32* %28, align 4
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %354, i64 %356
  %358 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %357, i32 0, i32 0
  %359 = load %union.tree_node*, %union.tree_node** %358, align 8
  %360 = bitcast %union.tree_node* %359 to %struct.tree_exp*
  %361 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %360, i32 0, i32 2
  %362 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %361, i64 0, i64 1
  %363 = load %union.tree_node*, %union.tree_node** %362, align 8
  %364 = bitcast %union.tree_node* %363 to %struct.tree_decl*
  %365 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %364, i32 0, i32 17
  %366 = load %struct.rtx_def*, %struct.rtx_def** %365, align 8
  %367 = load i32, i32* @x.11
  %368 = load i32, i32* @y.12
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br label %375

; <label>:375:                                    ; preds = %originalBBpart257, %originalBBpart253
  %376 = phi %struct.rtx_def* [ %326, %originalBBpart253 ], [ %366, %originalBBpart257 ]
  %377 = load i32, i32* @x.11
  %378 = load i32, i32* @y.12
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %originalBB59alteredBB, %375
  %385 = bitcast %struct.rtx_def* %376 to i32*
  %386 = load i32, i32* %385, align 8
  %387 = and i32 %386, 65535
  %388 = icmp eq i32 %387, 61
  %389 = load i32, i32* @x.11
  %390 = load i32, i32* @y.12
  %391 = sub i32 %389, 1
  %392 = mul i32 %389, %391
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %394, %395
  br i1 %396, label %originalBBpart270, label %originalBB59alteredBB

originalBBpart270:                                ; preds = %originalBB59
  br i1 %388, label %429, label %397

; <label>:397:                                    ; preds = %originalBBpart270
  %398 = load i32, i32* @x.11
  %399 = load i32, i32* @y.12
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %originalBB72alteredBB, %397
  %406 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %407 = load i32, i32* %28, align 4
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %406, i64 %408
  %410 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %409, i32 0, i32 0
  %411 = load %union.tree_node*, %union.tree_node** %410, align 8
  %412 = bitcast %union.tree_node* %411 to %struct.tree_exp*
  %413 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %412, i32 0, i32 2
  %414 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %413, i64 0, i64 1
  %415 = load %union.tree_node*, %union.tree_node** %414, align 8
  %416 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %417 = load i32, i32* %28, align 4
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %416, i64 %418
  %420 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %419, i32 0, i32 0
  store %union.tree_node* %415, %union.tree_node** %420, align 8
  %421 = load i32, i32* @x.11
  %422 = load i32, i32* @y.12
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBBpart274, label %originalBB72alteredBB

originalBBpart274:                                ; preds = %originalBB72
  br label %429

; <label>:429:                                    ; preds = %originalBBpart274, %originalBBpart270, %254, %originalBBpart245
  %430 = load %union.tree_node*, %union.tree_node** %30, align 8
  %431 = call %union.tree_node* @build_pointer_type(%union.tree_node* %430)
  %432 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %433 = load i32, i32* %28, align 4
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %432, i64 %434
  %436 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %435, i32 0, i32 0
  %437 = load %union.tree_node*, %union.tree_node** %436, align 8
  %438 = call %union.tree_node* @build1(i32 121, %union.tree_node* %431, %union.tree_node* %437)
  %439 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %440 = load i32, i32* %28, align 4
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %439, i64 %441
  %443 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %442, i32 0, i32 0
  store %union.tree_node* %438, %union.tree_node** %443, align 8
  %444 = load %union.tree_node*, %union.tree_node** %30, align 8
  %445 = call %union.tree_node* @build_pointer_type(%union.tree_node* %444)
  store %union.tree_node* %445, %union.tree_node** %30, align 8
  br label %632

; <label>:446:                                    ; preds = %originalBBpart239
  %447 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %448 = load i32, i32* %28, align 4
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %447, i64 %449
  %451 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %450, i32 0, i32 0
  %452 = load %union.tree_node*, %union.tree_node** %451, align 8
  %453 = bitcast %union.tree_node* %452 to %struct.tree_common*
  %454 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %453, i32 0, i32 2
  %455 = load i32, i32* %454, align 8
  %456 = and i32 %455, 255
  %457 = icmp eq i32 %456, 50
  br i1 %457, label %458, label %475

; <label>:458:                                    ; preds = %446
  %459 = load %union.tree_node*, %union.tree_node** %30, align 8
  %460 = call %union.tree_node* @build_pointer_type(%union.tree_node* %459)
  %461 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %462 = load i32, i32* %28, align 4
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %461, i64 %463
  %465 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %464, i32 0, i32 0
  %466 = load %union.tree_node*, %union.tree_node** %465, align 8
  %467 = call %union.tree_node* @build1(i32 121, %union.tree_node* %460, %union.tree_node* %466)
  %468 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %469 = load i32, i32* %28, align 4
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %468, i64 %470
  %472 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %471, i32 0, i32 0
  store %union.tree_node* %467, %union.tree_node** %472, align 8
  %473 = load %union.tree_node*, %union.tree_node** %30, align 8
  %474 = call %union.tree_node* @build_pointer_type(%union.tree_node* %473)
  store %union.tree_node* %474, %union.tree_node** %30, align 8
  br label %631

; <label>:475:                                    ; preds = %446
  %476 = load %union.tree_node*, %union.tree_node** %30, align 8
  %477 = bitcast %union.tree_node* %476 to %struct.tree_type*
  %478 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %477, i32 0, i32 2
  %479 = load %union.tree_node*, %union.tree_node** %478, align 8
  %480 = icmp ne %union.tree_node* %479, null
  br i1 %480, label %481, label %540

; <label>:481:                                    ; preds = %475
  %482 = load i32, i32* @x.11
  %483 = load i32, i32* @y.12
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %originalBB76alteredBB, %481
  %490 = load %union.tree_node*, %union.tree_node** %30, align 8
  %491 = bitcast %union.tree_node* %490 to %struct.tree_type*
  %492 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %491, i32 0, i32 2
  %493 = load %union.tree_node*, %union.tree_node** %492, align 8
  %494 = bitcast %union.tree_node* %493 to %struct.tree_common*
  %495 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %494, i32 0, i32 2
  %496 = load i32, i32* %495, align 8
  %497 = and i32 %496, 255
  %498 = icmp ne i32 %497, 25
  %499 = load i32, i32* @x.11
  %500 = load i32, i32* @y.12
  %501 = sub i32 %499, 1
  %502 = mul i32 %499, %501
  %503 = urem i32 %502, 2
  %504 = icmp eq i32 %503, 0
  %505 = icmp slt i32 %500, 10
  %506 = or i1 %504, %505
  br i1 %506, label %originalBBpart286, label %originalBB76alteredBB

originalBBpart286:                                ; preds = %originalBB76
  br i1 %498, label %540, label %507

; <label>:507:                                    ; preds = %originalBBpart286
  %508 = load i32, i32* @flag_stack_check, align 4
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %603

; <label>:510:                                    ; preds = %507
  %511 = load i32, i32* @x.11
  %512 = load i32, i32* @y.12
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %originalBB88alteredBB, %510
  %519 = load %union.tree_node*, %union.tree_node** %30, align 8
  %520 = bitcast %union.tree_node* %519 to %struct.tree_type*
  %521 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %520, i32 0, i32 3
  %522 = load %union.tree_node*, %union.tree_node** %521, align 8
  %523 = load i32, i32* @target_flags, align 4
  %524 = and i32 %523, 33554432
  %525 = icmp ne i32 %524, 0
  %526 = select i1 %525, i32 8, i32 4
  %527 = sub nsw i32 4096, %526
  %528 = sdiv i32 %527, 100
  %529 = sext i32 %528 to i64
  %530 = call i32 @compare_tree_int(%union.tree_node* %522, i64 %529)
  %531 = icmp slt i32 0, %530
  %532 = load i32, i32* @x.11
  %533 = load i32, i32* @y.12
  %534 = sub i32 %532, 1
  %535 = mul i32 %532, %534
  %536 = urem i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = icmp slt i32 %533, 10
  %539 = or i1 %537, %538
  br i1 %539, label %originalBBpart2108, label %originalBB88alteredBB

originalBBpart2108:                               ; preds = %originalBB88
  br i1 %531, label %540, label %603

; <label>:540:                                    ; preds = %originalBBpart2108, %originalBBpart286, %475
  %541 = load %union.tree_node*, %union.tree_node** %29, align 8
  %542 = bitcast %union.tree_node* %541 to %struct.tree_list*
  %543 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %542, i32 0, i32 2
  %544 = load %union.tree_node*, %union.tree_node** %543, align 8
  %545 = call %struct.rtx_def* @expr_size(%union.tree_node* %544)
  store %struct.rtx_def* %545, %struct.rtx_def** %34, align 8
  %546 = load %struct.rtx_def**, %struct.rtx_def*** %21, align 8
  %547 = load %struct.rtx_def*, %struct.rtx_def** %546, align 8
  %548 = icmp eq %struct.rtx_def* %547, null
  br i1 %548, label %549, label %577

; <label>:549:                                    ; preds = %540
  %550 = load i32, i32* @x.11
  %551 = load i32, i32* @y.12
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %originalBB110alteredBB, %549
  %558 = load %struct.rtx_def**, %struct.rtx_def*** %21, align 8
  call void @emit_stack_save(i32 0, %struct.rtx_def** %558, %struct.rtx_def* null)
  %559 = load %struct.function*, %struct.function** @cfun, align 8
  %560 = getelementptr inbounds %struct.function, %struct.function* %559, i32 0, i32 2
  %561 = load %struct.expr_status*, %struct.expr_status** %560, align 8
  %562 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %561, i32 0, i32 0
  %563 = load i32, i32* %562, align 8
  %564 = load i32*, i32** %22, align 8
  store i32 %563, i32* %564, align 4
  %565 = load %struct.function*, %struct.function** @cfun, align 8
  %566 = getelementptr inbounds %struct.function, %struct.function* %565, i32 0, i32 2
  %567 = load %struct.expr_status*, %struct.expr_status** %566, align 8
  %568 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %567, i32 0, i32 0
  store i32 0, i32* %568, align 8
  %569 = load i32, i32* @x.11
  %570 = load i32, i32* @y.12
  %571 = sub i32 %569, 1
  %572 = mul i32 %569, %571
  %573 = urem i32 %572, 2
  %574 = icmp eq i32 %573, 0
  %575 = icmp slt i32 %570, 10
  %576 = or i1 %574, %575
  br i1 %576, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %577

; <label>:577:                                    ; preds = %originalBBpart2112, %540
  %578 = load i32, i32* @x.11
  %579 = load i32, i32* @y.12
  %580 = sub i32 %578, 1
  %581 = mul i32 %578, %580
  %582 = urem i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = icmp slt i32 %579, 10
  %585 = or i1 %583, %584
  br i1 %585, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %originalBB114alteredBB, %577
  %586 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %587 = load %union.tree_node*, %union.tree_node** %30, align 8
  %588 = bitcast %union.tree_node* %587 to %struct.tree_type*
  %589 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %588, i32 0, i32 7
  %590 = load i32, i32* %589, align 8
  %591 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %586, %struct.rtx_def* null, i32 %590)
  %592 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %591)
  store %struct.rtx_def* %592, %struct.rtx_def** %33, align 8
  %593 = load %struct.rtx_def*, %struct.rtx_def** %33, align 8
  %594 = load %union.tree_node*, %union.tree_node** %30, align 8
  call void @set_mem_attributes(%struct.rtx_def* %593, %union.tree_node* %594, i32 1)
  %595 = load i32, i32* @x.11
  %596 = load i32, i32* @y.12
  %597 = sub i32 %595, 1
  %598 = mul i32 %595, %597
  %599 = urem i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = icmp slt i32 %596, 10
  %602 = or i1 %600, %601
  br i1 %602, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %606

; <label>:603:                                    ; preds = %originalBBpart2108, %507
  %604 = load %union.tree_node*, %union.tree_node** %30, align 8
  %605 = call %struct.rtx_def* @assign_temp(%union.tree_node* %604, i32 0, i32 1, i32 0)
  store %struct.rtx_def* %605, %struct.rtx_def** %33, align 8
  br label %606

; <label>:606:                                    ; preds = %603, %originalBBpart2116
  %607 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %608 = load i32, i32* %28, align 4
  %609 = sext i32 %608 to i64
  %610 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %607, i64 %609
  %611 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %610, i32 0, i32 0
  %612 = load %union.tree_node*, %union.tree_node** %611, align 8
  %613 = load %struct.rtx_def*, %struct.rtx_def** %33, align 8
  %614 = call %struct.rtx_def* @store_expr(%union.tree_node* %612, %struct.rtx_def* %613, i32 0)
  %615 = load i32*, i32** %24, align 8
  %616 = load i32, i32* %615, align 4
  %617 = and i32 %616, -4610
  store i32 %617, i32* %615, align 4
  %618 = load %union.tree_node*, %union.tree_node** %30, align 8
  %619 = call %union.tree_node* @build_pointer_type(%union.tree_node* %618)
  %620 = load %union.tree_node*, %union.tree_node** %30, align 8
  %621 = load %struct.rtx_def*, %struct.rtx_def** %33, align 8
  %622 = call %union.tree_node* @make_tree(%union.tree_node* %620, %struct.rtx_def* %621)
  %623 = call %union.tree_node* @build1(i32 121, %union.tree_node* %619, %union.tree_node* %622)
  %624 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %625 = load i32, i32* %28, align 4
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %624, i64 %626
  %628 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %627, i32 0, i32 0
  store %union.tree_node* %623, %union.tree_node** %628, align 8
  %629 = load %union.tree_node*, %union.tree_node** %30, align 8
  %630 = call %union.tree_node* @build_pointer_type(%union.tree_node* %629)
  store %union.tree_node* %630, %union.tree_node** %30, align 8
  br label %631

; <label>:631:                                    ; preds = %606, %458
  br label %632

; <label>:632:                                    ; preds = %631, %429
  br label %633

; <label>:633:                                    ; preds = %632, %194
  %634 = load %union.tree_node*, %union.tree_node** %30, align 8
  %635 = bitcast %union.tree_node* %634 to %struct.tree_type*
  %636 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %635, i32 0, i32 6
  %637 = load i32, i32* %636, align 4
  %638 = lshr i32 %637, 9
  %639 = and i32 %638, 127
  store i32 %639, i32* %32, align 4
  %640 = load %union.tree_node*, %union.tree_node** %30, align 8
  %641 = bitcast %union.tree_node* %640 to %struct.tree_common*
  %642 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %641, i32 0, i32 2
  %643 = load i32, i32* %642, align 8
  %644 = lshr i32 %643, 13
  %645 = and i32 %644, 1
  store i32 %645, i32* %31, align 4
  %646 = load i32, i32* %31, align 4
  %647 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %648 = load i32, i32* %28, align 4
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %647, i64 %649
  %651 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %650, i32 0, i32 6
  store i32 %646, i32* %651, align 8
  %652 = load i32, i32* %32, align 4
  %653 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %654 = load i32, i32* %28, align 4
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %653, i64 %655
  %657 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %656, i32 0, i32 1
  store i32 %652, i32* %657, align 8
  %658 = load %struct.ix86_args*, %struct.ix86_args** %19, align 8
  %659 = load i32, i32* %32, align 4
  %660 = load %union.tree_node*, %union.tree_node** %30, align 8
  %661 = load i32, i32* %26, align 4
  %662 = load i32, i32* %16, align 4
  %663 = icmp slt i32 %661, %662
  %664 = zext i1 %663 to i32
  %665 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %658, i32 %659, %union.tree_node* %660, i32 %664)
  %666 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %667 = load i32, i32* %28, align 4
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %666, i64 %668
  %670 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %669, i32 0, i32 4
  store %struct.rtx_def* %665, %struct.rtx_def** %670, align 8
  %671 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %672 = load i32, i32* %28, align 4
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %671, i64 %673
  %675 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %674, i32 0, i32 4
  %676 = load %struct.rtx_def*, %struct.rtx_def** %675, align 8
  %677 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %678 = load i32, i32* %28, align 4
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %677, i64 %679
  %681 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %680, i32 0, i32 5
  store %struct.rtx_def* %676, %struct.rtx_def** %681, align 8
  %682 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %683 = load i32, i32* %28, align 4
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %682, i64 %684
  %686 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %685, i32 0, i32 4
  %687 = load %struct.rtx_def*, %struct.rtx_def** %686, align 8
  %688 = icmp ne %struct.rtx_def* %687, null
  br i1 %688, label %689, label %711

; <label>:689:                                    ; preds = %633
  %690 = load i32, i32* @x.11
  %691 = load i32, i32* @y.12
  %692 = sub i32 %690, 1
  %693 = mul i32 %690, %692
  %694 = urem i32 %693, 2
  %695 = icmp eq i32 %694, 0
  %696 = icmp slt i32 %691, 10
  %697 = or i1 %695, %696
  br i1 %697, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %originalBB118alteredBB, %689
  %698 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %699 = load i32, i32* %28, align 4
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %698, i64 %700
  %702 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %701, i32 0, i32 7
  store i32 0, i32* %702, align 4
  %703 = load i32, i32* @x.11
  %704 = load i32, i32* @y.12
  %705 = sub i32 %703, 1
  %706 = mul i32 %703, %705
  %707 = urem i32 %706, 2
  %708 = icmp eq i32 %707, 0
  %709 = icmp slt i32 %704, 10
  %710 = or i1 %708, %709
  br i1 %710, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %711

; <label>:711:                                    ; preds = %originalBBpart2120, %633
  %712 = load %union.tree_node*, %union.tree_node** %30, align 8
  %713 = icmp ne %union.tree_node* %712, null
  br i1 %713, label %714, label %799

; <label>:714:                                    ; preds = %711
  %715 = load %union.tree_node*, %union.tree_node** %30, align 8
  %716 = bitcast %union.tree_node* %715 to %struct.tree_type*
  %717 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %716, i32 0, i32 2
  %718 = load %union.tree_node*, %union.tree_node** %717, align 8
  %719 = bitcast %union.tree_node* %718 to %struct.tree_common*
  %720 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %719, i32 0, i32 2
  %721 = load i32, i32* %720, align 8
  %722 = and i32 %721, 255
  %723 = icmp ne i32 %722, 25
  br i1 %723, label %797, label %724

; <label>:724:                                    ; preds = %714
  %725 = load %union.tree_node*, %union.tree_node** %30, align 8
  %726 = bitcast %union.tree_node* %725 to %struct.tree_common*
  %727 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %726, i32 0, i32 2
  %728 = load i32, i32* %727, align 8
  %729 = lshr i32 %728, 10
  %730 = and i32 %729, 1
  %731 = icmp ne i32 %730, 0
  br i1 %731, label %797, label %732

; <label>:732:                                    ; preds = %724
  %733 = load i32, i32* %32, align 4
  %734 = icmp eq i32 %733, 6
  br i1 %734, label %797, label %735

; <label>:735:                                    ; preds = %732
  %736 = load i32, i32* %32, align 4
  %737 = icmp eq i32 %736, 51
  br i1 %737, label %738, label %779

; <label>:738:                                    ; preds = %735
  %739 = load %union.tree_node*, %union.tree_node** %30, align 8
  %740 = icmp ne %union.tree_node* %739, null
  br i1 %740, label %741, label %778

; <label>:741:                                    ; preds = %738
  %742 = load %union.tree_node*, %union.tree_node** %30, align 8
  %743 = bitcast %union.tree_node* %742 to %struct.tree_type*
  %744 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %743, i32 0, i32 2
  %745 = load %union.tree_node*, %union.tree_node** %744, align 8
  %746 = bitcast %union.tree_node* %745 to %struct.tree_common*
  %747 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %746, i32 0, i32 2
  %748 = load i32, i32* %747, align 8
  %749 = and i32 %748, 255
  %750 = icmp eq i32 %749, 25
  br i1 %750, label %751, label %778

; <label>:751:                                    ; preds = %741
  %752 = load i32, i32* @x.11
  %753 = load i32, i32* @y.12
  %754 = sub i32 %752, 1
  %755 = mul i32 %752, %754
  %756 = urem i32 %755, 2
  %757 = icmp eq i32 %756, 0
  %758 = icmp slt i32 %753, 10
  %759 = or i1 %757, %758
  br i1 %759, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %originalBB122alteredBB, %751
  %760 = load %union.tree_node*, %union.tree_node** %30, align 8
  %761 = call i64 @int_size_in_bytes(%union.tree_node* %760)
  %762 = load i32, i32* @target_flags, align 4
  %763 = and i32 %762, 33554432
  %764 = icmp ne i32 %763, 0
  %765 = select i1 %764, i32 64, i32 32
  %766 = sdiv i32 %765, 8
  %767 = sext i32 %766 to i64
  %768 = srem i64 %761, %767
  %769 = icmp eq i64 0, %768
  %770 = load i32, i32* @x.11
  %771 = load i32, i32* @y.12
  %772 = sub i32 %770, 1
  %773 = mul i32 %770, %772
  %774 = urem i32 %773, 2
  %775 = icmp eq i32 %774, 0
  %776 = icmp slt i32 %771, 10
  %777 = or i1 %775, %776
  br i1 %777, label %originalBBpart2139, label %originalBB122alteredBB

originalBBpart2139:                               ; preds = %originalBB122
  br i1 %769, label %779, label %778

; <label>:778:                                    ; preds = %originalBBpart2139, %741, %738
  br label %779

; <label>:779:                                    ; preds = %778, %originalBBpart2139, %735
  %780 = phi i1 [ false, %originalBBpart2139 ], [ false, %735 ], [ false, %778 ]
  %781 = load i32, i32* @x.11
  %782 = load i32, i32* @y.12
  %783 = sub i32 %781, 1
  %784 = mul i32 %781, %783
  %785 = urem i32 %784, 2
  %786 = icmp eq i32 %785, 0
  %787 = icmp slt i32 %782, 10
  %788 = or i1 %786, %787
  br i1 %788, label %originalBB141, label %originalBB141alteredBB

originalBB141:                                    ; preds = %originalBB141alteredBB, %779
  %789 = load i32, i32* @x.11
  %790 = load i32, i32* @y.12
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBBpart2143, label %originalBB141alteredBB

originalBBpart2143:                               ; preds = %originalBB141
  br label %797

; <label>:797:                                    ; preds = %originalBBpart2143, %732, %724, %714
  %798 = phi i1 [ true, %732 ], [ true, %724 ], [ true, %714 ], [ %780, %originalBBpart2143 ]
  br label %799

; <label>:799:                                    ; preds = %797, %711
  %800 = phi i1 [ false, %711 ], [ %798, %797 ]
  %801 = zext i1 %800 to i32
  %802 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %803 = load i32, i32* %28, align 4
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %802, i64 %804
  %806 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %805, i32 0, i32 8
  store i32 %801, i32* %806, align 8
  %807 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %808 = load i32, i32* %28, align 4
  %809 = sext i32 %808 to i64
  %810 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %807, i64 %809
  %811 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %810, i32 0, i32 4
  %812 = load %struct.rtx_def*, %struct.rtx_def** %811, align 8
  %813 = icmp ne %struct.rtx_def* %812, null
  br i1 %813, label %814, label %850

; <label>:814:                                    ; preds = %799
  %815 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %816 = load i32, i32* %28, align 4
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %815, i64 %817
  %819 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %818, i32 0, i32 4
  %820 = load %struct.rtx_def*, %struct.rtx_def** %819, align 8
  %821 = bitcast %struct.rtx_def* %820 to i32*
  %822 = load i32, i32* %821, align 8
  %823 = and i32 %822, 65535
  %824 = icmp eq i32 %823, 39
  br i1 %824, label %825, label %850

; <label>:825:                                    ; preds = %814
  %826 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %827 = load i32, i32* %28, align 4
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %826, i64 %828
  %830 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %829, i32 0, i32 4
  %831 = load %struct.rtx_def*, %struct.rtx_def** %830, align 8
  %832 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %831, i32 0, i32 1
  %833 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %832, i64 0, i64 0
  %834 = bitcast %union.rtunion_def* %833 to %struct.rtvec_def**
  %835 = load %struct.rtvec_def*, %struct.rtvec_def** %834, align 8
  %836 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %835, i32 0, i32 1
  %837 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %836, i64 0, i64 0
  %838 = load %struct.rtx_def*, %struct.rtx_def** %837, align 8
  %839 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %838, i32 0, i32 1
  %840 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %839, i64 0, i64 0
  %841 = bitcast %union.rtunion_def* %840 to %struct.rtx_def**
  %842 = load %struct.rtx_def*, %struct.rtx_def** %841, align 8
  %843 = icmp eq %struct.rtx_def* %842, null
  br i1 %843, label %844, label %850

; <label>:844:                                    ; preds = %825
  %845 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %846 = load i32, i32* %28, align 4
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %845, i64 %847
  %849 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %848, i32 0, i32 8
  store i32 1, i32* %849, align 8
  br label %850

; <label>:850:                                    ; preds = %844, %825, %814, %799
  %851 = load i32, i32* @x.11
  %852 = load i32, i32* @y.12
  %853 = sub i32 %851, 1
  %854 = mul i32 %851, %853
  %855 = urem i32 %854, 2
  %856 = icmp eq i32 %855, 0
  %857 = icmp slt i32 %852, 10
  %858 = or i1 %856, %857
  br i1 %858, label %originalBB145, label %originalBB145alteredBB

originalBB145:                                    ; preds = %originalBB145alteredBB, %850
  %859 = load %union.tree_node*, %union.tree_node** %30, align 8
  %860 = bitcast %union.tree_node* %859 to %struct.tree_common*
  %861 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %860, i32 0, i32 2
  %862 = load i32, i32* %861, align 8
  %863 = lshr i32 %862, 10
  %864 = and i32 %863, 1
  %865 = icmp ne i32 %864, 0
  %866 = load i32, i32* @x.11
  %867 = load i32, i32* @y.12
  %868 = sub i32 %866, 1
  %869 = mul i32 %866, %868
  %870 = urem i32 %869, 2
  %871 = icmp eq i32 %870, 0
  %872 = icmp slt i32 %867, 10
  %873 = or i1 %871, %872
  br i1 %873, label %originalBBpart2170, label %originalBB145alteredBB

originalBBpart2170:                               ; preds = %originalBB145
  br i1 %865, label %890, label %874

; <label>:874:                                    ; preds = %originalBBpart2170
  %875 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %876 = load i32, i32* %28, align 4
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %875, i64 %877
  %879 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %878, i32 0, i32 8
  %880 = load i32, i32* %879, align 8
  %881 = icmp ne i32 %880, 0
  br i1 %881, label %882, label %892

; <label>:882:                                    ; preds = %874
  %883 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %884 = load i32, i32* %28, align 4
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %883, i64 %885
  %887 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %886, i32 0, i32 4
  %888 = load %struct.rtx_def*, %struct.rtx_def** %887, align 8
  %889 = icmp ne %struct.rtx_def* %888, null
  br i1 %889, label %890, label %892

; <label>:890:                                    ; preds = %882, %originalBBpart2170
  %891 = load i32*, i32** %23, align 8
  store i32 1, i32* %891, align 4
  br label %892

; <label>:892:                                    ; preds = %890, %882, %874
  %893 = load %union.tree_node*, %union.tree_node** %30, align 8
  %894 = bitcast %union.tree_node* %893 to %struct.tree_common*
  %895 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %894, i32 0, i32 2
  %896 = load i32, i32* %895, align 8
  %897 = lshr i32 %896, 10
  %898 = and i32 %897, 1
  %899 = icmp ne i32 %898, 0
  br i1 %899, label %900, label %904

; <label>:900:                                    ; preds = %892
  %901 = load i32*, i32** %24, align 8
  %902 = load i32, i32* %901, align 4
  %903 = and i32 %902, -4097
  store i32 %903, i32* %901, align 4
  br label %904

; <label>:904:                                    ; preds = %900, %892
  %905 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %906 = load i32, i32* %28, align 4
  %907 = sext i32 %906 to i64
  %908 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %905, i64 %907
  %909 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %908, i32 0, i32 4
  %910 = load %struct.rtx_def*, %struct.rtx_def** %909, align 8
  %911 = icmp eq %struct.rtx_def* %910, null
  br i1 %911, label %947, label %912

; <label>:912:                                    ; preds = %904
  %913 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %914 = load i32, i32* %28, align 4
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %913, i64 %915
  %917 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %916, i32 0, i32 7
  %918 = load i32, i32* %917, align 4
  %919 = icmp ne i32 %918, 0
  br i1 %919, label %947, label %920

; <label>:920:                                    ; preds = %912
  %921 = load i32, i32* @x.11
  %922 = load i32, i32* @y.12
  %923 = sub i32 %921, 1
  %924 = mul i32 %921, %923
  %925 = urem i32 %924, 2
  %926 = icmp eq i32 %925, 0
  %927 = icmp slt i32 %922, 10
  %928 = or i1 %926, %927
  br i1 %928, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %originalBB172alteredBB, %920
  %929 = load i32, i32* %20, align 4
  %930 = icmp sgt i32 %929, 0
  %931 = load i32, i32* @x.11
  %932 = load i32, i32* @y.12
  %933 = sub i32 %931, 1
  %934 = mul i32 %931, %933
  %935 = urem i32 %934, 2
  %936 = icmp eq i32 %935, 0
  %937 = icmp slt i32 %932, 10
  %938 = or i1 %936, %937
  br i1 %938, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  br i1 %930, label %947, label %939

; <label>:939:                                    ; preds = %originalBBpart2174
  %940 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %941 = load i32, i32* %28, align 4
  %942 = sext i32 %941 to i64
  %943 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %940, i64 %942
  %944 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %943, i32 0, i32 8
  %945 = load i32, i32* %944, align 8
  %946 = icmp ne i32 %945, 0
  br i1 %946, label %947, label %986

; <label>:947:                                    ; preds = %939, %originalBBpart2174, %912, %904
  %948 = load i32, i32* @x.11
  %949 = load i32, i32* @y.12
  %950 = sub i32 %948, 1
  %951 = mul i32 %948, %950
  %952 = urem i32 %951, 2
  %953 = icmp eq i32 %952, 0
  %954 = icmp slt i32 %949, 10
  %955 = or i1 %953, %954
  br i1 %955, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %originalBB176alteredBB, %947
  %956 = load i32, i32* %32, align 4
  %957 = load %union.tree_node*, %union.tree_node** %30, align 8
  %958 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %959 = load i32, i32* %28, align 4
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %958, i64 %960
  %962 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %961, i32 0, i32 4
  %963 = load %struct.rtx_def*, %struct.rtx_def** %962, align 8
  %964 = icmp ne %struct.rtx_def* %963, null
  %965 = zext i1 %964 to i32
  %966 = load %union.tree_node*, %union.tree_node** %18, align 8
  %967 = load %struct.args_size*, %struct.args_size** %15, align 8
  %968 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %969 = load i32, i32* %28, align 4
  %970 = sext i32 %969 to i64
  %971 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %968, i64 %970
  %972 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %971, i32 0, i32 9
  %973 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %974 = load i32, i32* %28, align 4
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %973, i64 %975
  %977 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %976, i32 0, i32 11
  call void @locate_and_pad_parm(i32 %956, %union.tree_node* %957, i32 %965, %union.tree_node* %966, %struct.args_size* %967, %struct.args_size* %972, %struct.args_size* %977, %struct.args_size* %27)
  %978 = load i32, i32* @x.11
  %979 = load i32, i32* @y.12
  %980 = sub i32 %978, 1
  %981 = mul i32 %978, %980
  %982 = urem i32 %981, 2
  %983 = icmp eq i32 %982, 0
  %984 = icmp slt i32 %979, 10
  %985 = or i1 %983, %984
  br i1 %985, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  br label %986

; <label>:986:                                    ; preds = %originalBBpart2178, %939
  %987 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %988 = load i32, i32* %28, align 4
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %987, i64 %989
  %991 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %990, i32 0, i32 10
  %992 = load %struct.args_size*, %struct.args_size** %15, align 8
  %993 = bitcast %struct.args_size* %991 to i8*
  %994 = bitcast %struct.args_size* %992 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %993, i8* %994, i64 16, i32 8, i1 false)
  %995 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %996 = load i32, i32* %28, align 4
  %997 = sext i32 %996 to i64
  %998 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %995, i64 %997
  %999 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %998, i32 0, i32 17
  %1000 = bitcast %struct.args_size* %999 to i8*
  %1001 = bitcast %struct.args_size* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1000, i8* %1001, i64 16, i32 8, i1 false)
  %1002 = load i32, i32* %20, align 4
  %1003 = icmp eq i32 %1002, 0
  br i1 %1003, label %1004, label %1061

; <label>:1004:                                   ; preds = %986
  %1005 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1006 = load i32, i32* %28, align 4
  %1007 = sext i32 %1006 to i64
  %1008 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1005, i64 %1007
  %1009 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1008, i32 0, i32 8
  %1010 = load i32, i32* %1009, align 8
  %1011 = icmp ne i32 %1010, 0
  br i1 %1011, label %1061, label %1012

; <label>:1012:                                   ; preds = %1004
  %1013 = load i32, i32* @x.11
  %1014 = load i32, i32* @y.12
  %1015 = sub i32 %1013, 1
  %1016 = mul i32 %1013, %1015
  %1017 = urem i32 %1016, 2
  %1018 = icmp eq i32 %1017, 0
  %1019 = icmp slt i32 %1014, 10
  %1020 = or i1 %1018, %1019
  br i1 %1020, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %originalBB180alteredBB, %1012
  %1021 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1022 = load i32, i32* %28, align 4
  %1023 = sext i32 %1022 to i64
  %1024 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1021, i64 %1023
  %1025 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1024, i32 0, i32 7
  %1026 = load i32, i32* %1025, align 4
  %1027 = load i32, i32* @target_flags, align 4
  %1028 = and i32 %1027, 33554432
  %1029 = icmp ne i32 %1028, 0
  %1030 = select i1 %1029, i32 8, i32 4
  %1031 = mul nsw i32 %1026, %1030
  %1032 = load i32, i32* @target_flags, align 4
  %1033 = and i32 %1032, 33554432
  %1034 = icmp ne i32 %1033, 0
  %1035 = select i1 %1034, i32 64, i32 32
  %1036 = sdiv i32 %1035, 8
  %1037 = sdiv i32 %1031, %1036
  %1038 = load i32, i32* @target_flags, align 4
  %1039 = and i32 %1038, 33554432
  %1040 = icmp ne i32 %1039, 0
  %1041 = select i1 %1040, i32 64, i32 32
  %1042 = sdiv i32 %1041, 8
  %1043 = mul nsw i32 %1037, %1042
  %1044 = sext i32 %1043 to i64
  %1045 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1046 = load i32, i32* %28, align 4
  %1047 = sext i32 %1046 to i64
  %1048 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1045, i64 %1047
  %1049 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1048, i32 0, i32 11
  %1050 = getelementptr inbounds %struct.args_size, %struct.args_size* %1049, i32 0, i32 0
  %1051 = load i64, i64* %1050, align 8
  %1052 = sub nsw i64 %1051, %1044
  store i64 %1052, i64* %1050, align 8
  %1053 = load i32, i32* @x.11
  %1054 = load i32, i32* @y.12
  %1055 = sub i32 %1053, 1
  %1056 = mul i32 %1053, %1055
  %1057 = urem i32 %1056, 2
  %1058 = icmp eq i32 %1057, 0
  %1059 = icmp slt i32 %1054, 10
  %1060 = or i1 %1058, %1059
  br i1 %1060, label %originalBBpart2230, label %originalBB180alteredBB

originalBBpart2230:                               ; preds = %originalBB180
  br label %1061

; <label>:1061:                                   ; preds = %originalBBpart2230, %1004, %986
  %1062 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1063 = load i32, i32* %28, align 4
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1062, i64 %1064
  %1066 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1065, i32 0, i32 11
  %1067 = getelementptr inbounds %struct.args_size, %struct.args_size* %1066, i32 0, i32 0
  %1068 = load i64, i64* %1067, align 8
  %1069 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1070 = getelementptr inbounds %struct.args_size, %struct.args_size* %1069, i32 0, i32 0
  %1071 = load i64, i64* %1070, align 8
  %1072 = add nsw i64 %1071, %1068
  store i64 %1072, i64* %1070, align 8
  %1073 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1074 = load i32, i32* %28, align 4
  %1075 = sext i32 %1074 to i64
  %1076 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1073, i64 %1075
  %1077 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1076, i32 0, i32 11
  %1078 = getelementptr inbounds %struct.args_size, %struct.args_size* %1077, i32 0, i32 1
  %1079 = load %union.tree_node*, %union.tree_node** %1078, align 8
  %1080 = icmp ne %union.tree_node* %1079, null
  br i1 %1080, label %1081, label %1156

; <label>:1081:                                   ; preds = %1061
  br label %1082

; <label>:1082:                                   ; preds = %1081
  %1083 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1084 = load i32, i32* %28, align 4
  %1085 = sext i32 %1084 to i64
  %1086 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1083, i64 %1085
  %1087 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1086, i32 0, i32 11
  %1088 = getelementptr inbounds %struct.args_size, %struct.args_size* %1087, i32 0, i32 1
  %1089 = load %union.tree_node*, %union.tree_node** %1088, align 8
  store %union.tree_node* %1089, %union.tree_node** %35, align 8
  %1090 = load %union.tree_node*, %union.tree_node** %35, align 8
  %1091 = call i32 @host_integerp(%union.tree_node* %1090, i32 0)
  %1092 = icmp ne i32 %1091, 0
  br i1 %1092, label %1093, label %1100

; <label>:1093:                                   ; preds = %1082
  %1094 = load %union.tree_node*, %union.tree_node** %35, align 8
  %1095 = call i64 @tree_low_cst(%union.tree_node* %1094, i32 0)
  %1096 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1097 = getelementptr inbounds %struct.args_size, %struct.args_size* %1096, i32 0, i32 0
  %1098 = load i64, i64* %1097, align 8
  %1099 = add nsw i64 %1098, %1095
  store i64 %1099, i64* %1097, align 8
  br label %1138

; <label>:1100:                                   ; preds = %1082
  %1101 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1102 = getelementptr inbounds %struct.args_size, %struct.args_size* %1101, i32 0, i32 1
  %1103 = load %union.tree_node*, %union.tree_node** %1102, align 8
  %1104 = icmp eq %union.tree_node* %1103, null
  br i1 %1104, label %1105, label %1111

; <label>:1105:                                   ; preds = %1100
  %1106 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1107 = load %union.tree_node*, %union.tree_node** %35, align 8
  %1108 = call %union.tree_node* @convert(%union.tree_node* %1106, %union.tree_node* %1107)
  %1109 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1110 = getelementptr inbounds %struct.args_size, %struct.args_size* %1109, i32 0, i32 1
  store %union.tree_node* %1108, %union.tree_node** %1110, align 8
  br label %1137

; <label>:1111:                                   ; preds = %1100
  %1112 = load i32, i32* @x.11
  %1113 = load i32, i32* @y.12
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBB232, label %originalBB232alteredBB

originalBB232:                                    ; preds = %originalBB232alteredBB, %1111
  %1120 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1121 = getelementptr inbounds %struct.args_size, %struct.args_size* %1120, i32 0, i32 1
  %1122 = load %union.tree_node*, %union.tree_node** %1121, align 8
  %1123 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1124 = load %union.tree_node*, %union.tree_node** %35, align 8
  %1125 = call %union.tree_node* @convert(%union.tree_node* %1123, %union.tree_node* %1124)
  %1126 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1122, %union.tree_node* %1125)
  %1127 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1128 = getelementptr inbounds %struct.args_size, %struct.args_size* %1127, i32 0, i32 1
  store %union.tree_node* %1126, %union.tree_node** %1128, align 8
  %1129 = load i32, i32* @x.11
  %1130 = load i32, i32* @y.12
  %1131 = sub i32 %1129, 1
  %1132 = mul i32 %1129, %1131
  %1133 = urem i32 %1132, 2
  %1134 = icmp eq i32 %1133, 0
  %1135 = icmp slt i32 %1130, 10
  %1136 = or i1 %1134, %1135
  br i1 %1136, label %originalBBpart2234, label %originalBB232alteredBB

originalBBpart2234:                               ; preds = %originalBB232
  br label %1137

; <label>:1137:                                   ; preds = %originalBBpart2234, %1105
  br label %1138

; <label>:1138:                                   ; preds = %1137, %1093
  %1139 = load i32, i32* @x.11
  %1140 = load i32, i32* @y.12
  %1141 = sub i32 %1139, 1
  %1142 = mul i32 %1139, %1141
  %1143 = urem i32 %1142, 2
  %1144 = icmp eq i32 %1143, 0
  %1145 = icmp slt i32 %1140, 10
  %1146 = or i1 %1144, %1145
  br i1 %1146, label %originalBB236, label %originalBB236alteredBB

originalBB236:                                    ; preds = %originalBB236alteredBB, %1138
  %1147 = load i32, i32* @x.11
  %1148 = load i32, i32* @y.12
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBBpart2238, label %originalBB236alteredBB

originalBBpart2238:                               ; preds = %originalBB236
  br label %1155

; <label>:1155:                                   ; preds = %originalBBpart2238
  br label %1156

; <label>:1156:                                   ; preds = %1155, %1061
  %1157 = load %struct.ix86_args*, %struct.ix86_args** %19, align 8
  %1158 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1159 = bitcast %union.tree_node* %1158 to %struct.tree_type*
  %1160 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1159, i32 0, i32 6
  %1161 = load i32, i32* %1160, align 4
  %1162 = lshr i32 %1161, 9
  %1163 = and i32 %1162, 127
  %1164 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1165 = load i32, i32* %26, align 4
  %1166 = load i32, i32* %16, align 4
  %1167 = icmp slt i32 %1165, %1166
  %1168 = zext i1 %1167 to i32
  call void @function_arg_advance(%struct.ix86_args* %1157, i32 %1163, %union.tree_node* %1164, i32 %1168)
  br label %1169

; <label>:1169:                                   ; preds = %1156
  %1170 = load %union.tree_node*, %union.tree_node** %29, align 8
  %1171 = bitcast %union.tree_node* %1170 to %struct.tree_common*
  %1172 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1171, i32 0, i32 0
  %1173 = load %union.tree_node*, %union.tree_node** %1172, align 8
  store %union.tree_node* %1173, %union.tree_node** %29, align 8
  %1174 = load i32, i32* %25, align 4
  %1175 = load i32, i32* %28, align 4
  %1176 = add nsw i32 %1175, %1174
  store i32 %1176, i32* %28, align 4
  %1177 = load i32, i32* %26, align 4
  %1178 = add nsw i32 %1177, 1
  store i32 %1178, i32* %26, align 4
  br label %85

; <label>:1179:                                   ; preds = %85
  %1180 = load i32, i32* @x.11
  %1181 = load i32, i32* @y.12
  %1182 = sub i32 %1180, 1
  %1183 = mul i32 %1180, %1182
  %1184 = urem i32 %1183, 2
  %1185 = icmp eq i32 %1184, 0
  %1186 = icmp slt i32 %1181, 10
  %1187 = or i1 %1185, %1186
  br i1 %1187, label %originalBB240, label %originalBB240alteredBB

originalBB240:                                    ; preds = %originalBB240alteredBB, %1179
  %1188 = load i32, i32* @x.11
  %1189 = load i32, i32* @y.12
  %1190 = sub i32 %1188, 1
  %1191 = mul i32 %1188, %1190
  %1192 = urem i32 %1191, 2
  %1193 = icmp eq i32 %1192, 0
  %1194 = icmp slt i32 %1189, 10
  %1195 = or i1 %1193, %1194
  br i1 %1195, label %originalBBpart2242, label %originalBB240alteredBB

originalBBpart2242:                               ; preds = %originalBB240
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %47
  %1196 = load i32, i32* %13, align 4
  %_ = sub i32 0, %1196
  %gen = add i32 %_, 1
  %_1 = shl i32 %1196, 1
  %_2 = shl i32 %1196, 1
  %_3 = sub i32 0, %1196
  %gen4 = add i32 %_3, 1
  %_5 = sub i32 0, %1196
  %gen6 = add i32 %_5, 1
  %_7 = sub i32 0, %1196
  %gen8 = add i32 %_7, 1
  %_9 = sub i32 0, %1196
  %gen10 = add i32 %_9, 1
  %1197 = sub nsw i32 %1196, 1
  store i32 %1197, i32* %28, align 4
  store i32 -1, i32* %25, align 4
  br label %originalBB

originalBB11alteredBB:                            ; preds = %originalBB11, %67
  %1198 = load %union.tree_node*, %union.tree_node** %17, align 8
  store %union.tree_node* %1198, %union.tree_node** %29, align 8
  store i32 0, i32* %26, align 4
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %88
  %1199 = load %union.tree_node*, %union.tree_node** %29, align 8
  %1200 = bitcast %union.tree_node* %1199 to %struct.tree_list*
  %1201 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %1200, i32 0, i32 2
  %1202 = load %union.tree_node*, %union.tree_node** %1201, align 8
  %1203 = bitcast %union.tree_node* %1202 to %struct.tree_common*
  %1204 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1203, i32 0, i32 1
  %1205 = load %union.tree_node*, %union.tree_node** %1204, align 8
  store %union.tree_node* %1205, %union.tree_node** %30, align 8
  %1206 = load %union.tree_node*, %union.tree_node** %29, align 8
  %1207 = bitcast %union.tree_node* %1206 to %struct.tree_list*
  %1208 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %1207, i32 0, i32 2
  %1209 = load %union.tree_node*, %union.tree_node** %1208, align 8
  %1210 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1211 = load i32, i32* %28, align 4
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1210, i64 %1212
  %1214 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1213, i32 0, i32 0
  store %union.tree_node* %1209, %union.tree_node** %1214, align 8
  %1215 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1216 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16
  %1217 = icmp eq %union.tree_node* %1215, %1216
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %153
  %1218 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1219 = bitcast %union.tree_node* %1218 to %struct.tree_type*
  %1220 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1219, i32 0, i32 1
  %1221 = load %union.tree_node*, %union.tree_node** %1220, align 8
  %1222 = bitcast %union.tree_node* %1221 to %struct.tree_common*
  %1223 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1222, i32 0, i32 1
  %1224 = load %union.tree_node*, %union.tree_node** %1223, align 8
  store %union.tree_node* %1224, %union.tree_node** %30, align 8
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %202
  %1225 = load %struct.function*, %struct.function** @cfun, align 8
  %1226 = getelementptr inbounds %struct.function, %struct.function* %1225, i32 0, i32 56
  %1227 = bitcast i24* %1226 to i32*
  %1228 = load i32, i32* %1227, align 8
  %_24 = shl i32 %1228, 12
  %_25 = sub i32 %1228, 12
  %gen26 = mul i32 %_25, 12
  %_27 = sub i32 0, %1228
  %gen28 = add i32 %_27, 12
  %1229 = lshr i32 %1228, 12
  %_29 = shl i32 %1229, 1
  %_30 = shl i32 %1229, 1
  %_31 = shl i32 %1229, 1
  %_32 = shl i32 %1229, 1
  %_33 = sub i32 0, %1229
  %gen34 = add i32 %_33, 1
  %_35 = shl i32 %1229, 1
  %_36 = sub i32 0, %1229
  %gen37 = add i32 %_36, 1
  %1230 = and i32 %1229, 1
  %1231 = icmp ne i32 %1230, 0
  br label %originalBB23

originalBB41alteredBB:                            ; preds = %originalBB41, %226
  %1232 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1233 = load i32, i32* %28, align 4
  %1234 = sext i32 %1233 to i64
  %1235 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1232, i64 %1234
  %1236 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1235, i32 0, i32 0
  %1237 = load %union.tree_node*, %union.tree_node** %1236, align 8
  %1238 = bitcast %union.tree_node* %1237 to %struct.tree_common*
  %1239 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1238, i32 0, i32 2
  %1240 = load i32, i32* %1239, align 8
  %_42 = sub i32 0, %1240
  %gen43 = add i32 %_42, 255
  %1241 = and i32 %1240, 255
  %1242 = icmp eq i32 %1241, 50
  br label %originalBB41

originalBB47alteredBB:                            ; preds = %originalBB47, %274
  %1243 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1244 = load i32, i32* %28, align 4
  %1245 = sext i32 %1244 to i64
  %1246 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1243, i64 %1245
  %1247 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1246, i32 0, i32 0
  %1248 = load %union.tree_node*, %union.tree_node** %1247, align 8
  %1249 = bitcast %union.tree_node* %1248 to %struct.tree_exp*
  %1250 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %1249, i32 0, i32 2
  %1251 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %1250, i64 0, i64 1
  %1252 = load %union.tree_node*, %union.tree_node** %1251, align 8
  %1253 = bitcast %union.tree_node* %1252 to %struct.tree_decl*
  %1254 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %1253, i32 0, i32 17
  %1255 = load %struct.rtx_def*, %struct.rtx_def** %1254, align 8
  %1256 = icmp ne %struct.rtx_def* %1255, null
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %305
  %1257 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1258 = load i32, i32* %28, align 4
  %1259 = sext i32 %1258 to i64
  %1260 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1257, i64 %1259
  %1261 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1260, i32 0, i32 0
  %1262 = load %union.tree_node*, %union.tree_node** %1261, align 8
  %1263 = bitcast %union.tree_node* %1262 to %struct.tree_exp*
  %1264 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %1263, i32 0, i32 2
  %1265 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %1264, i64 0, i64 1
  %1266 = load %union.tree_node*, %union.tree_node** %1265, align 8
  %1267 = bitcast %union.tree_node* %1266 to %struct.tree_decl*
  %1268 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %1267, i32 0, i32 17
  %1269 = load %struct.rtx_def*, %struct.rtx_def** %1268, align 8
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %335
  %1270 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1271 = load i32, i32* %28, align 4
  %1272 = sext i32 %1271 to i64
  %1273 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1270, i64 %1272
  %1274 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1273, i32 0, i32 0
  %1275 = load %union.tree_node*, %union.tree_node** %1274, align 8
  %1276 = bitcast %union.tree_node* %1275 to %struct.tree_exp*
  %1277 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %1276, i32 0, i32 2
  %1278 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %1277, i64 0, i64 1
  %1279 = load %union.tree_node*, %union.tree_node** %1278, align 8
  call void @make_decl_rtl(%union.tree_node* %1279, i8* null)
  %1280 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1281 = load i32, i32* %28, align 4
  %1282 = sext i32 %1281 to i64
  %1283 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1280, i64 %1282
  %1284 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1283, i32 0, i32 0
  %1285 = load %union.tree_node*, %union.tree_node** %1284, align 8
  %1286 = bitcast %union.tree_node* %1285 to %struct.tree_exp*
  %1287 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %1286, i32 0, i32 2
  %1288 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %1287, i64 0, i64 1
  %1289 = load %union.tree_node*, %union.tree_node** %1288, align 8
  %1290 = bitcast %union.tree_node* %1289 to %struct.tree_decl*
  %1291 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %1290, i32 0, i32 17
  %1292 = load %struct.rtx_def*, %struct.rtx_def** %1291, align 8
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %375
  %1293 = bitcast %struct.rtx_def* %376 to i32*
  %1294 = load i32, i32* %1293, align 8
  %_60 = sub i32 %1294, 65535
  %gen61 = mul i32 %_60, 65535
  %_62 = sub i32 0, %1294
  %gen63 = add i32 %_62, 65535
  %_64 = shl i32 %1294, 65535
  %_65 = shl i32 %1294, 65535
  %_66 = shl i32 %1294, 65535
  %_67 = sub i32 %1294, 65535
  %gen68 = mul i32 %_67, 65535
  %1295 = and i32 %1294, 65535
  %1296 = icmp eq i32 %1295, 61
  br label %originalBB59

originalBB72alteredBB:                            ; preds = %originalBB72, %397
  %1297 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1298 = load i32, i32* %28, align 4
  %1299 = sext i32 %1298 to i64
  %1300 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1297, i64 %1299
  %1301 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1300, i32 0, i32 0
  %1302 = load %union.tree_node*, %union.tree_node** %1301, align 8
  %1303 = bitcast %union.tree_node* %1302 to %struct.tree_exp*
  %1304 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %1303, i32 0, i32 2
  %1305 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %1304, i64 0, i64 1
  %1306 = load %union.tree_node*, %union.tree_node** %1305, align 8
  %1307 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1308 = load i32, i32* %28, align 4
  %1309 = sext i32 %1308 to i64
  %1310 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1307, i64 %1309
  %1311 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1310, i32 0, i32 0
  store %union.tree_node* %1306, %union.tree_node** %1311, align 8
  br label %originalBB72

originalBB76alteredBB:                            ; preds = %originalBB76, %481
  %1312 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1313 = bitcast %union.tree_node* %1312 to %struct.tree_type*
  %1314 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1313, i32 0, i32 2
  %1315 = load %union.tree_node*, %union.tree_node** %1314, align 8
  %1316 = bitcast %union.tree_node* %1315 to %struct.tree_common*
  %1317 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1316, i32 0, i32 2
  %1318 = load i32, i32* %1317, align 8
  %_77 = sub i32 %1318, 255
  %gen78 = mul i32 %_77, 255
  %_79 = sub i32 0, %1318
  %gen80 = add i32 %_79, 255
  %_81 = shl i32 %1318, 255
  %_82 = sub i32 0, %1318
  %gen83 = add i32 %_82, 255
  %_84 = shl i32 %1318, 255
  %1319 = and i32 %1318, 255
  %1320 = icmp ne i32 %1319, 25
  br label %originalBB76

originalBB88alteredBB:                            ; preds = %originalBB88, %510
  %1321 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1322 = bitcast %union.tree_node* %1321 to %struct.tree_type*
  %1323 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1322, i32 0, i32 3
  %1324 = load %union.tree_node*, %union.tree_node** %1323, align 8
  %1325 = load i32, i32* @target_flags, align 4
  %_89 = sub i32 0, %1325
  %gen90 = add i32 %_89, 33554432
  %_91 = sub i32 %1325, 33554432
  %gen92 = mul i32 %_91, 33554432
  %_93 = sub i32 %1325, 33554432
  %gen94 = mul i32 %_93, 33554432
  %1326 = and i32 %1325, 33554432
  %1327 = icmp ne i32 %1326, 0
  %1328 = select i1 %1327, i32 8, i32 4
  %_95 = sub i32 4096, %1328
  %gen96 = mul i32 %_95, %1328
  %_97 = sub i32 4096, %1328
  %gen98 = mul i32 %_97, %1328
  %1329 = sub nsw i32 4096, %1328
  %_99 = sub i32 0, %1329
  %gen100 = add i32 %_99, 100
  %_101 = sub i32 0, %1329
  %gen102 = add i32 %_101, 100
  %_103 = sub i32 %1329, 100
  %gen104 = mul i32 %_103, 100
  %_105 = shl i32 %1329, 100
  %_106 = shl i32 %1329, 100
  %1330 = sdiv i32 %1329, 100
  %1331 = sext i32 %1330 to i64
  %1332 = call i32 @compare_tree_int(%union.tree_node* %1324, i64 %1331)
  %1333 = icmp slt i32 0, %1332
  br label %originalBB88

originalBB110alteredBB:                           ; preds = %originalBB110, %549
  %1334 = load %struct.rtx_def**, %struct.rtx_def*** %21, align 8
  call void @emit_stack_save(i32 0, %struct.rtx_def** %1334, %struct.rtx_def* null)
  %1335 = load %struct.function*, %struct.function** @cfun, align 8
  %1336 = getelementptr inbounds %struct.function, %struct.function* %1335, i32 0, i32 2
  %1337 = load %struct.expr_status*, %struct.expr_status** %1336, align 8
  %1338 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1337, i32 0, i32 0
  %1339 = load i32, i32* %1338, align 8
  %1340 = load i32*, i32** %22, align 8
  store i32 %1339, i32* %1340, align 4
  %1341 = load %struct.function*, %struct.function** @cfun, align 8
  %1342 = getelementptr inbounds %struct.function, %struct.function* %1341, i32 0, i32 2
  %1343 = load %struct.expr_status*, %struct.expr_status** %1342, align 8
  %1344 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1343, i32 0, i32 0
  store i32 0, i32* %1344, align 8
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %577
  %1345 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %1346 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1347 = bitcast %union.tree_node* %1346 to %struct.tree_type*
  %1348 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1347, i32 0, i32 7
  %1349 = load i32, i32* %1348, align 8
  %1350 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %1345, %struct.rtx_def* null, i32 %1349)
  %1351 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %1350)
  store %struct.rtx_def* %1351, %struct.rtx_def** %33, align 8
  %1352 = load %struct.rtx_def*, %struct.rtx_def** %33, align 8
  %1353 = load %union.tree_node*, %union.tree_node** %30, align 8
  call void @set_mem_attributes(%struct.rtx_def* %1352, %union.tree_node* %1353, i32 1)
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %689
  %1354 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1355 = load i32, i32* %28, align 4
  %1356 = sext i32 %1355 to i64
  %1357 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1354, i64 %1356
  %1358 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1357, i32 0, i32 7
  store i32 0, i32* %1358, align 4
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %751
  %1359 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1360 = call i64 @int_size_in_bytes(%union.tree_node* %1359)
  %1361 = load i32, i32* @target_flags, align 4
  %_123 = sub i32 %1361, 33554432
  %gen124 = mul i32 %_123, 33554432
  %_125 = shl i32 %1361, 33554432
  %_126 = sub i32 %1361, 33554432
  %gen127 = mul i32 %_126, 33554432
  %_128 = shl i32 %1361, 33554432
  %1362 = and i32 %1361, 33554432
  %1363 = icmp ne i32 %1362, 0
  %1364 = select i1 %1363, i32 64, i32 32
  %_129 = sub i32 0, %1364
  %gen130 = add i32 %_129, 8
  %_131 = shl i32 %1364, 8
  %_132 = shl i32 %1364, 8
  %_133 = shl i32 %1364, 8
  %_134 = sub i32 %1364, 8
  %gen135 = mul i32 %_134, 8
  %1365 = sdiv i32 %1364, 8
  %1366 = sext i32 %1365 to i64
  %_136 = sub i64 %1360, %1366
  %gen137 = mul i64 %_136, %1366
  %1367 = srem i64 %1360, %1366
  %1368 = icmp eq i64 0, %1367
  br label %originalBB122

originalBB141alteredBB:                           ; preds = %originalBB141, %779
  br label %originalBB141

originalBB145alteredBB:                           ; preds = %originalBB145, %850
  %1369 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1370 = bitcast %union.tree_node* %1369 to %struct.tree_common*
  %1371 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1370, i32 0, i32 2
  %1372 = load i32, i32* %1371, align 8
  %_146 = shl i32 %1372, 10
  %_147 = shl i32 %1372, 10
  %_148 = sub i32 %1372, 10
  %gen149 = mul i32 %_148, 10
  %_150 = sub i32 0, %1372
  %gen151 = add i32 %_150, 10
  %_152 = shl i32 %1372, 10
  %1373 = lshr i32 %1372, 10
  %_153 = sub i32 %1373, 1
  %gen154 = mul i32 %_153, 1
  %_155 = sub i32 0, %1373
  %gen156 = add i32 %_155, 1
  %_157 = shl i32 %1373, 1
  %_158 = sub i32 %1373, 1
  %gen159 = mul i32 %_158, 1
  %_160 = sub i32 %1373, 1
  %gen161 = mul i32 %_160, 1
  %_162 = sub i32 %1373, 1
  %gen163 = mul i32 %_162, 1
  %_164 = sub i32 %1373, 1
  %gen165 = mul i32 %_164, 1
  %_166 = sub i32 %1373, 1
  %gen167 = mul i32 %_166, 1
  %_168 = shl i32 %1373, 1
  %1374 = and i32 %1373, 1
  %1375 = icmp ne i32 %1374, 0
  br label %originalBB145

originalBB172alteredBB:                           ; preds = %originalBB172, %920
  %1376 = load i32, i32* %20, align 4
  %1377 = icmp sgt i32 %1376, 0
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %947
  %1378 = load i32, i32* %32, align 4
  %1379 = load %union.tree_node*, %union.tree_node** %30, align 8
  %1380 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1381 = load i32, i32* %28, align 4
  %1382 = sext i32 %1381 to i64
  %1383 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1380, i64 %1382
  %1384 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1383, i32 0, i32 4
  %1385 = load %struct.rtx_def*, %struct.rtx_def** %1384, align 8
  %1386 = icmp ne %struct.rtx_def* %1385, null
  %1387 = zext i1 %1386 to i32
  %1388 = load %union.tree_node*, %union.tree_node** %18, align 8
  %1389 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1390 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1391 = load i32, i32* %28, align 4
  %1392 = sext i32 %1391 to i64
  %1393 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1390, i64 %1392
  %1394 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1393, i32 0, i32 9
  %1395 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1396 = load i32, i32* %28, align 4
  %1397 = sext i32 %1396 to i64
  %1398 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1395, i64 %1397
  %1399 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1398, i32 0, i32 11
  call void @locate_and_pad_parm(i32 %1378, %union.tree_node* %1379, i32 %1387, %union.tree_node* %1388, %struct.args_size* %1389, %struct.args_size* %1394, %struct.args_size* %1399, %struct.args_size* %27)
  br label %originalBB176

originalBB180alteredBB:                           ; preds = %originalBB180, %1012
  %1400 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1401 = load i32, i32* %28, align 4
  %1402 = sext i32 %1401 to i64
  %1403 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1400, i64 %1402
  %1404 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1403, i32 0, i32 7
  %1405 = load i32, i32* %1404, align 4
  %1406 = load i32, i32* @target_flags, align 4
  %_181 = sub i32 0, %1406
  %gen182 = add i32 %_181, 33554432
  %_183 = sub i32 0, %1406
  %gen184 = add i32 %_183, 33554432
  %_185 = shl i32 %1406, 33554432
  %_186 = sub i32 %1406, 33554432
  %gen187 = mul i32 %_186, 33554432
  %1407 = and i32 %1406, 33554432
  %1408 = icmp ne i32 %1407, 0
  %1409 = select i1 %1408, i32 8, i32 4
  %_188 = sub i32 0, %1405
  %gen189 = add i32 %_188, %1409
  %_190 = shl i32 %1405, %1409
  %_191 = sub i32 0, %1405
  %gen192 = add i32 %_191, %1409
  %_193 = shl i32 %1405, %1409
  %1410 = mul nsw i32 %1405, %1409
  %1411 = load i32, i32* @target_flags, align 4
  %_194 = shl i32 %1411, 33554432
  %_195 = sub i32 %1411, 33554432
  %gen196 = mul i32 %_195, 33554432
  %_197 = sub i32 0, %1411
  %gen198 = add i32 %_197, 33554432
  %_199 = sub i32 0, %1411
  %gen200 = add i32 %_199, 33554432
  %_201 = shl i32 %1411, 33554432
  %_202 = sub i32 %1411, 33554432
  %gen203 = mul i32 %_202, 33554432
  %_204 = shl i32 %1411, 33554432
  %_205 = sub i32 %1411, 33554432
  %gen206 = mul i32 %_205, 33554432
  %_207 = sub i32 %1411, 33554432
  %gen208 = mul i32 %_207, 33554432
  %1412 = and i32 %1411, 33554432
  %1413 = icmp ne i32 %1412, 0
  %1414 = select i1 %1413, i32 64, i32 32
  %_209 = sub i32 0, %1414
  %gen210 = add i32 %_209, 8
  %_211 = sub i32 0, %1414
  %gen212 = add i32 %_211, 8
  %_213 = shl i32 %1414, 8
  %1415 = sdiv i32 %1414, 8
  %_214 = sub i32 %1410, %1415
  %gen215 = mul i32 %_214, %1415
  %_216 = shl i32 %1410, %1415
  %1416 = sdiv i32 %1410, %1415
  %1417 = load i32, i32* @target_flags, align 4
  %_217 = sub i32 0, %1417
  %gen218 = add i32 %_217, 33554432
  %1418 = and i32 %1417, 33554432
  %1419 = icmp ne i32 %1418, 0
  %1420 = select i1 %1419, i32 64, i32 32
  %_219 = shl i32 %1420, 8
  %_220 = shl i32 %1420, 8
  %1421 = sdiv i32 %1420, 8
  %_221 = shl i32 %1416, %1421
  %_222 = shl i32 %1416, %1421
  %_223 = sub i32 0, %1416
  %gen224 = add i32 %_223, %1421
  %_225 = sub i32 %1416, %1421
  %gen226 = mul i32 %_225, %1421
  %1422 = mul nsw i32 %1416, %1421
  %1423 = sext i32 %1422 to i64
  %1424 = load %struct.arg_data*, %struct.arg_data** %14, align 8
  %1425 = load i32, i32* %28, align 4
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1424, i64 %1426
  %1428 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1427, i32 0, i32 11
  %1429 = getelementptr inbounds %struct.args_size, %struct.args_size* %1428, i32 0, i32 0
  %1430 = load i64, i64* %1429, align 8
  %_227 = sub i64 %1430, %1423
  %gen228 = mul i64 %_227, %1423
  %1431 = sub nsw i64 %1430, %1423
  store i64 %1431, i64* %1429, align 8
  br label %originalBB180

originalBB232alteredBB:                           ; preds = %originalBB232, %1111
  %1432 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1433 = getelementptr inbounds %struct.args_size, %struct.args_size* %1432, i32 0, i32 1
  %1434 = load %union.tree_node*, %union.tree_node** %1433, align 8
  %1435 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1436 = load %union.tree_node*, %union.tree_node** %35, align 8
  %1437 = call %union.tree_node* @convert(%union.tree_node* %1435, %union.tree_node* %1436)
  %1438 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1434, %union.tree_node* %1437)
  %1439 = load %struct.args_size*, %struct.args_size** %15, align 8
  %1440 = getelementptr inbounds %struct.args_size, %struct.args_size* %1439, i32 0, i32 1
  store %union.tree_node* %1438, %union.tree_node** %1440, align 8
  br label %originalBB232

originalBB236alteredBB:                           ; preds = %originalBB236, %1138
  br label %originalBB236

originalBB240alteredBB:                           ; preds = %originalBB240, %1179
  br label %originalBB240
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @finalize_must_preallocate(i32, i32, %struct.arg_data*, %struct.args_size*) #0 {
  %5 = load i32, i32* @x.13
  %6 = load i32, i32* @y.14
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.arg_data*, align 8
  %16 = alloca %struct.args_size*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 %0, i32* %13, align 4
  store i32 %1, i32* %14, align 4
  store %struct.arg_data* %2, %struct.arg_data** %15, align 8
  store %struct.args_size* %3, %struct.args_size** %16, align 8
  %20 = load i32, i32* %13, align 4
  %21 = icmp ne i32 %20, 0
  %22 = load i32, i32* @x.13
  %23 = load i32, i32* @y.14
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %285, label %30

; <label>:30:                                     ; preds = %originalBBpart2
  store i32 0, i32* %17, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %19, align 4
  br label %31

; <label>:31:                                     ; preds = %251, %30
  %32 = load i32, i32* @x.13
  %33 = load i32, i32* @y.14
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %31
  %40 = load i32, i32* %19, align 4
  %41 = load i32, i32* %14, align 4
  %42 = icmp slt i32 %40, %41
  %43 = load i32, i32* @x.13
  %44 = load i32, i32* @y.14
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %42, label %51, label %71

; <label>:51:                                     ; preds = %originalBBpart24
  %52 = load i32, i32* @x.13
  %53 = load i32, i32* @y.14
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %51
  %60 = load i32, i32* %13, align 4
  %61 = icmp ne i32 %60, 0
  %62 = xor i1 %61, true
  %63 = load i32, i32* @x.13
  %64 = load i32, i32* @y.14
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart219, label %originalBB6alteredBB

originalBBpart219:                                ; preds = %originalBB6
  br label %71

; <label>:71:                                     ; preds = %originalBBpart219, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart219 ]
  %73 = load i32, i32* @x.13
  %74 = load i32, i32* @y.14
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %originalBB21alteredBB, %71
  %81 = load i32, i32* @x.13
  %82 = load i32, i32* @y.14
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br i1 %72, label %89, label %254

; <label>:89:                                     ; preds = %originalBBpart223
  %90 = load i32, i32* @x.13
  %91 = load i32, i32* @y.14
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %89
  %98 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %99 = load i32, i32* %19, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %98, i64 %100
  %102 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %101, i32 0, i32 7
  %103 = load i32, i32* %102, align 4
  %104 = icmp sgt i32 %103, 0
  %105 = load i32, i32* @x.13
  %106 = load i32, i32* @y.14
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %104, label %113, label %138

; <label>:113:                                    ; preds = %originalBBpart227
  %114 = load i32, i32* @x.13
  %115 = load i32, i32* @y.14
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %113
  %122 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %123 = load i32, i32* %19, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %122, i64 %124
  %126 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %125, i32 0, i32 8
  %127 = load i32, i32* %126, align 8
  %128 = icmp ne i32 %127, 0
  %129 = load i32, i32* @x.13
  %130 = load i32, i32* @y.14
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %128, label %138, label %137

; <label>:137:                                    ; preds = %originalBBpart231
  store i32 1, i32* %17, align 4
  br label %151

; <label>:138:                                    ; preds = %originalBBpart231, %originalBBpart227
  %139 = load i32, i32* %17, align 4
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %141, label %150

; <label>:141:                                    ; preds = %138
  %142 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %143 = load i32, i32* %19, align 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %142, i64 %144
  %146 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %145, i32 0, i32 4
  %147 = load %struct.rtx_def*, %struct.rtx_def** %146, align 8
  %148 = icmp eq %struct.rtx_def* %147, null
  br i1 %148, label %149, label %150

; <label>:149:                                    ; preds = %141
  store i32 1, i32* %13, align 4
  br label %150

; <label>:150:                                    ; preds = %149, %141, %138
  br label %151

; <label>:151:                                    ; preds = %150, %137
  %152 = load i32, i32* @x.13
  %153 = load i32, i32* @y.14
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %151
  %160 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %161 = load i32, i32* %19, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %160, i64 %162
  %164 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %163, i32 0, i32 0
  %165 = load %union.tree_node*, %union.tree_node** %164, align 8
  %166 = bitcast %union.tree_node* %165 to %struct.tree_common*
  %167 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %166, i32 0, i32 1
  %168 = load %union.tree_node*, %union.tree_node** %167, align 8
  %169 = bitcast %union.tree_node* %168 to %struct.tree_type*
  %170 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %169, i32 0, i32 6
  %171 = load i32, i32* %170, align 4
  %172 = lshr i32 %171, 9
  %173 = and i32 %172, 127
  %174 = icmp eq i32 %173, 51
  %175 = load i32, i32* @x.13
  %176 = load i32, i32* @y.14
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart248, label %originalBB33alteredBB

originalBBpart248:                                ; preds = %originalBB33
  br i1 %174, label %183, label %250

; <label>:183:                                    ; preds = %originalBBpart248
  %184 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %185 = load i32, i32* %19, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %184, i64 %186
  %188 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %187, i32 0, i32 0
  %189 = load %union.tree_node*, %union.tree_node** %188, align 8
  %190 = bitcast %union.tree_node* %189 to %struct.tree_common*
  %191 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %190, i32 0, i32 2
  %192 = load i32, i32* %191, align 8
  %193 = and i32 %192, 255
  %194 = icmp eq i32 %193, 53
  br i1 %194, label %235, label %195

; <label>:195:                                    ; preds = %183
  %196 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %197 = load i32, i32* %19, align 4
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %196, i64 %198
  %200 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %199, i32 0, i32 0
  %201 = load %union.tree_node*, %union.tree_node** %200, align 8
  %202 = bitcast %union.tree_node* %201 to %struct.tree_common*
  %203 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %202, i32 0, i32 2
  %204 = load i32, i32* %203, align 8
  %205 = and i32 %204, 255
  %206 = icmp eq i32 %205, 50
  br i1 %206, label %235, label %207

; <label>:207:                                    ; preds = %195
  %208 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %209 = load i32, i32* %19, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %208, i64 %210
  %212 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %211, i32 0, i32 0
  %213 = load %union.tree_node*, %union.tree_node** %212, align 8
  %214 = bitcast %union.tree_node* %213 to %struct.tree_common*
  %215 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %214, i32 0, i32 2
  %216 = load i32, i32* %215, align 8
  %217 = and i32 %216, 255
  %218 = icmp eq i32 %217, 51
  br i1 %218, label %235, label %219

; <label>:219:                                    ; preds = %207
  %220 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %221 = load i32, i32* %19, align 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %220, i64 %222
  %224 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %223, i32 0, i32 0
  %225 = load %union.tree_node*, %union.tree_node** %224, align 8
  %226 = bitcast %union.tree_node* %225 to %struct.tree_common*
  %227 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %226, i32 0, i32 1
  %228 = load %union.tree_node*, %union.tree_node** %227, align 8
  %229 = bitcast %union.tree_node* %228 to %struct.tree_common*
  %230 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %229, i32 0, i32 2
  %231 = load i32, i32* %230, align 8
  %232 = lshr i32 %231, 10
  %233 = and i32 %232, 1
  %234 = icmp ne i32 %233, 0
  br i1 %234, label %235, label %250

; <label>:235:                                    ; preds = %219, %207, %195, %183
  %236 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %237 = load i32, i32* %19, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %236, i64 %238
  %240 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %239, i32 0, i32 0
  %241 = load %union.tree_node*, %union.tree_node** %240, align 8
  %242 = bitcast %union.tree_node* %241 to %struct.tree_common*
  %243 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %242, i32 0, i32 1
  %244 = load %union.tree_node*, %union.tree_node** %243, align 8
  %245 = call i64 @int_size_in_bytes(%union.tree_node* %244)
  %246 = load i32, i32* %18, align 4
  %247 = sext i32 %246 to i64
  %248 = add nsw i64 %247, %245
  %249 = trunc i64 %248 to i32
  store i32 %249, i32* %18, align 4
  br label %250

; <label>:250:                                    ; preds = %235, %219, %originalBBpart248
  br label %251

; <label>:251:                                    ; preds = %250
  %252 = load i32, i32* %19, align 4
  %253 = add nsw i32 %252, 1
  store i32 %253, i32* %19, align 4
  br label %31

; <label>:254:                                    ; preds = %originalBBpart223
  %255 = load i32, i32* @x.13
  %256 = load i32, i32* @y.14
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %254
  %263 = load i32, i32* %18, align 4
  %264 = mul nsw i32 %263, 2
  %265 = sext i32 %264 to i64
  %266 = load %struct.args_size*, %struct.args_size** %16, align 8
  %267 = getelementptr inbounds %struct.args_size, %struct.args_size* %266, i32 0, i32 0
  %268 = load i64, i64* %267, align 8
  %269 = icmp sge i64 %265, %268
  %270 = load i32, i32* @x.13
  %271 = load i32, i32* @y.14
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBBpart254, label %originalBB50alteredBB

originalBBpart254:                                ; preds = %originalBB50
  br i1 %269, label %278, label %284

; <label>:278:                                    ; preds = %originalBBpart254
  %279 = load %struct.args_size*, %struct.args_size** %16, align 8
  %280 = getelementptr inbounds %struct.args_size, %struct.args_size* %279, i32 0, i32 0
  %281 = load i64, i64* %280, align 8
  %282 = icmp sgt i64 %281, 0
  br i1 %282, label %283, label %284

; <label>:283:                                    ; preds = %278
  store i32 1, i32* %13, align 4
  br label %284

; <label>:284:                                    ; preds = %283, %278, %originalBBpart254
  br label %285

; <label>:285:                                    ; preds = %284, %originalBBpart2
  %286 = load i32, i32* %13, align 4
  ret i32 %286

originalBBalteredBB:                              ; preds = %originalBB, %4
  %287 = alloca i32, align 4
  %288 = alloca i32, align 4
  %289 = alloca %struct.arg_data*, align 8
  %290 = alloca %struct.args_size*, align 8
  %291 = alloca i32, align 4
  %292 = alloca i32, align 4
  %293 = alloca i32, align 4
  store i32 %0, i32* %287, align 4
  store i32 %1, i32* %288, align 4
  store %struct.arg_data* %2, %struct.arg_data** %289, align 8
  store %struct.args_size* %3, %struct.args_size** %290, align 8
  %294 = load i32, i32* %287, align 4
  %295 = icmp ne i32 %294, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %296 = load i32, i32* %19, align 4
  %297 = load i32, i32* %14, align 4
  %298 = icmp slt i32 %296, %297
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %51
  %299 = load i32, i32* %13, align 4
  %300 = icmp ne i32 %299, 0
  %_ = sub i1 false, %300
  %gen = add i1 %_, true
  %_7 = sub i1 %300, true
  %gen8 = mul i1 %_7, true
  %_9 = sub i1 false, %300
  %gen10 = add i1 %_9, true
  %_11 = sub i1 false, %300
  %gen12 = add i1 %_11, true
  %_13 = shl i1 %300, true
  %_14 = sub i1 %300, true
  %gen15 = mul i1 %_14, true
  %_16 = sub i1 %300, true
  %gen17 = mul i1 %_16, true
  %301 = xor i1 %300, true
  br label %originalBB6

originalBB21alteredBB:                            ; preds = %originalBB21, %71
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %89
  %302 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %303 = load i32, i32* %19, align 4
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %302, i64 %304
  %306 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %305, i32 0, i32 7
  %307 = load i32, i32* %306, align 4
  %308 = icmp sgt i32 %307, 0
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %113
  %309 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %310 = load i32, i32* %19, align 4
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %309, i64 %311
  %313 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %312, i32 0, i32 8
  %314 = load i32, i32* %313, align 8
  %315 = icmp ne i32 %314, 0
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %151
  %316 = load %struct.arg_data*, %struct.arg_data** %15, align 8
  %317 = load i32, i32* %19, align 4
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %316, i64 %318
  %320 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %319, i32 0, i32 0
  %321 = load %union.tree_node*, %union.tree_node** %320, align 8
  %322 = bitcast %union.tree_node* %321 to %struct.tree_common*
  %323 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %322, i32 0, i32 1
  %324 = load %union.tree_node*, %union.tree_node** %323, align 8
  %325 = bitcast %union.tree_node* %324 to %struct.tree_type*
  %326 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %325, i32 0, i32 6
  %327 = load i32, i32* %326, align 4
  %_34 = sub i32 0, %327
  %gen35 = add i32 %_34, 9
  %_36 = sub i32 0, %327
  %gen37 = add i32 %_36, 9
  %_38 = shl i32 %327, 9
  %_39 = sub i32 %327, 9
  %gen40 = mul i32 %_39, 9
  %_41 = shl i32 %327, 9
  %_42 = shl i32 %327, 9
  %328 = lshr i32 %327, 9
  %_43 = sub i32 %328, 127
  %gen44 = mul i32 %_43, 127
  %_45 = sub i32 0, %328
  %gen46 = add i32 %_45, 127
  %329 = and i32 %328, 127
  %330 = icmp eq i32 %329, 51
  br label %originalBB33

originalBB50alteredBB:                            ; preds = %originalBB50, %254
  %331 = load i32, i32* %18, align 4
  %_51 = sub i32 0, %331
  %gen52 = add i32 %_51, 2
  %332 = mul nsw i32 %331, 2
  %333 = sext i32 %332 to i64
  %334 = load %struct.args_size*, %struct.args_size** %16, align 8
  %335 = getelementptr inbounds %struct.args_size, %struct.args_size* %334, i32 0, i32 0
  %336 = load i64, i64* %335, align 8
  %337 = icmp sge i64 %333, %336
  br label %originalBB50
}

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #1

declare i32 @any_pending_cleanups(i32) #1

declare i32 @ix86_return_pops_args(%union.tree_node*, %union.tree_node*, i32) #1

declare i32 @unsafe_for_reeval(%union.tree_node*) #1

declare %union.tree_node* @unsave_expr(%union.tree_node*) #1

declare %union.tree_node* @build_decl(i32, %union.tree_node*, %union.tree_node*) #1

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #1

declare void @emit_queue() #1

declare void @start_sequence() #1

declare void @expand_start_target_temps() #1

declare i32 @optimize_tail_recursion(%union.tree_node*, %struct.rtx_def*) #1

declare %struct.rtx_def* @get_last_insn() #1

declare %struct.rtx_def* @get_insns() #1

declare void @expand_end_target_temps() #1

declare void @end_sequence() #1

; Function Attrs: noinline nounwind uwtable
define void @emit_library_call(%struct.rtx_def*, i32, i32, i32, ...) #0 {
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.rtx_def* %0, %struct.rtx_def** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i32 0, i32 0
  %11 = bitcast %struct.__va_list_tag* %10 to i8*
  call void @llvm.va_start(i8* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %7, align 4
  %15 = load i32, i32* %8, align 4
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i32 0, i32 0
  %17 = call %struct.rtx_def* @emit_library_call_value_1(i32 0, %struct.rtx_def* %12, %struct.rtx_def* null, i32 %13, i32 %14, i32 %15, %struct.__va_list_tag* %16)
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i32 0, i32 0
  %19 = bitcast %struct.__va_list_tag* %18 to i8*
  call void @llvm.va_end(i8* %19)
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #1

declare void @do_pending_stack_adjust() #1

; Function Attrs: noinline nounwind uwtable
define internal void @precompute_arguments(i32, i32, %struct.arg_data*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.arg_data*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.arg_data* %2, %struct.arg_data** %6, align 8
  store i32 0, i32* %7, align 4
  br label %9

; <label>:9:                                      ; preds = %176, %3
  %10 = load i32, i32* %7, align 4
  %11 = load i32, i32* %5, align 4
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %179

; <label>:13:                                     ; preds = %9
  %14 = load i32, i32* @x.17
  %15 = load i32, i32* @y.18
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %13
  %22 = load i32, i32* %4, align 4
  %23 = and i32 %22, 4096
  %24 = icmp ne i32 %23, 0
  %25 = load i32, i32* @x.17
  %26 = load i32, i32* @y.18
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %24, label %63, label %33

; <label>:33:                                     ; preds = %originalBBpart2
  %34 = load i32, i32* @x.17
  %35 = load i32, i32* @y.18
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %33
  %42 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %43 = load i32, i32* %7, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %42, i64 %44
  %46 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %45, i32 0, i32 0
  %47 = load %union.tree_node*, %union.tree_node** %46, align 8
  %48 = load i32, i32* @target_flags, align 4
  %49 = and i32 %48, 4096
  %50 = icmp ne i32 %49, 0
  %51 = xor i1 %50, true
  %52 = zext i1 %51 to i32
  %53 = call i32 @calls_function(%union.tree_node* %47, i32 %52)
  %54 = icmp ne i32 %53, 0
  %55 = load i32, i32* @x.17
  %56 = load i32, i32* @y.18
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart220, label %originalBB14alteredBB

originalBBpart220:                                ; preds = %originalBB14
  br i1 %54, label %63, label %175

; <label>:63:                                     ; preds = %originalBBpart220, %originalBBpart2
  %64 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %65 = load i32, i32* %7, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %64, i64 %66
  %68 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %67, i32 0, i32 0
  %69 = load %union.tree_node*, %union.tree_node** %68, align 8
  %70 = bitcast %union.tree_node* %69 to %struct.tree_common*
  %71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %70, i32 0, i32 1
  %72 = load %union.tree_node*, %union.tree_node** %71, align 8
  %73 = bitcast %union.tree_node* %72 to %struct.tree_common*
  %74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %73, i32 0, i32 2
  %75 = load i32, i32* %74, align 8
  %76 = lshr i32 %75, 10
  %77 = and i32 %76, 1
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %79, label %80

; <label>:79:                                     ; preds = %63
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 1512, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.precompute_arguments, i32 0, i32 0)) #8
  unreachable

; <label>:80:                                     ; preds = %63
  %81 = load i32, i32* @x.17
  %82 = load i32, i32* @y.18
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %80
  %89 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %90 = load i32, i32* %7, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %89, i64 %91
  %93 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %92, i32 0, i32 0
  %94 = load %union.tree_node*, %union.tree_node** %93, align 8
  %95 = call %struct.rtx_def* @expand_expr(%union.tree_node* %94, %struct.rtx_def* null, i32 0, i32 0)
  %96 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %97 = load i32, i32* %7, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %96, i64 %98
  %100 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %99, i32 0, i32 2
  store %struct.rtx_def* %95, %struct.rtx_def** %100, align 8
  call void @emit_queue()
  %101 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %102 = load i32, i32* %7, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %101, i64 %103
  %105 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %104, i32 0, i32 2
  %106 = load %struct.rtx_def*, %struct.rtx_def** %105, align 8
  %107 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %106, i32 0)
  %108 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %109 = load i32, i32* %7, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %108, i64 %110
  %112 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %111, i32 0, i32 2
  store %struct.rtx_def* %107, %struct.rtx_def** %112, align 8
  %113 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %114 = load i32, i32* %7, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %113, i64 %115
  %117 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %116, i32 0, i32 3
  store %struct.rtx_def* %107, %struct.rtx_def** %117, align 8
  %118 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %119 = load i32, i32* %7, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %118, i64 %120
  %122 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %121, i32 0, i32 0
  %123 = load %union.tree_node*, %union.tree_node** %122, align 8
  %124 = bitcast %union.tree_node* %123 to %struct.tree_common*
  %125 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %124, i32 0, i32 1
  %126 = load %union.tree_node*, %union.tree_node** %125, align 8
  %127 = bitcast %union.tree_node* %126 to %struct.tree_type*
  %128 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %127, i32 0, i32 6
  %129 = load i32, i32* %128, align 4
  %130 = lshr i32 %129, 9
  %131 = and i32 %130, 127
  store i32 %131, i32* %8, align 4
  %132 = load i32, i32* %8, align 4
  %133 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %134 = load i32, i32* %7, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %133, i64 %135
  %137 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %136, i32 0, i32 1
  %138 = load i32, i32* %137, align 8
  %139 = icmp ne i32 %132, %138
  %140 = load i32, i32* @x.17
  %141 = load i32, i32* @y.18
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart237, label %originalBB22alteredBB

originalBBpart237:                                ; preds = %originalBB22
  br i1 %139, label %148, label %174

; <label>:148:                                    ; preds = %originalBBpart237
  %149 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %150 = load i32, i32* %7, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %149, i64 %151
  %153 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %152, i32 0, i32 1
  %154 = load i32, i32* %153, align 8
  %155 = load i32, i32* %8, align 4
  %156 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %157 = load i32, i32* %7, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %156, i64 %158
  %160 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %159, i32 0, i32 2
  %161 = load %struct.rtx_def*, %struct.rtx_def** %160, align 8
  %162 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %163 = load i32, i32* %7, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %162, i64 %164
  %166 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %165, i32 0, i32 6
  %167 = load i32, i32* %166, align 8
  %168 = call %struct.rtx_def* @convert_modes(i32 %154, i32 %155, %struct.rtx_def* %161, i32 %167)
  %169 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %170 = load i32, i32* %7, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %169, i64 %171
  %173 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %172, i32 0, i32 2
  store %struct.rtx_def* %168, %struct.rtx_def** %173, align 8
  br label %174

; <label>:174:                                    ; preds = %148, %originalBBpart237
  br label %175

; <label>:175:                                    ; preds = %174, %originalBBpart220
  br label %176

; <label>:176:                                    ; preds = %175
  %177 = load i32, i32* %7, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %7, align 4
  br label %9

; <label>:179:                                    ; preds = %9
  %180 = load i32, i32* @x.17
  %181 = load i32, i32* @y.18
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %originalBB39alteredBB, %179
  %188 = load i32, i32* @x.17
  %189 = load i32, i32* @y.18
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %13
  %196 = load i32, i32* %4, align 4
  %_ = shl i32 %196, 4096
  %_1 = sub i32 %196, 4096
  %gen = mul i32 %_1, 4096
  %_2 = sub i32 0, %196
  %gen3 = add i32 %_2, 4096
  %_4 = sub i32 %196, 4096
  %gen5 = mul i32 %_4, 4096
  %_6 = sub i32 0, %196
  %gen7 = add i32 %_6, 4096
  %_8 = sub i32 %196, 4096
  %gen9 = mul i32 %_8, 4096
  %_10 = shl i32 %196, 4096
  %_11 = sub i32 0, %196
  %gen12 = add i32 %_11, 4096
  %_13 = shl i32 %196, 4096
  %197 = and i32 %196, 4096
  %198 = icmp ne i32 %197, 0
  br label %originalBB

originalBB14alteredBB:                            ; preds = %originalBB14, %33
  %199 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %200 = load i32, i32* %7, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %199, i64 %201
  %203 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %202, i32 0, i32 0
  %204 = load %union.tree_node*, %union.tree_node** %203, align 8
  %205 = load i32, i32* @target_flags, align 4
  %_15 = shl i32 %205, 4096
  %_16 = shl i32 %205, 4096
  %206 = and i32 %205, 4096
  %207 = icmp ne i32 %206, 0
  %_17 = sub i1 %207, true
  %gen18 = mul i1 %_17, true
  %208 = xor i1 %207, true
  %209 = zext i1 %208 to i32
  %210 = call i32 @calls_function(%union.tree_node* %204, i32 %209)
  %211 = icmp ne i32 %210, 0
  br label %originalBB14

originalBB22alteredBB:                            ; preds = %originalBB22, %80
  %212 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %213 = load i32, i32* %7, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %212, i64 %214
  %216 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %215, i32 0, i32 0
  %217 = load %union.tree_node*, %union.tree_node** %216, align 8
  %218 = call %struct.rtx_def* @expand_expr(%union.tree_node* %217, %struct.rtx_def* null, i32 0, i32 0)
  %219 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %220 = load i32, i32* %7, align 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %219, i64 %221
  %223 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %222, i32 0, i32 2
  store %struct.rtx_def* %218, %struct.rtx_def** %223, align 8
  call void @emit_queue()
  %224 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %225 = load i32, i32* %7, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %224, i64 %226
  %228 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %227, i32 0, i32 2
  %229 = load %struct.rtx_def*, %struct.rtx_def** %228, align 8
  %230 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %229, i32 0)
  %231 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %232 = load i32, i32* %7, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %231, i64 %233
  %235 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %234, i32 0, i32 2
  store %struct.rtx_def* %230, %struct.rtx_def** %235, align 8
  %236 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %237 = load i32, i32* %7, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %236, i64 %238
  %240 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %239, i32 0, i32 3
  store %struct.rtx_def* %230, %struct.rtx_def** %240, align 8
  %241 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %242 = load i32, i32* %7, align 4
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %241, i64 %243
  %245 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %244, i32 0, i32 0
  %246 = load %union.tree_node*, %union.tree_node** %245, align 8
  %247 = bitcast %union.tree_node* %246 to %struct.tree_common*
  %248 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %247, i32 0, i32 1
  %249 = load %union.tree_node*, %union.tree_node** %248, align 8
  %250 = bitcast %union.tree_node* %249 to %struct.tree_type*
  %251 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %250, i32 0, i32 6
  %252 = load i32, i32* %251, align 4
  %_23 = sub i32 0, %252
  %gen24 = add i32 %_23, 9
  %_25 = shl i32 %252, 9
  %_26 = sub i32 0, %252
  %gen27 = add i32 %_26, 9
  %253 = lshr i32 %252, 9
  %_28 = shl i32 %253, 127
  %_29 = sub i32 %253, 127
  %gen30 = mul i32 %_29, 127
  %_31 = sub i32 %253, 127
  %gen32 = mul i32 %_31, 127
  %_33 = sub i32 0, %253
  %gen34 = add i32 %_33, 127
  %_35 = shl i32 %253, 127
  %254 = and i32 %253, 127
  store i32 %254, i32* %8, align 4
  %255 = load i32, i32* %8, align 4
  %256 = load %struct.arg_data*, %struct.arg_data** %6, align 8
  %257 = load i32, i32* %7, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %256, i64 %258
  %260 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %259, i32 0, i32 1
  %261 = load i32, i32* %260, align 8
  %262 = icmp ne i32 %255, %261
  br label %originalBB22

originalBB39alteredBB:                            ; preds = %originalBB39, %179
  br label %originalBB39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_argument_block_size(i32, %struct.args_size*, i32) #0 {
  %4 = load i32, i32* @x.19
  %5 = load i32, i32* @y.20
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %3
  %12 = alloca i32, align 4
  %13 = alloca %struct.args_size*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 %0, i32* %12, align 4
  store %struct.args_size* %1, %struct.args_size** %13, align 8
  store i32 %2, i32* %14, align 4
  %16 = load %struct.args_size*, %struct.args_size** %13, align 8
  %17 = getelementptr inbounds %struct.args_size, %struct.args_size* %16, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %15, align 4
  %20 = load i32, i32* @target_flags, align 4
  %21 = and i32 %20, 4096
  %22 = icmp ne i32 %21, 0
  %23 = load i32, i32* @x.19
  %24 = load i32, i32* @y.20
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %59

; <label>:31:                                     ; preds = %originalBBpart2
  %32 = load i32, i32* %14, align 4
  %33 = load i32, i32* @target_flags, align 4
  %34 = and i32 %33, 33554432
  %35 = icmp ne i32 %34, 0
  %36 = select i1 %35, i32 64, i32 32
  %37 = icmp sgt i32 %32, %36
  br i1 %37, label %38, label %59

; <label>:38:                                     ; preds = %31
  %39 = load i32, i32* @x.19
  %40 = load i32, i32* @y.20
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB2, label %originalBB2alteredBB

originalBB2:                                      ; preds = %originalBB2alteredBB, %38
  %47 = load i32, i32* @target_flags, align 4
  %48 = and i32 %47, 33554432
  %49 = icmp ne i32 %48, 0
  %50 = select i1 %49, i32 64, i32 32
  store i32 %50, i32* %14, align 4
  %51 = load i32, i32* @x.19
  %52 = load i32, i32* @y.20
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart211, label %originalBB2alteredBB

originalBBpart211:                                ; preds = %originalBB2
  br label %59

; <label>:59:                                     ; preds = %originalBBpart211, %31, %originalBBpart2
  %60 = load i32, i32* @x.19
  %61 = load i32, i32* @y.20
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %originalBB13alteredBB, %59
  %68 = load %struct.args_size*, %struct.args_size** %13, align 8
  %69 = getelementptr inbounds %struct.args_size, %struct.args_size* %68, i32 0, i32 1
  %70 = load %union.tree_node*, %union.tree_node** %69, align 8
  %71 = icmp ne %union.tree_node* %70, null
  %72 = load i32, i32* @x.19
  %73 = load i32, i32* @y.20
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br i1 %71, label %80, label %217

; <label>:80:                                     ; preds = %originalBBpart215
  %81 = load %struct.args_size*, %struct.args_size** %13, align 8
  %82 = getelementptr inbounds %struct.args_size, %struct.args_size* %81, i32 0, i32 1
  %83 = load %union.tree_node*, %union.tree_node** %82, align 8
  %84 = icmp eq %union.tree_node* %83, null
  br i1 %84, label %85, label %106

; <label>:85:                                     ; preds = %80
  %86 = load i32, i32* @x.19
  %87 = load i32, i32* @y.20
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %85
  %94 = load %struct.args_size*, %struct.args_size** %13, align 8
  %95 = getelementptr inbounds %struct.args_size, %struct.args_size* %94, i32 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = call %union.tree_node* @size_int_wide(i64 %96, i32 1)
  %98 = load i32, i32* @x.19
  %99 = load i32, i32* @y.20
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %133

; <label>:106:                                    ; preds = %80
  %107 = load i32, i32* @x.19
  %108 = load i32, i32* @y.20
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %originalBB21alteredBB, %106
  %115 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %116 = load %struct.args_size*, %struct.args_size** %13, align 8
  %117 = getelementptr inbounds %struct.args_size, %struct.args_size* %116, i32 0, i32 1
  %118 = load %union.tree_node*, %union.tree_node** %117, align 8
  %119 = call %union.tree_node* @convert(%union.tree_node* %115, %union.tree_node* %118)
  %120 = load %struct.args_size*, %struct.args_size** %13, align 8
  %121 = getelementptr inbounds %struct.args_size, %struct.args_size* %120, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = call %union.tree_node* @size_int_wide(i64 %122, i32 1)
  %124 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %119, %union.tree_node* %123)
  %125 = load i32, i32* @x.19
  %126 = load i32, i32* @y.20
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %133

; <label>:133:                                    ; preds = %originalBBpart223, %originalBBpart219
  %134 = phi %union.tree_node* [ %97, %originalBBpart219 ], [ %124, %originalBBpart223 ]
  %135 = load %struct.args_size*, %struct.args_size** %13, align 8
  %136 = getelementptr inbounds %struct.args_size, %struct.args_size* %135, i32 0, i32 1
  store %union.tree_node* %134, %union.tree_node** %136, align 8
  %137 = load %struct.args_size*, %struct.args_size** %13, align 8
  %138 = getelementptr inbounds %struct.args_size, %struct.args_size* %137, i32 0, i32 0
  store i64 0, i64* %138, align 8
  %139 = load i32, i32* %14, align 4
  %140 = sdiv i32 %139, 8
  store i32 %140, i32* %14, align 4
  %141 = load i32, i32* %14, align 4
  %142 = icmp sgt i32 %141, 1
  br i1 %142, label %143, label %178

; <label>:143:                                    ; preds = %133
  %144 = load i32, i32* @x.19
  %145 = load i32, i32* @y.20
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %143
  %152 = load %struct.function*, %struct.function** @cfun, align 8
  %153 = getelementptr inbounds %struct.function, %struct.function* %152, i32 0, i32 2
  %154 = load %struct.expr_status*, %struct.expr_status** %153, align 8
  %155 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %154, i32 0, i32 2
  %156 = load i32, i32* %155, align 8
  %157 = load i32, i32* %14, align 4
  %158 = sub nsw i32 %157, 1
  %159 = and i32 %156, %158
  %160 = icmp ne i32 %159, 0
  %161 = load i32, i32* @x.19
  %162 = load i32, i32* @y.20
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart246, label %originalBB25alteredBB

originalBBpart246:                                ; preds = %originalBB25
  br i1 %160, label %169, label %170

; <label>:169:                                    ; preds = %originalBBpart246
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 1425, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__FUNCTION__.compute_argument_block_size, i32 0, i32 0)) #8
  unreachable

; <label>:170:                                    ; preds = %originalBBpart246
  %171 = load %struct.args_size*, %struct.args_size** %13, align 8
  %172 = getelementptr inbounds %struct.args_size, %struct.args_size* %171, i32 0, i32 1
  %173 = load %union.tree_node*, %union.tree_node** %172, align 8
  %174 = load i32, i32* %14, align 4
  %175 = call %union.tree_node* @round_up(%union.tree_node* %173, i32 %174)
  %176 = load %struct.args_size*, %struct.args_size** %13, align 8
  %177 = getelementptr inbounds %struct.args_size, %struct.args_size* %176, i32 0, i32 1
  store %union.tree_node* %175, %union.tree_node** %177, align 8
  br label %178

; <label>:178:                                    ; preds = %170, %133
  %179 = load i32, i32* %12, align 4
  %180 = icmp sgt i32 %179, 0
  br i1 %180, label %181, label %200

; <label>:181:                                    ; preds = %178
  %182 = load %struct.args_size*, %struct.args_size** %13, align 8
  %183 = getelementptr inbounds %struct.args_size, %struct.args_size* %182, i32 0, i32 1
  %184 = load %union.tree_node*, %union.tree_node** %183, align 8
  %185 = load i32, i32* %12, align 4
  %186 = sext i32 %185 to i64
  %187 = call %union.tree_node* @size_int_wide(i64 %186, i32 1)
  %188 = call %union.tree_node* @size_binop(i32 79, %union.tree_node* %184, %union.tree_node* %187)
  %189 = load %struct.args_size*, %struct.args_size** %13, align 8
  %190 = getelementptr inbounds %struct.args_size, %struct.args_size* %189, i32 0, i32 1
  store %union.tree_node* %188, %union.tree_node** %190, align 8
  %191 = load %struct.args_size*, %struct.args_size** %13, align 8
  %192 = getelementptr inbounds %struct.args_size, %struct.args_size* %191, i32 0, i32 1
  %193 = load %union.tree_node*, %union.tree_node** %192, align 8
  %194 = load i32, i32* %12, align 4
  %195 = sext i32 %194 to i64
  %196 = call %union.tree_node* @size_int_wide(i64 %195, i32 1)
  %197 = call %union.tree_node* @size_binop(i32 60, %union.tree_node* %193, %union.tree_node* %196)
  %198 = load %struct.args_size*, %struct.args_size** %13, align 8
  %199 = getelementptr inbounds %struct.args_size, %struct.args_size* %198, i32 0, i32 1
  store %union.tree_node* %197, %union.tree_node** %199, align 8
  br label %200

; <label>:200:                                    ; preds = %181, %178
  %201 = load i32, i32* @x.19
  %202 = load i32, i32* @y.20
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %originalBB48alteredBB, %200
  %209 = load i32, i32* @x.19
  %210 = load i32, i32* @y.20
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br label %308

; <label>:217:                                    ; preds = %originalBBpart215
  %218 = load i32, i32* %14, align 4
  %219 = sdiv i32 %218, 8
  store i32 %219, i32* %14, align 4
  %220 = load i32, i32* %14, align 4
  %221 = icmp slt i32 %220, 1
  br i1 %221, label %222, label %223

; <label>:222:                                    ; preds = %217
  store i32 1, i32* %14, align 4
  br label %223

; <label>:223:                                    ; preds = %222, %217
  %224 = load i32, i32* @x.19
  %225 = load i32, i32* @y.20
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %originalBB52alteredBB, %223
  %232 = load %struct.args_size*, %struct.args_size** %13, align 8
  %233 = getelementptr inbounds %struct.args_size, %struct.args_size* %232, i32 0, i32 0
  %234 = load i64, i64* %233, align 8
  %235 = load %struct.function*, %struct.function** @cfun, align 8
  %236 = getelementptr inbounds %struct.function, %struct.function* %235, i32 0, i32 2
  %237 = load %struct.expr_status*, %struct.expr_status** %236, align 8
  %238 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %237, i32 0, i32 2
  %239 = load i32, i32* %238, align 8
  %240 = sext i32 %239 to i64
  %241 = add nsw i64 %234, %240
  %242 = load i32, i32* %14, align 4
  %243 = sext i32 %242 to i64
  %244 = add nsw i64 %241, %243
  %245 = sub nsw i64 %244, 1
  %246 = load i32, i32* %14, align 4
  %247 = sext i32 %246 to i64
  %248 = sdiv i64 %245, %247
  %249 = load i32, i32* %14, align 4
  %250 = sext i32 %249 to i64
  %251 = mul nsw i64 %248, %250
  %252 = load %struct.function*, %struct.function** @cfun, align 8
  %253 = getelementptr inbounds %struct.function, %struct.function* %252, i32 0, i32 2
  %254 = load %struct.expr_status*, %struct.expr_status** %253, align 8
  %255 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %254, i32 0, i32 2
  %256 = load i32, i32* %255, align 8
  %257 = sext i32 %256 to i64
  %258 = sub nsw i64 %251, %257
  %259 = load %struct.args_size*, %struct.args_size** %13, align 8
  %260 = getelementptr inbounds %struct.args_size, %struct.args_size* %259, i32 0, i32 0
  store i64 %258, i64* %260, align 8
  %261 = load %struct.args_size*, %struct.args_size** %13, align 8
  %262 = getelementptr inbounds %struct.args_size, %struct.args_size* %261, i32 0, i32 0
  %263 = load i64, i64* %262, align 8
  %264 = load i32, i32* %12, align 4
  %265 = sext i32 %264 to i64
  %266 = icmp sgt i64 %263, %265
  %267 = load i32, i32* @x.19
  %268 = load i32, i32* @y.20
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBBpart295, label %originalBB52alteredBB

originalBBpart295:                                ; preds = %originalBB52
  br i1 %266, label %275, label %295

; <label>:275:                                    ; preds = %originalBBpart295
  %276 = load i32, i32* @x.19
  %277 = load i32, i32* @y.20
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %originalBB97alteredBB, %275
  %284 = load %struct.args_size*, %struct.args_size** %13, align 8
  %285 = getelementptr inbounds %struct.args_size, %struct.args_size* %284, i32 0, i32 0
  %286 = load i64, i64* %285, align 8
  %287 = load i32, i32* @x.19
  %288 = load i32, i32* @y.20
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %298

; <label>:295:                                    ; preds = %originalBBpart295
  %296 = load i32, i32* %12, align 4
  %297 = sext i32 %296 to i64
  br label %298

; <label>:298:                                    ; preds = %295, %originalBBpart299
  %299 = phi i64 [ %286, %originalBBpart299 ], [ %297, %295 ]
  %300 = load %struct.args_size*, %struct.args_size** %13, align 8
  %301 = getelementptr inbounds %struct.args_size, %struct.args_size* %300, i32 0, i32 0
  store i64 %299, i64* %301, align 8
  %302 = load i32, i32* %12, align 4
  %303 = sext i32 %302 to i64
  %304 = load %struct.args_size*, %struct.args_size** %13, align 8
  %305 = getelementptr inbounds %struct.args_size, %struct.args_size* %304, i32 0, i32 0
  %306 = load i64, i64* %305, align 8
  %307 = sub nsw i64 %306, %303
  store i64 %307, i64* %305, align 8
  br label %308

; <label>:308:                                    ; preds = %298, %originalBBpart250
  %309 = load i32, i32* %15, align 4
  ret i32 %309

originalBBalteredBB:                              ; preds = %originalBB, %3
  %310 = alloca i32, align 4
  %311 = alloca %struct.args_size*, align 8
  %312 = alloca i32, align 4
  %313 = alloca i32, align 4
  store i32 %0, i32* %310, align 4
  store %struct.args_size* %1, %struct.args_size** %311, align 8
  store i32 %2, i32* %312, align 4
  %314 = load %struct.args_size*, %struct.args_size** %311, align 8
  %315 = getelementptr inbounds %struct.args_size, %struct.args_size* %314, i32 0, i32 0
  %316 = load i64, i64* %315, align 8
  %317 = trunc i64 %316 to i32
  store i32 %317, i32* %313, align 4
  %318 = load i32, i32* @target_flags, align 4
  %_ = sub i32 %318, 4096
  %gen = mul i32 %_, 4096
  %_1 = shl i32 %318, 4096
  %319 = and i32 %318, 4096
  %320 = icmp ne i32 %319, 0
  br label %originalBB

originalBB2alteredBB:                             ; preds = %originalBB2, %38
  %321 = load i32, i32* @target_flags, align 4
  %_3 = shl i32 %321, 33554432
  %_4 = sub i32 0, %321
  %gen5 = add i32 %_4, 33554432
  %_6 = sub i32 %321, 33554432
  %gen7 = mul i32 %_6, 33554432
  %_8 = sub i32 0, %321
  %gen9 = add i32 %_8, 33554432
  %322 = and i32 %321, 33554432
  %323 = icmp ne i32 %322, 0
  %324 = select i1 %323, i32 64, i32 32
  store i32 %324, i32* %14, align 4
  br label %originalBB2

originalBB13alteredBB:                            ; preds = %originalBB13, %59
  %325 = load %struct.args_size*, %struct.args_size** %13, align 8
  %326 = getelementptr inbounds %struct.args_size, %struct.args_size* %325, i32 0, i32 1
  %327 = load %union.tree_node*, %union.tree_node** %326, align 8
  %328 = icmp ne %union.tree_node* %327, null
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %85
  %329 = load %struct.args_size*, %struct.args_size** %13, align 8
  %330 = getelementptr inbounds %struct.args_size, %struct.args_size* %329, i32 0, i32 0
  %331 = load i64, i64* %330, align 8
  %332 = call %union.tree_node* @size_int_wide(i64 %331, i32 1)
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %106
  %333 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %334 = load %struct.args_size*, %struct.args_size** %13, align 8
  %335 = getelementptr inbounds %struct.args_size, %struct.args_size* %334, i32 0, i32 1
  %336 = load %union.tree_node*, %union.tree_node** %335, align 8
  %337 = call %union.tree_node* @convert(%union.tree_node* %333, %union.tree_node* %336)
  %338 = load %struct.args_size*, %struct.args_size** %13, align 8
  %339 = getelementptr inbounds %struct.args_size, %struct.args_size* %338, i32 0, i32 0
  %340 = load i64, i64* %339, align 8
  %341 = call %union.tree_node* @size_int_wide(i64 %340, i32 1)
  %342 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %337, %union.tree_node* %341)
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %143
  %343 = load %struct.function*, %struct.function** @cfun, align 8
  %344 = getelementptr inbounds %struct.function, %struct.function* %343, i32 0, i32 2
  %345 = load %struct.expr_status*, %struct.expr_status** %344, align 8
  %346 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %345, i32 0, i32 2
  %347 = load i32, i32* %346, align 8
  %348 = load i32, i32* %14, align 4
  %_26 = sub i32 %348, 1
  %gen27 = mul i32 %_26, 1
  %_28 = sub i32 0, %348
  %gen29 = add i32 %_28, 1
  %_30 = sub i32 0, %348
  %gen31 = add i32 %_30, 1
  %_32 = sub i32 0, %348
  %gen33 = add i32 %_32, 1
  %_34 = sub i32 0, %348
  %gen35 = add i32 %_34, 1
  %_36 = sub i32 0, %348
  %gen37 = add i32 %_36, 1
  %_38 = sub i32 %348, 1
  %gen39 = mul i32 %_38, 1
  %349 = sub nsw i32 %348, 1
  %_40 = sub i32 0, %347
  %gen41 = add i32 %_40, %349
  %_42 = sub i32 %347, %349
  %gen43 = mul i32 %_42, %349
  %_44 = shl i32 %347, %349
  %350 = and i32 %347, %349
  %351 = icmp ne i32 %350, 0
  br label %originalBB25

originalBB48alteredBB:                            ; preds = %originalBB48, %200
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %223
  %352 = load %struct.args_size*, %struct.args_size** %13, align 8
  %353 = getelementptr inbounds %struct.args_size, %struct.args_size* %352, i32 0, i32 0
  %354 = load i64, i64* %353, align 8
  %355 = load %struct.function*, %struct.function** @cfun, align 8
  %356 = getelementptr inbounds %struct.function, %struct.function* %355, i32 0, i32 2
  %357 = load %struct.expr_status*, %struct.expr_status** %356, align 8
  %358 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %357, i32 0, i32 2
  %359 = load i32, i32* %358, align 8
  %360 = sext i32 %359 to i64
  %_53 = shl i64 %354, %360
  %_54 = shl i64 %354, %360
  %_55 = sub i64 0, %354
  %gen56 = add i64 %_55, %360
  %_57 = sub i64 0, %354
  %gen58 = add i64 %_57, %360
  %_59 = shl i64 %354, %360
  %_60 = sub i64 0, %354
  %gen61 = add i64 %_60, %360
  %_62 = sub i64 0, %354
  %gen63 = add i64 %_62, %360
  %361 = add nsw i64 %354, %360
  %362 = load i32, i32* %14, align 4
  %363 = sext i32 %362 to i64
  %_64 = sub i64 0, %361
  %gen65 = add i64 %_64, %363
  %_66 = sub i64 0, %361
  %gen67 = add i64 %_66, %363
  %_68 = sub i64 0, %361
  %gen69 = add i64 %_68, %363
  %364 = add nsw i64 %361, %363
  %_70 = sub i64 %364, 1
  %gen71 = mul i64 %_70, 1
  %365 = sub nsw i64 %364, 1
  %366 = load i32, i32* %14, align 4
  %367 = sext i32 %366 to i64
  %_72 = sub i64 %365, %367
  %gen73 = mul i64 %_72, %367
  %_74 = shl i64 %365, %367
  %_75 = sub i64 %365, %367
  %gen76 = mul i64 %_75, %367
  %_77 = shl i64 %365, %367
  %_78 = sub i64 0, %365
  %gen79 = add i64 %_78, %367
  %_80 = shl i64 %365, %367
  %368 = sdiv i64 %365, %367
  %369 = load i32, i32* %14, align 4
  %370 = sext i32 %369 to i64
  %_81 = shl i64 %368, %370
  %_82 = shl i64 %368, %370
  %_83 = sub i64 %368, %370
  %gen84 = mul i64 %_83, %370
  %_85 = shl i64 %368, %370
  %371 = mul nsw i64 %368, %370
  %372 = load %struct.function*, %struct.function** @cfun, align 8
  %373 = getelementptr inbounds %struct.function, %struct.function* %372, i32 0, i32 2
  %374 = load %struct.expr_status*, %struct.expr_status** %373, align 8
  %375 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %374, i32 0, i32 2
  %376 = load i32, i32* %375, align 8
  %377 = sext i32 %376 to i64
  %_86 = sub i64 0, %371
  %gen87 = add i64 %_86, %377
  %_88 = sub i64 0, %371
  %gen89 = add i64 %_88, %377
  %_90 = sub i64 0, %371
  %gen91 = add i64 %_90, %377
  %_92 = sub i64 %371, %377
  %gen93 = mul i64 %_92, %377
  %378 = sub nsw i64 %371, %377
  %379 = load %struct.args_size*, %struct.args_size** %13, align 8
  %380 = getelementptr inbounds %struct.args_size, %struct.args_size* %379, i32 0, i32 0
  store i64 %378, i64* %380, align 8
  %381 = load %struct.args_size*, %struct.args_size** %13, align 8
  %382 = getelementptr inbounds %struct.args_size, %struct.args_size* %381, i32 0, i32 0
  %383 = load i64, i64* %382, align 8
  %384 = load i32, i32* %12, align 4
  %385 = sext i32 %384 to i64
  %386 = icmp sgt i64 %383, %385
  br label %originalBB52

originalBB97alteredBB:                            ; preds = %originalBB97, %275
  %387 = load %struct.args_size*, %struct.args_size** %13, align 8
  %388 = getelementptr inbounds %struct.args_size, %struct.args_size* %387, i32 0, i32 0
  %389 = load i64, i64* %388, align 8
  br label %originalBB97
}

declare %struct.simple_bitmap_def* @sbitmap_alloc(i32) #1

declare void @sbitmap_zero(%struct.simple_bitmap_def*) #1

declare void @emit_stack_save(i32, %struct.rtx_def**, %struct.rtx_def*) #1

declare %struct.rtx_def* @push_block(%struct.rtx_def*, i32, i32) #1

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

declare %union.tree_node* @size_int_wide(i64, i32) #1

declare %union.tree_node* @size_binop(i32, %union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @combine_pending_stack_adjustment_and_call(i32, %struct.args_size*, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.args_size*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  store %struct.args_size* %1, %struct.args_size** %5, align 8
  store i32 %2, i32* %6, align 4
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  %10 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 2
  %11 = load %struct.expr_status*, %struct.expr_status** %10, align 8
  %12 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %11, i32 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = load i32, i32* %4, align 4
  %15 = add nsw i32 %13, %14
  %16 = load i32, i32* %6, align 4
  %17 = srem i32 %15, %16
  %18 = sext i32 %17 to i64
  store i64 %18, i64* %8, align 8
  %19 = load i64, i64* %8, align 8
  %20 = load %struct.function*, %struct.function** @cfun, align 8
  %21 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 2
  %22 = load %struct.expr_status*, %struct.expr_status** %21, align 8
  %23 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %22, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = load i32, i32* %6, align 4
  %26 = srem i32 %24, %25
  %27 = sext i32 %26 to i64
  %28 = sub nsw i64 %19, %27
  store i64 %28, i64* %8, align 8
  %29 = load %struct.function*, %struct.function** @cfun, align 8
  %30 = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 2
  %31 = load %struct.expr_status*, %struct.expr_status** %30, align 8
  %32 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = sext i32 %33 to i64
  store i64 %34, i64* %7, align 8
  %35 = load i32, i32* %6, align 4
  %36 = icmp sgt i32 %35, 1
  br i1 %36, label %37, label %100

; <label>:37:                                     ; preds = %3
  %38 = load i32, i32* @x.21
  %39 = load i32, i32* @y.22
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %37
  %46 = load i64, i64* %8, align 8
  %47 = icmp sgt i64 %46, 0
  %48 = load i32, i32* @x.21
  %49 = load i32, i32* @y.22
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %47, label %56, label %79

; <label>:56:                                     ; preds = %originalBBpart2
  %57 = load i32, i32* @x.21
  %58 = load i32, i32* @y.22
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %56
  %65 = load i32, i32* %6, align 4
  %66 = sext i32 %65 to i64
  %67 = load i64, i64* %8, align 8
  %68 = sub nsw i64 %66, %67
  %69 = load i64, i64* %7, align 8
  %70 = sub nsw i64 %69, %68
  store i64 %70, i64* %7, align 8
  %71 = load i32, i32* @x.21
  %72 = load i32, i32* @y.22
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart213, label %originalBB1alteredBB

originalBBpart213:                                ; preds = %originalBB1
  br label %83

; <label>:79:                                     ; preds = %originalBBpart2
  %80 = load i64, i64* %8, align 8
  %81 = load i64, i64* %7, align 8
  %82 = add nsw i64 %81, %80
  store i64 %82, i64* %7, align 8
  br label %83

; <label>:83:                                     ; preds = %79, %originalBBpart213
  %84 = load i32, i32* @x.21
  %85 = load i32, i32* @y.22
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %83
  %92 = load i32, i32* @x.21
  %93 = load i32, i32* @y.22
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %100

; <label>:100:                                    ; preds = %originalBBpart217, %3
  %101 = load %struct.function*, %struct.function** @cfun, align 8
  %102 = getelementptr inbounds %struct.function, %struct.function* %101, i32 0, i32 2
  %103 = load %struct.expr_status*, %struct.expr_status** %102, align 8
  %104 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %103, i32 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = sext i32 %105 to i64
  %107 = load i64, i64* %7, align 8
  %108 = sub nsw i64 %106, %107
  %109 = load i32, i32* %4, align 4
  %110 = sext i32 %109 to i64
  %111 = add nsw i64 %108, %110
  %112 = load %struct.args_size*, %struct.args_size** %5, align 8
  %113 = getelementptr inbounds %struct.args_size, %struct.args_size* %112, i32 0, i32 0
  store i64 %111, i64* %113, align 8
  %114 = load i64, i64* %7, align 8
  %115 = trunc i64 %114 to i32
  ret i32 %115

originalBBalteredBB:                              ; preds = %originalBB, %37
  %116 = load i64, i64* %8, align 8
  %117 = icmp sgt i64 %116, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %56
  %118 = load i32, i32* %6, align 4
  %119 = sext i32 %118 to i64
  %120 = load i64, i64* %8, align 8
  %_ = shl i64 %119, %120
  %_2 = shl i64 %119, %120
  %_3 = sub i64 %119, %120
  %gen = mul i64 %_3, %120
  %121 = sub nsw i64 %119, %120
  %122 = load i64, i64* %7, align 8
  %_4 = sub i64 %122, %121
  %gen5 = mul i64 %_4, %121
  %_6 = shl i64 %122, %121
  %_7 = shl i64 %122, %121
  %_8 = sub i64 0, %122
  %gen9 = add i64 %_8, %121
  %_10 = sub i64 %122, %121
  %gen11 = mul i64 %_10, %121
  %123 = sub nsw i64 %122, %121
  store i64 %123, i64* %7, align 8
  br label %originalBB1

originalBB15alteredBB:                            ; preds = %originalBB15, %83
  br label %originalBB15
}

declare %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def*, %struct.rtx_def*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @compute_argument_addresses(%struct.arg_data*, %struct.rtx_def*, i32) #0 {
  %4 = load i32, i32* @x.23
  %5 = load i32, i32* @y.24
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %3
  %12 = alloca %struct.arg_data*, align 8
  %13 = alloca %struct.rtx_def*, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.rtx_def*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %struct.rtx_def*, align 8
  %19 = alloca %struct.rtx_def*, align 8
  %20 = alloca %struct.rtx_def*, align 8
  store %struct.arg_data* %0, %struct.arg_data** %12, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %13, align 8
  store i32 %2, i32* %14, align 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %22 = icmp ne %struct.rtx_def* %21, null
  %23 = load i32, i32* @x.23
  %24 = load i32, i32* @y.24
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %495

; <label>:31:                                     ; preds = %originalBBpart2
  %32 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  store %struct.rtx_def* %32, %struct.rtx_def** %15, align 8
  store i32 0, i32* %17, align 4
  %33 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 65535
  %37 = icmp eq i32 %36, 75
  br i1 %37, label %38, label %70

; <label>:38:                                     ; preds = %31
  %39 = load i32, i32* @x.23
  %40 = load i32, i32* @y.24
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %38
  %47 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %48, i64 0, i64 0
  %50 = bitcast %union.rtunion_def* %49 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %50, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %15, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %53, i64 0, i64 1
  %55 = bitcast %union.rtunion_def* %54 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %55, align 8
  %57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %57, i64 0, i64 0
  %59 = bitcast %union.rtunion_def* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %17, align 4
  %62 = load i32, i32* @x.23
  %63 = load i32, i32* @y.24
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %70

; <label>:70:                                     ; preds = %originalBBpart24, %31
  %71 = load i32, i32* @x.23
  %72 = load i32, i32* @y.24
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %70
  store i32 0, i32* %16, align 4
  %79 = load i32, i32* @x.23
  %80 = load i32, i32* @y.24
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %87

; <label>:87:                                     ; preds = %475, %originalBBpart28
  %88 = load i32, i32* %16, align 4
  %89 = load i32, i32* %14, align 4
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %91, label %478

; <label>:91:                                     ; preds = %87
  %92 = load i32, i32* @x.23
  %93 = load i32, i32* @y.24
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %91
  %100 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %101 = load i32, i32* %16, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %100, i64 %102
  %104 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %103, i32 0, i32 9
  %105 = getelementptr inbounds %struct.args_size, %struct.args_size* %104, i32 0, i32 1
  %106 = load %union.tree_node*, %union.tree_node** %105, align 8
  %107 = icmp eq %union.tree_node* %106, null
  %108 = load i32, i32* @x.23
  %109 = load i32, i32* @y.24
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %107, label %116, label %141

; <label>:116:                                    ; preds = %originalBBpart212
  %117 = load i32, i32* @x.23
  %118 = load i32, i32* @y.24
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %116
  %125 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %126 = load i32, i32* %16, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %125, i64 %127
  %129 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %128, i32 0, i32 9
  %130 = getelementptr inbounds %struct.args_size, %struct.args_size* %129, i32 0, i32 0
  %131 = load i64, i64* %130, align 8
  %132 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %131)
  %133 = load i32, i32* @x.23
  %134 = load i32, i32* @y.24
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %229

; <label>:141:                                    ; preds = %originalBBpart212
  %142 = load i32, i32* @x.23
  %143 = load i32, i32* @y.24
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %141
  %150 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %151 = load i32, i32* %16, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %150, i64 %152
  %154 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %153, i32 0, i32 9
  %155 = getelementptr inbounds %struct.args_size, %struct.args_size* %154, i32 0, i32 1
  %156 = load %union.tree_node*, %union.tree_node** %155, align 8
  %157 = icmp eq %union.tree_node* %156, null
  %158 = load i32, i32* @x.23
  %159 = load i32, i32* @y.24
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %157, label %166, label %191

; <label>:166:                                    ; preds = %originalBBpart220
  %167 = load i32, i32* @x.23
  %168 = load i32, i32* @y.24
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %166
  %175 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %176 = load i32, i32* %16, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %175, i64 %177
  %179 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %178, i32 0, i32 9
  %180 = getelementptr inbounds %struct.args_size, %struct.args_size* %179, i32 0, i32 0
  %181 = load i64, i64* %180, align 8
  %182 = call %union.tree_node* @size_int_wide(i64 %181, i32 1)
  %183 = load i32, i32* @x.23
  %184 = load i32, i32* @y.24
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %226

; <label>:191:                                    ; preds = %originalBBpart220
  %192 = load i32, i32* @x.23
  %193 = load i32, i32* @y.24
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %191
  %200 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %201 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %202 = load i32, i32* %16, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %201, i64 %203
  %205 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %204, i32 0, i32 9
  %206 = getelementptr inbounds %struct.args_size, %struct.args_size* %205, i32 0, i32 1
  %207 = load %union.tree_node*, %union.tree_node** %206, align 8
  %208 = call %union.tree_node* @convert(%union.tree_node* %200, %union.tree_node* %207)
  %209 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %210 = load i32, i32* %16, align 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %209, i64 %211
  %213 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %212, i32 0, i32 9
  %214 = getelementptr inbounds %struct.args_size, %struct.args_size* %213, i32 0, i32 0
  %215 = load i64, i64* %214, align 8
  %216 = call %union.tree_node* @size_int_wide(i64 %215, i32 1)
  %217 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %208, %union.tree_node* %216)
  %218 = load i32, i32* @x.23
  %219 = load i32, i32* @y.24
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %226

; <label>:226:                                    ; preds = %originalBBpart228, %originalBBpart224
  %227 = phi %union.tree_node* [ %182, %originalBBpart224 ], [ %217, %originalBBpart228 ]
  %228 = call %struct.rtx_def* @expand_expr(%union.tree_node* %227, %struct.rtx_def* null, i32 0, i32 0)
  br label %229

; <label>:229:                                    ; preds = %226, %originalBBpart216
  %230 = phi %struct.rtx_def* [ %132, %originalBBpart216 ], [ %228, %226 ]
  store %struct.rtx_def* %230, %struct.rtx_def** %18, align 8
  %231 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %232 = load i32, i32* %16, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %231, i64 %233
  %235 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %234, i32 0, i32 10
  %236 = getelementptr inbounds %struct.args_size, %struct.args_size* %235, i32 0, i32 1
  %237 = load %union.tree_node*, %union.tree_node** %236, align 8
  %238 = icmp eq %union.tree_node* %237, null
  br i1 %238, label %239, label %248

; <label>:239:                                    ; preds = %229
  %240 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %241 = load i32, i32* %16, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %240, i64 %242
  %244 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %243, i32 0, i32 10
  %245 = getelementptr inbounds %struct.args_size, %struct.args_size* %244, i32 0, i32 0
  %246 = load i64, i64* %245, align 8
  %247 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %246)
  br label %288

; <label>:248:                                    ; preds = %229
  %249 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %250 = load i32, i32* %16, align 4
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %249, i64 %251
  %253 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %252, i32 0, i32 10
  %254 = getelementptr inbounds %struct.args_size, %struct.args_size* %253, i32 0, i32 1
  %255 = load %union.tree_node*, %union.tree_node** %254, align 8
  %256 = icmp eq %union.tree_node* %255, null
  br i1 %256, label %257, label %266

; <label>:257:                                    ; preds = %248
  %258 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %259 = load i32, i32* %16, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %258, i64 %260
  %262 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %261, i32 0, i32 10
  %263 = getelementptr inbounds %struct.args_size, %struct.args_size* %262, i32 0, i32 0
  %264 = load i64, i64* %263, align 8
  %265 = call %union.tree_node* @size_int_wide(i64 %264, i32 1)
  br label %285

; <label>:266:                                    ; preds = %248
  %267 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %268 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %269 = load i32, i32* %16, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %268, i64 %270
  %272 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %271, i32 0, i32 10
  %273 = getelementptr inbounds %struct.args_size, %struct.args_size* %272, i32 0, i32 1
  %274 = load %union.tree_node*, %union.tree_node** %273, align 8
  %275 = call %union.tree_node* @convert(%union.tree_node* %267, %union.tree_node* %274)
  %276 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %277 = load i32, i32* %16, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %276, i64 %278
  %280 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %279, i32 0, i32 10
  %281 = getelementptr inbounds %struct.args_size, %struct.args_size* %280, i32 0, i32 0
  %282 = load i64, i64* %281, align 8
  %283 = call %union.tree_node* @size_int_wide(i64 %282, i32 1)
  %284 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %275, %union.tree_node* %283)
  br label %285

; <label>:285:                                    ; preds = %266, %257
  %286 = phi %union.tree_node* [ %265, %257 ], [ %284, %266 ]
  %287 = call %struct.rtx_def* @expand_expr(%union.tree_node* %286, %struct.rtx_def* null, i32 0, i32 0)
  br label %288

; <label>:288:                                    ; preds = %285, %239
  %289 = phi %struct.rtx_def* [ %247, %239 ], [ %287, %285 ]
  store %struct.rtx_def* %289, %struct.rtx_def** %19, align 8
  %290 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %291 = load i32, i32* %16, align 4
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %290, i64 %292
  %294 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %293, i32 0, i32 8
  %295 = load i32, i32* %294, align 8
  %296 = icmp ne i32 %295, 0
  br i1 %296, label %322, label %297

; <label>:297:                                    ; preds = %288
  %298 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %299 = load i32, i32* %16, align 4
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %298, i64 %300
  %302 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %301, i32 0, i32 4
  %303 = load %struct.rtx_def*, %struct.rtx_def** %302, align 8
  %304 = icmp ne %struct.rtx_def* %303, null
  br i1 %304, label %305, label %322

; <label>:305:                                    ; preds = %297
  %306 = load i32, i32* @x.23
  %307 = load i32, i32* @y.24
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %305
  %314 = load i32, i32* @x.23
  %315 = load i32, i32* @y.24
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %475

; <label>:322:                                    ; preds = %297, %288
  %323 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %324 = bitcast %struct.rtx_def* %323 to i32*
  %325 = load i32, i32* %324, align 8
  %326 = and i32 %325, 65535
  %327 = icmp eq i32 %326, 54
  br i1 %327, label %328, label %352

; <label>:328:                                    ; preds = %322
  %329 = load i32, i32* @x.23
  %330 = load i32, i32* @y.24
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %328
  %337 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %338 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %339 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %338, i32 0, i32 1
  %340 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %339, i64 0, i64 0
  %341 = bitcast %union.rtunion_def* %340 to i64*
  %342 = load i64, i64* %341, align 8
  %343 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %337, i64 %342)
  store %struct.rtx_def* %343, %struct.rtx_def** %20, align 8
  %344 = load i32, i32* @x.23
  %345 = load i32, i32* @y.24
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %360

; <label>:352:                                    ; preds = %322
  %353 = load i32, i32* @target_flags, align 4
  %354 = and i32 %353, 33554432
  %355 = icmp ne i32 %354, 0
  %356 = select i1 %355, i32 5, i32 4
  %357 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %358 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %359 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %356, %struct.rtx_def* %357, %struct.rtx_def* %358)
  store %struct.rtx_def* %359, %struct.rtx_def** %20, align 8
  br label %360

; <label>:360:                                    ; preds = %352, %originalBBpart236
  %361 = load i32, i32* @x.23
  %362 = load i32, i32* @y.24
  %363 = sub i32 %361, 1
  %364 = mul i32 %361, %363
  %365 = urem i32 %364, 2
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %366, %367
  br i1 %368, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %360
  %369 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %370 = load i32, i32* %17, align 4
  %371 = sext i32 %370 to i64
  %372 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %369, i64 %371)
  store %struct.rtx_def* %372, %struct.rtx_def** %20, align 8
  %373 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %374 = load i32, i32* %16, align 4
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %373, i64 %375
  %377 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %376, i32 0, i32 1
  %378 = load i32, i32* %377, align 8
  %379 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %380 = call %struct.rtx_def* @gen_rtx_MEM(i32 %378, %struct.rtx_def* %379)
  %381 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %382 = load i32, i32* %16, align 4
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %381, i64 %383
  %385 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %384, i32 0, i32 12
  store %struct.rtx_def* %380, %struct.rtx_def** %385, align 8
  %386 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %387 = load i32, i32* %16, align 4
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %386, i64 %388
  %390 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %389, i32 0, i32 12
  %391 = load %struct.rtx_def*, %struct.rtx_def** %390, align 8
  %392 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %393 = load i32, i32* %16, align 4
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %392, i64 %394
  %396 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %395, i32 0, i32 0
  %397 = load %union.tree_node*, %union.tree_node** %396, align 8
  %398 = bitcast %union.tree_node* %397 to %struct.tree_common*
  %399 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %398, i32 0, i32 1
  %400 = load %union.tree_node*, %union.tree_node** %399, align 8
  call void @set_mem_attributes(%struct.rtx_def* %391, %union.tree_node* %400, i32 1)
  %401 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %402 = bitcast %struct.rtx_def* %401 to i32*
  %403 = load i32, i32* %402, align 8
  %404 = and i32 %403, 65535
  %405 = icmp eq i32 %404, 54
  %406 = load i32, i32* @x.23
  %407 = load i32, i32* @y.24
  %408 = sub i32 %406, 1
  %409 = mul i32 %406, %408
  %410 = urem i32 %409, 2
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %411, %412
  br i1 %413, label %originalBBpart245, label %originalBB38alteredBB

originalBBpart245:                                ; preds = %originalBB38
  br i1 %405, label %414, label %422

; <label>:414:                                    ; preds = %originalBBpart245
  %415 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %416 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %417 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %416, i32 0, i32 1
  %418 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %417, i64 0, i64 0
  %419 = bitcast %union.rtunion_def* %418 to i64*
  %420 = load i64, i64* %419, align 8
  %421 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %415, i64 %420)
  store %struct.rtx_def* %421, %struct.rtx_def** %20, align 8
  br label %430

; <label>:422:                                    ; preds = %originalBBpart245
  %423 = load i32, i32* @target_flags, align 4
  %424 = and i32 %423, 33554432
  %425 = icmp ne i32 %424, 0
  %426 = select i1 %425, i32 5, i32 4
  %427 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %428 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %429 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %426, %struct.rtx_def* %427, %struct.rtx_def* %428)
  store %struct.rtx_def* %429, %struct.rtx_def** %20, align 8
  br label %430

; <label>:430:                                    ; preds = %422, %414
  %431 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %432 = load i32, i32* %17, align 4
  %433 = sext i32 %432 to i64
  %434 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %431, i64 %433)
  store %struct.rtx_def* %434, %struct.rtx_def** %20, align 8
  %435 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %436 = load i32, i32* %16, align 4
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %435, i64 %437
  %439 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %438, i32 0, i32 1
  %440 = load i32, i32* %439, align 8
  %441 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %442 = call %struct.rtx_def* @gen_rtx_MEM(i32 %440, %struct.rtx_def* %441)
  %443 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %444 = load i32, i32* %16, align 4
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %443, i64 %445
  %447 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %446, i32 0, i32 13
  store %struct.rtx_def* %442, %struct.rtx_def** %447, align 8
  %448 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %449 = load i32, i32* %16, align 4
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %448, i64 %450
  %452 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %451, i32 0, i32 13
  %453 = load %struct.rtx_def*, %struct.rtx_def** %452, align 8
  %454 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %455 = load i32, i32* %16, align 4
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %454, i64 %456
  %458 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %457, i32 0, i32 0
  %459 = load %union.tree_node*, %union.tree_node** %458, align 8
  %460 = bitcast %union.tree_node* %459 to %struct.tree_common*
  %461 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %460, i32 0, i32 1
  %462 = load %union.tree_node*, %union.tree_node** %461, align 8
  call void @set_mem_attributes(%struct.rtx_def* %453, %union.tree_node* %462, i32 1)
  %463 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %464 = load i32, i32* %16, align 4
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %463, i64 %465
  %467 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %466, i32 0, i32 12
  %468 = load %struct.rtx_def*, %struct.rtx_def** %467, align 8
  call void @set_mem_alias_set(%struct.rtx_def* %468, i64 0)
  %469 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %470 = load i32, i32* %16, align 4
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %469, i64 %471
  %473 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %472, i32 0, i32 13
  %474 = load %struct.rtx_def*, %struct.rtx_def** %473, align 8
  call void @set_mem_alias_set(%struct.rtx_def* %474, i64 0)
  br label %475

; <label>:475:                                    ; preds = %430, %originalBBpart232
  %476 = load i32, i32* %16, align 4
  %477 = add nsw i32 %476, 1
  store i32 %477, i32* %16, align 4
  br label %87

; <label>:478:                                    ; preds = %87
  %479 = load i32, i32* @x.23
  %480 = load i32, i32* @y.24
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %originalBB47alteredBB, %478
  %487 = load i32, i32* @x.23
  %488 = load i32, i32* @y.24
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %495

; <label>:495:                                    ; preds = %originalBBpart249, %originalBBpart2
  %496 = load i32, i32* @x.23
  %497 = load i32, i32* @y.24
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %originalBB51alteredBB, %495
  %504 = load i32, i32* @x.23
  %505 = load i32, i32* @y.24
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %3
  %512 = alloca %struct.arg_data*, align 8
  %513 = alloca %struct.rtx_def*, align 8
  %514 = alloca i32, align 4
  %515 = alloca %struct.rtx_def*, align 8
  %516 = alloca i32, align 4
  %517 = alloca i32, align 4
  %518 = alloca %struct.rtx_def*, align 8
  %519 = alloca %struct.rtx_def*, align 8
  %520 = alloca %struct.rtx_def*, align 8
  store %struct.arg_data* %0, %struct.arg_data** %512, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %513, align 8
  store i32 %2, i32* %514, align 4
  %521 = load %struct.rtx_def*, %struct.rtx_def** %513, align 8
  %522 = icmp ne %struct.rtx_def* %521, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  %523 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %524 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %523, i32 0, i32 1
  %525 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %524, i64 0, i64 0
  %526 = bitcast %union.rtunion_def* %525 to %struct.rtx_def**
  %527 = load %struct.rtx_def*, %struct.rtx_def** %526, align 8
  store %struct.rtx_def* %527, %struct.rtx_def** %15, align 8
  %528 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %529 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %528, i32 0, i32 1
  %530 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %529, i64 0, i64 1
  %531 = bitcast %union.rtunion_def* %530 to %struct.rtx_def**
  %532 = load %struct.rtx_def*, %struct.rtx_def** %531, align 8
  %533 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %532, i32 0, i32 1
  %534 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %533, i64 0, i64 0
  %535 = bitcast %union.rtunion_def* %534 to i64*
  %536 = load i64, i64* %535, align 8
  %537 = trunc i64 %536 to i32
  store i32 %537, i32* %17, align 4
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %70
  store i32 0, i32* %16, align 4
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %91
  %538 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %539 = load i32, i32* %16, align 4
  %540 = sext i32 %539 to i64
  %541 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %538, i64 %540
  %542 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %541, i32 0, i32 9
  %543 = getelementptr inbounds %struct.args_size, %struct.args_size* %542, i32 0, i32 1
  %544 = load %union.tree_node*, %union.tree_node** %543, align 8
  %545 = icmp eq %union.tree_node* %544, null
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %116
  %546 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %547 = load i32, i32* %16, align 4
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %546, i64 %548
  %550 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %549, i32 0, i32 9
  %551 = getelementptr inbounds %struct.args_size, %struct.args_size* %550, i32 0, i32 0
  %552 = load i64, i64* %551, align 8
  %553 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %552)
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %141
  %554 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %555 = load i32, i32* %16, align 4
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %554, i64 %556
  %558 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %557, i32 0, i32 9
  %559 = getelementptr inbounds %struct.args_size, %struct.args_size* %558, i32 0, i32 1
  %560 = load %union.tree_node*, %union.tree_node** %559, align 8
  %561 = icmp eq %union.tree_node* %560, null
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %166
  %562 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %563 = load i32, i32* %16, align 4
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %562, i64 %564
  %566 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %565, i32 0, i32 9
  %567 = getelementptr inbounds %struct.args_size, %struct.args_size* %566, i32 0, i32 0
  %568 = load i64, i64* %567, align 8
  %569 = call %union.tree_node* @size_int_wide(i64 %568, i32 1)
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %191
  %570 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %571 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %572 = load i32, i32* %16, align 4
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %571, i64 %573
  %575 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %574, i32 0, i32 9
  %576 = getelementptr inbounds %struct.args_size, %struct.args_size* %575, i32 0, i32 1
  %577 = load %union.tree_node*, %union.tree_node** %576, align 8
  %578 = call %union.tree_node* @convert(%union.tree_node* %570, %union.tree_node* %577)
  %579 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %580 = load i32, i32* %16, align 4
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %579, i64 %581
  %583 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %582, i32 0, i32 9
  %584 = getelementptr inbounds %struct.args_size, %struct.args_size* %583, i32 0, i32 0
  %585 = load i64, i64* %584, align 8
  %586 = call %union.tree_node* @size_int_wide(i64 %585, i32 1)
  %587 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %578, %union.tree_node* %586)
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %305
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %328
  %588 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %589 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %590 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %589, i32 0, i32 1
  %591 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %590, i64 0, i64 0
  %592 = bitcast %union.rtunion_def* %591 to i64*
  %593 = load i64, i64* %592, align 8
  %594 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %588, i64 %593)
  store %struct.rtx_def* %594, %struct.rtx_def** %20, align 8
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %360
  %595 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %596 = load i32, i32* %17, align 4
  %597 = sext i32 %596 to i64
  %598 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %595, i64 %597)
  store %struct.rtx_def* %598, %struct.rtx_def** %20, align 8
  %599 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %600 = load i32, i32* %16, align 4
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %599, i64 %601
  %603 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %602, i32 0, i32 1
  %604 = load i32, i32* %603, align 8
  %605 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %606 = call %struct.rtx_def* @gen_rtx_MEM(i32 %604, %struct.rtx_def* %605)
  %607 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %608 = load i32, i32* %16, align 4
  %609 = sext i32 %608 to i64
  %610 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %607, i64 %609
  %611 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %610, i32 0, i32 12
  store %struct.rtx_def* %606, %struct.rtx_def** %611, align 8
  %612 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %613 = load i32, i32* %16, align 4
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %612, i64 %614
  %616 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %615, i32 0, i32 12
  %617 = load %struct.rtx_def*, %struct.rtx_def** %616, align 8
  %618 = load %struct.arg_data*, %struct.arg_data** %12, align 8
  %619 = load i32, i32* %16, align 4
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %618, i64 %620
  %622 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %621, i32 0, i32 0
  %623 = load %union.tree_node*, %union.tree_node** %622, align 8
  %624 = bitcast %union.tree_node* %623 to %struct.tree_common*
  %625 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %624, i32 0, i32 1
  %626 = load %union.tree_node*, %union.tree_node** %625, align 8
  call void @set_mem_attributes(%struct.rtx_def* %617, %union.tree_node* %626, i32 1)
  %627 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %628 = bitcast %struct.rtx_def* %627 to i32*
  %629 = load i32, i32* %628, align 8
  %_ = sub i32 %629, 65535
  %gen = mul i32 %_, 65535
  %_39 = shl i32 %629, 65535
  %_40 = sub i32 0, %629
  %gen41 = add i32 %_40, 65535
  %_42 = shl i32 %629, 65535
  %_43 = shl i32 %629, 65535
  %630 = and i32 %629, 65535
  %631 = icmp eq i32 %630, 54
  br label %originalBB38

originalBB47alteredBB:                            ; preds = %originalBB47, %478
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %495
  br label %originalBB51
}

declare void @anti_adjust_stack(%struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @rtx_for_function_call(%union.tree_node*, %union.tree_node*) #0 {
  %3 = alloca %union.tree_node*, align 8
  %4 = alloca %union.tree_node*, align 8
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %0, %union.tree_node** %3, align 8
  store %union.tree_node* %1, %union.tree_node** %4, align 8
  %7 = load %union.tree_node*, %union.tree_node** %3, align 8
  %8 = icmp ne %union.tree_node* %7, null
  br i1 %8, label %9, label %144

; <label>:9:                                      ; preds = %2
  %10 = load i32, i32* @x.25
  %11 = load i32, i32* @y.26
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %9
  %18 = load %union.tree_node*, %union.tree_node** %3, align 8
  %19 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %19, i32 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = lshr i32 %21, 16
  %23 = and i32 %22, 1
  %24 = icmp ne i32 %23, 0
  %25 = load i32, i32* @x.25
  %26 = load i32, i32* @y.26
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %24, label %57, label %33

; <label>:33:                                     ; preds = %originalBBpart2
  %34 = load i32, i32* @x.25
  %35 = load i32, i32* @y.26
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %33
  %42 = load %union.tree_node*, %union.tree_node** %3, align 8
  call void @assemble_external(%union.tree_node* %42)
  %43 = load %union.tree_node*, %union.tree_node** %3, align 8
  %44 = bitcast %union.tree_node* %43 to %struct.tree_common*
  %45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %44, i32 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, -65537
  %48 = or i32 %47, 65536
  store i32 %48, i32* %45, align 8
  %49 = load i32, i32* @x.25
  %50 = load i32, i32* @y.26
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart239, label %originalBB19alteredBB

originalBBpart239:                                ; preds = %originalBB19
  br label %57

; <label>:57:                                     ; preds = %originalBBpart239, %originalBBpart2
  %58 = load i32, i32* @x.25
  %59 = load i32, i32* @y.26
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %originalBB41alteredBB, %57
  %66 = load %union.tree_node*, %union.tree_node** %3, align 8
  %67 = bitcast %union.tree_node* %66 to %struct.tree_decl*
  %68 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %67, i32 0, i32 17
  %69 = load %struct.rtx_def*, %struct.rtx_def** %68, align 8
  %70 = icmp ne %struct.rtx_def* %69, null
  %71 = load i32, i32* @x.25
  %72 = load i32, i32* @y.26
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br i1 %70, label %79, label %100

; <label>:79:                                     ; preds = %originalBBpart243
  %80 = load i32, i32* @x.25
  %81 = load i32, i32* @y.26
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %originalBB45alteredBB, %79
  %88 = load %union.tree_node*, %union.tree_node** %3, align 8
  %89 = bitcast %union.tree_node* %88 to %struct.tree_decl*
  %90 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %89, i32 0, i32 17
  %91 = load %struct.rtx_def*, %struct.rtx_def** %90, align 8
  %92 = load i32, i32* @x.25
  %93 = load i32, i32* @y.26
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %122

; <label>:100:                                    ; preds = %originalBBpart243
  %101 = load i32, i32* @x.25
  %102 = load i32, i32* @y.26
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %originalBB49alteredBB, %100
  %109 = load %union.tree_node*, %union.tree_node** %3, align 8
  call void @make_decl_rtl(%union.tree_node* %109, i8* null)
  %110 = load %union.tree_node*, %union.tree_node** %3, align 8
  %111 = bitcast %union.tree_node* %110 to %struct.tree_decl*
  %112 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %111, i32 0, i32 17
  %113 = load %struct.rtx_def*, %struct.rtx_def** %112, align 8
  %114 = load i32, i32* @x.25
  %115 = load i32, i32* @y.26
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br label %122

; <label>:122:                                    ; preds = %originalBBpart251, %originalBBpart247
  %123 = phi %struct.rtx_def* [ %91, %originalBBpart247 ], [ %113, %originalBBpart251 ]
  %124 = load i32, i32* @x.25
  %125 = load i32, i32* @y.26
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %originalBB53alteredBB, %122
  %132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %132, i64 0, i64 0
  %134 = bitcast %union.rtunion_def* %133 to %struct.rtx_def**
  %135 = load %struct.rtx_def*, %struct.rtx_def** %134, align 8
  store %struct.rtx_def* %135, %struct.rtx_def** %5, align 8
  %136 = load i32, i32* @x.25
  %137 = load i32, i32* @y.26
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br label %151

; <label>:144:                                    ; preds = %2
  call void @push_temp_slots()
  %145 = load %union.tree_node*, %union.tree_node** %4, align 8
  %146 = bitcast %union.tree_node* %145 to %struct.tree_exp*
  %147 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %146, i32 0, i32 2
  %148 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %147, i64 0, i64 0
  %149 = load %union.tree_node*, %union.tree_node** %148, align 8
  %150 = call %struct.rtx_def* @expand_expr(%union.tree_node* %149, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %150, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* %150, %struct.rtx_def** %6, align 8
  call void @pop_temp_slots()
  call void @emit_queue()
  br label %151

; <label>:151:                                    ; preds = %144, %originalBBpart255
  %152 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  ret %struct.rtx_def* %152

originalBBalteredBB:                              ; preds = %originalBB, %9
  %153 = load %union.tree_node*, %union.tree_node** %3, align 8
  %154 = bitcast %union.tree_node* %153 to %struct.tree_common*
  %155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %154, i32 0, i32 2
  %156 = load i32, i32* %155, align 8
  %_ = shl i32 %156, 16
  %_1 = sub i32 %156, 16
  %gen = mul i32 %_1, 16
  %_2 = shl i32 %156, 16
  %_3 = shl i32 %156, 16
  %_4 = shl i32 %156, 16
  %_5 = sub i32 %156, 16
  %gen6 = mul i32 %_5, 16
  %157 = lshr i32 %156, 16
  %_7 = sub i32 %157, 1
  %gen8 = mul i32 %_7, 1
  %_9 = shl i32 %157, 1
  %_10 = shl i32 %157, 1
  %_11 = sub i32 %157, 1
  %gen12 = mul i32 %_11, 1
  %_13 = sub i32 0, %157
  %gen14 = add i32 %_13, 1
  %_15 = sub i32 0, %157
  %gen16 = add i32 %_15, 1
  %_17 = sub i32 %157, 1
  %gen18 = mul i32 %_17, 1
  %158 = and i32 %157, 1
  %159 = icmp ne i32 %158, 0
  br label %originalBB

originalBB19alteredBB:                            ; preds = %originalBB19, %33
  %160 = load %union.tree_node*, %union.tree_node** %3, align 8
  call void @assemble_external(%union.tree_node* %160)
  %161 = load %union.tree_node*, %union.tree_node** %3, align 8
  %162 = bitcast %union.tree_node* %161 to %struct.tree_common*
  %163 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %162, i32 0, i32 2
  %164 = load i32, i32* %163, align 8
  %_20 = sub i32 0, %164
  %gen21 = add i32 %_20, -65537
  %_22 = shl i32 %164, -65537
  %_23 = sub i32 0, %164
  %gen24 = add i32 %_23, -65537
  %_25 = sub i32 0, %164
  %gen26 = add i32 %_25, -65537
  %165 = and i32 %164, -65537
  %_27 = shl i32 %165, 65536
  %_28 = sub i32 0, %165
  %gen29 = add i32 %_28, 65536
  %_30 = shl i32 %165, 65536
  %_31 = sub i32 %165, 65536
  %gen32 = mul i32 %_31, 65536
  %_33 = sub i32 %165, 65536
  %gen34 = mul i32 %_33, 65536
  %_35 = shl i32 %165, 65536
  %_36 = sub i32 %165, 65536
  %gen37 = mul i32 %_36, 65536
  %166 = or i32 %165, 65536
  store i32 %166, i32* %163, align 8
  br label %originalBB19

originalBB41alteredBB:                            ; preds = %originalBB41, %57
  %167 = load %union.tree_node*, %union.tree_node** %3, align 8
  %168 = bitcast %union.tree_node* %167 to %struct.tree_decl*
  %169 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %168, i32 0, i32 17
  %170 = load %struct.rtx_def*, %struct.rtx_def** %169, align 8
  %171 = icmp ne %struct.rtx_def* %170, null
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %79
  %172 = load %union.tree_node*, %union.tree_node** %3, align 8
  %173 = bitcast %union.tree_node* %172 to %struct.tree_decl*
  %174 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %173, i32 0, i32 17
  %175 = load %struct.rtx_def*, %struct.rtx_def** %174, align 8
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %100
  %176 = load %union.tree_node*, %union.tree_node** %3, align 8
  call void @make_decl_rtl(%union.tree_node* %176, i8* null)
  %177 = load %union.tree_node*, %union.tree_node** %3, align 8
  %178 = bitcast %union.tree_node* %177 to %struct.tree_decl*
  %179 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %178, i32 0, i32 17
  %180 = load %struct.rtx_def*, %struct.rtx_def** %179, align 8
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %122
  %181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %182 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %181, i64 0, i64 0
  %183 = bitcast %union.rtunion_def* %182 to %struct.rtx_def**
  %184 = load %struct.rtx_def*, %struct.rtx_def** %183, align 8
  store %struct.rtx_def* %184, %struct.rtx_def** %5, align 8
  br label %originalBB53
}

declare %struct.rtx_def* @hard_function_value(%union.tree_node*, %union.tree_node*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @precompute_register_parameters(i32, %struct.arg_data*, i32*) #0 {
  %4 = load i32, i32* @x.27
  %5 = load i32, i32* @y.28
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %3
  %12 = alloca i32, align 4
  %13 = alloca %struct.arg_data*, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i32, align 4
  store i32 %0, i32* %12, align 4
  store %struct.arg_data* %1, %struct.arg_data** %13, align 8
  store i32* %2, i32** %14, align 8
  %16 = load i32*, i32** %14, align 8
  store i32 0, i32* %16, align 4
  store i32 0, i32* %15, align 4
  %17 = load i32, i32* @x.27
  %18 = load i32, i32* @y.28
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %25

; <label>:25:                                     ; preds = %originalBBpart236, %originalBBpart2
  %26 = load i32, i32* @x.27
  %27 = load i32, i32* @y.28
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %25
  %34 = load i32, i32* %15, align 4
  %35 = load i32, i32* %12, align 4
  %36 = icmp slt i32 %34, %35
  %37 = load i32, i32* @x.27
  %38 = load i32, i32* @y.28
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %36, label %45, label %315

; <label>:45:                                     ; preds = %originalBBpart24
  %46 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %47 = load i32, i32* %15, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %46, i64 %48
  %50 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %49, i32 0, i32 4
  %51 = load %struct.rtx_def*, %struct.rtx_def** %50, align 8
  %52 = icmp ne %struct.rtx_def* %51, null
  br i1 %52, label %53, label %295

; <label>:53:                                     ; preds = %45
  %54 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %55 = load i32, i32* %15, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %54, i64 %56
  %58 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %57, i32 0, i32 8
  %59 = load i32, i32* %58, align 8
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %295, label %61

; <label>:61:                                     ; preds = %53
  %62 = load i32, i32* @x.27
  %63 = load i32, i32* @y.28
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %61
  %70 = load i32*, i32** %14, align 8
  store i32 1, i32* %70, align 4
  %71 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %72 = load i32, i32* %15, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %71, i64 %73
  %75 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %74, i32 0, i32 2
  %76 = load %struct.rtx_def*, %struct.rtx_def** %75, align 8
  %77 = icmp eq %struct.rtx_def* %76, null
  %78 = load i32, i32* @x.27
  %79 = load i32, i32* @y.28
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %77, label %86, label %105

; <label>:86:                                     ; preds = %originalBBpart28
  call void @push_temp_slots()
  %87 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %88 = load i32, i32* %15, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %87, i64 %89
  %91 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %90, i32 0, i32 0
  %92 = load %union.tree_node*, %union.tree_node** %91, align 8
  %93 = call %struct.rtx_def* @expand_expr(%union.tree_node* %92, %struct.rtx_def* null, i32 0, i32 0)
  %94 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %95 = load i32, i32* %15, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %94, i64 %96
  %98 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %97, i32 0, i32 2
  store %struct.rtx_def* %93, %struct.rtx_def** %98, align 8
  %99 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %100 = load i32, i32* %15, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %99, i64 %101
  %103 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %102, i32 0, i32 2
  %104 = load %struct.rtx_def*, %struct.rtx_def** %103, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %104)
  call void @pop_temp_slots()
  call void @emit_queue()
  br label %105

; <label>:105:                                    ; preds = %86, %originalBBpart28
  %106 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %107 = load i32, i32* %15, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %106, i64 %108
  %110 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %109, i32 0, i32 1
  %111 = load i32, i32* %110, align 8
  %112 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %113 = load i32, i32* %15, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %112, i64 %114
  %116 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %115, i32 0, i32 0
  %117 = load %union.tree_node*, %union.tree_node** %116, align 8
  %118 = bitcast %union.tree_node* %117 to %struct.tree_common*
  %119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %118, i32 0, i32 1
  %120 = load %union.tree_node*, %union.tree_node** %119, align 8
  %121 = bitcast %union.tree_node* %120 to %struct.tree_type*
  %122 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %121, i32 0, i32 6
  %123 = load i32, i32* %122, align 4
  %124 = lshr i32 %123, 9
  %125 = and i32 %124, 127
  %126 = icmp ne i32 %111, %125
  br i1 %126, label %127, label %166

; <label>:127:                                    ; preds = %105
  %128 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %129 = load i32, i32* %15, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %128, i64 %130
  %132 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %131, i32 0, i32 1
  %133 = load i32, i32* %132, align 8
  %134 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %135 = load i32, i32* %15, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %134, i64 %136
  %138 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %137, i32 0, i32 0
  %139 = load %union.tree_node*, %union.tree_node** %138, align 8
  %140 = bitcast %union.tree_node* %139 to %struct.tree_common*
  %141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %140, i32 0, i32 1
  %142 = load %union.tree_node*, %union.tree_node** %141, align 8
  %143 = bitcast %union.tree_node* %142 to %struct.tree_type*
  %144 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %143, i32 0, i32 6
  %145 = load i32, i32* %144, align 4
  %146 = lshr i32 %145, 9
  %147 = and i32 %146, 127
  %148 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %149 = load i32, i32* %15, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %148, i64 %150
  %152 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %151, i32 0, i32 2
  %153 = load %struct.rtx_def*, %struct.rtx_def** %152, align 8
  %154 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %155 = load i32, i32* %15, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %154, i64 %156
  %158 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %157, i32 0, i32 6
  %159 = load i32, i32* %158, align 8
  %160 = call %struct.rtx_def* @convert_modes(i32 %133, i32 %147, %struct.rtx_def* %153, i32 %159)
  %161 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %162 = load i32, i32* %15, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %161, i64 %163
  %165 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %164, i32 0, i32 2
  store %struct.rtx_def* %160, %struct.rtx_def** %165, align 8
  br label %166

; <label>:166:                                    ; preds = %127, %105
  %167 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %168 = load i32, i32* %15, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %167, i64 %169
  %171 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %170, i32 0, i32 2
  %172 = load %struct.rtx_def*, %struct.rtx_def** %171, align 8
  %173 = bitcast %struct.rtx_def* %172 to i32*
  %174 = load i32, i32* %173, align 8
  %175 = and i32 %174, 65535
  %176 = icmp eq i32 %175, 61
  br i1 %176, label %294, label %177

; <label>:177:                                    ; preds = %166
  %178 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %179 = load i32, i32* %15, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %178, i64 %180
  %182 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %181, i32 0, i32 2
  %183 = load %struct.rtx_def*, %struct.rtx_def** %182, align 8
  %184 = bitcast %struct.rtx_def* %183 to i32*
  %185 = load i32, i32* %184, align 8
  %186 = and i32 %185, 65535
  %187 = icmp eq i32 %186, 63
  br i1 %187, label %188, label %219

; <label>:188:                                    ; preds = %177
  %189 = load i32, i32* @x.27
  %190 = load i32, i32* @y.28
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %188
  %197 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %198 = load i32, i32* %15, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %197, i64 %199
  %201 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %200, i32 0, i32 2
  %202 = load %struct.rtx_def*, %struct.rtx_def** %201, align 8
  %203 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %202, i32 0, i32 1
  %204 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %203, i64 0, i64 0
  %205 = bitcast %union.rtunion_def* %204 to %struct.rtx_def**
  %206 = load %struct.rtx_def*, %struct.rtx_def** %205, align 8
  %207 = bitcast %struct.rtx_def* %206 to i32*
  %208 = load i32, i32* %207, align 8
  %209 = and i32 %208, 65535
  %210 = icmp eq i32 %209, 61
  %211 = load i32, i32* @x.27
  %212 = load i32, i32* @y.28
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBBpart220, label %originalBB10alteredBB

originalBBpart220:                                ; preds = %originalBB10
  br i1 %210, label %294, label %219

; <label>:219:                                    ; preds = %originalBBpart220, %177
  %220 = load i32, i32* @x.27
  %221 = load i32, i32* @y.28
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %219
  %228 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %229 = load i32, i32* %15, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %228, i64 %230
  %232 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %231, i32 0, i32 1
  %233 = load i32, i32* %232, align 8
  %234 = icmp ne i32 %233, 51
  %235 = load i32, i32* @x.27
  %236 = load i32, i32* @y.28
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %234, label %243, label %294

; <label>:243:                                    ; preds = %originalBBpart224
  %244 = load i32, i32* @x.27
  %245 = load i32, i32* @y.28
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %243
  %252 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %253 = load i32, i32* %15, align 4
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %252, i64 %254
  %256 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %255, i32 0, i32 2
  %257 = load %struct.rtx_def*, %struct.rtx_def** %256, align 8
  %258 = call i32 @rtx_cost(%struct.rtx_def* %257, i32 47)
  %259 = icmp sgt i32 %258, 4
  %260 = load i32, i32* @x.27
  %261 = load i32, i32* @y.28
  %262 = sub i32 %260, 1
  %263 = mul i32 %260, %262
  %264 = urem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %265, %266
  br i1 %267, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %259, label %268, label %294

; <label>:268:                                    ; preds = %originalBBpart228
  %269 = load i32*, i32** %14, align 8
  %270 = load i32, i32* %269, align 4
  %271 = icmp ne i32 %270, 0
  br i1 %271, label %275, label %272

; <label>:272:                                    ; preds = %268
  %273 = call i32 @preserve_subexpressions_p()
  %274 = icmp ne i32 %273, 0
  br i1 %274, label %275, label %294

; <label>:275:                                    ; preds = %272, %268
  %276 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %277 = load i32, i32* %15, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %276, i64 %278
  %280 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %279, i32 0, i32 1
  %281 = load i32, i32* %280, align 8
  %282 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %283 = load i32, i32* %15, align 4
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %282, i64 %284
  %286 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %285, i32 0, i32 2
  %287 = load %struct.rtx_def*, %struct.rtx_def** %286, align 8
  %288 = call %struct.rtx_def* @copy_to_mode_reg(i32 %281, %struct.rtx_def* %287)
  %289 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %290 = load i32, i32* %15, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %289, i64 %291
  %293 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %292, i32 0, i32 2
  store %struct.rtx_def* %288, %struct.rtx_def** %293, align 8
  br label %294

; <label>:294:                                    ; preds = %275, %272, %originalBBpart228, %originalBBpart224, %originalBBpart220, %166
  br label %295

; <label>:295:                                    ; preds = %294, %53, %45
  br label %296

; <label>:296:                                    ; preds = %295
  %297 = load i32, i32* @x.27
  %298 = load i32, i32* @y.28
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %296
  %305 = load i32, i32* %15, align 4
  %306 = add nsw i32 %305, 1
  store i32 %306, i32* %15, align 4
  %307 = load i32, i32* @x.27
  %308 = load i32, i32* @y.28
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBBpart236, label %originalBB30alteredBB

originalBBpart236:                                ; preds = %originalBB30
  br label %25

; <label>:315:                                    ; preds = %originalBBpart24
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %3
  %316 = alloca i32, align 4
  %317 = alloca %struct.arg_data*, align 8
  %318 = alloca i32*, align 8
  %319 = alloca i32, align 4
  store i32 %0, i32* %316, align 4
  store %struct.arg_data* %1, %struct.arg_data** %317, align 8
  store i32* %2, i32** %318, align 8
  %320 = load i32*, i32** %318, align 8
  store i32 0, i32* %320, align 4
  store i32 0, i32* %319, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %321 = load i32, i32* %15, align 4
  %322 = load i32, i32* %12, align 4
  %323 = icmp slt i32 %321, %322
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %61
  %324 = load i32*, i32** %14, align 8
  store i32 1, i32* %324, align 4
  %325 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %326 = load i32, i32* %15, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %325, i64 %327
  %329 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %328, i32 0, i32 2
  %330 = load %struct.rtx_def*, %struct.rtx_def** %329, align 8
  %331 = icmp eq %struct.rtx_def* %330, null
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %188
  %332 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %333 = load i32, i32* %15, align 4
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %332, i64 %334
  %336 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %335, i32 0, i32 2
  %337 = load %struct.rtx_def*, %struct.rtx_def** %336, align 8
  %338 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %337, i32 0, i32 1
  %339 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %338, i64 0, i64 0
  %340 = bitcast %union.rtunion_def* %339 to %struct.rtx_def**
  %341 = load %struct.rtx_def*, %struct.rtx_def** %340, align 8
  %342 = bitcast %struct.rtx_def* %341 to i32*
  %343 = load i32, i32* %342, align 8
  %_ = sub i32 %343, 65535
  %gen = mul i32 %_, 65535
  %_11 = sub i32 0, %343
  %gen12 = add i32 %_11, 65535
  %_13 = shl i32 %343, 65535
  %_14 = shl i32 %343, 65535
  %_15 = sub i32 %343, 65535
  %gen16 = mul i32 %_15, 65535
  %_17 = shl i32 %343, 65535
  %_18 = shl i32 %343, 65535
  %344 = and i32 %343, 65535
  %345 = icmp eq i32 %344, 61
  br label %originalBB10

originalBB22alteredBB:                            ; preds = %originalBB22, %219
  %346 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %347 = load i32, i32* %15, align 4
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %346, i64 %348
  %350 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %349, i32 0, i32 1
  %351 = load i32, i32* %350, align 8
  %352 = icmp ne i32 %351, 51
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %243
  %353 = load %struct.arg_data*, %struct.arg_data** %13, align 8
  %354 = load i32, i32* %15, align 4
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %353, i64 %355
  %357 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %356, i32 0, i32 2
  %358 = load %struct.rtx_def*, %struct.rtx_def** %357, align 8
  %359 = call i32 @rtx_cost(%struct.rtx_def* %358, i32 47)
  %360 = icmp sgt i32 %359, 4
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %296
  %361 = load i32, i32* %15, align 4
  %_31 = sub i32 0, %361
  %gen32 = add i32 %_31, 1
  %_33 = sub i32 0, %361
  %gen34 = add i32 %_33, 1
  %362 = add nsw i32 %361, 1
  store i32 %362, i32* %15, align 4
  br label %originalBB30
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @save_fixed_argument_area(i32, %struct.rtx_def*, i32*, i32*) #0 {
  %5 = load i32, i32* @x.29
  %6 = load i32, i32* @y.30
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %4
  %13 = alloca i32, align 4
  %14 = alloca %struct.rtx_def*, align 8
  %15 = alloca i32*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.rtx_def*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca %struct.rtx_def*, align 8
  store i32 %0, i32* %13, align 4
  store %struct.rtx_def* %1, %struct.rtx_def** %14, align 8
  store i32* %2, i32** %15, align 8
  store i32* %3, i32** %16, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %18, align 8
  store i32 0, i32* %17, align 4
  %22 = load i32, i32* @x.29
  %23 = load i32, i32* @y.30
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %30

; <label>:30:                                     ; preds = %105, %originalBBpart2
  %31 = load i32, i32* %17, align 4
  %32 = load i32, i32* %13, align 4
  %33 = icmp slt i32 %31, %32
  br i1 %33, label %34, label %108

; <label>:34:                                     ; preds = %30
  %35 = load i32, i32* @x.29
  %36 = load i32, i32* @y.30
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %34
  %43 = load i32, i32* %17, align 4
  %44 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %45 = icmp sge i32 %43, %44
  %46 = load i32, i32* @x.29
  %47 = load i32, i32* @y.30
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %45, label %62, label %54

; <label>:54:                                     ; preds = %originalBBpart24
  %55 = load i8*, i8** @stack_usage_map, align 8
  %56 = load i32, i32* %17, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

; <label>:62:                                     ; preds = %54, %originalBBpart24
  br label %105

; <label>:63:                                     ; preds = %54
  %64 = load i32, i32* @x.29
  %65 = load i32, i32* @y.30
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %63
  %72 = load i32*, i32** %15, align 8
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, -1
  %75 = load i32, i32* @x.29
  %76 = load i32, i32* @y.30
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %74, label %83, label %86

; <label>:83:                                     ; preds = %originalBBpart28
  %84 = load i32, i32* %17, align 4
  %85 = load i32*, i32** %15, align 8
  store i32 %84, i32* %85, align 4
  br label %86

; <label>:86:                                     ; preds = %83, %originalBBpart28
  %87 = load i32, i32* @x.29
  %88 = load i32, i32* @y.30
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %86
  %95 = load i32, i32* %17, align 4
  %96 = load i32*, i32** %16, align 8
  store i32 %95, i32* %96, align 4
  %97 = load i32, i32* @x.29
  %98 = load i32, i32* @y.30
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %105

; <label>:105:                                    ; preds = %originalBBpart212, %62
  %106 = load i32, i32* %17, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %17, align 4
  br label %30

; <label>:108:                                    ; preds = %30
  %109 = load i32, i32* @x.29
  %110 = load i32, i32* @y.30
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %108
  %117 = load i32*, i32** %15, align 8
  %118 = load i32, i32* %117, align 4
  %119 = icmp sge i32 %118, 0
  %120 = load i32, i32* @x.29
  %121 = load i32, i32* @y.30
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %119, label %128, label %222

; <label>:128:                                    ; preds = %originalBBpart216
  %129 = load i32*, i32** %16, align 8
  %130 = load i32, i32* %129, align 4
  %131 = load i32*, i32** %15, align 8
  %132 = load i32, i32* %131, align 4
  %133 = sub nsw i32 %130, %132
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %19, align 4
  %135 = load i32, i32* %19, align 4
  %136 = mul nsw i32 %135, 8
  %137 = call i32 @mode_for_size(i32 %136, i32 1, i32 1)
  store i32 %137, i32* %20, align 4
  %138 = load i32*, i32** %15, align 8
  %139 = load i32, i32* %138, align 4
  %140 = load i32, i32* %20, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = load i32, i32* @target_flags, align 4
  %146 = and i32 %145, 33554432
  %147 = icmp ne i32 %146, 0
  %148 = select i1 %147, i32 8, i32 4
  %149 = sdiv i32 128, %148
  %150 = icmp slt i32 %144, %149
  br i1 %150, label %151, label %157

; <label>:151:                                    ; preds = %128
  %152 = load i32, i32* %20, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  br label %163

; <label>:157:                                    ; preds = %128
  %158 = load i32, i32* @target_flags, align 4
  %159 = and i32 %158, 33554432
  %160 = icmp ne i32 %159, 0
  %161 = select i1 %160, i32 8, i32 4
  %162 = sdiv i32 128, %161
  br label %163

; <label>:163:                                    ; preds = %157, %151
  %164 = phi i32 [ %156, %151 ], [ %162, %157 ]
  %165 = load i32, i32* @x.29
  %166 = load i32, i32* @y.30
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %163
  %173 = sub nsw i32 %164, 1
  %174 = and i32 %139, %173
  %175 = icmp ne i32 %174, 0
  %176 = load i32, i32* @x.29
  %177 = load i32, i32* @y.30
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart231, label %originalBB18alteredBB

originalBBpart231:                                ; preds = %originalBB18
  br i1 %175, label %184, label %185

; <label>:184:                                    ; preds = %originalBBpart231
  store i32 51, i32* %20, align 4
  br label %185

; <label>:185:                                    ; preds = %184, %originalBBpart231
  %186 = load i32, i32* %20, align 4
  %187 = load i32, i32* %20, align 4
  %188 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %189 = load i32*, i32** %15, align 8
  %190 = load i32, i32* %189, align 4
  %191 = sext i32 %190 to i64
  %192 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %188, i64 %191)
  %193 = call %struct.rtx_def* @memory_address(i32 %187, %struct.rtx_def* %192)
  %194 = call %struct.rtx_def* @gen_rtx_MEM(i32 %186, %struct.rtx_def* %193)
  store %struct.rtx_def* %194, %struct.rtx_def** %21, align 8
  %195 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %196 = load i32, i32* @target_flags, align 4
  %197 = and i32 %196, 33554432
  %198 = icmp ne i32 %197, 0
  %199 = select i1 %198, i32 64, i32 32
  call void @set_mem_align(%struct.rtx_def* %195, i32 %199)
  %200 = load i32, i32* %20, align 4
  %201 = icmp eq i32 %200, 51
  br i1 %201, label %202, label %215

; <label>:202:                                    ; preds = %185
  %203 = load i32, i32* %19, align 4
  %204 = sext i32 %203 to i64
  %205 = call %struct.rtx_def* @assign_stack_temp(i32 51, i64 %204, i32 0)
  store %struct.rtx_def* %205, %struct.rtx_def** %18, align 8
  %206 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %207 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %206)
  %208 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %209 = load i32, i32* %19, align 4
  %210 = sext i32 %209 to i64
  %211 = load i32, i32* @target_flags, align 4
  %212 = and i32 %211, 33554432
  %213 = icmp ne i32 %212, 0
  %214 = select i1 %213, i32 64, i32 32
  call void @move_by_pieces(%struct.rtx_def* %207, %struct.rtx_def* %208, i64 %210, i32 %214)
  br label %221

; <label>:215:                                    ; preds = %185
  %216 = load i32, i32* %20, align 4
  %217 = call %struct.rtx_def* @gen_reg_rtx(i32 %216)
  store %struct.rtx_def* %217, %struct.rtx_def** %18, align 8
  %218 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %219 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %220 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %218, %struct.rtx_def* %219)
  br label %221

; <label>:221:                                    ; preds = %215, %202
  br label %222

; <label>:222:                                    ; preds = %221, %originalBBpart216
  %223 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  ret %struct.rtx_def* %223

originalBBalteredBB:                              ; preds = %originalBB, %4
  %224 = alloca i32, align 4
  %225 = alloca %struct.rtx_def*, align 8
  %226 = alloca i32*, align 8
  %227 = alloca i32*, align 8
  %228 = alloca i32, align 4
  %229 = alloca %struct.rtx_def*, align 8
  %230 = alloca i32, align 4
  %231 = alloca i32, align 4
  %232 = alloca %struct.rtx_def*, align 8
  store i32 %0, i32* %224, align 4
  store %struct.rtx_def* %1, %struct.rtx_def** %225, align 8
  store i32* %2, i32** %226, align 8
  store i32* %3, i32** %227, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %229, align 8
  store i32 0, i32* %228, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %233 = load i32, i32* %17, align 4
  %234 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %235 = icmp sge i32 %233, %234
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %236 = load i32*, i32** %15, align 8
  %237 = load i32, i32* %236, align 4
  %238 = icmp eq i32 %237, -1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  %239 = load i32, i32* %17, align 4
  %240 = load i32*, i32** %16, align 8
  store i32 %239, i32* %240, align 4
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %108
  %241 = load i32*, i32** %15, align 8
  %242 = load i32, i32* %241, align 4
  %243 = icmp sge i32 %242, 0
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %163
  %_ = sub i32 %164, 1
  %gen = mul i32 %_, 1
  %_19 = sub i32 %164, 1
  %gen20 = mul i32 %_19, 1
  %244 = sub nsw i32 %164, 1
  %_21 = sub i32 0, %139
  %gen22 = add i32 %_21, %244
  %_23 = shl i32 %139, %244
  %_24 = sub i32 %139, %244
  %gen25 = mul i32 %_24, %244
  %_26 = shl i32 %139, %244
  %_27 = sub i32 %139, %244
  %gen28 = mul i32 %_27, %244
  %245 = and i32 %139, %244
  %246 = icmp ne i32 %245, 0
  br label %originalBB18
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @store_one_arg(%struct.arg_data*, %struct.rtx_def*, i32, i32, i32) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.arg_data*, align 8
  %8 = alloca %struct.rtx_def*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %union.tree_node*, align 8
  %13 = alloca %struct.rtx_def*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca %struct.rtx_def*, align 8
  %22 = alloca %union.tree_node*, align 8
  %23 = alloca %union.tree_node*, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca %struct.rtx_def*, align 8
  %27 = alloca %struct.rtx_def*, align 8
  %28 = alloca i32, align 4
  %29 = alloca %struct.rtx_def*, align 8
  store %struct.arg_data* %0, %struct.arg_data** %7, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %8, align 8
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  %30 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %31 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %30, i32 0, i32 0
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8
  store %union.tree_node* %32, %union.tree_node** %12, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %13, align 8
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %19, align 4
  %33 = load %union.tree_node*, %union.tree_node** %12, align 8
  %34 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %34, i32 0, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = and i32 %36, 255
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %40

; <label>:39:                                     ; preds = %5
  store i32 1, i32* %6, align 4
  br label %1847

; <label>:40:                                     ; preds = %5
  call void @push_temp_slots()
  %41 = load i32, i32* @target_flags, align 4
  %42 = and i32 %41, 4096
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %459

; <label>:44:                                     ; preds = %40
  %45 = load i32, i32* %9, align 4
  %46 = and i32 %45, 256
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %459, label %48

; <label>:48:                                     ; preds = %44
  %49 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %50 = icmp ne %struct.rtx_def* %49, null
  br i1 %50, label %51, label %336

; <label>:51:                                     ; preds = %48
  %52 = load i32, i32* @x.31
  %53 = load i32, i32* @y.32
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %51
  %60 = load i32, i32* %10, align 4
  %61 = icmp ne i32 %60, 0
  %62 = load i32, i32* @x.31
  %63 = load i32, i32* @y.32
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %61, label %336, label %70

; <label>:70:                                     ; preds = %originalBBpart2
  %71 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %72 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %71, i32 0, i32 12
  %73 = load %struct.rtx_def*, %struct.rtx_def** %72, align 8
  %74 = icmp ne %struct.rtx_def* %73, null
  br i1 %74, label %75, label %336

; <label>:75:                                     ; preds = %70
  %76 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %77 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %76, i32 0, i32 13
  %78 = load %struct.rtx_def*, %struct.rtx_def** %77, align 8
  %79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %79, i64 0, i64 0
  %81 = bitcast %union.rtunion_def* %80 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %81, align 8
  %83 = bitcast %struct.rtx_def* %82 to i32*
  %84 = load i32, i32* %83, align 8
  %85 = and i32 %84, 65535
  %86 = icmp eq i32 %85, 75
  br i1 %86, label %87, label %104

; <label>:87:                                     ; preds = %75
  %88 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %89 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %88, i32 0, i32 13
  %90 = load %struct.rtx_def*, %struct.rtx_def** %89, align 8
  %91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %91, i64 0, i64 0
  %93 = bitcast %union.rtunion_def* %92 to %struct.rtx_def**
  %94 = load %struct.rtx_def*, %struct.rtx_def** %93, align 8
  %95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1
  %96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %95, i64 0, i64 1
  %97 = bitcast %union.rtunion_def* %96 to %struct.rtx_def**
  %98 = load %struct.rtx_def*, %struct.rtx_def** %97, align 8
  %99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %99, i64 0, i64 0
  %101 = bitcast %union.rtunion_def* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = trunc i64 %102 to i32
  store i32 %103, i32* %17, align 4
  br label %121

; <label>:104:                                    ; preds = %75
  %105 = load i32, i32* @x.31
  %106 = load i32, i32* @y.32
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %104
  store i32 0, i32* %17, align 4
  %113 = load i32, i32* @x.31
  %114 = load i32, i32* @y.32
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %121

; <label>:121:                                    ; preds = %originalBBpart24, %87
  %122 = load i32, i32* @x.31
  %123 = load i32, i32* @y.32
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %121
  %130 = load i32, i32* %17, align 4
  %131 = sext i32 %130 to i64
  %132 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %133 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %132, i32 0, i32 11
  %134 = getelementptr inbounds %struct.args_size, %struct.args_size* %133, i32 0, i32 0
  %135 = load i64, i64* %134, align 8
  %136 = add nsw i64 %131, %135
  %137 = trunc i64 %136 to i32
  store i32 %137, i32* %18, align 4
  %138 = load i32, i32* %17, align 4
  store i32 %138, i32* %16, align 4
  %139 = load i32, i32* @x.31
  %140 = load i32, i32* @y.32
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart213, label %originalBB6alteredBB

originalBBpart213:                                ; preds = %originalBB6
  br label %147

; <label>:147:                                    ; preds = %197, %originalBBpart213
  %148 = load i32, i32* @x.31
  %149 = load i32, i32* @y.32
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %originalBB15alteredBB, %147
  %156 = load i32, i32* %16, align 4
  %157 = load i32, i32* %18, align 4
  %158 = icmp slt i32 %156, %157
  %159 = load i32, i32* @x.31
  %160 = load i32, i32* @y.32
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %158, label %167, label %200

; <label>:167:                                    ; preds = %originalBBpart217
  %168 = load i8*, i8** @stack_usage_map, align 8
  %169 = load i32, i32* %16, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %168, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = sext i8 %172 to i32
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %175, label %196

; <label>:175:                                    ; preds = %167
  %176 = load i32, i32* @x.31
  %177 = load i32, i32* @y.32
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %originalBB19alteredBB, %175
  %184 = load i32, i32* %16, align 4
  %185 = load i32, i32* %11, align 4
  %186 = icmp sgt i32 %184, %185
  %187 = load i32, i32* @x.31
  %188 = load i32, i32* @y.32
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %186, label %195, label %196

; <label>:195:                                    ; preds = %originalBBpart221
  br label %200

; <label>:196:                                    ; preds = %originalBBpart221, %167
  br label %197

; <label>:197:                                    ; preds = %196
  %198 = load i32, i32* %16, align 4
  %199 = add nsw i32 %198, 1
  store i32 %199, i32* %16, align 4
  br label %147

; <label>:200:                                    ; preds = %195, %originalBBpart217
  %201 = load i32, i32* %16, align 4
  %202 = load i32, i32* %18, align 4
  %203 = icmp ne i32 %201, %202
  br i1 %203, label %204, label %335

; <label>:204:                                    ; preds = %200
  %205 = load i32, i32* @x.31
  %206 = load i32, i32* @y.32
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %originalBB23alteredBB, %204
  %213 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %214 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %213, i32 0, i32 11
  %215 = getelementptr inbounds %struct.args_size, %struct.args_size* %214, i32 0, i32 0
  %216 = load i64, i64* %215, align 8
  %217 = mul nsw i64 %216, 8
  %218 = trunc i64 %217 to i32
  %219 = call i32 @mode_for_size(i32 %218, i32 1, i32 1)
  store i32 %219, i32* %20, align 4
  %220 = load i32, i32* %20, align 4
  %221 = load i32, i32* %20, align 4
  %222 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %223 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %222, i32 0, i32 13
  %224 = load %struct.rtx_def*, %struct.rtx_def** %223, align 8
  %225 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %224, i32 0, i32 1
  %226 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %225, i64 0, i64 0
  %227 = bitcast %union.rtunion_def* %226 to %struct.rtx_def**
  %228 = load %struct.rtx_def*, %struct.rtx_def** %227, align 8
  %229 = call %struct.rtx_def* @memory_address(i32 %221, %struct.rtx_def* %228)
  %230 = call %struct.rtx_def* @gen_rtx_MEM(i32 %220, %struct.rtx_def* %229)
  store %struct.rtx_def* %230, %struct.rtx_def** %21, align 8
  %231 = load i32, i32* %20, align 4
  %232 = icmp eq i32 %231, 51
  %233 = load i32, i32* @x.31
  %234 = load i32, i32* @y.32
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBBpart240, label %originalBB23alteredBB

originalBBpart240:                                ; preds = %originalBB23
  br i1 %232, label %241, label %324

; <label>:241:                                    ; preds = %originalBBpart240
  %242 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %243 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %242, i32 0, i32 0
  %244 = load %union.tree_node*, %union.tree_node** %243, align 8
  %245 = bitcast %union.tree_node* %244 to %struct.tree_common*
  %246 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %245, i32 0, i32 1
  %247 = load %union.tree_node*, %union.tree_node** %246, align 8
  store %union.tree_node* %247, %union.tree_node** %22, align 8
  %248 = load %union.tree_node*, %union.tree_node** %22, align 8
  %249 = load %union.tree_node*, %union.tree_node** %22, align 8
  %250 = bitcast %union.tree_node* %249 to %struct.tree_common*
  %251 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %250, i32 0, i32 2
  %252 = load i32, i32* %251, align 8
  %253 = lshr i32 %252, 12
  %254 = and i32 %253, 1
  %255 = mul nsw i32 %254, 1
  %256 = load %union.tree_node*, %union.tree_node** %22, align 8
  %257 = bitcast %union.tree_node* %256 to %struct.tree_common*
  %258 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %257, i32 0, i32 2
  %259 = load i32, i32* %258, align 8
  %260 = lshr i32 %259, 11
  %261 = and i32 %260, 1
  %262 = mul nsw i32 %261, 2
  %263 = or i32 %255, %262
  %264 = load %union.tree_node*, %union.tree_node** %22, align 8
  %265 = bitcast %union.tree_node* %264 to %struct.tree_type*
  %266 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %265, i32 0, i32 6
  %267 = load i32, i32* %266, align 4
  %268 = lshr i32 %267, 21
  %269 = and i32 %268, 1
  %270 = mul nsw i32 %269, 4
  %271 = or i32 %263, %270
  %272 = load %union.tree_node*, %union.tree_node** %22, align 8
  %273 = bitcast %union.tree_node* %272 to %struct.tree_common*
  %274 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %273, i32 0, i32 2
  %275 = load i32, i32* %274, align 8
  %276 = and i32 %275, 255
  %277 = icmp eq i32 %276, 20
  br i1 %277, label %278, label %300

; <label>:278:                                    ; preds = %241
  %279 = load i32, i32* @x.31
  %280 = load i32, i32* @y.32
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %278
  %287 = load %union.tree_node*, %union.tree_node** %22, align 8
  %288 = bitcast %union.tree_node* %287 to %struct.tree_common*
  %289 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %288, i32 0, i32 1
  %290 = load %union.tree_node*, %union.tree_node** %289, align 8
  %291 = icmp ne %union.tree_node* %290, null
  %292 = load i32, i32* @x.31
  %293 = load i32, i32* @y.32
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %300

; <label>:300:                                    ; preds = %originalBBpart244, %241
  %301 = phi i1 [ false, %241 ], [ %291, %originalBBpart244 ]
  %302 = zext i1 %301 to i32
  %303 = mul nsw i32 %302, 8
  %304 = or i32 %271, %303
  %305 = or i32 %304, 1
  %306 = call %union.tree_node* @build_qualified_type(%union.tree_node* %248, i32 %305)
  store %union.tree_node* %306, %union.tree_node** %23, align 8
  %307 = load %union.tree_node*, %union.tree_node** %23, align 8
  %308 = call %struct.rtx_def* @assign_temp(%union.tree_node* %307, i32 0, i32 1, i32 1)
  %309 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %310 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %309, i32 0, i32 14
  store %struct.rtx_def* %308, %struct.rtx_def** %310, align 8
  %311 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %312 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %311, i32 0, i32 14
  %313 = load %struct.rtx_def*, %struct.rtx_def** %312, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %313)
  %314 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %315 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %314, i32 0, i32 14
  %316 = load %struct.rtx_def*, %struct.rtx_def** %315, align 8
  %317 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %316)
  %318 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %319 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %320 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %319, i32 0, i32 0
  %321 = load %union.tree_node*, %union.tree_node** %320, align 8
  %322 = call %struct.rtx_def* @expr_size(%union.tree_node* %321)
  %323 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %317, %struct.rtx_def* %318, %struct.rtx_def* %322)
  br label %334

; <label>:324:                                    ; preds = %originalBBpart240
  %325 = load i32, i32* %20, align 4
  %326 = call %struct.rtx_def* @gen_reg_rtx(i32 %325)
  %327 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %328 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %327, i32 0, i32 14
  store %struct.rtx_def* %326, %struct.rtx_def** %328, align 8
  %329 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %330 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %329, i32 0, i32 14
  %331 = load %struct.rtx_def*, %struct.rtx_def** %330, align 8
  %332 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %333 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %331, %struct.rtx_def* %332)
  br label %334

; <label>:334:                                    ; preds = %324, %300
  br label %335

; <label>:335:                                    ; preds = %334, %200
  br label %336

; <label>:336:                                    ; preds = %335, %70, %originalBBpart2, %48
  %337 = load i32, i32* @x.31
  %338 = load i32, i32* @y.32
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %336
  %345 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %346 = icmp ne %struct.rtx_def* %345, null
  %347 = load i32, i32* @x.31
  %348 = load i32, i32* @y.32
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %346, label %355, label %458

; <label>:355:                                    ; preds = %originalBBpart248
  %356 = load i32, i32* @x.31
  %357 = load i32, i32* @y.32
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %355
  %364 = load i32, i32* %10, align 4
  %365 = icmp ne i32 %364, 0
  %366 = load i32, i32* @x.31
  %367 = load i32, i32* @y.32
  %368 = sub i32 %366, 1
  %369 = mul i32 %366, %368
  %370 = urem i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %371, %372
  br i1 %373, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %365, label %458, label %374

; <label>:374:                                    ; preds = %originalBBpart252
  %375 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %376 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %375, i32 0, i32 12
  %377 = load %struct.rtx_def*, %struct.rtx_def** %376, align 8
  %378 = icmp ne %struct.rtx_def* %377, null
  br i1 %378, label %379, label %458

; <label>:379:                                    ; preds = %374
  %380 = load i32, i32* @x.31
  %381 = load i32, i32* @y.32
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %originalBB54alteredBB, %379
  %388 = load i32, i32* %17, align 4
  store i32 %388, i32* %16, align 4
  %389 = load i32, i32* @x.31
  %390 = load i32, i32* @y.32
  %391 = sub i32 %389, 1
  %392 = mul i32 %389, %391
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %394, %395
  br i1 %396, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %397

; <label>:397:                                    ; preds = %originalBBpart272, %originalBBpart256
  %398 = load i32, i32* %16, align 4
  %399 = load i32, i32* %18, align 4
  %400 = icmp slt i32 %398, %399
  br i1 %400, label %401, label %441

; <label>:401:                                    ; preds = %397
  %402 = load i32, i32* @x.31
  %403 = load i32, i32* @y.32
  %404 = sub i32 %402, 1
  %405 = mul i32 %402, %404
  %406 = urem i32 %405, 2
  %407 = icmp eq i32 %406, 0
  %408 = icmp slt i32 %403, 10
  %409 = or i1 %407, %408
  br i1 %409, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %originalBB58alteredBB, %401
  %410 = load i8*, i8** @stack_usage_map, align 8
  %411 = load i32, i32* %16, align 4
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds i8, i8* %410, i64 %412
  store i8 1, i8* %413, align 1
  %414 = load i32, i32* @x.31
  %415 = load i32, i32* @y.32
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %422

; <label>:422:                                    ; preds = %originalBBpart260
  %423 = load i32, i32* @x.31
  %424 = load i32, i32* @y.32
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %originalBB62alteredBB, %422
  %431 = load i32, i32* %16, align 4
  %432 = add nsw i32 %431, 1
  store i32 %432, i32* %16, align 4
  %433 = load i32, i32* @x.31
  %434 = load i32, i32* @y.32
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBBpart272, label %originalBB62alteredBB

originalBBpart272:                                ; preds = %originalBB62
  br label %397

; <label>:441:                                    ; preds = %397
  %442 = load i32, i32* @x.31
  %443 = load i32, i32* @y.32
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %441
  %450 = load i32, i32* @x.31
  %451 = load i32, i32* @y.32
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %458

; <label>:458:                                    ; preds = %originalBBpart276, %374, %originalBBpart252, %originalBBpart248
  br label %459

; <label>:459:                                    ; preds = %458, %44, %40
  %460 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %461 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %460, i32 0, i32 8
  %462 = load i32, i32* %461, align 8
  %463 = icmp ne i32 %462, 0
  br i1 %463, label %496, label %464

; <label>:464:                                    ; preds = %459
  %465 = load i32, i32* %9, align 4
  %466 = and i32 %465, 256
  %467 = icmp ne i32 %466, 0
  br i1 %467, label %468, label %488

; <label>:468:                                    ; preds = %464
  %469 = load i32, i32* @x.31
  %470 = load i32, i32* @y.32
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %originalBB78alteredBB, %468
  %477 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %478 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %477, i32 0, i32 5
  %479 = load %struct.rtx_def*, %struct.rtx_def** %478, align 8
  store %struct.rtx_def* %479, %struct.rtx_def** %13, align 8
  %480 = load i32, i32* @x.31
  %481 = load i32, i32* @y.32
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %492

; <label>:488:                                    ; preds = %464
  %489 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %490 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %489, i32 0, i32 4
  %491 = load %struct.rtx_def*, %struct.rtx_def** %490, align 8
  store %struct.rtx_def* %491, %struct.rtx_def** %13, align 8
  br label %492

; <label>:492:                                    ; preds = %488, %originalBBpart280
  %493 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %494 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %493, i32 0, i32 7
  %495 = load i32, i32* %494, align 4
  store i32 %495, i32* %14, align 4
  br label %496

; <label>:496:                                    ; preds = %492, %459
  %497 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %498 = icmp ne %struct.rtx_def* %497, null
  br i1 %498, label %499, label %519

; <label>:499:                                    ; preds = %496
  %500 = load i32, i32* %14, align 4
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %502, label %519

; <label>:502:                                    ; preds = %499
  %503 = load i32, i32* @x.31
  %504 = load i32, i32* @y.32
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %originalBB82alteredBB, %502
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 4370, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.store_one_arg, i32 0, i32 0)) #8
  %511 = load i32, i32* @x.31
  %512 = load i32, i32* @y.32
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  unreachable

; <label>:519:                                    ; preds = %499, %496
  %520 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %521 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %520, i32 0, i32 16
  %522 = load i32, i32* %521, align 8
  %523 = icmp ne i32 %522, 0
  br i1 %523, label %524, label %541

; <label>:524:                                    ; preds = %519
  %525 = load i32, i32* @x.31
  %526 = load i32, i32* @y.32
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %originalBB86alteredBB, %524
  store %struct.rtx_def* null, %struct.rtx_def** %13, align 8
  %533 = load i32, i32* @x.31
  %534 = load i32, i32* @y.32
  %535 = sub i32 %533, 1
  %536 = mul i32 %533, %535
  %537 = urem i32 %536, 2
  %538 = icmp eq i32 %537, 0
  %539 = icmp slt i32 %534, 10
  %540 = or i1 %538, %539
  br i1 %540, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br label %541

; <label>:541:                                    ; preds = %originalBBpart288, %519
  %542 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %543 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %542, i32 0, i32 2
  %544 = load %struct.rtx_def*, %struct.rtx_def** %543, align 8
  %545 = icmp eq %struct.rtx_def* %544, null
  br i1 %545, label %546, label %674

; <label>:546:                                    ; preds = %541
  %547 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %548 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %547, i32 0, i32 8
  %549 = load i32, i32* %548, align 8
  %550 = icmp ne i32 %549, 0
  br i1 %550, label %551, label %570

; <label>:551:                                    ; preds = %546
  %552 = load i32, i32* @x.31
  %553 = load i32, i32* @y.32
  %554 = sub i32 %552, 1
  %555 = mul i32 %552, %554
  %556 = urem i32 %555, 2
  %557 = icmp eq i32 %556, 0
  %558 = icmp slt i32 %553, 10
  %559 = or i1 %557, %558
  br i1 %559, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %originalBB90alteredBB, %551
  %560 = load i32, i32* @stack_arg_under_construction, align 4
  %561 = add nsw i32 %560, 1
  store i32 %561, i32* @stack_arg_under_construction, align 4
  %562 = load i32, i32* @x.31
  %563 = load i32, i32* @y.32
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart295, label %originalBB90alteredBB

originalBBpart295:                                ; preds = %originalBB90
  br label %570

; <label>:570:                                    ; preds = %originalBBpart295, %546
  %571 = load %union.tree_node*, %union.tree_node** %12, align 8
  %572 = load i32, i32* %14, align 4
  %573 = icmp ne i32 %572, 0
  br i1 %573, label %588, label %574

; <label>:574:                                    ; preds = %570
  %575 = load %union.tree_node*, %union.tree_node** %12, align 8
  %576 = bitcast %union.tree_node* %575 to %struct.tree_common*
  %577 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %576, i32 0, i32 1
  %578 = load %union.tree_node*, %union.tree_node** %577, align 8
  %579 = bitcast %union.tree_node* %578 to %struct.tree_type*
  %580 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %579, i32 0, i32 6
  %581 = load i32, i32* %580, align 4
  %582 = lshr i32 %581, 9
  %583 = and i32 %582, 127
  %584 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %585 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %584, i32 0, i32 1
  %586 = load i32, i32* %585, align 8
  %587 = icmp ne i32 %583, %586
  br i1 %587, label %588, label %589

; <label>:588:                                    ; preds = %574, %570
  br label %593

; <label>:589:                                    ; preds = %574
  %590 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %591 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %590, i32 0, i32 12
  %592 = load %struct.rtx_def*, %struct.rtx_def** %591, align 8
  br label %593

; <label>:593:                                    ; preds = %589, %588
  %594 = phi %struct.rtx_def* [ null, %588 ], [ %592, %589 ]
  %595 = call %struct.rtx_def* @expand_expr(%union.tree_node* %571, %struct.rtx_def* %594, i32 0, i32 0)
  %596 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %597 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %596, i32 0, i32 2
  store %struct.rtx_def* %595, %struct.rtx_def** %597, align 8
  %598 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %599 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %598, i32 0, i32 1
  %600 = load i32, i32* %599, align 8
  %601 = load %union.tree_node*, %union.tree_node** %12, align 8
  %602 = bitcast %union.tree_node* %601 to %struct.tree_common*
  %603 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %602, i32 0, i32 1
  %604 = load %union.tree_node*, %union.tree_node** %603, align 8
  %605 = bitcast %union.tree_node* %604 to %struct.tree_type*
  %606 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %605, i32 0, i32 6
  %607 = load i32, i32* %606, align 4
  %608 = lshr i32 %607, 9
  %609 = and i32 %608, 127
  %610 = icmp ne i32 %600, %609
  br i1 %610, label %611, label %633

; <label>:611:                                    ; preds = %593
  %612 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %613 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %612, i32 0, i32 1
  %614 = load i32, i32* %613, align 8
  %615 = load %union.tree_node*, %union.tree_node** %12, align 8
  %616 = bitcast %union.tree_node* %615 to %struct.tree_common*
  %617 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %616, i32 0, i32 1
  %618 = load %union.tree_node*, %union.tree_node** %617, align 8
  %619 = bitcast %union.tree_node* %618 to %struct.tree_type*
  %620 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %619, i32 0, i32 6
  %621 = load i32, i32* %620, align 4
  %622 = lshr i32 %621, 9
  %623 = and i32 %622, 127
  %624 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %625 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %624, i32 0, i32 2
  %626 = load %struct.rtx_def*, %struct.rtx_def** %625, align 8
  %627 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %628 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %627, i32 0, i32 6
  %629 = load i32, i32* %628, align 8
  %630 = call %struct.rtx_def* @convert_modes(i32 %614, i32 %623, %struct.rtx_def* %626, i32 %629)
  %631 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %632 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %631, i32 0, i32 2
  store %struct.rtx_def* %630, %struct.rtx_def** %632, align 8
  br label %633

; <label>:633:                                    ; preds = %611, %593
  %634 = load i32, i32* @x.31
  %635 = load i32, i32* @y.32
  %636 = sub i32 %634, 1
  %637 = mul i32 %634, %636
  %638 = urem i32 %637, 2
  %639 = icmp eq i32 %638, 0
  %640 = icmp slt i32 %635, 10
  %641 = or i1 %639, %640
  br i1 %641, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %originalBB97alteredBB, %633
  %642 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %643 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %642, i32 0, i32 8
  %644 = load i32, i32* %643, align 8
  %645 = icmp ne i32 %644, 0
  %646 = load i32, i32* @x.31
  %647 = load i32, i32* @y.32
  %648 = sub i32 %646, 1
  %649 = mul i32 %646, %648
  %650 = urem i32 %649, 2
  %651 = icmp eq i32 %650, 0
  %652 = icmp slt i32 %647, 10
  %653 = or i1 %651, %652
  br i1 %653, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br i1 %645, label %654, label %673

; <label>:654:                                    ; preds = %originalBBpart299
  %655 = load i32, i32* @x.31
  %656 = load i32, i32* @y.32
  %657 = sub i32 %655, 1
  %658 = mul i32 %655, %657
  %659 = urem i32 %658, 2
  %660 = icmp eq i32 %659, 0
  %661 = icmp slt i32 %656, 10
  %662 = or i1 %660, %661
  br i1 %662, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %originalBB101alteredBB, %654
  %663 = load i32, i32* @stack_arg_under_construction, align 4
  %664 = add nsw i32 %663, -1
  store i32 %664, i32* @stack_arg_under_construction, align 4
  %665 = load i32, i32* @x.31
  %666 = load i32, i32* @y.32
  %667 = sub i32 %665, 1
  %668 = mul i32 %665, %667
  %669 = urem i32 %668, 2
  %670 = icmp eq i32 %669, 0
  %671 = icmp slt i32 %666, 10
  %672 = or i1 %670, %671
  br i1 %672, label %originalBBpart2108, label %originalBB101alteredBB

originalBBpart2108:                               ; preds = %originalBB101
  br label %673

; <label>:673:                                    ; preds = %originalBBpart2108, %originalBBpart299
  br label %674

; <label>:674:                                    ; preds = %673, %541
  %675 = load i32, i32* %9, align 4
  %676 = and i32 %675, 8
  %677 = icmp ne i32 %676, 0
  br i1 %677, label %678, label %679

; <label>:678:                                    ; preds = %674
  call void @do_pending_stack_adjust()
  br label %679

; <label>:679:                                    ; preds = %678, %674
  %680 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %681 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %680, i32 0, i32 2
  %682 = load %struct.rtx_def*, %struct.rtx_def** %681, align 8
  %683 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %684 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %683, i32 0, i32 12
  %685 = load %struct.rtx_def*, %struct.rtx_def** %684, align 8
  %686 = icmp eq %struct.rtx_def* %682, %685
  br i1 %686, label %687, label %688

; <label>:687:                                    ; preds = %679
  br label %1839

; <label>:688:                                    ; preds = %679
  %689 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %690 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %689, i32 0, i32 1
  %691 = load i32, i32* %690, align 8
  %692 = icmp ne i32 %691, 51
  br i1 %692, label %693, label %923

; <label>:693:                                    ; preds = %688
  %694 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %695 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %694, i32 0, i32 1
  %696 = load i32, i32* %695, align 8
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %697
  %699 = load i8, i8* %698, align 1
  %700 = zext i8 %699 to i32
  store i32 %700, i32* %24, align 4
  %701 = load i32, i32* @target_flags, align 4
  %702 = and i32 %701, 33554432
  %703 = icmp ne i32 %702, 0
  br i1 %703, label %704, label %708

; <label>:704:                                    ; preds = %693
  %705 = load i32, i32* %24, align 4
  %706 = add nsw i32 %705, 7
  %707 = and i32 %706, -8
  br label %728

; <label>:708:                                    ; preds = %693
  %709 = load i32, i32* @x.31
  %710 = load i32, i32* @y.32
  %711 = sub i32 %709, 1
  %712 = mul i32 %709, %711
  %713 = urem i32 %712, 2
  %714 = icmp eq i32 %713, 0
  %715 = icmp slt i32 %710, 10
  %716 = or i1 %714, %715
  br i1 %716, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %originalBB110alteredBB, %708
  %717 = load i32, i32* %24, align 4
  %718 = add nsw i32 %717, 1
  %719 = and i32 %718, -2
  %720 = load i32, i32* @x.31
  %721 = load i32, i32* @y.32
  %722 = sub i32 %720, 1
  %723 = mul i32 %720, %722
  %724 = urem i32 %723, 2
  %725 = icmp eq i32 %724, 0
  %726 = icmp slt i32 %721, 10
  %727 = or i1 %725, %726
  br i1 %727, label %originalBBpart2123, label %originalBB110alteredBB

originalBBpart2123:                               ; preds = %originalBB110
  br label %728

; <label>:728:                                    ; preds = %originalBBpart2123, %704
  %729 = phi i32 [ %707, %704 ], [ %719, %originalBBpart2123 ]
  store i32 %729, i32* %24, align 4
  %730 = load i32, i32* %24, align 4
  store i32 %730, i32* %15, align 4
  %731 = load i32, i32* %24, align 4
  %732 = load i32, i32* @target_flags, align 4
  %733 = and i32 %732, 33554432
  %734 = icmp ne i32 %733, 0
  %735 = select i1 %734, i32 64, i32 32
  %736 = sdiv i32 %735, 8
  %737 = add nsw i32 %731, %736
  %738 = sub nsw i32 %737, 1
  %739 = load i32, i32* @target_flags, align 4
  %740 = and i32 %739, 33554432
  %741 = icmp ne i32 %740, 0
  %742 = select i1 %741, i32 64, i32 32
  %743 = sdiv i32 %742, 8
  %744 = sdiv i32 %738, %743
  %745 = load i32, i32* @target_flags, align 4
  %746 = and i32 %745, 33554432
  %747 = icmp ne i32 %746, 0
  %748 = select i1 %747, i32 64, i32 32
  %749 = sdiv i32 %748, 8
  %750 = mul nsw i32 %744, %749
  store i32 %750, i32* %15, align 4
  %751 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %752 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %751, i32 0, i32 2
  %753 = load %struct.rtx_def*, %struct.rtx_def** %752, align 8
  %754 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %755 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %754, i32 0, i32 1
  %756 = load i32, i32* %755, align 8
  %757 = load %union.tree_node*, %union.tree_node** %12, align 8
  %758 = bitcast %union.tree_node* %757 to %struct.tree_common*
  %759 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %758, i32 0, i32 1
  %760 = load %union.tree_node*, %union.tree_node** %759, align 8
  %761 = load i32, i32* %14, align 4
  %762 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %763 = load i32, i32* %15, align 4
  %764 = load i32, i32* %24, align 4
  %765 = sub nsw i32 %763, %764
  %766 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %767 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %768 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %767, i32 0, i32 9
  %769 = getelementptr inbounds %struct.args_size, %struct.args_size* %768, i32 0, i32 1
  %770 = load %union.tree_node*, %union.tree_node** %769, align 8
  %771 = icmp eq %union.tree_node* %770, null
  br i1 %771, label %772, label %778

; <label>:772:                                    ; preds = %728
  %773 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %774 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %773, i32 0, i32 9
  %775 = getelementptr inbounds %struct.args_size, %struct.args_size* %774, i32 0, i32 0
  %776 = load i64, i64* %775, align 8
  %777 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %776)
  br label %838

; <label>:778:                                    ; preds = %728
  %779 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %780 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %779, i32 0, i32 9
  %781 = getelementptr inbounds %struct.args_size, %struct.args_size* %780, i32 0, i32 1
  %782 = load %union.tree_node*, %union.tree_node** %781, align 8
  %783 = icmp eq %union.tree_node* %782, null
  br i1 %783, label %784, label %806

; <label>:784:                                    ; preds = %778
  %785 = load i32, i32* @x.31
  %786 = load i32, i32* @y.32
  %787 = sub i32 %785, 1
  %788 = mul i32 %785, %787
  %789 = urem i32 %788, 2
  %790 = icmp eq i32 %789, 0
  %791 = icmp slt i32 %786, 10
  %792 = or i1 %790, %791
  br i1 %792, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %originalBB125alteredBB, %784
  %793 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %794 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %793, i32 0, i32 9
  %795 = getelementptr inbounds %struct.args_size, %struct.args_size* %794, i32 0, i32 0
  %796 = load i64, i64* %795, align 8
  %797 = call %union.tree_node* @size_int_wide(i64 %796, i32 1)
  %798 = load i32, i32* @x.31
  %799 = load i32, i32* @y.32
  %800 = sub i32 %798, 1
  %801 = mul i32 %798, %800
  %802 = urem i32 %801, 2
  %803 = icmp eq i32 %802, 0
  %804 = icmp slt i32 %799, 10
  %805 = or i1 %803, %804
  br i1 %805, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  br label %819

; <label>:806:                                    ; preds = %778
  %807 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %808 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %809 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %808, i32 0, i32 9
  %810 = getelementptr inbounds %struct.args_size, %struct.args_size* %809, i32 0, i32 1
  %811 = load %union.tree_node*, %union.tree_node** %810, align 8
  %812 = call %union.tree_node* @convert(%union.tree_node* %807, %union.tree_node* %811)
  %813 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %814 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %813, i32 0, i32 9
  %815 = getelementptr inbounds %struct.args_size, %struct.args_size* %814, i32 0, i32 0
  %816 = load i64, i64* %815, align 8
  %817 = call %union.tree_node* @size_int_wide(i64 %816, i32 1)
  %818 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %812, %union.tree_node* %817)
  br label %819

; <label>:819:                                    ; preds = %806, %originalBBpart2127
  %820 = phi %union.tree_node* [ %797, %originalBBpart2127 ], [ %818, %806 ]
  %821 = load i32, i32* @x.31
  %822 = load i32, i32* @y.32
  %823 = sub i32 %821, 1
  %824 = mul i32 %821, %823
  %825 = urem i32 %824, 2
  %826 = icmp eq i32 %825, 0
  %827 = icmp slt i32 %822, 10
  %828 = or i1 %826, %827
  br i1 %828, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %originalBB129alteredBB, %819
  %829 = call %struct.rtx_def* @expand_expr(%union.tree_node* %820, %struct.rtx_def* null, i32 0, i32 0)
  %830 = load i32, i32* @x.31
  %831 = load i32, i32* @y.32
  %832 = sub i32 %830, 1
  %833 = mul i32 %830, %832
  %834 = urem i32 %833, 2
  %835 = icmp eq i32 %834, 0
  %836 = icmp slt i32 %831, 10
  %837 = or i1 %835, %836
  br i1 %837, label %originalBBpart2131, label %originalBB129alteredBB

originalBBpart2131:                               ; preds = %originalBB129
  br label %838

; <label>:838:                                    ; preds = %originalBBpart2131, %772
  %839 = phi %struct.rtx_def* [ %777, %772 ], [ %829, %originalBBpart2131 ]
  %840 = load i32, i32* @x.31
  %841 = load i32, i32* @y.32
  %842 = sub i32 %840, 1
  %843 = mul i32 %840, %842
  %844 = urem i32 %843, 2
  %845 = icmp eq i32 %844, 0
  %846 = icmp slt i32 %841, 10
  %847 = or i1 %845, %846
  br i1 %847, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %originalBB133alteredBB, %838
  %848 = load i32, i32* %11, align 4
  %849 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %850 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %849, i32 0, i32 17
  %851 = getelementptr inbounds %struct.args_size, %struct.args_size* %850, i32 0, i32 1
  %852 = load %union.tree_node*, %union.tree_node** %851, align 8
  %853 = icmp eq %union.tree_node* %852, null
  %854 = load i32, i32* @x.31
  %855 = load i32, i32* @y.32
  %856 = sub i32 %854, 1
  %857 = mul i32 %854, %856
  %858 = urem i32 %857, 2
  %859 = icmp eq i32 %858, 0
  %860 = icmp slt i32 %855, 10
  %861 = or i1 %859, %860
  br i1 %861, label %originalBBpart2135, label %originalBB133alteredBB

originalBBpart2135:                               ; preds = %originalBB133
  br i1 %853, label %862, label %868

; <label>:862:                                    ; preds = %originalBBpart2135
  %863 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %864 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %863, i32 0, i32 17
  %865 = getelementptr inbounds %struct.args_size, %struct.args_size* %864, i32 0, i32 0
  %866 = load i64, i64* %865, align 8
  %867 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %866)
  br label %912

; <label>:868:                                    ; preds = %originalBBpart2135
  %869 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %870 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %869, i32 0, i32 17
  %871 = getelementptr inbounds %struct.args_size, %struct.args_size* %870, i32 0, i32 1
  %872 = load %union.tree_node*, %union.tree_node** %871, align 8
  %873 = icmp eq %union.tree_node* %872, null
  br i1 %873, label %874, label %880

; <label>:874:                                    ; preds = %868
  %875 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %876 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %875, i32 0, i32 17
  %877 = getelementptr inbounds %struct.args_size, %struct.args_size* %876, i32 0, i32 0
  %878 = load i64, i64* %877, align 8
  %879 = call %union.tree_node* @size_int_wide(i64 %878, i32 1)
  br label %909

; <label>:880:                                    ; preds = %868
  %881 = load i32, i32* @x.31
  %882 = load i32, i32* @y.32
  %883 = sub i32 %881, 1
  %884 = mul i32 %881, %883
  %885 = urem i32 %884, 2
  %886 = icmp eq i32 %885, 0
  %887 = icmp slt i32 %882, 10
  %888 = or i1 %886, %887
  br i1 %888, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %originalBB137alteredBB, %880
  %889 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %890 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %891 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %890, i32 0, i32 17
  %892 = getelementptr inbounds %struct.args_size, %struct.args_size* %891, i32 0, i32 1
  %893 = load %union.tree_node*, %union.tree_node** %892, align 8
  %894 = call %union.tree_node* @convert(%union.tree_node* %889, %union.tree_node* %893)
  %895 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %896 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %895, i32 0, i32 17
  %897 = getelementptr inbounds %struct.args_size, %struct.args_size* %896, i32 0, i32 0
  %898 = load i64, i64* %897, align 8
  %899 = call %union.tree_node* @size_int_wide(i64 %898, i32 1)
  %900 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %894, %union.tree_node* %899)
  %901 = load i32, i32* @x.31
  %902 = load i32, i32* @y.32
  %903 = sub i32 %901, 1
  %904 = mul i32 %901, %903
  %905 = urem i32 %904, 2
  %906 = icmp eq i32 %905, 0
  %907 = icmp slt i32 %902, 10
  %908 = or i1 %906, %907
  br i1 %908, label %originalBBpart2139, label %originalBB137alteredBB

originalBBpart2139:                               ; preds = %originalBB137
  br label %909

; <label>:909:                                    ; preds = %originalBBpart2139, %874
  %910 = phi %union.tree_node* [ %879, %874 ], [ %900, %originalBBpart2139 ]
  %911 = call %struct.rtx_def* @expand_expr(%union.tree_node* %910, %struct.rtx_def* null, i32 0, i32 0)
  br label %912

; <label>:912:                                    ; preds = %909, %862
  %913 = phi %struct.rtx_def* [ %867, %862 ], [ %911, %909 ]
  call void @emit_push_insn(%struct.rtx_def* %753, i32 %756, %union.tree_node* %760, %struct.rtx_def* null, i32 0, i32 %761, %struct.rtx_def* %762, i32 %765, %struct.rtx_def* %766, %struct.rtx_def* %839, i32 %848, %struct.rtx_def* %913)
  %914 = load i32, i32* %14, align 4
  %915 = icmp eq i32 %914, 0
  br i1 %915, label %916, label %922

; <label>:916:                                    ; preds = %912
  %917 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %918 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %917, i32 0, i32 12
  %919 = load %struct.rtx_def*, %struct.rtx_def** %918, align 8
  %920 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %921 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %920, i32 0, i32 2
  store %struct.rtx_def* %919, %struct.rtx_def** %921, align 8
  br label %922

; <label>:922:                                    ; preds = %916, %912
  br label %1822

; <label>:923:                                    ; preds = %688
  %924 = load i32, i32* @x.31
  %925 = load i32, i32* @y.32
  %926 = sub i32 %924, 1
  %927 = mul i32 %924, %926
  %928 = urem i32 %927, 2
  %929 = icmp eq i32 %928, 0
  %930 = icmp slt i32 %925, 10
  %931 = or i1 %929, %930
  br i1 %931, label %originalBB141, label %originalBB141alteredBB

originalBB141:                                    ; preds = %originalBB141alteredBB, %923
  %932 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %933 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %932, i32 0, i32 11
  %934 = getelementptr inbounds %struct.args_size, %struct.args_size* %933, i32 0, i32 1
  %935 = load %union.tree_node*, %union.tree_node** %934, align 8
  %936 = icmp ne %union.tree_node* %935, null
  %937 = load i32, i32* @x.31
  %938 = load i32, i32* @y.32
  %939 = sub i32 %937, 1
  %940 = mul i32 %937, %939
  %941 = urem i32 %940, 2
  %942 = icmp eq i32 %941, 0
  %943 = icmp slt i32 %938, 10
  %944 = or i1 %942, %943
  br i1 %944, label %originalBBpart2143, label %originalBB141alteredBB

originalBBpart2143:                               ; preds = %originalBB141
  br i1 %936, label %945, label %1019

; <label>:945:                                    ; preds = %originalBBpart2143
  %946 = load i32, i32* @x.31
  %947 = load i32, i32* @y.32
  %948 = sub i32 %946, 1
  %949 = mul i32 %946, %948
  %950 = urem i32 %949, 2
  %951 = icmp eq i32 %950, 0
  %952 = icmp slt i32 %947, 10
  %953 = or i1 %951, %952
  br i1 %953, label %originalBB145, label %originalBB145alteredBB

originalBB145:                                    ; preds = %originalBB145alteredBB, %945
  store i32 0, i32* %25, align 4
  %954 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %955 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %954, i32 0, i32 11
  %956 = getelementptr inbounds %struct.args_size, %struct.args_size* %955, i32 0, i32 1
  %957 = load %union.tree_node*, %union.tree_node** %956, align 8
  %958 = icmp eq %union.tree_node* %957, null
  %959 = load i32, i32* @x.31
  %960 = load i32, i32* @y.32
  %961 = sub i32 %959, 1
  %962 = mul i32 %959, %961
  %963 = urem i32 %962, 2
  %964 = icmp eq i32 %963, 0
  %965 = icmp slt i32 %960, 10
  %966 = or i1 %964, %965
  br i1 %966, label %originalBBpart2147, label %originalBB145alteredBB

originalBBpart2147:                               ; preds = %originalBB145
  br i1 %958, label %967, label %973

; <label>:967:                                    ; preds = %originalBBpart2147
  %968 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %969 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %968, i32 0, i32 11
  %970 = getelementptr inbounds %struct.args_size, %struct.args_size* %969, i32 0, i32 0
  %971 = load i64, i64* %970, align 8
  %972 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %971)
  br label %1001

; <label>:973:                                    ; preds = %originalBBpart2147
  %974 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %975 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %974, i32 0, i32 11
  %976 = getelementptr inbounds %struct.args_size, %struct.args_size* %975, i32 0, i32 1
  %977 = load %union.tree_node*, %union.tree_node** %976, align 8
  %978 = icmp eq %union.tree_node* %977, null
  br i1 %978, label %979, label %985

; <label>:979:                                    ; preds = %973
  %980 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %981 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %980, i32 0, i32 11
  %982 = getelementptr inbounds %struct.args_size, %struct.args_size* %981, i32 0, i32 0
  %983 = load i64, i64* %982, align 8
  %984 = call %union.tree_node* @size_int_wide(i64 %983, i32 1)
  br label %998

; <label>:985:                                    ; preds = %973
  %986 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %987 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %988 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %987, i32 0, i32 11
  %989 = getelementptr inbounds %struct.args_size, %struct.args_size* %988, i32 0, i32 1
  %990 = load %union.tree_node*, %union.tree_node** %989, align 8
  %991 = call %union.tree_node* @convert(%union.tree_node* %986, %union.tree_node* %990)
  %992 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %993 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %992, i32 0, i32 11
  %994 = getelementptr inbounds %struct.args_size, %struct.args_size* %993, i32 0, i32 0
  %995 = load i64, i64* %994, align 8
  %996 = call %union.tree_node* @size_int_wide(i64 %995, i32 1)
  %997 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %991, %union.tree_node* %996)
  br label %998

; <label>:998:                                    ; preds = %985, %979
  %999 = phi %union.tree_node* [ %984, %979 ], [ %997, %985 ]
  %1000 = call %struct.rtx_def* @expand_expr(%union.tree_node* %999, %struct.rtx_def* null, i32 0, i32 0)
  br label %1001

; <label>:1001:                                   ; preds = %998, %967
  %1002 = phi %struct.rtx_def* [ %972, %967 ], [ %1000, %998 ]
  %1003 = load i32, i32* @x.31
  %1004 = load i32, i32* @y.32
  %1005 = sub i32 %1003, 1
  %1006 = mul i32 %1003, %1005
  %1007 = urem i32 %1006, 2
  %1008 = icmp eq i32 %1007, 0
  %1009 = icmp slt i32 %1004, 10
  %1010 = or i1 %1008, %1009
  br i1 %1010, label %originalBB149, label %originalBB149alteredBB

originalBB149:                                    ; preds = %originalBB149alteredBB, %1001
  store %struct.rtx_def* %1002, %struct.rtx_def** %26, align 8
  %1011 = load i32, i32* @x.31
  %1012 = load i32, i32* @y.32
  %1013 = sub i32 %1011, 1
  %1014 = mul i32 %1011, %1013
  %1015 = urem i32 %1014, 2
  %1016 = icmp eq i32 %1015, 0
  %1017 = icmp slt i32 %1012, 10
  %1018 = or i1 %1016, %1017
  br i1 %1018, label %originalBBpart2151, label %originalBB149alteredBB

originalBBpart2151:                               ; preds = %originalBB149
  br label %1041

; <label>:1019:                                   ; preds = %originalBBpart2143
  %1020 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1021 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1020, i32 0, i32 11
  %1022 = getelementptr inbounds %struct.args_size, %struct.args_size* %1021, i32 0, i32 0
  %1023 = load i64, i64* %1022, align 8
  %1024 = load %union.tree_node*, %union.tree_node** %12, align 8
  %1025 = bitcast %union.tree_node* %1024 to %struct.tree_common*
  %1026 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1025, i32 0, i32 1
  %1027 = load %union.tree_node*, %union.tree_node** %1026, align 8
  %1028 = call i64 @int_size_in_bytes(%union.tree_node* %1027)
  %1029 = sub nsw i64 %1023, %1028
  %1030 = load i32, i32* %14, align 4
  %1031 = load i32, i32* @target_flags, align 4
  %1032 = and i32 %1031, 33554432
  %1033 = icmp ne i32 %1032, 0
  %1034 = select i1 %1033, i32 8, i32 4
  %1035 = mul nsw i32 %1030, %1034
  %1036 = sext i32 %1035 to i64
  %1037 = add nsw i64 %1029, %1036
  %1038 = trunc i64 %1037 to i32
  store i32 %1038, i32* %25, align 4
  %1039 = load %union.tree_node*, %union.tree_node** %12, align 8
  %1040 = call %struct.rtx_def* @expr_size(%union.tree_node* %1039)
  store %struct.rtx_def* %1040, %struct.rtx_def** %26, align 8
  br label %1041

; <label>:1041:                                   ; preds = %1019, %originalBBpart2151
  %1042 = load i32, i32* %9, align 4
  %1043 = and i32 %1042, 256
  %1044 = icmp ne i32 %1043, 0
  br i1 %1044, label %1045, label %1305

; <label>:1045:                                   ; preds = %1041
  %1046 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1047 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1046, i32 0, i32 2
  %1048 = load %struct.rtx_def*, %struct.rtx_def** %1047, align 8
  %1049 = bitcast %struct.rtx_def* %1048 to i32*
  %1050 = load i32, i32* %1049, align 8
  %1051 = and i32 %1050, 65535
  %1052 = icmp eq i32 %1051, 66
  br i1 %1052, label %1053, label %1305

; <label>:1053:                                   ; preds = %1045
  %1054 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1055 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1054, i32 0, i32 2
  %1056 = load %struct.rtx_def*, %struct.rtx_def** %1055, align 8
  store %struct.rtx_def* %1056, %struct.rtx_def** %27, align 8
  store i32 0, i32* %28, align 4
  %1057 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %1058 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1057, i32 0, i32 1
  %1059 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1058, i64 0, i64 0
  %1060 = bitcast %union.rtunion_def* %1059 to %struct.rtx_def**
  %1061 = load %struct.rtx_def*, %struct.rtx_def** %1060, align 8
  %1062 = load %struct.function*, %struct.function** @cfun, align 8
  %1063 = getelementptr inbounds %struct.function, %struct.function* %1062, i32 0, i32 15
  %1064 = load %struct.rtx_def*, %struct.rtx_def** %1063, align 8
  %1065 = icmp eq %struct.rtx_def* %1061, %1064
  br i1 %1065, label %1136, label %1066

; <label>:1066:                                   ; preds = %1053
  %1067 = load i32, i32* @x.31
  %1068 = load i32, i32* @y.32
  %1069 = sub i32 %1067, 1
  %1070 = mul i32 %1067, %1069
  %1071 = urem i32 %1070, 2
  %1072 = icmp eq i32 %1071, 0
  %1073 = icmp slt i32 %1068, 10
  %1074 = or i1 %1072, %1073
  br i1 %1074, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %originalBB153alteredBB, %1066
  %1075 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %1076 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1075, i32 0, i32 1
  %1077 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1076, i64 0, i64 0
  %1078 = bitcast %union.rtunion_def* %1077 to %struct.rtx_def**
  %1079 = load %struct.rtx_def*, %struct.rtx_def** %1078, align 8
  %1080 = bitcast %struct.rtx_def* %1079 to i32*
  %1081 = load i32, i32* %1080, align 8
  %1082 = and i32 %1081, 65535
  %1083 = icmp eq i32 %1082, 75
  %1084 = load i32, i32* @x.31
  %1085 = load i32, i32* @y.32
  %1086 = sub i32 %1084, 1
  %1087 = mul i32 %1084, %1086
  %1088 = urem i32 %1087, 2
  %1089 = icmp eq i32 %1088, 0
  %1090 = icmp slt i32 %1085, 10
  %1091 = or i1 %1089, %1090
  br i1 %1091, label %originalBBpart2160, label %originalBB153alteredBB

originalBBpart2160:                               ; preds = %originalBB153
  br i1 %1083, label %1092, label %1304

; <label>:1092:                                   ; preds = %originalBBpart2160
  %1093 = load i32, i32* @x.31
  %1094 = load i32, i32* @y.32
  %1095 = sub i32 %1093, 1
  %1096 = mul i32 %1093, %1095
  %1097 = urem i32 %1096, 2
  %1098 = icmp eq i32 %1097, 0
  %1099 = icmp slt i32 %1094, 10
  %1100 = or i1 %1098, %1099
  br i1 %1100, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %originalBB162alteredBB, %1092
  %1101 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %1102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1101, i32 0, i32 1
  %1103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1102, i64 0, i64 0
  %1104 = bitcast %union.rtunion_def* %1103 to %struct.rtx_def**
  %1105 = load %struct.rtx_def*, %struct.rtx_def** %1104, align 8
  %1106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1105, i32 0, i32 1
  %1107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1106, i64 0, i64 0
  %1108 = bitcast %union.rtunion_def* %1107 to %struct.rtx_def**
  %1109 = load %struct.rtx_def*, %struct.rtx_def** %1108, align 8
  %1110 = load %struct.function*, %struct.function** @cfun, align 8
  %1111 = getelementptr inbounds %struct.function, %struct.function* %1110, i32 0, i32 15
  %1112 = load %struct.rtx_def*, %struct.rtx_def** %1111, align 8
  %1113 = icmp eq %struct.rtx_def* %1109, %1112
  %1114 = load i32, i32* @x.31
  %1115 = load i32, i32* @y.32
  %1116 = sub i32 %1114, 1
  %1117 = mul i32 %1114, %1116
  %1118 = urem i32 %1117, 2
  %1119 = icmp eq i32 %1118, 0
  %1120 = icmp slt i32 %1115, 10
  %1121 = or i1 %1119, %1120
  br i1 %1121, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br i1 %1113, label %1122, label %1304

; <label>:1122:                                   ; preds = %originalBBpart2164
  %1123 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %1124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1123, i32 0, i32 1
  %1125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1124, i64 0, i64 0
  %1126 = bitcast %union.rtunion_def* %1125 to %struct.rtx_def**
  %1127 = load %struct.rtx_def*, %struct.rtx_def** %1126, align 8
  %1128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1127, i32 0, i32 1
  %1129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1128, i64 0, i64 1
  %1130 = bitcast %union.rtunion_def* %1129 to %struct.rtx_def**
  %1131 = load %struct.rtx_def*, %struct.rtx_def** %1130, align 8
  %1132 = bitcast %struct.rtx_def* %1131 to i32*
  %1133 = load i32, i32* %1132, align 8
  %1134 = and i32 %1133, 65535
  %1135 = icmp eq i32 %1134, 54
  br i1 %1135, label %1136, label %1304

; <label>:1136:                                   ; preds = %1122, %1053
  %1137 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %1138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1137, i32 0, i32 1
  %1139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1138, i64 0, i64 0
  %1140 = bitcast %union.rtunion_def* %1139 to %struct.rtx_def**
  %1141 = load %struct.rtx_def*, %struct.rtx_def** %1140, align 8
  %1142 = load %struct.function*, %struct.function** @cfun, align 8
  %1143 = getelementptr inbounds %struct.function, %struct.function* %1142, i32 0, i32 15
  %1144 = load %struct.rtx_def*, %struct.rtx_def** %1143, align 8
  %1145 = icmp ne %struct.rtx_def* %1141, %1144
  br i1 %1145, label %1146, label %1161

; <label>:1146:                                   ; preds = %1136
  %1147 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %1148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1147, i32 0, i32 1
  %1149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1148, i64 0, i64 0
  %1150 = bitcast %union.rtunion_def* %1149 to %struct.rtx_def**
  %1151 = load %struct.rtx_def*, %struct.rtx_def** %1150, align 8
  %1152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1151, i32 0, i32 1
  %1153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1152, i64 0, i64 1
  %1154 = bitcast %union.rtunion_def* %1153 to %struct.rtx_def**
  %1155 = load %struct.rtx_def*, %struct.rtx_def** %1154, align 8
  %1156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1155, i32 0, i32 1
  %1157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1156, i64 0, i64 0
  %1158 = bitcast %union.rtunion_def* %1157 to i64*
  %1159 = load i64, i64* %1158, align 8
  %1160 = trunc i64 %1159 to i32
  store i32 %1160, i32* %28, align 4
  br label %1161

; <label>:1161:                                   ; preds = %1146, %1136
  %1162 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1163 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1162, i32 0, i32 9
  %1164 = getelementptr inbounds %struct.args_size, %struct.args_size* %1163, i32 0, i32 1
  %1165 = load %union.tree_node*, %union.tree_node** %1164, align 8
  %1166 = icmp ne %union.tree_node* %1165, null
  br i1 %1166, label %1189, label %1167

; <label>:1167:                                   ; preds = %1161
  %1168 = load i32, i32* @x.31
  %1169 = load i32, i32* @y.32
  %1170 = sub i32 %1168, 1
  %1171 = mul i32 %1168, %1170
  %1172 = urem i32 %1171, 2
  %1173 = icmp eq i32 %1172, 0
  %1174 = icmp slt i32 %1169, 10
  %1175 = or i1 %1173, %1174
  br i1 %1175, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %originalBB166alteredBB, %1167
  %1176 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %1177 = bitcast %struct.rtx_def* %1176 to i32*
  %1178 = load i32, i32* %1177, align 8
  %1179 = and i32 %1178, 65535
  %1180 = icmp ne i32 %1179, 54
  %1181 = load i32, i32* @x.31
  %1182 = load i32, i32* @y.32
  %1183 = sub i32 %1181, 1
  %1184 = mul i32 %1181, %1183
  %1185 = urem i32 %1184, 2
  %1186 = icmp eq i32 %1185, 0
  %1187 = icmp slt i32 %1182, 10
  %1188 = or i1 %1186, %1187
  br i1 %1188, label %originalBBpart2176, label %originalBB166alteredBB

originalBBpart2176:                               ; preds = %originalBB166
  br i1 %1180, label %1189, label %1190

; <label>:1189:                                   ; preds = %originalBBpart2176, %1161
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 4515, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.store_one_arg, i32 0, i32 0)) #8
  unreachable

; <label>:1190:                                   ; preds = %originalBBpart2176
  %1191 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1192 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1191, i32 0, i32 9
  %1193 = getelementptr inbounds %struct.args_size, %struct.args_size* %1192, i32 0, i32 0
  %1194 = load i64, i64* %1193, align 8
  %1195 = load i32, i32* %28, align 4
  %1196 = sext i32 %1195 to i64
  %1197 = icmp sgt i64 %1194, %1196
  br i1 %1197, label %1198, label %1246

; <label>:1198:                                   ; preds = %1190
  %1199 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1200 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1199, i32 0, i32 9
  %1201 = getelementptr inbounds %struct.args_size, %struct.args_size* %1200, i32 0, i32 0
  %1202 = load i64, i64* %1201, align 8
  %1203 = load i32, i32* %28, align 4
  %1204 = sext i32 %1203 to i64
  %1205 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %1206 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1205, i32 0, i32 1
  %1207 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1206, i64 0, i64 0
  %1208 = bitcast %union.rtunion_def* %1207 to i64*
  %1209 = load i64, i64* %1208, align 8
  %1210 = add nsw i64 %1204, %1209
  %1211 = icmp slt i64 %1202, %1210
  br i1 %1211, label %1212, label %1229

; <label>:1212:                                   ; preds = %1198
  %1213 = load i32, i32* @x.31
  %1214 = load i32, i32* @y.32
  %1215 = sub i32 %1213, 1
  %1216 = mul i32 %1213, %1215
  %1217 = urem i32 %1216, 2
  %1218 = icmp eq i32 %1217, 0
  %1219 = icmp slt i32 %1214, 10
  %1220 = or i1 %1218, %1219
  br i1 %1220, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %originalBB178alteredBB, %1212
  store i32 1, i32* %19, align 4
  %1221 = load i32, i32* @x.31
  %1222 = load i32, i32* @y.32
  %1223 = sub i32 %1221, 1
  %1224 = mul i32 %1221, %1223
  %1225 = urem i32 %1224, 2
  %1226 = icmp eq i32 %1225, 0
  %1227 = icmp slt i32 %1222, 10
  %1228 = or i1 %1226, %1227
  br i1 %1228, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br label %1229

; <label>:1229:                                   ; preds = %originalBBpart2180, %1198
  %1230 = load i32, i32* @x.31
  %1231 = load i32, i32* @y.32
  %1232 = sub i32 %1230, 1
  %1233 = mul i32 %1230, %1232
  %1234 = urem i32 %1233, 2
  %1235 = icmp eq i32 %1234, 0
  %1236 = icmp slt i32 %1231, 10
  %1237 = or i1 %1235, %1236
  br i1 %1237, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %originalBB182alteredBB, %1229
  %1238 = load i32, i32* @x.31
  %1239 = load i32, i32* @y.32
  %1240 = sub i32 %1238, 1
  %1241 = mul i32 %1238, %1240
  %1242 = urem i32 %1241, 2
  %1243 = icmp eq i32 %1242, 0
  %1244 = icmp slt i32 %1239, 10
  %1245 = or i1 %1243, %1244
  br i1 %1245, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br label %1303

; <label>:1246:                                   ; preds = %1190
  %1247 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1248 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1247, i32 0, i32 9
  %1249 = getelementptr inbounds %struct.args_size, %struct.args_size* %1248, i32 0, i32 0
  %1250 = load i64, i64* %1249, align 8
  %1251 = load i32, i32* %28, align 4
  %1252 = sext i32 %1251 to i64
  %1253 = icmp slt i64 %1250, %1252
  br i1 %1253, label %1254, label %1302

; <label>:1254:                                   ; preds = %1246
  %1255 = load i32, i32* @x.31
  %1256 = load i32, i32* @y.32
  %1257 = sub i32 %1255, 1
  %1258 = mul i32 %1255, %1257
  %1259 = urem i32 %1258, 2
  %1260 = icmp eq i32 %1259, 0
  %1261 = icmp slt i32 %1256, 10
  %1262 = or i1 %1260, %1261
  br i1 %1262, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %originalBB186alteredBB, %1254
  %1263 = load i32, i32* %28, align 4
  %1264 = sext i32 %1263 to i64
  %1265 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1266 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1265, i32 0, i32 9
  %1267 = getelementptr inbounds %struct.args_size, %struct.args_size* %1266, i32 0, i32 0
  %1268 = load i64, i64* %1267, align 8
  %1269 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %1270 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1269, i32 0, i32 1
  %1271 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1270, i64 0, i64 0
  %1272 = bitcast %union.rtunion_def* %1271 to i64*
  %1273 = load i64, i64* %1272, align 8
  %1274 = add nsw i64 %1268, %1273
  %1275 = icmp slt i64 %1264, %1274
  %1276 = load i32, i32* @x.31
  %1277 = load i32, i32* @y.32
  %1278 = sub i32 %1276, 1
  %1279 = mul i32 %1276, %1278
  %1280 = urem i32 %1279, 2
  %1281 = icmp eq i32 %1280, 0
  %1282 = icmp slt i32 %1277, 10
  %1283 = or i1 %1281, %1282
  br i1 %1283, label %originalBBpart2195, label %originalBB186alteredBB

originalBBpart2195:                               ; preds = %originalBB186
  br i1 %1275, label %1284, label %1301

; <label>:1284:                                   ; preds = %originalBBpart2195
  %1285 = load i32, i32* @x.31
  %1286 = load i32, i32* @y.32
  %1287 = sub i32 %1285, 1
  %1288 = mul i32 %1285, %1287
  %1289 = urem i32 %1288, 2
  %1290 = icmp eq i32 %1289, 0
  %1291 = icmp slt i32 %1286, 10
  %1292 = or i1 %1290, %1291
  br i1 %1292, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %originalBB197alteredBB, %1284
  store i32 1, i32* %19, align 4
  %1293 = load i32, i32* @x.31
  %1294 = load i32, i32* @y.32
  %1295 = sub i32 %1293, 1
  %1296 = mul i32 %1293, %1295
  %1297 = urem i32 %1296, 2
  %1298 = icmp eq i32 %1297, 0
  %1299 = icmp slt i32 %1294, 10
  %1300 = or i1 %1298, %1299
  br i1 %1300, label %originalBBpart2199, label %originalBB197alteredBB

originalBBpart2199:                               ; preds = %originalBB197
  br label %1301

; <label>:1301:                                   ; preds = %originalBBpart2199, %originalBBpart2195
  br label %1302

; <label>:1302:                                   ; preds = %1301, %1246
  br label %1303

; <label>:1303:                                   ; preds = %1302, %originalBBpart2184
  br label %1304

; <label>:1304:                                   ; preds = %1303, %1122, %originalBBpart2164, %originalBBpart2160
  br label %1305

; <label>:1305:                                   ; preds = %1304, %1045, %1041
  %1306 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1307 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1306, i32 0, i32 4
  %1308 = load %struct.rtx_def*, %struct.rtx_def** %1307, align 8
  %1309 = icmp ne %struct.rtx_def* %1308, null
  br i1 %1309, label %1310, label %1579

; <label>:1310:                                   ; preds = %1305
  %1311 = load i32, i32* @x.31
  %1312 = load i32, i32* @y.32
  %1313 = sub i32 %1311, 1
  %1314 = mul i32 %1311, %1313
  %1315 = urem i32 %1314, 2
  %1316 = icmp eq i32 %1315, 0
  %1317 = icmp slt i32 %1312, 10
  %1318 = or i1 %1316, %1317
  br i1 %1318, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %originalBB201alteredBB, %1310
  %1319 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1320 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1319, i32 0, i32 8
  %1321 = load i32, i32* %1320, align 8
  %1322 = icmp ne i32 %1321, 0
  %1323 = load i32, i32* @x.31
  %1324 = load i32, i32* @y.32
  %1325 = sub i32 %1323, 1
  %1326 = mul i32 %1323, %1325
  %1327 = urem i32 %1326, 2
  %1328 = icmp eq i32 %1327, 0
  %1329 = icmp slt i32 %1324, 10
  %1330 = or i1 %1328, %1329
  br i1 %1330, label %originalBBpart2203, label %originalBB201alteredBB

originalBBpart2203:                               ; preds = %originalBB201
  br i1 %1322, label %1331, label %1579

; <label>:1331:                                   ; preds = %originalBBpart2203
  %1332 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1333 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1332, i32 0, i32 9
  %1334 = getelementptr inbounds %struct.args_size, %struct.args_size* %1333, i32 0, i32 0
  %1335 = load i64, i64* %1334, align 8
  %1336 = load i32, i32* %11, align 4
  %1337 = sext i32 %1336 to i64
  %1338 = icmp slt i64 %1335, %1337
  br i1 %1338, label %1339, label %1362

; <label>:1339:                                   ; preds = %1331
  %1340 = load i32, i32* @x.31
  %1341 = load i32, i32* @y.32
  %1342 = sub i32 %1340, 1
  %1343 = mul i32 %1340, %1342
  %1344 = urem i32 %1343, 2
  %1345 = icmp eq i32 %1344, 0
  %1346 = icmp slt i32 %1341, 10
  %1347 = or i1 %1345, %1346
  br i1 %1347, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %originalBB205alteredBB, %1339
  %1348 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1349 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1348, i32 0, i32 9
  %1350 = getelementptr inbounds %struct.args_size, %struct.args_size* %1349, i32 0, i32 1
  %1351 = load %union.tree_node*, %union.tree_node** %1350, align 8
  %1352 = icmp ne %union.tree_node* %1351, null
  %1353 = load i32, i32* @x.31
  %1354 = load i32, i32* @y.32
  %1355 = sub i32 %1353, 1
  %1356 = mul i32 %1353, %1355
  %1357 = urem i32 %1356, 2
  %1358 = icmp eq i32 %1357, 0
  %1359 = icmp slt i32 %1354, 10
  %1360 = or i1 %1358, %1359
  br i1 %1360, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  br i1 %1352, label %1361, label %1362

; <label>:1361:                                   ; preds = %originalBBpart2207
  call void (i8*, ...) @error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.21, i32 0, i32 0))
  br label %1578

; <label>:1362:                                   ; preds = %originalBBpart2207, %1331
  %1363 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1364 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1363, i32 0, i32 9
  %1365 = getelementptr inbounds %struct.args_size, %struct.args_size* %1364, i32 0, i32 0
  %1366 = load i64, i64* %1365, align 8
  %1367 = load i32, i32* %11, align 4
  %1368 = sext i32 %1367 to i64
  %1369 = icmp slt i64 %1366, %1368
  br i1 %1369, label %1370, label %1409

; <label>:1370:                                   ; preds = %1362
  %1371 = load i32, i32* @x.31
  %1372 = load i32, i32* @y.32
  %1373 = sub i32 %1371, 1
  %1374 = mul i32 %1371, %1373
  %1375 = urem i32 %1374, 2
  %1376 = icmp eq i32 %1375, 0
  %1377 = icmp slt i32 %1372, 10
  %1378 = or i1 %1376, %1377
  br i1 %1378, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %originalBB209alteredBB, %1370
  %1379 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1380 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1379, i32 0, i32 11
  %1381 = getelementptr inbounds %struct.args_size, %struct.args_size* %1380, i32 0, i32 1
  %1382 = load %union.tree_node*, %union.tree_node** %1381, align 8
  %1383 = icmp ne %union.tree_node* %1382, null
  %1384 = load i32, i32* @x.31
  %1385 = load i32, i32* @y.32
  %1386 = sub i32 %1384, 1
  %1387 = mul i32 %1384, %1386
  %1388 = urem i32 %1387, 2
  %1389 = icmp eq i32 %1388, 0
  %1390 = icmp slt i32 %1385, 10
  %1391 = or i1 %1389, %1390
  br i1 %1391, label %originalBBpart2211, label %originalBB209alteredBB

originalBBpart2211:                               ; preds = %originalBB209
  br i1 %1383, label %1392, label %1409

; <label>:1392:                                   ; preds = %originalBBpart2211
  %1393 = load i32, i32* @x.31
  %1394 = load i32, i32* @y.32
  %1395 = sub i32 %1393, 1
  %1396 = mul i32 %1393, %1395
  %1397 = urem i32 %1396, 2
  %1398 = icmp eq i32 %1397, 0
  %1399 = icmp slt i32 %1394, 10
  %1400 = or i1 %1398, %1399
  br i1 %1400, label %originalBB213, label %originalBB213alteredBB

originalBB213:                                    ; preds = %originalBB213alteredBB, %1392
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.22, i32 0, i32 0))
  %1401 = load i32, i32* @x.31
  %1402 = load i32, i32* @y.32
  %1403 = sub i32 %1401, 1
  %1404 = mul i32 %1401, %1403
  %1405 = urem i32 %1404, 2
  %1406 = icmp eq i32 %1405, 0
  %1407 = icmp slt i32 %1402, 10
  %1408 = or i1 %1406, %1407
  br i1 %1408, label %originalBBpart2216, label %originalBB213alteredBB

originalBBpart2216:                               ; preds = %originalBB213
  br label %1577

; <label>:1409:                                   ; preds = %originalBBpart2211, %1362
  %1410 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1411 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1410, i32 0, i32 9
  %1412 = getelementptr inbounds %struct.args_size, %struct.args_size* %1411, i32 0, i32 0
  %1413 = load i64, i64* %1412, align 8
  %1414 = load i32, i32* %11, align 4
  %1415 = sext i32 %1414 to i64
  %1416 = icmp slt i64 %1413, %1415
  br i1 %1416, label %1417, label %1576

; <label>:1417:                                   ; preds = %1409
  %1418 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1419 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1418, i32 0, i32 9
  %1420 = getelementptr inbounds %struct.args_size, %struct.args_size* %1419, i32 0, i32 0
  %1421 = load i64, i64* %1420, align 8
  %1422 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1423 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1422, i32 0, i32 11
  %1424 = getelementptr inbounds %struct.args_size, %struct.args_size* %1423, i32 0, i32 0
  %1425 = load i64, i64* %1424, align 8
  %1426 = add nsw i64 %1421, %1425
  %1427 = load i32, i32* %11, align 4
  %1428 = sext i32 %1427 to i64
  %1429 = icmp sgt i64 %1426, %1428
  br i1 %1429, label %1430, label %1576

; <label>:1430:                                   ; preds = %1417
  %1431 = load i32, i32* %11, align 4
  %1432 = sext i32 %1431 to i64
  %1433 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1434 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1433, i32 0, i32 9
  %1435 = getelementptr inbounds %struct.args_size, %struct.args_size* %1434, i32 0, i32 0
  %1436 = load i64, i64* %1435, align 8
  %1437 = sub nsw i64 %1432, %1436
  %1438 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1437)
  store %struct.rtx_def* %1438, %struct.rtx_def** %29, align 8
  %1439 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1440 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1439, i32 0, i32 2
  %1441 = load %struct.rtx_def*, %struct.rtx_def** %1440, align 8
  %1442 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1443 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1442, i32 0, i32 1
  %1444 = load i32, i32* %1443, align 8
  %1445 = load %union.tree_node*, %union.tree_node** %12, align 8
  %1446 = bitcast %union.tree_node* %1445 to %struct.tree_common*
  %1447 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1446, i32 0, i32 1
  %1448 = load %union.tree_node*, %union.tree_node** %1447, align 8
  %1449 = load %struct.rtx_def*, %struct.rtx_def** %29, align 8
  %1450 = load %union.tree_node*, %union.tree_node** %12, align 8
  %1451 = bitcast %union.tree_node* %1450 to %struct.tree_common*
  %1452 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1451, i32 0, i32 1
  %1453 = load %union.tree_node*, %union.tree_node** %1452, align 8
  %1454 = bitcast %union.tree_node* %1453 to %struct.tree_type*
  %1455 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1454, i32 0, i32 7
  %1456 = load i32, i32* %1455, align 8
  %1457 = load i32, i32* %14, align 4
  %1458 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %1459 = load i32, i32* %25, align 4
  %1460 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %1461 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1462 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1461, i32 0, i32 9
  %1463 = getelementptr inbounds %struct.args_size, %struct.args_size* %1462, i32 0, i32 1
  %1464 = load %union.tree_node*, %union.tree_node** %1463, align 8
  %1465 = icmp eq %union.tree_node* %1464, null
  br i1 %1465, label %1466, label %1472

; <label>:1466:                                   ; preds = %1430
  %1467 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1468 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1467, i32 0, i32 9
  %1469 = getelementptr inbounds %struct.args_size, %struct.args_size* %1468, i32 0, i32 0
  %1470 = load i64, i64* %1469, align 8
  %1471 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1470)
  br label %1516

; <label>:1472:                                   ; preds = %1430
  %1473 = load i32, i32* @x.31
  %1474 = load i32, i32* @y.32
  %1475 = sub i32 %1473, 1
  %1476 = mul i32 %1473, %1475
  %1477 = urem i32 %1476, 2
  %1478 = icmp eq i32 %1477, 0
  %1479 = icmp slt i32 %1474, 10
  %1480 = or i1 %1478, %1479
  br i1 %1480, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %originalBB218alteredBB, %1472
  %1481 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1482 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1481, i32 0, i32 9
  %1483 = getelementptr inbounds %struct.args_size, %struct.args_size* %1482, i32 0, i32 1
  %1484 = load %union.tree_node*, %union.tree_node** %1483, align 8
  %1485 = icmp eq %union.tree_node* %1484, null
  %1486 = load i32, i32* @x.31
  %1487 = load i32, i32* @y.32
  %1488 = sub i32 %1486, 1
  %1489 = mul i32 %1486, %1488
  %1490 = urem i32 %1489, 2
  %1491 = icmp eq i32 %1490, 0
  %1492 = icmp slt i32 %1487, 10
  %1493 = or i1 %1491, %1492
  br i1 %1493, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br i1 %1485, label %1494, label %1500

; <label>:1494:                                   ; preds = %originalBBpart2220
  %1495 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1496 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1495, i32 0, i32 9
  %1497 = getelementptr inbounds %struct.args_size, %struct.args_size* %1496, i32 0, i32 0
  %1498 = load i64, i64* %1497, align 8
  %1499 = call %union.tree_node* @size_int_wide(i64 %1498, i32 1)
  br label %1513

; <label>:1500:                                   ; preds = %originalBBpart2220
  %1501 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1502 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1503 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1502, i32 0, i32 9
  %1504 = getelementptr inbounds %struct.args_size, %struct.args_size* %1503, i32 0, i32 1
  %1505 = load %union.tree_node*, %union.tree_node** %1504, align 8
  %1506 = call %union.tree_node* @convert(%union.tree_node* %1501, %union.tree_node* %1505)
  %1507 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1508 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1507, i32 0, i32 9
  %1509 = getelementptr inbounds %struct.args_size, %struct.args_size* %1508, i32 0, i32 0
  %1510 = load i64, i64* %1509, align 8
  %1511 = call %union.tree_node* @size_int_wide(i64 %1510, i32 1)
  %1512 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1506, %union.tree_node* %1511)
  br label %1513

; <label>:1513:                                   ; preds = %1500, %1494
  %1514 = phi %union.tree_node* [ %1499, %1494 ], [ %1512, %1500 ]
  %1515 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1514, %struct.rtx_def* null, i32 0, i32 0)
  br label %1516

; <label>:1516:                                   ; preds = %1513, %1466
  %1517 = phi %struct.rtx_def* [ %1471, %1466 ], [ %1515, %1513 ]
  %1518 = load i32, i32* %11, align 4
  %1519 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1520 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1519, i32 0, i32 17
  %1521 = getelementptr inbounds %struct.args_size, %struct.args_size* %1520, i32 0, i32 1
  %1522 = load %union.tree_node*, %union.tree_node** %1521, align 8
  %1523 = icmp eq %union.tree_node* %1522, null
  br i1 %1523, label %1524, label %1530

; <label>:1524:                                   ; preds = %1516
  %1525 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1526 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1525, i32 0, i32 17
  %1527 = getelementptr inbounds %struct.args_size, %struct.args_size* %1526, i32 0, i32 0
  %1528 = load i64, i64* %1527, align 8
  %1529 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1528)
  br label %1574

; <label>:1530:                                   ; preds = %1516
  %1531 = load i32, i32* @x.31
  %1532 = load i32, i32* @y.32
  %1533 = sub i32 %1531, 1
  %1534 = mul i32 %1531, %1533
  %1535 = urem i32 %1534, 2
  %1536 = icmp eq i32 %1535, 0
  %1537 = icmp slt i32 %1532, 10
  %1538 = or i1 %1536, %1537
  br i1 %1538, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %originalBB222alteredBB, %1530
  %1539 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1540 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1539, i32 0, i32 17
  %1541 = getelementptr inbounds %struct.args_size, %struct.args_size* %1540, i32 0, i32 1
  %1542 = load %union.tree_node*, %union.tree_node** %1541, align 8
  %1543 = icmp eq %union.tree_node* %1542, null
  %1544 = load i32, i32* @x.31
  %1545 = load i32, i32* @y.32
  %1546 = sub i32 %1544, 1
  %1547 = mul i32 %1544, %1546
  %1548 = urem i32 %1547, 2
  %1549 = icmp eq i32 %1548, 0
  %1550 = icmp slt i32 %1545, 10
  %1551 = or i1 %1549, %1550
  br i1 %1551, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %1543, label %1552, label %1558

; <label>:1552:                                   ; preds = %originalBBpart2224
  %1553 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1554 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1553, i32 0, i32 17
  %1555 = getelementptr inbounds %struct.args_size, %struct.args_size* %1554, i32 0, i32 0
  %1556 = load i64, i64* %1555, align 8
  %1557 = call %union.tree_node* @size_int_wide(i64 %1556, i32 1)
  br label %1571

; <label>:1558:                                   ; preds = %originalBBpart2224
  %1559 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1560 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1561 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1560, i32 0, i32 17
  %1562 = getelementptr inbounds %struct.args_size, %struct.args_size* %1561, i32 0, i32 1
  %1563 = load %union.tree_node*, %union.tree_node** %1562, align 8
  %1564 = call %union.tree_node* @convert(%union.tree_node* %1559, %union.tree_node* %1563)
  %1565 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1566 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1565, i32 0, i32 17
  %1567 = getelementptr inbounds %struct.args_size, %struct.args_size* %1566, i32 0, i32 0
  %1568 = load i64, i64* %1567, align 8
  %1569 = call %union.tree_node* @size_int_wide(i64 %1568, i32 1)
  %1570 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1564, %union.tree_node* %1569)
  br label %1571

; <label>:1571:                                   ; preds = %1558, %1552
  %1572 = phi %union.tree_node* [ %1557, %1552 ], [ %1570, %1558 ]
  %1573 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1572, %struct.rtx_def* null, i32 0, i32 0)
  br label %1574

; <label>:1574:                                   ; preds = %1571, %1524
  %1575 = phi %struct.rtx_def* [ %1529, %1524 ], [ %1573, %1571 ]
  call void @emit_push_insn(%struct.rtx_def* %1441, i32 %1444, %union.tree_node* %1448, %struct.rtx_def* %1449, i32 %1456, i32 %1457, %struct.rtx_def* %1458, i32 %1459, %struct.rtx_def* %1460, %struct.rtx_def* %1517, i32 %1518, %struct.rtx_def* %1575)
  br label %1576

; <label>:1576:                                   ; preds = %1574, %1417, %1409
  br label %1577

; <label>:1577:                                   ; preds = %1576, %originalBBpart2216
  br label %1578

; <label>:1578:                                   ; preds = %1577, %1361
  br label %1579

; <label>:1579:                                   ; preds = %1578, %originalBBpart2203, %1305
  %1580 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1581 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1580, i32 0, i32 2
  %1582 = load %struct.rtx_def*, %struct.rtx_def** %1581, align 8
  %1583 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1584 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1583, i32 0, i32 1
  %1585 = load i32, i32* %1584, align 8
  %1586 = load %union.tree_node*, %union.tree_node** %12, align 8
  %1587 = bitcast %union.tree_node* %1586 to %struct.tree_common*
  %1588 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1587, i32 0, i32 1
  %1589 = load %union.tree_node*, %union.tree_node** %1588, align 8
  %1590 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %1591 = load %union.tree_node*, %union.tree_node** %12, align 8
  %1592 = bitcast %union.tree_node* %1591 to %struct.tree_common*
  %1593 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1592, i32 0, i32 1
  %1594 = load %union.tree_node*, %union.tree_node** %1593, align 8
  %1595 = bitcast %union.tree_node* %1594 to %struct.tree_type*
  %1596 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1595, i32 0, i32 7
  %1597 = load i32, i32* %1596, align 8
  %1598 = load i32, i32* %14, align 4
  %1599 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %1600 = load i32, i32* %25, align 4
  %1601 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %1602 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1603 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1602, i32 0, i32 9
  %1604 = getelementptr inbounds %struct.args_size, %struct.args_size* %1603, i32 0, i32 1
  %1605 = load %union.tree_node*, %union.tree_node** %1604, align 8
  %1606 = icmp eq %union.tree_node* %1605, null
  br i1 %1606, label %1607, label %1629

; <label>:1607:                                   ; preds = %1579
  %1608 = load i32, i32* @x.31
  %1609 = load i32, i32* @y.32
  %1610 = sub i32 %1608, 1
  %1611 = mul i32 %1608, %1610
  %1612 = urem i32 %1611, 2
  %1613 = icmp eq i32 %1612, 0
  %1614 = icmp slt i32 %1609, 10
  %1615 = or i1 %1613, %1614
  br i1 %1615, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %originalBB226alteredBB, %1607
  %1616 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1617 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1616, i32 0, i32 9
  %1618 = getelementptr inbounds %struct.args_size, %struct.args_size* %1617, i32 0, i32 0
  %1619 = load i64, i64* %1618, align 8
  %1620 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1619)
  %1621 = load i32, i32* @x.31
  %1622 = load i32, i32* @y.32
  %1623 = sub i32 %1621, 1
  %1624 = mul i32 %1621, %1623
  %1625 = urem i32 %1624, 2
  %1626 = icmp eq i32 %1625, 0
  %1627 = icmp slt i32 %1622, 10
  %1628 = or i1 %1626, %1627
  br i1 %1628, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br label %1657

; <label>:1629:                                   ; preds = %1579
  %1630 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1631 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1630, i32 0, i32 9
  %1632 = getelementptr inbounds %struct.args_size, %struct.args_size* %1631, i32 0, i32 1
  %1633 = load %union.tree_node*, %union.tree_node** %1632, align 8
  %1634 = icmp eq %union.tree_node* %1633, null
  br i1 %1634, label %1635, label %1641

; <label>:1635:                                   ; preds = %1629
  %1636 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1637 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1636, i32 0, i32 9
  %1638 = getelementptr inbounds %struct.args_size, %struct.args_size* %1637, i32 0, i32 0
  %1639 = load i64, i64* %1638, align 8
  %1640 = call %union.tree_node* @size_int_wide(i64 %1639, i32 1)
  br label %1654

; <label>:1641:                                   ; preds = %1629
  %1642 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1643 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1644 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1643, i32 0, i32 9
  %1645 = getelementptr inbounds %struct.args_size, %struct.args_size* %1644, i32 0, i32 1
  %1646 = load %union.tree_node*, %union.tree_node** %1645, align 8
  %1647 = call %union.tree_node* @convert(%union.tree_node* %1642, %union.tree_node* %1646)
  %1648 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1649 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1648, i32 0, i32 9
  %1650 = getelementptr inbounds %struct.args_size, %struct.args_size* %1649, i32 0, i32 0
  %1651 = load i64, i64* %1650, align 8
  %1652 = call %union.tree_node* @size_int_wide(i64 %1651, i32 1)
  %1653 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1647, %union.tree_node* %1652)
  br label %1654

; <label>:1654:                                   ; preds = %1641, %1635
  %1655 = phi %union.tree_node* [ %1640, %1635 ], [ %1653, %1641 ]
  %1656 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1655, %struct.rtx_def* null, i32 0, i32 0)
  br label %1657

; <label>:1657:                                   ; preds = %1654, %originalBBpart2228
  %1658 = phi %struct.rtx_def* [ %1620, %originalBBpart2228 ], [ %1656, %1654 ]
  %1659 = load i32, i32* @x.31
  %1660 = load i32, i32* @y.32
  %1661 = sub i32 %1659, 1
  %1662 = mul i32 %1659, %1661
  %1663 = urem i32 %1662, 2
  %1664 = icmp eq i32 %1663, 0
  %1665 = icmp slt i32 %1660, 10
  %1666 = or i1 %1664, %1665
  br i1 %1666, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %originalBB230alteredBB, %1657
  %1667 = load i32, i32* %11, align 4
  %1668 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1669 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1668, i32 0, i32 17
  %1670 = getelementptr inbounds %struct.args_size, %struct.args_size* %1669, i32 0, i32 1
  %1671 = load %union.tree_node*, %union.tree_node** %1670, align 8
  %1672 = icmp eq %union.tree_node* %1671, null
  %1673 = load i32, i32* @x.31
  %1674 = load i32, i32* @y.32
  %1675 = sub i32 %1673, 1
  %1676 = mul i32 %1673, %1675
  %1677 = urem i32 %1676, 2
  %1678 = icmp eq i32 %1677, 0
  %1679 = icmp slt i32 %1674, 10
  %1680 = or i1 %1678, %1679
  br i1 %1680, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br i1 %1672, label %1681, label %1703

; <label>:1681:                                   ; preds = %originalBBpart2232
  %1682 = load i32, i32* @x.31
  %1683 = load i32, i32* @y.32
  %1684 = sub i32 %1682, 1
  %1685 = mul i32 %1682, %1684
  %1686 = urem i32 %1685, 2
  %1687 = icmp eq i32 %1686, 0
  %1688 = icmp slt i32 %1683, 10
  %1689 = or i1 %1687, %1688
  br i1 %1689, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %originalBB234alteredBB, %1681
  %1690 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1691 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1690, i32 0, i32 17
  %1692 = getelementptr inbounds %struct.args_size, %struct.args_size* %1691, i32 0, i32 0
  %1693 = load i64, i64* %1692, align 8
  %1694 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1693)
  %1695 = load i32, i32* @x.31
  %1696 = load i32, i32* @y.32
  %1697 = sub i32 %1695, 1
  %1698 = mul i32 %1695, %1697
  %1699 = urem i32 %1698, 2
  %1700 = icmp eq i32 %1699, 0
  %1701 = icmp slt i32 %1696, 10
  %1702 = or i1 %1700, %1701
  br i1 %1702, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br label %1763

; <label>:1703:                                   ; preds = %originalBBpart2232
  %1704 = load i32, i32* @x.31
  %1705 = load i32, i32* @y.32
  %1706 = sub i32 %1704, 1
  %1707 = mul i32 %1704, %1706
  %1708 = urem i32 %1707, 2
  %1709 = icmp eq i32 %1708, 0
  %1710 = icmp slt i32 %1705, 10
  %1711 = or i1 %1709, %1710
  br i1 %1711, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %originalBB238alteredBB, %1703
  %1712 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1713 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1712, i32 0, i32 17
  %1714 = getelementptr inbounds %struct.args_size, %struct.args_size* %1713, i32 0, i32 1
  %1715 = load %union.tree_node*, %union.tree_node** %1714, align 8
  %1716 = icmp eq %union.tree_node* %1715, null
  %1717 = load i32, i32* @x.31
  %1718 = load i32, i32* @y.32
  %1719 = sub i32 %1717, 1
  %1720 = mul i32 %1717, %1719
  %1721 = urem i32 %1720, 2
  %1722 = icmp eq i32 %1721, 0
  %1723 = icmp slt i32 %1718, 10
  %1724 = or i1 %1722, %1723
  br i1 %1724, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br i1 %1716, label %1725, label %1731

; <label>:1725:                                   ; preds = %originalBBpart2240
  %1726 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1727 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1726, i32 0, i32 17
  %1728 = getelementptr inbounds %struct.args_size, %struct.args_size* %1727, i32 0, i32 0
  %1729 = load i64, i64* %1728, align 8
  %1730 = call %union.tree_node* @size_int_wide(i64 %1729, i32 1)
  br label %1744

; <label>:1731:                                   ; preds = %originalBBpart2240
  %1732 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1733 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1734 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1733, i32 0, i32 17
  %1735 = getelementptr inbounds %struct.args_size, %struct.args_size* %1734, i32 0, i32 1
  %1736 = load %union.tree_node*, %union.tree_node** %1735, align 8
  %1737 = call %union.tree_node* @convert(%union.tree_node* %1732, %union.tree_node* %1736)
  %1738 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1739 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1738, i32 0, i32 17
  %1740 = getelementptr inbounds %struct.args_size, %struct.args_size* %1739, i32 0, i32 0
  %1741 = load i64, i64* %1740, align 8
  %1742 = call %union.tree_node* @size_int_wide(i64 %1741, i32 1)
  %1743 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1737, %union.tree_node* %1742)
  br label %1744

; <label>:1744:                                   ; preds = %1731, %1725
  %1745 = phi %union.tree_node* [ %1730, %1725 ], [ %1743, %1731 ]
  %1746 = load i32, i32* @x.31
  %1747 = load i32, i32* @y.32
  %1748 = sub i32 %1746, 1
  %1749 = mul i32 %1746, %1748
  %1750 = urem i32 %1749, 2
  %1751 = icmp eq i32 %1750, 0
  %1752 = icmp slt i32 %1747, 10
  %1753 = or i1 %1751, %1752
  br i1 %1753, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %originalBB242alteredBB, %1744
  %1754 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1745, %struct.rtx_def* null, i32 0, i32 0)
  %1755 = load i32, i32* @x.31
  %1756 = load i32, i32* @y.32
  %1757 = sub i32 %1755, 1
  %1758 = mul i32 %1755, %1757
  %1759 = urem i32 %1758, 2
  %1760 = icmp eq i32 %1759, 0
  %1761 = icmp slt i32 %1756, 10
  %1762 = or i1 %1760, %1761
  br i1 %1762, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br label %1763

; <label>:1763:                                   ; preds = %originalBBpart2244, %originalBBpart2236
  %1764 = phi %struct.rtx_def* [ %1694, %originalBBpart2236 ], [ %1754, %originalBBpart2244 ]
  %1765 = load i32, i32* @x.31
  %1766 = load i32, i32* @y.32
  %1767 = sub i32 %1765, 1
  %1768 = mul i32 %1765, %1767
  %1769 = urem i32 %1768, 2
  %1770 = icmp eq i32 %1769, 0
  %1771 = icmp slt i32 %1766, 10
  %1772 = or i1 %1770, %1771
  br i1 %1772, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %originalBB246alteredBB, %1763
  call void @emit_push_insn(%struct.rtx_def* %1582, i32 %1585, %union.tree_node* %1589, %struct.rtx_def* %1590, i32 %1597, i32 %1598, %struct.rtx_def* %1599, i32 %1600, %struct.rtx_def* %1601, %struct.rtx_def* %1658, i32 %1667, %struct.rtx_def* %1764)
  %1773 = load i32, i32* %14, align 4
  %1774 = icmp eq i32 %1773, 0
  %1775 = load i32, i32* @x.31
  %1776 = load i32, i32* @y.32
  %1777 = sub i32 %1775, 1
  %1778 = mul i32 %1775, %1777
  %1779 = urem i32 %1778, 2
  %1780 = icmp eq i32 %1779, 0
  %1781 = icmp slt i32 %1776, 10
  %1782 = or i1 %1780, %1781
  br i1 %1782, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br i1 %1774, label %1783, label %1805

; <label>:1783:                                   ; preds = %originalBBpart2248
  %1784 = load i32, i32* @x.31
  %1785 = load i32, i32* @y.32
  %1786 = sub i32 %1784, 1
  %1787 = mul i32 %1784, %1786
  %1788 = urem i32 %1787, 2
  %1789 = icmp eq i32 %1788, 0
  %1790 = icmp slt i32 %1785, 10
  %1791 = or i1 %1789, %1790
  br i1 %1791, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %originalBB250alteredBB, %1783
  %1792 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1793 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1792, i32 0, i32 13
  %1794 = load %struct.rtx_def*, %struct.rtx_def** %1793, align 8
  %1795 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1796 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1795, i32 0, i32 2
  store %struct.rtx_def* %1794, %struct.rtx_def** %1796, align 8
  %1797 = load i32, i32* @x.31
  %1798 = load i32, i32* @y.32
  %1799 = sub i32 %1797, 1
  %1800 = mul i32 %1797, %1799
  %1801 = urem i32 %1800, 2
  %1802 = icmp eq i32 %1801, 0
  %1803 = icmp slt i32 %1798, 10
  %1804 = or i1 %1802, %1803
  br i1 %1804, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br label %1805

; <label>:1805:                                   ; preds = %originalBBpart2252, %originalBBpart2248
  %1806 = load i32, i32* @x.31
  %1807 = load i32, i32* @y.32
  %1808 = sub i32 %1806, 1
  %1809 = mul i32 %1806, %1808
  %1810 = urem i32 %1809, 2
  %1811 = icmp eq i32 %1810, 0
  %1812 = icmp slt i32 %1807, 10
  %1813 = or i1 %1811, %1812
  br i1 %1813, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %originalBB254alteredBB, %1805
  %1814 = load i32, i32* @x.31
  %1815 = load i32, i32* @y.32
  %1816 = sub i32 %1814, 1
  %1817 = mul i32 %1814, %1816
  %1818 = urem i32 %1817, 2
  %1819 = icmp eq i32 %1818, 0
  %1820 = icmp slt i32 %1815, 10
  %1821 = or i1 %1819, %1820
  br i1 %1821, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br label %1822

; <label>:1822:                                   ; preds = %originalBBpart2256, %922
  %1823 = load i32, i32* @x.31
  %1824 = load i32, i32* @y.32
  %1825 = sub i32 %1823, 1
  %1826 = mul i32 %1823, %1825
  %1827 = urem i32 %1826, 2
  %1828 = icmp eq i32 %1827, 0
  %1829 = icmp slt i32 %1824, 10
  %1830 = or i1 %1828, %1829
  br i1 %1830, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %originalBB258alteredBB, %1822
  %1831 = load i32, i32* @x.31
  %1832 = load i32, i32* @y.32
  %1833 = sub i32 %1831, 1
  %1834 = mul i32 %1831, %1833
  %1835 = urem i32 %1834, 2
  %1836 = icmp eq i32 %1835, 0
  %1837 = icmp slt i32 %1832, 10
  %1838 = or i1 %1836, %1837
  br i1 %1838, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br label %1839

; <label>:1839:                                   ; preds = %originalBBpart2260, %687
  %1840 = load %struct.function*, %struct.function** @cfun, align 8
  %1841 = getelementptr inbounds %struct.function, %struct.function* %1840, i32 0, i32 2
  %1842 = load %struct.expr_status*, %struct.expr_status** %1841, align 8
  %1843 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1842, i32 0, i32 1
  %1844 = load i32, i32* %1843, align 4
  %1845 = add nsw i32 %1844, 1
  store i32 %1845, i32* %1843, align 4
  call void @emit_queue()
  call void @preserve_temp_slots(%struct.rtx_def* null)
  call void @free_temp_slots()
  call void @pop_temp_slots()
  %1846 = load i32, i32* %19, align 4
  store i32 %1846, i32* %6, align 4
  br label %1847

; <label>:1847:                                   ; preds = %1839, %39
  %1848 = load i32, i32* %6, align 4
  ret i32 %1848

originalBBalteredBB:                              ; preds = %originalBB, %51
  %1849 = load i32, i32* %10, align 4
  %1850 = icmp ne i32 %1849, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %104
  store i32 0, i32* %17, align 4
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %121
  %1851 = load i32, i32* %17, align 4
  %1852 = sext i32 %1851 to i64
  %1853 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1854 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1853, i32 0, i32 11
  %1855 = getelementptr inbounds %struct.args_size, %struct.args_size* %1854, i32 0, i32 0
  %1856 = load i64, i64* %1855, align 8
  %_ = sub i64 %1852, %1856
  %gen = mul i64 %_, %1856
  %_7 = sub i64 %1852, %1856
  %gen8 = mul i64 %_7, %1856
  %_9 = sub i64 0, %1852
  %gen10 = add i64 %_9, %1856
  %_11 = shl i64 %1852, %1856
  %1857 = add nsw i64 %1852, %1856
  %1858 = trunc i64 %1857 to i32
  store i32 %1858, i32* %18, align 4
  %1859 = load i32, i32* %17, align 4
  store i32 %1859, i32* %16, align 4
  br label %originalBB6

originalBB15alteredBB:                            ; preds = %originalBB15, %147
  %1860 = load i32, i32* %16, align 4
  %1861 = load i32, i32* %18, align 4
  %1862 = icmp slt i32 %1860, %1861
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %175
  %1863 = load i32, i32* %16, align 4
  %1864 = load i32, i32* %11, align 4
  %1865 = icmp sgt i32 %1863, %1864
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %204
  %1866 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1867 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1866, i32 0, i32 11
  %1868 = getelementptr inbounds %struct.args_size, %struct.args_size* %1867, i32 0, i32 0
  %1869 = load i64, i64* %1868, align 8
  %_24 = sub i64 0, %1869
  %gen25 = add i64 %_24, 8
  %_26 = sub i64 %1869, 8
  %gen27 = mul i64 %_26, 8
  %_28 = sub i64 0, %1869
  %gen29 = add i64 %_28, 8
  %_30 = sub i64 0, %1869
  %gen31 = add i64 %_30, 8
  %_32 = shl i64 %1869, 8
  %_33 = sub i64 %1869, 8
  %gen34 = mul i64 %_33, 8
  %_35 = sub i64 0, %1869
  %gen36 = add i64 %_35, 8
  %_37 = shl i64 %1869, 8
  %_38 = shl i64 %1869, 8
  %1870 = mul nsw i64 %1869, 8
  %1871 = trunc i64 %1870 to i32
  %1872 = call i32 @mode_for_size(i32 %1871, i32 1, i32 1)
  store i32 %1872, i32* %20, align 4
  %1873 = load i32, i32* %20, align 4
  %1874 = load i32, i32* %20, align 4
  %1875 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1876 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1875, i32 0, i32 13
  %1877 = load %struct.rtx_def*, %struct.rtx_def** %1876, align 8
  %1878 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1877, i32 0, i32 1
  %1879 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1878, i64 0, i64 0
  %1880 = bitcast %union.rtunion_def* %1879 to %struct.rtx_def**
  %1881 = load %struct.rtx_def*, %struct.rtx_def** %1880, align 8
  %1882 = call %struct.rtx_def* @memory_address(i32 %1874, %struct.rtx_def* %1881)
  %1883 = call %struct.rtx_def* @gen_rtx_MEM(i32 %1873, %struct.rtx_def* %1882)
  store %struct.rtx_def* %1883, %struct.rtx_def** %21, align 8
  %1884 = load i32, i32* %20, align 4
  %1885 = icmp eq i32 %1884, 51
  br label %originalBB23

originalBB42alteredBB:                            ; preds = %originalBB42, %278
  %1886 = load %union.tree_node*, %union.tree_node** %22, align 8
  %1887 = bitcast %union.tree_node* %1886 to %struct.tree_common*
  %1888 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1887, i32 0, i32 1
  %1889 = load %union.tree_node*, %union.tree_node** %1888, align 8
  %1890 = icmp ne %union.tree_node* %1889, null
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %336
  %1891 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %1892 = icmp ne %struct.rtx_def* %1891, null
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %355
  %1893 = load i32, i32* %10, align 4
  %1894 = icmp ne i32 %1893, 0
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %379
  %1895 = load i32, i32* %17, align 4
  store i32 %1895, i32* %16, align 4
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %401
  %1896 = load i8*, i8** @stack_usage_map, align 8
  %1897 = load i32, i32* %16, align 4
  %1898 = sext i32 %1897 to i64
  %1899 = getelementptr inbounds i8, i8* %1896, i64 %1898
  store i8 1, i8* %1899, align 1
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %422
  %1900 = load i32, i32* %16, align 4
  %_63 = sub i32 %1900, 1
  %gen64 = mul i32 %_63, 1
  %_65 = sub i32 %1900, 1
  %gen66 = mul i32 %_65, 1
  %_67 = sub i32 %1900, 1
  %gen68 = mul i32 %_67, 1
  %_69 = shl i32 %1900, 1
  %_70 = shl i32 %1900, 1
  %1901 = add nsw i32 %1900, 1
  store i32 %1901, i32* %16, align 4
  br label %originalBB62

originalBB74alteredBB:                            ; preds = %originalBB74, %441
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %468
  %1902 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1903 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1902, i32 0, i32 5
  %1904 = load %struct.rtx_def*, %struct.rtx_def** %1903, align 8
  store %struct.rtx_def* %1904, %struct.rtx_def** %13, align 8
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %502
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 4370, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.store_one_arg, i32 0, i32 0)) #8
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %524
  store %struct.rtx_def* null, %struct.rtx_def** %13, align 8
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %551
  %1905 = load i32, i32* @stack_arg_under_construction, align 4
  %_91 = sub i32 %1905, 1
  %gen92 = mul i32 %_91, 1
  %_93 = shl i32 %1905, 1
  %1906 = add nsw i32 %1905, 1
  store i32 %1906, i32* @stack_arg_under_construction, align 4
  br label %originalBB90

originalBB97alteredBB:                            ; preds = %originalBB97, %633
  %1907 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1908 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1907, i32 0, i32 8
  %1909 = load i32, i32* %1908, align 8
  %1910 = icmp ne i32 %1909, 0
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %654
  %1911 = load i32, i32* @stack_arg_under_construction, align 4
  %_102 = shl i32 %1911, -1
  %_103 = shl i32 %1911, -1
  %_104 = shl i32 %1911, -1
  %_105 = sub i32 0, %1911
  %gen106 = add i32 %_105, -1
  %1912 = add nsw i32 %1911, -1
  store i32 %1912, i32* @stack_arg_under_construction, align 4
  br label %originalBB101

originalBB110alteredBB:                           ; preds = %originalBB110, %708
  %1913 = load i32, i32* %24, align 4
  %_111 = sub i32 %1913, 1
  %gen112 = mul i32 %_111, 1
  %1914 = add nsw i32 %1913, 1
  %_113 = sub i32 %1914, -2
  %gen114 = mul i32 %_113, -2
  %_115 = shl i32 %1914, -2
  %_116 = shl i32 %1914, -2
  %_117 = shl i32 %1914, -2
  %_118 = sub i32 %1914, -2
  %gen119 = mul i32 %_118, -2
  %_120 = shl i32 %1914, -2
  %_121 = shl i32 %1914, -2
  %1915 = and i32 %1914, -2
  br label %originalBB110

originalBB125alteredBB:                           ; preds = %originalBB125, %784
  %1916 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1917 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1916, i32 0, i32 9
  %1918 = getelementptr inbounds %struct.args_size, %struct.args_size* %1917, i32 0, i32 0
  %1919 = load i64, i64* %1918, align 8
  %1920 = call %union.tree_node* @size_int_wide(i64 %1919, i32 1)
  br label %originalBB125

originalBB129alteredBB:                           ; preds = %originalBB129, %819
  %1921 = call %struct.rtx_def* @expand_expr(%union.tree_node* %820, %struct.rtx_def* null, i32 0, i32 0)
  br label %originalBB129

originalBB133alteredBB:                           ; preds = %originalBB133, %838
  %1922 = load i32, i32* %11, align 4
  %1923 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1924 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1923, i32 0, i32 17
  %1925 = getelementptr inbounds %struct.args_size, %struct.args_size* %1924, i32 0, i32 1
  %1926 = load %union.tree_node*, %union.tree_node** %1925, align 8
  %1927 = icmp eq %union.tree_node* %1926, null
  br label %originalBB133

originalBB137alteredBB:                           ; preds = %originalBB137, %880
  %1928 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1929 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1930 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1929, i32 0, i32 17
  %1931 = getelementptr inbounds %struct.args_size, %struct.args_size* %1930, i32 0, i32 1
  %1932 = load %union.tree_node*, %union.tree_node** %1931, align 8
  %1933 = call %union.tree_node* @convert(%union.tree_node* %1928, %union.tree_node* %1932)
  %1934 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1935 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1934, i32 0, i32 17
  %1936 = getelementptr inbounds %struct.args_size, %struct.args_size* %1935, i32 0, i32 0
  %1937 = load i64, i64* %1936, align 8
  %1938 = call %union.tree_node* @size_int_wide(i64 %1937, i32 1)
  %1939 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1933, %union.tree_node* %1938)
  br label %originalBB137

originalBB141alteredBB:                           ; preds = %originalBB141, %923
  %1940 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1941 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1940, i32 0, i32 11
  %1942 = getelementptr inbounds %struct.args_size, %struct.args_size* %1941, i32 0, i32 1
  %1943 = load %union.tree_node*, %union.tree_node** %1942, align 8
  %1944 = icmp ne %union.tree_node* %1943, null
  br label %originalBB141

originalBB145alteredBB:                           ; preds = %originalBB145, %945
  store i32 0, i32* %25, align 4
  %1945 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1946 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1945, i32 0, i32 11
  %1947 = getelementptr inbounds %struct.args_size, %struct.args_size* %1946, i32 0, i32 1
  %1948 = load %union.tree_node*, %union.tree_node** %1947, align 8
  %1949 = icmp eq %union.tree_node* %1948, null
  br label %originalBB145

originalBB149alteredBB:                           ; preds = %originalBB149, %1001
  store %struct.rtx_def* %1002, %struct.rtx_def** %26, align 8
  br label %originalBB149

originalBB153alteredBB:                           ; preds = %originalBB153, %1066
  %1950 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %1951 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1950, i32 0, i32 1
  %1952 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1951, i64 0, i64 0
  %1953 = bitcast %union.rtunion_def* %1952 to %struct.rtx_def**
  %1954 = load %struct.rtx_def*, %struct.rtx_def** %1953, align 8
  %1955 = bitcast %struct.rtx_def* %1954 to i32*
  %1956 = load i32, i32* %1955, align 8
  %_154 = shl i32 %1956, 65535
  %_155 = sub i32 %1956, 65535
  %gen156 = mul i32 %_155, 65535
  %_157 = sub i32 0, %1956
  %gen158 = add i32 %_157, 65535
  %1957 = and i32 %1956, 65535
  %1958 = icmp eq i32 %1957, 75
  br label %originalBB153

originalBB162alteredBB:                           ; preds = %originalBB162, %1092
  %1959 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  %1960 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1959, i32 0, i32 1
  %1961 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1960, i64 0, i64 0
  %1962 = bitcast %union.rtunion_def* %1961 to %struct.rtx_def**
  %1963 = load %struct.rtx_def*, %struct.rtx_def** %1962, align 8
  %1964 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1963, i32 0, i32 1
  %1965 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1964, i64 0, i64 0
  %1966 = bitcast %union.rtunion_def* %1965 to %struct.rtx_def**
  %1967 = load %struct.rtx_def*, %struct.rtx_def** %1966, align 8
  %1968 = load %struct.function*, %struct.function** @cfun, align 8
  %1969 = getelementptr inbounds %struct.function, %struct.function* %1968, i32 0, i32 15
  %1970 = load %struct.rtx_def*, %struct.rtx_def** %1969, align 8
  %1971 = icmp eq %struct.rtx_def* %1967, %1970
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %1167
  %1972 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %1973 = bitcast %struct.rtx_def* %1972 to i32*
  %1974 = load i32, i32* %1973, align 8
  %_167 = sub i32 0, %1974
  %gen168 = add i32 %_167, 65535
  %_169 = sub i32 0, %1974
  %gen170 = add i32 %_169, 65535
  %_171 = sub i32 0, %1974
  %gen172 = add i32 %_171, 65535
  %_173 = sub i32 0, %1974
  %gen174 = add i32 %_173, 65535
  %1975 = and i32 %1974, 65535
  %1976 = icmp ne i32 %1975, 54
  br label %originalBB166

originalBB178alteredBB:                           ; preds = %originalBB178, %1212
  store i32 1, i32* %19, align 4
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %1229
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %1254
  %1977 = load i32, i32* %28, align 4
  %1978 = sext i32 %1977 to i64
  %1979 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1980 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1979, i32 0, i32 9
  %1981 = getelementptr inbounds %struct.args_size, %struct.args_size* %1980, i32 0, i32 0
  %1982 = load i64, i64* %1981, align 8
  %1983 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %1984 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1983, i32 0, i32 1
  %1985 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %1984, i64 0, i64 0
  %1986 = bitcast %union.rtunion_def* %1985 to i64*
  %1987 = load i64, i64* %1986, align 8
  %_187 = shl i64 %1982, %1987
  %_188 = sub i64 0, %1982
  %gen189 = add i64 %_188, %1987
  %_190 = sub i64 0, %1982
  %gen191 = add i64 %_190, %1987
  %_192 = shl i64 %1982, %1987
  %_193 = shl i64 %1982, %1987
  %1988 = add nsw i64 %1982, %1987
  %1989 = icmp slt i64 %1978, %1988
  br label %originalBB186

originalBB197alteredBB:                           ; preds = %originalBB197, %1284
  store i32 1, i32* %19, align 4
  br label %originalBB197

originalBB201alteredBB:                           ; preds = %originalBB201, %1310
  %1990 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1991 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1990, i32 0, i32 8
  %1992 = load i32, i32* %1991, align 8
  %1993 = icmp ne i32 %1992, 0
  br label %originalBB201

originalBB205alteredBB:                           ; preds = %originalBB205, %1339
  %1994 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %1995 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1994, i32 0, i32 9
  %1996 = getelementptr inbounds %struct.args_size, %struct.args_size* %1995, i32 0, i32 1
  %1997 = load %union.tree_node*, %union.tree_node** %1996, align 8
  %1998 = icmp ne %union.tree_node* %1997, null
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %1370
  %1999 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2000 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %1999, i32 0, i32 11
  %2001 = getelementptr inbounds %struct.args_size, %struct.args_size* %2000, i32 0, i32 1
  %2002 = load %union.tree_node*, %union.tree_node** %2001, align 8
  %2003 = icmp ne %union.tree_node* %2002, null
  br label %originalBB209

originalBB213alteredBB:                           ; preds = %originalBB213, %1392
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.22, i32 0, i32 0))
  br label %originalBB213

originalBB218alteredBB:                           ; preds = %originalBB218, %1472
  %2004 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2005 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2004, i32 0, i32 9
  %2006 = getelementptr inbounds %struct.args_size, %struct.args_size* %2005, i32 0, i32 1
  %2007 = load %union.tree_node*, %union.tree_node** %2006, align 8
  %2008 = icmp eq %union.tree_node* %2007, null
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %1530
  %2009 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2010 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2009, i32 0, i32 17
  %2011 = getelementptr inbounds %struct.args_size, %struct.args_size* %2010, i32 0, i32 1
  %2012 = load %union.tree_node*, %union.tree_node** %2011, align 8
  %2013 = icmp eq %union.tree_node* %2012, null
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %1607
  %2014 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2015 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2014, i32 0, i32 9
  %2016 = getelementptr inbounds %struct.args_size, %struct.args_size* %2015, i32 0, i32 0
  %2017 = load i64, i64* %2016, align 8
  %2018 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %2017)
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %1657
  %2019 = load i32, i32* %11, align 4
  %2020 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2021 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2020, i32 0, i32 17
  %2022 = getelementptr inbounds %struct.args_size, %struct.args_size* %2021, i32 0, i32 1
  %2023 = load %union.tree_node*, %union.tree_node** %2022, align 8
  %2024 = icmp eq %union.tree_node* %2023, null
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %1681
  %2025 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2026 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2025, i32 0, i32 17
  %2027 = getelementptr inbounds %struct.args_size, %struct.args_size* %2026, i32 0, i32 0
  %2028 = load i64, i64* %2027, align 8
  %2029 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %2028)
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1703
  %2030 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2031 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2030, i32 0, i32 17
  %2032 = getelementptr inbounds %struct.args_size, %struct.args_size* %2031, i32 0, i32 1
  %2033 = load %union.tree_node*, %union.tree_node** %2032, align 8
  %2034 = icmp eq %union.tree_node* %2033, null
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1744
  %2035 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1745, %struct.rtx_def* null, i32 0, i32 0)
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1763
  call void @emit_push_insn(%struct.rtx_def* %1582, i32 %1585, %union.tree_node* %1589, %struct.rtx_def* %1590, i32 %1597, i32 %1598, %struct.rtx_def* %1599, i32 %1600, %struct.rtx_def* %1601, %struct.rtx_def* %1658, i32 %1667, %struct.rtx_def* %1764)
  %2036 = load i32, i32* %14, align 4
  %2037 = icmp eq i32 %2036, 0
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1783
  %2038 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2039 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2038, i32 0, i32 13
  %2040 = load %struct.rtx_def*, %struct.rtx_def** %2039, align 8
  %2041 = load %struct.arg_data*, %struct.arg_data** %7, align 8
  %2042 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %2041, i32 0, i32 2
  store %struct.rtx_def* %2040, %struct.rtx_def** %2042, align 8
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1805
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1822
  br label %originalBB258
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_sibcall_argument_overlap(%struct.rtx_def*, %struct.arg_data*) #0 {
  %3 = alloca %struct.rtx_def*, align 8
  %4 = alloca %struct.arg_data*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.rtx_def* %0, %struct.rtx_def** %3, align 8
  store %struct.arg_data* %1, %struct.arg_data** %4, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %8 = icmp eq %struct.rtx_def* %7, null
  br i1 %8, label %9, label %27

; <label>:9:                                      ; preds = %2
  %10 = load i32, i32* @x.33
  %11 = load i32, i32* @y.34
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %9
  %18 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %18, %struct.rtx_def** %3, align 8
  %19 = load i32, i32* @x.33
  %20 = load i32, i32* @y.34
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33

; <label>:27:                                     ; preds = %2
  %28 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %29, i64 0, i64 2
  %31 = bitcast %union.rtunion_def* %30 to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %31, align 8
  store %struct.rtx_def* %32, %struct.rtx_def** %3, align 8
  br label %33

; <label>:33:                                     ; preds = %27, %originalBBpart2
  %34 = load i32, i32* @x.33
  %35 = load i32, i32* @y.34
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %33
  %42 = load i32, i32* @x.33
  %43 = load i32, i32* @y.34
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50

; <label>:50:                                     ; preds = %121, %originalBBpart24
  %51 = load i32, i32* @x.33
  %52 = load i32, i32* @y.34
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %50
  %59 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %60 = icmp ne %struct.rtx_def* %59, null
  %61 = load i32, i32* @x.33
  %62 = load i32, i32* @y.34
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %127

; <label>:69:                                     ; preds = %originalBBpart28
  %70 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %71 = bitcast %struct.rtx_def* %70 to i32*
  %72 = load i32, i32* %71, align 8
  %73 = and i32 %72, 65535
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i64 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp eq i32 %77, 105
  br i1 %78, label %79, label %120

; <label>:79:                                     ; preds = %69
  %80 = load i32, i32* @x.33
  %81 = load i32, i32* @y.34
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %79
  %88 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %89, i64 0, i64 3
  %91 = bitcast %union.rtunion_def* %90 to %struct.rtx_def**
  %92 = load %struct.rtx_def*, %struct.rtx_def** %91, align 8
  %93 = call i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %92)
  %94 = icmp ne i32 %93, 0
  %95 = load i32, i32* @x.33
  %96 = load i32, i32* @y.34
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %94, label %103, label %120

; <label>:103:                                    ; preds = %originalBBpart212
  %104 = load i32, i32* @x.33
  %105 = load i32, i32* @y.34
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %103
  %112 = load i32, i32* @x.33
  %113 = load i32, i32* @y.34
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %127

; <label>:120:                                    ; preds = %originalBBpart212, %69
  br label %121

; <label>:121:                                    ; preds = %120
  %122 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1
  %124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %123, i64 0, i64 2
  %125 = bitcast %union.rtunion_def* %124 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %125, align 8
  store %struct.rtx_def* %126, %struct.rtx_def** %3, align 8
  br label %50

; <label>:127:                                    ; preds = %originalBBpart216, %originalBBpart28
  %128 = load %struct.arg_data*, %struct.arg_data** %4, align 8
  %129 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %128, i32 0, i32 10
  %130 = getelementptr inbounds %struct.args_size, %struct.args_size* %129, i32 0, i32 0
  %131 = load i64, i64* %130, align 8
  %132 = trunc i64 %131 to i32
  store i32 %132, i32* %5, align 4
  %133 = load i32, i32* %5, align 4
  %134 = sext i32 %133 to i64
  %135 = load %struct.arg_data*, %struct.arg_data** %4, align 8
  %136 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %135, i32 0, i32 11
  %137 = getelementptr inbounds %struct.args_size, %struct.args_size* %136, i32 0, i32 0
  %138 = load i64, i64* %137, align 8
  %139 = add nsw i64 %134, %138
  %140 = trunc i64 %139 to i32
  store i32 %140, i32* %6, align 4
  br label %141

; <label>:141:                                    ; preds = %174, %127
  %142 = load i32, i32* @x.33
  %143 = load i32, i32* @y.34
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %141
  %150 = load i32, i32* %5, align 4
  %151 = load i32, i32* %6, align 4
  %152 = icmp slt i32 %150, %151
  %153 = load i32, i32* @x.33
  %154 = load i32, i32* @y.34
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %152, label %161, label %177

; <label>:161:                                    ; preds = %originalBBpart220
  %162 = load i32, i32* %5, align 4
  %163 = urem i32 %162, 64
  %164 = zext i32 %163 to i64
  %165 = shl i64 1, %164
  %166 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8
  %167 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %166, i32 0, i32 3
  %168 = load i32, i32* %5, align 4
  %169 = udiv i32 %168, 64
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds [1 x i64], [1 x i64]* %167, i64 0, i64 %170
  %172 = load i64, i64* %171, align 8
  %173 = or i64 %172, %165
  store i64 %173, i64* %171, align 8
  br label %174

; <label>:174:                                    ; preds = %161
  %175 = load i32, i32* %5, align 4
  %176 = add nsw i32 %175, 1
  store i32 %176, i32* %5, align 4
  br label %141

; <label>:177:                                    ; preds = %originalBBpart220
  %178 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %179 = icmp ne %struct.rtx_def* %178, null
  %180 = zext i1 %179 to i32
  ret i32 %180

originalBBalteredBB:                              ; preds = %originalBB, %9
  %181 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %181, %struct.rtx_def** %3, align 8
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %182 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %183 = icmp ne %struct.rtx_def* %182, null
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %184 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  %185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %184, i32 0, i32 1
  %186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %185, i64 0, i64 3
  %187 = bitcast %union.rtunion_def* %186 to %struct.rtx_def**
  %188 = load %struct.rtx_def*, %struct.rtx_def** %187, align 8
  %189 = call i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %188)
  %190 = icmp ne i32 %189, 0
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %103
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %141
  %191 = load i32, i32* %5, align 4
  %192 = load i32, i32* %6, align 4
  %193 = icmp slt i32 %191, %192
  br label %originalBB18
}

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @load_register_parameters(%struct.arg_data*, i32, %struct.rtx_def**, i32) #0 {
  %5 = alloca %struct.arg_data*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.rtx_def**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store %struct.arg_data* %0, %struct.arg_data** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.rtx_def** %2, %struct.rtx_def*** %7, align 8
  store i32 %3, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %14

; <label>:14:                                     ; preds = %403, %4
  %15 = load i32, i32* %9, align 4
  %16 = load i32, i32* %6, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %406

; <label>:18:                                     ; preds = %14
  %19 = load i32, i32* %8, align 4
  %20 = and i32 %19, 256
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %29

; <label>:22:                                     ; preds = %18
  %23 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %24 = load i32, i32* %9, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %23, i64 %25
  %27 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %26, i32 0, i32 5
  %28 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8
  br label %36

; <label>:29:                                     ; preds = %18
  %30 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %31 = load i32, i32* %9, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %30, i64 %32
  %34 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %33, i32 0, i32 4
  %35 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  br label %36

; <label>:36:                                     ; preds = %29, %22
  %37 = phi %struct.rtx_def* [ %28, %22 ], [ %35, %29 ]
  store %struct.rtx_def* %37, %struct.rtx_def** %11, align 8
  %38 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %39 = load i32, i32* %9, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %38, i64 %40
  %42 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %41, i32 0, i32 7
  %43 = load i32, i32* %42, align 4
  store i32 %43, i32* %12, align 4
  %44 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %45 = icmp ne %struct.rtx_def* %44, null
  br i1 %45, label %46, label %402

; <label>:46:                                     ; preds = %36
  %47 = load i32, i32* %12, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %68

; <label>:49:                                     ; preds = %46
  %50 = load i32, i32* @x.35
  %51 = load i32, i32* @y.36
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %49
  %58 = load i32, i32* %12, align 4
  %59 = sext i32 %58 to i64
  %60 = load i32, i32* @x.35
  %61 = load i32, i32* @y.36
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %127

; <label>:68:                                     ; preds = %46
  %69 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %70 = load i32, i32* %9, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %69, i64 %71
  %73 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %72, i32 0, i32 0
  %74 = load %union.tree_node*, %union.tree_node** %73, align 8
  %75 = bitcast %union.tree_node* %74 to %struct.tree_common*
  %76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %75, i32 0, i32 1
  %77 = load %union.tree_node*, %union.tree_node** %76, align 8
  %78 = bitcast %union.tree_node* %77 to %struct.tree_type*
  %79 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %78, i32 0, i32 6
  %80 = load i32, i32* %79, align 4
  %81 = lshr i32 %80, 9
  %82 = and i32 %81, 127
  %83 = icmp eq i32 %82, 51
  br i1 %83, label %84, label %124

; <label>:84:                                     ; preds = %68
  %85 = load i32, i32* @x.35
  %86 = load i32, i32* @y.36
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %84
  %93 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %94 = load i32, i32* %9, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %93, i64 %95
  %97 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %96, i32 0, i32 0
  %98 = load %union.tree_node*, %union.tree_node** %97, align 8
  %99 = bitcast %union.tree_node* %98 to %struct.tree_common*
  %100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %99, i32 0, i32 1
  %101 = load %union.tree_node*, %union.tree_node** %100, align 8
  %102 = call i64 @int_size_in_bytes(%union.tree_node* %101)
  %103 = load i32, i32* @target_flags, align 4
  %104 = and i32 %103, 33554432
  %105 = icmp ne i32 %104, 0
  %106 = select i1 %105, i32 8, i32 4
  %107 = sub nsw i32 %106, 1
  %108 = sext i32 %107 to i64
  %109 = add nsw i64 %102, %108
  %110 = load i32, i32* @target_flags, align 4
  %111 = and i32 %110, 33554432
  %112 = icmp ne i32 %111, 0
  %113 = select i1 %112, i32 8, i32 4
  %114 = sext i32 %113 to i64
  %115 = sdiv i64 %109, %114
  %116 = load i32, i32* @x.35
  %117 = load i32, i32* @y.36
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart231, label %originalBB1alteredBB

originalBBpart231:                                ; preds = %originalBB1
  br label %125

; <label>:124:                                    ; preds = %68
  br label %125

; <label>:125:                                    ; preds = %124, %originalBBpart231
  %126 = phi i64 [ %115, %originalBBpart231 ], [ -1, %124 ]
  br label %127

; <label>:127:                                    ; preds = %125, %originalBBpart2
  %128 = phi i64 [ %59, %originalBBpart2 ], [ %126, %125 ]
  %129 = trunc i64 %128 to i32
  store i32 %129, i32* %13, align 4
  %130 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %132 = load i32, i32* %131, align 8
  %133 = and i32 %132, 65535
  %134 = icmp eq i32 %133, 39
  br i1 %134, label %135, label %154

; <label>:135:                                    ; preds = %127
  %136 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %137 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %138 = load i32, i32* %9, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %137, i64 %139
  %141 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %140, i32 0, i32 2
  %142 = load %struct.rtx_def*, %struct.rtx_def** %141, align 8
  %143 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %144 = load i32, i32* %9, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %143, i64 %145
  %147 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %146, i32 0, i32 0
  %148 = load %union.tree_node*, %union.tree_node** %147, align 8
  %149 = bitcast %union.tree_node* %148 to %struct.tree_common*
  %150 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %149, i32 0, i32 1
  %151 = load %union.tree_node*, %union.tree_node** %150, align 8
  %152 = call i64 @int_size_in_bytes(%union.tree_node* %151)
  %153 = trunc i64 %152 to i32
  call void @emit_group_load(%struct.rtx_def* %136, %struct.rtx_def* %142, i32 %153)
  br label %291

; <label>:154:                                    ; preds = %127
  %155 = load i32, i32* @x.35
  %156 = load i32, i32* @y.36
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %154
  %163 = load i32, i32* %13, align 4
  %164 = icmp eq i32 %163, -1
  %165 = load i32, i32* @x.35
  %166 = load i32, i32* @y.36
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %164, label %173, label %182

; <label>:173:                                    ; preds = %originalBBpart235
  %174 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %175 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %176 = load i32, i32* %9, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %175, i64 %177
  %179 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %178, i32 0, i32 2
  %180 = load %struct.rtx_def*, %struct.rtx_def** %179, align 8
  %181 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %174, %struct.rtx_def* %180)
  br label %290

; <label>:182:                                    ; preds = %originalBBpart235
  %183 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %184 = load i32, i32* %9, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %183, i64 %185
  %187 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %186, i32 0, i32 16
  %188 = load i32, i32* %187, align 8
  %189 = icmp ne i32 %188, 0
  br i1 %189, label %190, label %241

; <label>:190:                                    ; preds = %182
  store i32 0, i32* %10, align 4
  br label %191

; <label>:191:                                    ; preds = %originalBBpart245, %190
  %192 = load i32, i32* %10, align 4
  %193 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %194 = load i32, i32* %9, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %193, i64 %195
  %197 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %196, i32 0, i32 16
  %198 = load i32, i32* %197, align 8
  %199 = icmp slt i32 %192, %198
  br i1 %199, label %200, label %240

; <label>:200:                                    ; preds = %191
  %201 = load i32, i32* @word_mode, align 4
  %202 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %203 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %202, i32 0, i32 1
  %204 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %203, i64 0, i64 0
  %205 = bitcast %union.rtunion_def* %204 to i32*
  %206 = load i32, i32* %205, align 8
  %207 = load i32, i32* %10, align 4
  %208 = add i32 %206, %207
  %209 = call %struct.rtx_def* @gen_rtx_REG(i32 %201, i32 %208)
  %210 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %211 = load i32, i32* %9, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %210, i64 %212
  %214 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %213, i32 0, i32 15
  %215 = load %struct.rtx_def**, %struct.rtx_def*** %214, align 8
  %216 = load i32, i32* %10, align 4
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %215, i64 %217
  %219 = load %struct.rtx_def*, %struct.rtx_def** %218, align 8
  %220 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %209, %struct.rtx_def* %219)
  br label %221

; <label>:221:                                    ; preds = %200
  %222 = load i32, i32* @x.35
  %223 = load i32, i32* @y.36
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %221
  %230 = load i32, i32* %10, align 4
  %231 = add nsw i32 %230, 1
  store i32 %231, i32* %10, align 4
  %232 = load i32, i32* @x.35
  %233 = load i32, i32* @y.36
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart245, label %originalBB37alteredBB

originalBBpart245:                                ; preds = %originalBB37
  br label %191

; <label>:240:                                    ; preds = %191
  br label %289

; <label>:241:                                    ; preds = %182
  %242 = load i32, i32* %12, align 4
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %252, label %244

; <label>:244:                                    ; preds = %241
  %245 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %246 = load i32, i32* %9, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %245, i64 %247
  %249 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %248, i32 0, i32 8
  %250 = load i32, i32* %249, align 8
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %252, label %288

; <label>:252:                                    ; preds = %244, %241
  %253 = load i32, i32* @x.35
  %254 = load i32, i32* @y.36
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %originalBB47alteredBB, %252
  %261 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %261, i32 0, i32 1
  %263 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %262, i64 0, i64 0
  %264 = bitcast %union.rtunion_def* %263 to i32*
  %265 = load i32, i32* %264, align 8
  %266 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %267 = load i32, i32* %9, align 4
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %266, i64 %268
  %270 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %269, i32 0, i32 2
  %271 = load %struct.rtx_def*, %struct.rtx_def** %270, align 8
  %272 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %271)
  %273 = load i32, i32* %13, align 4
  %274 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %275 = load i32, i32* %9, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %274, i64 %276
  %278 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %277, i32 0, i32 1
  %279 = load i32, i32* %278, align 8
  call void @move_block_to_reg(i32 %265, %struct.rtx_def* %272, i32 %273, i32 %279)
  %280 = load i32, i32* @x.35
  %281 = load i32, i32* @y.36
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %288

; <label>:288:                                    ; preds = %originalBBpart249, %244
  br label %289

; <label>:289:                                    ; preds = %288, %240
  br label %290

; <label>:290:                                    ; preds = %289, %173
  br label %291

; <label>:291:                                    ; preds = %290, %135
  %292 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %293 = bitcast %struct.rtx_def* %292 to i32*
  %294 = load i32, i32* %293, align 8
  %295 = and i32 %294, 65535
  %296 = icmp eq i32 %295, 39
  br i1 %296, label %297, label %316

; <label>:297:                                    ; preds = %291
  %298 = load i32, i32* @x.35
  %299 = load i32, i32* @y.36
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %originalBB51alteredBB, %297
  %306 = load %struct.rtx_def**, %struct.rtx_def*** %7, align 8
  %307 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  call void @use_group_regs(%struct.rtx_def** %306, %struct.rtx_def* %307)
  %308 = load i32, i32* @x.35
  %309 = load i32, i32* @y.36
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br label %385

; <label>:316:                                    ; preds = %291
  %317 = load i32, i32* @x.35
  %318 = load i32, i32* @y.36
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %originalBB55alteredBB, %316
  %325 = load i32, i32* %13, align 4
  %326 = icmp eq i32 %325, -1
  %327 = load i32, i32* @x.35
  %328 = load i32, i32* @y.36
  %329 = sub i32 %327, 1
  %330 = mul i32 %327, %329
  %331 = urem i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %332, %333
  br i1 %334, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %326, label %335, label %354

; <label>:335:                                    ; preds = %originalBBpart257
  %336 = load i32, i32* @x.35
  %337 = load i32, i32* @y.36
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %originalBB59alteredBB, %335
  %344 = load %struct.rtx_def**, %struct.rtx_def*** %7, align 8
  %345 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  call void @use_reg(%struct.rtx_def** %344, %struct.rtx_def* %345)
  %346 = load i32, i32* @x.35
  %347 = load i32, i32* @y.36
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br label %384

; <label>:354:                                    ; preds = %originalBBpart257
  %355 = load %struct.rtx_def**, %struct.rtx_def*** %7, align 8
  %356 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %357 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %356, i32 0, i32 1
  %358 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %357, i64 0, i64 0
  %359 = bitcast %union.rtunion_def* %358 to i32*
  %360 = load i32, i32* %359, align 8
  %361 = load i32, i32* %13, align 4
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %380

; <label>:363:                                    ; preds = %354
  %364 = load i32, i32* @x.35
  %365 = load i32, i32* @y.36
  %366 = sub i32 %364, 1
  %367 = mul i32 %364, %366
  %368 = urem i32 %367, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %369, %370
  br i1 %371, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %originalBB63alteredBB, %363
  %372 = load i32, i32* @x.35
  %373 = load i32, i32* @y.36
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %382

; <label>:380:                                    ; preds = %354
  %381 = load i32, i32* %13, align 4
  br label %382

; <label>:382:                                    ; preds = %380, %originalBBpart265
  %383 = phi i32 [ 1, %originalBBpart265 ], [ %381, %380 ]
  call void @use_regs(%struct.rtx_def** %355, i32 %360, i32 %383)
  br label %384

; <label>:384:                                    ; preds = %382, %originalBBpart261
  br label %385

; <label>:385:                                    ; preds = %384, %originalBBpart253
  %386 = load i32, i32* @x.35
  %387 = load i32, i32* @y.36
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %originalBB67alteredBB, %385
  %394 = load i32, i32* @x.35
  %395 = load i32, i32* @y.36
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %402

; <label>:402:                                    ; preds = %originalBBpart269, %36
  br label %403

; <label>:403:                                    ; preds = %402
  %404 = load i32, i32* %9, align 4
  %405 = add nsw i32 %404, 1
  store i32 %405, i32* %9, align 4
  br label %14

; <label>:406:                                    ; preds = %14
  %407 = load i32, i32* @x.35
  %408 = load i32, i32* @y.36
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %originalBB71alteredBB, %406
  %415 = load i32, i32* @x.35
  %416 = load i32, i32* @y.36
  %417 = sub i32 %415, 1
  %418 = mul i32 %415, %417
  %419 = urem i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %420, %421
  br i1 %422, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %49
  %423 = load i32, i32* %12, align 4
  %424 = sext i32 %423 to i64
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %84
  %425 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %426 = load i32, i32* %9, align 4
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %425, i64 %427
  %429 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %428, i32 0, i32 0
  %430 = load %union.tree_node*, %union.tree_node** %429, align 8
  %431 = bitcast %union.tree_node* %430 to %struct.tree_common*
  %432 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %431, i32 0, i32 1
  %433 = load %union.tree_node*, %union.tree_node** %432, align 8
  %434 = call i64 @int_size_in_bytes(%union.tree_node* %433)
  %435 = load i32, i32* @target_flags, align 4
  %_ = sub i32 %435, 33554432
  %gen = mul i32 %_, 33554432
  %_2 = sub i32 0, %435
  %gen3 = add i32 %_2, 33554432
  %_4 = shl i32 %435, 33554432
  %_5 = shl i32 %435, 33554432
  %436 = and i32 %435, 33554432
  %437 = icmp ne i32 %436, 0
  %438 = select i1 %437, i32 8, i32 4
  %_6 = sub i32 %438, 1
  %gen7 = mul i32 %_6, 1
  %_8 = sub i32 %438, 1
  %gen9 = mul i32 %_8, 1
  %_10 = sub i32 0, %438
  %gen11 = add i32 %_10, 1
  %_12 = sub i32 %438, 1
  %gen13 = mul i32 %_12, 1
  %439 = sub nsw i32 %438, 1
  %440 = sext i32 %439 to i64
  %_14 = sub i64 %434, %440
  %gen15 = mul i64 %_14, %440
  %441 = add nsw i64 %434, %440
  %442 = load i32, i32* @target_flags, align 4
  %_16 = shl i32 %442, 33554432
  %_17 = sub i32 %442, 33554432
  %gen18 = mul i32 %_17, 33554432
  %_19 = shl i32 %442, 33554432
  %_20 = sub i32 0, %442
  %gen21 = add i32 %_20, 33554432
  %443 = and i32 %442, 33554432
  %444 = icmp ne i32 %443, 0
  %445 = select i1 %444, i32 8, i32 4
  %446 = sext i32 %445 to i64
  %_22 = sub i64 0, %441
  %gen23 = add i64 %_22, %446
  %_24 = sub i64 0, %441
  %gen25 = add i64 %_24, %446
  %_26 = sub i64 0, %441
  %gen27 = add i64 %_26, %446
  %_28 = sub i64 %441, %446
  %gen29 = mul i64 %_28, %446
  %447 = sdiv i64 %441, %446
  br label %originalBB1

originalBB33alteredBB:                            ; preds = %originalBB33, %154
  %448 = load i32, i32* %13, align 4
  %449 = icmp eq i32 %448, -1
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %221
  %450 = load i32, i32* %10, align 4
  %_38 = sub i32 0, %450
  %gen39 = add i32 %_38, 1
  %_40 = sub i32 %450, 1
  %gen41 = mul i32 %_40, 1
  %_42 = sub i32 %450, 1
  %gen43 = mul i32 %_42, 1
  %451 = add nsw i32 %450, 1
  store i32 %451, i32* %10, align 4
  br label %originalBB37

originalBB47alteredBB:                            ; preds = %originalBB47, %252
  %452 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %453 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %452, i32 0, i32 1
  %454 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %453, i64 0, i64 0
  %455 = bitcast %union.rtunion_def* %454 to i32*
  %456 = load i32, i32* %455, align 8
  %457 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %458 = load i32, i32* %9, align 4
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %457, i64 %459
  %461 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %460, i32 0, i32 2
  %462 = load %struct.rtx_def*, %struct.rtx_def** %461, align 8
  %463 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %462)
  %464 = load i32, i32* %13, align 4
  %465 = load %struct.arg_data*, %struct.arg_data** %5, align 8
  %466 = load i32, i32* %9, align 4
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %465, i64 %467
  %469 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %468, i32 0, i32 1
  %470 = load i32, i32* %469, align 8
  call void @move_block_to_reg(i32 %456, %struct.rtx_def* %463, i32 %464, i32 %470)
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %297
  %471 = load %struct.rtx_def**, %struct.rtx_def*** %7, align 8
  %472 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  call void @use_group_regs(%struct.rtx_def** %471, %struct.rtx_def* %472)
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %316
  %473 = load i32, i32* %13, align 4
  %474 = icmp eq i32 %473, -1
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %335
  %475 = load %struct.rtx_def**, %struct.rtx_def*** %7, align 8
  %476 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  call void @use_reg(%struct.rtx_def** %475, %struct.rtx_def* %476)
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %363
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %385
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %406
  br label %originalBB71
}

declare %struct.rtx_def* @function_arg(%struct.ix86_args*, i32, %union.tree_node*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @emit_call_1(%struct.rtx_def*, %union.tree_node*, %union.tree_node*, i64, i64, i64, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, %struct.ix86_args*) #0 {
  %13 = alloca %struct.rtx_def*, align 8
  %14 = alloca %union.tree_node*, align 8
  %15 = alloca %union.tree_node*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca %struct.rtx_def*, align 8
  %20 = alloca %struct.rtx_def*, align 8
  %21 = alloca i32, align 4
  %22 = alloca %struct.rtx_def*, align 8
  %23 = alloca i32, align 4
  %24 = alloca %struct.ix86_args*, align 8
  %25 = alloca %struct.rtx_def*, align 8
  %26 = alloca %struct.rtx_def*, align 8
  %27 = alloca i32, align 4
  %28 = alloca i64, align 8
  %29 = alloca %struct.rtx_def*, align 8
  %30 = alloca %struct.rtx_def*, align 8
  %31 = alloca %struct.rtx_def*, align 8
  %32 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %13, align 8
  store %union.tree_node* %1, %union.tree_node** %14, align 8
  store %union.tree_node* %2, %union.tree_node** %15, align 8
  store i64 %3, i64* %16, align 8
  store i64 %4, i64* %17, align 8
  store i64 %5, i64* %18, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %19, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %20, align 8
  store i32 %8, i32* %21, align 4
  store %struct.rtx_def* %9, %struct.rtx_def** %22, align 8
  store i32 %10, i32* %23, align 4
  store %struct.ix86_args* %11, %struct.ix86_args** %24, align 8
  %33 = load i64, i64* %17, align 8
  %34 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %33)
  store %struct.rtx_def* %34, %struct.rtx_def** %25, align 8
  store i32 0, i32* %27, align 4
  %35 = load %union.tree_node*, %union.tree_node** %14, align 8
  %36 = load %union.tree_node*, %union.tree_node** %15, align 8
  %37 = load i64, i64* %16, align 8
  %38 = trunc i64 %37 to i32
  %39 = call i32 @ix86_return_pops_args(%union.tree_node* %35, %union.tree_node* %36, i32 %38)
  %40 = sext i32 %39 to i64
  store i64 %40, i64* %28, align 8
  %41 = load i64, i64* %18, align 8
  %42 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %41)
  store %struct.rtx_def* %42, %struct.rtx_def** %29, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %45 = load i32, i32* %44, align 8
  %46 = and i32 %45, 65535
  %47 = icmp ne i32 %46, 68
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %12
  %49 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %50 = call %struct.rtx_def* @memory_address(i32 2, %struct.rtx_def* %49)
  store %struct.rtx_def* %50, %struct.rtx_def** %13, align 8
  br label %51

; <label>:51:                                     ; preds = %48, %12
  %52 = load i32, i32* @x.37
  %53 = load i32, i32* @y.38
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %51
  %60 = load i32, i32* @target_flags, align 4
  %61 = and i32 %60, 33554432
  %62 = icmp ne i32 %61, 0
  %63 = load i32, i32* @x.37
  %64 = load i32, i32* @y.38
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %62, label %105, label %71

; <label>:71:                                     ; preds = %originalBBpart2
  %72 = load i32, i32* @target_flags, align 4
  %73 = and i32 %72, 33554432
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %105, label %75

; <label>:75:                                     ; preds = %71
  %76 = load i64, i64* %28, align 8
  %77 = icmp sgt i64 %76, 0
  br i1 %77, label %78, label %105

; <label>:78:                                     ; preds = %75
  %79 = load i32, i32* %23, align 4
  %80 = and i32 %79, 1024
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %105, label %82

; <label>:82:                                     ; preds = %78
  %83 = load i64, i64* %28, align 8
  %84 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %83)
  store %struct.rtx_def* %84, %struct.rtx_def** %30, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %86 = icmp ne %struct.rtx_def* %85, null
  br i1 %86, label %87, label %95

; <label>:87:                                     ; preds = %82
  %88 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %90 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %89)
  %91 = load %struct.rtx_def*, %struct.rtx_def** %25, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %94 = call %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def* %88, %struct.rtx_def* %90, %struct.rtx_def* %91, %struct.rtx_def* %92, %struct.rtx_def* %93)
  store %struct.rtx_def* %94, %struct.rtx_def** %31, align 8
  br label %102

; <label>:95:                                     ; preds = %82
  %96 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %97 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %96)
  %98 = load %struct.rtx_def*, %struct.rtx_def** %25, align 8
  %99 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %101 = call %struct.rtx_def* @gen_call_pop(%struct.rtx_def* %97, %struct.rtx_def* %98, %struct.rtx_def* %99, %struct.rtx_def* %100)
  store %struct.rtx_def* %101, %struct.rtx_def** %31, align 8
  br label %102

; <label>:102:                                    ; preds = %95, %87
  %103 = load %struct.rtx_def*, %struct.rtx_def** %31, align 8
  %104 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %103)
  store i32 1, i32* %27, align 4
  br label %124

; <label>:105:                                    ; preds = %78, %75, %71, %originalBBpart2
  %106 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %107 = icmp ne %struct.rtx_def* %106, null
  br i1 %107, label %108, label %116

; <label>:108:                                    ; preds = %105
  %109 = load %struct.rtx_def*, %struct.rtx_def** %20, align 8
  %110 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %111 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %110)
  %112 = load %struct.rtx_def*, %struct.rtx_def** %25, align 8
  %113 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %114 = call %struct.rtx_def* @gen_call_value(%struct.rtx_def* %109, %struct.rtx_def* %111, %struct.rtx_def* %112, %struct.rtx_def* %113)
  %115 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %114)
  br label %123

; <label>:116:                                    ; preds = %105
  %117 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %118 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %117)
  %119 = load %struct.rtx_def*, %struct.rtx_def** %25, align 8
  %120 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8
  %121 = call %struct.rtx_def* @gen_call(%struct.rtx_def* %118, %struct.rtx_def* %119, %struct.rtx_def* %120)
  %122 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %121)
  br label %123

; <label>:123:                                    ; preds = %116, %108
  br label %124

; <label>:124:                                    ; preds = %123, %102
  %125 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %125, %struct.rtx_def** %26, align 8
  br label %126

; <label>:126:                                    ; preds = %138, %124
  %127 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %128 = icmp ne %struct.rtx_def* %127, null
  br i1 %128, label %129, label %135

; <label>:129:                                    ; preds = %126
  %130 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %132 = load i32, i32* %131, align 8
  %133 = and i32 %132, 65535
  %134 = icmp ne i32 %133, 34
  br label %135

; <label>:135:                                    ; preds = %129, %126
  %136 = phi i1 [ false, %126 ], [ %134, %129 ]
  br i1 %136, label %137, label %144

; <label>:137:                                    ; preds = %135
  br label %138

; <label>:138:                                    ; preds = %137
  %139 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %140, i64 0, i64 1
  %142 = bitcast %union.rtunion_def* %141 to %struct.rtx_def**
  %143 = load %struct.rtx_def*, %struct.rtx_def** %142, align 8
  store %struct.rtx_def* %143, %struct.rtx_def** %26, align 8
  br label %126

; <label>:144:                                    ; preds = %135
  %145 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %146 = icmp ne %struct.rtx_def* %145, null
  br i1 %146, label %164, label %147

; <label>:147:                                    ; preds = %144
  %148 = load i32, i32* @x.37
  %149 = load i32, i32* @y.38
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %147
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 580, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.emit_call_1, i32 0, i32 0)) #8
  %156 = load i32, i32* @x.37
  %157 = load i32, i32* @y.38
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable

; <label>:164:                                    ; preds = %144
  %165 = load i32, i32* @x.37
  %166 = load i32, i32* @y.38
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %164
  %173 = load i32, i32* %23, align 4
  %174 = and i32 %173, 512
  %175 = icmp ne i32 %174, 0
  %176 = load i32, i32* @x.37
  %177 = load i32, i32* @y.38
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart215, label %originalBB10alteredBB

originalBBpart215:                                ; preds = %originalBB10
  br i1 %175, label %184, label %190

; <label>:184:                                    ; preds = %originalBBpart215
  %185 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %186 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %185)
  %187 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %186)
  %188 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %189 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %187, %struct.rtx_def* %188)
  store %struct.rtx_def* %189, %struct.rtx_def** %22, align 8
  br label %190

; <label>:190:                                    ; preds = %184, %originalBBpart215
  %191 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %192 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %191, i32 0, i32 1
  %193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %192, i64 0, i64 7
  %194 = bitcast %union.rtunion_def* %193 to %struct.rtx_def**
  %195 = load %struct.rtx_def*, %struct.rtx_def** %194, align 8
  %196 = icmp ne %struct.rtx_def* %195, null
  br i1 %196, label %197, label %255

; <label>:197:                                    ; preds = %190
  %198 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %198, i32 0, i32 1
  %200 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %199, i64 0, i64 7
  %201 = bitcast %union.rtunion_def* %200 to %struct.rtx_def**
  %202 = load %struct.rtx_def*, %struct.rtx_def** %201, align 8
  store %struct.rtx_def* %202, %struct.rtx_def** %32, align 8
  br label %203

; <label>:203:                                    ; preds = %originalBBpart219, %197
  %204 = load %struct.rtx_def*, %struct.rtx_def** %32, align 8
  %205 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1
  %206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %205, i64 0, i64 1
  %207 = bitcast %union.rtunion_def* %206 to %struct.rtx_def**
  %208 = load %struct.rtx_def*, %struct.rtx_def** %207, align 8
  %209 = icmp ne %struct.rtx_def* %208, null
  br i1 %209, label %210, label %233

; <label>:210:                                    ; preds = %203
  br label %211

; <label>:211:                                    ; preds = %210
  %212 = load i32, i32* @x.37
  %213 = load i32, i32* @y.38
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %211
  %220 = load %struct.rtx_def*, %struct.rtx_def** %32, align 8
  %221 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %220, i32 0, i32 1
  %222 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %221, i64 0, i64 1
  %223 = bitcast %union.rtunion_def* %222 to %struct.rtx_def**
  %224 = load %struct.rtx_def*, %struct.rtx_def** %223, align 8
  store %struct.rtx_def* %224, %struct.rtx_def** %32, align 8
  %225 = load i32, i32* @x.37
  %226 = load i32, i32* @y.38
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %203

; <label>:233:                                    ; preds = %203
  %234 = load i32, i32* @x.37
  %235 = load i32, i32* @y.38
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %originalBB21alteredBB, %233
  %242 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %243 = load %struct.rtx_def*, %struct.rtx_def** %32, align 8
  %244 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %243, i32 0, i32 1
  %245 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %244, i64 0, i64 1
  %246 = bitcast %union.rtunion_def* %245 to %struct.rtx_def**
  store %struct.rtx_def* %242, %struct.rtx_def** %246, align 8
  %247 = load i32, i32* @x.37
  %248 = load i32, i32* @y.38
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %261

; <label>:255:                                    ; preds = %190
  %256 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %257 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %258 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %257, i32 0, i32 1
  %259 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %258, i64 0, i64 7
  %260 = bitcast %union.rtunion_def* %259 to %struct.rtx_def**
  store %struct.rtx_def* %256, %struct.rtx_def** %260, align 8
  br label %261

; <label>:261:                                    ; preds = %255, %originalBBpart223
  %262 = load i32, i32* @x.37
  %263 = load i32, i32* @y.38
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %originalBB25alteredBB, %261
  %270 = load i32, i32* %23, align 4
  %271 = and i32 %270, 513
  %272 = icmp ne i32 %271, 0
  %273 = load i32, i32* @x.37
  %274 = load i32, i32* @y.38
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart243, label %originalBB25alteredBB

originalBBpart243:                                ; preds = %originalBB25
  br i1 %272, label %281, label %287

; <label>:281:                                    ; preds = %originalBBpart243
  %282 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %283 = bitcast %struct.rtx_def* %282 to i32*
  %284 = load i32, i32* %283, align 8
  %285 = and i32 %284, -67108865
  %286 = or i32 %285, 67108864
  store i32 %286, i32* %283, align 8
  br label %287

; <label>:287:                                    ; preds = %281, %originalBBpart243
  %288 = load i32, i32* %23, align 4
  %289 = and i32 %288, 16
  %290 = icmp ne i32 %289, 0
  br i1 %290, label %291, label %303

; <label>:291:                                    ; preds = %287
  %292 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16
  %293 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %294 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %293, i32 0, i32 1
  %295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %294, i64 0, i64 6
  %296 = bitcast %union.rtunion_def* %295 to %struct.rtx_def**
  %297 = load %struct.rtx_def*, %struct.rtx_def** %296, align 8
  %298 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 23, %struct.rtx_def* %292, %struct.rtx_def* %297)
  %299 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %300 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %299, i32 0, i32 1
  %301 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %300, i64 0, i64 6
  %302 = bitcast %union.rtunion_def* %301 to %struct.rtx_def**
  store %struct.rtx_def* %298, %struct.rtx_def** %302, align 8
  br label %303

; <label>:303:                                    ; preds = %291, %287
  %304 = load i32, i32* %23, align 4
  %305 = and i32 %304, 2
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %319

; <label>:307:                                    ; preds = %303
  %308 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16
  %309 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %310 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %309, i32 0, i32 1
  %311 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %310, i64 0, i64 6
  %312 = bitcast %union.rtunion_def* %311 to %struct.rtx_def**
  %313 = load %struct.rtx_def*, %struct.rtx_def** %312, align 8
  %314 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 26, %struct.rtx_def* %308, %struct.rtx_def* %313)
  %315 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %316 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %315, i32 0, i32 1
  %317 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %316, i64 0, i64 6
  %318 = bitcast %union.rtunion_def* %317 to %struct.rtx_def**
  store %struct.rtx_def* %314, %struct.rtx_def** %318, align 8
  br label %319

; <label>:319:                                    ; preds = %307, %303
  %320 = load i32, i32* %23, align 4
  %321 = and i32 %320, 2048
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %335

; <label>:323:                                    ; preds = %319
  %324 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16
  %325 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %326 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %325, i32 0, i32 1
  %327 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %326, i64 0, i64 6
  %328 = bitcast %union.rtunion_def* %327 to %struct.rtx_def**
  %329 = load %struct.rtx_def*, %struct.rtx_def** %328, align 8
  %330 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 29, %struct.rtx_def* %324, %struct.rtx_def* %329)
  %331 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %332 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %331, i32 0, i32 1
  %333 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %332, i64 0, i64 6
  %334 = bitcast %union.rtunion_def* %333 to %struct.rtx_def**
  store %struct.rtx_def* %330, %struct.rtx_def** %334, align 8
  br label %335

; <label>:335:                                    ; preds = %323, %319
  %336 = load i32, i32* %23, align 4
  %337 = and i32 %336, 32
  %338 = icmp ne i32 %337, 0
  br i1 %338, label %339, label %357

; <label>:339:                                    ; preds = %335
  %340 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16
  %341 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %342 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %341, i32 0, i32 1
  %343 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %342, i64 0, i64 6
  %344 = bitcast %union.rtunion_def* %343 to %struct.rtx_def**
  %345 = load %struct.rtx_def*, %struct.rtx_def** %344, align 8
  %346 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 28, %struct.rtx_def* %340, %struct.rtx_def* %345)
  %347 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %348 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %347, i32 0, i32 1
  %349 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %348, i64 0, i64 6
  %350 = bitcast %union.rtunion_def* %349 to %struct.rtx_def**
  store %struct.rtx_def* %346, %struct.rtx_def** %350, align 8
  %351 = load %struct.function*, %struct.function** @cfun, align 8
  %352 = getelementptr inbounds %struct.function, %struct.function* %351, i32 0, i32 56
  %353 = bitcast i24* %352 to i32*
  %354 = load i32, i32* %353, align 8
  %355 = and i32 %354, -17
  %356 = or i32 %355, 16
  store i32 %356, i32* %353, align 8
  br label %357

; <label>:357:                                    ; preds = %339, %335
  %358 = load i32, i32* %23, align 4
  %359 = and i32 %358, 256
  %360 = icmp ne i32 %359, 0
  %361 = zext i1 %360 to i32
  %362 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %363 = bitcast %struct.rtx_def* %362 to i32*
  %364 = load i32, i32* %363, align 8
  %365 = and i32 %361, 1
  %366 = shl i32 %365, 24
  %367 = and i32 %364, -16777217
  %368 = or i32 %367, %366
  store i32 %368, i32* %363, align 8
  %369 = load i32, i32* %21, align 4
  %370 = load %struct.function*, %struct.function** @cfun, align 8
  %371 = getelementptr inbounds %struct.function, %struct.function* %370, i32 0, i32 2
  %372 = load %struct.expr_status*, %struct.expr_status** %371, align 8
  %373 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %372, i32 0, i32 1
  store i32 %369, i32* %373, align 4
  %374 = load i64, i64* %28, align 8
  %375 = icmp sgt i64 %374, 0
  br i1 %375, label %376, label %423

; <label>:376:                                    ; preds = %357
  %377 = load i32, i32* %27, align 4
  %378 = icmp ne i32 %377, 0
  br i1 %378, label %392, label %379

; <label>:379:                                    ; preds = %376
  %380 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %381 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %380)
  %382 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %383 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %382, i32 0, i32 1
  %384 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %383, i64 0, i64 7
  %385 = bitcast %union.rtunion_def* %384 to %struct.rtx_def**
  %386 = load %struct.rtx_def*, %struct.rtx_def** %385, align 8
  %387 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %381, %struct.rtx_def* %386)
  %388 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %389 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %388, i32 0, i32 1
  %390 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %389, i64 0, i64 7
  %391 = bitcast %union.rtunion_def* %390 to %struct.rtx_def**
  store %struct.rtx_def* %387, %struct.rtx_def** %391, align 8
  br label %392

; <label>:392:                                    ; preds = %379, %376
  %393 = load i32, i32* @x.37
  %394 = load i32, i32* @y.38
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %originalBB45alteredBB, %392
  %401 = load i64, i64* %28, align 8
  %402 = load i64, i64* %17, align 8
  %403 = sub nsw i64 %402, %401
  store i64 %403, i64* %17, align 8
  %404 = load i64, i64* %17, align 8
  %405 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %404)
  store %struct.rtx_def* %405, %struct.rtx_def** %25, align 8
  %406 = load i64, i64* %28, align 8
  %407 = load %struct.function*, %struct.function** @cfun, align 8
  %408 = getelementptr inbounds %struct.function, %struct.function* %407, i32 0, i32 2
  %409 = load %struct.expr_status*, %struct.expr_status** %408, align 8
  %410 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %409, i32 0, i32 2
  %411 = load i32, i32* %410, align 8
  %412 = sext i32 %411 to i64
  %413 = sub nsw i64 %412, %406
  %414 = trunc i64 %413 to i32
  store i32 %414, i32* %410, align 8
  %415 = load i32, i32* @x.37
  %416 = load i32, i32* @y.38
  %417 = sub i32 %415, 1
  %418 = mul i32 %415, %417
  %419 = urem i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %420, %421
  br i1 %422, label %originalBBpart264, label %originalBB45alteredBB

originalBBpart264:                                ; preds = %originalBB45
  br label %423

; <label>:423:                                    ; preds = %originalBBpart264, %357
  %424 = load i32, i32* @x.37
  %425 = load i32, i32* @y.38
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %423
  %432 = load i32, i32* @target_flags, align 4
  %433 = and i32 %432, 4096
  %434 = icmp ne i32 %433, 0
  %435 = load i32, i32* @x.37
  %436 = load i32, i32* @y.38
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBBpart285, label %originalBB66alteredBB

originalBBpart285:                                ; preds = %originalBB66
  br i1 %434, label %569, label %443

; <label>:443:                                    ; preds = %originalBBpart285
  %444 = load i64, i64* %17, align 8
  %445 = icmp ne i64 %444, 0
  br i1 %445, label %446, label %568

; <label>:446:                                    ; preds = %443
  %447 = load i32, i32* %23, align 4
  %448 = and i32 %447, 1024
  %449 = icmp ne i32 %448, 0
  br i1 %449, label %450, label %460

; <label>:450:                                    ; preds = %446
  %451 = load i64, i64* %17, align 8
  %452 = load %struct.function*, %struct.function** @cfun, align 8
  %453 = getelementptr inbounds %struct.function, %struct.function* %452, i32 0, i32 2
  %454 = load %struct.expr_status*, %struct.expr_status** %453, align 8
  %455 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %454, i32 0, i32 2
  %456 = load i32, i32* %455, align 8
  %457 = sext i32 %456 to i64
  %458 = sub nsw i64 %457, %451
  %459 = trunc i64 %458 to i32
  store i32 %459, i32* %455, align 8
  br label %551

; <label>:460:                                    ; preds = %446
  %461 = load i32, i32* @x.37
  %462 = load i32, i32* @y.38
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %originalBB87alteredBB, %460
  %469 = load i32, i32* @flag_defer_pop, align 4
  %470 = icmp ne i32 %469, 0
  %471 = load i32, i32* @x.37
  %472 = load i32, i32* @y.38
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br i1 %470, label %479, label %516

; <label>:479:                                    ; preds = %originalBBpart289
  %480 = load i32, i32* @x.37
  %481 = load i32, i32* @y.38
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %originalBB91alteredBB, %479
  %488 = load %struct.function*, %struct.function** @cfun, align 8
  %489 = getelementptr inbounds %struct.function, %struct.function* %488, i32 0, i32 2
  %490 = load %struct.expr_status*, %struct.expr_status** %489, align 8
  %491 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %490, i32 0, i32 1
  %492 = load i32, i32* %491, align 4
  %493 = icmp eq i32 %492, 0
  %494 = load i32, i32* @x.37
  %495 = load i32, i32* @y.38
  %496 = sub i32 %494, 1
  %497 = mul i32 %494, %496
  %498 = urem i32 %497, 2
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %499, %500
  br i1 %501, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %493, label %502, label %516

; <label>:502:                                    ; preds = %originalBBpart293
  %503 = load i32, i32* %23, align 4
  %504 = and i32 %503, 513
  %505 = icmp ne i32 %504, 0
  br i1 %505, label %516, label %506

; <label>:506:                                    ; preds = %502
  %507 = load i64, i64* %17, align 8
  %508 = load %struct.function*, %struct.function** @cfun, align 8
  %509 = getelementptr inbounds %struct.function, %struct.function* %508, i32 0, i32 2
  %510 = load %struct.expr_status*, %struct.expr_status** %509, align 8
  %511 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %510, i32 0, i32 0
  %512 = load i32, i32* %511, align 8
  %513 = sext i32 %512 to i64
  %514 = add nsw i64 %513, %507
  %515 = trunc i64 %514 to i32
  store i32 %515, i32* %511, align 8
  br label %534

; <label>:516:                                    ; preds = %502, %originalBBpart293, %originalBBpart289
  %517 = load i32, i32* @x.37
  %518 = load i32, i32* @y.38
  %519 = sub i32 %517, 1
  %520 = mul i32 %517, %519
  %521 = urem i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = icmp slt i32 %518, 10
  %524 = or i1 %522, %523
  br i1 %524, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %originalBB95alteredBB, %516
  %525 = load %struct.rtx_def*, %struct.rtx_def** %25, align 8
  call void @adjust_stack(%struct.rtx_def* %525)
  %526 = load i32, i32* @x.37
  %527 = load i32, i32* @y.38
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %534

; <label>:534:                                    ; preds = %originalBBpart297, %506
  %535 = load i32, i32* @x.37
  %536 = load i32, i32* @y.38
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %originalBB99alteredBB, %534
  %543 = load i32, i32* @x.37
  %544 = load i32, i32* @y.38
  %545 = sub i32 %543, 1
  %546 = mul i32 %543, %545
  %547 = urem i32 %546, 2
  %548 = icmp eq i32 %547, 0
  %549 = icmp slt i32 %544, 10
  %550 = or i1 %548, %549
  br i1 %550, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br label %551

; <label>:551:                                    ; preds = %originalBBpart2101, %450
  %552 = load i32, i32* @x.37
  %553 = load i32, i32* @y.38
  %554 = sub i32 %552, 1
  %555 = mul i32 %552, %554
  %556 = urem i32 %555, 2
  %557 = icmp eq i32 %556, 0
  %558 = icmp slt i32 %553, 10
  %559 = or i1 %557, %558
  br i1 %559, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %originalBB103alteredBB, %551
  %560 = load i32, i32* @x.37
  %561 = load i32, i32* @y.38
  %562 = sub i32 %560, 1
  %563 = mul i32 %560, %562
  %564 = urem i32 %563, 2
  %565 = icmp eq i32 %564, 0
  %566 = icmp slt i32 %561, 10
  %567 = or i1 %565, %566
  br i1 %567, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br label %568

; <label>:568:                                    ; preds = %originalBBpart2105, %443
  br label %576

; <label>:569:                                    ; preds = %originalBBpart285
  %570 = load i64, i64* %28, align 8
  %571 = icmp ne i64 %570, 0
  br i1 %571, label %572, label %575

; <label>:572:                                    ; preds = %569
  %573 = load i64, i64* %28, align 8
  %574 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %573)
  call void @anti_adjust_stack(%struct.rtx_def* %574)
  br label %575

; <label>:575:                                    ; preds = %572, %569
  br label %576

; <label>:576:                                    ; preds = %575, %568
  %577 = load i32, i32* @x.37
  %578 = load i32, i32* @y.38
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %originalBB107alteredBB, %576
  %585 = load i32, i32* @x.37
  %586 = load i32, i32* @y.38
  %587 = sub i32 %585, 1
  %588 = mul i32 %585, %587
  %589 = urem i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = icmp slt i32 %586, 10
  %592 = or i1 %590, %591
  br i1 %592, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %51
  %593 = load i32, i32* @target_flags, align 4
  %_ = sub i32 %593, 33554432
  %gen = mul i32 %_, 33554432
  %_1 = sub i32 0, %593
  %gen2 = add i32 %_1, 33554432
  %_3 = shl i32 %593, 33554432
  %_4 = sub i32 %593, 33554432
  %gen5 = mul i32 %_4, 33554432
  %594 = and i32 %593, 33554432
  %595 = icmp ne i32 %594, 0
  br label %originalBB

originalBB6alteredBB:                             ; preds = %originalBB6, %147
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 580, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.emit_call_1, i32 0, i32 0)) #8
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %164
  %596 = load i32, i32* %23, align 4
  %_11 = shl i32 %596, 512
  %_12 = sub i32 0, %596
  %gen13 = add i32 %_12, 512
  %597 = and i32 %596, 512
  %598 = icmp ne i32 %597, 0
  br label %originalBB10

originalBB17alteredBB:                            ; preds = %originalBB17, %211
  %599 = load %struct.rtx_def*, %struct.rtx_def** %32, align 8
  %600 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %599, i32 0, i32 1
  %601 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %600, i64 0, i64 1
  %602 = bitcast %union.rtunion_def* %601 to %struct.rtx_def**
  %603 = load %struct.rtx_def*, %struct.rtx_def** %602, align 8
  store %struct.rtx_def* %603, %struct.rtx_def** %32, align 8
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %233
  %604 = load %struct.rtx_def*, %struct.rtx_def** %22, align 8
  %605 = load %struct.rtx_def*, %struct.rtx_def** %32, align 8
  %606 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %605, i32 0, i32 1
  %607 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %606, i64 0, i64 1
  %608 = bitcast %union.rtunion_def* %607 to %struct.rtx_def**
  store %struct.rtx_def* %604, %struct.rtx_def** %608, align 8
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %261
  %609 = load i32, i32* %23, align 4
  %_26 = sub i32 %609, 513
  %gen27 = mul i32 %_26, 513
  %_28 = sub i32 0, %609
  %gen29 = add i32 %_28, 513
  %_30 = sub i32 0, %609
  %gen31 = add i32 %_30, 513
  %_32 = sub i32 %609, 513
  %gen33 = mul i32 %_32, 513
  %_34 = sub i32 0, %609
  %gen35 = add i32 %_34, 513
  %_36 = sub i32 %609, 513
  %gen37 = mul i32 %_36, 513
  %_38 = sub i32 0, %609
  %gen39 = add i32 %_38, 513
  %_40 = sub i32 %609, 513
  %gen41 = mul i32 %_40, 513
  %610 = and i32 %609, 513
  %611 = icmp ne i32 %610, 0
  br label %originalBB25

originalBB45alteredBB:                            ; preds = %originalBB45, %392
  %612 = load i64, i64* %28, align 8
  %613 = load i64, i64* %17, align 8
  %_46 = sub i64 %613, %612
  %gen47 = mul i64 %_46, %612
  %_48 = sub i64 0, %613
  %gen49 = add i64 %_48, %612
  %_50 = sub i64 %613, %612
  %gen51 = mul i64 %_50, %612
  %_52 = shl i64 %613, %612
  %_53 = shl i64 %613, %612
  %614 = sub nsw i64 %613, %612
  store i64 %614, i64* %17, align 8
  %615 = load i64, i64* %17, align 8
  %616 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %615)
  store %struct.rtx_def* %616, %struct.rtx_def** %25, align 8
  %617 = load i64, i64* %28, align 8
  %618 = load %struct.function*, %struct.function** @cfun, align 8
  %619 = getelementptr inbounds %struct.function, %struct.function* %618, i32 0, i32 2
  %620 = load %struct.expr_status*, %struct.expr_status** %619, align 8
  %621 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %620, i32 0, i32 2
  %622 = load i32, i32* %621, align 8
  %623 = sext i32 %622 to i64
  %_54 = shl i64 %623, %617
  %_55 = sub i64 0, %623
  %gen56 = add i64 %_55, %617
  %_57 = sub i64 0, %623
  %gen58 = add i64 %_57, %617
  %_59 = sub i64 0, %623
  %gen60 = add i64 %_59, %617
  %_61 = sub i64 %623, %617
  %gen62 = mul i64 %_61, %617
  %624 = sub nsw i64 %623, %617
  %625 = trunc i64 %624 to i32
  store i32 %625, i32* %621, align 8
  br label %originalBB45

originalBB66alteredBB:                            ; preds = %originalBB66, %423
  %626 = load i32, i32* @target_flags, align 4
  %_67 = sub i32 %626, 4096
  %gen68 = mul i32 %_67, 4096
  %_69 = sub i32 %626, 4096
  %gen70 = mul i32 %_69, 4096
  %_71 = sub i32 0, %626
  %gen72 = add i32 %_71, 4096
  %_73 = sub i32 %626, 4096
  %gen74 = mul i32 %_73, 4096
  %_75 = shl i32 %626, 4096
  %_76 = sub i32 %626, 4096
  %gen77 = mul i32 %_76, 4096
  %_78 = sub i32 0, %626
  %gen79 = add i32 %_78, 4096
  %_80 = sub i32 %626, 4096
  %gen81 = mul i32 %_80, 4096
  %_82 = sub i32 0, %626
  %gen83 = add i32 %_82, 4096
  %627 = and i32 %626, 4096
  %628 = icmp ne i32 %627, 0
  br label %originalBB66

originalBB87alteredBB:                            ; preds = %originalBB87, %460
  %629 = load i32, i32* @flag_defer_pop, align 4
  %630 = icmp ne i32 %629, 0
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %479
  %631 = load %struct.function*, %struct.function** @cfun, align 8
  %632 = getelementptr inbounds %struct.function, %struct.function* %631, i32 0, i32 2
  %633 = load %struct.expr_status*, %struct.expr_status** %632, align 8
  %634 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %633, i32 0, i32 1
  %635 = load i32, i32* %634, align 4
  %636 = icmp eq i32 %635, 0
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %516
  %637 = load %struct.rtx_def*, %struct.rtx_def** %25, align 8
  call void @adjust_stack(%struct.rtx_def* %637)
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %534
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %551
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %576
  br label %originalBB107
}

declare %struct.rtx_def* @emit_insns(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_reg_rtx(i32) #1

declare void @mark_reg_pointer(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_0(i32, i32) #1

declare void @emit_libcall_block(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #1

declare %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #1

declare void @preserve_temp_slots(%struct.rtx_def*) #1

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @emit_group_store(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @copy_blkmode_from_reg(%struct.rtx_def*, %struct.rtx_def*, %union.tree_node*) #1

declare void @emit_stack_restore(i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @restore_fixed_argument_area(%struct.rtx_def*, %struct.rtx_def*, i32, i32) #0 {
  %5 = alloca %struct.rtx_def*, align 8
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %5, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = lshr i32 %13, 16
  %15 = and i32 %14, 255
  store i32 %15, i32* %9, align 4
  %16 = load i32, i32* %9, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %19 = load i32, i32* %8, align 4
  %20 = sext i32 %19 to i64
  %21 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %18, i64 %20)
  %22 = call %struct.rtx_def* @memory_address(i32 %17, %struct.rtx_def* %21)
  %23 = call %struct.rtx_def* @gen_rtx_MEM(i32 %16, %struct.rtx_def* %22)
  store %struct.rtx_def* %23, %struct.rtx_def** %10, align 8
  %24 = load i32, i32* %9, align 4
  %25 = icmp ne i32 %24, 51
  br i1 %25, label %26, label %30

; <label>:26:                                     ; preds = %4
  %27 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %29 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %27, %struct.rtx_def* %28)
  br label %59

; <label>:30:                                     ; preds = %4
  %31 = load i32, i32* @x.39
  %32 = load i32, i32* @y.40
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %30
  %39 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %41 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %40)
  %42 = load i32, i32* %7, align 4
  %43 = load i32, i32* %8, align 4
  %44 = sub nsw i32 %42, %43
  %45 = add nsw i32 %44, 1
  %46 = sext i32 %45 to i64
  %47 = load i32, i32* @target_flags, align 4
  %48 = and i32 %47, 33554432
  %49 = icmp ne i32 %48, 0
  %50 = select i1 %49, i32 64, i32 32
  call void @move_by_pieces(%struct.rtx_def* %39, %struct.rtx_def* %41, i64 %46, i32 %50)
  %51 = load i32, i32* @x.39
  %52 = load i32, i32* @y.40
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %59

; <label>:59:                                     ; preds = %originalBBpart2, %26
  ret void

originalBBalteredBB:                              ; preds = %originalBB, %30
  %60 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %62 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %61)
  %63 = load i32, i32* %7, align 4
  %64 = load i32, i32* %8, align 4
  %_ = sub i32 0, %63
  %gen = add i32 %_, %64
  %_1 = shl i32 %63, %64
  %_2 = shl i32 %63, %64
  %_3 = sub i32 %63, %64
  %gen4 = mul i32 %_3, %64
  %_5 = shl i32 %63, %64
  %_6 = sub i32 %63, %64
  %gen7 = mul i32 %_6, %64
  %65 = sub nsw i32 %63, %64
  %_8 = sub i32 %65, 1
  %gen9 = mul i32 %_8, 1
  %_10 = sub i32 0, %65
  %gen11 = add i32 %_10, 1
  %66 = add nsw i32 %65, 1
  %67 = sext i32 %66 to i64
  %68 = load i32, i32* @target_flags, align 4
  %_12 = sub i32 0, %68
  %gen13 = add i32 %_12, 33554432
  %_14 = sub i32 %68, 33554432
  %gen15 = mul i32 %_14, 33554432
  %_16 = shl i32 %68, 33554432
  %_17 = sub i32 %68, 33554432
  %gen18 = mul i32 %_17, 33554432
  %_19 = shl i32 %68, 33554432
  %69 = and i32 %68, 33554432
  %70 = icmp ne i32 %69, 0
  %71 = select i1 %70, i32 64, i32 32
  call void @move_by_pieces(%struct.rtx_def* %60, %struct.rtx_def* %62, i64 %67, i32 %71)
  br label %originalBB
}

declare %struct.rtx_def* @emit_block_move(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @validize_mem(%struct.rtx_def*) #1

; Function Attrs: nounwind
declare void @free(i8*) #4

declare void @replace_call_placeholder(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @emit_call_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_uuuu(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare void @clear_pending_stack_adjust() #1

declare %struct.rtx_def* @gen_rtx(i32, i32, ...) #1

declare void @save_stack_pointer() #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @emit_library_call_value_1(i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.__va_list_tag*) #0 {
  %8 = load i32, i32* @x.41
  %9 = load i32, i32* @y.42
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %7
  %16 = alloca i32, align 4
  %17 = alloca %struct.rtx_def*, align 8
  %18 = alloca %struct.rtx_def*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca %struct.__va_list_tag*, align 8
  %23 = alloca %struct.args_size, align 8
  %24 = alloca %struct.args_size, align 8
  %25 = alloca i32, align 4
  %26 = alloca %struct.rtx_def*, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca %struct.args_size, align 8
  %30 = alloca %struct.rtx_def*, align 8
  %31 = alloca %struct.ix86_args, align 4
  %32 = alloca %struct.arg*, align 8
  %33 = alloca i32, align 4
  %34 = alloca %struct.rtx_def*, align 8
  %35 = alloca %struct.rtx_def*, align 8
  %36 = alloca %struct.rtx_def*, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca %struct.rtx_def*, align 8
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca %struct.rtx_def*, align 8
  %46 = alloca i32, align 4
  %47 = alloca i8*, align 8
  %48 = alloca %struct.rtx_def*, align 8
  %49 = alloca %struct.rtx_def*, align 8
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  %53 = alloca %struct.rtx_def*, align 8
  %54 = alloca i32, align 4
  %55 = alloca %struct.rtx_def*, align 8
  %56 = alloca %struct.rtx_def*, align 8
  %57 = alloca i32, align 4
  %58 = alloca i32, align 4
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca %struct.rtx_def*, align 8
  %63 = alloca %struct.rtx_def*, align 8
  %64 = alloca %struct.rtx_def*, align 8
  %65 = alloca i32, align 4
  %66 = alloca %struct.rtx_def*, align 8
  %67 = alloca %struct.rtx_def*, align 8
  %68 = alloca %struct.rtx_def*, align 8
  %69 = alloca %struct.rtx_def*, align 8
  %70 = alloca %struct.rtx_def*, align 8
  %71 = alloca i32, align 4
  %72 = alloca i32, align 4
  %73 = alloca %struct.rtx_def*, align 8
  %74 = alloca i32, align 4
  %75 = alloca %struct.rtx_def*, align 8
  store i32 %0, i32* %16, align 4
  store %struct.rtx_def* %1, %struct.rtx_def** %17, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %18, align 8
  store i32 %3, i32* %19, align 4
  store i32 %4, i32* %20, align 4
  store i32 %5, i32* %21, align 4
  store %struct.__va_list_tag* %6, %struct.__va_list_tag** %22, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %30, align 8
  %76 = load %struct.function*, %struct.function** @cfun, align 8
  %77 = getelementptr inbounds %struct.function, %struct.function* %76, i32 0, i32 2
  %78 = load %struct.expr_status*, %struct.expr_status** %77, align 8
  %79 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %78, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  store i32 %80, i32* %33, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %34, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %35, align 8
  store i32 0, i32* %37, align 4
  store i32 0, i32* %38, align 4
  store i32 0, i32* %40, align 4
  store i32 -1, i32* %43, align 4
  store i32 0, i32* %44, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %45, align 8
  %81 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  store i32 %81, i32* %46, align 4
  %82 = load i8*, i8** @stack_usage_map, align 8
  store i8* %82, i8** %47, align 8
  store i32 0, i32* %40, align 4
  store i32 16, i32* %39, align 4
  %83 = load i32, i32* %19, align 4
  %84 = load i32, i32* @x.41
  %85 = load i32, i32* @y.42
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %83, label %175 [
    i32 0, label %92
    i32 1, label %109
    i32 2, label %112
    i32 3, label %115
    i32 4, label %118
    i32 5, label %137
    i32 6, label %156
    i32 7, label %157
    i32 8, label %174
  ]

; <label>:92:                                     ; preds = %originalBBpart2
  %93 = load i32, i32* @x.41
  %94 = load i32, i32* @y.42
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %92
  %101 = load i32, i32* @x.41
  %102 = load i32, i32* @y.42
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %175

; <label>:109:                                    ; preds = %originalBBpart2
  %110 = load i32, i32* %39, align 4
  %111 = or i32 %110, 1
  store i32 %111, i32* %39, align 4
  br label %175

; <label>:112:                                    ; preds = %originalBBpart2
  %113 = load i32, i32* %39, align 4
  %114 = or i32 %113, 512
  store i32 %114, i32* %39, align 4
  br label %175

; <label>:115:                                    ; preds = %originalBBpart2
  %116 = load i32, i32* %39, align 4
  %117 = or i32 %116, 4097
  store i32 %117, i32* %39, align 4
  br label %175

; <label>:118:                                    ; preds = %originalBBpart2
  %119 = load i32, i32* @x.41
  %120 = load i32, i32* @y.42
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %118
  %127 = load i32, i32* %39, align 4
  %128 = or i32 %127, 4608
  store i32 %128, i32* %39, align 4
  %129 = load i32, i32* @x.41
  %130 = load i32, i32* @y.42
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart215, label %originalBB6alteredBB

originalBBpart215:                                ; preds = %originalBB6
  br label %175

; <label>:137:                                    ; preds = %originalBBpart2
  %138 = load i32, i32* @x.41
  %139 = load i32, i32* @y.42
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %137
  %146 = load i32, i32* %39, align 4
  %147 = or i32 %146, 2
  store i32 %147, i32* %39, align 4
  %148 = load i32, i32* @x.41
  %149 = load i32, i32* @y.42
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart222, label %originalBB17alteredBB

originalBBpart222:                                ; preds = %originalBB17
  br label %175

; <label>:156:                                    ; preds = %originalBBpart2
  store i32 2, i32* %39, align 4
  br label %175

; <label>:157:                                    ; preds = %originalBBpart2
  %158 = load i32, i32* @x.41
  %159 = load i32, i32* @y.42
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %originalBB24alteredBB, %157
  store i32 2048, i32* %39, align 4
  %166 = load i32, i32* @x.41
  %167 = load i32, i32* @y.42
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br label %175

; <label>:174:                                    ; preds = %originalBBpart2
  store i32 32, i32* %39, align 4
  br label %175

; <label>:175:                                    ; preds = %174, %originalBBpart227, %156, %originalBBpart222, %originalBBpart215, %115, %112, %109, %originalBBpart24, %originalBBpart2
  %176 = load %struct.rtx_def*, %struct.rtx_def** %17, align 8
  store %struct.rtx_def* %176, %struct.rtx_def** %26, align 8
  %177 = load %struct.function*, %struct.function** @cfun, align 8
  %178 = getelementptr inbounds %struct.function, %struct.function* %177, i32 0, i32 53
  %179 = load i32, i32* %178, align 4
  %180 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %181 = icmp slt i32 %179, %180
  br i1 %181, label %182, label %202

; <label>:182:                                    ; preds = %175
  %183 = load i32, i32* @x.41
  %184 = load i32, i32* @y.42
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %originalBB29alteredBB, %182
  %191 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %192 = load %struct.function*, %struct.function** @cfun, align 8
  %193 = getelementptr inbounds %struct.function, %struct.function* %192, i32 0, i32 53
  store i32 %191, i32* %193, align 4
  %194 = load i32, i32* @x.41
  %195 = load i32, i32* @y.42
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %202

; <label>:202:                                    ; preds = %originalBBpart231, %175
  %203 = load i32, i32* %20, align 4
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %205, label %249

; <label>:205:                                    ; preds = %202
  %206 = load i32, i32* %20, align 4
  %207 = call %union.tree_node* @type_for_mode(i32 %206, i32 0)
  %208 = call i32 @aggregate_value_p(%union.tree_node* %207)
  %209 = icmp ne i32 %208, 0
  br i1 %209, label %210, label %249

; <label>:210:                                    ; preds = %205
  %211 = load i32, i32* %20, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i32
  store i32 %215, i32* %38, align 4
  %216 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %217 = icmp ne %struct.rtx_def* %216, null
  br i1 %217, label %218, label %242

; <label>:218:                                    ; preds = %210
  %219 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %220 = bitcast %struct.rtx_def* %219 to i32*
  %221 = load i32, i32* %220, align 8
  %222 = and i32 %221, 65535
  %223 = icmp eq i32 %222, 66
  br i1 %223, label %224, label %242

; <label>:224:                                    ; preds = %218
  %225 = load i32, i32* @x.41
  %226 = load i32, i32* @y.42
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %originalBB33alteredBB, %224
  %233 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  store %struct.rtx_def* %233, %struct.rtx_def** %35, align 8
  %234 = load i32, i32* @x.41
  %235 = load i32, i32* @y.42
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %246

; <label>:242:                                    ; preds = %218, %210
  %243 = load i32, i32* %20, align 4
  %244 = call %union.tree_node* @type_for_mode(i32 %243, i32 0)
  %245 = call %struct.rtx_def* @assign_temp(%union.tree_node* %244, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %245, %struct.rtx_def** %35, align 8
  br label %246

; <label>:246:                                    ; preds = %242, %originalBBpart235
  %247 = load i32, i32* %39, align 4
  %248 = and i32 %247, -4610
  store i32 %248, i32* %39, align 4
  br label %249

; <label>:249:                                    ; preds = %246, %205, %202
  %250 = load i32, i32* @x.41
  %251 = load i32, i32* @y.42
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %originalBB37alteredBB, %249
  %258 = load i32, i32* %21, align 4
  %259 = add nsw i32 %258, 1
  %260 = sext i32 %259 to i64
  %261 = mul i64 %260, 72
  %262 = alloca i8, i64 %261, align 16
  %263 = bitcast i8* %262 to %struct.arg*
  store %struct.arg* %263, %struct.arg** %32, align 8
  %264 = load %struct.arg*, %struct.arg** %32, align 8
  %265 = bitcast %struct.arg* %264 to i8*
  %266 = load i32, i32* %21, align 4
  %267 = add nsw i32 %266, 1
  %268 = sext i32 %267 to i64
  %269 = mul i64 %268, 72
  call void @llvm.memset.p0i8.i64(i8* %265, i8 0, i64 %269, i32 1, i1 false)
  %270 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  call void @init_cumulative_args(%struct.ix86_args* %31, %union.tree_node* null, %struct.rtx_def* %270)
  %271 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  store i64 0, i64* %271, align 8
  %272 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 1
  store %union.tree_node* null, %union.tree_node** %272, align 8
  store i32 0, i32* %28, align 4
  %273 = load i32, i32* %39, align 4
  %274 = and i32 %273, 4096
  %275 = icmp ne i32 %274, 0
  %276 = load i32, i32* @x.41
  %277 = load i32, i32* @y.42
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBBpart267, label %originalBB37alteredBB

originalBBpart267:                                ; preds = %originalBB37
  br i1 %275, label %284, label %285

; <label>:284:                                    ; preds = %originalBBpart267
  call void @start_sequence()
  br label %285

; <label>:285:                                    ; preds = %284, %originalBBpart267
  %286 = load i32, i32* @x.41
  %287 = load i32, i32* @y.42
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %originalBB69alteredBB, %285
  call void @push_temp_slots()
  %294 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %295 = icmp ne %struct.rtx_def* %294, null
  %296 = load i32, i32* @x.41
  %297 = load i32, i32* @y.42
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br i1 %295, label %304, label %533

; <label>:304:                                    ; preds = %originalBBpart271
  %305 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  %306 = icmp eq %struct.rtx_def* %305, null
  br i1 %306, label %307, label %533

; <label>:307:                                    ; preds = %304
  %308 = load i32, i32* %37, align 4
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %533, label %310

; <label>:310:                                    ; preds = %307
  %311 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %312 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %311, i32 0, i32 1
  %313 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %312, i64 0, i64 0
  %314 = bitcast %union.rtunion_def* %313 to %struct.rtx_def**
  %315 = load %struct.rtx_def*, %struct.rtx_def** %314, align 8
  store %struct.rtx_def* %315, %struct.rtx_def** %48, align 8
  %316 = load i32, i32* %21, align 4
  %317 = add nsw i32 %316, 1
  store i32 %317, i32* %21, align 4
  %318 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %319 = bitcast %struct.rtx_def* %318 to i32*
  %320 = load i32, i32* %319, align 8
  %321 = and i32 %320, 65535
  %322 = icmp ne i32 %321, 61
  br i1 %322, label %323, label %428

; <label>:323:                                    ; preds = %310
  %324 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %325 = bitcast %struct.rtx_def* %324 to i32*
  %326 = load i32, i32* %325, align 8
  %327 = and i32 %326, 65535
  %328 = icmp ne i32 %327, 66
  br i1 %328, label %329, label %428

; <label>:329:                                    ; preds = %323
  %330 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %331 = bitcast %struct.rtx_def* %330 to i32*
  %332 = load i32, i32* %331, align 8
  %333 = and i32 %332, 65535
  %334 = icmp eq i32 %333, 67
  br i1 %334, label %428, label %335

; <label>:335:                                    ; preds = %329
  %336 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %337 = bitcast %struct.rtx_def* %336 to i32*
  %338 = load i32, i32* %337, align 8
  %339 = and i32 %338, 65535
  %340 = icmp eq i32 %339, 68
  br i1 %340, label %428, label %341

; <label>:341:                                    ; preds = %335
  %342 = load i32, i32* @x.41
  %343 = load i32, i32* @y.42
  %344 = sub i32 %342, 1
  %345 = mul i32 %342, %344
  %346 = urem i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %347, %348
  br i1 %349, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %originalBB73alteredBB, %341
  %350 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %351 = bitcast %struct.rtx_def* %350 to i32*
  %352 = load i32, i32* %351, align 8
  %353 = and i32 %352, 65535
  %354 = icmp eq i32 %353, 54
  %355 = load i32, i32* @x.41
  %356 = load i32, i32* @y.42
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBBpart278, label %originalBB73alteredBB

originalBBpart278:                                ; preds = %originalBB73
  br i1 %354, label %428, label %363

; <label>:363:                                    ; preds = %originalBBpart278
  %364 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %365 = bitcast %struct.rtx_def* %364 to i32*
  %366 = load i32, i32* %365, align 8
  %367 = and i32 %366, 65535
  %368 = icmp eq i32 %367, 55
  br i1 %368, label %428, label %369

; <label>:369:                                    ; preds = %363
  %370 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %371 = bitcast %struct.rtx_def* %370 to i32*
  %372 = load i32, i32* %371, align 8
  %373 = and i32 %372, 65535
  %374 = icmp eq i32 %373, 58
  br i1 %374, label %428, label %375

; <label>:375:                                    ; preds = %369
  %376 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %377 = bitcast %struct.rtx_def* %376 to i32*
  %378 = load i32, i32* %377, align 8
  %379 = and i32 %378, 65535
  %380 = icmp eq i32 %379, 134
  br i1 %380, label %428, label %381

; <label>:381:                                    ; preds = %375
  %382 = load i32, i32* @x.41
  %383 = load i32, i32* @y.42
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %originalBB80alteredBB, %381
  %390 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %391 = bitcast %struct.rtx_def* %390 to i32*
  %392 = load i32, i32* %391, align 8
  %393 = and i32 %392, 65535
  %394 = icmp eq i32 %393, 56
  %395 = load i32, i32* @x.41
  %396 = load i32, i32* @y.42
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart289, label %originalBB80alteredBB

originalBBpart289:                                ; preds = %originalBB80
  br i1 %394, label %428, label %403

; <label>:403:                                    ; preds = %originalBBpart289
  %404 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %405 = bitcast %struct.rtx_def* %404 to i32*
  %406 = load i32, i32* %405, align 8
  %407 = and i32 %406, 65535
  %408 = icmp eq i32 %407, 140
  br i1 %408, label %428, label %409

; <label>:409:                                    ; preds = %403
  %410 = load i32, i32* @x.41
  %411 = load i32, i32* @y.42
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %originalBB91alteredBB, %409
  %418 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %419 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %418, %struct.rtx_def* null)
  store %struct.rtx_def* %419, %struct.rtx_def** %48, align 8
  %420 = load i32, i32* @x.41
  %421 = load i32, i32* @y.42
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br label %428

; <label>:428:                                    ; preds = %originalBBpart293, %403, %originalBBpart289, %375, %369, %363, %originalBBpart278, %335, %329, %323, %310
  %429 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %430 = load %struct.arg*, %struct.arg** %32, align 8
  %431 = load i32, i32* %28, align 4
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds %struct.arg, %struct.arg* %430, i64 %432
  %434 = getelementptr inbounds %struct.arg, %struct.arg* %433, i32 0, i32 0
  store %struct.rtx_def* %429, %struct.rtx_def** %434, align 8
  %435 = load i32, i32* @target_flags, align 4
  %436 = and i32 %435, 33554432
  %437 = icmp ne i32 %436, 0
  %438 = select i1 %437, i32 5, i32 4
  %439 = load %struct.arg*, %struct.arg** %32, align 8
  %440 = load i32, i32* %28, align 4
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds %struct.arg, %struct.arg* %439, i64 %441
  %443 = getelementptr inbounds %struct.arg, %struct.arg* %442, i32 0, i32 1
  store i32 %438, i32* %443, align 8
  %444 = load %struct.arg*, %struct.arg** %32, align 8
  %445 = load i32, i32* %28, align 4
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds %struct.arg, %struct.arg* %444, i64 %446
  %448 = getelementptr inbounds %struct.arg, %struct.arg* %447, i32 0, i32 3
  store i32 0, i32* %448, align 8
  %449 = load i32, i32* @target_flags, align 4
  %450 = and i32 %449, 33554432
  %451 = icmp ne i32 %450, 0
  %452 = select i1 %451, i32 5, i32 4
  %453 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %31, i32 %452, %union.tree_node* null, i32 1)
  %454 = load %struct.arg*, %struct.arg** %32, align 8
  %455 = load i32, i32* %28, align 4
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds %struct.arg, %struct.arg* %454, i64 %456
  %458 = getelementptr inbounds %struct.arg, %struct.arg* %457, i32 0, i32 2
  store %struct.rtx_def* %453, %struct.rtx_def** %458, align 8
  %459 = load i32, i32* @target_flags, align 4
  %460 = and i32 %459, 33554432
  %461 = icmp ne i32 %460, 0
  %462 = select i1 %461, i32 5, i32 4
  %463 = load %struct.arg*, %struct.arg** %32, align 8
  %464 = load i32, i32* %28, align 4
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds %struct.arg, %struct.arg* %463, i64 %465
  %467 = getelementptr inbounds %struct.arg, %struct.arg* %466, i32 0, i32 2
  %468 = load %struct.rtx_def*, %struct.rtx_def** %467, align 8
  %469 = icmp ne %struct.rtx_def* %468, null
  %470 = zext i1 %469 to i32
  %471 = load %struct.arg*, %struct.arg** %32, align 8
  %472 = load i32, i32* %28, align 4
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds %struct.arg, %struct.arg* %471, i64 %473
  %475 = getelementptr inbounds %struct.arg, %struct.arg* %474, i32 0, i32 4
  %476 = load %struct.arg*, %struct.arg** %32, align 8
  %477 = load i32, i32* %28, align 4
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds %struct.arg, %struct.arg* %476, i64 %478
  %480 = getelementptr inbounds %struct.arg, %struct.arg* %479, i32 0, i32 5
  call void @locate_and_pad_parm(i32 %462, %union.tree_node* null, i32 %470, %union.tree_node* null, %struct.args_size* %23, %struct.args_size* %475, %struct.args_size* %480, %struct.args_size* %29)
  %481 = load %struct.arg*, %struct.arg** %32, align 8
  %482 = load i32, i32* %28, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.arg, %struct.arg* %481, i64 %483
  %485 = getelementptr inbounds %struct.arg, %struct.arg* %484, i32 0, i32 2
  %486 = load %struct.rtx_def*, %struct.rtx_def** %485, align 8
  %487 = icmp eq %struct.rtx_def* %486, null
  br i1 %487, label %515, label %488

; <label>:488:                                    ; preds = %428
  %489 = load %struct.arg*, %struct.arg** %32, align 8
  %490 = load i32, i32* %28, align 4
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds %struct.arg, %struct.arg* %489, i64 %491
  %493 = getelementptr inbounds %struct.arg, %struct.arg* %492, i32 0, i32 3
  %494 = load i32, i32* %493, align 8
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %515, label %496

; <label>:496:                                    ; preds = %488
  %497 = load i32, i32* @x.41
  %498 = load i32, i32* @y.42
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %originalBB95alteredBB, %496
  %505 = load i32, i32* %40, align 4
  %506 = icmp sgt i32 %505, 0
  %507 = load i32, i32* @x.41
  %508 = load i32, i32* @y.42
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br i1 %506, label %515, label %526

; <label>:515:                                    ; preds = %originalBBpart297, %488, %428
  %516 = load %struct.arg*, %struct.arg** %32, align 8
  %517 = load i32, i32* %28, align 4
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds %struct.arg, %struct.arg* %516, i64 %518
  %520 = getelementptr inbounds %struct.arg, %struct.arg* %519, i32 0, i32 5
  %521 = getelementptr inbounds %struct.args_size, %struct.args_size* %520, i32 0, i32 0
  %522 = load i64, i64* %521, align 8
  %523 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %524 = load i64, i64* %523, align 8
  %525 = add nsw i64 %524, %522
  store i64 %525, i64* %523, align 8
  br label %526

; <label>:526:                                    ; preds = %515, %originalBBpart297
  %527 = load i32, i32* @target_flags, align 4
  %528 = and i32 %527, 33554432
  %529 = icmp ne i32 %528, 0
  %530 = select i1 %529, i32 5, i32 4
  call void @function_arg_advance(%struct.ix86_args* %31, i32 %530, %union.tree_node* null, i32 1)
  %531 = load i32, i32* %28, align 4
  %532 = add nsw i32 %531, 1
  store i32 %532, i32* %28, align 4
  br label %533

; <label>:533:                                    ; preds = %526, %307, %304, %originalBBpart271
  br label %534

; <label>:534:                                    ; preds = %originalBBpart2189, %533
  %535 = load i32, i32* %28, align 4
  %536 = load i32, i32* %21, align 4
  %537 = icmp slt i32 %535, %536
  br i1 %537, label %538, label %936

; <label>:538:                                    ; preds = %534
  %539 = load %struct.__va_list_tag*, %struct.__va_list_tag** %22, align 8
  %540 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %539, i32 0, i32 0
  %541 = load i32, i32* %540, align 8
  %542 = icmp ule i32 %541, 40
  br i1 %542, label %543, label %565

; <label>:543:                                    ; preds = %538
  %544 = load i32, i32* @x.41
  %545 = load i32, i32* @y.42
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %originalBB99alteredBB, %543
  %552 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %539, i32 0, i32 3
  %553 = load i8*, i8** %552, align 8
  %554 = getelementptr i8, i8* %553, i32 %541
  %555 = bitcast i8* %554 to %struct.rtx_def**
  %556 = add i32 %541, 8
  store i32 %556, i32* %540, align 8
  %557 = load i32, i32* @x.41
  %558 = load i32, i32* @y.42
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2109, label %originalBB99alteredBB

originalBBpart2109:                               ; preds = %originalBB99
  br label %570

; <label>:565:                                    ; preds = %538
  %566 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %539, i32 0, i32 2
  %567 = load i8*, i8** %566, align 8
  %568 = bitcast i8* %567 to %struct.rtx_def**
  %569 = getelementptr i8, i8* %567, i32 8
  store i8* %569, i8** %566, align 8
  br label %570

; <label>:570:                                    ; preds = %565, %originalBBpart2109
  %571 = phi %struct.rtx_def** [ %555, %originalBBpart2109 ], [ %568, %565 ]
  %572 = load %struct.rtx_def*, %struct.rtx_def** %571, align 8
  store %struct.rtx_def* %572, %struct.rtx_def** %49, align 8
  %573 = load %struct.__va_list_tag*, %struct.__va_list_tag** %22, align 8
  %574 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %573, i32 0, i32 0
  %575 = load i32, i32* %574, align 8
  %576 = icmp ule i32 %575, 40
  br i1 %576, label %577, label %583

; <label>:577:                                    ; preds = %570
  %578 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %573, i32 0, i32 3
  %579 = load i8*, i8** %578, align 8
  %580 = getelementptr i8, i8* %579, i32 %575
  %581 = bitcast i8* %580 to i32*
  %582 = add i32 %575, 8
  store i32 %582, i32* %574, align 8
  br label %604

; <label>:583:                                    ; preds = %570
  %584 = load i32, i32* @x.41
  %585 = load i32, i32* @y.42
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %originalBB111alteredBB, %583
  %592 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %573, i32 0, i32 2
  %593 = load i8*, i8** %592, align 8
  %594 = bitcast i8* %593 to i32*
  %595 = getelementptr i8, i8* %593, i32 8
  store i8* %595, i8** %592, align 8
  %596 = load i32, i32* @x.41
  %597 = load i32, i32* @y.42
  %598 = sub i32 %596, 1
  %599 = mul i32 %596, %598
  %600 = urem i32 %599, 2
  %601 = icmp eq i32 %600, 0
  %602 = icmp slt i32 %597, 10
  %603 = or i1 %601, %602
  br i1 %603, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %604

; <label>:604:                                    ; preds = %originalBBpart2113, %577
  %605 = phi i32* [ %581, %577 ], [ %594, %originalBBpart2113 ]
  %606 = load i32, i32* %605, align 4
  store i32 %606, i32* %50, align 4
  %607 = load i32, i32* %50, align 4
  %608 = icmp eq i32 %607, 51
  br i1 %608, label %624, label %609

; <label>:609:                                    ; preds = %604
  %610 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %611 = bitcast %struct.rtx_def* %610 to i32*
  %612 = load i32, i32* %611, align 8
  %613 = lshr i32 %612, 16
  %614 = and i32 %613, 255
  %615 = load i32, i32* %50, align 4
  %616 = icmp ne i32 %614, %615
  br i1 %616, label %617, label %625

; <label>:617:                                    ; preds = %609
  %618 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %619 = bitcast %struct.rtx_def* %618 to i32*
  %620 = load i32, i32* %619, align 8
  %621 = lshr i32 %620, 16
  %622 = and i32 %621, 255
  %623 = icmp ne i32 %622, 0
  br i1 %623, label %624, label %625

; <label>:624:                                    ; preds = %617, %604
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 3641, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.emit_library_call_value_1, i32 0, i32 0)) #8
  unreachable

; <label>:625:                                    ; preds = %617, %609
  %626 = load i32, i32* @x.41
  %627 = load i32, i32* @y.42
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %originalBB115alteredBB, %625
  %634 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %635 = bitcast %struct.rtx_def* %634 to i32*
  %636 = load i32, i32* %635, align 8
  %637 = and i32 %636, 65535
  %638 = icmp ne i32 %637, 61
  %639 = load i32, i32* @x.41
  %640 = load i32, i32* @y.42
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBBpart2119, label %originalBB115alteredBB

originalBBpart2119:                               ; preds = %originalBB115
  br i1 %638, label %647, label %768

; <label>:647:                                    ; preds = %originalBBpart2119
  %648 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %649 = bitcast %struct.rtx_def* %648 to i32*
  %650 = load i32, i32* %649, align 8
  %651 = and i32 %650, 65535
  %652 = icmp ne i32 %651, 66
  br i1 %652, label %653, label %768

; <label>:653:                                    ; preds = %647
  %654 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %655 = bitcast %struct.rtx_def* %654 to i32*
  %656 = load i32, i32* %655, align 8
  %657 = and i32 %656, 65535
  %658 = icmp eq i32 %657, 67
  br i1 %658, label %768, label %659

; <label>:659:                                    ; preds = %653
  %660 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %661 = bitcast %struct.rtx_def* %660 to i32*
  %662 = load i32, i32* %661, align 8
  %663 = and i32 %662, 65535
  %664 = icmp eq i32 %663, 68
  br i1 %664, label %768, label %665

; <label>:665:                                    ; preds = %659
  %666 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %667 = bitcast %struct.rtx_def* %666 to i32*
  %668 = load i32, i32* %667, align 8
  %669 = and i32 %668, 65535
  %670 = icmp eq i32 %669, 54
  br i1 %670, label %768, label %671

; <label>:671:                                    ; preds = %665
  %672 = load i32, i32* @x.41
  %673 = load i32, i32* @y.42
  %674 = sub i32 %672, 1
  %675 = mul i32 %672, %674
  %676 = urem i32 %675, 2
  %677 = icmp eq i32 %676, 0
  %678 = icmp slt i32 %673, 10
  %679 = or i1 %677, %678
  br i1 %679, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %originalBB121alteredBB, %671
  %680 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %681 = bitcast %struct.rtx_def* %680 to i32*
  %682 = load i32, i32* %681, align 8
  %683 = and i32 %682, 65535
  %684 = icmp eq i32 %683, 55
  %685 = load i32, i32* @x.41
  %686 = load i32, i32* @y.42
  %687 = sub i32 %685, 1
  %688 = mul i32 %685, %687
  %689 = urem i32 %688, 2
  %690 = icmp eq i32 %689, 0
  %691 = icmp slt i32 %686, 10
  %692 = or i1 %690, %691
  br i1 %692, label %originalBBpart2127, label %originalBB121alteredBB

originalBBpart2127:                               ; preds = %originalBB121
  br i1 %684, label %768, label %693

; <label>:693:                                    ; preds = %originalBBpart2127
  %694 = load i32, i32* @x.41
  %695 = load i32, i32* @y.42
  %696 = sub i32 %694, 1
  %697 = mul i32 %694, %696
  %698 = urem i32 %697, 2
  %699 = icmp eq i32 %698, 0
  %700 = icmp slt i32 %695, 10
  %701 = or i1 %699, %700
  br i1 %701, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %originalBB129alteredBB, %693
  %702 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %703 = bitcast %struct.rtx_def* %702 to i32*
  %704 = load i32, i32* %703, align 8
  %705 = and i32 %704, 65535
  %706 = icmp eq i32 %705, 58
  %707 = load i32, i32* @x.41
  %708 = load i32, i32* @y.42
  %709 = sub i32 %707, 1
  %710 = mul i32 %707, %709
  %711 = urem i32 %710, 2
  %712 = icmp eq i32 %711, 0
  %713 = icmp slt i32 %708, 10
  %714 = or i1 %712, %713
  br i1 %714, label %originalBBpart2142, label %originalBB129alteredBB

originalBBpart2142:                               ; preds = %originalBB129
  br i1 %706, label %768, label %715

; <label>:715:                                    ; preds = %originalBBpart2142
  %716 = load i32, i32* @x.41
  %717 = load i32, i32* @y.42
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %originalBB144alteredBB, %715
  %724 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %725 = bitcast %struct.rtx_def* %724 to i32*
  %726 = load i32, i32* %725, align 8
  %727 = and i32 %726, 65535
  %728 = icmp eq i32 %727, 134
  %729 = load i32, i32* @x.41
  %730 = load i32, i32* @y.42
  %731 = sub i32 %729, 1
  %732 = mul i32 %729, %731
  %733 = urem i32 %732, 2
  %734 = icmp eq i32 %733, 0
  %735 = icmp slt i32 %730, 10
  %736 = or i1 %734, %735
  br i1 %736, label %originalBBpart2155, label %originalBB144alteredBB

originalBBpart2155:                               ; preds = %originalBB144
  br i1 %728, label %768, label %737

; <label>:737:                                    ; preds = %originalBBpart2155
  %738 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %739 = bitcast %struct.rtx_def* %738 to i32*
  %740 = load i32, i32* %739, align 8
  %741 = and i32 %740, 65535
  %742 = icmp eq i32 %741, 56
  br i1 %742, label %768, label %743

; <label>:743:                                    ; preds = %737
  %744 = load i32, i32* @x.41
  %745 = load i32, i32* @y.42
  %746 = sub i32 %744, 1
  %747 = mul i32 %744, %746
  %748 = urem i32 %747, 2
  %749 = icmp eq i32 %748, 0
  %750 = icmp slt i32 %745, 10
  %751 = or i1 %749, %750
  br i1 %751, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %originalBB157alteredBB, %743
  %752 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %753 = bitcast %struct.rtx_def* %752 to i32*
  %754 = load i32, i32* %753, align 8
  %755 = and i32 %754, 65535
  %756 = icmp eq i32 %755, 140
  %757 = load i32, i32* @x.41
  %758 = load i32, i32* @y.42
  %759 = sub i32 %757, 1
  %760 = mul i32 %757, %759
  %761 = urem i32 %760, 2
  %762 = icmp eq i32 %761, 0
  %763 = icmp slt i32 %758, 10
  %764 = or i1 %762, %763
  br i1 %764, label %originalBBpart2162, label %originalBB157alteredBB

originalBBpart2162:                               ; preds = %originalBB157
  br i1 %756, label %768, label %765

; <label>:765:                                    ; preds = %originalBBpart2162
  %766 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %767 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %766, %struct.rtx_def* null)
  store %struct.rtx_def* %767, %struct.rtx_def** %49, align 8
  br label %768

; <label>:768:                                    ; preds = %765, %originalBBpart2162, %737, %originalBBpart2155, %originalBBpart2142, %originalBBpart2127, %665, %659, %653, %647, %originalBBpart2119
  %769 = load i32, i32* @x.41
  %770 = load i32, i32* @y.42
  %771 = sub i32 %769, 1
  %772 = mul i32 %769, %771
  %773 = urem i32 %772, 2
  %774 = icmp eq i32 %773, 0
  %775 = icmp slt i32 %770, 10
  %776 = or i1 %774, %775
  br i1 %776, label %originalBB164, label %originalBB164alteredBB

originalBB164:                                    ; preds = %originalBB164alteredBB, %768
  %777 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %778 = load %struct.arg*, %struct.arg** %32, align 8
  %779 = load i32, i32* %28, align 4
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds %struct.arg, %struct.arg* %778, i64 %780
  %782 = getelementptr inbounds %struct.arg, %struct.arg* %781, i32 0, i32 0
  store %struct.rtx_def* %777, %struct.rtx_def** %782, align 8
  %783 = load i32, i32* %50, align 4
  %784 = load %struct.arg*, %struct.arg** %32, align 8
  %785 = load i32, i32* %28, align 4
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds %struct.arg, %struct.arg* %784, i64 %786
  %788 = getelementptr inbounds %struct.arg, %struct.arg* %787, i32 0, i32 1
  store i32 %783, i32* %788, align 8
  %789 = load i32, i32* %50, align 4
  %790 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %31, i32 %789, %union.tree_node* null, i32 1)
  %791 = load %struct.arg*, %struct.arg** %32, align 8
  %792 = load i32, i32* %28, align 4
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds %struct.arg, %struct.arg* %791, i64 %793
  %795 = getelementptr inbounds %struct.arg, %struct.arg* %794, i32 0, i32 2
  store %struct.rtx_def* %790, %struct.rtx_def** %795, align 8
  %796 = load %struct.arg*, %struct.arg** %32, align 8
  %797 = load i32, i32* %28, align 4
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds %struct.arg, %struct.arg* %796, i64 %798
  %800 = getelementptr inbounds %struct.arg, %struct.arg* %799, i32 0, i32 3
  store i32 0, i32* %800, align 8
  %801 = load i32, i32* %50, align 4
  %802 = load %struct.arg*, %struct.arg** %32, align 8
  %803 = load i32, i32* %28, align 4
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds %struct.arg, %struct.arg* %802, i64 %804
  %806 = getelementptr inbounds %struct.arg, %struct.arg* %805, i32 0, i32 2
  %807 = load %struct.rtx_def*, %struct.rtx_def** %806, align 8
  %808 = icmp ne %struct.rtx_def* %807, null
  %809 = zext i1 %808 to i32
  %810 = load %struct.arg*, %struct.arg** %32, align 8
  %811 = load i32, i32* %28, align 4
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds %struct.arg, %struct.arg* %810, i64 %812
  %814 = getelementptr inbounds %struct.arg, %struct.arg* %813, i32 0, i32 4
  %815 = load %struct.arg*, %struct.arg** %32, align 8
  %816 = load i32, i32* %28, align 4
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds %struct.arg, %struct.arg* %815, i64 %817
  %819 = getelementptr inbounds %struct.arg, %struct.arg* %818, i32 0, i32 5
  call void @locate_and_pad_parm(i32 %801, %union.tree_node* null, i32 %809, %union.tree_node* null, %struct.args_size* %23, %struct.args_size* %814, %struct.args_size* %819, %struct.args_size* %29)
  %820 = load %struct.arg*, %struct.arg** %32, align 8
  %821 = load i32, i32* %28, align 4
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds %struct.arg, %struct.arg* %820, i64 %822
  %824 = getelementptr inbounds %struct.arg, %struct.arg* %823, i32 0, i32 5
  %825 = getelementptr inbounds %struct.args_size, %struct.args_size* %824, i32 0, i32 1
  %826 = load %union.tree_node*, %union.tree_node** %825, align 8
  %827 = icmp ne %union.tree_node* %826, null
  %828 = load i32, i32* @x.41
  %829 = load i32, i32* @y.42
  %830 = sub i32 %828, 1
  %831 = mul i32 %828, %830
  %832 = urem i32 %831, 2
  %833 = icmp eq i32 %832, 0
  %834 = icmp slt i32 %829, 10
  %835 = or i1 %833, %834
  br i1 %835, label %originalBBpart2166, label %originalBB164alteredBB

originalBBpart2166:                               ; preds = %originalBB164
  br i1 %827, label %836, label %837

; <label>:836:                                    ; preds = %originalBBpart2166
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 3724, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.emit_library_call_value_1, i32 0, i32 0)) #8
  unreachable

; <label>:837:                                    ; preds = %originalBBpart2166
  %838 = load i32, i32* %40, align 4
  %839 = icmp eq i32 %838, 0
  br i1 %839, label %840, label %869

; <label>:840:                                    ; preds = %837
  %841 = load %struct.arg*, %struct.arg** %32, align 8
  %842 = load i32, i32* %28, align 4
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds %struct.arg, %struct.arg* %841, i64 %843
  %845 = getelementptr inbounds %struct.arg, %struct.arg* %844, i32 0, i32 3
  %846 = load i32, i32* %845, align 8
  %847 = icmp ne i32 %846, 0
  br i1 %847, label %848, label %869

; <label>:848:                                    ; preds = %840
  %849 = load %struct.arg*, %struct.arg** %32, align 8
  %850 = load i32, i32* %28, align 4
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds %struct.arg, %struct.arg* %849, i64 %851
  %853 = getelementptr inbounds %struct.arg, %struct.arg* %852, i32 0, i32 3
  %854 = load i32, i32* %853, align 8
  %855 = load i32, i32* @target_flags, align 4
  %856 = and i32 %855, 33554432
  %857 = icmp ne i32 %856, 0
  %858 = select i1 %857, i32 8, i32 4
  %859 = mul nsw i32 %854, %858
  %860 = sext i32 %859 to i64
  %861 = load %struct.arg*, %struct.arg** %32, align 8
  %862 = load i32, i32* %28, align 4
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds %struct.arg, %struct.arg* %861, i64 %863
  %865 = getelementptr inbounds %struct.arg, %struct.arg* %864, i32 0, i32 5
  %866 = getelementptr inbounds %struct.args_size, %struct.args_size* %865, i32 0, i32 0
  %867 = load i64, i64* %866, align 8
  %868 = sub nsw i64 %867, %860
  store i64 %868, i64* %866, align 8
  br label %869

; <label>:869:                                    ; preds = %848, %840, %837
  %870 = load %struct.arg*, %struct.arg** %32, align 8
  %871 = load i32, i32* %28, align 4
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds %struct.arg, %struct.arg* %870, i64 %872
  %874 = getelementptr inbounds %struct.arg, %struct.arg* %873, i32 0, i32 2
  %875 = load %struct.rtx_def*, %struct.rtx_def** %874, align 8
  %876 = icmp eq %struct.rtx_def* %875, null
  br i1 %876, label %888, label %877

; <label>:877:                                    ; preds = %869
  %878 = load %struct.arg*, %struct.arg** %32, align 8
  %879 = load i32, i32* %28, align 4
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds %struct.arg, %struct.arg* %878, i64 %880
  %882 = getelementptr inbounds %struct.arg, %struct.arg* %881, i32 0, i32 3
  %883 = load i32, i32* %882, align 8
  %884 = icmp ne i32 %883, 0
  br i1 %884, label %888, label %885

; <label>:885:                                    ; preds = %877
  %886 = load i32, i32* %40, align 4
  %887 = icmp sgt i32 %886, 0
  br i1 %887, label %888, label %899

; <label>:888:                                    ; preds = %885, %877, %869
  %889 = load %struct.arg*, %struct.arg** %32, align 8
  %890 = load i32, i32* %28, align 4
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds %struct.arg, %struct.arg* %889, i64 %891
  %893 = getelementptr inbounds %struct.arg, %struct.arg* %892, i32 0, i32 5
  %894 = getelementptr inbounds %struct.args_size, %struct.args_size* %893, i32 0, i32 0
  %895 = load i64, i64* %894, align 8
  %896 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %897 = load i64, i64* %896, align 8
  %898 = add nsw i64 %897, %895
  store i64 %898, i64* %896, align 8
  br label %899

; <label>:899:                                    ; preds = %888, %885
  %900 = load i32, i32* @x.41
  %901 = load i32, i32* @y.42
  %902 = sub i32 %900, 1
  %903 = mul i32 %900, %902
  %904 = urem i32 %903, 2
  %905 = icmp eq i32 %904, 0
  %906 = icmp slt i32 %901, 10
  %907 = or i1 %905, %906
  br i1 %907, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %originalBB168alteredBB, %899
  %908 = load i32, i32* %50, align 4
  call void @function_arg_advance(%struct.ix86_args* %31, i32 %908, %union.tree_node* null, i32 1)
  %909 = load i32, i32* @x.41
  %910 = load i32, i32* @y.42
  %911 = sub i32 %909, 1
  %912 = mul i32 %909, %911
  %913 = urem i32 %912, 2
  %914 = icmp eq i32 %913, 0
  %915 = icmp slt i32 %910, 10
  %916 = or i1 %914, %915
  br i1 %916, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br label %917

; <label>:917:                                    ; preds = %originalBBpart2170
  %918 = load i32, i32* @x.41
  %919 = load i32, i32* @y.42
  %920 = sub i32 %918, 1
  %921 = mul i32 %918, %920
  %922 = urem i32 %921, 2
  %923 = icmp eq i32 %922, 0
  %924 = icmp slt i32 %919, 10
  %925 = or i1 %923, %924
  br i1 %925, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %originalBB172alteredBB, %917
  %926 = load i32, i32* %28, align 4
  %927 = add nsw i32 %926, 1
  store i32 %927, i32* %28, align 4
  %928 = load i32, i32* @x.41
  %929 = load i32, i32* @y.42
  %930 = sub i32 %928, 1
  %931 = mul i32 %928, %930
  %932 = urem i32 %931, 2
  %933 = icmp eq i32 %932, 0
  %934 = icmp slt i32 %929, 10
  %935 = or i1 %933, %934
  br i1 %935, label %originalBBpart2189, label %originalBB172alteredBB

originalBBpart2189:                               ; preds = %originalBB172
  br label %534

; <label>:936:                                    ; preds = %534
  %937 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  call void @assemble_external_libcall(%struct.rtx_def* %937)
  %938 = bitcast %struct.args_size* %24 to i8*
  %939 = bitcast %struct.args_size* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %938, i8* %939, i64 16, i32 8, i1 false)
  %940 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %941 = load i64, i64* %940, align 8
  %942 = load %struct.function*, %struct.function** @cfun, align 8
  %943 = getelementptr inbounds %struct.function, %struct.function* %942, i32 0, i32 2
  %944 = load %struct.expr_status*, %struct.expr_status** %943, align 8
  %945 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %944, i32 0, i32 2
  %946 = load i32, i32* %945, align 8
  %947 = sext i32 %946 to i64
  %948 = add nsw i64 %941, %947
  %949 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %950 = sdiv i32 %949, 8
  %951 = sext i32 %950 to i64
  %952 = add nsw i64 %948, %951
  %953 = sub nsw i64 %952, 1
  %954 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %955 = sdiv i32 %954, 8
  %956 = sext i32 %955 to i64
  %957 = sdiv i64 %953, %956
  %958 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %959 = sdiv i32 %958, 8
  %960 = sext i32 %959 to i64
  %961 = mul nsw i64 %957, %960
  %962 = load %struct.function*, %struct.function** @cfun, align 8
  %963 = getelementptr inbounds %struct.function, %struct.function* %962, i32 0, i32 2
  %964 = load %struct.expr_status*, %struct.expr_status** %963, align 8
  %965 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %964, i32 0, i32 2
  %966 = load i32, i32* %965, align 8
  %967 = sext i32 %966 to i64
  %968 = sub nsw i64 %961, %967
  %969 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  store i64 %968, i64* %969, align 8
  %970 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %971 = load i64, i64* %970, align 8
  %972 = load i32, i32* %40, align 4
  %973 = sext i32 %972 to i64
  %974 = icmp sgt i64 %971, %973
  br i1 %974, label %975, label %994

; <label>:975:                                    ; preds = %936
  %976 = load i32, i32* @x.41
  %977 = load i32, i32* @y.42
  %978 = sub i32 %976, 1
  %979 = mul i32 %976, %978
  %980 = urem i32 %979, 2
  %981 = icmp eq i32 %980, 0
  %982 = icmp slt i32 %977, 10
  %983 = or i1 %981, %982
  br i1 %983, label %originalBB191, label %originalBB191alteredBB

originalBB191:                                    ; preds = %originalBB191alteredBB, %975
  %984 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %985 = load i64, i64* %984, align 8
  %986 = load i32, i32* @x.41
  %987 = load i32, i32* @y.42
  %988 = sub i32 %986, 1
  %989 = mul i32 %986, %988
  %990 = urem i32 %989, 2
  %991 = icmp eq i32 %990, 0
  %992 = icmp slt i32 %987, 10
  %993 = or i1 %991, %992
  br i1 %993, label %originalBBpart2193, label %originalBB191alteredBB

originalBBpart2193:                               ; preds = %originalBB191
  br label %997

; <label>:994:                                    ; preds = %936
  %995 = load i32, i32* %40, align 4
  %996 = sext i32 %995 to i64
  br label %997

; <label>:997:                                    ; preds = %994, %originalBBpart2193
  %998 = phi i64 [ %985, %originalBBpart2193 ], [ %996, %994 ]
  %999 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  store i64 %998, i64* %999, align 8
  %1000 = load i32, i32* %40, align 4
  %1001 = sext i32 %1000 to i64
  %1002 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %1003 = load i64, i64* %1002, align 8
  %1004 = sub nsw i64 %1003, %1001
  store i64 %1004, i64* %1002, align 8
  %1005 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %1006 = load i64, i64* %1005, align 8
  %1007 = load %struct.function*, %struct.function** @cfun, align 8
  %1008 = getelementptr inbounds %struct.function, %struct.function* %1007, i32 0, i32 11
  %1009 = load i32, i32* %1008, align 4
  %1010 = sext i32 %1009 to i64
  %1011 = icmp sgt i64 %1006, %1010
  br i1 %1011, label %1012, label %1034

; <label>:1012:                                   ; preds = %997
  %1013 = load i32, i32* @x.41
  %1014 = load i32, i32* @y.42
  %1015 = sub i32 %1013, 1
  %1016 = mul i32 %1013, %1015
  %1017 = urem i32 %1016, 2
  %1018 = icmp eq i32 %1017, 0
  %1019 = icmp slt i32 %1014, 10
  %1020 = or i1 %1018, %1019
  br i1 %1020, label %originalBB195, label %originalBB195alteredBB

originalBB195:                                    ; preds = %originalBB195alteredBB, %1012
  %1021 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %1022 = load i64, i64* %1021, align 8
  %1023 = trunc i64 %1022 to i32
  %1024 = load %struct.function*, %struct.function** @cfun, align 8
  %1025 = getelementptr inbounds %struct.function, %struct.function* %1024, i32 0, i32 11
  store i32 %1023, i32* %1025, align 4
  %1026 = load i32, i32* @x.41
  %1027 = load i32, i32* @y.42
  %1028 = sub i32 %1026, 1
  %1029 = mul i32 %1026, %1028
  %1030 = urem i32 %1029, 2
  %1031 = icmp eq i32 %1030, 0
  %1032 = icmp slt i32 %1027, 10
  %1033 = or i1 %1031, %1032
  br i1 %1033, label %originalBBpart2197, label %originalBB195alteredBB

originalBBpart2197:                               ; preds = %originalBB195
  br label %1034

; <label>:1034:                                   ; preds = %originalBBpart2197, %997
  %1035 = load i32, i32* @target_flags, align 4
  %1036 = and i32 %1035, 4096
  %1037 = icmp ne i32 %1036, 0
  br i1 %1037, label %1038, label %1134

; <label>:1038:                                   ; preds = %1034
  %1039 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %1040 = load i64, i64* %1039, align 8
  %1041 = trunc i64 %1040 to i32
  store i32 %1041, i32* %41, align 4
  %1042 = load i32, i32* %40, align 4
  %1043 = load i32, i32* %41, align 4
  %1044 = add nsw i32 %1043, %1042
  store i32 %1044, i32* %41, align 4
  %1045 = load i32, i32* %46, align 4
  %1046 = load i32, i32* %41, align 4
  %1047 = icmp sgt i32 %1045, %1046
  br i1 %1047, label %1048, label %1066

; <label>:1048:                                   ; preds = %1038
  %1049 = load i32, i32* @x.41
  %1050 = load i32, i32* @y.42
  %1051 = sub i32 %1049, 1
  %1052 = mul i32 %1049, %1051
  %1053 = urem i32 %1052, 2
  %1054 = icmp eq i32 %1053, 0
  %1055 = icmp slt i32 %1050, 10
  %1056 = or i1 %1054, %1055
  br i1 %1056, label %originalBB199, label %originalBB199alteredBB

originalBB199:                                    ; preds = %originalBB199alteredBB, %1048
  %1057 = load i32, i32* %46, align 4
  %1058 = load i32, i32* @x.41
  %1059 = load i32, i32* @y.42
  %1060 = sub i32 %1058, 1
  %1061 = mul i32 %1058, %1060
  %1062 = urem i32 %1061, 2
  %1063 = icmp eq i32 %1062, 0
  %1064 = icmp slt i32 %1059, 10
  %1065 = or i1 %1063, %1064
  br i1 %1065, label %originalBBpart2201, label %originalBB199alteredBB

originalBBpart2201:                               ; preds = %originalBB199
  br label %1068

; <label>:1066:                                   ; preds = %1038
  %1067 = load i32, i32* %41, align 4
  br label %1068

; <label>:1068:                                   ; preds = %1066, %originalBBpart2201
  %1069 = phi i32 [ %1057, %originalBBpart2201 ], [ %1067, %1066 ]
  %1070 = load i32, i32* @x.41
  %1071 = load i32, i32* @y.42
  %1072 = sub i32 %1070, 1
  %1073 = mul i32 %1070, %1072
  %1074 = urem i32 %1073, 2
  %1075 = icmp eq i32 %1074, 0
  %1076 = icmp slt i32 %1071, 10
  %1077 = or i1 %1075, %1076
  br i1 %1077, label %originalBB203, label %originalBB203alteredBB

originalBB203:                                    ; preds = %originalBB203alteredBB, %1068
  store i32 %1069, i32* @highest_outgoing_arg_in_use, align 4
  %1078 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %1079 = sext i32 %1078 to i64
  %1080 = alloca i8, i64 %1079, align 16
  store i8* %1080, i8** @stack_usage_map, align 8
  %1081 = load i32, i32* %46, align 4
  %1082 = icmp ne i32 %1081, 0
  %1083 = load i32, i32* @x.41
  %1084 = load i32, i32* @y.42
  %1085 = sub i32 %1083, 1
  %1086 = mul i32 %1083, %1085
  %1087 = urem i32 %1086, 2
  %1088 = icmp eq i32 %1087, 0
  %1089 = icmp slt i32 %1084, 10
  %1090 = or i1 %1088, %1089
  br i1 %1090, label %originalBBpart2205, label %originalBB203alteredBB

originalBBpart2205:                               ; preds = %originalBB203
  br i1 %1082, label %1091, label %1096

; <label>:1091:                                   ; preds = %originalBBpart2205
  %1092 = load i8*, i8** @stack_usage_map, align 8
  %1093 = load i8*, i8** %47, align 8
  %1094 = load i32, i32* %46, align 4
  %1095 = sext i32 %1094 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1092, i8* %1093, i64 %1095, i32 1, i1 false)
  br label %1096

; <label>:1096:                                   ; preds = %1091, %originalBBpart2205
  %1097 = load i32, i32* @x.41
  %1098 = load i32, i32* @y.42
  %1099 = sub i32 %1097, 1
  %1100 = mul i32 %1097, %1099
  %1101 = urem i32 %1100, 2
  %1102 = icmp eq i32 %1101, 0
  %1103 = icmp slt i32 %1098, 10
  %1104 = or i1 %1102, %1103
  br i1 %1104, label %originalBB207, label %originalBB207alteredBB

originalBB207:                                    ; preds = %originalBB207alteredBB, %1096
  %1105 = load i32, i32* %46, align 4
  %1106 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %1107 = icmp ne i32 %1105, %1106
  %1108 = load i32, i32* @x.41
  %1109 = load i32, i32* @y.42
  %1110 = sub i32 %1108, 1
  %1111 = mul i32 %1108, %1110
  %1112 = urem i32 %1111, 2
  %1113 = icmp eq i32 %1112, 0
  %1114 = icmp slt i32 %1109, 10
  %1115 = or i1 %1113, %1114
  br i1 %1115, label %originalBBpart2209, label %originalBB207alteredBB

originalBBpart2209:                               ; preds = %originalBB207
  br i1 %1107, label %1116, label %1125

; <label>:1116:                                   ; preds = %originalBBpart2209
  %1117 = load i8*, i8** @stack_usage_map, align 8
  %1118 = load i32, i32* %46, align 4
  %1119 = sext i32 %1118 to i64
  %1120 = getelementptr inbounds i8, i8* %1117, i64 %1119
  %1121 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %1122 = load i32, i32* %46, align 4
  %1123 = sub nsw i32 %1121, %1122
  %1124 = sext i32 %1123 to i64
  call void @llvm.memset.p0i8.i64(i8* %1120, i8 0, i64 %1124, i32 1, i1 false)
  br label %1125

; <label>:1125:                                   ; preds = %1116, %originalBBpart2209
  store i32 0, i32* %41, align 4
  %1126 = load i32, i32* @virtuals_instantiated, align 4
  %1127 = icmp ne i32 %1126, 0
  br i1 %1127, label %1128, label %1131

; <label>:1128:                                   ; preds = %1125
  %1129 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16
  %1130 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %1129, i64 0)
  store %struct.rtx_def* %1130, %struct.rtx_def** %30, align 8
  br label %1133

; <label>:1131:                                   ; preds = %1125
  %1132 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8
  store %struct.rtx_def* %1132, %struct.rtx_def** %30, align 8
  br label %1133

; <label>:1133:                                   ; preds = %1131, %1128
  br label %1164

; <label>:1134:                                   ; preds = %1034
  %1135 = load i32, i32* @target_flags, align 4
  %1136 = and i32 %1135, 2048
  %1137 = icmp ne i32 %1136, 0
  br i1 %1137, label %1142, label %1138

; <label>:1138:                                   ; preds = %1134
  %1139 = load i32, i32* @target_flags, align 4
  %1140 = and i32 %1139, 4096
  %1141 = icmp ne i32 %1140, 0
  br i1 %1141, label %1142, label %1147

; <label>:1142:                                   ; preds = %1138, %1134
  %1143 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %1144 = load i64, i64* %1143, align 8
  %1145 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1144)
  %1146 = call %struct.rtx_def* @push_block(%struct.rtx_def* %1145, i32 0, i32 0)
  store %struct.rtx_def* %1146, %struct.rtx_def** %30, align 8
  br label %1147

; <label>:1147:                                   ; preds = %1142, %1138
  %1148 = load i32, i32* @x.41
  %1149 = load i32, i32* @y.42
  %1150 = sub i32 %1148, 1
  %1151 = mul i32 %1148, %1150
  %1152 = urem i32 %1151, 2
  %1153 = icmp eq i32 %1152, 0
  %1154 = icmp slt i32 %1149, 10
  %1155 = or i1 %1153, %1154
  br i1 %1155, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %originalBB211alteredBB, %1147
  %1156 = load i32, i32* @x.41
  %1157 = load i32, i32* @y.42
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBBpart2213, label %originalBB211alteredBB

originalBBpart2213:                               ; preds = %originalBB211
  br label %1164

; <label>:1164:                                   ; preds = %originalBBpart2213, %1133
  %1165 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %1166 = icmp eq %struct.rtx_def* %1165, null
  br i1 %1166, label %1167, label %1198

; <label>:1167:                                   ; preds = %1164
  %1168 = load i32, i32* @target_flags, align 4
  %1169 = and i32 %1168, 2048
  %1170 = icmp ne i32 %1169, 0
  br i1 %1170, label %1198, label %1171

; <label>:1171:                                   ; preds = %1167
  %1172 = load i32, i32* @target_flags, align 4
  %1173 = and i32 %1172, 4096
  %1174 = icmp ne i32 %1173, 0
  br i1 %1174, label %1198, label %1175

; <label>:1175:                                   ; preds = %1171
  %1176 = load i32, i32* @x.41
  %1177 = load i32, i32* @y.42
  %1178 = sub i32 %1176, 1
  %1179 = mul i32 %1176, %1178
  %1180 = urem i32 %1179, 2
  %1181 = icmp eq i32 %1180, 0
  %1182 = icmp slt i32 %1177, 10
  %1183 = or i1 %1181, %1182
  br i1 %1183, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %originalBB215alteredBB, %1175
  %1184 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %1185 = load i64, i64* %1184, align 8
  %1186 = getelementptr inbounds %struct.args_size, %struct.args_size* %24, i32 0, i32 0
  %1187 = load i64, i64* %1186, align 8
  %1188 = sub nsw i64 %1185, %1187
  %1189 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1188)
  call void @anti_adjust_stack(%struct.rtx_def* %1189)
  %1190 = load i32, i32* @x.41
  %1191 = load i32, i32* @y.42
  %1192 = sub i32 %1190, 1
  %1193 = mul i32 %1190, %1192
  %1194 = urem i32 %1193, 2
  %1195 = icmp eq i32 %1194, 0
  %1196 = icmp slt i32 %1191, 10
  %1197 = or i1 %1195, %1196
  br i1 %1197, label %originalBBpart2225, label %originalBB215alteredBB

originalBBpart2225:                               ; preds = %originalBB215
  br label %1198

; <label>:1198:                                   ; preds = %originalBBpart2225, %1171, %1167, %1164
  %1199 = load i32, i32* @x.41
  %1200 = load i32, i32* @y.42
  %1201 = sub i32 %1199, 1
  %1202 = mul i32 %1199, %1201
  %1203 = urem i32 %1202, 2
  %1204 = icmp eq i32 %1203, 0
  %1205 = icmp slt i32 %1200, 10
  %1206 = or i1 %1204, %1205
  br i1 %1206, label %originalBB227, label %originalBB227alteredBB

originalBB227:                                    ; preds = %originalBB227alteredBB, %1198
  %1207 = load i32, i32* @target_flags, align 4
  %1208 = and i32 %1207, 2048
  %1209 = icmp ne i32 %1208, 0
  %1210 = load i32, i32* @x.41
  %1211 = load i32, i32* @y.42
  %1212 = sub i32 %1210, 1
  %1213 = mul i32 %1210, %1212
  %1214 = urem i32 %1213, 2
  %1215 = icmp eq i32 %1214, 0
  %1216 = icmp slt i32 %1211, 10
  %1217 = or i1 %1215, %1216
  br i1 %1217, label %originalBBpart2231, label %originalBB227alteredBB

originalBBpart2231:                               ; preds = %originalBB227
  br i1 %1209, label %1257, label %1218

; <label>:1218:                                   ; preds = %originalBBpart2231
  %1219 = load i32, i32* @x.41
  %1220 = load i32, i32* @y.42
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %originalBB233alteredBB, %1218
  %1227 = load i32, i32* @target_flags, align 4
  %1228 = and i32 %1227, 4096
  %1229 = icmp ne i32 %1228, 0
  %1230 = load i32, i32* @x.41
  %1231 = load i32, i32* @y.42
  %1232 = sub i32 %1230, 1
  %1233 = mul i32 %1230, %1232
  %1234 = urem i32 %1233, 2
  %1235 = icmp eq i32 %1234, 0
  %1236 = icmp slt i32 %1231, 10
  %1237 = or i1 %1235, %1236
  br i1 %1237, label %originalBBpart2245, label %originalBB233alteredBB

originalBBpart2245:                               ; preds = %originalBB233
  br i1 %1229, label %1257, label %1238

; <label>:1238:                                   ; preds = %originalBBpart2245
  %1239 = load i32, i32* @x.41
  %1240 = load i32, i32* @y.42
  %1241 = sub i32 %1239, 1
  %1242 = mul i32 %1239, %1241
  %1243 = urem i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  %1245 = icmp slt i32 %1240, 10
  %1246 = or i1 %1244, %1245
  br i1 %1246, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %originalBB247alteredBB, %1238
  store i32 -1, i32* %27, align 4
  %1247 = load i32, i32* %21, align 4
  %1248 = sub nsw i32 %1247, 1
  store i32 %1248, i32* %25, align 4
  %1249 = load i32, i32* @x.41
  %1250 = load i32, i32* @y.42
  %1251 = sub i32 %1249, 1
  %1252 = mul i32 %1249, %1251
  %1253 = urem i32 %1252, 2
  %1254 = icmp eq i32 %1253, 0
  %1255 = icmp slt i32 %1250, 10
  %1256 = or i1 %1254, %1255
  br i1 %1256, label %originalBBpart2255, label %originalBB247alteredBB

originalBBpart2255:                               ; preds = %originalBB247
  br label %1274

; <label>:1257:                                   ; preds = %originalBBpart2245, %originalBBpart2231
  %1258 = load i32, i32* @x.41
  %1259 = load i32, i32* @y.42
  %1260 = sub i32 %1258, 1
  %1261 = mul i32 %1258, %1260
  %1262 = urem i32 %1261, 2
  %1263 = icmp eq i32 %1262, 0
  %1264 = icmp slt i32 %1259, 10
  %1265 = or i1 %1263, %1264
  br i1 %1265, label %originalBB257, label %originalBB257alteredBB

originalBB257:                                    ; preds = %originalBB257alteredBB, %1257
  store i32 1, i32* %27, align 4
  store i32 0, i32* %25, align 4
  %1266 = load i32, i32* @x.41
  %1267 = load i32, i32* @y.42
  %1268 = sub i32 %1266, 1
  %1269 = mul i32 %1266, %1268
  %1270 = urem i32 %1269, 2
  %1271 = icmp eq i32 %1270, 0
  %1272 = icmp slt i32 %1267, 10
  %1273 = or i1 %1271, %1272
  br i1 %1273, label %originalBBpart2259, label %originalBB257alteredBB

originalBBpart2259:                               ; preds = %originalBB257
  br label %1274

; <label>:1274:                                   ; preds = %originalBBpart2259, %originalBBpart2255
  %1275 = load i32, i32* @target_flags, align 4
  %1276 = and i32 %1275, 4096
  %1277 = icmp ne i32 %1276, 0
  br i1 %1277, label %1278, label %1510

; <label>:1278:                                   ; preds = %1274
  store i32 0, i32* %28, align 4
  br label %1279

; <label>:1279:                                   ; preds = %1367, %1278
  %1280 = load i32, i32* @x.41
  %1281 = load i32, i32* @y.42
  %1282 = sub i32 %1280, 1
  %1283 = mul i32 %1280, %1282
  %1284 = urem i32 %1283, 2
  %1285 = icmp eq i32 %1284, 0
  %1286 = icmp slt i32 %1281, 10
  %1287 = or i1 %1285, %1286
  br i1 %1287, label %originalBB261, label %originalBB261alteredBB

originalBB261:                                    ; preds = %originalBB261alteredBB, %1279
  %1288 = load i32, i32* %28, align 4
  %1289 = load i32, i32* %40, align 4
  %1290 = icmp slt i32 %1288, %1289
  %1291 = load i32, i32* @x.41
  %1292 = load i32, i32* @y.42
  %1293 = sub i32 %1291, 1
  %1294 = mul i32 %1291, %1293
  %1295 = urem i32 %1294, 2
  %1296 = icmp eq i32 %1295, 0
  %1297 = icmp slt i32 %1292, 10
  %1298 = or i1 %1296, %1297
  br i1 %1298, label %originalBBpart2263, label %originalBB261alteredBB

originalBBpart2263:                               ; preds = %originalBB261
  br i1 %1290, label %1299, label %1370

; <label>:1299:                                   ; preds = %originalBBpart2263
  %1300 = load i32, i32* @x.41
  %1301 = load i32, i32* @y.42
  %1302 = sub i32 %1300, 1
  %1303 = mul i32 %1300, %1302
  %1304 = urem i32 %1303, 2
  %1305 = icmp eq i32 %1304, 0
  %1306 = icmp slt i32 %1301, 10
  %1307 = or i1 %1305, %1306
  br i1 %1307, label %originalBB265, label %originalBB265alteredBB

originalBB265:                                    ; preds = %originalBB265alteredBB, %1299
  %1308 = load i32, i32* %28, align 4
  %1309 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %1310 = icmp sge i32 %1308, %1309
  %1311 = load i32, i32* @x.41
  %1312 = load i32, i32* @y.42
  %1313 = sub i32 %1311, 1
  %1314 = mul i32 %1311, %1313
  %1315 = urem i32 %1314, 2
  %1316 = icmp eq i32 %1315, 0
  %1317 = icmp slt i32 %1312, 10
  %1318 = or i1 %1316, %1317
  br i1 %1318, label %originalBBpart2267, label %originalBB265alteredBB

originalBBpart2267:                               ; preds = %originalBB265
  br i1 %1310, label %1343, label %1319

; <label>:1319:                                   ; preds = %originalBBpart2267
  %1320 = load i32, i32* @x.41
  %1321 = load i32, i32* @y.42
  %1322 = sub i32 %1320, 1
  %1323 = mul i32 %1320, %1322
  %1324 = urem i32 %1323, 2
  %1325 = icmp eq i32 %1324, 0
  %1326 = icmp slt i32 %1321, 10
  %1327 = or i1 %1325, %1326
  br i1 %1327, label %originalBB269, label %originalBB269alteredBB

originalBB269:                                    ; preds = %originalBB269alteredBB, %1319
  %1328 = load i8*, i8** @stack_usage_map, align 8
  %1329 = load i32, i32* %28, align 4
  %1330 = sext i32 %1329 to i64
  %1331 = getelementptr inbounds i8, i8* %1328, i64 %1330
  %1332 = load i8, i8* %1331, align 1
  %1333 = sext i8 %1332 to i32
  %1334 = icmp eq i32 %1333, 0
  %1335 = load i32, i32* @x.41
  %1336 = load i32, i32* @y.42
  %1337 = sub i32 %1335, 1
  %1338 = mul i32 %1335, %1337
  %1339 = urem i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = icmp slt i32 %1336, 10
  %1342 = or i1 %1340, %1341
  br i1 %1342, label %originalBBpart2271, label %originalBB269alteredBB

originalBBpart2271:                               ; preds = %originalBB269
  br i1 %1334, label %1343, label %1344

; <label>:1343:                                   ; preds = %originalBBpart2271, %originalBBpart2267
  br label %1367

; <label>:1344:                                   ; preds = %originalBBpart2271
  %1345 = load i32, i32* %43, align 4
  %1346 = icmp eq i32 %1345, -1
  br i1 %1346, label %1347, label %1349

; <label>:1347:                                   ; preds = %1344
  %1348 = load i32, i32* %28, align 4
  store i32 %1348, i32* %43, align 4
  br label %1349

; <label>:1349:                                   ; preds = %1347, %1344
  %1350 = load i32, i32* @x.41
  %1351 = load i32, i32* @y.42
  %1352 = sub i32 %1350, 1
  %1353 = mul i32 %1350, %1352
  %1354 = urem i32 %1353, 2
  %1355 = icmp eq i32 %1354, 0
  %1356 = icmp slt i32 %1351, 10
  %1357 = or i1 %1355, %1356
  br i1 %1357, label %originalBB273, label %originalBB273alteredBB

originalBB273:                                    ; preds = %originalBB273alteredBB, %1349
  %1358 = load i32, i32* %28, align 4
  store i32 %1358, i32* %44, align 4
  %1359 = load i32, i32* @x.41
  %1360 = load i32, i32* @y.42
  %1361 = sub i32 %1359, 1
  %1362 = mul i32 %1359, %1361
  %1363 = urem i32 %1362, 2
  %1364 = icmp eq i32 %1363, 0
  %1365 = icmp slt i32 %1360, 10
  %1366 = or i1 %1364, %1365
  br i1 %1366, label %originalBBpart2275, label %originalBB273alteredBB

originalBBpart2275:                               ; preds = %originalBB273
  br label %1367

; <label>:1367:                                   ; preds = %originalBBpart2275, %1343
  %1368 = load i32, i32* %28, align 4
  %1369 = add nsw i32 %1368, 1
  store i32 %1369, i32* %28, align 4
  br label %1279

; <label>:1370:                                   ; preds = %originalBBpart2263
  %1371 = load i32, i32* %43, align 4
  %1372 = icmp sge i32 %1371, 0
  br i1 %1372, label %1373, label %1493

; <label>:1373:                                   ; preds = %1370
  %1374 = load i32, i32* %44, align 4
  %1375 = load i32, i32* %43, align 4
  %1376 = sub nsw i32 %1374, %1375
  %1377 = add nsw i32 %1376, 1
  store i32 %1377, i32* %51, align 4
  %1378 = load i32, i32* %51, align 4
  %1379 = mul nsw i32 %1378, 8
  %1380 = call i32 @mode_for_size(i32 %1379, i32 1, i32 1)
  store i32 %1380, i32* %52, align 4
  %1381 = load i32, i32* %43, align 4
  %1382 = load i32, i32* %52, align 4
  %1383 = sext i32 %1382 to i64
  %1384 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %1383
  %1385 = load i8, i8* %1384, align 1
  %1386 = zext i8 %1385 to i32
  %1387 = load i32, i32* @target_flags, align 4
  %1388 = and i32 %1387, 33554432
  %1389 = icmp ne i32 %1388, 0
  %1390 = select i1 %1389, i32 8, i32 4
  %1391 = sdiv i32 128, %1390
  %1392 = icmp slt i32 %1386, %1391
  br i1 %1392, label %1393, label %1415

; <label>:1393:                                   ; preds = %1373
  %1394 = load i32, i32* @x.41
  %1395 = load i32, i32* @y.42
  %1396 = sub i32 %1394, 1
  %1397 = mul i32 %1394, %1396
  %1398 = urem i32 %1397, 2
  %1399 = icmp eq i32 %1398, 0
  %1400 = icmp slt i32 %1395, 10
  %1401 = or i1 %1399, %1400
  br i1 %1401, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %originalBB277alteredBB, %1393
  %1402 = load i32, i32* %52, align 4
  %1403 = sext i32 %1402 to i64
  %1404 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %1403
  %1405 = load i8, i8* %1404, align 1
  %1406 = zext i8 %1405 to i32
  %1407 = load i32, i32* @x.41
  %1408 = load i32, i32* @y.42
  %1409 = sub i32 %1407, 1
  %1410 = mul i32 %1407, %1409
  %1411 = urem i32 %1410, 2
  %1412 = icmp eq i32 %1411, 0
  %1413 = icmp slt i32 %1408, 10
  %1414 = or i1 %1412, %1413
  br i1 %1414, label %originalBBpart2279, label %originalBB277alteredBB

originalBBpart2279:                               ; preds = %originalBB277
  br label %1421

; <label>:1415:                                   ; preds = %1373
  %1416 = load i32, i32* @target_flags, align 4
  %1417 = and i32 %1416, 33554432
  %1418 = icmp ne i32 %1417, 0
  %1419 = select i1 %1418, i32 8, i32 4
  %1420 = sdiv i32 128, %1419
  br label %1421

; <label>:1421:                                   ; preds = %1415, %originalBBpart2279
  %1422 = phi i32 [ %1406, %originalBBpart2279 ], [ %1420, %1415 ]
  %1423 = load i32, i32* @x.41
  %1424 = load i32, i32* @y.42
  %1425 = sub i32 %1423, 1
  %1426 = mul i32 %1423, %1425
  %1427 = urem i32 %1426, 2
  %1428 = icmp eq i32 %1427, 0
  %1429 = icmp slt i32 %1424, 10
  %1430 = or i1 %1428, %1429
  br i1 %1430, label %originalBB281, label %originalBB281alteredBB

originalBB281:                                    ; preds = %originalBB281alteredBB, %1421
  %1431 = sub nsw i32 %1422, 1
  %1432 = and i32 %1381, %1431
  %1433 = icmp ne i32 %1432, 0
  %1434 = load i32, i32* @x.41
  %1435 = load i32, i32* @y.42
  %1436 = sub i32 %1434, 1
  %1437 = mul i32 %1434, %1436
  %1438 = urem i32 %1437, 2
  %1439 = icmp eq i32 %1438, 0
  %1440 = icmp slt i32 %1435, 10
  %1441 = or i1 %1439, %1440
  br i1 %1441, label %originalBBpart2297, label %originalBB281alteredBB

originalBBpart2297:                               ; preds = %originalBB281
  br i1 %1433, label %1442, label %1443

; <label>:1442:                                   ; preds = %originalBBpart2297
  store i32 51, i32* %52, align 4
  br label %1443

; <label>:1443:                                   ; preds = %1442, %originalBBpart2297
  %1444 = load i32, i32* %52, align 4
  %1445 = load i32, i32* %52, align 4
  %1446 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %1447 = load i32, i32* %43, align 4
  %1448 = sext i32 %1447 to i64
  %1449 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %1446, i64 %1448)
  %1450 = call %struct.rtx_def* @memory_address(i32 %1445, %struct.rtx_def* %1449)
  %1451 = call %struct.rtx_def* @gen_rtx_MEM(i32 %1444, %struct.rtx_def* %1450)
  store %struct.rtx_def* %1451, %struct.rtx_def** %53, align 8
  %1452 = load i32, i32* %52, align 4
  %1453 = icmp eq i32 %1452, 51
  br i1 %1453, label %1454, label %1486

; <label>:1454:                                   ; preds = %1443
  %1455 = load i32, i32* @x.41
  %1456 = load i32, i32* @y.42
  %1457 = sub i32 %1455, 1
  %1458 = mul i32 %1455, %1457
  %1459 = urem i32 %1458, 2
  %1460 = icmp eq i32 %1459, 0
  %1461 = icmp slt i32 %1456, 10
  %1462 = or i1 %1460, %1461
  br i1 %1462, label %originalBB299, label %originalBB299alteredBB

originalBB299:                                    ; preds = %originalBB299alteredBB, %1454
  %1463 = load i32, i32* %51, align 4
  %1464 = sext i32 %1463 to i64
  %1465 = call %struct.rtx_def* @assign_stack_temp(i32 51, i64 %1464, i32 0)
  store %struct.rtx_def* %1465, %struct.rtx_def** %45, align 8
  %1466 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %1467 = load i32, i32* @target_flags, align 4
  %1468 = and i32 %1467, 33554432
  %1469 = icmp ne i32 %1468, 0
  %1470 = select i1 %1469, i32 64, i32 32
  call void @set_mem_align(%struct.rtx_def* %1466, i32 %1470)
  %1471 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %1472 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %1471)
  %1473 = load %struct.rtx_def*, %struct.rtx_def** %53, align 8
  %1474 = load i32, i32* %51, align 4
  %1475 = sext i32 %1474 to i64
  %1476 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1475)
  %1477 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %1472, %struct.rtx_def* %1473, %struct.rtx_def* %1476)
  %1478 = load i32, i32* @x.41
  %1479 = load i32, i32* @y.42
  %1480 = sub i32 %1478, 1
  %1481 = mul i32 %1478, %1480
  %1482 = urem i32 %1481, 2
  %1483 = icmp eq i32 %1482, 0
  %1484 = icmp slt i32 %1479, 10
  %1485 = or i1 %1483, %1484
  br i1 %1485, label %originalBBpart2304, label %originalBB299alteredBB

originalBBpart2304:                               ; preds = %originalBB299
  br label %1492

; <label>:1486:                                   ; preds = %1443
  %1487 = load i32, i32* %52, align 4
  %1488 = call %struct.rtx_def* @gen_reg_rtx(i32 %1487)
  store %struct.rtx_def* %1488, %struct.rtx_def** %45, align 8
  %1489 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %1490 = load %struct.rtx_def*, %struct.rtx_def** %53, align 8
  %1491 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1489, %struct.rtx_def* %1490)
  br label %1492

; <label>:1492:                                   ; preds = %1486, %originalBBpart2304
  br label %1493

; <label>:1493:                                   ; preds = %1492, %1370
  %1494 = load i32, i32* @x.41
  %1495 = load i32, i32* @y.42
  %1496 = sub i32 %1494, 1
  %1497 = mul i32 %1494, %1496
  %1498 = urem i32 %1497, 2
  %1499 = icmp eq i32 %1498, 0
  %1500 = icmp slt i32 %1495, 10
  %1501 = or i1 %1499, %1500
  br i1 %1501, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %originalBB306alteredBB, %1493
  %1502 = load i32, i32* @x.41
  %1503 = load i32, i32* @y.42
  %1504 = sub i32 %1502, 1
  %1505 = mul i32 %1502, %1504
  %1506 = urem i32 %1505, 2
  %1507 = icmp eq i32 %1506, 0
  %1508 = icmp slt i32 %1503, 10
  %1509 = or i1 %1507, %1508
  br i1 %1509, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br label %1510

; <label>:1510:                                   ; preds = %originalBBpart2308, %1274
  store i32 0, i32* %28, align 4
  br label %1511

; <label>:1511:                                   ; preds = %1833, %1510
  %1512 = load i32, i32* %28, align 4
  %1513 = load i32, i32* %21, align 4
  %1514 = icmp slt i32 %1512, %1513
  br i1 %1514, label %1515, label %1839

; <label>:1515:                                   ; preds = %1511
  %1516 = load %struct.arg*, %struct.arg** %32, align 8
  %1517 = load i32, i32* %25, align 4
  %1518 = sext i32 %1517 to i64
  %1519 = getelementptr inbounds %struct.arg, %struct.arg* %1516, i64 %1518
  %1520 = getelementptr inbounds %struct.arg, %struct.arg* %1519, i32 0, i32 1
  %1521 = load i32, i32* %1520, align 8
  store i32 %1521, i32* %54, align 4
  %1522 = load %struct.arg*, %struct.arg** %32, align 8
  %1523 = load i32, i32* %25, align 4
  %1524 = sext i32 %1523 to i64
  %1525 = getelementptr inbounds %struct.arg, %struct.arg* %1522, i64 %1524
  %1526 = getelementptr inbounds %struct.arg, %struct.arg* %1525, i32 0, i32 0
  %1527 = load %struct.rtx_def*, %struct.rtx_def** %1526, align 8
  store %struct.rtx_def* %1527, %struct.rtx_def** %55, align 8
  %1528 = load %struct.arg*, %struct.arg** %32, align 8
  %1529 = load i32, i32* %25, align 4
  %1530 = sext i32 %1529 to i64
  %1531 = getelementptr inbounds %struct.arg, %struct.arg* %1528, i64 %1530
  %1532 = getelementptr inbounds %struct.arg, %struct.arg* %1531, i32 0, i32 2
  %1533 = load %struct.rtx_def*, %struct.rtx_def** %1532, align 8
  store %struct.rtx_def* %1533, %struct.rtx_def** %56, align 8
  %1534 = load %struct.arg*, %struct.arg** %32, align 8
  %1535 = load i32, i32* %25, align 4
  %1536 = sext i32 %1535 to i64
  %1537 = getelementptr inbounds %struct.arg, %struct.arg* %1534, i64 %1536
  %1538 = getelementptr inbounds %struct.arg, %struct.arg* %1537, i32 0, i32 3
  %1539 = load i32, i32* %1538, align 8
  store i32 %1539, i32* %57, align 4
  store i32 0, i32* %58, align 4
  store i32 0, i32* %59, align 4
  %1540 = load %struct.rtx_def*, %struct.rtx_def** %56, align 8
  %1541 = icmp ne %struct.rtx_def* %1540, null
  br i1 %1541, label %1542, label %1545

; <label>:1542:                                   ; preds = %1515
  %1543 = load i32, i32* %57, align 4
  %1544 = icmp eq i32 %1543, 0
  br i1 %1544, label %1832, label %1545

; <label>:1545:                                   ; preds = %1542, %1515
  %1546 = load i32, i32* @x.41
  %1547 = load i32, i32* @y.42
  %1548 = sub i32 %1546, 1
  %1549 = mul i32 %1546, %1548
  %1550 = urem i32 %1549, 2
  %1551 = icmp eq i32 %1550, 0
  %1552 = icmp slt i32 %1547, 10
  %1553 = or i1 %1551, %1552
  br i1 %1553, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %originalBB310alteredBB, %1545
  %1554 = load i32, i32* @target_flags, align 4
  %1555 = and i32 %1554, 4096
  %1556 = icmp ne i32 %1555, 0
  %1557 = load i32, i32* @x.41
  %1558 = load i32, i32* @y.42
  %1559 = sub i32 %1557, 1
  %1560 = mul i32 %1557, %1559
  %1561 = urem i32 %1560, 2
  %1562 = icmp eq i32 %1561, 0
  %1563 = icmp slt i32 %1558, 10
  %1564 = or i1 %1562, %1563
  br i1 %1564, label %originalBBpart2318, label %originalBB310alteredBB

originalBBpart2318:                               ; preds = %originalBB310
  br i1 %1556, label %1565, label %1699

; <label>:1565:                                   ; preds = %originalBBpart2318
  %1566 = load %struct.arg*, %struct.arg** %32, align 8
  %1567 = load i32, i32* %25, align 4
  %1568 = sext i32 %1567 to i64
  %1569 = getelementptr inbounds %struct.arg, %struct.arg* %1566, i64 %1568
  %1570 = getelementptr inbounds %struct.arg, %struct.arg* %1569, i32 0, i32 4
  %1571 = getelementptr inbounds %struct.args_size, %struct.args_size* %1570, i32 0, i32 0
  %1572 = load i64, i64* %1571, align 8
  %1573 = trunc i64 %1572 to i32
  store i32 %1573, i32* %58, align 4
  %1574 = load i32, i32* %58, align 4
  %1575 = sext i32 %1574 to i64
  %1576 = load %struct.arg*, %struct.arg** %32, align 8
  %1577 = load i32, i32* %25, align 4
  %1578 = sext i32 %1577 to i64
  %1579 = getelementptr inbounds %struct.arg, %struct.arg* %1576, i64 %1578
  %1580 = getelementptr inbounds %struct.arg, %struct.arg* %1579, i32 0, i32 5
  %1581 = getelementptr inbounds %struct.args_size, %struct.args_size* %1580, i32 0, i32 0
  %1582 = load i64, i64* %1581, align 8
  %1583 = add nsw i64 %1575, %1582
  %1584 = trunc i64 %1583 to i32
  store i32 %1584, i32* %59, align 4
  %1585 = load i32, i32* %58, align 4
  store i32 %1585, i32* %60, align 4
  br label %1586

; <label>:1586:                                   ; preds = %originalBBpart2342, %1565
  %1587 = load i32, i32* @x.41
  %1588 = load i32, i32* @y.42
  %1589 = sub i32 %1587, 1
  %1590 = mul i32 %1587, %1589
  %1591 = urem i32 %1590, 2
  %1592 = icmp eq i32 %1591, 0
  %1593 = icmp slt i32 %1588, 10
  %1594 = or i1 %1592, %1593
  br i1 %1594, label %originalBB320, label %originalBB320alteredBB

originalBB320:                                    ; preds = %originalBB320alteredBB, %1586
  %1595 = load i32, i32* %60, align 4
  %1596 = load i32, i32* %59, align 4
  %1597 = icmp slt i32 %1595, %1596
  %1598 = load i32, i32* @x.41
  %1599 = load i32, i32* @y.42
  %1600 = sub i32 %1598, 1
  %1601 = mul i32 %1598, %1600
  %1602 = urem i32 %1601, 2
  %1603 = icmp eq i32 %1602, 0
  %1604 = icmp slt i32 %1599, 10
  %1605 = or i1 %1603, %1604
  br i1 %1605, label %originalBBpart2322, label %originalBB320alteredBB

originalBBpart2322:                               ; preds = %originalBB320
  br i1 %1597, label %1606, label %1655

; <label>:1606:                                   ; preds = %originalBBpart2322
  %1607 = load i8*, i8** @stack_usage_map, align 8
  %1608 = load i32, i32* %60, align 4
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i8, i8* %1607, i64 %1609
  %1611 = load i8, i8* %1610, align 1
  %1612 = sext i8 %1611 to i32
  %1613 = icmp ne i32 %1612, 0
  br i1 %1613, label %1614, label %1635

; <label>:1614:                                   ; preds = %1606
  %1615 = load i32, i32* @x.41
  %1616 = load i32, i32* @y.42
  %1617 = sub i32 %1615, 1
  %1618 = mul i32 %1615, %1617
  %1619 = urem i32 %1618, 2
  %1620 = icmp eq i32 %1619, 0
  %1621 = icmp slt i32 %1616, 10
  %1622 = or i1 %1620, %1621
  br i1 %1622, label %originalBB324, label %originalBB324alteredBB

originalBB324:                                    ; preds = %originalBB324alteredBB, %1614
  %1623 = load i32, i32* %60, align 4
  %1624 = load i32, i32* %40, align 4
  %1625 = icmp sgt i32 %1623, %1624
  %1626 = load i32, i32* @x.41
  %1627 = load i32, i32* @y.42
  %1628 = sub i32 %1626, 1
  %1629 = mul i32 %1626, %1628
  %1630 = urem i32 %1629, 2
  %1631 = icmp eq i32 %1630, 0
  %1632 = icmp slt i32 %1627, 10
  %1633 = or i1 %1631, %1632
  br i1 %1633, label %originalBBpart2326, label %originalBB324alteredBB

originalBBpart2326:                               ; preds = %originalBB324
  br i1 %1625, label %1634, label %1635

; <label>:1634:                                   ; preds = %originalBBpart2326
  br label %1655

; <label>:1635:                                   ; preds = %originalBBpart2326, %1606
  br label %1636

; <label>:1636:                                   ; preds = %1635
  %1637 = load i32, i32* @x.41
  %1638 = load i32, i32* @y.42
  %1639 = sub i32 %1637, 1
  %1640 = mul i32 %1637, %1639
  %1641 = urem i32 %1640, 2
  %1642 = icmp eq i32 %1641, 0
  %1643 = icmp slt i32 %1638, 10
  %1644 = or i1 %1642, %1643
  br i1 %1644, label %originalBB328, label %originalBB328alteredBB

originalBB328:                                    ; preds = %originalBB328alteredBB, %1636
  %1645 = load i32, i32* %60, align 4
  %1646 = add nsw i32 %1645, 1
  store i32 %1646, i32* %60, align 4
  %1647 = load i32, i32* @x.41
  %1648 = load i32, i32* @y.42
  %1649 = sub i32 %1647, 1
  %1650 = mul i32 %1647, %1649
  %1651 = urem i32 %1650, 2
  %1652 = icmp eq i32 %1651, 0
  %1653 = icmp slt i32 %1648, 10
  %1654 = or i1 %1652, %1653
  br i1 %1654, label %originalBBpart2342, label %originalBB328alteredBB

originalBBpart2342:                               ; preds = %originalBB328
  br label %1586

; <label>:1655:                                   ; preds = %1634, %originalBBpart2322
  %1656 = load i32, i32* %60, align 4
  %1657 = load i32, i32* %59, align 4
  %1658 = icmp ne i32 %1656, %1657
  br i1 %1658, label %1659, label %1698

; <label>:1659:                                   ; preds = %1655
  %1660 = load %struct.arg*, %struct.arg** %32, align 8
  %1661 = load i32, i32* %25, align 4
  %1662 = sext i32 %1661 to i64
  %1663 = getelementptr inbounds %struct.arg, %struct.arg* %1660, i64 %1662
  %1664 = getelementptr inbounds %struct.arg, %struct.arg* %1663, i32 0, i32 5
  %1665 = getelementptr inbounds %struct.args_size, %struct.args_size* %1664, i32 0, i32 0
  %1666 = load i64, i64* %1665, align 8
  %1667 = mul nsw i64 %1666, 8
  %1668 = trunc i64 %1667 to i32
  %1669 = call i32 @mode_for_size(i32 %1668, i32 1, i32 1)
  store i32 %1669, i32* %61, align 4
  %1670 = load i32, i32* %61, align 4
  %1671 = load i32, i32* %61, align 4
  %1672 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %1673 = load %struct.arg*, %struct.arg** %32, align 8
  %1674 = load i32, i32* %25, align 4
  %1675 = sext i32 %1674 to i64
  %1676 = getelementptr inbounds %struct.arg, %struct.arg* %1673, i64 %1675
  %1677 = getelementptr inbounds %struct.arg, %struct.arg* %1676, i32 0, i32 4
  %1678 = getelementptr inbounds %struct.args_size, %struct.args_size* %1677, i32 0, i32 0
  %1679 = load i64, i64* %1678, align 8
  %1680 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %1672, i64 %1679)
  %1681 = call %struct.rtx_def* @memory_address(i32 %1671, %struct.rtx_def* %1680)
  %1682 = call %struct.rtx_def* @gen_rtx_MEM(i32 %1670, %struct.rtx_def* %1681)
  store %struct.rtx_def* %1682, %struct.rtx_def** %62, align 8
  %1683 = load i32, i32* %61, align 4
  %1684 = call %struct.rtx_def* @gen_reg_rtx(i32 %1683)
  %1685 = load %struct.arg*, %struct.arg** %32, align 8
  %1686 = load i32, i32* %25, align 4
  %1687 = sext i32 %1686 to i64
  %1688 = getelementptr inbounds %struct.arg, %struct.arg* %1685, i64 %1687
  %1689 = getelementptr inbounds %struct.arg, %struct.arg* %1688, i32 0, i32 6
  store %struct.rtx_def* %1684, %struct.rtx_def** %1689, align 8
  %1690 = load %struct.arg*, %struct.arg** %32, align 8
  %1691 = load i32, i32* %25, align 4
  %1692 = sext i32 %1691 to i64
  %1693 = getelementptr inbounds %struct.arg, %struct.arg* %1690, i64 %1692
  %1694 = getelementptr inbounds %struct.arg, %struct.arg* %1693, i32 0, i32 6
  %1695 = load %struct.rtx_def*, %struct.rtx_def** %1694, align 8
  %1696 = load %struct.rtx_def*, %struct.rtx_def** %62, align 8
  %1697 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1695, %struct.rtx_def* %1696)
  br label %1698

; <label>:1698:                                   ; preds = %1659, %1655
  br label %1699

; <label>:1699:                                   ; preds = %1698, %originalBBpart2318
  %1700 = load i32, i32* @x.41
  %1701 = load i32, i32* @y.42
  %1702 = sub i32 %1700, 1
  %1703 = mul i32 %1700, %1702
  %1704 = urem i32 %1703, 2
  %1705 = icmp eq i32 %1704, 0
  %1706 = icmp slt i32 %1701, 10
  %1707 = or i1 %1705, %1706
  br i1 %1707, label %originalBB344, label %originalBB344alteredBB

originalBB344:                                    ; preds = %originalBB344alteredBB, %1699
  %1708 = load %struct.rtx_def*, %struct.rtx_def** %55, align 8
  %1709 = load i32, i32* %54, align 4
  %1710 = load i32, i32* %57, align 4
  %1711 = load %struct.rtx_def*, %struct.rtx_def** %56, align 8
  %1712 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %1713 = load %struct.arg*, %struct.arg** %32, align 8
  %1714 = load i32, i32* %25, align 4
  %1715 = sext i32 %1714 to i64
  %1716 = getelementptr inbounds %struct.arg, %struct.arg* %1713, i64 %1715
  %1717 = getelementptr inbounds %struct.arg, %struct.arg* %1716, i32 0, i32 4
  %1718 = getelementptr inbounds %struct.args_size, %struct.args_size* %1717, i32 0, i32 0
  %1719 = load i64, i64* %1718, align 8
  %1720 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1719)
  %1721 = load i32, i32* %40, align 4
  %1722 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 1
  %1723 = load %union.tree_node*, %union.tree_node** %1722, align 8
  %1724 = icmp eq %union.tree_node* %1723, null
  %1725 = load i32, i32* @x.41
  %1726 = load i32, i32* @y.42
  %1727 = sub i32 %1725, 1
  %1728 = mul i32 %1725, %1727
  %1729 = urem i32 %1728, 2
  %1730 = icmp eq i32 %1729, 0
  %1731 = icmp slt i32 %1726, 10
  %1732 = or i1 %1730, %1731
  br i1 %1732, label %originalBBpart2346, label %originalBB344alteredBB

originalBBpart2346:                               ; preds = %originalBB344
  br i1 %1724, label %1733, label %1737

; <label>:1733:                                   ; preds = %originalBBpart2346
  %1734 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 0
  %1735 = load i64, i64* %1734, align 8
  %1736 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1735)
  br label %1789

; <label>:1737:                                   ; preds = %originalBBpart2346
  %1738 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 1
  %1739 = load %union.tree_node*, %union.tree_node** %1738, align 8
  %1740 = icmp eq %union.tree_node* %1739, null
  br i1 %1740, label %1741, label %1761

; <label>:1741:                                   ; preds = %1737
  %1742 = load i32, i32* @x.41
  %1743 = load i32, i32* @y.42
  %1744 = sub i32 %1742, 1
  %1745 = mul i32 %1742, %1744
  %1746 = urem i32 %1745, 2
  %1747 = icmp eq i32 %1746, 0
  %1748 = icmp slt i32 %1743, 10
  %1749 = or i1 %1747, %1748
  br i1 %1749, label %originalBB348, label %originalBB348alteredBB

originalBB348:                                    ; preds = %originalBB348alteredBB, %1741
  %1750 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 0
  %1751 = load i64, i64* %1750, align 8
  %1752 = call %union.tree_node* @size_int_wide(i64 %1751, i32 1)
  %1753 = load i32, i32* @x.41
  %1754 = load i32, i32* @y.42
  %1755 = sub i32 %1753, 1
  %1756 = mul i32 %1753, %1755
  %1757 = urem i32 %1756, 2
  %1758 = icmp eq i32 %1757, 0
  %1759 = icmp slt i32 %1754, 10
  %1760 = or i1 %1758, %1759
  br i1 %1760, label %originalBBpart2350, label %originalBB348alteredBB

originalBBpart2350:                               ; preds = %originalBB348
  br label %1770

; <label>:1761:                                   ; preds = %1737
  %1762 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %1763 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 1
  %1764 = load %union.tree_node*, %union.tree_node** %1763, align 8
  %1765 = call %union.tree_node* @convert(%union.tree_node* %1762, %union.tree_node* %1764)
  %1766 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 0
  %1767 = load i64, i64* %1766, align 8
  %1768 = call %union.tree_node* @size_int_wide(i64 %1767, i32 1)
  %1769 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1765, %union.tree_node* %1768)
  br label %1770

; <label>:1770:                                   ; preds = %1761, %originalBBpart2350
  %1771 = phi %union.tree_node* [ %1752, %originalBBpart2350 ], [ %1769, %1761 ]
  %1772 = load i32, i32* @x.41
  %1773 = load i32, i32* @y.42
  %1774 = sub i32 %1772, 1
  %1775 = mul i32 %1772, %1774
  %1776 = urem i32 %1775, 2
  %1777 = icmp eq i32 %1776, 0
  %1778 = icmp slt i32 %1773, 10
  %1779 = or i1 %1777, %1778
  br i1 %1779, label %originalBB352, label %originalBB352alteredBB

originalBB352:                                    ; preds = %originalBB352alteredBB, %1770
  %1780 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1771, %struct.rtx_def* null, i32 0, i32 0)
  %1781 = load i32, i32* @x.41
  %1782 = load i32, i32* @y.42
  %1783 = sub i32 %1781, 1
  %1784 = mul i32 %1781, %1783
  %1785 = urem i32 %1784, 2
  %1786 = icmp eq i32 %1785, 0
  %1787 = icmp slt i32 %1782, 10
  %1788 = or i1 %1786, %1787
  br i1 %1788, label %originalBBpart2354, label %originalBB352alteredBB

originalBBpart2354:                               ; preds = %originalBB352
  br label %1789

; <label>:1789:                                   ; preds = %originalBBpart2354, %1733
  %1790 = phi %struct.rtx_def* [ %1736, %1733 ], [ %1780, %originalBBpart2354 ]
  call void @emit_push_insn(%struct.rtx_def* %1708, i32 %1709, %union.tree_node* null, %struct.rtx_def* null, i32 0, i32 %1710, %struct.rtx_def* %1711, i32 0, %struct.rtx_def* %1712, %struct.rtx_def* %1720, i32 %1721, %struct.rtx_def* %1790)
  %1791 = load i32, i32* @target_flags, align 4
  %1792 = and i32 %1791, 4096
  %1793 = icmp ne i32 %1792, 0
  br i1 %1793, label %1794, label %1825

; <label>:1794:                                   ; preds = %1789
  %1795 = load i32, i32* %58, align 4
  store i32 %1795, i32* %60, align 4
  br label %1796

; <label>:1796:                                   ; preds = %1821, %1794
  %1797 = load i32, i32* @x.41
  %1798 = load i32, i32* @y.42
  %1799 = sub i32 %1797, 1
  %1800 = mul i32 %1797, %1799
  %1801 = urem i32 %1800, 2
  %1802 = icmp eq i32 %1801, 0
  %1803 = icmp slt i32 %1798, 10
  %1804 = or i1 %1802, %1803
  br i1 %1804, label %originalBB356, label %originalBB356alteredBB

originalBB356:                                    ; preds = %originalBB356alteredBB, %1796
  %1805 = load i32, i32* %60, align 4
  %1806 = load i32, i32* %59, align 4
  %1807 = icmp slt i32 %1805, %1806
  %1808 = load i32, i32* @x.41
  %1809 = load i32, i32* @y.42
  %1810 = sub i32 %1808, 1
  %1811 = mul i32 %1808, %1810
  %1812 = urem i32 %1811, 2
  %1813 = icmp eq i32 %1812, 0
  %1814 = icmp slt i32 %1809, 10
  %1815 = or i1 %1813, %1814
  br i1 %1815, label %originalBBpart2358, label %originalBB356alteredBB

originalBBpart2358:                               ; preds = %originalBB356
  br i1 %1807, label %1816, label %1824

; <label>:1816:                                   ; preds = %originalBBpart2358
  %1817 = load i8*, i8** @stack_usage_map, align 8
  %1818 = load i32, i32* %60, align 4
  %1819 = sext i32 %1818 to i64
  %1820 = getelementptr inbounds i8, i8* %1817, i64 %1819
  store i8 1, i8* %1820, align 1
  br label %1821

; <label>:1821:                                   ; preds = %1816
  %1822 = load i32, i32* %60, align 4
  %1823 = add nsw i32 %1822, 1
  store i32 %1823, i32* %60, align 4
  br label %1796

; <label>:1824:                                   ; preds = %originalBBpart2358
  br label %1825

; <label>:1825:                                   ; preds = %1824, %1789
  %1826 = load %struct.function*, %struct.function** @cfun, align 8
  %1827 = getelementptr inbounds %struct.function, %struct.function* %1826, i32 0, i32 2
  %1828 = load %struct.expr_status*, %struct.expr_status** %1827, align 8
  %1829 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1828, i32 0, i32 1
  %1830 = load i32, i32* %1829, align 4
  %1831 = add nsw i32 %1830, 1
  store i32 %1831, i32* %1829, align 4
  br label %1832

; <label>:1832:                                   ; preds = %1825, %1542
  br label %1833

; <label>:1833:                                   ; preds = %1832
  %1834 = load i32, i32* %28, align 4
  %1835 = add nsw i32 %1834, 1
  store i32 %1835, i32* %28, align 4
  %1836 = load i32, i32* %27, align 4
  %1837 = load i32, i32* %25, align 4
  %1838 = add nsw i32 %1837, %1836
  store i32 %1838, i32* %25, align 4
  br label %1511

; <label>:1839:                                   ; preds = %1511
  %1840 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %1841 = icmp eq %struct.rtx_def* %1840, null
  br i1 %1841, label %1842, label %1857

; <label>:1842:                                   ; preds = %1839
  %1843 = load i32, i32* @target_flags, align 4
  %1844 = and i32 %1843, 2048
  %1845 = icmp ne i32 %1844, 0
  br i1 %1845, label %1850, label %1846

; <label>:1846:                                   ; preds = %1842
  %1847 = load i32, i32* @target_flags, align 4
  %1848 = and i32 %1847, 4096
  %1849 = icmp ne i32 %1848, 0
  br i1 %1849, label %1850, label %1857

; <label>:1850:                                   ; preds = %1846, %1842
  %1851 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %1852 = load i64, i64* %1851, align 8
  %1853 = getelementptr inbounds %struct.args_size, %struct.args_size* %24, i32 0, i32 0
  %1854 = load i64, i64* %1853, align 8
  %1855 = sub nsw i64 %1852, %1854
  %1856 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1855)
  call void @anti_adjust_stack(%struct.rtx_def* %1856)
  br label %1857

; <label>:1857:                                   ; preds = %1850, %1846, %1839
  %1858 = load i32, i32* @target_flags, align 4
  %1859 = and i32 %1858, 2048
  %1860 = icmp ne i32 %1859, 0
  br i1 %1860, label %1868, label %1861

; <label>:1861:                                   ; preds = %1857
  %1862 = load i32, i32* @target_flags, align 4
  %1863 = and i32 %1862, 4096
  %1864 = icmp ne i32 %1863, 0
  br i1 %1864, label %1868, label %1865

; <label>:1865:                                   ; preds = %1861
  %1866 = load i32, i32* %21, align 4
  %1867 = sub nsw i32 %1866, 1
  store i32 %1867, i32* %25, align 4
  br label %1869

; <label>:1868:                                   ; preds = %1861, %1857
  store i32 0, i32* %25, align 4
  br label %1869

; <label>:1869:                                   ; preds = %1868, %1865
  %1870 = load i32, i32* @x.41
  %1871 = load i32, i32* @y.42
  %1872 = sub i32 %1870, 1
  %1873 = mul i32 %1870, %1872
  %1874 = urem i32 %1873, 2
  %1875 = icmp eq i32 %1874, 0
  %1876 = icmp slt i32 %1871, 10
  %1877 = or i1 %1875, %1876
  br i1 %1877, label %originalBB360, label %originalBB360alteredBB

originalBB360:                                    ; preds = %originalBB360alteredBB, %1869
  %1878 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %1879 = call %struct.rtx_def* @prepare_call_address(%struct.rtx_def* %1878, %union.tree_node* null, %struct.rtx_def** %34, i32 0, i32 0)
  store %struct.rtx_def* %1879, %struct.rtx_def** %26, align 8
  store i32 0, i32* %28, align 4
  %1880 = load i32, i32* @x.41
  %1881 = load i32, i32* @y.42
  %1882 = sub i32 %1880, 1
  %1883 = mul i32 %1880, %1882
  %1884 = urem i32 %1883, 2
  %1885 = icmp eq i32 %1884, 0
  %1886 = icmp slt i32 %1881, 10
  %1887 = or i1 %1885, %1886
  br i1 %1887, label %originalBBpart2362, label %originalBB360alteredBB

originalBBpart2362:                               ; preds = %originalBB360
  br label %1888

; <label>:1888:                                   ; preds = %1981, %originalBBpart2362
  %1889 = load i32, i32* @x.41
  %1890 = load i32, i32* @y.42
  %1891 = sub i32 %1889, 1
  %1892 = mul i32 %1889, %1891
  %1893 = urem i32 %1892, 2
  %1894 = icmp eq i32 %1893, 0
  %1895 = icmp slt i32 %1890, 10
  %1896 = or i1 %1894, %1895
  br i1 %1896, label %originalBB364, label %originalBB364alteredBB

originalBB364:                                    ; preds = %originalBB364alteredBB, %1888
  %1897 = load i32, i32* %28, align 4
  %1898 = load i32, i32* %21, align 4
  %1899 = icmp slt i32 %1897, %1898
  %1900 = load i32, i32* @x.41
  %1901 = load i32, i32* @y.42
  %1902 = sub i32 %1900, 1
  %1903 = mul i32 %1900, %1902
  %1904 = urem i32 %1903, 2
  %1905 = icmp eq i32 %1904, 0
  %1906 = icmp slt i32 %1901, 10
  %1907 = or i1 %1905, %1906
  br i1 %1907, label %originalBBpart2366, label %originalBB364alteredBB

originalBBpart2366:                               ; preds = %originalBB364
  br i1 %1899, label %1908, label %1987

; <label>:1908:                                   ; preds = %originalBBpart2366
  %1909 = load %struct.arg*, %struct.arg** %32, align 8
  %1910 = load i32, i32* %25, align 4
  %1911 = sext i32 %1910 to i64
  %1912 = getelementptr inbounds %struct.arg, %struct.arg* %1909, i64 %1911
  %1913 = getelementptr inbounds %struct.arg, %struct.arg* %1912, i32 0, i32 0
  %1914 = load %struct.rtx_def*, %struct.rtx_def** %1913, align 8
  store %struct.rtx_def* %1914, %struct.rtx_def** %63, align 8
  %1915 = load %struct.arg*, %struct.arg** %32, align 8
  %1916 = load i32, i32* %25, align 4
  %1917 = sext i32 %1916 to i64
  %1918 = getelementptr inbounds %struct.arg, %struct.arg* %1915, i64 %1917
  %1919 = getelementptr inbounds %struct.arg, %struct.arg* %1918, i32 0, i32 2
  %1920 = load %struct.rtx_def*, %struct.rtx_def** %1919, align 8
  store %struct.rtx_def* %1920, %struct.rtx_def** %64, align 8
  %1921 = load %struct.arg*, %struct.arg** %32, align 8
  %1922 = load i32, i32* %25, align 4
  %1923 = sext i32 %1922 to i64
  %1924 = getelementptr inbounds %struct.arg, %struct.arg* %1921, i64 %1923
  %1925 = getelementptr inbounds %struct.arg, %struct.arg* %1924, i32 0, i32 3
  %1926 = load i32, i32* %1925, align 8
  store i32 %1926, i32* %65, align 4
  %1927 = load %struct.rtx_def*, %struct.rtx_def** %64, align 8
  %1928 = icmp ne %struct.rtx_def* %1927, null
  br i1 %1928, label %1929, label %1947

; <label>:1929:                                   ; preds = %1908
  %1930 = load %struct.rtx_def*, %struct.rtx_def** %64, align 8
  %1931 = bitcast %struct.rtx_def* %1930 to i32*
  %1932 = load i32, i32* %1931, align 8
  %1933 = and i32 %1932, 65535
  %1934 = icmp eq i32 %1933, 39
  br i1 %1934, label %1935, label %1947

; <label>:1935:                                   ; preds = %1929
  %1936 = load %struct.rtx_def*, %struct.rtx_def** %64, align 8
  %1937 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  %1938 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  %1939 = bitcast %struct.rtx_def* %1938 to i32*
  %1940 = load i32, i32* %1939, align 8
  %1941 = lshr i32 %1940, 16
  %1942 = and i32 %1941, 255
  %1943 = sext i32 %1942 to i64
  %1944 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %1943
  %1945 = load i8, i8* %1944, align 1
  %1946 = zext i8 %1945 to i32
  call void @emit_group_load(%struct.rtx_def* %1936, %struct.rtx_def* %1937, i32 %1946)
  br label %1974

; <label>:1947:                                   ; preds = %1929, %1908
  %1948 = load %struct.rtx_def*, %struct.rtx_def** %64, align 8
  %1949 = icmp ne %struct.rtx_def* %1948, null
  br i1 %1949, label %1950, label %1973

; <label>:1950:                                   ; preds = %1947
  %1951 = load i32, i32* %65, align 4
  %1952 = icmp eq i32 %1951, 0
  br i1 %1952, label %1953, label %1973

; <label>:1953:                                   ; preds = %1950
  %1954 = load i32, i32* @x.41
  %1955 = load i32, i32* @y.42
  %1956 = sub i32 %1954, 1
  %1957 = mul i32 %1954, %1956
  %1958 = urem i32 %1957, 2
  %1959 = icmp eq i32 %1958, 0
  %1960 = icmp slt i32 %1955, 10
  %1961 = or i1 %1959, %1960
  br i1 %1961, label %originalBB368, label %originalBB368alteredBB

originalBB368:                                    ; preds = %originalBB368alteredBB, %1953
  %1962 = load %struct.rtx_def*, %struct.rtx_def** %64, align 8
  %1963 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  %1964 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1962, %struct.rtx_def* %1963)
  %1965 = load i32, i32* @x.41
  %1966 = load i32, i32* @y.42
  %1967 = sub i32 %1965, 1
  %1968 = mul i32 %1965, %1967
  %1969 = urem i32 %1968, 2
  %1970 = icmp eq i32 %1969, 0
  %1971 = icmp slt i32 %1966, 10
  %1972 = or i1 %1970, %1971
  br i1 %1972, label %originalBBpart2370, label %originalBB368alteredBB

originalBBpart2370:                               ; preds = %originalBB368
  br label %1973

; <label>:1973:                                   ; preds = %originalBBpart2370, %1950, %1947
  br label %1974

; <label>:1974:                                   ; preds = %1973, %1935
  %1975 = load %struct.function*, %struct.function** @cfun, align 8
  %1976 = getelementptr inbounds %struct.function, %struct.function* %1975, i32 0, i32 2
  %1977 = load %struct.expr_status*, %struct.expr_status** %1976, align 8
  %1978 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1977, i32 0, i32 1
  %1979 = load i32, i32* %1978, align 4
  %1980 = add nsw i32 %1979, 1
  store i32 %1980, i32* %1978, align 4
  br label %1981

; <label>:1981:                                   ; preds = %1974
  %1982 = load i32, i32* %28, align 4
  %1983 = add nsw i32 %1982, 1
  store i32 %1983, i32* %28, align 4
  %1984 = load i32, i32* %27, align 4
  %1985 = load i32, i32* %25, align 4
  %1986 = add nsw i32 %1985, %1984
  store i32 %1986, i32* %25, align 4
  br label %1888

; <label>:1987:                                   ; preds = %originalBBpart2366
  store i32 0, i32* %28, align 4
  br label %1988

; <label>:1988:                                   ; preds = %2064, %1987
  %1989 = load i32, i32* %28, align 4
  %1990 = load i32, i32* %21, align 4
  %1991 = icmp slt i32 %1989, %1990
  br i1 %1991, label %1992, label %2067

; <label>:1992:                                   ; preds = %1988
  %1993 = load %struct.arg*, %struct.arg** %32, align 8
  %1994 = load i32, i32* %28, align 4
  %1995 = sext i32 %1994 to i64
  %1996 = getelementptr inbounds %struct.arg, %struct.arg* %1993, i64 %1995
  %1997 = getelementptr inbounds %struct.arg, %struct.arg* %1996, i32 0, i32 2
  %1998 = load %struct.rtx_def*, %struct.rtx_def** %1997, align 8
  store %struct.rtx_def* %1998, %struct.rtx_def** %66, align 8
  %1999 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8
  %2000 = icmp ne %struct.rtx_def* %1999, null
  br i1 %2000, label %2001, label %2025

; <label>:2001:                                   ; preds = %1992
  %2002 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8
  %2003 = bitcast %struct.rtx_def* %2002 to i32*
  %2004 = load i32, i32* %2003, align 8
  %2005 = and i32 %2004, 65535
  %2006 = icmp eq i32 %2005, 39
  br i1 %2006, label %2007, label %2025

; <label>:2007:                                   ; preds = %2001
  %2008 = load i32, i32* @x.41
  %2009 = load i32, i32* @y.42
  %2010 = sub i32 %2008, 1
  %2011 = mul i32 %2008, %2010
  %2012 = urem i32 %2011, 2
  %2013 = icmp eq i32 %2012, 0
  %2014 = icmp slt i32 %2009, 10
  %2015 = or i1 %2013, %2014
  br i1 %2015, label %originalBB372, label %originalBB372alteredBB

originalBB372:                                    ; preds = %originalBB372alteredBB, %2007
  %2016 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8
  call void @use_group_regs(%struct.rtx_def** %34, %struct.rtx_def* %2016)
  %2017 = load i32, i32* @x.41
  %2018 = load i32, i32* @y.42
  %2019 = sub i32 %2017, 1
  %2020 = mul i32 %2017, %2019
  %2021 = urem i32 %2020, 2
  %2022 = icmp eq i32 %2021, 0
  %2023 = icmp slt i32 %2018, 10
  %2024 = or i1 %2022, %2023
  br i1 %2024, label %originalBBpart2374, label %originalBB372alteredBB

originalBBpart2374:                               ; preds = %originalBB372
  br label %2063

; <label>:2025:                                   ; preds = %2001, %1992
  %2026 = load i32, i32* @x.41
  %2027 = load i32, i32* @y.42
  %2028 = sub i32 %2026, 1
  %2029 = mul i32 %2026, %2028
  %2030 = urem i32 %2029, 2
  %2031 = icmp eq i32 %2030, 0
  %2032 = icmp slt i32 %2027, 10
  %2033 = or i1 %2031, %2032
  br i1 %2033, label %originalBB376, label %originalBB376alteredBB

originalBB376:                                    ; preds = %originalBB376alteredBB, %2025
  %2034 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8
  %2035 = icmp ne %struct.rtx_def* %2034, null
  %2036 = load i32, i32* @x.41
  %2037 = load i32, i32* @y.42
  %2038 = sub i32 %2036, 1
  %2039 = mul i32 %2036, %2038
  %2040 = urem i32 %2039, 2
  %2041 = icmp eq i32 %2040, 0
  %2042 = icmp slt i32 %2037, 10
  %2043 = or i1 %2041, %2042
  br i1 %2043, label %originalBBpart2378, label %originalBB376alteredBB

originalBBpart2378:                               ; preds = %originalBB376
  br i1 %2035, label %2044, label %2046

; <label>:2044:                                   ; preds = %originalBBpart2378
  %2045 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8
  call void @use_reg(%struct.rtx_def** %34, %struct.rtx_def* %2045)
  br label %2046

; <label>:2046:                                   ; preds = %2044, %originalBBpart2378
  %2047 = load i32, i32* @x.41
  %2048 = load i32, i32* @y.42
  %2049 = sub i32 %2047, 1
  %2050 = mul i32 %2047, %2049
  %2051 = urem i32 %2050, 2
  %2052 = icmp eq i32 %2051, 0
  %2053 = icmp slt i32 %2048, 10
  %2054 = or i1 %2052, %2053
  br i1 %2054, label %originalBB380, label %originalBB380alteredBB

originalBB380:                                    ; preds = %originalBB380alteredBB, %2046
  %2055 = load i32, i32* @x.41
  %2056 = load i32, i32* @y.42
  %2057 = sub i32 %2055, 1
  %2058 = mul i32 %2055, %2057
  %2059 = urem i32 %2058, 2
  %2060 = icmp eq i32 %2059, 0
  %2061 = icmp slt i32 %2056, 10
  %2062 = or i1 %2060, %2061
  br i1 %2062, label %originalBBpart2382, label %originalBB380alteredBB

originalBBpart2382:                               ; preds = %originalBB380
  br label %2063

; <label>:2063:                                   ; preds = %originalBBpart2382, %originalBBpart2374
  br label %2064

; <label>:2064:                                   ; preds = %2063
  %2065 = load i32, i32* %28, align 4
  %2066 = add nsw i32 %2065, 1
  store i32 %2066, i32* %28, align 4
  br label %1988

; <label>:2067:                                   ; preds = %1988
  %2068 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %2069 = icmp ne %struct.rtx_def* %2068, null
  br i1 %2069, label %2070, label %2130

; <label>:2070:                                   ; preds = %2067
  %2071 = load i32, i32* @x.41
  %2072 = load i32, i32* @y.42
  %2073 = sub i32 %2071, 1
  %2074 = mul i32 %2071, %2073
  %2075 = urem i32 %2074, 2
  %2076 = icmp eq i32 %2075, 0
  %2077 = icmp slt i32 %2072, 10
  %2078 = or i1 %2076, %2077
  br i1 %2078, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %originalBB384alteredBB, %2070
  %2079 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  %2080 = icmp ne %struct.rtx_def* %2079, null
  %2081 = load i32, i32* @x.41
  %2082 = load i32, i32* @y.42
  %2083 = sub i32 %2081, 1
  %2084 = mul i32 %2081, %2083
  %2085 = urem i32 %2084, 2
  %2086 = icmp eq i32 %2085, 0
  %2087 = icmp slt i32 %2082, 10
  %2088 = or i1 %2086, %2087
  br i1 %2088, label %originalBBpart2386, label %originalBB384alteredBB

originalBBpart2386:                               ; preds = %originalBB384
  br i1 %2080, label %2089, label %2130

; <label>:2089:                                   ; preds = %originalBBpart2386
  %2090 = load i32, i32* %37, align 4
  %2091 = icmp ne i32 %2090, 0
  br i1 %2091, label %2130, label %2092

; <label>:2092:                                   ; preds = %2089
  %2093 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  %2094 = load i32, i32* @target_flags, align 4
  %2095 = and i32 %2094, 33554432
  %2096 = icmp ne i32 %2095, 0
  %2097 = select i1 %2096, i32 5, i32 4
  %2098 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %2099 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2098, i32 0, i32 1
  %2100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2099, i64 0, i64 0
  %2101 = bitcast %union.rtunion_def* %2100 to %struct.rtx_def**
  %2102 = load %struct.rtx_def*, %struct.rtx_def** %2101, align 8
  %2103 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %2102, %struct.rtx_def* null)
  %2104 = call %struct.rtx_def* @force_reg(i32 %2097, %struct.rtx_def* %2103)
  %2105 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2093, %struct.rtx_def* %2104)
  %2106 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  %2107 = bitcast %struct.rtx_def* %2106 to i32*
  %2108 = load i32, i32* %2107, align 8
  %2109 = and i32 %2108, 65535
  %2110 = icmp eq i32 %2109, 61
  br i1 %2110, label %2111, label %2113

; <label>:2111:                                   ; preds = %2092
  %2112 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  call void @use_reg(%struct.rtx_def** %34, %struct.rtx_def* %2112)
  br label %2113

; <label>:2113:                                   ; preds = %2111, %2092
  %2114 = load i32, i32* @x.41
  %2115 = load i32, i32* @y.42
  %2116 = sub i32 %2114, 1
  %2117 = mul i32 %2114, %2116
  %2118 = urem i32 %2117, 2
  %2119 = icmp eq i32 %2118, 0
  %2120 = icmp slt i32 %2115, 10
  %2121 = or i1 %2119, %2120
  br i1 %2121, label %originalBB388, label %originalBB388alteredBB

originalBB388:                                    ; preds = %originalBB388alteredBB, %2113
  %2122 = load i32, i32* @x.41
  %2123 = load i32, i32* @y.42
  %2124 = sub i32 %2122, 1
  %2125 = mul i32 %2122, %2124
  %2126 = urem i32 %2125, 2
  %2127 = icmp eq i32 %2126, 0
  %2128 = icmp slt i32 %2123, 10
  %2129 = or i1 %2127, %2128
  br i1 %2129, label %originalBBpart2390, label %originalBB388alteredBB

originalBBpart2390:                               ; preds = %originalBB388
  br label %2130

; <label>:2130:                                   ; preds = %originalBBpart2390, %2089, %originalBBpart2386, %2067
  %2131 = load %struct.function*, %struct.function** @cfun, align 8
  %2132 = getelementptr inbounds %struct.function, %struct.function* %2131, i32 0, i32 2
  %2133 = load %struct.expr_status*, %struct.expr_status** %2132, align 8
  %2134 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2133, i32 0, i32 1
  %2135 = load i32, i32* %2134, align 4
  %2136 = add nsw i32 %2135, 1
  store i32 %2136, i32* %2134, align 4
  %2137 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %2138 = icmp eq %struct.rtx_def* %2137, null
  br i1 %2138, label %2139, label %2145

; <label>:2139:                                   ; preds = %2130
  %2140 = load i32, i32* %20, align 4
  %2141 = icmp ne i32 %2140, 0
  br i1 %2141, label %2142, label %2145

; <label>:2142:                                   ; preds = %2139
  %2143 = load i32, i32* %20, align 4
  %2144 = call %struct.rtx_def* @hard_libcall_value(i32 %2143)
  br label %2162

; <label>:2145:                                   ; preds = %2139, %2130
  %2146 = load i32, i32* @x.41
  %2147 = load i32, i32* @y.42
  %2148 = sub i32 %2146, 1
  %2149 = mul i32 %2146, %2148
  %2150 = urem i32 %2149, 2
  %2151 = icmp eq i32 %2150, 0
  %2152 = icmp slt i32 %2147, 10
  %2153 = or i1 %2151, %2152
  br i1 %2153, label %originalBB392, label %originalBB392alteredBB

originalBB392:                                    ; preds = %originalBB392alteredBB, %2145
  %2154 = load i32, i32* @x.41
  %2155 = load i32, i32* @y.42
  %2156 = sub i32 %2154, 1
  %2157 = mul i32 %2154, %2156
  %2158 = urem i32 %2157, 2
  %2159 = icmp eq i32 %2158, 0
  %2160 = icmp slt i32 %2155, 10
  %2161 = or i1 %2159, %2160
  br i1 %2161, label %originalBBpart2394, label %originalBB392alteredBB

originalBBpart2394:                               ; preds = %originalBB392
  br label %2162

; <label>:2162:                                   ; preds = %originalBBpart2394, %2142
  %2163 = phi %struct.rtx_def* [ %2144, %2142 ], [ null, %originalBBpart2394 ]
  store %struct.rtx_def* %2163, %struct.rtx_def** %36, align 8
  %2164 = load %struct.function*, %struct.function** @cfun, align 8
  %2165 = getelementptr inbounds %struct.function, %struct.function* %2164, i32 0, i32 2
  %2166 = load %struct.expr_status*, %struct.expr_status** %2165, align 8
  %2167 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2166, i32 0, i32 2
  %2168 = load i32, i32* %2167, align 8
  %2169 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %2170 = sdiv i32 %2169, 8
  %2171 = sub nsw i32 %2170, 1
  %2172 = and i32 %2168, %2171
  %2173 = icmp ne i32 %2172, 0
  br i1 %2173, label %2174, label %2191

; <label>:2174:                                   ; preds = %2162
  %2175 = load i32, i32* @x.41
  %2176 = load i32, i32* @y.42
  %2177 = sub i32 %2175, 1
  %2178 = mul i32 %2175, %2177
  %2179 = urem i32 %2178, 2
  %2180 = icmp eq i32 %2179, 0
  %2181 = icmp slt i32 %2176, 10
  %2182 = or i1 %2180, %2181
  br i1 %2182, label %originalBB396, label %originalBB396alteredBB

originalBB396:                                    ; preds = %originalBB396alteredBB, %2174
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 4032, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.emit_library_call_value_1, i32 0, i32 0)) #8
  %2183 = load i32, i32* @x.41
  %2184 = load i32, i32* @y.42
  %2185 = sub i32 %2183, 1
  %2186 = mul i32 %2183, %2185
  %2187 = urem i32 %2186, 2
  %2188 = icmp eq i32 %2187, 0
  %2189 = icmp slt i32 %2184, 10
  %2190 = or i1 %2188, %2189
  br i1 %2190, label %originalBBpart2398, label %originalBB396alteredBB

originalBBpart2398:                               ; preds = %originalBB396
  unreachable

; <label>:2191:                                   ; preds = %2162
  %2192 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %2192, %struct.rtx_def** %42, align 8
  %2193 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %2194 = load %struct.rtx_def*, %struct.rtx_def** %17, align 8
  %2195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2194, i32 0, i32 1
  %2196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2195, i64 0, i64 0
  %2197 = bitcast %union.rtunion_def* %2196 to i8**
  %2198 = load i8*, i8** %2197, align 8
  %2199 = call %union.tree_node* @get_identifier(i8* %2198)
  %2200 = load i32, i32* %20, align 4
  %2201 = icmp eq i32 %2200, 0
  br i1 %2201, label %2202, label %2204

; <label>:2202:                                   ; preds = %2191
  %2203 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8
  br label %2223

; <label>:2204:                                   ; preds = %2191
  %2205 = load i32, i32* @x.41
  %2206 = load i32, i32* @y.42
  %2207 = sub i32 %2205, 1
  %2208 = mul i32 %2205, %2207
  %2209 = urem i32 %2208, 2
  %2210 = icmp eq i32 %2209, 0
  %2211 = icmp slt i32 %2206, 10
  %2212 = or i1 %2210, %2211
  br i1 %2212, label %originalBB400, label %originalBB400alteredBB

originalBB400:                                    ; preds = %originalBB400alteredBB, %2204
  %2213 = load i32, i32* %20, align 4
  %2214 = call %union.tree_node* @type_for_mode(i32 %2213, i32 0)
  %2215 = load i32, i32* @x.41
  %2216 = load i32, i32* @y.42
  %2217 = sub i32 %2215, 1
  %2218 = mul i32 %2215, %2217
  %2219 = urem i32 %2218, 2
  %2220 = icmp eq i32 %2219, 0
  %2221 = icmp slt i32 %2216, 10
  %2222 = or i1 %2220, %2221
  br i1 %2222, label %originalBBpart2402, label %originalBB400alteredBB

originalBBpart2402:                               ; preds = %originalBB400
  br label %2223

; <label>:2223:                                   ; preds = %originalBBpart2402, %2202
  %2224 = phi %union.tree_node* [ %2203, %2202 ], [ %2214, %originalBBpart2402 ]
  %2225 = call %union.tree_node* @build_function_type(%union.tree_node* %2224, %union.tree_node* null)
  %2226 = getelementptr inbounds %struct.args_size, %struct.args_size* %24, i32 0, i32 0
  %2227 = load i64, i64* %2226, align 8
  %2228 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %2229 = load i64, i64* %2228, align 8
  %2230 = load i32, i32* %38, align 4
  %2231 = sext i32 %2230 to i64
  %2232 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8
  %2233 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %31, i32 0, %union.tree_node* %2232, i32 1)
  %2234 = load %struct.rtx_def*, %struct.rtx_def** %36, align 8
  %2235 = load i32, i32* %33, align 4
  %2236 = add nsw i32 %2235, 1
  %2237 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %2238 = load i32, i32* %39, align 4
  call void @emit_call_1(%struct.rtx_def* %2193, %union.tree_node* %2199, %union.tree_node* %2225, i64 %2227, i64 %2229, i64 %2231, %struct.rtx_def* %2233, %struct.rtx_def* %2234, i32 %2236, %struct.rtx_def* %2237, i32 %2238, %struct.ix86_args* %31)
  %2239 = load i32, i32* %39, align 4
  %2240 = and i32 %2239, 66
  %2241 = icmp ne i32 %2240, 0
  br i1 %2241, label %2242, label %2296

; <label>:2242:                                   ; preds = %2223
  %2243 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %2243, %struct.rtx_def** %67, align 8
  br label %2244

; <label>:2244:                                   ; preds = %originalBBpart2406, %2242
  %2245 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8
  %2246 = bitcast %struct.rtx_def* %2245 to i32*
  %2247 = load i32, i32* %2246, align 8
  %2248 = and i32 %2247, 65535
  %2249 = icmp ne i32 %2248, 34
  br i1 %2249, label %2250, label %2277

; <label>:2250:                                   ; preds = %2244
  %2251 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8
  %2252 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2251, i32 0, i32 1
  %2253 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %2252, i64 0, i64 1
  %2254 = bitcast %union.rtunion_def* %2253 to %struct.rtx_def**
  %2255 = load %struct.rtx_def*, %struct.rtx_def** %2254, align 8
  store %struct.rtx_def* %2255, %struct.rtx_def** %67, align 8
  %2256 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8
  %2257 = load %struct.rtx_def*, %struct.rtx_def** %42, align 8
  %2258 = icmp eq %struct.rtx_def* %2256, %2257
  br i1 %2258, label %2259, label %2260

; <label>:2259:                                   ; preds = %2250
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 4069, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.emit_library_call_value_1, i32 0, i32 0)) #8
  unreachable

; <label>:2260:                                   ; preds = %2250
  %2261 = load i32, i32* @x.41
  %2262 = load i32, i32* @y.42
  %2263 = sub i32 %2261, 1
  %2264 = mul i32 %2261, %2263
  %2265 = urem i32 %2264, 2
  %2266 = icmp eq i32 %2265, 0
  %2267 = icmp slt i32 %2262, 10
  %2268 = or i1 %2266, %2267
  br i1 %2268, label %originalBB404, label %originalBB404alteredBB

originalBB404:                                    ; preds = %originalBB404alteredBB, %2260
  %2269 = load i32, i32* @x.41
  %2270 = load i32, i32* @y.42
  %2271 = sub i32 %2269, 1
  %2272 = mul i32 %2269, %2271
  %2273 = urem i32 %2272, 2
  %2274 = icmp eq i32 %2273, 0
  %2275 = icmp slt i32 %2270, 10
  %2276 = or i1 %2274, %2275
  br i1 %2276, label %originalBBpart2406, label %originalBB404alteredBB

originalBBpart2406:                               ; preds = %originalBB404
  br label %2244

; <label>:2277:                                   ; preds = %2244
  %2278 = load i32, i32* @x.41
  %2279 = load i32, i32* @y.42
  %2280 = sub i32 %2278, 1
  %2281 = mul i32 %2278, %2280
  %2282 = urem i32 %2281, 2
  %2283 = icmp eq i32 %2282, 0
  %2284 = icmp slt i32 %2279, 10
  %2285 = or i1 %2283, %2284
  br i1 %2285, label %originalBB408, label %originalBB408alteredBB

originalBB408:                                    ; preds = %originalBB408alteredBB, %2277
  %2286 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8
  %2287 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %2286)
  %2288 = load i32, i32* @x.41
  %2289 = load i32, i32* @y.42
  %2290 = sub i32 %2288, 1
  %2291 = mul i32 %2288, %2290
  %2292 = urem i32 %2291, 2
  %2293 = icmp eq i32 %2292, 0
  %2294 = icmp slt i32 %2289, 10
  %2295 = or i1 %2293, %2294
  br i1 %2295, label %originalBBpart2410, label %originalBB408alteredBB

originalBBpart2410:                               ; preds = %originalBB408
  br label %2296

; <label>:2296:                                   ; preds = %originalBBpart2410, %2223
  %2297 = load i32, i32* @x.41
  %2298 = load i32, i32* @y.42
  %2299 = sub i32 %2297, 1
  %2300 = mul i32 %2297, %2299
  %2301 = urem i32 %2300, 2
  %2302 = icmp eq i32 %2301, 0
  %2303 = icmp slt i32 %2298, 10
  %2304 = or i1 %2302, %2303
  br i1 %2304, label %originalBB412, label %originalBB412alteredBB

originalBB412:                                    ; preds = %originalBB412alteredBB, %2296
  %2305 = load %struct.function*, %struct.function** @cfun, align 8
  %2306 = getelementptr inbounds %struct.function, %struct.function* %2305, i32 0, i32 2
  %2307 = load %struct.expr_status*, %struct.expr_status** %2306, align 8
  %2308 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2307, i32 0, i32 1
  %2309 = load i32, i32* %2308, align 4
  %2310 = sub nsw i32 %2309, 1
  store i32 %2310, i32* %2308, align 4
  %2311 = load i32, i32* %39, align 4
  %2312 = and i32 %2311, 4096
  %2313 = icmp ne i32 %2312, 0
  %2314 = load i32, i32* @x.41
  %2315 = load i32, i32* @y.42
  %2316 = sub i32 %2314, 1
  %2317 = mul i32 %2314, %2316
  %2318 = urem i32 %2317, 2
  %2319 = icmp eq i32 %2318, 0
  %2320 = icmp slt i32 %2315, 10
  %2321 = or i1 %2319, %2320
  br i1 %2321, label %originalBBpart2430, label %originalBB412alteredBB

originalBBpart2430:                               ; preds = %originalBB412
  br i1 %2313, label %2322, label %2411

; <label>:2322:                                   ; preds = %originalBBpart2430
  %2323 = load %struct.rtx_def*, %struct.rtx_def** %36, align 8
  %2324 = icmp eq %struct.rtx_def* %2323, null
  br i1 %2324, label %2331, label %2325

; <label>:2325:                                   ; preds = %2322
  %2326 = load %struct.rtx_def*, %struct.rtx_def** %36, align 8
  %2327 = bitcast %struct.rtx_def* %2326 to i32*
  %2328 = load i32, i32* %2327, align 8
  %2329 = and i32 %2328, 65535
  %2330 = icmp eq i32 %2329, 39
  br i1 %2330, label %2331, label %2335

; <label>:2331:                                   ; preds = %2325, %2322
  %2332 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %2332, %struct.rtx_def** %68, align 8
  call void @end_sequence()
  %2333 = load %struct.rtx_def*, %struct.rtx_def** %68, align 8
  %2334 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %2333)
  br label %2410

; <label>:2335:                                   ; preds = %2325
  store %struct.rtx_def* null, %struct.rtx_def** %69, align 8
  %2336 = load %struct.rtx_def*, %struct.rtx_def** %36, align 8
  %2337 = bitcast %struct.rtx_def* %2336 to i32*
  %2338 = load i32, i32* %2337, align 8
  %2339 = lshr i32 %2338, 16
  %2340 = and i32 %2339, 255
  %2341 = call %struct.rtx_def* @gen_reg_rtx(i32 %2340)
  store %struct.rtx_def* %2341, %struct.rtx_def** %70, align 8
  store i32 0, i32* %71, align 4
  br label %2342

; <label>:2342:                                   ; preds = %2371, %2335
  %2343 = load i32, i32* @x.41
  %2344 = load i32, i32* @y.42
  %2345 = sub i32 %2343, 1
  %2346 = mul i32 %2343, %2345
  %2347 = urem i32 %2346, 2
  %2348 = icmp eq i32 %2347, 0
  %2349 = icmp slt i32 %2344, 10
  %2350 = or i1 %2348, %2349
  br i1 %2350, label %originalBB432, label %originalBB432alteredBB

originalBB432:                                    ; preds = %originalBB432alteredBB, %2342
  %2351 = load i32, i32* %71, align 4
  %2352 = load i32, i32* %21, align 4
  %2353 = icmp slt i32 %2351, %2352
  %2354 = load i32, i32* @x.41
  %2355 = load i32, i32* @y.42
  %2356 = sub i32 %2354, 1
  %2357 = mul i32 %2354, %2356
  %2358 = urem i32 %2357, 2
  %2359 = icmp eq i32 %2358, 0
  %2360 = icmp slt i32 %2355, 10
  %2361 = or i1 %2359, %2360
  br i1 %2361, label %originalBBpart2434, label %originalBB432alteredBB

originalBBpart2434:                               ; preds = %originalBB432
  br i1 %2353, label %2362, label %2374

; <label>:2362:                                   ; preds = %originalBBpart2434
  %2363 = load %struct.arg*, %struct.arg** %32, align 8
  %2364 = load i32, i32* %71, align 4
  %2365 = sext i32 %2364 to i64
  %2366 = getelementptr inbounds %struct.arg, %struct.arg* %2363, i64 %2365
  %2367 = getelementptr inbounds %struct.arg, %struct.arg* %2366, i32 0, i32 0
  %2368 = load %struct.rtx_def*, %struct.rtx_def** %2367, align 8
  %2369 = load %struct.rtx_def*, %struct.rtx_def** %69, align 8
  %2370 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %2368, %struct.rtx_def* %2369)
  store %struct.rtx_def* %2370, %struct.rtx_def** %69, align 8
  br label %2371

; <label>:2371:                                   ; preds = %2362
  %2372 = load i32, i32* %71, align 4
  %2373 = add nsw i32 %2372, 1
  store i32 %2373, i32* %71, align 4
  br label %2342

; <label>:2374:                                   ; preds = %originalBBpart2434
  %2375 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %2376 = load %struct.rtx_def*, %struct.rtx_def** %69, align 8
  %2377 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %2375, %struct.rtx_def* %2376)
  store %struct.rtx_def* %2377, %struct.rtx_def** %69, align 8
  %2378 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %2378, %struct.rtx_def** %68, align 8
  call void @end_sequence()
  %2379 = load i32, i32* %39, align 4
  %2380 = and i32 %2379, 512
  %2381 = icmp ne i32 %2380, 0
  br i1 %2381, label %2382, label %2404

; <label>:2382:                                   ; preds = %2374
  %2383 = load i32, i32* @x.41
  %2384 = load i32, i32* @y.42
  %2385 = sub i32 %2383, 1
  %2386 = mul i32 %2383, %2385
  %2387 = urem i32 %2386, 2
  %2388 = icmp eq i32 %2387, 0
  %2389 = icmp slt i32 %2384, 10
  %2390 = or i1 %2388, %2389
  br i1 %2390, label %originalBB436, label %originalBB436alteredBB

originalBB436:                                    ; preds = %originalBB436alteredBB, %2382
  %2391 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %2392 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %2391)
  %2393 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2392)
  %2394 = load %struct.rtx_def*, %struct.rtx_def** %69, align 8
  %2395 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %2393, %struct.rtx_def* %2394)
  store %struct.rtx_def* %2395, %struct.rtx_def** %69, align 8
  %2396 = load i32, i32* @x.41
  %2397 = load i32, i32* @y.42
  %2398 = sub i32 %2396, 1
  %2399 = mul i32 %2396, %2398
  %2400 = urem i32 %2399, 2
  %2401 = icmp eq i32 %2400, 0
  %2402 = icmp slt i32 %2397, 10
  %2403 = or i1 %2401, %2402
  br i1 %2403, label %originalBBpart2438, label %originalBB436alteredBB

originalBBpart2438:                               ; preds = %originalBB436
  br label %2404

; <label>:2404:                                   ; preds = %originalBBpart2438, %2374
  %2405 = load %struct.rtx_def*, %struct.rtx_def** %68, align 8
  %2406 = load %struct.rtx_def*, %struct.rtx_def** %70, align 8
  %2407 = load %struct.rtx_def*, %struct.rtx_def** %36, align 8
  %2408 = load %struct.rtx_def*, %struct.rtx_def** %69, align 8
  call void @emit_libcall_block(%struct.rtx_def* %2405, %struct.rtx_def* %2406, %struct.rtx_def* %2407, %struct.rtx_def* %2408)
  %2409 = load %struct.rtx_def*, %struct.rtx_def** %70, align 8
  store %struct.rtx_def* %2409, %struct.rtx_def** %36, align 8
  br label %2410

; <label>:2410:                                   ; preds = %2404, %2331
  br label %2411

; <label>:2411:                                   ; preds = %2410, %originalBBpart2430
  %2412 = load i32, i32* @x.41
  %2413 = load i32, i32* @y.42
  %2414 = sub i32 %2412, 1
  %2415 = mul i32 %2412, %2414
  %2416 = urem i32 %2415, 2
  %2417 = icmp eq i32 %2416, 0
  %2418 = icmp slt i32 %2413, 10
  %2419 = or i1 %2417, %2418
  br i1 %2419, label %originalBB440, label %originalBB440alteredBB

originalBB440:                                    ; preds = %originalBB440alteredBB, %2411
  call void @pop_temp_slots()
  %2420 = load i32, i32* %20, align 4
  %2421 = icmp ne i32 %2420, 0
  %2422 = load i32, i32* @x.41
  %2423 = load i32, i32* @y.42
  %2424 = sub i32 %2422, 1
  %2425 = mul i32 %2422, %2424
  %2426 = urem i32 %2425, 2
  %2427 = icmp eq i32 %2426, 0
  %2428 = icmp slt i32 %2423, 10
  %2429 = or i1 %2427, %2428
  br i1 %2429, label %originalBBpart2442, label %originalBB440alteredBB

originalBBpart2442:                               ; preds = %originalBB440
  br i1 %2421, label %2430, label %2575

; <label>:2430:                                   ; preds = %originalBBpart2442
  %2431 = load i32, i32* @x.41
  %2432 = load i32, i32* @y.42
  %2433 = sub i32 %2431, 1
  %2434 = mul i32 %2431, %2433
  %2435 = urem i32 %2434, 2
  %2436 = icmp eq i32 %2435, 0
  %2437 = icmp slt i32 %2432, 10
  %2438 = or i1 %2436, %2437
  br i1 %2438, label %originalBB444, label %originalBB444alteredBB

originalBB444:                                    ; preds = %originalBB444alteredBB, %2430
  %2439 = load i32, i32* %16, align 4
  %2440 = icmp ne i32 %2439, 0
  %2441 = load i32, i32* @x.41
  %2442 = load i32, i32* @y.42
  %2443 = sub i32 %2441, 1
  %2444 = mul i32 %2441, %2443
  %2445 = urem i32 %2444, 2
  %2446 = icmp eq i32 %2445, 0
  %2447 = icmp slt i32 %2442, 10
  %2448 = or i1 %2446, %2447
  br i1 %2448, label %originalBBpart2446, label %originalBB444alteredBB

originalBBpart2446:                               ; preds = %originalBB444
  br i1 %2440, label %2449, label %2575

; <label>:2449:                                   ; preds = %originalBBpart2446
  %2450 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %2451 = icmp ne %struct.rtx_def* %2450, null
  br i1 %2451, label %2452, label %2498

; <label>:2452:                                   ; preds = %2449
  %2453 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %2454 = icmp eq %struct.rtx_def* %2453, null
  br i1 %2454, label %2455, label %2457

; <label>:2455:                                   ; preds = %2452
  %2456 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  store %struct.rtx_def* %2456, %struct.rtx_def** %18, align 8
  br label %2457

; <label>:2457:                                   ; preds = %2455, %2452
  %2458 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %2459 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %2460 = icmp ne %struct.rtx_def* %2458, %2459
  br i1 %2460, label %2461, label %2481

; <label>:2461:                                   ; preds = %2457
  %2462 = load i32, i32* @x.41
  %2463 = load i32, i32* @y.42
  %2464 = sub i32 %2462, 1
  %2465 = mul i32 %2462, %2464
  %2466 = urem i32 %2465, 2
  %2467 = icmp eq i32 %2466, 0
  %2468 = icmp slt i32 %2463, 10
  %2469 = or i1 %2467, %2468
  br i1 %2469, label %originalBB448, label %originalBB448alteredBB

originalBB448:                                    ; preds = %originalBB448alteredBB, %2461
  %2470 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %2471 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %2472 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2470, %struct.rtx_def* %2471)
  %2473 = load i32, i32* @x.41
  %2474 = load i32, i32* @y.42
  %2475 = sub i32 %2473, 1
  %2476 = mul i32 %2473, %2475
  %2477 = urem i32 %2476, 2
  %2478 = icmp eq i32 %2477, 0
  %2479 = icmp slt i32 %2474, 10
  %2480 = or i1 %2478, %2479
  br i1 %2480, label %originalBBpart2450, label %originalBB448alteredBB

originalBBpart2450:                               ; preds = %originalBB448
  br label %2481

; <label>:2481:                                   ; preds = %originalBBpart2450, %2457
  %2482 = load i32, i32* @x.41
  %2483 = load i32, i32* @y.42
  %2484 = sub i32 %2482, 1
  %2485 = mul i32 %2482, %2484
  %2486 = urem i32 %2485, 2
  %2487 = icmp eq i32 %2486, 0
  %2488 = icmp slt i32 %2483, 10
  %2489 = or i1 %2487, %2488
  br i1 %2489, label %originalBB452, label %originalBB452alteredBB

originalBB452:                                    ; preds = %originalBB452alteredBB, %2481
  %2490 = load i32, i32* @x.41
  %2491 = load i32, i32* @y.42
  %2492 = sub i32 %2490, 1
  %2493 = mul i32 %2490, %2492
  %2494 = urem i32 %2493, 2
  %2495 = icmp eq i32 %2494, 0
  %2496 = icmp slt i32 %2491, 10
  %2497 = or i1 %2495, %2496
  br i1 %2497, label %originalBBpart2454, label %originalBB452alteredBB

originalBBpart2454:                               ; preds = %originalBB452
  br label %2558

; <label>:2498:                                   ; preds = %2449
  %2499 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %2500 = icmp ne %struct.rtx_def* %2499, null
  br i1 %2500, label %2501, label %2522

; <label>:2501:                                   ; preds = %2498
  %2502 = load i32, i32* @x.41
  %2503 = load i32, i32* @y.42
  %2504 = sub i32 %2502, 1
  %2505 = mul i32 %2502, %2504
  %2506 = urem i32 %2505, 2
  %2507 = icmp eq i32 %2506, 0
  %2508 = icmp slt i32 %2503, 10
  %2509 = or i1 %2507, %2508
  br i1 %2509, label %originalBB456, label %originalBB456alteredBB

originalBB456:                                    ; preds = %originalBB456alteredBB, %2501
  %2510 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %2511 = load i32, i32* %20, align 4
  %2512 = call %struct.rtx_def* @hard_libcall_value(i32 %2511)
  %2513 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2510, %struct.rtx_def* %2512)
  %2514 = load i32, i32* @x.41
  %2515 = load i32, i32* @y.42
  %2516 = sub i32 %2514, 1
  %2517 = mul i32 %2514, %2516
  %2518 = urem i32 %2517, 2
  %2519 = icmp eq i32 %2518, 0
  %2520 = icmp slt i32 %2515, 10
  %2521 = or i1 %2519, %2520
  br i1 %2521, label %originalBBpart2458, label %originalBB456alteredBB

originalBBpart2458:                               ; preds = %originalBB456
  br label %2541

; <label>:2522:                                   ; preds = %2498
  %2523 = load i32, i32* @x.41
  %2524 = load i32, i32* @y.42
  %2525 = sub i32 %2523, 1
  %2526 = mul i32 %2523, %2525
  %2527 = urem i32 %2526, 2
  %2528 = icmp eq i32 %2527, 0
  %2529 = icmp slt i32 %2524, 10
  %2530 = or i1 %2528, %2529
  br i1 %2530, label %originalBB460, label %originalBB460alteredBB

originalBB460:                                    ; preds = %originalBB460alteredBB, %2522
  %2531 = load i32, i32* %20, align 4
  %2532 = call %struct.rtx_def* @hard_libcall_value(i32 %2531)
  store %struct.rtx_def* %2532, %struct.rtx_def** %18, align 8
  %2533 = load i32, i32* @x.41
  %2534 = load i32, i32* @y.42
  %2535 = sub i32 %2533, 1
  %2536 = mul i32 %2533, %2535
  %2537 = urem i32 %2536, 2
  %2538 = icmp eq i32 %2537, 0
  %2539 = icmp slt i32 %2534, 10
  %2540 = or i1 %2538, %2539
  br i1 %2540, label %originalBBpart2462, label %originalBB460alteredBB

originalBBpart2462:                               ; preds = %originalBB460
  br label %2541

; <label>:2541:                                   ; preds = %originalBBpart2462, %originalBBpart2458
  %2542 = load i32, i32* @x.41
  %2543 = load i32, i32* @y.42
  %2544 = sub i32 %2542, 1
  %2545 = mul i32 %2542, %2544
  %2546 = urem i32 %2545, 2
  %2547 = icmp eq i32 %2546, 0
  %2548 = icmp slt i32 %2543, 10
  %2549 = or i1 %2547, %2548
  br i1 %2549, label %originalBB464, label %originalBB464alteredBB

originalBB464:                                    ; preds = %originalBB464alteredBB, %2541
  %2550 = load i32, i32* @x.41
  %2551 = load i32, i32* @y.42
  %2552 = sub i32 %2550, 1
  %2553 = mul i32 %2550, %2552
  %2554 = urem i32 %2553, 2
  %2555 = icmp eq i32 %2554, 0
  %2556 = icmp slt i32 %2551, 10
  %2557 = or i1 %2555, %2556
  br i1 %2557, label %originalBBpart2466, label %originalBB464alteredBB

originalBBpart2466:                               ; preds = %originalBB464
  br label %2558

; <label>:2558:                                   ; preds = %originalBBpart2466, %originalBBpart2454
  %2559 = load i32, i32* @x.41
  %2560 = load i32, i32* @y.42
  %2561 = sub i32 %2559, 1
  %2562 = mul i32 %2559, %2561
  %2563 = urem i32 %2562, 2
  %2564 = icmp eq i32 %2563, 0
  %2565 = icmp slt i32 %2560, 10
  %2566 = or i1 %2564, %2565
  br i1 %2566, label %originalBB468, label %originalBB468alteredBB

originalBB468:                                    ; preds = %originalBB468alteredBB, %2558
  %2567 = load i32, i32* @x.41
  %2568 = load i32, i32* @y.42
  %2569 = sub i32 %2567, 1
  %2570 = mul i32 %2567, %2569
  %2571 = urem i32 %2570, 2
  %2572 = icmp eq i32 %2571, 0
  %2573 = icmp slt i32 %2568, 10
  %2574 = or i1 %2572, %2573
  br i1 %2574, label %originalBBpart2470, label %originalBB468alteredBB

originalBBpart2470:                               ; preds = %originalBB468
  br label %2575

; <label>:2575:                                   ; preds = %originalBBpart2470, %originalBBpart2446, %originalBBpart2442
  %2576 = load i32, i32* @x.41
  %2577 = load i32, i32* @y.42
  %2578 = sub i32 %2576, 1
  %2579 = mul i32 %2576, %2578
  %2580 = urem i32 %2579, 2
  %2581 = icmp eq i32 %2580, 0
  %2582 = icmp slt i32 %2577, 10
  %2583 = or i1 %2581, %2582
  br i1 %2583, label %originalBB472, label %originalBB472alteredBB

originalBB472:                                    ; preds = %originalBB472alteredBB, %2575
  %2584 = load i32, i32* @target_flags, align 4
  %2585 = and i32 %2584, 4096
  %2586 = icmp ne i32 %2585, 0
  %2587 = load i32, i32* @x.41
  %2588 = load i32, i32* @y.42
  %2589 = sub i32 %2587, 1
  %2590 = mul i32 %2587, %2589
  %2591 = urem i32 %2590, 2
  %2592 = icmp eq i32 %2591, 0
  %2593 = icmp slt i32 %2588, 10
  %2594 = or i1 %2592, %2593
  br i1 %2594, label %originalBBpart2482, label %originalBB472alteredBB

originalBBpart2482:                               ; preds = %originalBB472
  br i1 %2586, label %2595, label %2751

; <label>:2595:                                   ; preds = %originalBBpart2482
  %2596 = load i32, i32* @x.41
  %2597 = load i32, i32* @y.42
  %2598 = sub i32 %2596, 1
  %2599 = mul i32 %2596, %2598
  %2600 = urem i32 %2599, 2
  %2601 = icmp eq i32 %2600, 0
  %2602 = icmp slt i32 %2597, 10
  %2603 = or i1 %2601, %2602
  br i1 %2603, label %originalBB484, label %originalBB484alteredBB

originalBB484:                                    ; preds = %originalBB484alteredBB, %2595
  %2604 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %2605 = icmp ne %struct.rtx_def* %2604, null
  %2606 = load i32, i32* @x.41
  %2607 = load i32, i32* @y.42
  %2608 = sub i32 %2606, 1
  %2609 = mul i32 %2606, %2608
  %2610 = urem i32 %2609, 2
  %2611 = icmp eq i32 %2610, 0
  %2612 = icmp slt i32 %2607, 10
  %2613 = or i1 %2611, %2612
  br i1 %2613, label %originalBBpart2486, label %originalBB484alteredBB

originalBBpart2486:                               ; preds = %originalBB484
  br i1 %2605, label %2614, label %2667

; <label>:2614:                                   ; preds = %originalBBpart2486
  %2615 = load i32, i32* @x.41
  %2616 = load i32, i32* @y.42
  %2617 = sub i32 %2615, 1
  %2618 = mul i32 %2615, %2617
  %2619 = urem i32 %2618, 2
  %2620 = icmp eq i32 %2619, 0
  %2621 = icmp slt i32 %2616, 10
  %2622 = or i1 %2620, %2621
  br i1 %2622, label %originalBB488, label %originalBB488alteredBB

originalBB488:                                    ; preds = %originalBB488alteredBB, %2614
  %2623 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %2624 = bitcast %struct.rtx_def* %2623 to i32*
  %2625 = load i32, i32* %2624, align 8
  %2626 = lshr i32 %2625, 16
  %2627 = and i32 %2626, 255
  store i32 %2627, i32* %72, align 4
  %2628 = load i32, i32* %72, align 4
  %2629 = load i32, i32* %72, align 4
  %2630 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %2631 = load i32, i32* %43, align 4
  %2632 = sext i32 %2631 to i64
  %2633 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %2630, i64 %2632)
  %2634 = call %struct.rtx_def* @memory_address(i32 %2629, %struct.rtx_def* %2633)
  %2635 = call %struct.rtx_def* @gen_rtx_MEM(i32 %2628, %struct.rtx_def* %2634)
  store %struct.rtx_def* %2635, %struct.rtx_def** %73, align 8
  %2636 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  %2637 = load i32, i32* @target_flags, align 4
  %2638 = and i32 %2637, 33554432
  %2639 = icmp ne i32 %2638, 0
  %2640 = select i1 %2639, i32 64, i32 32
  call void @set_mem_align(%struct.rtx_def* %2636, i32 %2640)
  %2641 = load i32, i32* %72, align 4
  %2642 = icmp ne i32 %2641, 51
  %2643 = load i32, i32* @x.41
  %2644 = load i32, i32* @y.42
  %2645 = sub i32 %2643, 1
  %2646 = mul i32 %2643, %2645
  %2647 = urem i32 %2646, 2
  %2648 = icmp eq i32 %2647, 0
  %2649 = icmp slt i32 %2644, 10
  %2650 = or i1 %2648, %2649
  br i1 %2650, label %originalBBpart2506, label %originalBB488alteredBB

originalBBpart2506:                               ; preds = %originalBB488
  br i1 %2642, label %2651, label %2655

; <label>:2651:                                   ; preds = %originalBBpart2506
  %2652 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  %2653 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %2654 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2652, %struct.rtx_def* %2653)
  br label %2666

; <label>:2655:                                   ; preds = %originalBBpart2506
  %2656 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  %2657 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %2658 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %2657)
  %2659 = load i32, i32* %44, align 4
  %2660 = load i32, i32* %43, align 4
  %2661 = sub nsw i32 %2659, %2660
  %2662 = add nsw i32 %2661, 1
  %2663 = sext i32 %2662 to i64
  %2664 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %2663)
  %2665 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %2656, %struct.rtx_def* %2658, %struct.rtx_def* %2664)
  br label %2666

; <label>:2666:                                   ; preds = %2655, %2651
  br label %2667

; <label>:2667:                                   ; preds = %2666, %originalBBpart2486
  store i32 0, i32* %28, align 4
  br label %2668

; <label>:2668:                                   ; preds = %2745, %2667
  %2669 = load i32, i32* %28, align 4
  %2670 = load i32, i32* %21, align 4
  %2671 = icmp slt i32 %2669, %2670
  br i1 %2671, label %2672, label %2748

; <label>:2672:                                   ; preds = %2668
  %2673 = load i32, i32* @x.41
  %2674 = load i32, i32* @y.42
  %2675 = sub i32 %2673, 1
  %2676 = mul i32 %2673, %2675
  %2677 = urem i32 %2676, 2
  %2678 = icmp eq i32 %2677, 0
  %2679 = icmp slt i32 %2674, 10
  %2680 = or i1 %2678, %2679
  br i1 %2680, label %originalBB508, label %originalBB508alteredBB

originalBB508:                                    ; preds = %originalBB508alteredBB, %2672
  %2681 = load %struct.arg*, %struct.arg** %32, align 8
  %2682 = load i32, i32* %28, align 4
  %2683 = sext i32 %2682 to i64
  %2684 = getelementptr inbounds %struct.arg, %struct.arg* %2681, i64 %2683
  %2685 = getelementptr inbounds %struct.arg, %struct.arg* %2684, i32 0, i32 6
  %2686 = load %struct.rtx_def*, %struct.rtx_def** %2685, align 8
  %2687 = icmp ne %struct.rtx_def* %2686, null
  %2688 = load i32, i32* @x.41
  %2689 = load i32, i32* @y.42
  %2690 = sub i32 %2688, 1
  %2691 = mul i32 %2688, %2690
  %2692 = urem i32 %2691, 2
  %2693 = icmp eq i32 %2692, 0
  %2694 = icmp slt i32 %2689, 10
  %2695 = or i1 %2693, %2694
  br i1 %2695, label %originalBBpart2510, label %originalBB508alteredBB

originalBBpart2510:                               ; preds = %originalBB508
  br i1 %2687, label %2696, label %2744

; <label>:2696:                                   ; preds = %originalBBpart2510
  %2697 = load i32, i32* @x.41
  %2698 = load i32, i32* @y.42
  %2699 = sub i32 %2697, 1
  %2700 = mul i32 %2697, %2699
  %2701 = urem i32 %2700, 2
  %2702 = icmp eq i32 %2701, 0
  %2703 = icmp slt i32 %2698, 10
  %2704 = or i1 %2702, %2703
  br i1 %2704, label %originalBB512, label %originalBB512alteredBB

originalBB512:                                    ; preds = %originalBB512alteredBB, %2696
  %2705 = load %struct.arg*, %struct.arg** %32, align 8
  %2706 = load i32, i32* %28, align 4
  %2707 = sext i32 %2706 to i64
  %2708 = getelementptr inbounds %struct.arg, %struct.arg* %2705, i64 %2707
  %2709 = getelementptr inbounds %struct.arg, %struct.arg* %2708, i32 0, i32 6
  %2710 = load %struct.rtx_def*, %struct.rtx_def** %2709, align 8
  %2711 = bitcast %struct.rtx_def* %2710 to i32*
  %2712 = load i32, i32* %2711, align 8
  %2713 = lshr i32 %2712, 16
  %2714 = and i32 %2713, 255
  store i32 %2714, i32* %74, align 4
  %2715 = load i32, i32* %74, align 4
  %2716 = load i32, i32* %74, align 4
  %2717 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %2718 = load %struct.arg*, %struct.arg** %32, align 8
  %2719 = load i32, i32* %28, align 4
  %2720 = sext i32 %2719 to i64
  %2721 = getelementptr inbounds %struct.arg, %struct.arg* %2718, i64 %2720
  %2722 = getelementptr inbounds %struct.arg, %struct.arg* %2721, i32 0, i32 4
  %2723 = getelementptr inbounds %struct.args_size, %struct.args_size* %2722, i32 0, i32 0
  %2724 = load i64, i64* %2723, align 8
  %2725 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %2717, i64 %2724)
  %2726 = call %struct.rtx_def* @memory_address(i32 %2716, %struct.rtx_def* %2725)
  %2727 = call %struct.rtx_def* @gen_rtx_MEM(i32 %2715, %struct.rtx_def* %2726)
  store %struct.rtx_def* %2727, %struct.rtx_def** %75, align 8
  %2728 = load %struct.rtx_def*, %struct.rtx_def** %75, align 8
  %2729 = load %struct.arg*, %struct.arg** %32, align 8
  %2730 = load i32, i32* %28, align 4
  %2731 = sext i32 %2730 to i64
  %2732 = getelementptr inbounds %struct.arg, %struct.arg* %2729, i64 %2731
  %2733 = getelementptr inbounds %struct.arg, %struct.arg* %2732, i32 0, i32 6
  %2734 = load %struct.rtx_def*, %struct.rtx_def** %2733, align 8
  %2735 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2728, %struct.rtx_def* %2734)
  %2736 = load i32, i32* @x.41
  %2737 = load i32, i32* @y.42
  %2738 = sub i32 %2736, 1
  %2739 = mul i32 %2736, %2738
  %2740 = urem i32 %2739, 2
  %2741 = icmp eq i32 %2740, 0
  %2742 = icmp slt i32 %2737, 10
  %2743 = or i1 %2741, %2742
  br i1 %2743, label %originalBBpart2520, label %originalBB512alteredBB

originalBBpart2520:                               ; preds = %originalBB512
  br label %2744

; <label>:2744:                                   ; preds = %originalBBpart2520, %originalBBpart2510
  br label %2745

; <label>:2745:                                   ; preds = %2744
  %2746 = load i32, i32* %28, align 4
  %2747 = add nsw i32 %2746, 1
  store i32 %2747, i32* %28, align 4
  br label %2668

; <label>:2748:                                   ; preds = %2668
  %2749 = load i32, i32* %46, align 4
  store i32 %2749, i32* @highest_outgoing_arg_in_use, align 4
  %2750 = load i8*, i8** %47, align 8
  store i8* %2750, i8** @stack_usage_map, align 8
  br label %2751

; <label>:2751:                                   ; preds = %2748, %originalBBpart2482
  %2752 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  ret %struct.rtx_def* %2752

originalBBalteredBB:                              ; preds = %originalBB, %7
  %2753 = alloca i32, align 4
  %2754 = alloca %struct.rtx_def*, align 8
  %2755 = alloca %struct.rtx_def*, align 8
  %2756 = alloca i32, align 4
  %2757 = alloca i32, align 4
  %2758 = alloca i32, align 4
  %2759 = alloca %struct.__va_list_tag*, align 8
  %2760 = alloca %struct.args_size, align 8
  %2761 = alloca %struct.args_size, align 8
  %2762 = alloca i32, align 4
  %2763 = alloca %struct.rtx_def*, align 8
  %2764 = alloca i32, align 4
  %2765 = alloca i32, align 4
  %2766 = alloca %struct.args_size, align 8
  %2767 = alloca %struct.rtx_def*, align 8
  %2768 = alloca %struct.ix86_args, align 4
  %2769 = alloca %struct.arg*, align 8
  %2770 = alloca i32, align 4
  %2771 = alloca %struct.rtx_def*, align 8
  %2772 = alloca %struct.rtx_def*, align 8
  %2773 = alloca %struct.rtx_def*, align 8
  %2774 = alloca i32, align 4
  %2775 = alloca i32, align 4
  %2776 = alloca i32, align 4
  %2777 = alloca i32, align 4
  %2778 = alloca i32, align 4
  %2779 = alloca %struct.rtx_def*, align 8
  %2780 = alloca i32, align 4
  %2781 = alloca i32, align 4
  %2782 = alloca %struct.rtx_def*, align 8
  %2783 = alloca i32, align 4
  %2784 = alloca i8*, align 8
  %2785 = alloca %struct.rtx_def*, align 8
  %2786 = alloca %struct.rtx_def*, align 8
  %2787 = alloca i32, align 4
  %2788 = alloca i32, align 4
  %2789 = alloca i32, align 4
  %2790 = alloca %struct.rtx_def*, align 8
  %2791 = alloca i32, align 4
  %2792 = alloca %struct.rtx_def*, align 8
  %2793 = alloca %struct.rtx_def*, align 8
  %2794 = alloca i32, align 4
  %2795 = alloca i32, align 4
  %2796 = alloca i32, align 4
  %2797 = alloca i32, align 4
  %2798 = alloca i32, align 4
  %2799 = alloca %struct.rtx_def*, align 8
  %2800 = alloca %struct.rtx_def*, align 8
  %2801 = alloca %struct.rtx_def*, align 8
  %2802 = alloca i32, align 4
  %2803 = alloca %struct.rtx_def*, align 8
  %2804 = alloca %struct.rtx_def*, align 8
  %2805 = alloca %struct.rtx_def*, align 8
  %2806 = alloca %struct.rtx_def*, align 8
  %2807 = alloca %struct.rtx_def*, align 8
  %2808 = alloca i32, align 4
  %2809 = alloca i32, align 4
  %2810 = alloca %struct.rtx_def*, align 8
  %2811 = alloca i32, align 4
  %2812 = alloca %struct.rtx_def*, align 8
  store i32 %0, i32* %2753, align 4
  store %struct.rtx_def* %1, %struct.rtx_def** %2754, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %2755, align 8
  store i32 %3, i32* %2756, align 4
  store i32 %4, i32* %2757, align 4
  store i32 %5, i32* %2758, align 4
  store %struct.__va_list_tag* %6, %struct.__va_list_tag** %2759, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %2767, align 8
  %2813 = load %struct.function*, %struct.function** @cfun, align 8
  %2814 = getelementptr inbounds %struct.function, %struct.function* %2813, i32 0, i32 2
  %2815 = load %struct.expr_status*, %struct.expr_status** %2814, align 8
  %2816 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2815, i32 0, i32 1
  %2817 = load i32, i32* %2816, align 4
  store i32 %2817, i32* %2770, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %2771, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %2772, align 8
  store i32 0, i32* %2774, align 4
  store i32 0, i32* %2775, align 4
  store i32 0, i32* %2777, align 4
  store i32 -1, i32* %2780, align 4
  store i32 0, i32* %2781, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %2782, align 8
  %2818 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  store i32 %2818, i32* %2783, align 4
  %2819 = load i8*, i8** @stack_usage_map, align 8
  store i8* %2819, i8** %2784, align 8
  store i32 0, i32* %2777, align 4
  store i32 16, i32* %2776, align 4
  %2820 = load i32, i32* %2756, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %92
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %118
  %2821 = load i32, i32* %39, align 4
  %_ = shl i32 %2821, 4608
  %_7 = sub i32 0, %2821
  %gen = add i32 %_7, 4608
  %_8 = sub i32 0, %2821
  %gen9 = add i32 %_8, 4608
  %_10 = sub i32 0, %2821
  %gen11 = add i32 %_10, 4608
  %_12 = shl i32 %2821, 4608
  %_13 = shl i32 %2821, 4608
  %2822 = or i32 %2821, 4608
  store i32 %2822, i32* %39, align 4
  br label %originalBB6

originalBB17alteredBB:                            ; preds = %originalBB17, %137
  %2823 = load i32, i32* %39, align 4
  %_18 = shl i32 %2823, 2
  %_19 = sub i32 0, %2823
  %gen20 = add i32 %_19, 2
  %2824 = or i32 %2823, 2
  store i32 %2824, i32* %39, align 4
  br label %originalBB17

originalBB24alteredBB:                            ; preds = %originalBB24, %157
  store i32 2048, i32* %39, align 4
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %182
  %2825 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %2826 = load %struct.function*, %struct.function** @cfun, align 8
  %2827 = getelementptr inbounds %struct.function, %struct.function* %2826, i32 0, i32 53
  store i32 %2825, i32* %2827, align 4
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %224
  %2828 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  store %struct.rtx_def* %2828, %struct.rtx_def** %35, align 8
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %249
  %2829 = load i32, i32* %21, align 4
  %_38 = shl i32 %2829, 1
  %_39 = sub i32 %2829, 1
  %gen40 = mul i32 %_39, 1
  %_41 = sub i32 0, %2829
  %gen42 = add i32 %_41, 1
  %2830 = add nsw i32 %2829, 1
  %2831 = sext i32 %2830 to i64
  %_43 = sub i64 %2831, 72
  %gen44 = mul i64 %_43, 72
  %_45 = shl i64 %2831, 72
  %_46 = sub i64 %2831, 72
  %gen47 = mul i64 %_46, 72
  %_48 = shl i64 %2831, 72
  %_49 = shl i64 %2831, 72
  %_50 = sub i64 %2831, 72
  %gen51 = mul i64 %_50, 72
  %2832 = mul i64 %2831, 72
  %2833 = alloca i8, i64 %2832, align 16
  %2834 = bitcast i8* %2833 to %struct.arg*
  store %struct.arg* %2834, %struct.arg** %32, align 8
  %2835 = load %struct.arg*, %struct.arg** %32, align 8
  %2836 = bitcast %struct.arg* %2835 to i8*
  %2837 = load i32, i32* %21, align 4
  %_52 = shl i32 %2837, 1
  %2838 = add nsw i32 %2837, 1
  %2839 = sext i32 %2838 to i64
  %_53 = shl i64 %2839, 72
  %_54 = shl i64 %2839, 72
  %_55 = shl i64 %2839, 72
  %_56 = sub i64 %2839, 72
  %gen57 = mul i64 %_56, 72
  %2840 = mul i64 %2839, 72
  call void @llvm.memset.p0i8.i64(i8* %2836, i8 0, i64 %2840, i32 1, i1 false)
  %2841 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  call void @init_cumulative_args(%struct.ix86_args* %31, %union.tree_node* null, %struct.rtx_def* %2841)
  %2842 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  store i64 0, i64* %2842, align 8
  %2843 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 1
  store %union.tree_node* null, %union.tree_node** %2843, align 8
  store i32 0, i32* %28, align 4
  %2844 = load i32, i32* %39, align 4
  %_58 = sub i32 %2844, 4096
  %gen59 = mul i32 %_58, 4096
  %_60 = sub i32 %2844, 4096
  %gen61 = mul i32 %_60, 4096
  %_62 = sub i32 0, %2844
  %gen63 = add i32 %_62, 4096
  %_64 = sub i32 %2844, 4096
  %gen65 = mul i32 %_64, 4096
  %2845 = and i32 %2844, 4096
  %2846 = icmp ne i32 %2845, 0
  br label %originalBB37

originalBB69alteredBB:                            ; preds = %originalBB69, %285
  call void @push_temp_slots()
  %2847 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %2848 = icmp ne %struct.rtx_def* %2847, null
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %341
  %2849 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %2850 = bitcast %struct.rtx_def* %2849 to i32*
  %2851 = load i32, i32* %2850, align 8
  %_74 = shl i32 %2851, 65535
  %_75 = sub i32 0, %2851
  %gen76 = add i32 %_75, 65535
  %2852 = and i32 %2851, 65535
  %2853 = icmp eq i32 %2852, 54
  br label %originalBB73

originalBB80alteredBB:                            ; preds = %originalBB80, %381
  %2854 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %2855 = bitcast %struct.rtx_def* %2854 to i32*
  %2856 = load i32, i32* %2855, align 8
  %_81 = sub i32 0, %2856
  %gen82 = add i32 %_81, 65535
  %_83 = shl i32 %2856, 65535
  %_84 = sub i32 %2856, 65535
  %gen85 = mul i32 %_84, 65535
  %_86 = sub i32 0, %2856
  %gen87 = add i32 %_86, 65535
  %2857 = and i32 %2856, 65535
  %2858 = icmp eq i32 %2857, 56
  br label %originalBB80

originalBB91alteredBB:                            ; preds = %originalBB91, %409
  %2859 = load %struct.rtx_def*, %struct.rtx_def** %48, align 8
  %2860 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %2859, %struct.rtx_def* null)
  store %struct.rtx_def* %2860, %struct.rtx_def** %48, align 8
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %496
  %2861 = load i32, i32* %40, align 4
  %2862 = icmp sgt i32 %2861, 0
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %543
  %2863 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %539, i32 0, i32 3
  %2864 = load i8*, i8** %2863, align 8
  %2865 = getelementptr i8, i8* %2864, i32 %541
  %2866 = bitcast i8* %2865 to %struct.rtx_def**
  %_100 = shl i32 %541, 8
  %_101 = sub i32 0, %541
  %gen102 = add i32 %_101, 8
  %_103 = sub i32 0, %541
  %gen104 = add i32 %_103, 8
  %_105 = shl i32 %541, 8
  %_106 = shl i32 %541, 8
  %_107 = shl i32 %541, 8
  %2867 = add i32 %541, 8
  store i32 %2867, i32* %540, align 8
  br label %originalBB99

originalBB111alteredBB:                           ; preds = %originalBB111, %583
  %2868 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %573, i32 0, i32 2
  %2869 = load i8*, i8** %2868, align 8
  %2870 = bitcast i8* %2869 to i32*
  %2871 = getelementptr i8, i8* %2869, i32 8
  store i8* %2871, i8** %2868, align 8
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %625
  %2872 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %2873 = bitcast %struct.rtx_def* %2872 to i32*
  %2874 = load i32, i32* %2873, align 8
  %_116 = sub i32 %2874, 65535
  %gen117 = mul i32 %_116, 65535
  %2875 = and i32 %2874, 65535
  %2876 = icmp ne i32 %2875, 61
  br label %originalBB115

originalBB121alteredBB:                           ; preds = %originalBB121, %671
  %2877 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %2878 = bitcast %struct.rtx_def* %2877 to i32*
  %2879 = load i32, i32* %2878, align 8
  %_122 = sub i32 0, %2879
  %gen123 = add i32 %_122, 65535
  %_124 = sub i32 0, %2879
  %gen125 = add i32 %_124, 65535
  %2880 = and i32 %2879, 65535
  %2881 = icmp eq i32 %2880, 55
  br label %originalBB121

originalBB129alteredBB:                           ; preds = %originalBB129, %693
  %2882 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %2883 = bitcast %struct.rtx_def* %2882 to i32*
  %2884 = load i32, i32* %2883, align 8
  %_130 = sub i32 %2884, 65535
  %gen131 = mul i32 %_130, 65535
  %_132 = sub i32 %2884, 65535
  %gen133 = mul i32 %_132, 65535
  %_134 = sub i32 %2884, 65535
  %gen135 = mul i32 %_134, 65535
  %_136 = sub i32 0, %2884
  %gen137 = add i32 %_136, 65535
  %_138 = sub i32 %2884, 65535
  %gen139 = mul i32 %_138, 65535
  %_140 = shl i32 %2884, 65535
  %2885 = and i32 %2884, 65535
  %2886 = icmp eq i32 %2885, 58
  br label %originalBB129

originalBB144alteredBB:                           ; preds = %originalBB144, %715
  %2887 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %2888 = bitcast %struct.rtx_def* %2887 to i32*
  %2889 = load i32, i32* %2888, align 8
  %_145 = sub i32 %2889, 65535
  %gen146 = mul i32 %_145, 65535
  %_147 = shl i32 %2889, 65535
  %_148 = shl i32 %2889, 65535
  %_149 = sub i32 0, %2889
  %gen150 = add i32 %_149, 65535
  %_151 = sub i32 0, %2889
  %gen152 = add i32 %_151, 65535
  %_153 = shl i32 %2889, 65535
  %2890 = and i32 %2889, 65535
  %2891 = icmp eq i32 %2890, 134
  br label %originalBB144

originalBB157alteredBB:                           ; preds = %originalBB157, %743
  %2892 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %2893 = bitcast %struct.rtx_def* %2892 to i32*
  %2894 = load i32, i32* %2893, align 8
  %_158 = shl i32 %2894, 65535
  %_159 = sub i32 0, %2894
  %gen160 = add i32 %_159, 65535
  %2895 = and i32 %2894, 65535
  %2896 = icmp eq i32 %2895, 140
  br label %originalBB157

originalBB164alteredBB:                           ; preds = %originalBB164, %768
  %2897 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8
  %2898 = load %struct.arg*, %struct.arg** %32, align 8
  %2899 = load i32, i32* %28, align 4
  %2900 = sext i32 %2899 to i64
  %2901 = getelementptr inbounds %struct.arg, %struct.arg* %2898, i64 %2900
  %2902 = getelementptr inbounds %struct.arg, %struct.arg* %2901, i32 0, i32 0
  store %struct.rtx_def* %2897, %struct.rtx_def** %2902, align 8
  %2903 = load i32, i32* %50, align 4
  %2904 = load %struct.arg*, %struct.arg** %32, align 8
  %2905 = load i32, i32* %28, align 4
  %2906 = sext i32 %2905 to i64
  %2907 = getelementptr inbounds %struct.arg, %struct.arg* %2904, i64 %2906
  %2908 = getelementptr inbounds %struct.arg, %struct.arg* %2907, i32 0, i32 1
  store i32 %2903, i32* %2908, align 8
  %2909 = load i32, i32* %50, align 4
  %2910 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %31, i32 %2909, %union.tree_node* null, i32 1)
  %2911 = load %struct.arg*, %struct.arg** %32, align 8
  %2912 = load i32, i32* %28, align 4
  %2913 = sext i32 %2912 to i64
  %2914 = getelementptr inbounds %struct.arg, %struct.arg* %2911, i64 %2913
  %2915 = getelementptr inbounds %struct.arg, %struct.arg* %2914, i32 0, i32 2
  store %struct.rtx_def* %2910, %struct.rtx_def** %2915, align 8
  %2916 = load %struct.arg*, %struct.arg** %32, align 8
  %2917 = load i32, i32* %28, align 4
  %2918 = sext i32 %2917 to i64
  %2919 = getelementptr inbounds %struct.arg, %struct.arg* %2916, i64 %2918
  %2920 = getelementptr inbounds %struct.arg, %struct.arg* %2919, i32 0, i32 3
  store i32 0, i32* %2920, align 8
  %2921 = load i32, i32* %50, align 4
  %2922 = load %struct.arg*, %struct.arg** %32, align 8
  %2923 = load i32, i32* %28, align 4
  %2924 = sext i32 %2923 to i64
  %2925 = getelementptr inbounds %struct.arg, %struct.arg* %2922, i64 %2924
  %2926 = getelementptr inbounds %struct.arg, %struct.arg* %2925, i32 0, i32 2
  %2927 = load %struct.rtx_def*, %struct.rtx_def** %2926, align 8
  %2928 = icmp ne %struct.rtx_def* %2927, null
  %2929 = zext i1 %2928 to i32
  %2930 = load %struct.arg*, %struct.arg** %32, align 8
  %2931 = load i32, i32* %28, align 4
  %2932 = sext i32 %2931 to i64
  %2933 = getelementptr inbounds %struct.arg, %struct.arg* %2930, i64 %2932
  %2934 = getelementptr inbounds %struct.arg, %struct.arg* %2933, i32 0, i32 4
  %2935 = load %struct.arg*, %struct.arg** %32, align 8
  %2936 = load i32, i32* %28, align 4
  %2937 = sext i32 %2936 to i64
  %2938 = getelementptr inbounds %struct.arg, %struct.arg* %2935, i64 %2937
  %2939 = getelementptr inbounds %struct.arg, %struct.arg* %2938, i32 0, i32 5
  call void @locate_and_pad_parm(i32 %2921, %union.tree_node* null, i32 %2929, %union.tree_node* null, %struct.args_size* %23, %struct.args_size* %2934, %struct.args_size* %2939, %struct.args_size* %29)
  %2940 = load %struct.arg*, %struct.arg** %32, align 8
  %2941 = load i32, i32* %28, align 4
  %2942 = sext i32 %2941 to i64
  %2943 = getelementptr inbounds %struct.arg, %struct.arg* %2940, i64 %2942
  %2944 = getelementptr inbounds %struct.arg, %struct.arg* %2943, i32 0, i32 5
  %2945 = getelementptr inbounds %struct.args_size, %struct.args_size* %2944, i32 0, i32 1
  %2946 = load %union.tree_node*, %union.tree_node** %2945, align 8
  %2947 = icmp ne %union.tree_node* %2946, null
  br label %originalBB164

originalBB168alteredBB:                           ; preds = %originalBB168, %899
  %2948 = load i32, i32* %50, align 4
  call void @function_arg_advance(%struct.ix86_args* %31, i32 %2948, %union.tree_node* null, i32 1)
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %917
  %2949 = load i32, i32* %28, align 4
  %_173 = shl i32 %2949, 1
  %_174 = shl i32 %2949, 1
  %_175 = sub i32 %2949, 1
  %gen176 = mul i32 %_175, 1
  %_177 = shl i32 %2949, 1
  %_178 = sub i32 0, %2949
  %gen179 = add i32 %_178, 1
  %_180 = sub i32 0, %2949
  %gen181 = add i32 %_180, 1
  %_182 = sub i32 %2949, 1
  %gen183 = mul i32 %_182, 1
  %_184 = sub i32 0, %2949
  %gen185 = add i32 %_184, 1
  %_186 = sub i32 0, %2949
  %gen187 = add i32 %_186, 1
  %2950 = add nsw i32 %2949, 1
  store i32 %2950, i32* %28, align 4
  br label %originalBB172

originalBB191alteredBB:                           ; preds = %originalBB191, %975
  %2951 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %2952 = load i64, i64* %2951, align 8
  br label %originalBB191

originalBB195alteredBB:                           ; preds = %originalBB195, %1012
  %2953 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %2954 = load i64, i64* %2953, align 8
  %2955 = trunc i64 %2954 to i32
  %2956 = load %struct.function*, %struct.function** @cfun, align 8
  %2957 = getelementptr inbounds %struct.function, %struct.function* %2956, i32 0, i32 11
  store i32 %2955, i32* %2957, align 4
  br label %originalBB195

originalBB199alteredBB:                           ; preds = %originalBB199, %1048
  %2958 = load i32, i32* %46, align 4
  br label %originalBB199

originalBB203alteredBB:                           ; preds = %originalBB203, %1068
  store i32 %1069, i32* @highest_outgoing_arg_in_use, align 4
  %2959 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %2960 = sext i32 %2959 to i64
  %2961 = alloca i8, i64 %2960, align 16
  store i8* %2961, i8** @stack_usage_map, align 8
  %2962 = load i32, i32* %46, align 4
  %2963 = icmp ne i32 %2962, 0
  br label %originalBB203

originalBB207alteredBB:                           ; preds = %originalBB207, %1096
  %2964 = load i32, i32* %46, align 4
  %2965 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %2966 = icmp ne i32 %2964, %2965
  br label %originalBB207

originalBB211alteredBB:                           ; preds = %originalBB211, %1147
  br label %originalBB211

originalBB215alteredBB:                           ; preds = %originalBB215, %1175
  %2967 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 0
  %2968 = load i64, i64* %2967, align 8
  %2969 = getelementptr inbounds %struct.args_size, %struct.args_size* %24, i32 0, i32 0
  %2970 = load i64, i64* %2969, align 8
  %_216 = shl i64 %2968, %2970
  %_217 = sub i64 %2968, %2970
  %gen218 = mul i64 %_217, %2970
  %_219 = sub i64 0, %2968
  %gen220 = add i64 %_219, %2970
  %_221 = shl i64 %2968, %2970
  %_222 = shl i64 %2968, %2970
  %_223 = shl i64 %2968, %2970
  %2971 = sub nsw i64 %2968, %2970
  %2972 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %2971)
  call void @anti_adjust_stack(%struct.rtx_def* %2972)
  br label %originalBB215

originalBB227alteredBB:                           ; preds = %originalBB227, %1198
  %2973 = load i32, i32* @target_flags, align 4
  %_228 = sub i32 %2973, 2048
  %gen229 = mul i32 %_228, 2048
  %2974 = and i32 %2973, 2048
  %2975 = icmp ne i32 %2974, 0
  br label %originalBB227

originalBB233alteredBB:                           ; preds = %originalBB233, %1218
  %2976 = load i32, i32* @target_flags, align 4
  %_234 = sub i32 0, %2976
  %gen235 = add i32 %_234, 4096
  %_236 = sub i32 0, %2976
  %gen237 = add i32 %_236, 4096
  %_238 = sub i32 0, %2976
  %gen239 = add i32 %_238, 4096
  %_240 = sub i32 %2976, 4096
  %gen241 = mul i32 %_240, 4096
  %_242 = sub i32 0, %2976
  %gen243 = add i32 %_242, 4096
  %2977 = and i32 %2976, 4096
  %2978 = icmp ne i32 %2977, 0
  br label %originalBB233

originalBB247alteredBB:                           ; preds = %originalBB247, %1238
  store i32 -1, i32* %27, align 4
  %2979 = load i32, i32* %21, align 4
  %_248 = sub i32 %2979, 1
  %gen249 = mul i32 %_248, 1
  %_250 = sub i32 0, %2979
  %gen251 = add i32 %_250, 1
  %_252 = sub i32 0, %2979
  %gen253 = add i32 %_252, 1
  %2980 = sub nsw i32 %2979, 1
  store i32 %2980, i32* %25, align 4
  br label %originalBB247

originalBB257alteredBB:                           ; preds = %originalBB257, %1257
  store i32 1, i32* %27, align 4
  store i32 0, i32* %25, align 4
  br label %originalBB257

originalBB261alteredBB:                           ; preds = %originalBB261, %1279
  %2981 = load i32, i32* %28, align 4
  %2982 = load i32, i32* %40, align 4
  %2983 = icmp slt i32 %2981, %2982
  br label %originalBB261

originalBB265alteredBB:                           ; preds = %originalBB265, %1299
  %2984 = load i32, i32* %28, align 4
  %2985 = load i32, i32* @highest_outgoing_arg_in_use, align 4
  %2986 = icmp sge i32 %2984, %2985
  br label %originalBB265

originalBB269alteredBB:                           ; preds = %originalBB269, %1319
  %2987 = load i8*, i8** @stack_usage_map, align 8
  %2988 = load i32, i32* %28, align 4
  %2989 = sext i32 %2988 to i64
  %2990 = getelementptr inbounds i8, i8* %2987, i64 %2989
  %2991 = load i8, i8* %2990, align 1
  %2992 = sext i8 %2991 to i32
  %2993 = icmp eq i32 %2992, 0
  br label %originalBB269

originalBB273alteredBB:                           ; preds = %originalBB273, %1349
  %2994 = load i32, i32* %28, align 4
  store i32 %2994, i32* %44, align 4
  br label %originalBB273

originalBB277alteredBB:                           ; preds = %originalBB277, %1393
  %2995 = load i32, i32* %52, align 4
  %2996 = sext i32 %2995 to i64
  %2997 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %2996
  %2998 = load i8, i8* %2997, align 1
  %2999 = zext i8 %2998 to i32
  br label %originalBB277

originalBB281alteredBB:                           ; preds = %originalBB281, %1421
  %_282 = sub i32 0, %1422
  %gen283 = add i32 %_282, 1
  %_284 = sub i32 %1422, 1
  %gen285 = mul i32 %_284, 1
  %_286 = sub i32 %1422, 1
  %gen287 = mul i32 %_286, 1
  %_288 = shl i32 %1422, 1
  %3000 = sub nsw i32 %1422, 1
  %_289 = sub i32 0, %1381
  %gen290 = add i32 %_289, %3000
  %_291 = sub i32 %1381, %3000
  %gen292 = mul i32 %_291, %3000
  %_293 = shl i32 %1381, %3000
  %_294 = sub i32 0, %1381
  %gen295 = add i32 %_294, %3000
  %3001 = and i32 %1381, %3000
  %3002 = icmp ne i32 %3001, 0
  br label %originalBB281

originalBB299alteredBB:                           ; preds = %originalBB299, %1454
  %3003 = load i32, i32* %51, align 4
  %3004 = sext i32 %3003 to i64
  %3005 = call %struct.rtx_def* @assign_stack_temp(i32 51, i64 %3004, i32 0)
  store %struct.rtx_def* %3005, %struct.rtx_def** %45, align 8
  %3006 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %3007 = load i32, i32* @target_flags, align 4
  %_300 = shl i32 %3007, 33554432
  %_301 = sub i32 0, %3007
  %gen302 = add i32 %_301, 33554432
  %3008 = and i32 %3007, 33554432
  %3009 = icmp ne i32 %3008, 0
  %3010 = select i1 %3009, i32 64, i32 32
  call void @set_mem_align(%struct.rtx_def* %3006, i32 %3010)
  %3011 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %3012 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %3011)
  %3013 = load %struct.rtx_def*, %struct.rtx_def** %53, align 8
  %3014 = load i32, i32* %51, align 4
  %3015 = sext i32 %3014 to i64
  %3016 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %3015)
  %3017 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %3012, %struct.rtx_def* %3013, %struct.rtx_def* %3016)
  br label %originalBB299

originalBB306alteredBB:                           ; preds = %originalBB306, %1493
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %1545
  %3018 = load i32, i32* @target_flags, align 4
  %_311 = shl i32 %3018, 4096
  %_312 = shl i32 %3018, 4096
  %_313 = shl i32 %3018, 4096
  %_314 = sub i32 0, %3018
  %gen315 = add i32 %_314, 4096
  %_316 = shl i32 %3018, 4096
  %3019 = and i32 %3018, 4096
  %3020 = icmp ne i32 %3019, 0
  br label %originalBB310

originalBB320alteredBB:                           ; preds = %originalBB320, %1586
  %3021 = load i32, i32* %60, align 4
  %3022 = load i32, i32* %59, align 4
  %3023 = icmp slt i32 %3021, %3022
  br label %originalBB320

originalBB324alteredBB:                           ; preds = %originalBB324, %1614
  %3024 = load i32, i32* %60, align 4
  %3025 = load i32, i32* %40, align 4
  %3026 = icmp sgt i32 %3024, %3025
  br label %originalBB324

originalBB328alteredBB:                           ; preds = %originalBB328, %1636
  %3027 = load i32, i32* %60, align 4
  %_329 = sub i32 0, %3027
  %gen330 = add i32 %_329, 1
  %_331 = sub i32 %3027, 1
  %gen332 = mul i32 %_331, 1
  %_333 = shl i32 %3027, 1
  %_334 = sub i32 %3027, 1
  %gen335 = mul i32 %_334, 1
  %_336 = sub i32 %3027, 1
  %gen337 = mul i32 %_336, 1
  %_338 = shl i32 %3027, 1
  %_339 = sub i32 %3027, 1
  %gen340 = mul i32 %_339, 1
  %3028 = add nsw i32 %3027, 1
  store i32 %3028, i32* %60, align 4
  br label %originalBB328

originalBB344alteredBB:                           ; preds = %originalBB344, %1699
  %3029 = load %struct.rtx_def*, %struct.rtx_def** %55, align 8
  %3030 = load i32, i32* %54, align 4
  %3031 = load i32, i32* %57, align 4
  %3032 = load %struct.rtx_def*, %struct.rtx_def** %56, align 8
  %3033 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %3034 = load %struct.arg*, %struct.arg** %32, align 8
  %3035 = load i32, i32* %25, align 4
  %3036 = sext i32 %3035 to i64
  %3037 = getelementptr inbounds %struct.arg, %struct.arg* %3034, i64 %3036
  %3038 = getelementptr inbounds %struct.arg, %struct.arg* %3037, i32 0, i32 4
  %3039 = getelementptr inbounds %struct.args_size, %struct.args_size* %3038, i32 0, i32 0
  %3040 = load i64, i64* %3039, align 8
  %3041 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %3040)
  %3042 = load i32, i32* %40, align 4
  %3043 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 1
  %3044 = load %union.tree_node*, %union.tree_node** %3043, align 8
  %3045 = icmp eq %union.tree_node* %3044, null
  br label %originalBB344

originalBB348alteredBB:                           ; preds = %originalBB348, %1741
  %3046 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 0
  %3047 = load i64, i64* %3046, align 8
  %3048 = call %union.tree_node* @size_int_wide(i64 %3047, i32 1)
  br label %originalBB348

originalBB352alteredBB:                           ; preds = %originalBB352, %1770
  %3049 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1771, %struct.rtx_def* null, i32 0, i32 0)
  br label %originalBB352

originalBB356alteredBB:                           ; preds = %originalBB356, %1796
  %3050 = load i32, i32* %60, align 4
  %3051 = load i32, i32* %59, align 4
  %3052 = icmp slt i32 %3050, %3051
  br label %originalBB356

originalBB360alteredBB:                           ; preds = %originalBB360, %1869
  %3053 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8
  %3054 = call %struct.rtx_def* @prepare_call_address(%struct.rtx_def* %3053, %union.tree_node* null, %struct.rtx_def** %34, i32 0, i32 0)
  store %struct.rtx_def* %3054, %struct.rtx_def** %26, align 8
  store i32 0, i32* %28, align 4
  br label %originalBB360

originalBB364alteredBB:                           ; preds = %originalBB364, %1888
  %3055 = load i32, i32* %28, align 4
  %3056 = load i32, i32* %21, align 4
  %3057 = icmp slt i32 %3055, %3056
  br label %originalBB364

originalBB368alteredBB:                           ; preds = %originalBB368, %1953
  %3058 = load %struct.rtx_def*, %struct.rtx_def** %64, align 8
  %3059 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  %3060 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3058, %struct.rtx_def* %3059)
  br label %originalBB368

originalBB372alteredBB:                           ; preds = %originalBB372, %2007
  %3061 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8
  call void @use_group_regs(%struct.rtx_def** %34, %struct.rtx_def* %3061)
  br label %originalBB372

originalBB376alteredBB:                           ; preds = %originalBB376, %2025
  %3062 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8
  %3063 = icmp ne %struct.rtx_def* %3062, null
  br label %originalBB376

originalBB380alteredBB:                           ; preds = %originalBB380, %2046
  br label %originalBB380

originalBB384alteredBB:                           ; preds = %originalBB384, %2070
  %3064 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_rtx, align 8
  %3065 = icmp ne %struct.rtx_def* %3064, null
  br label %originalBB384

originalBB388alteredBB:                           ; preds = %originalBB388, %2113
  br label %originalBB388

originalBB392alteredBB:                           ; preds = %originalBB392, %2145
  br label %originalBB392

originalBB396alteredBB:                           ; preds = %originalBB396, %2174
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 4032, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.emit_library_call_value_1, i32 0, i32 0)) #8
  br label %originalBB396

originalBB400alteredBB:                           ; preds = %originalBB400, %2204
  %3066 = load i32, i32* %20, align 4
  %3067 = call %union.tree_node* @type_for_mode(i32 %3066, i32 0)
  br label %originalBB400

originalBB404alteredBB:                           ; preds = %originalBB404, %2260
  br label %originalBB404

originalBB408alteredBB:                           ; preds = %originalBB408, %2277
  %3068 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8
  %3069 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %3068)
  br label %originalBB408

originalBB412alteredBB:                           ; preds = %originalBB412, %2296
  %3070 = load %struct.function*, %struct.function** @cfun, align 8
  %3071 = getelementptr inbounds %struct.function, %struct.function* %3070, i32 0, i32 2
  %3072 = load %struct.expr_status*, %struct.expr_status** %3071, align 8
  %3073 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %3072, i32 0, i32 1
  %3074 = load i32, i32* %3073, align 4
  %_413 = sub i32 0, %3074
  %gen414 = add i32 %_413, 1
  %_415 = shl i32 %3074, 1
  %_416 = sub i32 0, %3074
  %gen417 = add i32 %_416, 1
  %_418 = sub i32 0, %3074
  %gen419 = add i32 %_418, 1
  %3075 = sub nsw i32 %3074, 1
  store i32 %3075, i32* %3073, align 4
  %3076 = load i32, i32* %39, align 4
  %_420 = sub i32 0, %3076
  %gen421 = add i32 %_420, 4096
  %_422 = shl i32 %3076, 4096
  %_423 = sub i32 %3076, 4096
  %gen424 = mul i32 %_423, 4096
  %_425 = sub i32 %3076, 4096
  %gen426 = mul i32 %_425, 4096
  %_427 = sub i32 %3076, 4096
  %gen428 = mul i32 %_427, 4096
  %3077 = and i32 %3076, 4096
  %3078 = icmp ne i32 %3077, 0
  br label %originalBB412

originalBB432alteredBB:                           ; preds = %originalBB432, %2342
  %3079 = load i32, i32* %71, align 4
  %3080 = load i32, i32* %21, align 4
  %3081 = icmp slt i32 %3079, %3080
  br label %originalBB432

originalBB436alteredBB:                           ; preds = %originalBB436, %2382
  %3082 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %3083 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %3082)
  %3084 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3083)
  %3085 = load %struct.rtx_def*, %struct.rtx_def** %69, align 8
  %3086 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %3084, %struct.rtx_def* %3085)
  store %struct.rtx_def* %3086, %struct.rtx_def** %69, align 8
  br label %originalBB436

originalBB440alteredBB:                           ; preds = %originalBB440, %2411
  call void @pop_temp_slots()
  %3087 = load i32, i32* %20, align 4
  %3088 = icmp ne i32 %3087, 0
  br label %originalBB440

originalBB444alteredBB:                           ; preds = %originalBB444, %2430
  %3089 = load i32, i32* %16, align 4
  %3090 = icmp ne i32 %3089, 0
  br label %originalBB444

originalBB448alteredBB:                           ; preds = %originalBB448, %2461
  %3091 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %3092 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8
  %3093 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3091, %struct.rtx_def* %3092)
  br label %originalBB448

originalBB452alteredBB:                           ; preds = %originalBB452, %2481
  br label %originalBB452

originalBB456alteredBB:                           ; preds = %originalBB456, %2501
  %3094 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %3095 = load i32, i32* %20, align 4
  %3096 = call %struct.rtx_def* @hard_libcall_value(i32 %3095)
  %3097 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3094, %struct.rtx_def* %3096)
  br label %originalBB456

originalBB460alteredBB:                           ; preds = %originalBB460, %2522
  %3098 = load i32, i32* %20, align 4
  %3099 = call %struct.rtx_def* @hard_libcall_value(i32 %3098)
  store %struct.rtx_def* %3099, %struct.rtx_def** %18, align 8
  br label %originalBB460

originalBB464alteredBB:                           ; preds = %originalBB464, %2541
  br label %originalBB464

originalBB468alteredBB:                           ; preds = %originalBB468, %2558
  br label %originalBB468

originalBB472alteredBB:                           ; preds = %originalBB472, %2575
  %3100 = load i32, i32* @target_flags, align 4
  %_473 = sub i32 0, %3100
  %gen474 = add i32 %_473, 4096
  %_475 = sub i32 %3100, 4096
  %gen476 = mul i32 %_475, 4096
  %_477 = sub i32 %3100, 4096
  %gen478 = mul i32 %_477, 4096
  %_479 = sub i32 0, %3100
  %gen480 = add i32 %_479, 4096
  %3101 = and i32 %3100, 4096
  %3102 = icmp ne i32 %3101, 0
  br label %originalBB472

originalBB484alteredBB:                           ; preds = %originalBB484, %2595
  %3103 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %3104 = icmp ne %struct.rtx_def* %3103, null
  br label %originalBB484

originalBB488alteredBB:                           ; preds = %originalBB488, %2614
  %3105 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8
  %3106 = bitcast %struct.rtx_def* %3105 to i32*
  %3107 = load i32, i32* %3106, align 8
  %_489 = sub i32 0, %3107
  %gen490 = add i32 %_489, 16
  %_491 = sub i32 0, %3107
  %gen492 = add i32 %_491, 16
  %_493 = sub i32 0, %3107
  %gen494 = add i32 %_493, 16
  %_495 = sub i32 0, %3107
  %gen496 = add i32 %_495, 16
  %3108 = lshr i32 %3107, 16
  %_497 = sub i32 %3108, 255
  %gen498 = mul i32 %_497, 255
  %3109 = and i32 %3108, 255
  store i32 %3109, i32* %72, align 4
  %3110 = load i32, i32* %72, align 4
  %3111 = load i32, i32* %72, align 4
  %3112 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %3113 = load i32, i32* %43, align 4
  %3114 = sext i32 %3113 to i64
  %3115 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %3112, i64 %3114)
  %3116 = call %struct.rtx_def* @memory_address(i32 %3111, %struct.rtx_def* %3115)
  %3117 = call %struct.rtx_def* @gen_rtx_MEM(i32 %3110, %struct.rtx_def* %3116)
  store %struct.rtx_def* %3117, %struct.rtx_def** %73, align 8
  %3118 = load %struct.rtx_def*, %struct.rtx_def** %73, align 8
  %3119 = load i32, i32* @target_flags, align 4
  %_499 = sub i32 0, %3119
  %gen500 = add i32 %_499, 33554432
  %_501 = sub i32 %3119, 33554432
  %gen502 = mul i32 %_501, 33554432
  %_503 = sub i32 %3119, 33554432
  %gen504 = mul i32 %_503, 33554432
  %3120 = and i32 %3119, 33554432
  %3121 = icmp ne i32 %3120, 0
  %3122 = select i1 %3121, i32 64, i32 32
  call void @set_mem_align(%struct.rtx_def* %3118, i32 %3122)
  %3123 = load i32, i32* %72, align 4
  %3124 = icmp ne i32 %3123, 51
  br label %originalBB488

originalBB508alteredBB:                           ; preds = %originalBB508, %2672
  %3125 = load %struct.arg*, %struct.arg** %32, align 8
  %3126 = load i32, i32* %28, align 4
  %3127 = sext i32 %3126 to i64
  %3128 = getelementptr inbounds %struct.arg, %struct.arg* %3125, i64 %3127
  %3129 = getelementptr inbounds %struct.arg, %struct.arg* %3128, i32 0, i32 6
  %3130 = load %struct.rtx_def*, %struct.rtx_def** %3129, align 8
  %3131 = icmp ne %struct.rtx_def* %3130, null
  br label %originalBB508

originalBB512alteredBB:                           ; preds = %originalBB512, %2696
  %3132 = load %struct.arg*, %struct.arg** %32, align 8
  %3133 = load i32, i32* %28, align 4
  %3134 = sext i32 %3133 to i64
  %3135 = getelementptr inbounds %struct.arg, %struct.arg* %3132, i64 %3134
  %3136 = getelementptr inbounds %struct.arg, %struct.arg* %3135, i32 0, i32 6
  %3137 = load %struct.rtx_def*, %struct.rtx_def** %3136, align 8
  %3138 = bitcast %struct.rtx_def* %3137 to i32*
  %3139 = load i32, i32* %3138, align 8
  %_513 = shl i32 %3139, 16
  %_514 = sub i32 %3139, 16
  %gen515 = mul i32 %_514, 16
  %3140 = lshr i32 %3139, 16
  %_516 = shl i32 %3140, 255
  %_517 = shl i32 %3140, 255
  %_518 = shl i32 %3140, 255
  %3141 = and i32 %3140, 255
  store i32 %3141, i32* %74, align 4
  %3142 = load i32, i32* %74, align 4
  %3143 = load i32, i32* %74, align 4
  %3144 = load %struct.rtx_def*, %struct.rtx_def** %30, align 8
  %3145 = load %struct.arg*, %struct.arg** %32, align 8
  %3146 = load i32, i32* %28, align 4
  %3147 = sext i32 %3146 to i64
  %3148 = getelementptr inbounds %struct.arg, %struct.arg* %3145, i64 %3147
  %3149 = getelementptr inbounds %struct.arg, %struct.arg* %3148, i32 0, i32 4
  %3150 = getelementptr inbounds %struct.args_size, %struct.args_size* %3149, i32 0, i32 0
  %3151 = load i64, i64* %3150, align 8
  %3152 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %3144, i64 %3151)
  %3153 = call %struct.rtx_def* @memory_address(i32 %3143, %struct.rtx_def* %3152)
  %3154 = call %struct.rtx_def* @gen_rtx_MEM(i32 %3142, %struct.rtx_def* %3153)
  store %struct.rtx_def* %3154, %struct.rtx_def** %75, align 8
  %3155 = load %struct.rtx_def*, %struct.rtx_def** %75, align 8
  %3156 = load %struct.arg*, %struct.arg** %32, align 8
  %3157 = load i32, i32* %28, align 4
  %3158 = sext i32 %3157 to i64
  %3159 = getelementptr inbounds %struct.arg, %struct.arg* %3156, i64 %3158
  %3160 = getelementptr inbounds %struct.arg, %struct.arg* %3159, i32 0, i32 6
  %3161 = load %struct.rtx_def*, %struct.rtx_def** %3160, align 8
  %3162 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3155, %struct.rtx_def* %3161)
  br label %originalBB512
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

; Function Attrs: noinline nounwind uwtable
define %struct.rtx_def* @emit_library_call_value(%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) #0 {
  %6 = alloca %struct.rtx_def*, align 8
  %7 = alloca %struct.rtx_def*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.rtx_def* %0, %struct.rtx_def** %6, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %13 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %12, i32 0, i32 0
  %14 = bitcast %struct.__va_list_tag* %13 to i8*
  call void @llvm.va_start(i8* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %17 = load i32, i32* %8, align 4
  %18 = load i32, i32* %9, align 4
  %19 = load i32, i32* %10, align 4
  %20 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %12, i32 0, i32 0
  %21 = call %struct.rtx_def* @emit_library_call_value_1(i32 1, %struct.rtx_def* %15, %struct.rtx_def* %16, i32 %17, i32 %18, i32 %19, %struct.__va_list_tag* %20)
  store %struct.rtx_def* %21, %struct.rtx_def** %11, align 8
  %22 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %12, i32 0, i32 0
  %23 = bitcast %struct.__va_list_tag* %22 to i8*
  call void @llvm.va_end(i8* %23)
  %24 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  ret %struct.rtx_def* %24
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #6

declare void @timevar_push(i32) #1

declare %struct.rtx_def* @expand_inline_function(%union.tree_node*, %union.tree_node*, %struct.rtx_def*, i32, %union.tree_node*, %struct.rtx_def*) #1

declare void @timevar_pop(i32) #1

declare %struct.rtx_def* @emit_insns_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @contains_placeholder_p(%union.tree_node*) #1

declare void @make_decl_rtl(%union.tree_node*, i8*) #1

declare %union.tree_node* @build1(i32, %union.tree_node*, %union.tree_node*) #1

declare i32 @compare_tree_int(%union.tree_node*, i64) #1

declare %struct.rtx_def* @expr_size(%union.tree_node*) #1

declare %struct.rtx_def* @store_expr(%union.tree_node*, %struct.rtx_def*, i32) #1

declare void @locate_and_pad_parm(i32, %union.tree_node*, i32, %union.tree_node*, %struct.args_size*, %struct.args_size*, %struct.args_size*, %struct.args_size*) #1

declare i32 @host_integerp(%union.tree_node*, i32) #1

declare i64 @tree_low_cst(%union.tree_node*, i32) #1

declare void @function_arg_advance(%struct.ix86_args*, i32, %union.tree_node*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @calls_function(%union.tree_node*, i32) #0 {
  %3 = alloca %union.tree_node*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %union.tree_node* %0, %union.tree_node** %3, align 8
  store i32 %1, i32* %4, align 4
  store %union.tree_node* null, %union.tree_node** @calls_function_save_exprs, align 8
  %6 = load %union.tree_node*, %union.tree_node** %3, align 8
  %7 = load i32, i32* %4, align 4
  %8 = call i32 @calls_function_1(%union.tree_node* %6, i32 %7)
  store i32 %8, i32* %5, align 4
  store %union.tree_node* null, %union.tree_node** @calls_function_save_exprs, align 8
  %9 = load i32, i32* %5, align 4
  ret i32 %9
}

declare %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @calls_function_1(%union.tree_node*, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %union.tree_node*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %union.tree_node*, align 8
  %11 = alloca %union.tree_node*, align 8
  %12 = alloca %union.tree_node*, align 8
  store %union.tree_node* %0, %union.tree_node** %4, align 8
  store i32 %1, i32* %5, align 4
  %13 = load %union.tree_node*, %union.tree_node** %4, align 8
  %14 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %14, i32 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 255
  store i32 %17, i32* %7, align 4
  %18 = load i32, i32* %7, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  store i32 %22, i32* %8, align 4
  %23 = load i32, i32* %7, align 4
  %24 = call i32 @first_rtl_op(i32 %23)
  store i32 %24, i32* %9, align 4
  %25 = load i32, i32* %7, align 4
  %26 = icmp sge i32 %25, 147
  br i1 %26, label %27, label %44

; <label>:27:                                     ; preds = %2
  %28 = load i32, i32* @x.47
  %29 = load i32, i32* @y.48
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %27
  store i32 1, i32* %3, align 4
  %36 = load i32, i32* @x.47
  %37 = load i32, i32* @y.48
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %632

; <label>:44:                                     ; preds = %2
  %45 = load i32, i32* %7, align 4
  switch i32 %45, label %501 [
    i32 53, label %46
    i32 46, label %161
    i32 118, label %218
    i32 4, label %271
    i32 2, label %449
  ]

; <label>:46:                                     ; preds = %44
  %47 = load i32, i32* @x.47
  %48 = load i32, i32* @y.48
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %46
  %55 = load i32, i32* %5, align 4
  %56 = icmp eq i32 %55, 0
  %57 = load i32, i32* @x.47
  %58 = load i32, i32* @y.48
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %56, label %65, label %66

; <label>:65:                                     ; preds = %originalBBpart24
  store i32 1, i32* %3, align 4
  br label %632

; <label>:66:                                     ; preds = %originalBBpart24
  %67 = load %union.tree_node*, %union.tree_node** %4, align 8
  %68 = bitcast %union.tree_node* %67 to %struct.tree_exp*
  %69 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %68, i32 0, i32 2
  %70 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %69, i64 0, i64 0
  %71 = load %union.tree_node*, %union.tree_node** %70, align 8
  %72 = bitcast %union.tree_node* %71 to %struct.tree_common*
  %73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %72, i32 0, i32 1
  %74 = load %union.tree_node*, %union.tree_node** %73, align 8
  %75 = bitcast %union.tree_node* %74 to %struct.tree_common*
  %76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %75, i32 0, i32 1
  %77 = load %union.tree_node*, %union.tree_node** %76, align 8
  %78 = bitcast %union.tree_node* %77 to %struct.tree_common*
  %79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %78, i32 0, i32 2
  %80 = load i32, i32* %79, align 8
  %81 = and i32 %80, 255
  %82 = icmp eq i32 %81, 23
  br i1 %82, label %83, label %102

; <label>:83:                                     ; preds = %66
  %84 = load %union.tree_node*, %union.tree_node** %4, align 8
  %85 = bitcast %union.tree_node* %84 to %struct.tree_exp*
  %86 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %85, i32 0, i32 2
  %87 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %86, i64 0, i64 0
  %88 = load %union.tree_node*, %union.tree_node** %87, align 8
  %89 = bitcast %union.tree_node* %88 to %struct.tree_common*
  %90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %89, i32 0, i32 1
  %91 = load %union.tree_node*, %union.tree_node** %90, align 8
  %92 = bitcast %union.tree_node* %91 to %struct.tree_common*
  %93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %92, i32 0, i32 1
  %94 = load %union.tree_node*, %union.tree_node** %93, align 8
  %95 = bitcast %union.tree_node* %94 to %struct.tree_type*
  %96 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %95, i32 0, i32 6
  %97 = load i32, i32* %96, align 4
  %98 = lshr i32 %97, 17
  %99 = and i32 %98, 1
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %102

; <label>:101:                                    ; preds = %83
  store i32 1, i32* %3, align 4
  br label %632

; <label>:102:                                    ; preds = %83, %66
  %103 = load %union.tree_node*, %union.tree_node** %4, align 8
  %104 = bitcast %union.tree_node* %103 to %struct.tree_exp*
  %105 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %104, i32 0, i32 2
  %106 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %105, i64 0, i64 0
  %107 = load %union.tree_node*, %union.tree_node** %106, align 8
  %108 = bitcast %union.tree_node* %107 to %struct.tree_common*
  %109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %108, i32 0, i32 2
  %110 = load i32, i32* %109, align 8
  %111 = and i32 %110, 255
  %112 = icmp eq i32 %111, 121
  br i1 %112, label %113, label %142

; <label>:113:                                    ; preds = %102
  %114 = load %union.tree_node*, %union.tree_node** %4, align 8
  %115 = bitcast %union.tree_node* %114 to %struct.tree_exp*
  %116 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %115, i32 0, i32 2
  %117 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %116, i64 0, i64 0
  %118 = load %union.tree_node*, %union.tree_node** %117, align 8
  %119 = bitcast %union.tree_node* %118 to %struct.tree_exp*
  %120 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %119, i32 0, i32 2
  %121 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %120, i64 0, i64 0
  %122 = load %union.tree_node*, %union.tree_node** %121, align 8
  %123 = bitcast %union.tree_node* %122 to %struct.tree_common*
  %124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %123, i32 0, i32 2
  %125 = load i32, i32* %124, align 8
  %126 = and i32 %125, 255
  %127 = icmp eq i32 %126, 30
  br i1 %127, label %128, label %142

; <label>:128:                                    ; preds = %113
  %129 = load %union.tree_node*, %union.tree_node** %4, align 8
  %130 = bitcast %union.tree_node* %129 to %struct.tree_exp*
  %131 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %130, i32 0, i32 2
  %132 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %131, i64 0, i64 0
  %133 = load %union.tree_node*, %union.tree_node** %132, align 8
  %134 = bitcast %union.tree_node* %133 to %struct.tree_exp*
  %135 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %134, i32 0, i32 2
  %136 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %135, i64 0, i64 0
  %137 = load %union.tree_node*, %union.tree_node** %136, align 8
  %138 = call i32 @special_function_p(%union.tree_node* %137, i32 0)
  %139 = and i32 %138, 8
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %141, label %142

; <label>:141:                                    ; preds = %128
  store i32 1, i32* %3, align 4
  br label %632

; <label>:142:                                    ; preds = %128, %113, %102
  br label %143

; <label>:143:                                    ; preds = %142
  %144 = load i32, i32* @x.47
  %145 = load i32, i32* @y.48
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %143
  %152 = load i32, i32* @x.47
  %153 = load i32, i32* @y.48
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %160

; <label>:160:                                    ; preds = %originalBBpart28
  br label %502

; <label>:161:                                    ; preds = %44
  %162 = load i32, i32* @x.47
  %163 = load i32, i32* @y.48
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %161
  %170 = load %union.tree_node*, %union.tree_node** %4, align 8
  %171 = bitcast %union.tree_node* %170 to %struct.tree_exp*
  %172 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %171, i32 0, i32 2
  %173 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %172, i64 0, i64 1
  %174 = load %union.tree_node*, %union.tree_node** %173, align 8
  store %union.tree_node* %174, %union.tree_node** %10, align 8
  %175 = load i32, i32* @x.47
  %176 = load i32, i32* @y.48
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %183

; <label>:183:                                    ; preds = %212, %originalBBpart212
  %184 = load %union.tree_node*, %union.tree_node** %10, align 8
  %185 = icmp ne %union.tree_node* %184, null
  br i1 %185, label %186, label %217

; <label>:186:                                    ; preds = %183
  %187 = load %union.tree_node*, %union.tree_node** %10, align 8
  %188 = bitcast %union.tree_node* %187 to %struct.tree_list*
  %189 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %188, i32 0, i32 2
  %190 = load %union.tree_node*, %union.tree_node** %189, align 8
  %191 = load i32, i32* %5, align 4
  %192 = call i32 @calls_function_1(%union.tree_node* %190, i32 %191)
  %193 = icmp ne i32 %192, 0
  br i1 %193, label %194, label %211

; <label>:194:                                    ; preds = %186
  %195 = load i32, i32* @x.47
  %196 = load i32, i32* @y.48
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %originalBB14alteredBB, %194
  store i32 1, i32* %3, align 4
  %203 = load i32, i32* @x.47
  %204 = load i32, i32* @y.48
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %632

; <label>:211:                                    ; preds = %186
  br label %212

; <label>:212:                                    ; preds = %211
  %213 = load %union.tree_node*, %union.tree_node** %10, align 8
  %214 = bitcast %union.tree_node* %213 to %struct.tree_common*
  %215 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %214, i32 0, i32 0
  %216 = load %union.tree_node*, %union.tree_node** %215, align 8
  store %union.tree_node* %216, %union.tree_node** %10, align 8
  br label %183

; <label>:217:                                    ; preds = %183
  store i32 0, i32* %3, align 4
  br label %632

; <label>:218:                                    ; preds = %44
  %219 = load %union.tree_node*, %union.tree_node** %4, align 8
  %220 = bitcast %union.tree_node* %219 to %struct.tree_exp*
  %221 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %220, i32 0, i32 2
  %222 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %221, i64 0, i64 2
  %223 = bitcast %union.tree_node** %222 to %struct.rtx_def**
  %224 = load %struct.rtx_def*, %struct.rtx_def** %223, align 8
  %225 = icmp ne %struct.rtx_def* %224, null
  br i1 %225, label %226, label %227

; <label>:226:                                    ; preds = %218
  store i32 0, i32* %3, align 4
  br label %632

; <label>:227:                                    ; preds = %218
  %228 = load i32, i32* @x.47
  %229 = load i32, i32* @y.48
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %originalBB18alteredBB, %227
  %236 = load %union.tree_node*, %union.tree_node** %4, align 8
  %237 = load %union.tree_node*, %union.tree_node** @calls_function_save_exprs, align 8
  %238 = call %union.tree_node* @value_member(%union.tree_node* %236, %union.tree_node* %237)
  %239 = icmp ne %union.tree_node* %238, null
  %240 = load i32, i32* @x.47
  %241 = load i32, i32* @y.48
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %239, label %248, label %249

; <label>:248:                                    ; preds = %originalBBpart220
  store i32 0, i32* %3, align 4
  br label %632

; <label>:249:                                    ; preds = %originalBBpart220
  %250 = load %union.tree_node*, %union.tree_node** %4, align 8
  %251 = load %union.tree_node*, %union.tree_node** @calls_function_save_exprs, align 8
  %252 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %250, %union.tree_node* %251)
  store %union.tree_node* %252, %union.tree_node** @calls_function_save_exprs, align 8
  %253 = load %union.tree_node*, %union.tree_node** %4, align 8
  %254 = bitcast %union.tree_node* %253 to %struct.tree_exp*
  %255 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %254, i32 0, i32 2
  %256 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %255, i64 0, i64 0
  %257 = load %union.tree_node*, %union.tree_node** %256, align 8
  %258 = icmp ne %union.tree_node* %257, null
  br i1 %258, label %259, label %268

; <label>:259:                                    ; preds = %249
  %260 = load %union.tree_node*, %union.tree_node** %4, align 8
  %261 = bitcast %union.tree_node* %260 to %struct.tree_exp*
  %262 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %261, i32 0, i32 2
  %263 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %262, i64 0, i64 0
  %264 = load %union.tree_node*, %union.tree_node** %263, align 8
  %265 = load i32, i32* %5, align 4
  %266 = call i32 @calls_function_1(%union.tree_node* %264, i32 %265)
  %267 = icmp ne i32 %266, 0
  br label %268

; <label>:268:                                    ; preds = %259, %249
  %269 = phi i1 [ false, %249 ], [ %267, %259 ]
  %270 = zext i1 %269 to i32
  store i32 %270, i32* %3, align 4
  br label %632

; <label>:271:                                    ; preds = %44
  %272 = load %union.tree_node*, %union.tree_node** %4, align 8
  %273 = bitcast %union.tree_node* %272 to %struct.tree_block*
  %274 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %273, i32 0, i32 2
  %275 = load %union.tree_node*, %union.tree_node** %274, align 8
  store %union.tree_node* %275, %union.tree_node** %11, align 8
  br label %276

; <label>:276:                                    ; preds = %originalBBpart240, %271
  %277 = load i32, i32* @x.47
  %278 = load i32, i32* @y.48
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %originalBB22alteredBB, %276
  %285 = load %union.tree_node*, %union.tree_node** %11, align 8
  %286 = icmp ne %union.tree_node* %285, null
  %287 = load i32, i32* @x.47
  %288 = load i32, i32* @y.48
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %286, label %295, label %380

; <label>:295:                                    ; preds = %originalBBpart224
  %296 = load i32, i32* @x.47
  %297 = load i32, i32* @y.48
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %originalBB26alteredBB, %295
  %304 = load %union.tree_node*, %union.tree_node** %11, align 8
  %305 = bitcast %union.tree_node* %304 to %struct.tree_decl*
  %306 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %305, i32 0, i32 12
  %307 = load %union.tree_node*, %union.tree_node** %306, align 8
  %308 = icmp ne %union.tree_node* %307, null
  %309 = load i32, i32* @x.47
  %310 = load i32, i32* @y.48
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %308, label %317, label %358

; <label>:317:                                    ; preds = %originalBBpart228
  %318 = load i32, i32* @x.47
  %319 = load i32, i32* @y.48
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %originalBB30alteredBB, %317
  %326 = load %union.tree_node*, %union.tree_node** %11, align 8
  %327 = bitcast %union.tree_node* %326 to %struct.tree_decl*
  %328 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %327, i32 0, i32 12
  %329 = load %union.tree_node*, %union.tree_node** %328, align 8
  %330 = load i32, i32* %5, align 4
  %331 = call i32 @calls_function_1(%union.tree_node* %329, i32 %330)
  %332 = icmp ne i32 %331, 0
  %333 = load i32, i32* @x.47
  %334 = load i32, i32* @y.48
  %335 = sub i32 %333, 1
  %336 = mul i32 %333, %335
  %337 = urem i32 %336, 2
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %338, %339
  br i1 %340, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %332, label %341, label %358

; <label>:341:                                    ; preds = %originalBBpart232
  %342 = load i32, i32* @x.47
  %343 = load i32, i32* @y.48
  %344 = sub i32 %342, 1
  %345 = mul i32 %342, %344
  %346 = urem i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %347, %348
  br i1 %349, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %originalBB34alteredBB, %341
  store i32 1, i32* %3, align 4
  %350 = load i32, i32* @x.47
  %351 = load i32, i32* @y.48
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %632

; <label>:358:                                    ; preds = %originalBBpart232, %originalBBpart228
  br label %359

; <label>:359:                                    ; preds = %358
  %360 = load i32, i32* @x.47
  %361 = load i32, i32* @y.48
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %originalBB38alteredBB, %359
  %368 = load %union.tree_node*, %union.tree_node** %11, align 8
  %369 = bitcast %union.tree_node* %368 to %struct.tree_common*
  %370 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %369, i32 0, i32 0
  %371 = load %union.tree_node*, %union.tree_node** %370, align 8
  store %union.tree_node* %371, %union.tree_node** %11, align 8
  %372 = load i32, i32* @x.47
  %373 = load i32, i32* @y.48
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %276

; <label>:380:                                    ; preds = %originalBBpart224
  %381 = load %union.tree_node*, %union.tree_node** %4, align 8
  %382 = bitcast %union.tree_node* %381 to %struct.tree_block*
  %383 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %382, i32 0, i32 3
  %384 = load %union.tree_node*, %union.tree_node** %383, align 8
  store %union.tree_node* %384, %union.tree_node** %12, align 8
  br label %385

; <label>:385:                                    ; preds = %originalBBpart252, %380
  %386 = load i32, i32* @x.47
  %387 = load i32, i32* @y.48
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %originalBB42alteredBB, %385
  %394 = load %union.tree_node*, %union.tree_node** %12, align 8
  %395 = icmp ne %union.tree_node* %394, null
  %396 = load i32, i32* @x.47
  %397 = load i32, i32* @y.48
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %395, label %404, label %448

; <label>:404:                                    ; preds = %originalBBpart244
  %405 = load %union.tree_node*, %union.tree_node** %12, align 8
  %406 = load i32, i32* %5, align 4
  %407 = call i32 @calls_function_1(%union.tree_node* %405, i32 %406)
  %408 = icmp ne i32 %407, 0
  br i1 %408, label %409, label %426

; <label>:409:                                    ; preds = %404
  %410 = load i32, i32* @x.47
  %411 = load i32, i32* @y.48
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %originalBB46alteredBB, %409
  store i32 1, i32* %3, align 4
  %418 = load i32, i32* @x.47
  %419 = load i32, i32* @y.48
  %420 = sub i32 %418, 1
  %421 = mul i32 %418, %420
  %422 = urem i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %423, %424
  br i1 %425, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %632

; <label>:426:                                    ; preds = %404
  br label %427

; <label>:427:                                    ; preds = %426
  %428 = load i32, i32* @x.47
  %429 = load i32, i32* @y.48
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %originalBB50alteredBB, %427
  %436 = load %union.tree_node*, %union.tree_node** %12, align 8
  %437 = bitcast %union.tree_node* %436 to %struct.tree_common*
  %438 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %437, i32 0, i32 0
  %439 = load %union.tree_node*, %union.tree_node** %438, align 8
  store %union.tree_node* %439, %union.tree_node** %12, align 8
  %440 = load i32, i32* @x.47
  %441 = load i32, i32* @y.48
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %385

; <label>:448:                                    ; preds = %originalBBpart244
  store i32 0, i32* %3, align 4
  br label %632

; <label>:449:                                    ; preds = %44
  br label %450

; <label>:450:                                    ; preds = %originalBBpart260, %449
  %451 = load %union.tree_node*, %union.tree_node** %4, align 8
  %452 = icmp ne %union.tree_node* %451, null
  br i1 %452, label %453, label %500

; <label>:453:                                    ; preds = %450
  %454 = load %union.tree_node*, %union.tree_node** %4, align 8
  %455 = bitcast %union.tree_node* %454 to %struct.tree_list*
  %456 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %455, i32 0, i32 2
  %457 = load %union.tree_node*, %union.tree_node** %456, align 8
  %458 = load i32, i32* %5, align 4
  %459 = call i32 @calls_function_1(%union.tree_node* %457, i32 %458)
  %460 = icmp ne i32 %459, 0
  br i1 %460, label %461, label %462

; <label>:461:                                    ; preds = %453
  store i32 1, i32* %3, align 4
  br label %632

; <label>:462:                                    ; preds = %453
  %463 = load i32, i32* @x.47
  %464 = load i32, i32* @y.48
  %465 = sub i32 %463, 1
  %466 = mul i32 %463, %465
  %467 = urem i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %468, %469
  br i1 %470, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %originalBB54alteredBB, %462
  %471 = load i32, i32* @x.47
  %472 = load i32, i32* @y.48
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %479

; <label>:479:                                    ; preds = %originalBBpart256
  %480 = load i32, i32* @x.47
  %481 = load i32, i32* @y.48
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %originalBB58alteredBB, %479
  %488 = load %union.tree_node*, %union.tree_node** %4, align 8
  %489 = bitcast %union.tree_node* %488 to %struct.tree_common*
  %490 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %489, i32 0, i32 0
  %491 = load %union.tree_node*, %union.tree_node** %490, align 8
  store %union.tree_node* %491, %union.tree_node** %4, align 8
  %492 = load i32, i32* @x.47
  %493 = load i32, i32* @y.48
  %494 = sub i32 %492, 1
  %495 = mul i32 %492, %494
  %496 = urem i32 %495, 2
  %497 = icmp eq i32 %496, 0
  %498 = icmp slt i32 %493, 10
  %499 = or i1 %497, %498
  br i1 %499, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %450

; <label>:500:                                    ; preds = %450
  store i32 0, i32* %3, align 4
  br label %632

; <label>:501:                                    ; preds = %44
  br label %502

; <label>:502:                                    ; preds = %501, %160
  %503 = load i32, i32* %8, align 4
  %504 = icmp eq i32 %503, 60
  br i1 %504, label %553, label %505

; <label>:505:                                    ; preds = %502
  %506 = load i32, i32* %8, align 4
  %507 = icmp eq i32 %506, 49
  br i1 %507, label %553, label %508

; <label>:508:                                    ; preds = %505
  %509 = load i32, i32* %8, align 4
  %510 = icmp eq i32 %509, 50
  br i1 %510, label %553, label %511

; <label>:511:                                    ; preds = %508
  %512 = load i32, i32* @x.47
  %513 = load i32, i32* @y.48
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %originalBB62alteredBB, %511
  %520 = load i32, i32* %8, align 4
  %521 = icmp eq i32 %520, 101
  %522 = load i32, i32* @x.47
  %523 = load i32, i32* @y.48
  %524 = sub i32 %522, 1
  %525 = mul i32 %522, %524
  %526 = urem i32 %525, 2
  %527 = icmp eq i32 %526, 0
  %528 = icmp slt i32 %523, 10
  %529 = or i1 %527, %528
  br i1 %529, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %521, label %553, label %530

; <label>:530:                                    ; preds = %originalBBpart264
  %531 = load i32, i32* @x.47
  %532 = load i32, i32* @y.48
  %533 = sub i32 %531, 1
  %534 = mul i32 %531, %533
  %535 = urem i32 %534, 2
  %536 = icmp eq i32 %535, 0
  %537 = icmp slt i32 %532, 10
  %538 = or i1 %536, %537
  br i1 %538, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %530
  %539 = load i32, i32* %8, align 4
  %540 = icmp ne i32 %539, 114
  %541 = load i32, i32* @x.47
  %542 = load i32, i32* @y.48
  %543 = sub i32 %541, 1
  %544 = mul i32 %541, %543
  %545 = urem i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = icmp slt i32 %542, 10
  %548 = or i1 %546, %547
  br i1 %548, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %540, label %549, label %553

; <label>:549:                                    ; preds = %originalBBpart268
  %550 = load i32, i32* %8, align 4
  %551 = icmp ne i32 %550, 98
  br i1 %551, label %552, label %553

; <label>:552:                                    ; preds = %549
  store i32 0, i32* %3, align 4
  br label %632

; <label>:553:                                    ; preds = %549, %originalBBpart268, %originalBBpart264, %508, %505, %502
  %554 = load i32, i32* @x.47
  %555 = load i32, i32* @y.48
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %originalBB70alteredBB, %553
  store i32 0, i32* %6, align 4
  %562 = load i32, i32* @x.47
  %563 = load i32, i32* @y.48
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %570

; <label>:570:                                    ; preds = %628, %originalBBpart272
  %571 = load i32, i32* %6, align 4
  %572 = load i32, i32* %9, align 4
  %573 = icmp slt i32 %571, %572
  br i1 %573, label %574, label %631

; <label>:574:                                    ; preds = %570
  %575 = load i32, i32* @x.47
  %576 = load i32, i32* @y.48
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %574
  %583 = load %union.tree_node*, %union.tree_node** %4, align 8
  %584 = bitcast %union.tree_node* %583 to %struct.tree_exp*
  %585 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %584, i32 0, i32 2
  %586 = load i32, i32* %6, align 4
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %585, i64 0, i64 %587
  %589 = load %union.tree_node*, %union.tree_node** %588, align 8
  %590 = icmp ne %union.tree_node* %589, null
  %591 = load i32, i32* @x.47
  %592 = load i32, i32* @y.48
  %593 = sub i32 %591, 1
  %594 = mul i32 %591, %593
  %595 = urem i32 %594, 2
  %596 = icmp eq i32 %595, 0
  %597 = icmp slt i32 %592, 10
  %598 = or i1 %596, %597
  br i1 %598, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %590, label %599, label %611

; <label>:599:                                    ; preds = %originalBBpart276
  %600 = load %union.tree_node*, %union.tree_node** %4, align 8
  %601 = bitcast %union.tree_node* %600 to %struct.tree_exp*
  %602 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %601, i32 0, i32 2
  %603 = load i32, i32* %6, align 4
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %602, i64 0, i64 %604
  %606 = load %union.tree_node*, %union.tree_node** %605, align 8
  %607 = load i32, i32* %5, align 4
  %608 = call i32 @calls_function_1(%union.tree_node* %606, i32 %607)
  %609 = icmp ne i32 %608, 0
  br i1 %609, label %610, label %611

; <label>:610:                                    ; preds = %599
  store i32 1, i32* %3, align 4
  br label %632

; <label>:611:                                    ; preds = %599, %originalBBpart276
  %612 = load i32, i32* @x.47
  %613 = load i32, i32* @y.48
  %614 = sub i32 %612, 1
  %615 = mul i32 %612, %614
  %616 = urem i32 %615, 2
  %617 = icmp eq i32 %616, 0
  %618 = icmp slt i32 %613, 10
  %619 = or i1 %617, %618
  br i1 %619, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %originalBB78alteredBB, %611
  %620 = load i32, i32* @x.47
  %621 = load i32, i32* @y.48
  %622 = sub i32 %620, 1
  %623 = mul i32 %620, %622
  %624 = urem i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = icmp slt i32 %621, 10
  %627 = or i1 %625, %626
  br i1 %627, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %628

; <label>:628:                                    ; preds = %originalBBpart280
  %629 = load i32, i32* %6, align 4
  %630 = add nsw i32 %629, 1
  store i32 %630, i32* %6, align 4
  br label %570

; <label>:631:                                    ; preds = %570
  store i32 0, i32* %3, align 4
  br label %632

; <label>:632:                                    ; preds = %631, %610, %552, %500, %461, %448, %originalBBpart248, %originalBBpart236, %268, %248, %226, %217, %originalBBpart216, %141, %101, %65, %originalBBpart2
  %633 = load i32, i32* %3, align 4
  ret i32 %633

originalBBalteredBB:                              ; preds = %originalBB, %27
  store i32 1, i32* %3, align 4
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %634 = load i32, i32* %5, align 4
  %635 = icmp eq i32 %634, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %143
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %161
  %636 = load %union.tree_node*, %union.tree_node** %4, align 8
  %637 = bitcast %union.tree_node* %636 to %struct.tree_exp*
  %638 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %637, i32 0, i32 2
  %639 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %638, i64 0, i64 1
  %640 = load %union.tree_node*, %union.tree_node** %639, align 8
  store %union.tree_node* %640, %union.tree_node** %10, align 8
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %194
  store i32 1, i32* %3, align 4
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %227
  %641 = load %union.tree_node*, %union.tree_node** %4, align 8
  %642 = load %union.tree_node*, %union.tree_node** @calls_function_save_exprs, align 8
  %643 = call %union.tree_node* @value_member(%union.tree_node* %641, %union.tree_node* %642)
  %644 = icmp ne %union.tree_node* %643, null
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %276
  %645 = load %union.tree_node*, %union.tree_node** %11, align 8
  %646 = icmp ne %union.tree_node* %645, null
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %295
  %647 = load %union.tree_node*, %union.tree_node** %11, align 8
  %648 = bitcast %union.tree_node* %647 to %struct.tree_decl*
  %649 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %648, i32 0, i32 12
  %650 = load %union.tree_node*, %union.tree_node** %649, align 8
  %651 = icmp ne %union.tree_node* %650, null
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %317
  %652 = load %union.tree_node*, %union.tree_node** %11, align 8
  %653 = bitcast %union.tree_node* %652 to %struct.tree_decl*
  %654 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %653, i32 0, i32 12
  %655 = load %union.tree_node*, %union.tree_node** %654, align 8
  %656 = load i32, i32* %5, align 4
  %657 = call i32 @calls_function_1(%union.tree_node* %655, i32 %656)
  %658 = icmp ne i32 %657, 0
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %341
  store i32 1, i32* %3, align 4
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %359
  %659 = load %union.tree_node*, %union.tree_node** %11, align 8
  %660 = bitcast %union.tree_node* %659 to %struct.tree_common*
  %661 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %660, i32 0, i32 0
  %662 = load %union.tree_node*, %union.tree_node** %661, align 8
  store %union.tree_node* %662, %union.tree_node** %11, align 8
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %385
  %663 = load %union.tree_node*, %union.tree_node** %12, align 8
  %664 = icmp ne %union.tree_node* %663, null
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %409
  store i32 1, i32* %3, align 4
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %427
  %665 = load %union.tree_node*, %union.tree_node** %12, align 8
  %666 = bitcast %union.tree_node* %665 to %struct.tree_common*
  %667 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %666, i32 0, i32 0
  %668 = load %union.tree_node*, %union.tree_node** %667, align 8
  store %union.tree_node* %668, %union.tree_node** %12, align 8
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %462
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %479
  %669 = load %union.tree_node*, %union.tree_node** %4, align 8
  %670 = bitcast %union.tree_node* %669 to %struct.tree_common*
  %671 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %670, i32 0, i32 0
  %672 = load %union.tree_node*, %union.tree_node** %671, align 8
  store %union.tree_node* %672, %union.tree_node** %4, align 8
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %511
  %673 = load i32, i32* %8, align 4
  %674 = icmp eq i32 %673, 101
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %530
  %675 = load i32, i32* %8, align 4
  %676 = icmp ne i32 %675, 114
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %553
  store i32 0, i32* %6, align 4
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %574
  %677 = load %union.tree_node*, %union.tree_node** %4, align 8
  %678 = bitcast %union.tree_node* %677 to %struct.tree_exp*
  %679 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %678, i32 0, i32 2
  %680 = load i32, i32* %6, align 4
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %679, i64 0, i64 %681
  %683 = load %union.tree_node*, %union.tree_node** %682, align 8
  %684 = icmp ne %union.tree_node* %683, null
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %611
  br label %originalBB78
}

declare i32 @first_rtl_op(i32) #1

declare %union.tree_node* @value_member(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @round_up(%union.tree_node*, i32) #1

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #1

declare void @set_mem_alias_set(%struct.rtx_def*, i64) #1

declare void @assemble_external(%union.tree_node*) #1

declare void @push_temp_slots() #1

declare void @pop_temp_slots() #1

declare i32 @rtx_cost(%struct.rtx_def*, i32) #1

declare i32 @preserve_subexpressions_p() #1

declare %struct.rtx_def* @copy_to_mode_reg(i32, %struct.rtx_def*) #1

declare i32 @mode_for_size(i32, i32, i32) #1

declare void @set_mem_align(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @assign_stack_temp(i32, i64, i32) #1

declare void @move_by_pieces(%struct.rtx_def*, %struct.rtx_def*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_sibcall_argument_overlap_1(%struct.rtx_def*) #0 {
  %2 = load i32, i32* @x.49
  %3 = load i32, i32* @y.50
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %originalBBalteredBB, %1
  %10 = alloca i32, align 4
  %11 = alloca %struct.rtx_def*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %11, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %18 = icmp eq %struct.rtx_def* %17, null
  %19 = load i32, i32* @x.49
  %20 = load i32, i32* @y.50
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %44

; <label>:27:                                     ; preds = %originalBBpart2
  %28 = load i32, i32* @x.49
  %29 = load i32, i32* @y.50
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %originalBB1alteredBB, %27
  store i32 0, i32* %10, align 4
  %36 = load i32, i32* @x.49
  %37 = load i32, i32* @y.50
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %399

; <label>:44:                                     ; preds = %originalBBpart2
  %45 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %47 = load i32, i32* %46, align 8
  %48 = and i32 %47, 65535
  store i32 %48, i32* %12, align 4
  %49 = load i32, i32* %12, align 4
  %50 = icmp eq i32 %49, 66
  br i1 %50, label %51, label %242

; <label>:51:                                     ; preds = %44
  %52 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %53, i64 0, i64 0
  %55 = bitcast %union.rtunion_def* %54 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %55, align 8
  %57 = load %struct.function*, %struct.function** @cfun, align 8
  %58 = getelementptr inbounds %struct.function, %struct.function* %57, i32 0, i32 15
  %59 = load %struct.rtx_def*, %struct.rtx_def** %58, align 8
  %60 = icmp eq %struct.rtx_def* %56, %59
  br i1 %60, label %61, label %78

; <label>:61:                                     ; preds = %51
  %62 = load i32, i32* @x.49
  %63 = load i32, i32* @y.50
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %originalBB6alteredBB, %61
  store i32 0, i32* %13, align 4
  %70 = load i32, i32* @x.49
  %71 = load i32, i32* @y.50
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %149

; <label>:78:                                     ; preds = %51
  %79 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %80, i64 0, i64 0
  %82 = bitcast %union.rtunion_def* %81 to %struct.rtx_def**
  %83 = load %struct.rtx_def*, %struct.rtx_def** %82, align 8
  %84 = bitcast %struct.rtx_def* %83 to i32*
  %85 = load i32, i32* %84, align 8
  %86 = and i32 %85, 65535
  %87 = icmp eq i32 %86, 75
  br i1 %87, label %88, label %147

; <label>:88:                                     ; preds = %78
  %89 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1
  %91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %90, i64 0, i64 0
  %92 = bitcast %union.rtunion_def* %91 to %struct.rtx_def**
  %93 = load %struct.rtx_def*, %struct.rtx_def** %92, align 8
  %94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %94, i64 0, i64 0
  %96 = bitcast %union.rtunion_def* %95 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %96, align 8
  %98 = load %struct.function*, %struct.function** @cfun, align 8
  %99 = getelementptr inbounds %struct.function, %struct.function* %98, i32 0, i32 15
  %100 = load %struct.rtx_def*, %struct.rtx_def** %99, align 8
  %101 = icmp eq %struct.rtx_def* %97, %100
  br i1 %101, label %102, label %147

; <label>:102:                                    ; preds = %88
  %103 = load i32, i32* @x.49
  %104 = load i32, i32* @y.50
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %originalBB10alteredBB, %102
  %111 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1
  %113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %112, i64 0, i64 0
  %114 = bitcast %union.rtunion_def* %113 to %struct.rtx_def**
  %115 = load %struct.rtx_def*, %struct.rtx_def** %114, align 8
  %116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %116, i64 0, i64 1
  %118 = bitcast %union.rtunion_def* %117 to %struct.rtx_def**
  %119 = load %struct.rtx_def*, %struct.rtx_def** %118, align 8
  %120 = bitcast %struct.rtx_def* %119 to i32*
  %121 = load i32, i32* %120, align 8
  %122 = and i32 %121, 65535
  %123 = icmp eq i32 %122, 54
  %124 = load i32, i32* @x.49
  %125 = load i32, i32* @y.50
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart215, label %originalBB10alteredBB

originalBBpart215:                                ; preds = %originalBB10
  br i1 %123, label %132, label %147

; <label>:132:                                    ; preds = %originalBBpart215
  %133 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1
  %135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %134, i64 0, i64 0
  %136 = bitcast %union.rtunion_def* %135 to %struct.rtx_def**
  %137 = load %struct.rtx_def*, %struct.rtx_def** %136, align 8
  %138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1
  %139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %138, i64 0, i64 1
  %140 = bitcast %union.rtunion_def* %139 to %struct.rtx_def**
  %141 = load %struct.rtx_def*, %struct.rtx_def** %140, align 8
  %142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1
  %143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %142, i64 0, i64 0
  %144 = bitcast %union.rtunion_def* %143 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = trunc i64 %145 to i32
  store i32 %146, i32* %13, align 4
  br label %148

; <label>:147:                                    ; preds = %originalBBpart215, %88, %78
  store i32 0, i32* %10, align 4
  br label %399

; <label>:148:                                    ; preds = %132
  br label %149

; <label>:149:                                    ; preds = %148, %originalBBpart28
  %150 = load i32, i32* @x.49
  %151 = load i32, i32* @y.50
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %originalBB17alteredBB, %149
  store i32 0, i32* %15, align 4
  %158 = load i32, i32* @x.49
  %159 = load i32, i32* @y.50
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %166

; <label>:166:                                    ; preds = %238, %originalBBpart219
  %167 = load i32, i32* @x.49
  %168 = load i32, i32* @y.50
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %originalBB21alteredBB, %166
  %175 = load i32, i32* %15, align 4
  %176 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %177 = bitcast %struct.rtx_def* %176 to i32*
  %178 = load i32, i32* %177, align 8
  %179 = lshr i32 %178, 16
  %180 = and i32 %179, 255
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = icmp ult i32 %175, %184
  %186 = load i32, i32* @x.49
  %187 = load i32, i32* @y.50
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart234, label %originalBB21alteredBB

originalBBpart234:                                ; preds = %originalBB21
  br i1 %185, label %194, label %241

; <label>:194:                                    ; preds = %originalBBpart234
  %195 = load i32, i32* %13, align 4
  %196 = load i32, i32* %15, align 4
  %197 = add i32 %195, %196
  %198 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8
  %199 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %198, i32 0, i32 0
  %200 = load i32, i32* %199, align 8
  %201 = icmp ult i32 %197, %200
  br i1 %201, label %202, label %237

; <label>:202:                                    ; preds = %194
  %203 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8
  %204 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %203, i32 0, i32 3
  %205 = load i32, i32* %13, align 4
  %206 = load i32, i32* %15, align 4
  %207 = add i32 %205, %206
  %208 = udiv i32 %207, 64
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds [1 x i64], [1 x i64]* %204, i64 0, i64 %209
  %211 = load i64, i64* %210, align 8
  %212 = load i32, i32* %13, align 4
  %213 = load i32, i32* %15, align 4
  %214 = add i32 %212, %213
  %215 = urem i32 %214, 64
  %216 = zext i32 %215 to i64
  %217 = lshr i64 %211, %216
  %218 = and i64 %217, 1
  %219 = icmp ne i64 %218, 0
  br i1 %219, label %220, label %237

; <label>:220:                                    ; preds = %202
  %221 = load i32, i32* @x.49
  %222 = load i32, i32* @y.50
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %originalBB36alteredBB, %220
  store i32 1, i32* %10, align 4
  %229 = load i32, i32* @x.49
  %230 = load i32, i32* @y.50
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br label %399

; <label>:237:                                    ; preds = %202, %194
  br label %238

; <label>:238:                                    ; preds = %237
  %239 = load i32, i32* %15, align 4
  %240 = add i32 %239, 1
  store i32 %240, i32* %15, align 4
  br label %166

; <label>:241:                                    ; preds = %originalBBpart234
  store i32 0, i32* %10, align 4
  br label %399

; <label>:242:                                    ; preds = %44
  %243 = load i32, i32* %12, align 4
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i64 0, i64 %244
  %246 = load i8*, i8** %245, align 8
  store i8* %246, i8** %16, align 8
  store i32 0, i32* %13, align 4
  br label %247

; <label>:247:                                    ; preds = %393, %242
  %248 = load i32, i32* %13, align 4
  %249 = load i32, i32* %12, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i64 0, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = icmp slt i32 %248, %253
  br i1 %254, label %255, label %398

; <label>:255:                                    ; preds = %247
  %256 = load i8*, i8** %16, align 8
  %257 = load i8, i8* %256, align 1
  %258 = sext i8 %257 to i32
  %259 = icmp eq i32 %258, 101
  br i1 %259, label %260, label %272

; <label>:260:                                    ; preds = %255
  %261 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %261, i32 0, i32 1
  %263 = load i32, i32* %13, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %262, i64 0, i64 %264
  %266 = bitcast %union.rtunion_def* %265 to %struct.rtx_def**
  %267 = load %struct.rtx_def*, %struct.rtx_def** %266, align 8
  %268 = call i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %267)
  %269 = icmp ne i32 %268, 0
  br i1 %269, label %270, label %271

; <label>:270:                                    ; preds = %260
  store i32 1, i32* %10, align 4
  br label %399

; <label>:271:                                    ; preds = %260
  br label %392

; <label>:272:                                    ; preds = %255
  %273 = load i32, i32* @x.49
  %274 = load i32, i32* @y.50
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %originalBB40alteredBB, %272
  %281 = load i8*, i8** %16, align 8
  %282 = load i8, i8* %281, align 1
  %283 = sext i8 %282 to i32
  %284 = icmp eq i32 %283, 69
  %285 = load i32, i32* @x.49
  %286 = load i32, i32* @y.50
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br i1 %284, label %293, label %375

; <label>:293:                                    ; preds = %originalBBpart242
  store i32 0, i32* %14, align 4
  br label %294

; <label>:294:                                    ; preds = %originalBBpart264, %293
  %295 = load i32, i32* %14, align 4
  %296 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %297 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %296, i32 0, i32 1
  %298 = load i32, i32* %13, align 4
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %297, i64 0, i64 %299
  %301 = bitcast %union.rtunion_def* %300 to %struct.rtvec_def**
  %302 = load %struct.rtvec_def*, %struct.rtvec_def** %301, align 8
  %303 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %302, i32 0, i32 0
  %304 = load i32, i32* %303, align 8
  %305 = icmp slt i32 %295, %304
  br i1 %305, label %306, label %358

; <label>:306:                                    ; preds = %294
  %307 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %307, i32 0, i32 1
  %309 = load i32, i32* %13, align 4
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %308, i64 0, i64 %310
  %312 = bitcast %union.rtunion_def* %311 to %struct.rtvec_def**
  %313 = load %struct.rtvec_def*, %struct.rtvec_def** %312, align 8
  %314 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %313, i32 0, i32 1
  %315 = load i32, i32* %14, align 4
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %314, i64 0, i64 %316
  %318 = load %struct.rtx_def*, %struct.rtx_def** %317, align 8
  %319 = call i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %318)
  %320 = icmp ne i32 %319, 0
  br i1 %320, label %321, label %322

; <label>:321:                                    ; preds = %306
  store i32 1, i32* %10, align 4
  br label %399

; <label>:322:                                    ; preds = %306
  %323 = load i32, i32* @x.49
  %324 = load i32, i32* @y.50
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %originalBB44alteredBB, %322
  %331 = load i32, i32* @x.49
  %332 = load i32, i32* @y.50
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br label %339

; <label>:339:                                    ; preds = %originalBBpart246
  %340 = load i32, i32* @x.49
  %341 = load i32, i32* @y.50
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %originalBB48alteredBB, %339
  %348 = load i32, i32* %14, align 4
  %349 = add nsw i32 %348, 1
  store i32 %349, i32* %14, align 4
  %350 = load i32, i32* @x.49
  %351 = load i32, i32* @y.50
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart264, label %originalBB48alteredBB

originalBBpart264:                                ; preds = %originalBB48
  br label %294

; <label>:358:                                    ; preds = %294
  %359 = load i32, i32* @x.49
  %360 = load i32, i32* @y.50
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %originalBB66alteredBB, %358
  %367 = load i32, i32* @x.49
  %368 = load i32, i32* @y.50
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %375

; <label>:375:                                    ; preds = %originalBBpart268, %originalBBpart242
  %376 = load i32, i32* @x.49
  %377 = load i32, i32* @y.50
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %originalBB70alteredBB, %375
  %384 = load i32, i32* @x.49
  %385 = load i32, i32* @y.50
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %392

; <label>:392:                                    ; preds = %originalBBpart272, %271
  br label %393

; <label>:393:                                    ; preds = %392
  %394 = load i32, i32* %13, align 4
  %395 = add nsw i32 %394, 1
  store i32 %395, i32* %13, align 4
  %396 = load i8*, i8** %16, align 8
  %397 = getelementptr inbounds i8, i8* %396, i32 1
  store i8* %397, i8** %16, align 8
  br label %247

; <label>:398:                                    ; preds = %247
  store i32 0, i32* %10, align 4
  br label %399

; <label>:399:                                    ; preds = %398, %321, %270, %241, %originalBBpart238, %147, %originalBBpart24
  %400 = load i32, i32* @x.49
  %401 = load i32, i32* @y.50
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %originalBB74alteredBB, %399
  %408 = load i32, i32* %10, align 4
  %409 = load i32, i32* @x.49
  %410 = load i32, i32* @y.50
  %411 = sub i32 %409, 1
  %412 = mul i32 %409, %411
  %413 = urem i32 %412, 2
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %414, %415
  br i1 %416, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  ret i32 %408

originalBBalteredBB:                              ; preds = %originalBB, %1
  %417 = alloca i32, align 4
  %418 = alloca %struct.rtx_def*, align 8
  %419 = alloca i32, align 4
  %420 = alloca i32, align 4
  %421 = alloca i32, align 4
  %422 = alloca i32, align 4
  %423 = alloca i8*, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %418, align 8
  %424 = load %struct.rtx_def*, %struct.rtx_def** %418, align 8
  %425 = icmp eq %struct.rtx_def* %424, null
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  store i32 0, i32* %10, align 4
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %61
  store i32 0, i32* %13, align 4
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %102
  %426 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %427 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %426, i32 0, i32 1
  %428 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %427, i64 0, i64 0
  %429 = bitcast %union.rtunion_def* %428 to %struct.rtx_def**
  %430 = load %struct.rtx_def*, %struct.rtx_def** %429, align 8
  %431 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %430, i32 0, i32 1
  %432 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %431, i64 0, i64 1
  %433 = bitcast %union.rtunion_def* %432 to %struct.rtx_def**
  %434 = load %struct.rtx_def*, %struct.rtx_def** %433, align 8
  %435 = bitcast %struct.rtx_def* %434 to i32*
  %436 = load i32, i32* %435, align 8
  %_ = shl i32 %436, 65535
  %_11 = sub i32 0, %436
  %gen = add i32 %_11, 65535
  %_12 = sub i32 %436, 65535
  %gen13 = mul i32 %_12, 65535
  %437 = and i32 %436, 65535
  %438 = icmp eq i32 %437, 54
  br label %originalBB10

originalBB17alteredBB:                            ; preds = %originalBB17, %149
  store i32 0, i32* %15, align 4
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %166
  %439 = load i32, i32* %15, align 4
  %440 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8
  %441 = bitcast %struct.rtx_def* %440 to i32*
  %442 = load i32, i32* %441, align 8
  %_22 = sub i32 %442, 16
  %gen23 = mul i32 %_22, 16
  %_24 = sub i32 %442, 16
  %gen25 = mul i32 %_24, 16
  %443 = lshr i32 %442, 16
  %_26 = shl i32 %443, 255
  %_27 = shl i32 %443, 255
  %_28 = shl i32 %443, 255
  %_29 = sub i32 %443, 255
  %gen30 = mul i32 %_29, 255
  %_31 = sub i32 0, %443
  %gen32 = add i32 %_31, 255
  %444 = and i32 %443, 255
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i64 0, i64 %445
  %447 = load i8, i8* %446, align 1
  %448 = zext i8 %447 to i32
  %449 = icmp ult i32 %439, %448
  br label %originalBB21

originalBB36alteredBB:                            ; preds = %originalBB36, %220
  store i32 1, i32* %10, align 4
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %272
  %450 = load i8*, i8** %16, align 8
  %451 = load i8, i8* %450, align 1
  %452 = sext i8 %451 to i32
  %453 = icmp eq i32 %452, 69
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %322
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %339
  %454 = load i32, i32* %14, align 4
  %_49 = sub i32 0, %454
  %gen50 = add i32 %_49, 1
  %_51 = sub i32 %454, 1
  %gen52 = mul i32 %_51, 1
  %_53 = shl i32 %454, 1
  %_54 = sub i32 0, %454
  %gen55 = add i32 %_54, 1
  %_56 = shl i32 %454, 1
  %_57 = shl i32 %454, 1
  %_58 = sub i32 %454, 1
  %gen59 = mul i32 %_58, 1
  %_60 = shl i32 %454, 1
  %_61 = sub i32 0, %454
  %gen62 = add i32 %_61, 1
  %455 = add nsw i32 %454, 1
  store i32 %455, i32* %14, align 4
  br label %originalBB48

originalBB66alteredBB:                            ; preds = %originalBB66, %358
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %375
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %399
  %456 = load i32, i32* %10, align 4
  br label %originalBB74
}

declare void @emit_group_load(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

declare void @move_block_to_reg(i32, %struct.rtx_def*, i32, i32) #1

declare void @use_group_regs(%struct.rtx_def**, %struct.rtx_def*) #1

declare void @use_regs(%struct.rtx_def**, i32, i32) #1

declare %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_call_pop(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_call_value(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_call(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare void @adjust_stack(%struct.rtx_def*) #1

declare %union.tree_node* @type_for_mode(i32, i32) #1

declare void @assemble_external_libcall(%struct.rtx_def*) #1

declare void @emit_push_insn(%struct.rtx_def*, i32, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @hard_libcall_value(i32) #1

declare %union.tree_node* @get_identifier(i8*) #1

declare %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #1

declare void @error(i8*, ...) #1

declare void @free_temp_slots() #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
